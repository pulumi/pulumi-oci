// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource {
    /**
     * @return Specifies content for the inline artifact.
     * 
     */
    private String base64encodedContent;
    /**
     * @return The URL of an OCIR repository.
     * 
     */
    private String chartUrl;
    /**
     * @return Specifies the artifact path in the repository.
     * 
     */
    private String deployArtifactPath;
    /**
     * @return Specifies types of artifact sources.
     * 
     */
    private String deployArtifactSourceType;
    /**
     * @return Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    private String deployArtifactVersion;
    /**
     * @return The source of the verification material.
     * 
     */
    private List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources;
    /**
     * @return Specifies image digest for the version of the image.
     * 
     */
    private String imageDigest;
    /**
     * @return Specifies OCIR Image Path - optionally include tag.
     * 
     */
    private String imageUri;
    /**
     * @return The OCID of a repository
     * 
     */
    private String repositoryId;

    private GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource() {}
    /**
     * @return Specifies content for the inline artifact.
     * 
     */
    public String base64encodedContent() {
        return this.base64encodedContent;
    }
    /**
     * @return The URL of an OCIR repository.
     * 
     */
    public String chartUrl() {
        return this.chartUrl;
    }
    /**
     * @return Specifies the artifact path in the repository.
     * 
     */
    public String deployArtifactPath() {
        return this.deployArtifactPath;
    }
    /**
     * @return Specifies types of artifact sources.
     * 
     */
    public String deployArtifactSourceType() {
        return this.deployArtifactSourceType;
    }
    /**
     * @return Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    public String deployArtifactVersion() {
        return this.deployArtifactVersion;
    }
    /**
     * @return The source of the verification material.
     * 
     */
    public List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources() {
        return this.helmVerificationKeySources;
    }
    /**
     * @return Specifies image digest for the version of the image.
     * 
     */
    public String imageDigest() {
        return this.imageDigest;
    }
    /**
     * @return Specifies OCIR Image Path - optionally include tag.
     * 
     */
    public String imageUri() {
        return this.imageUri;
    }
    /**
     * @return The OCID of a repository
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String base64encodedContent;
        private String chartUrl;
        private String deployArtifactPath;
        private String deployArtifactSourceType;
        private String deployArtifactVersion;
        private List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources;
        private String imageDigest;
        private String imageUri;
        private String repositoryId;
        public Builder() {}
        public Builder(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64encodedContent = defaults.base64encodedContent;
    	      this.chartUrl = defaults.chartUrl;
    	      this.deployArtifactPath = defaults.deployArtifactPath;
    	      this.deployArtifactSourceType = defaults.deployArtifactSourceType;
    	      this.deployArtifactVersion = defaults.deployArtifactVersion;
    	      this.helmVerificationKeySources = defaults.helmVerificationKeySources;
    	      this.imageDigest = defaults.imageDigest;
    	      this.imageUri = defaults.imageUri;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder base64encodedContent(String base64encodedContent) {
            this.base64encodedContent = Objects.requireNonNull(base64encodedContent);
            return this;
        }
        @CustomType.Setter
        public Builder chartUrl(String chartUrl) {
            this.chartUrl = Objects.requireNonNull(chartUrl);
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactPath(String deployArtifactPath) {
            this.deployArtifactPath = Objects.requireNonNull(deployArtifactPath);
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactSourceType(String deployArtifactSourceType) {
            this.deployArtifactSourceType = Objects.requireNonNull(deployArtifactSourceType);
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactVersion(String deployArtifactVersion) {
            this.deployArtifactVersion = Objects.requireNonNull(deployArtifactVersion);
            return this;
        }
        @CustomType.Setter
        public Builder helmVerificationKeySources(List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources) {
            this.helmVerificationKeySources = Objects.requireNonNull(helmVerificationKeySources);
            return this;
        }
        public Builder helmVerificationKeySources(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource... helmVerificationKeySources) {
            return helmVerificationKeySources(List.of(helmVerificationKeySources));
        }
        @CustomType.Setter
        public Builder imageDigest(String imageDigest) {
            this.imageDigest = Objects.requireNonNull(imageDigest);
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(String imageUri) {
            this.imageUri = Objects.requireNonNull(imageUri);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        public GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource build() {
            final var o = new GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource();
            o.base64encodedContent = base64encodedContent;
            o.chartUrl = chartUrl;
            o.deployArtifactPath = deployArtifactPath;
            o.deployArtifactSourceType = deployArtifactSourceType;
            o.deployArtifactVersion = deployArtifactVersion;
            o.helmVerificationKeySources = helmVerificationKeySources;
            o.imageDigest = imageDigest;
            o.imageUri = imageUri;
            o.repositoryId = repositoryId;
            return o;
        }
    }
}
