// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetDeployStageApprovalPolicy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageBlueBackendIp;
import com.pulumi.oci.DevOps.outputs.GetDeployStageBlueGreenStrategy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageCanaryStrategy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageContainerConfig;
import com.pulumi.oci.DevOps.outputs.GetDeployStageDeployStagePredecessorCollection;
import com.pulumi.oci.DevOps.outputs.GetDeployStageFailurePolicy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageGreenBackendIp;
import com.pulumi.oci.DevOps.outputs.GetDeployStageLoadBalancerConfig;
import com.pulumi.oci.DevOps.outputs.GetDeployStageProductionLoadBalancerConfig;
import com.pulumi.oci.DevOps.outputs.GetDeployStageRollbackPolicy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageRolloutPolicy;
import com.pulumi.oci.DevOps.outputs.GetDeployStageSetString;
import com.pulumi.oci.DevOps.outputs.GetDeployStageSetValue;
import com.pulumi.oci.DevOps.outputs.GetDeployStageTestLoadBalancerConfig;
import com.pulumi.oci.DevOps.outputs.GetDeployStageWaitCriteria;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeployStageResult {
    /**
     * @return Specifies the approval policy.
     * 
     */
    private List<GetDeployStageApprovalPolicy> approvalPolicies;
    /**
     * @return Disable pre/post upgrade hooks. Set to false by default.
     * 
     */
    private Boolean areHooksEnabled;
    /**
     * @return Collection of backend environment IP addresses.
     * 
     */
    private List<GetDeployStageBlueBackendIp> blueBackendIps;
    /**
     * @return Specifies the required blue green release strategy for OKE deployment.
     * 
     */
    private List<GetDeployStageBlueGreenStrategy> blueGreenStrategies;
    /**
     * @return Specifies the required canary release strategy for OKE deployment.
     * 
     */
    private List<GetDeployStageCanaryStrategy> canaryStrategies;
    /**
     * @return The OCID of the artifact that contains the command specification.
     * 
     */
    private String commandSpecDeployArtifactId;
    /**
     * @return The OCID of the compartment where the ContainerInstance will be created.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the upstream compute instance group blue-green deployment stage in this pipeline.
     * 
     */
    private String computeInstanceGroupBlueGreenDeploymentDeployStageId;
    /**
     * @return The OCID of an upstream compute instance group canary deployment stage ID in this pipeline.
     * 
     */
    private String computeInstanceGroupCanaryDeployStageId;
    /**
     * @return A compute instance group canary traffic shift stage OCID for load balancer.
     * 
     */
    private String computeInstanceGroupCanaryTrafficShiftDeployStageId;
    /**
     * @return A compute instance group environment OCID for rolling deployment.
     * 
     */
    private String computeInstanceGroupDeployEnvironmentId;
    /**
     * @return User provided key and value pair configuration, which is assigned through constants or parameter.
     * 
     */
    private Map<String,Object> config;
    /**
     * @return Specifies the container configuration.
     * 
     */
    private List<GetDeployStageContainerConfig> containerConfigs;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Optional artifact OCID. The artifact will be included in the body for the function invocation during the stage&#39;s execution. If the DeployArtifact.argumentSubstituitionMode is set to SUBSTITUTE_PLACEHOLDERS, then the pipeline parameter values will be used to replace the placeholders in the artifact content.
     * 
     */
    private String deployArtifactId;
    /**
     * @return The list of file artifact OCIDs to deploy.
     * 
     */
    private List<String> deployArtifactIds;
    /**
     * @return First compute instance group environment OCID for deployment.
     * 
     */
    private String deployEnvironmentIdA;
    /**
     * @return Second compute instance group environment OCID for deployment.
     * 
     */
    private String deployEnvironmentIdB;
    /**
     * @return The OCID of a pipeline.
     * 
     */
    private String deployPipelineId;
    private String deployStageId;
    /**
     * @return Collection containing the predecessors of a stage.
     * 
     */
    private List<GetDeployStageDeployStagePredecessorCollection> deployStagePredecessorCollections;
    /**
     * @return Deployment stage type.
     * 
     */
    private String deployStageType;
    /**
     * @return The OCID of the artifact that contains the deployment specification.
     * 
     */
    private String deploymentSpecDeployArtifactId;
    /**
     * @return Optional description about the deployment stage.
     * 
     */
    private String description;
    /**
     * @return Deployment stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return A Docker image artifact OCID.
     * 
     */
    private String dockerImageDeployArtifactId;
    /**
     * @return Specifies a failure policy for a compute instance group rolling deployment stage.
     * 
     */
    private List<GetDeployStageFailurePolicy> failurePolicies;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Function environment OCID.
     * 
     */
    private String functionDeployEnvironmentId;
    /**
     * @return Timeout for execution of the Function. Value in seconds.
     * 
     */
    private Integer functionTimeoutInSeconds;
    /**
     * @return Collection of backend environment IP addresses.
     * 
     */
    private List<GetDeployStageGreenBackendIp> greenBackendIps;
    /**
     * @return Helm chart artifact OCID.
     * 
     */
    private String helmChartDeployArtifactId;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return A boolean flag specifies whether this stage executes asynchronously.
     * 
     */
    private Boolean isAsync;
    /**
     * @return Enables helm --debug option to stream output to tf stdout. Set to false by default.
     * 
     */
    private Boolean isDebugEnabled;
    /**
     * @return Force resource update through delete; or if required, recreate. Set to false by default.
     * 
     */
    private Boolean isForceEnabled;
    /**
     * @return A boolean flag specifies whether the invoked function must be validated.
     * 
     */
    private Boolean isValidationEnabled;
    /**
     * @return List of Kubernetes manifest artifact OCIDs.
     * 
     */
    private List<String> kubernetesManifestDeployArtifactIds;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    private List<GetDeployStageLoadBalancerConfig> loadBalancerConfigs;
    /**
     * @return Limit the maximum number of revisions saved per release. Use 0 for no limit. Set to 10 by default
     * 
     */
    private Integer maxHistory;
    /**
     * @return Maximum usable memory for the Function (in MB).
     * 
     */
    private String maxMemoryInMbs;
    /**
     * @return Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
     * 
     */
    private String namespace;
    /**
     * @return The OCID of the upstream OKE blue-green deployment stage in this pipeline.
     * 
     */
    private String okeBlueGreenDeployStageId;
    /**
     * @return The OCID of an upstream OKE canary deployment stage in this pipeline.
     * 
     */
    private String okeCanaryDeployStageId;
    /**
     * @return The OCID of an upstream OKE canary deployment traffic shift stage in this pipeline.
     * 
     */
    private String okeCanaryTrafficShiftDeployStageId;
    /**
     * @return Kubernetes cluster environment OCID for deployment.
     * 
     */
    private String okeClusterDeployEnvironmentId;
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    private List<GetDeployStageProductionLoadBalancerConfig> productionLoadBalancerConfigs;
    /**
     * @return The OCID of a project.
     * 
     */
    private String projectId;
    /**
     * @return Release name of the Helm chart.
     * 
     */
    private String releaseName;
    /**
     * @return Specifies the rollback policy. This is initiated on the failure of certain stage types.
     * 
     */
    private List<GetDeployStageRollbackPolicy> rollbackPolicies;
    /**
     * @return Description of rollout policy for load balancer traffic shift stage.
     * 
     */
    private List<GetDeployStageRolloutPolicy> rolloutPolicies;
    /**
     * @return Specifies the name and value pairs to set helm values.
     * 
     */
    private List<GetDeployStageSetString> setStrings;
    /**
     * @return Specifies the name and value pairs to set helm values.
     * 
     */
    private List<GetDeployStageSetValue> setValues;
    /**
     * @return Allow deletion of new resources created during when an upgrade fails. Set to false by default.
     * 
     */
    private Boolean shouldCleanupOnFail;
    /**
     * @return Waits until all the resources are in a ready state to mark the release as successful. Set to false by default.
     * 
     */
    private Boolean shouldNotWait;
    /**
     * @return During upgrade, reset the values to the ones built into the chart. It overrides shouldReuseValues. Set to false by default.
     * 
     */
    private Boolean shouldResetValues;
    /**
     * @return During upgrade, reuse the values of the last release and merge overrides from the command line. Set to false by default.
     * 
     */
    private Boolean shouldReuseValues;
    /**
     * @return If set, no CRDs are installed. By default, CRDs are installed only if they are not present already. Set to false by default.
     * 
     */
    private Boolean shouldSkipCrds;
    /**
     * @return If set, renders subchart notes along with the parent. Set to false by default.
     * 
     */
    private Boolean shouldSkipRenderSubchartNotes;
    /**
     * @return The current state of the deployment stage.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    private List<GetDeployStageTestLoadBalancerConfig> testLoadBalancerConfigs;
    /**
     * @return Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return Time to wait for execution of a Shell/Helm stage. Defaults to 36000 seconds for Shell and 300 seconds for Helm Stage
     * 
     */
    private Integer timeoutInSeconds;
    /**
     * @return Specifies the target or destination backend set.
     * 
     */
    private String trafficShiftTarget;
    /**
     * @return List of values.yaml file artifact OCIDs.
     * 
     */
    private List<String> valuesArtifactIds;
    /**
     * @return Specifies wait criteria for the Wait stage.
     * 
     */
    private List<GetDeployStageWaitCriteria> waitCriterias;

    private GetDeployStageResult() {}
    /**
     * @return Specifies the approval policy.
     * 
     */
    public List<GetDeployStageApprovalPolicy> approvalPolicies() {
        return this.approvalPolicies;
    }
    /**
     * @return Disable pre/post upgrade hooks. Set to false by default.
     * 
     */
    public Boolean areHooksEnabled() {
        return this.areHooksEnabled;
    }
    /**
     * @return Collection of backend environment IP addresses.
     * 
     */
    public List<GetDeployStageBlueBackendIp> blueBackendIps() {
        return this.blueBackendIps;
    }
    /**
     * @return Specifies the required blue green release strategy for OKE deployment.
     * 
     */
    public List<GetDeployStageBlueGreenStrategy> blueGreenStrategies() {
        return this.blueGreenStrategies;
    }
    /**
     * @return Specifies the required canary release strategy for OKE deployment.
     * 
     */
    public List<GetDeployStageCanaryStrategy> canaryStrategies() {
        return this.canaryStrategies;
    }
    /**
     * @return The OCID of the artifact that contains the command specification.
     * 
     */
    public String commandSpecDeployArtifactId() {
        return this.commandSpecDeployArtifactId;
    }
    /**
     * @return The OCID of the compartment where the ContainerInstance will be created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the upstream compute instance group blue-green deployment stage in this pipeline.
     * 
     */
    public String computeInstanceGroupBlueGreenDeploymentDeployStageId() {
        return this.computeInstanceGroupBlueGreenDeploymentDeployStageId;
    }
    /**
     * @return The OCID of an upstream compute instance group canary deployment stage ID in this pipeline.
     * 
     */
    public String computeInstanceGroupCanaryDeployStageId() {
        return this.computeInstanceGroupCanaryDeployStageId;
    }
    /**
     * @return A compute instance group canary traffic shift stage OCID for load balancer.
     * 
     */
    public String computeInstanceGroupCanaryTrafficShiftDeployStageId() {
        return this.computeInstanceGroupCanaryTrafficShiftDeployStageId;
    }
    /**
     * @return A compute instance group environment OCID for rolling deployment.
     * 
     */
    public String computeInstanceGroupDeployEnvironmentId() {
        return this.computeInstanceGroupDeployEnvironmentId;
    }
    /**
     * @return User provided key and value pair configuration, which is assigned through constants or parameter.
     * 
     */
    public Map<String,Object> config() {
        return this.config;
    }
    /**
     * @return Specifies the container configuration.
     * 
     */
    public List<GetDeployStageContainerConfig> containerConfigs() {
        return this.containerConfigs;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Optional artifact OCID. The artifact will be included in the body for the function invocation during the stage&#39;s execution. If the DeployArtifact.argumentSubstituitionMode is set to SUBSTITUTE_PLACEHOLDERS, then the pipeline parameter values will be used to replace the placeholders in the artifact content.
     * 
     */
    public String deployArtifactId() {
        return this.deployArtifactId;
    }
    /**
     * @return The list of file artifact OCIDs to deploy.
     * 
     */
    public List<String> deployArtifactIds() {
        return this.deployArtifactIds;
    }
    /**
     * @return First compute instance group environment OCID for deployment.
     * 
     */
    public String deployEnvironmentIdA() {
        return this.deployEnvironmentIdA;
    }
    /**
     * @return Second compute instance group environment OCID for deployment.
     * 
     */
    public String deployEnvironmentIdB() {
        return this.deployEnvironmentIdB;
    }
    /**
     * @return The OCID of a pipeline.
     * 
     */
    public String deployPipelineId() {
        return this.deployPipelineId;
    }
    public String deployStageId() {
        return this.deployStageId;
    }
    /**
     * @return Collection containing the predecessors of a stage.
     * 
     */
    public List<GetDeployStageDeployStagePredecessorCollection> deployStagePredecessorCollections() {
        return this.deployStagePredecessorCollections;
    }
    /**
     * @return Deployment stage type.
     * 
     */
    public String deployStageType() {
        return this.deployStageType;
    }
    /**
     * @return The OCID of the artifact that contains the deployment specification.
     * 
     */
    public String deploymentSpecDeployArtifactId() {
        return this.deploymentSpecDeployArtifactId;
    }
    /**
     * @return Optional description about the deployment stage.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Deployment stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A Docker image artifact OCID.
     * 
     */
    public String dockerImageDeployArtifactId() {
        return this.dockerImageDeployArtifactId;
    }
    /**
     * @return Specifies a failure policy for a compute instance group rolling deployment stage.
     * 
     */
    public List<GetDeployStageFailurePolicy> failurePolicies() {
        return this.failurePolicies;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Function environment OCID.
     * 
     */
    public String functionDeployEnvironmentId() {
        return this.functionDeployEnvironmentId;
    }
    /**
     * @return Timeout for execution of the Function. Value in seconds.
     * 
     */
    public Integer functionTimeoutInSeconds() {
        return this.functionTimeoutInSeconds;
    }
    /**
     * @return Collection of backend environment IP addresses.
     * 
     */
    public List<GetDeployStageGreenBackendIp> greenBackendIps() {
        return this.greenBackendIps;
    }
    /**
     * @return Helm chart artifact OCID.
     * 
     */
    public String helmChartDeployArtifactId() {
        return this.helmChartDeployArtifactId;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A boolean flag specifies whether this stage executes asynchronously.
     * 
     */
    public Boolean isAsync() {
        return this.isAsync;
    }
    /**
     * @return Enables helm --debug option to stream output to tf stdout. Set to false by default.
     * 
     */
    public Boolean isDebugEnabled() {
        return this.isDebugEnabled;
    }
    /**
     * @return Force resource update through delete; or if required, recreate. Set to false by default.
     * 
     */
    public Boolean isForceEnabled() {
        return this.isForceEnabled;
    }
    /**
     * @return A boolean flag specifies whether the invoked function must be validated.
     * 
     */
    public Boolean isValidationEnabled() {
        return this.isValidationEnabled;
    }
    /**
     * @return List of Kubernetes manifest artifact OCIDs.
     * 
     */
    public List<String> kubernetesManifestDeployArtifactIds() {
        return this.kubernetesManifestDeployArtifactIds;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    public List<GetDeployStageLoadBalancerConfig> loadBalancerConfigs() {
        return this.loadBalancerConfigs;
    }
    /**
     * @return Limit the maximum number of revisions saved per release. Use 0 for no limit. Set to 10 by default
     * 
     */
    public Integer maxHistory() {
        return this.maxHistory;
    }
    /**
     * @return Maximum usable memory for the Function (in MB).
     * 
     */
    public String maxMemoryInMbs() {
        return this.maxMemoryInMbs;
    }
    /**
     * @return Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The OCID of the upstream OKE blue-green deployment stage in this pipeline.
     * 
     */
    public String okeBlueGreenDeployStageId() {
        return this.okeBlueGreenDeployStageId;
    }
    /**
     * @return The OCID of an upstream OKE canary deployment stage in this pipeline.
     * 
     */
    public String okeCanaryDeployStageId() {
        return this.okeCanaryDeployStageId;
    }
    /**
     * @return The OCID of an upstream OKE canary deployment traffic shift stage in this pipeline.
     * 
     */
    public String okeCanaryTrafficShiftDeployStageId() {
        return this.okeCanaryTrafficShiftDeployStageId;
    }
    /**
     * @return Kubernetes cluster environment OCID for deployment.
     * 
     */
    public String okeClusterDeployEnvironmentId() {
        return this.okeClusterDeployEnvironmentId;
    }
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    public List<GetDeployStageProductionLoadBalancerConfig> productionLoadBalancerConfigs() {
        return this.productionLoadBalancerConfigs;
    }
    /**
     * @return The OCID of a project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Release name of the Helm chart.
     * 
     */
    public String releaseName() {
        return this.releaseName;
    }
    /**
     * @return Specifies the rollback policy. This is initiated on the failure of certain stage types.
     * 
     */
    public List<GetDeployStageRollbackPolicy> rollbackPolicies() {
        return this.rollbackPolicies;
    }
    /**
     * @return Description of rollout policy for load balancer traffic shift stage.
     * 
     */
    public List<GetDeployStageRolloutPolicy> rolloutPolicies() {
        return this.rolloutPolicies;
    }
    /**
     * @return Specifies the name and value pairs to set helm values.
     * 
     */
    public List<GetDeployStageSetString> setStrings() {
        return this.setStrings;
    }
    /**
     * @return Specifies the name and value pairs to set helm values.
     * 
     */
    public List<GetDeployStageSetValue> setValues() {
        return this.setValues;
    }
    /**
     * @return Allow deletion of new resources created during when an upgrade fails. Set to false by default.
     * 
     */
    public Boolean shouldCleanupOnFail() {
        return this.shouldCleanupOnFail;
    }
    /**
     * @return Waits until all the resources are in a ready state to mark the release as successful. Set to false by default.
     * 
     */
    public Boolean shouldNotWait() {
        return this.shouldNotWait;
    }
    /**
     * @return During upgrade, reset the values to the ones built into the chart. It overrides shouldReuseValues. Set to false by default.
     * 
     */
    public Boolean shouldResetValues() {
        return this.shouldResetValues;
    }
    /**
     * @return During upgrade, reuse the values of the last release and merge overrides from the command line. Set to false by default.
     * 
     */
    public Boolean shouldReuseValues() {
        return this.shouldReuseValues;
    }
    /**
     * @return If set, no CRDs are installed. By default, CRDs are installed only if they are not present already. Set to false by default.
     * 
     */
    public Boolean shouldSkipCrds() {
        return this.shouldSkipCrds;
    }
    /**
     * @return If set, renders subchart notes along with the parent. Set to false by default.
     * 
     */
    public Boolean shouldSkipRenderSubchartNotes() {
        return this.shouldSkipRenderSubchartNotes;
    }
    /**
     * @return The current state of the deployment stage.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
     * 
     */
    public List<GetDeployStageTestLoadBalancerConfig> testLoadBalancerConfigs() {
        return this.testLoadBalancerConfigs;
    }
    /**
     * @return Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Time to wait for execution of a Shell/Helm stage. Defaults to 36000 seconds for Shell and 300 seconds for Helm Stage
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return Specifies the target or destination backend set.
     * 
     */
    public String trafficShiftTarget() {
        return this.trafficShiftTarget;
    }
    /**
     * @return List of values.yaml file artifact OCIDs.
     * 
     */
    public List<String> valuesArtifactIds() {
        return this.valuesArtifactIds;
    }
    /**
     * @return Specifies wait criteria for the Wait stage.
     * 
     */
    public List<GetDeployStageWaitCriteria> waitCriterias() {
        return this.waitCriterias;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeployStageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDeployStageApprovalPolicy> approvalPolicies;
        private Boolean areHooksEnabled;
        private List<GetDeployStageBlueBackendIp> blueBackendIps;
        private List<GetDeployStageBlueGreenStrategy> blueGreenStrategies;
        private List<GetDeployStageCanaryStrategy> canaryStrategies;
        private String commandSpecDeployArtifactId;
        private String compartmentId;
        private String computeInstanceGroupBlueGreenDeploymentDeployStageId;
        private String computeInstanceGroupCanaryDeployStageId;
        private String computeInstanceGroupCanaryTrafficShiftDeployStageId;
        private String computeInstanceGroupDeployEnvironmentId;
        private Map<String,Object> config;
        private List<GetDeployStageContainerConfig> containerConfigs;
        private Map<String,Object> definedTags;
        private String deployArtifactId;
        private List<String> deployArtifactIds;
        private String deployEnvironmentIdA;
        private String deployEnvironmentIdB;
        private String deployPipelineId;
        private String deployStageId;
        private List<GetDeployStageDeployStagePredecessorCollection> deployStagePredecessorCollections;
        private String deployStageType;
        private String deploymentSpecDeployArtifactId;
        private String description;
        private String displayName;
        private String dockerImageDeployArtifactId;
        private List<GetDeployStageFailurePolicy> failurePolicies;
        private Map<String,Object> freeformTags;
        private String functionDeployEnvironmentId;
        private Integer functionTimeoutInSeconds;
        private List<GetDeployStageGreenBackendIp> greenBackendIps;
        private String helmChartDeployArtifactId;
        private String id;
        private Boolean isAsync;
        private Boolean isDebugEnabled;
        private Boolean isForceEnabled;
        private Boolean isValidationEnabled;
        private List<String> kubernetesManifestDeployArtifactIds;
        private String lifecycleDetails;
        private List<GetDeployStageLoadBalancerConfig> loadBalancerConfigs;
        private Integer maxHistory;
        private String maxMemoryInMbs;
        private String namespace;
        private String okeBlueGreenDeployStageId;
        private String okeCanaryDeployStageId;
        private String okeCanaryTrafficShiftDeployStageId;
        private String okeClusterDeployEnvironmentId;
        private List<GetDeployStageProductionLoadBalancerConfig> productionLoadBalancerConfigs;
        private String projectId;
        private String releaseName;
        private List<GetDeployStageRollbackPolicy> rollbackPolicies;
        private List<GetDeployStageRolloutPolicy> rolloutPolicies;
        private List<GetDeployStageSetString> setStrings;
        private List<GetDeployStageSetValue> setValues;
        private Boolean shouldCleanupOnFail;
        private Boolean shouldNotWait;
        private Boolean shouldResetValues;
        private Boolean shouldReuseValues;
        private Boolean shouldSkipCrds;
        private Boolean shouldSkipRenderSubchartNotes;
        private String state;
        private Map<String,Object> systemTags;
        private List<GetDeployStageTestLoadBalancerConfig> testLoadBalancerConfigs;
        private String timeCreated;
        private String timeUpdated;
        private Integer timeoutInSeconds;
        private String trafficShiftTarget;
        private List<String> valuesArtifactIds;
        private List<GetDeployStageWaitCriteria> waitCriterias;
        public Builder() {}
        public Builder(GetDeployStageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalPolicies = defaults.approvalPolicies;
    	      this.areHooksEnabled = defaults.areHooksEnabled;
    	      this.blueBackendIps = defaults.blueBackendIps;
    	      this.blueGreenStrategies = defaults.blueGreenStrategies;
    	      this.canaryStrategies = defaults.canaryStrategies;
    	      this.commandSpecDeployArtifactId = defaults.commandSpecDeployArtifactId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeInstanceGroupBlueGreenDeploymentDeployStageId = defaults.computeInstanceGroupBlueGreenDeploymentDeployStageId;
    	      this.computeInstanceGroupCanaryDeployStageId = defaults.computeInstanceGroupCanaryDeployStageId;
    	      this.computeInstanceGroupCanaryTrafficShiftDeployStageId = defaults.computeInstanceGroupCanaryTrafficShiftDeployStageId;
    	      this.computeInstanceGroupDeployEnvironmentId = defaults.computeInstanceGroupDeployEnvironmentId;
    	      this.config = defaults.config;
    	      this.containerConfigs = defaults.containerConfigs;
    	      this.definedTags = defaults.definedTags;
    	      this.deployArtifactId = defaults.deployArtifactId;
    	      this.deployArtifactIds = defaults.deployArtifactIds;
    	      this.deployEnvironmentIdA = defaults.deployEnvironmentIdA;
    	      this.deployEnvironmentIdB = defaults.deployEnvironmentIdB;
    	      this.deployPipelineId = defaults.deployPipelineId;
    	      this.deployStageId = defaults.deployStageId;
    	      this.deployStagePredecessorCollections = defaults.deployStagePredecessorCollections;
    	      this.deployStageType = defaults.deployStageType;
    	      this.deploymentSpecDeployArtifactId = defaults.deploymentSpecDeployArtifactId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.dockerImageDeployArtifactId = defaults.dockerImageDeployArtifactId;
    	      this.failurePolicies = defaults.failurePolicies;
    	      this.freeformTags = defaults.freeformTags;
    	      this.functionDeployEnvironmentId = defaults.functionDeployEnvironmentId;
    	      this.functionTimeoutInSeconds = defaults.functionTimeoutInSeconds;
    	      this.greenBackendIps = defaults.greenBackendIps;
    	      this.helmChartDeployArtifactId = defaults.helmChartDeployArtifactId;
    	      this.id = defaults.id;
    	      this.isAsync = defaults.isAsync;
    	      this.isDebugEnabled = defaults.isDebugEnabled;
    	      this.isForceEnabled = defaults.isForceEnabled;
    	      this.isValidationEnabled = defaults.isValidationEnabled;
    	      this.kubernetesManifestDeployArtifactIds = defaults.kubernetesManifestDeployArtifactIds;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.loadBalancerConfigs = defaults.loadBalancerConfigs;
    	      this.maxHistory = defaults.maxHistory;
    	      this.maxMemoryInMbs = defaults.maxMemoryInMbs;
    	      this.namespace = defaults.namespace;
    	      this.okeBlueGreenDeployStageId = defaults.okeBlueGreenDeployStageId;
    	      this.okeCanaryDeployStageId = defaults.okeCanaryDeployStageId;
    	      this.okeCanaryTrafficShiftDeployStageId = defaults.okeCanaryTrafficShiftDeployStageId;
    	      this.okeClusterDeployEnvironmentId = defaults.okeClusterDeployEnvironmentId;
    	      this.productionLoadBalancerConfigs = defaults.productionLoadBalancerConfigs;
    	      this.projectId = defaults.projectId;
    	      this.releaseName = defaults.releaseName;
    	      this.rollbackPolicies = defaults.rollbackPolicies;
    	      this.rolloutPolicies = defaults.rolloutPolicies;
    	      this.setStrings = defaults.setStrings;
    	      this.setValues = defaults.setValues;
    	      this.shouldCleanupOnFail = defaults.shouldCleanupOnFail;
    	      this.shouldNotWait = defaults.shouldNotWait;
    	      this.shouldResetValues = defaults.shouldResetValues;
    	      this.shouldReuseValues = defaults.shouldReuseValues;
    	      this.shouldSkipCrds = defaults.shouldSkipCrds;
    	      this.shouldSkipRenderSubchartNotes = defaults.shouldSkipRenderSubchartNotes;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.testLoadBalancerConfigs = defaults.testLoadBalancerConfigs;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.trafficShiftTarget = defaults.trafficShiftTarget;
    	      this.valuesArtifactIds = defaults.valuesArtifactIds;
    	      this.waitCriterias = defaults.waitCriterias;
        }

        @CustomType.Setter
        public Builder approvalPolicies(List<GetDeployStageApprovalPolicy> approvalPolicies) {
            if (approvalPolicies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "approvalPolicies");
            }
            this.approvalPolicies = approvalPolicies;
            return this;
        }
        public Builder approvalPolicies(GetDeployStageApprovalPolicy... approvalPolicies) {
            return approvalPolicies(List.of(approvalPolicies));
        }
        @CustomType.Setter
        public Builder areHooksEnabled(Boolean areHooksEnabled) {
            if (areHooksEnabled == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "areHooksEnabled");
            }
            this.areHooksEnabled = areHooksEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder blueBackendIps(List<GetDeployStageBlueBackendIp> blueBackendIps) {
            if (blueBackendIps == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "blueBackendIps");
            }
            this.blueBackendIps = blueBackendIps;
            return this;
        }
        public Builder blueBackendIps(GetDeployStageBlueBackendIp... blueBackendIps) {
            return blueBackendIps(List.of(blueBackendIps));
        }
        @CustomType.Setter
        public Builder blueGreenStrategies(List<GetDeployStageBlueGreenStrategy> blueGreenStrategies) {
            if (blueGreenStrategies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "blueGreenStrategies");
            }
            this.blueGreenStrategies = blueGreenStrategies;
            return this;
        }
        public Builder blueGreenStrategies(GetDeployStageBlueGreenStrategy... blueGreenStrategies) {
            return blueGreenStrategies(List.of(blueGreenStrategies));
        }
        @CustomType.Setter
        public Builder canaryStrategies(List<GetDeployStageCanaryStrategy> canaryStrategies) {
            if (canaryStrategies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "canaryStrategies");
            }
            this.canaryStrategies = canaryStrategies;
            return this;
        }
        public Builder canaryStrategies(GetDeployStageCanaryStrategy... canaryStrategies) {
            return canaryStrategies(List.of(canaryStrategies));
        }
        @CustomType.Setter
        public Builder commandSpecDeployArtifactId(String commandSpecDeployArtifactId) {
            if (commandSpecDeployArtifactId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "commandSpecDeployArtifactId");
            }
            this.commandSpecDeployArtifactId = commandSpecDeployArtifactId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeInstanceGroupBlueGreenDeploymentDeployStageId(String computeInstanceGroupBlueGreenDeploymentDeployStageId) {
            if (computeInstanceGroupBlueGreenDeploymentDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "computeInstanceGroupBlueGreenDeploymentDeployStageId");
            }
            this.computeInstanceGroupBlueGreenDeploymentDeployStageId = computeInstanceGroupBlueGreenDeploymentDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder computeInstanceGroupCanaryDeployStageId(String computeInstanceGroupCanaryDeployStageId) {
            if (computeInstanceGroupCanaryDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "computeInstanceGroupCanaryDeployStageId");
            }
            this.computeInstanceGroupCanaryDeployStageId = computeInstanceGroupCanaryDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder computeInstanceGroupCanaryTrafficShiftDeployStageId(String computeInstanceGroupCanaryTrafficShiftDeployStageId) {
            if (computeInstanceGroupCanaryTrafficShiftDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "computeInstanceGroupCanaryTrafficShiftDeployStageId");
            }
            this.computeInstanceGroupCanaryTrafficShiftDeployStageId = computeInstanceGroupCanaryTrafficShiftDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder computeInstanceGroupDeployEnvironmentId(String computeInstanceGroupDeployEnvironmentId) {
            if (computeInstanceGroupDeployEnvironmentId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "computeInstanceGroupDeployEnvironmentId");
            }
            this.computeInstanceGroupDeployEnvironmentId = computeInstanceGroupDeployEnvironmentId;
            return this;
        }
        @CustomType.Setter
        public Builder config(Map<String,Object> config) {
            if (config == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "config");
            }
            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder containerConfigs(List<GetDeployStageContainerConfig> containerConfigs) {
            if (containerConfigs == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "containerConfigs");
            }
            this.containerConfigs = containerConfigs;
            return this;
        }
        public Builder containerConfigs(GetDeployStageContainerConfig... containerConfigs) {
            return containerConfigs(List.of(containerConfigs));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactId(String deployArtifactId) {
            if (deployArtifactId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployArtifactId");
            }
            this.deployArtifactId = deployArtifactId;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactIds(List<String> deployArtifactIds) {
            if (deployArtifactIds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployArtifactIds");
            }
            this.deployArtifactIds = deployArtifactIds;
            return this;
        }
        public Builder deployArtifactIds(String... deployArtifactIds) {
            return deployArtifactIds(List.of(deployArtifactIds));
        }
        @CustomType.Setter
        public Builder deployEnvironmentIdA(String deployEnvironmentIdA) {
            if (deployEnvironmentIdA == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployEnvironmentIdA");
            }
            this.deployEnvironmentIdA = deployEnvironmentIdA;
            return this;
        }
        @CustomType.Setter
        public Builder deployEnvironmentIdB(String deployEnvironmentIdB) {
            if (deployEnvironmentIdB == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployEnvironmentIdB");
            }
            this.deployEnvironmentIdB = deployEnvironmentIdB;
            return this;
        }
        @CustomType.Setter
        public Builder deployPipelineId(String deployPipelineId) {
            if (deployPipelineId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployPipelineId");
            }
            this.deployPipelineId = deployPipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder deployStageId(String deployStageId) {
            if (deployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployStageId");
            }
            this.deployStageId = deployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder deployStagePredecessorCollections(List<GetDeployStageDeployStagePredecessorCollection> deployStagePredecessorCollections) {
            if (deployStagePredecessorCollections == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployStagePredecessorCollections");
            }
            this.deployStagePredecessorCollections = deployStagePredecessorCollections;
            return this;
        }
        public Builder deployStagePredecessorCollections(GetDeployStageDeployStagePredecessorCollection... deployStagePredecessorCollections) {
            return deployStagePredecessorCollections(List.of(deployStagePredecessorCollections));
        }
        @CustomType.Setter
        public Builder deployStageType(String deployStageType) {
            if (deployStageType == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deployStageType");
            }
            this.deployStageType = deployStageType;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentSpecDeployArtifactId(String deploymentSpecDeployArtifactId) {
            if (deploymentSpecDeployArtifactId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "deploymentSpecDeployArtifactId");
            }
            this.deploymentSpecDeployArtifactId = deploymentSpecDeployArtifactId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dockerImageDeployArtifactId(String dockerImageDeployArtifactId) {
            if (dockerImageDeployArtifactId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "dockerImageDeployArtifactId");
            }
            this.dockerImageDeployArtifactId = dockerImageDeployArtifactId;
            return this;
        }
        @CustomType.Setter
        public Builder failurePolicies(List<GetDeployStageFailurePolicy> failurePolicies) {
            if (failurePolicies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "failurePolicies");
            }
            this.failurePolicies = failurePolicies;
            return this;
        }
        public Builder failurePolicies(GetDeployStageFailurePolicy... failurePolicies) {
            return failurePolicies(List.of(failurePolicies));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder functionDeployEnvironmentId(String functionDeployEnvironmentId) {
            if (functionDeployEnvironmentId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "functionDeployEnvironmentId");
            }
            this.functionDeployEnvironmentId = functionDeployEnvironmentId;
            return this;
        }
        @CustomType.Setter
        public Builder functionTimeoutInSeconds(Integer functionTimeoutInSeconds) {
            if (functionTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "functionTimeoutInSeconds");
            }
            this.functionTimeoutInSeconds = functionTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder greenBackendIps(List<GetDeployStageGreenBackendIp> greenBackendIps) {
            if (greenBackendIps == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "greenBackendIps");
            }
            this.greenBackendIps = greenBackendIps;
            return this;
        }
        public Builder greenBackendIps(GetDeployStageGreenBackendIp... greenBackendIps) {
            return greenBackendIps(List.of(greenBackendIps));
        }
        @CustomType.Setter
        public Builder helmChartDeployArtifactId(String helmChartDeployArtifactId) {
            if (helmChartDeployArtifactId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "helmChartDeployArtifactId");
            }
            this.helmChartDeployArtifactId = helmChartDeployArtifactId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAsync(Boolean isAsync) {
            if (isAsync == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "isAsync");
            }
            this.isAsync = isAsync;
            return this;
        }
        @CustomType.Setter
        public Builder isDebugEnabled(Boolean isDebugEnabled) {
            if (isDebugEnabled == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "isDebugEnabled");
            }
            this.isDebugEnabled = isDebugEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isForceEnabled(Boolean isForceEnabled) {
            if (isForceEnabled == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "isForceEnabled");
            }
            this.isForceEnabled = isForceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isValidationEnabled(Boolean isValidationEnabled) {
            if (isValidationEnabled == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "isValidationEnabled");
            }
            this.isValidationEnabled = isValidationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesManifestDeployArtifactIds(List<String> kubernetesManifestDeployArtifactIds) {
            if (kubernetesManifestDeployArtifactIds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "kubernetesManifestDeployArtifactIds");
            }
            this.kubernetesManifestDeployArtifactIds = kubernetesManifestDeployArtifactIds;
            return this;
        }
        public Builder kubernetesManifestDeployArtifactIds(String... kubernetesManifestDeployArtifactIds) {
            return kubernetesManifestDeployArtifactIds(List.of(kubernetesManifestDeployArtifactIds));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerConfigs(List<GetDeployStageLoadBalancerConfig> loadBalancerConfigs) {
            if (loadBalancerConfigs == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "loadBalancerConfigs");
            }
            this.loadBalancerConfigs = loadBalancerConfigs;
            return this;
        }
        public Builder loadBalancerConfigs(GetDeployStageLoadBalancerConfig... loadBalancerConfigs) {
            return loadBalancerConfigs(List.of(loadBalancerConfigs));
        }
        @CustomType.Setter
        public Builder maxHistory(Integer maxHistory) {
            if (maxHistory == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "maxHistory");
            }
            this.maxHistory = maxHistory;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInMbs(String maxMemoryInMbs) {
            if (maxMemoryInMbs == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "maxMemoryInMbs");
            }
            this.maxMemoryInMbs = maxMemoryInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder okeBlueGreenDeployStageId(String okeBlueGreenDeployStageId) {
            if (okeBlueGreenDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "okeBlueGreenDeployStageId");
            }
            this.okeBlueGreenDeployStageId = okeBlueGreenDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder okeCanaryDeployStageId(String okeCanaryDeployStageId) {
            if (okeCanaryDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "okeCanaryDeployStageId");
            }
            this.okeCanaryDeployStageId = okeCanaryDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder okeCanaryTrafficShiftDeployStageId(String okeCanaryTrafficShiftDeployStageId) {
            if (okeCanaryTrafficShiftDeployStageId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "okeCanaryTrafficShiftDeployStageId");
            }
            this.okeCanaryTrafficShiftDeployStageId = okeCanaryTrafficShiftDeployStageId;
            return this;
        }
        @CustomType.Setter
        public Builder okeClusterDeployEnvironmentId(String okeClusterDeployEnvironmentId) {
            if (okeClusterDeployEnvironmentId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "okeClusterDeployEnvironmentId");
            }
            this.okeClusterDeployEnvironmentId = okeClusterDeployEnvironmentId;
            return this;
        }
        @CustomType.Setter
        public Builder productionLoadBalancerConfigs(List<GetDeployStageProductionLoadBalancerConfig> productionLoadBalancerConfigs) {
            if (productionLoadBalancerConfigs == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "productionLoadBalancerConfigs");
            }
            this.productionLoadBalancerConfigs = productionLoadBalancerConfigs;
            return this;
        }
        public Builder productionLoadBalancerConfigs(GetDeployStageProductionLoadBalancerConfig... productionLoadBalancerConfigs) {
            return productionLoadBalancerConfigs(List.of(productionLoadBalancerConfigs));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder releaseName(String releaseName) {
            if (releaseName == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "releaseName");
            }
            this.releaseName = releaseName;
            return this;
        }
        @CustomType.Setter
        public Builder rollbackPolicies(List<GetDeployStageRollbackPolicy> rollbackPolicies) {
            if (rollbackPolicies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "rollbackPolicies");
            }
            this.rollbackPolicies = rollbackPolicies;
            return this;
        }
        public Builder rollbackPolicies(GetDeployStageRollbackPolicy... rollbackPolicies) {
            return rollbackPolicies(List.of(rollbackPolicies));
        }
        @CustomType.Setter
        public Builder rolloutPolicies(List<GetDeployStageRolloutPolicy> rolloutPolicies) {
            if (rolloutPolicies == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "rolloutPolicies");
            }
            this.rolloutPolicies = rolloutPolicies;
            return this;
        }
        public Builder rolloutPolicies(GetDeployStageRolloutPolicy... rolloutPolicies) {
            return rolloutPolicies(List.of(rolloutPolicies));
        }
        @CustomType.Setter
        public Builder setStrings(List<GetDeployStageSetString> setStrings) {
            if (setStrings == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "setStrings");
            }
            this.setStrings = setStrings;
            return this;
        }
        public Builder setStrings(GetDeployStageSetString... setStrings) {
            return setStrings(List.of(setStrings));
        }
        @CustomType.Setter
        public Builder setValues(List<GetDeployStageSetValue> setValues) {
            if (setValues == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "setValues");
            }
            this.setValues = setValues;
            return this;
        }
        public Builder setValues(GetDeployStageSetValue... setValues) {
            return setValues(List.of(setValues));
        }
        @CustomType.Setter
        public Builder shouldCleanupOnFail(Boolean shouldCleanupOnFail) {
            if (shouldCleanupOnFail == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldCleanupOnFail");
            }
            this.shouldCleanupOnFail = shouldCleanupOnFail;
            return this;
        }
        @CustomType.Setter
        public Builder shouldNotWait(Boolean shouldNotWait) {
            if (shouldNotWait == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldNotWait");
            }
            this.shouldNotWait = shouldNotWait;
            return this;
        }
        @CustomType.Setter
        public Builder shouldResetValues(Boolean shouldResetValues) {
            if (shouldResetValues == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldResetValues");
            }
            this.shouldResetValues = shouldResetValues;
            return this;
        }
        @CustomType.Setter
        public Builder shouldReuseValues(Boolean shouldReuseValues) {
            if (shouldReuseValues == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldReuseValues");
            }
            this.shouldReuseValues = shouldReuseValues;
            return this;
        }
        @CustomType.Setter
        public Builder shouldSkipCrds(Boolean shouldSkipCrds) {
            if (shouldSkipCrds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldSkipCrds");
            }
            this.shouldSkipCrds = shouldSkipCrds;
            return this;
        }
        @CustomType.Setter
        public Builder shouldSkipRenderSubchartNotes(Boolean shouldSkipRenderSubchartNotes) {
            if (shouldSkipRenderSubchartNotes == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "shouldSkipRenderSubchartNotes");
            }
            this.shouldSkipRenderSubchartNotes = shouldSkipRenderSubchartNotes;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder testLoadBalancerConfigs(List<GetDeployStageTestLoadBalancerConfig> testLoadBalancerConfigs) {
            if (testLoadBalancerConfigs == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "testLoadBalancerConfigs");
            }
            this.testLoadBalancerConfigs = testLoadBalancerConfigs;
            return this;
        }
        public Builder testLoadBalancerConfigs(GetDeployStageTestLoadBalancerConfig... testLoadBalancerConfigs) {
            return testLoadBalancerConfigs(List.of(testLoadBalancerConfigs));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            if (timeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "timeoutInSeconds");
            }
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder trafficShiftTarget(String trafficShiftTarget) {
            if (trafficShiftTarget == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "trafficShiftTarget");
            }
            this.trafficShiftTarget = trafficShiftTarget;
            return this;
        }
        @CustomType.Setter
        public Builder valuesArtifactIds(List<String> valuesArtifactIds) {
            if (valuesArtifactIds == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "valuesArtifactIds");
            }
            this.valuesArtifactIds = valuesArtifactIds;
            return this;
        }
        public Builder valuesArtifactIds(String... valuesArtifactIds) {
            return valuesArtifactIds(List.of(valuesArtifactIds));
        }
        @CustomType.Setter
        public Builder waitCriterias(List<GetDeployStageWaitCriteria> waitCriterias) {
            if (waitCriterias == null) {
              throw new MissingRequiredPropertyException("GetDeployStageResult", "waitCriterias");
            }
            this.waitCriterias = waitCriterias;
            return this;
        }
        public Builder waitCriterias(GetDeployStageWaitCriteria... waitCriterias) {
            return waitCriterias(List.of(waitCriterias));
        }
        public GetDeployStageResult build() {
            final var _resultValue = new GetDeployStageResult();
            _resultValue.approvalPolicies = approvalPolicies;
            _resultValue.areHooksEnabled = areHooksEnabled;
            _resultValue.blueBackendIps = blueBackendIps;
            _resultValue.blueGreenStrategies = blueGreenStrategies;
            _resultValue.canaryStrategies = canaryStrategies;
            _resultValue.commandSpecDeployArtifactId = commandSpecDeployArtifactId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeInstanceGroupBlueGreenDeploymentDeployStageId = computeInstanceGroupBlueGreenDeploymentDeployStageId;
            _resultValue.computeInstanceGroupCanaryDeployStageId = computeInstanceGroupCanaryDeployStageId;
            _resultValue.computeInstanceGroupCanaryTrafficShiftDeployStageId = computeInstanceGroupCanaryTrafficShiftDeployStageId;
            _resultValue.computeInstanceGroupDeployEnvironmentId = computeInstanceGroupDeployEnvironmentId;
            _resultValue.config = config;
            _resultValue.containerConfigs = containerConfigs;
            _resultValue.definedTags = definedTags;
            _resultValue.deployArtifactId = deployArtifactId;
            _resultValue.deployArtifactIds = deployArtifactIds;
            _resultValue.deployEnvironmentIdA = deployEnvironmentIdA;
            _resultValue.deployEnvironmentIdB = deployEnvironmentIdB;
            _resultValue.deployPipelineId = deployPipelineId;
            _resultValue.deployStageId = deployStageId;
            _resultValue.deployStagePredecessorCollections = deployStagePredecessorCollections;
            _resultValue.deployStageType = deployStageType;
            _resultValue.deploymentSpecDeployArtifactId = deploymentSpecDeployArtifactId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.dockerImageDeployArtifactId = dockerImageDeployArtifactId;
            _resultValue.failurePolicies = failurePolicies;
            _resultValue.freeformTags = freeformTags;
            _resultValue.functionDeployEnvironmentId = functionDeployEnvironmentId;
            _resultValue.functionTimeoutInSeconds = functionTimeoutInSeconds;
            _resultValue.greenBackendIps = greenBackendIps;
            _resultValue.helmChartDeployArtifactId = helmChartDeployArtifactId;
            _resultValue.id = id;
            _resultValue.isAsync = isAsync;
            _resultValue.isDebugEnabled = isDebugEnabled;
            _resultValue.isForceEnabled = isForceEnabled;
            _resultValue.isValidationEnabled = isValidationEnabled;
            _resultValue.kubernetesManifestDeployArtifactIds = kubernetesManifestDeployArtifactIds;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.loadBalancerConfigs = loadBalancerConfigs;
            _resultValue.maxHistory = maxHistory;
            _resultValue.maxMemoryInMbs = maxMemoryInMbs;
            _resultValue.namespace = namespace;
            _resultValue.okeBlueGreenDeployStageId = okeBlueGreenDeployStageId;
            _resultValue.okeCanaryDeployStageId = okeCanaryDeployStageId;
            _resultValue.okeCanaryTrafficShiftDeployStageId = okeCanaryTrafficShiftDeployStageId;
            _resultValue.okeClusterDeployEnvironmentId = okeClusterDeployEnvironmentId;
            _resultValue.productionLoadBalancerConfigs = productionLoadBalancerConfigs;
            _resultValue.projectId = projectId;
            _resultValue.releaseName = releaseName;
            _resultValue.rollbackPolicies = rollbackPolicies;
            _resultValue.rolloutPolicies = rolloutPolicies;
            _resultValue.setStrings = setStrings;
            _resultValue.setValues = setValues;
            _resultValue.shouldCleanupOnFail = shouldCleanupOnFail;
            _resultValue.shouldNotWait = shouldNotWait;
            _resultValue.shouldResetValues = shouldResetValues;
            _resultValue.shouldReuseValues = shouldReuseValues;
            _resultValue.shouldSkipCrds = shouldSkipCrds;
            _resultValue.shouldSkipRenderSubchartNotes = shouldSkipRenderSubchartNotes;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.testLoadBalancerConfigs = testLoadBalancerConfigs;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            _resultValue.trafficShiftTarget = trafficShiftTarget;
            _resultValue.valuesArtifactIds = valuesArtifactIds;
            _resultValue.waitCriterias = waitCriterias;
            return _resultValue;
        }
    }
}
