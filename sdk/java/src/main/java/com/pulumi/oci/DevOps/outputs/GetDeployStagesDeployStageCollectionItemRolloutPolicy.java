// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDeployStagesDeployStageCollectionItemRolloutPolicy {
    /**
     * @return The number that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    private @Nullable Integer batchCount;
    /**
     * @return The duration of delay between batch rollout. The default delay is 1 minute.
     * 
     */
    private @Nullable Integer batchDelayInSeconds;
    /**
     * @return The percentage that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    private @Nullable Integer batchPercentage;
    /**
     * @return The type of policy used for rolling out a deployment stage.
     * 
     */
    private @Nullable String policyType;
    /**
     * @return Indicates the criteria to stop.
     * 
     */
    private @Nullable Double rampLimitPercent;

    private GetDeployStagesDeployStageCollectionItemRolloutPolicy() {}
    /**
     * @return The number that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    public Optional<Integer> batchCount() {
        return Optional.ofNullable(this.batchCount);
    }
    /**
     * @return The duration of delay between batch rollout. The default delay is 1 minute.
     * 
     */
    public Optional<Integer> batchDelayInSeconds() {
        return Optional.ofNullable(this.batchDelayInSeconds);
    }
    /**
     * @return The percentage that will be used to determine how many instances will be deployed concurrently.
     * 
     */
    public Optional<Integer> batchPercentage() {
        return Optional.ofNullable(this.batchPercentage);
    }
    /**
     * @return The type of policy used for rolling out a deployment stage.
     * 
     */
    public Optional<String> policyType() {
        return Optional.ofNullable(this.policyType);
    }
    /**
     * @return Indicates the criteria to stop.
     * 
     */
    public Optional<Double> rampLimitPercent() {
        return Optional.ofNullable(this.rampLimitPercent);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeployStagesDeployStageCollectionItemRolloutPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchCount;
        private @Nullable Integer batchDelayInSeconds;
        private @Nullable Integer batchPercentage;
        private @Nullable String policyType;
        private @Nullable Double rampLimitPercent;
        public Builder() {}
        public Builder(GetDeployStagesDeployStageCollectionItemRolloutPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchCount = defaults.batchCount;
    	      this.batchDelayInSeconds = defaults.batchDelayInSeconds;
    	      this.batchPercentage = defaults.batchPercentage;
    	      this.policyType = defaults.policyType;
    	      this.rampLimitPercent = defaults.rampLimitPercent;
        }

        @CustomType.Setter
        public Builder batchCount(@Nullable Integer batchCount) {
            this.batchCount = batchCount;
            return this;
        }
        @CustomType.Setter
        public Builder batchDelayInSeconds(@Nullable Integer batchDelayInSeconds) {
            this.batchDelayInSeconds = batchDelayInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder batchPercentage(@Nullable Integer batchPercentage) {
            this.batchPercentage = batchPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(@Nullable String policyType) {
            this.policyType = policyType;
            return this;
        }
        @CustomType.Setter
        public Builder rampLimitPercent(@Nullable Double rampLimitPercent) {
            this.rampLimitPercent = rampLimitPercent;
            return this;
        }
        public GetDeployStagesDeployStageCollectionItemRolloutPolicy build() {
            final var o = new GetDeployStagesDeployStageCollectionItemRolloutPolicy();
            o.batchCount = batchCount;
            o.batchDelayInSeconds = batchDelayInSeconds;
            o.batchPercentage = batchPercentage;
            o.policyType = policyType;
            o.rampLimitPercent = rampLimitPercent;
            return o;
        }
    }
}
