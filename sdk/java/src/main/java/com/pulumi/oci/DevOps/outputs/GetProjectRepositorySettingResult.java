// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetProjectRepositorySettingApprovalRule;
import com.pulumi.oci.DevOps.outputs.GetProjectRepositorySettingMergeSetting;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectRepositorySettingResult {
    /**
     * @return List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    private List<GetProjectRepositorySettingApprovalRule> approvalRules;
    private String id;
    /**
     * @return Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    private List<GetProjectRepositorySettingMergeSetting> mergeSettings;
    private String projectId;

    private GetProjectRepositorySettingResult() {}
    /**
     * @return List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    public List<GetProjectRepositorySettingApprovalRule> approvalRules() {
        return this.approvalRules;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    public List<GetProjectRepositorySettingMergeSetting> mergeSettings() {
        return this.mergeSettings;
    }
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectRepositorySettingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProjectRepositorySettingApprovalRule> approvalRules;
        private String id;
        private List<GetProjectRepositorySettingMergeSetting> mergeSettings;
        private String projectId;
        public Builder() {}
        public Builder(GetProjectRepositorySettingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalRules = defaults.approvalRules;
    	      this.id = defaults.id;
    	      this.mergeSettings = defaults.mergeSettings;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder approvalRules(List<GetProjectRepositorySettingApprovalRule> approvalRules) {
            if (approvalRules == null) {
              throw new MissingRequiredPropertyException("GetProjectRepositorySettingResult", "approvalRules");
            }
            this.approvalRules = approvalRules;
            return this;
        }
        public Builder approvalRules(GetProjectRepositorySettingApprovalRule... approvalRules) {
            return approvalRules(List.of(approvalRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectRepositorySettingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mergeSettings(List<GetProjectRepositorySettingMergeSetting> mergeSettings) {
            if (mergeSettings == null) {
              throw new MissingRequiredPropertyException("GetProjectRepositorySettingResult", "mergeSettings");
            }
            this.mergeSettings = mergeSettings;
            return this;
        }
        public Builder mergeSettings(GetProjectRepositorySettingMergeSetting... mergeSettings) {
            return mergeSettings(List.of(mergeSettings));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetProjectRepositorySettingResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        public GetProjectRepositorySettingResult build() {
            final var _resultValue = new GetProjectRepositorySettingResult();
            _resultValue.approvalRules = approvalRules;
            _resultValue.id = id;
            _resultValue.mergeSettings = mergeSettings;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
