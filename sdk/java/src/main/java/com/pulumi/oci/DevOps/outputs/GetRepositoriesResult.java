// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoriesFilter;
import com.pulumi.oci.DevOps.outputs.GetRepositoriesRepositoryCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoriesResult {
    /**
     * @return The OCID of the repository&#39;s compartment.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable List<GetRepositoriesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique name of a repository. This value is mutable.
     * 
     */
    private @Nullable String name;
    /**
     * @return The OCID of the DevOps project containing the repository.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return The list of repository_collection.
     * 
     */
    private List<GetRepositoriesRepositoryCollection> repositoryCollections;
    private @Nullable String repositoryId;
    /**
     * @return The current state of the repository.
     * 
     */
    private @Nullable String state;

    private GetRepositoriesResult() {}
    /**
     * @return The OCID of the repository&#39;s compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetRepositoriesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique name of a repository. This value is mutable.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The OCID of the DevOps project containing the repository.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return The list of repository_collection.
     * 
     */
    public List<GetRepositoriesRepositoryCollection> repositoryCollections() {
        return this.repositoryCollections;
    }
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return The current state of the repository.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetRepositoriesFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable String projectId;
        private List<GetRepositoriesRepositoryCollection> repositoryCollections;
        private @Nullable String repositoryId;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetRepositoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.repositoryCollections = defaults.repositoryCollections;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRepositoriesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoriesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCollections(List<GetRepositoriesRepositoryCollection> repositoryCollections) {
            this.repositoryCollections = Objects.requireNonNull(repositoryCollections);
            return this;
        }
        public Builder repositoryCollections(GetRepositoriesRepositoryCollection... repositoryCollections) {
            return repositoryCollections(List.of(repositoryCollections));
        }
        @CustomType.Setter
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetRepositoriesResult build() {
            final var _resultValue = new GetRepositoriesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.repositoryCollections = repositoryCollections;
            _resultValue.repositoryId = repositoryId;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
