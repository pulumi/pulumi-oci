// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositoryAuthorsFilter;
import com.pulumi.oci.DevOps.outputs.GetRepositoryAuthorsRepositoryAuthorCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryAuthorsResult {
    private @Nullable List<GetRepositoryAuthorsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String refName;
    /**
     * @return The list of repository_author_collection.
     * 
     */
    private List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections;
    private String repositoryId;

    private GetRepositoryAuthorsResult() {}
    public List<GetRepositoryAuthorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> refName() {
        return Optional.ofNullable(this.refName);
    }
    /**
     * @return The list of repository_author_collection.
     * 
     */
    public List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections() {
        return this.repositoryAuthorCollections;
    }
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryAuthorsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetRepositoryAuthorsFilter> filters;
        private String id;
        private @Nullable String refName;
        private List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections;
        private String repositoryId;
        public Builder() {}
        public Builder(GetRepositoryAuthorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.refName = defaults.refName;
    	      this.repositoryAuthorCollections = defaults.repositoryAuthorCollections;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetRepositoryAuthorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoryAuthorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryAuthorsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder refName(@Nullable String refName) {

            this.refName = refName;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryAuthorCollections(List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections) {
            if (repositoryAuthorCollections == null) {
              throw new MissingRequiredPropertyException("GetRepositoryAuthorsResult", "repositoryAuthorCollections");
            }
            this.repositoryAuthorCollections = repositoryAuthorCollections;
            return this;
        }
        public Builder repositoryAuthorCollections(GetRepositoryAuthorsRepositoryAuthorCollection... repositoryAuthorCollections) {
            return repositoryAuthorCollections(List.of(repositoryAuthorCollections));
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryAuthorsResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetRepositoryAuthorsResult build() {
            final var _resultValue = new GetRepositoryAuthorsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.refName = refName;
            _resultValue.repositoryAuthorCollections = repositoryAuthorCollections;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
