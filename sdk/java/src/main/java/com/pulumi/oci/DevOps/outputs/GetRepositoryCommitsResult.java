// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositoryCommitsFilter;
import com.pulumi.oci.DevOps.outputs.GetRepositoryCommitsRepositoryCommitCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryCommitsResult {
    /**
     * @return Name of the author of the repository.
     * 
     */
    private @Nullable String authorName;
    /**
     * @return The commit message.
     * 
     */
    private @Nullable String commitMessage;
    private @Nullable String excludeRefName;
    private @Nullable String filePath;
    private @Nullable List<GetRepositoryCommitsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String refName;
    /**
     * @return The list of repository_commit_collection.
     * 
     */
    private List<GetRepositoryCommitsRepositoryCommitCollection> repositoryCommitCollections;
    private String repositoryId;
    private @Nullable String timestampGreaterThanOrEqualTo;
    private @Nullable String timestampLessThanOrEqualTo;

    private GetRepositoryCommitsResult() {}
    /**
     * @return Name of the author of the repository.
     * 
     */
    public Optional<String> authorName() {
        return Optional.ofNullable(this.authorName);
    }
    /**
     * @return The commit message.
     * 
     */
    public Optional<String> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }
    public Optional<String> excludeRefName() {
        return Optional.ofNullable(this.excludeRefName);
    }
    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }
    public List<GetRepositoryCommitsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> refName() {
        return Optional.ofNullable(this.refName);
    }
    /**
     * @return The list of repository_commit_collection.
     * 
     */
    public List<GetRepositoryCommitsRepositoryCommitCollection> repositoryCommitCollections() {
        return this.repositoryCommitCollections;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    public Optional<String> timestampGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timestampGreaterThanOrEqualTo);
    }
    public Optional<String> timestampLessThanOrEqualTo() {
        return Optional.ofNullable(this.timestampLessThanOrEqualTo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryCommitsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorName;
        private @Nullable String commitMessage;
        private @Nullable String excludeRefName;
        private @Nullable String filePath;
        private @Nullable List<GetRepositoryCommitsFilter> filters;
        private String id;
        private @Nullable String refName;
        private List<GetRepositoryCommitsRepositoryCommitCollection> repositoryCommitCollections;
        private String repositoryId;
        private @Nullable String timestampGreaterThanOrEqualTo;
        private @Nullable String timestampLessThanOrEqualTo;
        public Builder() {}
        public Builder(GetRepositoryCommitsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorName = defaults.authorName;
    	      this.commitMessage = defaults.commitMessage;
    	      this.excludeRefName = defaults.excludeRefName;
    	      this.filePath = defaults.filePath;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.refName = defaults.refName;
    	      this.repositoryCommitCollections = defaults.repositoryCommitCollections;
    	      this.repositoryId = defaults.repositoryId;
    	      this.timestampGreaterThanOrEqualTo = defaults.timestampGreaterThanOrEqualTo;
    	      this.timestampLessThanOrEqualTo = defaults.timestampLessThanOrEqualTo;
        }

        @CustomType.Setter
        public Builder authorName(@Nullable String authorName) {

            this.authorName = authorName;
            return this;
        }
        @CustomType.Setter
        public Builder commitMessage(@Nullable String commitMessage) {

            this.commitMessage = commitMessage;
            return this;
        }
        @CustomType.Setter
        public Builder excludeRefName(@Nullable String excludeRefName) {

            this.excludeRefName = excludeRefName;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(@Nullable String filePath) {

            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRepositoryCommitsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoryCommitsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryCommitsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder refName(@Nullable String refName) {

            this.refName = refName;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCommitCollections(List<GetRepositoryCommitsRepositoryCommitCollection> repositoryCommitCollections) {
            if (repositoryCommitCollections == null) {
              throw new MissingRequiredPropertyException("GetRepositoryCommitsResult", "repositoryCommitCollections");
            }
            this.repositoryCommitCollections = repositoryCommitCollections;
            return this;
        }
        public Builder repositoryCommitCollections(GetRepositoryCommitsRepositoryCommitCollection... repositoryCommitCollections) {
            return repositoryCommitCollections(List.of(repositoryCommitCollections));
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryCommitsResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder timestampGreaterThanOrEqualTo(@Nullable String timestampGreaterThanOrEqualTo) {

            this.timestampGreaterThanOrEqualTo = timestampGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timestampLessThanOrEqualTo(@Nullable String timestampLessThanOrEqualTo) {

            this.timestampLessThanOrEqualTo = timestampLessThanOrEqualTo;
            return this;
        }
        public GetRepositoryCommitsResult build() {
            final var _resultValue = new GetRepositoryCommitsResult();
            _resultValue.authorName = authorName;
            _resultValue.commitMessage = commitMessage;
            _resultValue.excludeRefName = excludeRefName;
            _resultValue.filePath = filePath;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.refName = refName;
            _resultValue.repositoryCommitCollections = repositoryCommitCollections;
            _resultValue.repositoryId = repositoryId;
            _resultValue.timestampGreaterThanOrEqualTo = timestampGreaterThanOrEqualTo;
            _resultValue.timestampLessThanOrEqualTo = timestampLessThanOrEqualTo;
            return _resultValue;
        }
    }
}
