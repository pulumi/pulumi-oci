// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryDiffsDiffCollectionItemChange;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryDiffsDiffCollectionItem {
    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    private @Nullable Boolean areConflictsInFile;
    /**
     * @return List of changed section in the file.
     * 
     */
    private @Nullable List<GetRepositoryDiffsDiffCollectionItemChange> changes;
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    private @Nullable Boolean isBinary;
    /**
     * @return Indicates whether the file is large.
     * 
     */
    private @Nullable Boolean isLarge;
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    private @Nullable String newId;
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    private @Nullable String newPath;
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    private @Nullable String oldId;
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    private @Nullable String oldPath;

    private GetRepositoryDiffsDiffCollectionItem() {}
    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    public Optional<Boolean> areConflictsInFile() {
        return Optional.ofNullable(this.areConflictsInFile);
    }
    /**
     * @return List of changed section in the file.
     * 
     */
    public List<GetRepositoryDiffsDiffCollectionItemChange> changes() {
        return this.changes == null ? List.of() : this.changes;
    }
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    public Optional<Boolean> isBinary() {
        return Optional.ofNullable(this.isBinary);
    }
    /**
     * @return Indicates whether the file is large.
     * 
     */
    public Optional<Boolean> isLarge() {
        return Optional.ofNullable(this.isLarge);
    }
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    public Optional<String> newId() {
        return Optional.ofNullable(this.newId);
    }
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    public Optional<String> newPath() {
        return Optional.ofNullable(this.newPath);
    }
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    public Optional<String> oldId() {
        return Optional.ofNullable(this.oldId);
    }
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    public Optional<String> oldPath() {
        return Optional.ofNullable(this.oldPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryDiffsDiffCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean areConflictsInFile;
        private @Nullable List<GetRepositoryDiffsDiffCollectionItemChange> changes;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable Boolean isBinary;
        private @Nullable Boolean isLarge;
        private @Nullable String newId;
        private @Nullable String newPath;
        private @Nullable String oldId;
        private @Nullable String oldPath;
        public Builder() {}
        public Builder(GetRepositoryDiffsDiffCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areConflictsInFile = defaults.areConflictsInFile;
    	      this.changes = defaults.changes;
    	      this.freeformTags = defaults.freeformTags;
    	      this.isBinary = defaults.isBinary;
    	      this.isLarge = defaults.isLarge;
    	      this.newId = defaults.newId;
    	      this.newPath = defaults.newPath;
    	      this.oldId = defaults.oldId;
    	      this.oldPath = defaults.oldPath;
        }

        @CustomType.Setter
        public Builder areConflictsInFile(@Nullable Boolean areConflictsInFile) {
            this.areConflictsInFile = areConflictsInFile;
            return this;
        }
        @CustomType.Setter
        public Builder changes(@Nullable List<GetRepositoryDiffsDiffCollectionItemChange> changes) {
            this.changes = changes;
            return this;
        }
        public Builder changes(GetRepositoryDiffsDiffCollectionItemChange... changes) {
            return changes(List.of(changes));
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder isBinary(@Nullable Boolean isBinary) {
            this.isBinary = isBinary;
            return this;
        }
        @CustomType.Setter
        public Builder isLarge(@Nullable Boolean isLarge) {
            this.isLarge = isLarge;
            return this;
        }
        @CustomType.Setter
        public Builder newId(@Nullable String newId) {
            this.newId = newId;
            return this;
        }
        @CustomType.Setter
        public Builder newPath(@Nullable String newPath) {
            this.newPath = newPath;
            return this;
        }
        @CustomType.Setter
        public Builder oldId(@Nullable String oldId) {
            this.oldId = oldId;
            return this;
        }
        @CustomType.Setter
        public Builder oldPath(@Nullable String oldPath) {
            this.oldPath = oldPath;
            return this;
        }
        public GetRepositoryDiffsDiffCollectionItem build() {
            final var o = new GetRepositoryDiffsDiffCollectionItem();
            o.areConflictsInFile = areConflictsInFile;
            o.changes = changes;
            o.freeformTags = freeformTags;
            o.isBinary = isBinary;
            o.isLarge = isLarge;
            o.newId = newId;
            o.newPath = newPath;
            o.oldId = oldId;
            o.oldPath = oldPath;
            return o;
        }
    }
}
