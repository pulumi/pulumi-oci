// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositoryDiffsDiffCollectionItemChange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRepositoryDiffsDiffCollectionItem {
    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    private Boolean areConflictsInFile;
    /**
     * @return List of changed section in the file.
     * 
     */
    private List<GetRepositoryDiffsDiffCollectionItemChange> changes;
    private Map<String,String> freeformTags;
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    private Boolean isBinary;
    /**
     * @return Indicates whether the file is large.
     * 
     */
    private Boolean isLarge;
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    private String newId;
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    private String newPath;
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    private String oldId;
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    private String oldPath;

    private GetRepositoryDiffsDiffCollectionItem() {}
    /**
     * @return Indicates whether the changed file contains conflicts.
     * 
     */
    public Boolean areConflictsInFile() {
        return this.areConflictsInFile;
    }
    /**
     * @return List of changed section in the file.
     * 
     */
    public List<GetRepositoryDiffsDiffCollectionItemChange> changes() {
        return this.changes;
    }
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Indicates whether the file is binary.
     * 
     */
    public Boolean isBinary() {
        return this.isBinary;
    }
    /**
     * @return Indicates whether the file is large.
     * 
     */
    public Boolean isLarge() {
        return this.isLarge;
    }
    /**
     * @return The ID of the changed object on the target version.
     * 
     */
    public String newId() {
        return this.newId;
    }
    /**
     * @return The path on the target version to the changed object.
     * 
     */
    public String newPath() {
        return this.newPath;
    }
    /**
     * @return The ID of the changed object on the base version.
     * 
     */
    public String oldId() {
        return this.oldId;
    }
    /**
     * @return The path on the base version to the changed object.
     * 
     */
    public String oldPath() {
        return this.oldPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryDiffsDiffCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean areConflictsInFile;
        private List<GetRepositoryDiffsDiffCollectionItemChange> changes;
        private Map<String,String> freeformTags;
        private Boolean isBinary;
        private Boolean isLarge;
        private String newId;
        private String newPath;
        private String oldId;
        private String oldPath;
        public Builder() {}
        public Builder(GetRepositoryDiffsDiffCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areConflictsInFile = defaults.areConflictsInFile;
    	      this.changes = defaults.changes;
    	      this.freeformTags = defaults.freeformTags;
    	      this.isBinary = defaults.isBinary;
    	      this.isLarge = defaults.isLarge;
    	      this.newId = defaults.newId;
    	      this.newPath = defaults.newPath;
    	      this.oldId = defaults.oldId;
    	      this.oldPath = defaults.oldPath;
        }

        @CustomType.Setter
        public Builder areConflictsInFile(Boolean areConflictsInFile) {
            if (areConflictsInFile == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "areConflictsInFile");
            }
            this.areConflictsInFile = areConflictsInFile;
            return this;
        }
        @CustomType.Setter
        public Builder changes(List<GetRepositoryDiffsDiffCollectionItemChange> changes) {
            if (changes == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "changes");
            }
            this.changes = changes;
            return this;
        }
        public Builder changes(GetRepositoryDiffsDiffCollectionItemChange... changes) {
            return changes(List.of(changes));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder isBinary(Boolean isBinary) {
            if (isBinary == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "isBinary");
            }
            this.isBinary = isBinary;
            return this;
        }
        @CustomType.Setter
        public Builder isLarge(Boolean isLarge) {
            if (isLarge == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "isLarge");
            }
            this.isLarge = isLarge;
            return this;
        }
        @CustomType.Setter
        public Builder newId(String newId) {
            if (newId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "newId");
            }
            this.newId = newId;
            return this;
        }
        @CustomType.Setter
        public Builder newPath(String newPath) {
            if (newPath == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "newPath");
            }
            this.newPath = newPath;
            return this;
        }
        @CustomType.Setter
        public Builder oldId(String oldId) {
            if (oldId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "oldId");
            }
            this.oldId = oldId;
            return this;
        }
        @CustomType.Setter
        public Builder oldPath(String oldPath) {
            if (oldPath == null) {
              throw new MissingRequiredPropertyException("GetRepositoryDiffsDiffCollectionItem", "oldPath");
            }
            this.oldPath = oldPath;
            return this;
        }
        public GetRepositoryDiffsDiffCollectionItem build() {
            final var _resultValue = new GetRepositoryDiffsDiffCollectionItem();
            _resultValue.areConflictsInFile = areConflictsInFile;
            _resultValue.changes = changes;
            _resultValue.freeformTags = freeformTags;
            _resultValue.isBinary = isBinary;
            _resultValue.isLarge = isLarge;
            _resultValue.newId = newId;
            _resultValue.newPath = newPath;
            _resultValue.oldId = oldId;
            _resultValue.oldPath = oldPath;
            return _resultValue;
        }
    }
}
