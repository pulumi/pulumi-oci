// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryDiffsDiffCollection;
import com.pulumi.oci.DevOps.outputs.GetRepositoryDiffsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryDiffsResult {
    private String baseVersion;
    /**
     * @return The list of diff_collection.
     * 
     */
    private List<GetRepositoryDiffsDiffCollection> diffCollections;
    private @Nullable List<GetRepositoryDiffsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isComparisonFromMergeBase;
    private String repositoryId;
    private String targetVersion;

    private GetRepositoryDiffsResult() {}
    public String baseVersion() {
        return this.baseVersion;
    }
    /**
     * @return The list of diff_collection.
     * 
     */
    public List<GetRepositoryDiffsDiffCollection> diffCollections() {
        return this.diffCollections;
    }
    public List<GetRepositoryDiffsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isComparisonFromMergeBase() {
        return Optional.ofNullable(this.isComparisonFromMergeBase);
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    public String targetVersion() {
        return this.targetVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryDiffsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baseVersion;
        private List<GetRepositoryDiffsDiffCollection> diffCollections;
        private @Nullable List<GetRepositoryDiffsFilter> filters;
        private String id;
        private @Nullable Boolean isComparisonFromMergeBase;
        private String repositoryId;
        private String targetVersion;
        public Builder() {}
        public Builder(GetRepositoryDiffsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseVersion = defaults.baseVersion;
    	      this.diffCollections = defaults.diffCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isComparisonFromMergeBase = defaults.isComparisonFromMergeBase;
    	      this.repositoryId = defaults.repositoryId;
    	      this.targetVersion = defaults.targetVersion;
        }

        @CustomType.Setter
        public Builder baseVersion(String baseVersion) {
            this.baseVersion = Objects.requireNonNull(baseVersion);
            return this;
        }
        @CustomType.Setter
        public Builder diffCollections(List<GetRepositoryDiffsDiffCollection> diffCollections) {
            this.diffCollections = Objects.requireNonNull(diffCollections);
            return this;
        }
        public Builder diffCollections(GetRepositoryDiffsDiffCollection... diffCollections) {
            return diffCollections(List.of(diffCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRepositoryDiffsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoryDiffsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isComparisonFromMergeBase(@Nullable Boolean isComparisonFromMergeBase) {
            this.isComparisonFromMergeBase = isComparisonFromMergeBase;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder targetVersion(String targetVersion) {
            this.targetVersion = Objects.requireNonNull(targetVersion);
            return this;
        }
        public GetRepositoryDiffsResult build() {
            final var _resultValue = new GetRepositoryDiffsResult();
            _resultValue.baseVersion = baseVersion;
            _resultValue.diffCollections = diffCollections;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isComparisonFromMergeBase = isComparisonFromMergeBase;
            _resultValue.repositoryId = repositoryId;
            _resultValue.targetVersion = targetVersion;
            return _resultValue;
        }
    }
}
