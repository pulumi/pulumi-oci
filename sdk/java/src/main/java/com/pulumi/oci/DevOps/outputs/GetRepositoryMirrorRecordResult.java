// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryMirrorRecordResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String mirrorRecordType;
    /**
     * @return Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
     * 
     */
    private @Nullable String mirrorStatus;
    private String repositoryId;
    /**
     * @return The time taken to complete a mirror operation. Value is null if not completed.
     * 
     */
    private @Nullable String timeEnded;
    /**
     * @return The time to enqueue a mirror operation.
     * 
     */
    private @Nullable String timeEnqueued;
    /**
     * @return The time to start a mirror operation.
     * 
     */
    private @Nullable String timeStarted;
    /**
     * @return Workrequest ID to track current mirror operation.
     * 
     */
    private @Nullable String workRequestId;

    private GetRepositoryMirrorRecordResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String mirrorRecordType() {
        return this.mirrorRecordType;
    }
    /**
     * @return Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
     * 
     */
    public Optional<String> mirrorStatus() {
        return Optional.ofNullable(this.mirrorStatus);
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The time taken to complete a mirror operation. Value is null if not completed.
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }
    /**
     * @return The time to enqueue a mirror operation.
     * 
     */
    public Optional<String> timeEnqueued() {
        return Optional.ofNullable(this.timeEnqueued);
    }
    /**
     * @return The time to start a mirror operation.
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }
    /**
     * @return Workrequest ID to track current mirror operation.
     * 
     */
    public Optional<String> workRequestId() {
        return Optional.ofNullable(this.workRequestId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryMirrorRecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private String mirrorRecordType;
        private @Nullable String mirrorStatus;
        private String repositoryId;
        private @Nullable String timeEnded;
        private @Nullable String timeEnqueued;
        private @Nullable String timeStarted;
        private @Nullable String workRequestId;
        public Builder() {}
        public Builder(GetRepositoryMirrorRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.mirrorRecordType = defaults.mirrorRecordType;
    	      this.mirrorStatus = defaults.mirrorStatus;
    	      this.repositoryId = defaults.repositoryId;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeEnqueued = defaults.timeEnqueued;
    	      this.timeStarted = defaults.timeStarted;
    	      this.workRequestId = defaults.workRequestId;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorRecordType(String mirrorRecordType) {
            this.mirrorRecordType = Objects.requireNonNull(mirrorRecordType);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorStatus(@Nullable String mirrorStatus) {
            this.mirrorStatus = mirrorStatus;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(@Nullable String timeEnded) {
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnqueued(@Nullable String timeEnqueued) {
            this.timeEnqueued = timeEnqueued;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(@Nullable String timeStarted) {
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(@Nullable String workRequestId) {
            this.workRequestId = workRequestId;
            return this;
        }
        public GetRepositoryMirrorRecordResult build() {
            final var o = new GetRepositoryMirrorRecordResult();
            o.id = id;
            o.mirrorRecordType = mirrorRecordType;
            o.mirrorStatus = mirrorStatus;
            o.repositoryId = repositoryId;
            o.timeEnded = timeEnded;
            o.timeEnqueued = timeEnqueued;
            o.timeStarted = timeStarted;
            o.workRequestId = workRequestId;
            return o;
        }
    }
}
