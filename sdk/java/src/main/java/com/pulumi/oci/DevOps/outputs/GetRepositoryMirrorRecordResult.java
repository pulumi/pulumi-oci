// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryMirrorRecordResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String mirrorRecordType;
    /**
     * @return Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
     * 
     */
    private String mirrorStatus;
    private String repositoryId;
    /**
     * @return The time taken to complete a mirror operation. Value is null if not completed.
     * 
     */
    private String timeEnded;
    /**
     * @return The time to enqueue a mirror operation.
     * 
     */
    private String timeEnqueued;
    /**
     * @return The time to start a mirror operation.
     * 
     */
    private String timeStarted;
    /**
     * @return Workrequest ID to track current mirror operation.
     * 
     */
    private String workRequestId;

    private GetRepositoryMirrorRecordResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String mirrorRecordType() {
        return this.mirrorRecordType;
    }
    /**
     * @return Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
     * 
     */
    public String mirrorStatus() {
        return this.mirrorStatus;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The time taken to complete a mirror operation. Value is null if not completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The time to enqueue a mirror operation.
     * 
     */
    public String timeEnqueued() {
        return this.timeEnqueued;
    }
    /**
     * @return The time to start a mirror operation.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return Workrequest ID to track current mirror operation.
     * 
     */
    public String workRequestId() {
        return this.workRequestId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryMirrorRecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String mirrorRecordType;
        private String mirrorStatus;
        private String repositoryId;
        private String timeEnded;
        private String timeEnqueued;
        private String timeStarted;
        private String workRequestId;
        public Builder() {}
        public Builder(GetRepositoryMirrorRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.mirrorRecordType = defaults.mirrorRecordType;
    	      this.mirrorStatus = defaults.mirrorStatus;
    	      this.repositoryId = defaults.repositoryId;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeEnqueued = defaults.timeEnqueued;
    	      this.timeStarted = defaults.timeStarted;
    	      this.workRequestId = defaults.workRequestId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorRecordType(String mirrorRecordType) {
            this.mirrorRecordType = Objects.requireNonNull(mirrorRecordType);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorStatus(String mirrorStatus) {
            this.mirrorStatus = Objects.requireNonNull(mirrorStatus);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnqueued(String timeEnqueued) {
            this.timeEnqueued = Objects.requireNonNull(timeEnqueued);
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(String workRequestId) {
            this.workRequestId = Objects.requireNonNull(workRequestId);
            return this;
        }
        public GetRepositoryMirrorRecordResult build() {
            final var _resultValue = new GetRepositoryMirrorRecordResult();
            _resultValue.id = id;
            _resultValue.mirrorRecordType = mirrorRecordType;
            _resultValue.mirrorStatus = mirrorStatus;
            _resultValue.repositoryId = repositoryId;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeEnqueued = timeEnqueued;
            _resultValue.timeStarted = timeStarted;
            _resultValue.workRequestId = workRequestId;
            return _resultValue;
        }
    }
}
