// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositoryPathItem;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryPathResult {
    private @Nullable String displayName;
    private @Nullable String folderPath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of objects describing files or directories in a repository.
     * 
     */
    private List<GetRepositoryPathItem> items;
    private @Nullable Boolean pathsInSubtree;
    private @Nullable String ref;
    private String repositoryId;

    private GetRepositoryPathResult() {}
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of objects describing files or directories in a repository.
     * 
     */
    public List<GetRepositoryPathItem> items() {
        return this.items;
    }
    public Optional<Boolean> pathsInSubtree() {
        return Optional.ofNullable(this.pathsInSubtree);
    }
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryPathResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable String folderPath;
        private String id;
        private List<GetRepositoryPathItem> items;
        private @Nullable Boolean pathsInSubtree;
        private @Nullable String ref;
        private String repositoryId;
        public Builder() {}
        public Builder(GetRepositoryPathResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.folderPath = defaults.folderPath;
    	      this.id = defaults.id;
    	      this.items = defaults.items;
    	      this.pathsInSubtree = defaults.pathsInSubtree;
    	      this.ref = defaults.ref;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(@Nullable String folderPath) {

            this.folderPath = folderPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPathResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetRepositoryPathItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPathResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetRepositoryPathItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder pathsInSubtree(@Nullable Boolean pathsInSubtree) {

            this.pathsInSubtree = pathsInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {

            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPathResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetRepositoryPathResult build() {
            final var _resultValue = new GetRepositoryPathResult();
            _resultValue.displayName = displayName;
            _resultValue.folderPath = folderPath;
            _resultValue.id = id;
            _resultValue.items = items;
            _resultValue.pathsInSubtree = pathsInSubtree;
            _resultValue.ref = ref;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
