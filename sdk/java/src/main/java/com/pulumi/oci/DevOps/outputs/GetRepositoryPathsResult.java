// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryPathsFilter;
import com.pulumi.oci.DevOps.outputs.GetRepositoryPathsRepositoryPathCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryPathsResult {
    private @Nullable String displayName;
    private @Nullable List<GetRepositoryPathsFilter> filters;
    private @Nullable String folderPath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean pathsInSubtree;
    private @Nullable String ref;
    private String repositoryId;
    /**
     * @return The list of repository_path_collection.
     * 
     */
    private List<GetRepositoryPathsRepositoryPathCollection> repositoryPathCollections;

    private GetRepositoryPathsResult() {}
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetRepositoryPathsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> pathsInSubtree() {
        return Optional.ofNullable(this.pathsInSubtree);
    }
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The list of repository_path_collection.
     * 
     */
    public List<GetRepositoryPathsRepositoryPathCollection> repositoryPathCollections() {
        return this.repositoryPathCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryPathsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable List<GetRepositoryPathsFilter> filters;
        private @Nullable String folderPath;
        private String id;
        private @Nullable Boolean pathsInSubtree;
        private @Nullable String ref;
        private String repositoryId;
        private List<GetRepositoryPathsRepositoryPathCollection> repositoryPathCollections;
        public Builder() {}
        public Builder(GetRepositoryPathsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.folderPath = defaults.folderPath;
    	      this.id = defaults.id;
    	      this.pathsInSubtree = defaults.pathsInSubtree;
    	      this.ref = defaults.ref;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryPathCollections = defaults.repositoryPathCollections;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRepositoryPathsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoryPathsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder folderPath(@Nullable String folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder pathsInSubtree(@Nullable Boolean pathsInSubtree) {
            this.pathsInSubtree = pathsInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryPathCollections(List<GetRepositoryPathsRepositoryPathCollection> repositoryPathCollections) {
            this.repositoryPathCollections = Objects.requireNonNull(repositoryPathCollections);
            return this;
        }
        public Builder repositoryPathCollections(GetRepositoryPathsRepositoryPathCollection... repositoryPathCollections) {
            return repositoryPathCollections(List.of(repositoryPathCollections));
        }
        public GetRepositoryPathsResult build() {
            final var o = new GetRepositoryPathsResult();
            o.displayName = displayName;
            o.filters = filters;
            o.folderPath = folderPath;
            o.id = id;
            o.pathsInSubtree = pathsInSubtree;
            o.ref = ref;
            o.repositoryId = repositoryId;
            o.repositoryPathCollections = repositoryPathCollections;
            return o;
        }
    }
}
