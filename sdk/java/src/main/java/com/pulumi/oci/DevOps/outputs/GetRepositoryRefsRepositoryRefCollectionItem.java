// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRepositoryRefsRepositoryRefCollectionItem {
    /**
     * @return Commit ID in a repository.
     * 
     */
    private String commitId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique full reference name inside a repository.
     * 
     */
    private String fullRefName;
    private String id;
    /**
     * @return SHA-1 hash value of the object pointed to by the tag.
     * 
     */
    private String objectId;
    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    private String refName;
    /**
     * @return Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
     * 
     */
    private String refType;
    /**
     * @return Unique repository identifier.
     * 
     */
    private String repositoryId;

    private GetRepositoryRefsRepositoryRefCollectionItem() {}
    /**
     * @return Commit ID in a repository.
     * 
     */
    public String commitId() {
        return this.commitId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique full reference name inside a repository.
     * 
     */
    public String fullRefName() {
        return this.fullRefName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return SHA-1 hash value of the object pointed to by the tag.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    public String refName() {
        return this.refName;
    }
    /**
     * @return Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
     * 
     */
    public String refType() {
        return this.refType;
    }
    /**
     * @return Unique repository identifier.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryRefsRepositoryRefCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commitId;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String fullRefName;
        private String id;
        private String objectId;
        private String refName;
        private String refType;
        private String repositoryId;
        public Builder() {}
        public Builder(GetRepositoryRefsRepositoryRefCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitId = defaults.commitId;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.fullRefName = defaults.fullRefName;
    	      this.id = defaults.id;
    	      this.objectId = defaults.objectId;
    	      this.refName = defaults.refName;
    	      this.refType = defaults.refType;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder commitId(String commitId) {
            if (commitId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "commitId");
            }
            this.commitId = commitId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder fullRefName(String fullRefName) {
            if (fullRefName == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "fullRefName");
            }
            this.fullRefName = fullRefName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            if (objectId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "objectId");
            }
            this.objectId = objectId;
            return this;
        }
        @CustomType.Setter
        public Builder refName(String refName) {
            if (refName == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "refName");
            }
            this.refName = refName;
            return this;
        }
        @CustomType.Setter
        public Builder refType(String refType) {
            if (refType == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "refType");
            }
            this.refType = refType;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRefsRepositoryRefCollectionItem", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetRepositoryRefsRepositoryRefCollectionItem build() {
            final var _resultValue = new GetRepositoryRefsRepositoryRefCollectionItem();
            _resultValue.commitId = commitId;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.fullRefName = fullRefName;
            _resultValue.id = id;
            _resultValue.objectId = objectId;
            _resultValue.refName = refName;
            _resultValue.refType = refType;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
