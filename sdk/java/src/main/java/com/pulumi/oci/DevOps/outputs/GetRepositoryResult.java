// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryMirrorRepositoryConfig;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryResult {
    /**
     * @return The count of the branches present in the repository.
     * 
     */
    private Integer branchCount;
    /**
     * @return The count of the commits present in the repository.
     * 
     */
    private Integer commitCount;
    /**
     * @return The OCID of the repository&#39;s compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The default branch of the repository.
     * 
     */
    private String defaultBranch;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Details of the repository. Avoid entering confidential information.
     * 
     */
    private String description;
    private @Nullable List<String> fields;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return HTTP URL that you use to git clone, pull and push.
     * 
     */
    private String httpUrl;
    /**
     * @return The OCID of the repository. This value is unique and immutable.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecyleDetails;
    /**
     * @return Configuration information for mirroring the repository.
     * 
     */
    private List<GetRepositoryMirrorRepositoryConfig> mirrorRepositoryConfigs;
    /**
     * @return Unique name of a repository. This value is mutable.
     * 
     */
    private String name;
    /**
     * @return Tenancy unique namespace.
     * 
     */
    private String namespace;
    /**
     * @return The OCID of the DevOps project containing the repository.
     * 
     */
    private String projectId;
    /**
     * @return Unique project name in a namespace.
     * 
     */
    private String projectName;
    private String repositoryId;
    /**
     * @return Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository.
     * 
     */
    private String repositoryType;
    /**
     * @return The size of the repository in bytes.
     * 
     */
    private String sizeInBytes;
    /**
     * @return SSH URL that you use to git clone, pull and push.
     * 
     */
    private String sshUrl;
    /**
     * @return The current state of the repository.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     * 
     */
    private List<String> triggerBuildEvents;

    private GetRepositoryResult() {}
    /**
     * @return The count of the branches present in the repository.
     * 
     */
    public Integer branchCount() {
        return this.branchCount;
    }
    /**
     * @return The count of the commits present in the repository.
     * 
     */
    public Integer commitCount() {
        return this.commitCount;
    }
    /**
     * @return The OCID of the repository&#39;s compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The default branch of the repository.
     * 
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Details of the repository. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return HTTP URL that you use to git clone, pull and push.
     * 
     */
    public String httpUrl() {
        return this.httpUrl;
    }
    /**
     * @return The OCID of the repository. This value is unique and immutable.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecyleDetails() {
        return this.lifecyleDetails;
    }
    /**
     * @return Configuration information for mirroring the repository.
     * 
     */
    public List<GetRepositoryMirrorRepositoryConfig> mirrorRepositoryConfigs() {
        return this.mirrorRepositoryConfigs;
    }
    /**
     * @return Unique name of a repository. This value is mutable.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Tenancy unique namespace.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The OCID of the DevOps project containing the repository.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Unique project name in a namespace.
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository.
     * 
     */
    public String repositoryType() {
        return this.repositoryType;
    }
    /**
     * @return The size of the repository in bytes.
     * 
     */
    public String sizeInBytes() {
        return this.sizeInBytes;
    }
    /**
     * @return SSH URL that you use to git clone, pull and push.
     * 
     */
    public String sshUrl() {
        return this.sshUrl;
    }
    /**
     * @return The current state of the repository.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     * 
     */
    public List<String> triggerBuildEvents() {
        return this.triggerBuildEvents;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer branchCount;
        private Integer commitCount;
        private String compartmentId;
        private String defaultBranch;
        private Map<String,Object> definedTags;
        private String description;
        private @Nullable List<String> fields;
        private Map<String,Object> freeformTags;
        private String httpUrl;
        private String id;
        private String lifecyleDetails;
        private List<GetRepositoryMirrorRepositoryConfig> mirrorRepositoryConfigs;
        private String name;
        private String namespace;
        private String projectId;
        private String projectName;
        private String repositoryId;
        private String repositoryType;
        private String sizeInBytes;
        private String sshUrl;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private List<String> triggerBuildEvents;
        public Builder() {}
        public Builder(GetRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchCount = defaults.branchCount;
    	      this.commitCount = defaults.commitCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.defaultBranch = defaults.defaultBranch;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.fields = defaults.fields;
    	      this.freeformTags = defaults.freeformTags;
    	      this.httpUrl = defaults.httpUrl;
    	      this.id = defaults.id;
    	      this.lifecyleDetails = defaults.lifecyleDetails;
    	      this.mirrorRepositoryConfigs = defaults.mirrorRepositoryConfigs;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.projectId = defaults.projectId;
    	      this.projectName = defaults.projectName;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryType = defaults.repositoryType;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.sshUrl = defaults.sshUrl;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.triggerBuildEvents = defaults.triggerBuildEvents;
        }

        @CustomType.Setter
        public Builder branchCount(Integer branchCount) {
            this.branchCount = Objects.requireNonNull(branchCount);
            return this;
        }
        @CustomType.Setter
        public Builder commitCount(Integer commitCount) {
            this.commitCount = Objects.requireNonNull(commitCount);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = Objects.requireNonNull(defaultBranch);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder httpUrl(String httpUrl) {
            this.httpUrl = Objects.requireNonNull(httpUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecyleDetails(String lifecyleDetails) {
            this.lifecyleDetails = Objects.requireNonNull(lifecyleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder mirrorRepositoryConfigs(List<GetRepositoryMirrorRepositoryConfig> mirrorRepositoryConfigs) {
            this.mirrorRepositoryConfigs = Objects.requireNonNull(mirrorRepositoryConfigs);
            return this;
        }
        public Builder mirrorRepositoryConfigs(GetRepositoryMirrorRepositoryConfig... mirrorRepositoryConfigs) {
            return mirrorRepositoryConfigs(List.of(mirrorRepositoryConfigs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            this.projectName = Objects.requireNonNull(projectName);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryType(String repositoryType) {
            this.repositoryType = Objects.requireNonNull(repositoryType);
            return this;
        }
        @CustomType.Setter
        public Builder sizeInBytes(String sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder sshUrl(String sshUrl) {
            this.sshUrl = Objects.requireNonNull(sshUrl);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder triggerBuildEvents(List<String> triggerBuildEvents) {
            this.triggerBuildEvents = Objects.requireNonNull(triggerBuildEvents);
            return this;
        }
        public Builder triggerBuildEvents(String... triggerBuildEvents) {
            return triggerBuildEvents(List.of(triggerBuildEvents));
        }
        public GetRepositoryResult build() {
            final var _resultValue = new GetRepositoryResult();
            _resultValue.branchCount = branchCount;
            _resultValue.commitCount = commitCount;
            _resultValue.compartmentId = compartmentId;
            _resultValue.defaultBranch = defaultBranch;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.fields = fields;
            _resultValue.freeformTags = freeformTags;
            _resultValue.httpUrl = httpUrl;
            _resultValue.id = id;
            _resultValue.lifecyleDetails = lifecyleDetails;
            _resultValue.mirrorRepositoryConfigs = mirrorRepositoryConfigs;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.projectId = projectId;
            _resultValue.projectName = projectName;
            _resultValue.repositoryId = repositoryId;
            _resultValue.repositoryType = repositoryType;
            _resultValue.sizeInBytes = sizeInBytes;
            _resultValue.sshUrl = sshUrl;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.triggerBuildEvents = triggerBuildEvents;
            return _resultValue;
        }
    }
}
