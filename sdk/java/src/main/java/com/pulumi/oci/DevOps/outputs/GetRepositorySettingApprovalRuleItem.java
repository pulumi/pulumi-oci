// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositorySettingApprovalRuleItemReviewer;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositorySettingApprovalRuleItem {
    /**
     * @return Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    private String destinationBranch;
    /**
     * @return Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    private Integer minApprovalsCount;
    /**
     * @return Name which is used to uniquely identify an approval rule.
     * 
     */
    private String name;
    /**
     * @return List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    private List<GetRepositorySettingApprovalRuleItemReviewer> reviewers;

    private GetRepositorySettingApprovalRuleItem() {}
    /**
     * @return Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    public String destinationBranch() {
        return this.destinationBranch;
    }
    /**
     * @return Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    public Integer minApprovalsCount() {
        return this.minApprovalsCount;
    }
    /**
     * @return Name which is used to uniquely identify an approval rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    public List<GetRepositorySettingApprovalRuleItemReviewer> reviewers() {
        return this.reviewers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositorySettingApprovalRuleItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationBranch;
        private Integer minApprovalsCount;
        private String name;
        private List<GetRepositorySettingApprovalRuleItemReviewer> reviewers;
        public Builder() {}
        public Builder(GetRepositorySettingApprovalRuleItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationBranch = defaults.destinationBranch;
    	      this.minApprovalsCount = defaults.minApprovalsCount;
    	      this.name = defaults.name;
    	      this.reviewers = defaults.reviewers;
        }

        @CustomType.Setter
        public Builder destinationBranch(String destinationBranch) {
            if (destinationBranch == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingApprovalRuleItem", "destinationBranch");
            }
            this.destinationBranch = destinationBranch;
            return this;
        }
        @CustomType.Setter
        public Builder minApprovalsCount(Integer minApprovalsCount) {
            if (minApprovalsCount == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingApprovalRuleItem", "minApprovalsCount");
            }
            this.minApprovalsCount = minApprovalsCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingApprovalRuleItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder reviewers(List<GetRepositorySettingApprovalRuleItemReviewer> reviewers) {
            if (reviewers == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingApprovalRuleItem", "reviewers");
            }
            this.reviewers = reviewers;
            return this;
        }
        public Builder reviewers(GetRepositorySettingApprovalRuleItemReviewer... reviewers) {
            return reviewers(List.of(reviewers));
        }
        public GetRepositorySettingApprovalRuleItem build() {
            final var _resultValue = new GetRepositorySettingApprovalRuleItem();
            _resultValue.destinationBranch = destinationBranch;
            _resultValue.minApprovalsCount = minApprovalsCount;
            _resultValue.name = name;
            _resultValue.reviewers = reviewers;
            return _resultValue;
        }
    }
}
