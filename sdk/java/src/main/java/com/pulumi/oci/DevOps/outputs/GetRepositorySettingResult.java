// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetRepositorySettingApprovalRule;
import com.pulumi.oci.DevOps.outputs.GetRepositorySettingMergeCheck;
import com.pulumi.oci.DevOps.outputs.GetRepositorySettingMergeSetting;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositorySettingResult {
    /**
     * @return List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    private List<GetRepositorySettingApprovalRule> approvalRules;
    private String id;
    /**
     * @return Criteria which must be satisfied to merge a pull request.
     * 
     */
    private List<GetRepositorySettingMergeCheck> mergeChecks;
    /**
     * @return Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    private List<GetRepositorySettingMergeSetting> mergeSettings;
    private String repositoryId;

    private GetRepositorySettingResult() {}
    /**
     * @return List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    public List<GetRepositorySettingApprovalRule> approvalRules() {
        return this.approvalRules;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Criteria which must be satisfied to merge a pull request.
     * 
     */
    public List<GetRepositorySettingMergeCheck> mergeChecks() {
        return this.mergeChecks;
    }
    /**
     * @return Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    public List<GetRepositorySettingMergeSetting> mergeSettings() {
        return this.mergeSettings;
    }
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositorySettingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRepositorySettingApprovalRule> approvalRules;
        private String id;
        private List<GetRepositorySettingMergeCheck> mergeChecks;
        private List<GetRepositorySettingMergeSetting> mergeSettings;
        private String repositoryId;
        public Builder() {}
        public Builder(GetRepositorySettingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalRules = defaults.approvalRules;
    	      this.id = defaults.id;
    	      this.mergeChecks = defaults.mergeChecks;
    	      this.mergeSettings = defaults.mergeSettings;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder approvalRules(List<GetRepositorySettingApprovalRule> approvalRules) {
            if (approvalRules == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingResult", "approvalRules");
            }
            this.approvalRules = approvalRules;
            return this;
        }
        public Builder approvalRules(GetRepositorySettingApprovalRule... approvalRules) {
            return approvalRules(List.of(approvalRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mergeChecks(List<GetRepositorySettingMergeCheck> mergeChecks) {
            if (mergeChecks == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingResult", "mergeChecks");
            }
            this.mergeChecks = mergeChecks;
            return this;
        }
        public Builder mergeChecks(GetRepositorySettingMergeCheck... mergeChecks) {
            return mergeChecks(List.of(mergeChecks));
        }
        @CustomType.Setter
        public Builder mergeSettings(List<GetRepositorySettingMergeSetting> mergeSettings) {
            if (mergeSettings == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingResult", "mergeSettings");
            }
            this.mergeSettings = mergeSettings;
            return this;
        }
        public Builder mergeSettings(GetRepositorySettingMergeSetting... mergeSettings) {
            return mergeSettings(List.of(mergeSettings));
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetRepositorySettingResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        public GetRepositorySettingResult build() {
            final var _resultValue = new GetRepositorySettingResult();
            _resultValue.approvalRules = approvalRules;
            _resultValue.id = id;
            _resultValue.mergeChecks = mergeChecks;
            _resultValue.mergeSettings = mergeSettings;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
