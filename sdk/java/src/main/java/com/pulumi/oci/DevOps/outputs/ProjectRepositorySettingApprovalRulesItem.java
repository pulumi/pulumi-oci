// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.ProjectRepositorySettingApprovalRulesItemReviewer;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectRepositorySettingApprovalRulesItem {
    /**
     * @return (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    private @Nullable String destinationBranch;
    /**
     * @return (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    private Integer minApprovalsCount;
    /**
     * @return (Updatable) Name which is used to uniquely identify an approval rule.
     * 
     */
    private String name;
    /**
     * @return (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    private @Nullable List<ProjectRepositorySettingApprovalRulesItemReviewer> reviewers;

    private ProjectRepositorySettingApprovalRulesItem() {}
    /**
     * @return (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    public Optional<String> destinationBranch() {
        return Optional.ofNullable(this.destinationBranch);
    }
    /**
     * @return (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    public Integer minApprovalsCount() {
        return this.minApprovalsCount;
    }
    /**
     * @return (Updatable) Name which is used to uniquely identify an approval rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    public List<ProjectRepositorySettingApprovalRulesItemReviewer> reviewers() {
        return this.reviewers == null ? List.of() : this.reviewers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectRepositorySettingApprovalRulesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String destinationBranch;
        private Integer minApprovalsCount;
        private String name;
        private @Nullable List<ProjectRepositorySettingApprovalRulesItemReviewer> reviewers;
        public Builder() {}
        public Builder(ProjectRepositorySettingApprovalRulesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationBranch = defaults.destinationBranch;
    	      this.minApprovalsCount = defaults.minApprovalsCount;
    	      this.name = defaults.name;
    	      this.reviewers = defaults.reviewers;
        }

        @CustomType.Setter
        public Builder destinationBranch(@Nullable String destinationBranch) {

            this.destinationBranch = destinationBranch;
            return this;
        }
        @CustomType.Setter
        public Builder minApprovalsCount(Integer minApprovalsCount) {
            if (minApprovalsCount == null) {
              throw new MissingRequiredPropertyException("ProjectRepositorySettingApprovalRulesItem", "minApprovalsCount");
            }
            this.minApprovalsCount = minApprovalsCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectRepositorySettingApprovalRulesItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder reviewers(@Nullable List<ProjectRepositorySettingApprovalRulesItemReviewer> reviewers) {

            this.reviewers = reviewers;
            return this;
        }
        public Builder reviewers(ProjectRepositorySettingApprovalRulesItemReviewer... reviewers) {
            return reviewers(List.of(reviewers));
        }
        public ProjectRepositorySettingApprovalRulesItem build() {
            final var _resultValue = new ProjectRepositorySettingApprovalRulesItem();
            _resultValue.destinationBranch = destinationBranch;
            _resultValue.minApprovalsCount = minApprovalsCount;
            _resultValue.name = name;
            _resultValue.reviewers = reviewers;
            return _resultValue;
        }
    }
}
