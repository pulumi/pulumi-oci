// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DisasterRecovery.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DisasterRecovery.inputs.GetDrProtectionGroupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDrProtectionGroupsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDrProtectionGroupsPlainArgs Empty = new GetDrProtectionGroupsPlainArgs();

    /**
     * The ID (OCID) of the compartment in which to list resources.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The ID (OCID) of the compartment in which to list resources.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The OCID of the DR protection group. Optional query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
     * 
     */
    @Import(name="drProtectionGroupId")
    private @Nullable String drProtectionGroupId;

    /**
     * @return The OCID of the DR protection group. Optional query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
     * 
     */
    public Optional<String> drProtectionGroupId() {
        return Optional.ofNullable(this.drProtectionGroupId);
    }

    @Import(name="filters")
    private @Nullable List<GetDrProtectionGroupsFilter> filters;

    public Optional<List<GetDrProtectionGroupsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only DR protection groups that match the given lifecycle sub-state.
     * 
     */
    @Import(name="lifecycleSubState")
    private @Nullable String lifecycleSubState;

    /**
     * @return A filter to return only DR protection groups that match the given lifecycle sub-state.
     * 
     */
    public Optional<String> lifecycleSubState() {
        return Optional.ofNullable(this.lifecycleSubState);
    }

    /**
     * The DR protection group Role.
     * 
     */
    @Import(name="role")
    private @Nullable String role;

    /**
     * @return The DR protection group Role.
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * A filter to return only DR protection groups that match the given lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only DR protection groups that match the given lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDrProtectionGroupsPlainArgs() {}

    private GetDrProtectionGroupsPlainArgs(GetDrProtectionGroupsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.drProtectionGroupId = $.drProtectionGroupId;
        this.filters = $.filters;
        this.lifecycleSubState = $.lifecycleSubState;
        this.role = $.role;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDrProtectionGroupsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDrProtectionGroupsPlainArgs $;

        public Builder() {
            $ = new GetDrProtectionGroupsPlainArgs();
        }

        public Builder(GetDrProtectionGroupsPlainArgs defaults) {
            $ = new GetDrProtectionGroupsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID (OCID) of the compartment in which to list resources.  Example: `ocid1.compartment.oc1..uniqueID`
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param drProtectionGroupId The OCID of the DR protection group. Optional query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
         * 
         * @return builder
         * 
         */
        public Builder drProtectionGroupId(@Nullable String drProtectionGroupId) {
            $.drProtectionGroupId = drProtectionGroupId;
            return this;
        }

        public Builder filters(@Nullable List<GetDrProtectionGroupsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDrProtectionGroupsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param lifecycleSubState A filter to return only DR protection groups that match the given lifecycle sub-state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleSubState(@Nullable String lifecycleSubState) {
            $.lifecycleSubState = lifecycleSubState;
            return this;
        }

        /**
         * @param role The DR protection group Role.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable String role) {
            $.role = role;
            return this;
        }

        /**
         * @param state A filter to return only DR protection groups that match the given lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetDrProtectionGroupsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDrProtectionGroupsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
