// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DisasterRecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberBackendSetMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberBackupConfig;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberBackupLocation;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberBlockVolumeAttachAndMountOperations;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberBlockVolumeOperation;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberCommonDestinationKey;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberDbSystemAdminUserDetails;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberDbSystemReplicationUserDetails;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberDestinationEncryptionKey;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberExportMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberFileSystemOperation;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberLoadBalancerMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberManagedNodePoolConfig;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberNetworkLoadBalancerMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberVaultMapping;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberVirtualNodePoolConfig;
import com.pulumi.oci.DisasterRecovery.outputs.DrProtectionGroupMemberVnicMapping;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DrProtectionGroupMember {
    /**
     * @return (Updatable) This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
     * 
     */
    private @Nullable String autonomousDatabaseStandbyTypeForDrDrills;
    /**
     * @return (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberBackendSetMapping> backendSetMappings;
    /**
     * @return (Updatable) Create backup configuration properties for an OKE member.
     * 
     */
    private @Nullable DrProtectionGroupMemberBackupConfig backupConfig;
    /**
     * @return (Updatable) The details for creating the backup location of an OKE Cluster.
     * 
     */
    private @Nullable DrProtectionGroupMemberBackupLocation backupLocation;
    /**
     * @return (Updatable) The details for creating the operations performed on a block volume.
     * 
     */
    private @Nullable DrProtectionGroupMemberBlockVolumeAttachAndMountOperations blockVolumeAttachAndMountOperations;
    /**
     * @return (Updatable) Deprecated. Use the &#39;blockVolumeAttachAndMountOperations&#39; attribute instead of this. A list of operations performed on block volumes used by the compute instance.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations;
    /**
     * @return (Updatable) The bucket name inside the object storage namespace.  Example: `bucketName`
     * 
     */
    private @Nullable String bucket;
    /**
     * @return (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
     * 
     */
    private @Nullable DrProtectionGroupMemberCommonDestinationKey commonDestinationKey;
    /**
     * @return (Updatable) The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
     * 
     */
    private @Nullable String connectionStringType;
    /**
     * @return (Updatable) The credentials for the HeatWave MySQL DB System administrator user, containing the username and the OCID of the Vault secret that stores the password.
     * 
     */
    private @Nullable DrProtectionGroupMemberDbSystemAdminUserDetails dbSystemAdminUserDetails;
    /**
     * @return (Updatable) The credentials for the HeatWave MySQL DB System replication user, containing the username and the OCID of the Vault secret that stores the password.
     * 
     */
    private @Nullable DrProtectionGroupMemberDbSystemReplicationUserDetails dbSystemReplicationUserDetails;
    /**
     * @return (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
     * 
     */
    private @Nullable String destinationAvailabilityDomain;
    /**
     * @return (Updatable) The OCID of the backup policy to use in the destination region. This policy will be used to create backups  for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationBackupPolicyId;
    /**
     * @return (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationCapacityReservationId;
    /**
     * @return (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationCompartmentId;
    /**
     * @return (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationDedicatedVmHostId;
    /**
     * @return (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
     * 
     */
    private @Nullable DrProtectionGroupMemberDestinationEncryptionKey destinationEncryptionKey;
    /**
     * @return (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationLoadBalancerId;
    /**
     * @return (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationNetworkLoadBalancerId;
    /**
     * @return (Updatable) The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationSnapshotPolicyId;
    /**
     * @return (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberExportMapping> exportMappings;
    /**
     * @return (Updatable) A list of operations performed on file systems used by the compute instance.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberFileSystemOperation> fileSystemOperations;
    /**
     * @return (Updatable) The maximum time (in seconds) to wait for the Global Transaction Identifier (GTID) synchronization process to complete before timing out.  Example: `600`
     * 
     */
    private @Nullable Integer gtidReconciliationTimeout;
    /**
     * @return (Updatable) A flag indicating whether to continue with DR operation if the Global Transaction Identifier (GTID) reconciliation operation times out.  Example: `false`
     * 
     */
    private @Nullable Boolean isContinueOnGtidReconciliationTimeout;
    /**
     * @return (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    private @Nullable Boolean isMovable;
    /**
     * @return (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    private @Nullable Boolean isRetainFaultDomain;
    /**
     * @return (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
     * 
     */
    private @Nullable Boolean isStartStopEnabled;
    /**
     * @return (Updatable) The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent&#39;s Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private @Nullable String jumpHostId;
    /**
     * @return (Updatable) The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings;
    /**
     * @return (Updatable) The list of managed node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs;
    /**
     * @return (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private String memberId;
    /**
     * @return (Updatable) The type of the member.
     * 
     */
    private String memberType;
    /**
     * @return (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
     * 
     */
    private @Nullable String namespace;
    /**
     * @return (Updatable) The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings;
    /**
     * @return (Updatable) The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    private @Nullable String passwordVaultSecretId;
    /**
     * @return (Updatable) The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.   Example: `ocid1.cluster.oc1..uniqueID`
     * 
     */
    private @Nullable String peerClusterId;
    /**
     * @return (Updatable) The OCID of the peer HeatWave MySQL DB System from the peer region.  Example: `ocid1.mysqldbsystem.oc1..uniqueID`
     * 
     */
    private @Nullable String peerDbSystemId;
    /**
     * @return (Updatable) A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
     * 
     * If you add the entry for source volumes and its corresponding vault and encryption keys here, you can not use  &#39;commonDestinationKey&#39; for encrypting all volumes with common encryption key. Similarly, if you specify common vault and encryption key using &#39;commonDestinationKey&#39;, you cannot specify vaults and encryption keys individually  for each volume using &#39;sourceVolumeToDestinationEncryptionKeyMappings&#39;.
     * 
     * An entry for each volume in volume group should be added in this list. The encryption key will not be updated  for the volumes that are part of volume group but missing in this list.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings;
    /**
     * @return (Updatable) The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberVaultMapping> vaultMappings;
    /**
     * @return (Updatable) The list of virtual node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs;
    /**
     * @return (Updatable) A list of compute instance VNIC mappings.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberVnicMapping> vnicMapping;
    /**
     * @return (Updatable) A list of compute instance VNIC mappings.
     * 
     */
    private @Nullable List<DrProtectionGroupMemberVnicMapping> vnicMappings;

    private DrProtectionGroupMember() {}
    /**
     * @return (Updatable) This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
     * 
     */
    public Optional<String> autonomousDatabaseStandbyTypeForDrDrills() {
        return Optional.ofNullable(this.autonomousDatabaseStandbyTypeForDrDrills);
    }
    /**
     * @return (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    public List<DrProtectionGroupMemberBackendSetMapping> backendSetMappings() {
        return this.backendSetMappings == null ? List.of() : this.backendSetMappings;
    }
    /**
     * @return (Updatable) Create backup configuration properties for an OKE member.
     * 
     */
    public Optional<DrProtectionGroupMemberBackupConfig> backupConfig() {
        return Optional.ofNullable(this.backupConfig);
    }
    /**
     * @return (Updatable) The details for creating the backup location of an OKE Cluster.
     * 
     */
    public Optional<DrProtectionGroupMemberBackupLocation> backupLocation() {
        return Optional.ofNullable(this.backupLocation);
    }
    /**
     * @return (Updatable) The details for creating the operations performed on a block volume.
     * 
     */
    public Optional<DrProtectionGroupMemberBlockVolumeAttachAndMountOperations> blockVolumeAttachAndMountOperations() {
        return Optional.ofNullable(this.blockVolumeAttachAndMountOperations);
    }
    /**
     * @return (Updatable) Deprecated. Use the &#39;blockVolumeAttachAndMountOperations&#39; attribute instead of this. A list of operations performed on block volumes used by the compute instance.
     * 
     */
    public List<DrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations() {
        return this.blockVolumeOperations == null ? List.of() : this.blockVolumeOperations;
    }
    /**
     * @return (Updatable) The bucket name inside the object storage namespace.  Example: `bucketName`
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
     * 
     */
    public Optional<DrProtectionGroupMemberCommonDestinationKey> commonDestinationKey() {
        return Optional.ofNullable(this.commonDestinationKey);
    }
    /**
     * @return (Updatable) The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
     * 
     */
    public Optional<String> connectionStringType() {
        return Optional.ofNullable(this.connectionStringType);
    }
    /**
     * @return (Updatable) The credentials for the HeatWave MySQL DB System administrator user, containing the username and the OCID of the Vault secret that stores the password.
     * 
     */
    public Optional<DrProtectionGroupMemberDbSystemAdminUserDetails> dbSystemAdminUserDetails() {
        return Optional.ofNullable(this.dbSystemAdminUserDetails);
    }
    /**
     * @return (Updatable) The credentials for the HeatWave MySQL DB System replication user, containing the username and the OCID of the Vault secret that stores the password.
     * 
     */
    public Optional<DrProtectionGroupMemberDbSystemReplicationUserDetails> dbSystemReplicationUserDetails() {
        return Optional.ofNullable(this.dbSystemReplicationUserDetails);
    }
    /**
     * @return (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
     * 
     */
    public Optional<String> destinationAvailabilityDomain() {
        return Optional.ofNullable(this.destinationAvailabilityDomain);
    }
    /**
     * @return (Updatable) The OCID of the backup policy to use in the destination region. This policy will be used to create backups  for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationBackupPolicyId() {
        return Optional.ofNullable(this.destinationBackupPolicyId);
    }
    /**
     * @return (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationCapacityReservationId() {
        return Optional.ofNullable(this.destinationCapacityReservationId);
    }
    /**
     * @return (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationCompartmentId() {
        return Optional.ofNullable(this.destinationCompartmentId);
    }
    /**
     * @return (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationDedicatedVmHostId() {
        return Optional.ofNullable(this.destinationDedicatedVmHostId);
    }
    /**
     * @return (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
     * 
     */
    public Optional<DrProtectionGroupMemberDestinationEncryptionKey> destinationEncryptionKey() {
        return Optional.ofNullable(this.destinationEncryptionKey);
    }
    /**
     * @return (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationLoadBalancerId() {
        return Optional.ofNullable(this.destinationLoadBalancerId);
    }
    /**
     * @return (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationNetworkLoadBalancerId() {
        return Optional.ofNullable(this.destinationNetworkLoadBalancerId);
    }
    /**
     * @return (Updatable) The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationSnapshotPolicyId() {
        return Optional.ofNullable(this.destinationSnapshotPolicyId);
    }
    /**
     * @return (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
     * 
     */
    public List<DrProtectionGroupMemberExportMapping> exportMappings() {
        return this.exportMappings == null ? List.of() : this.exportMappings;
    }
    /**
     * @return (Updatable) A list of operations performed on file systems used by the compute instance.
     * 
     */
    public List<DrProtectionGroupMemberFileSystemOperation> fileSystemOperations() {
        return this.fileSystemOperations == null ? List.of() : this.fileSystemOperations;
    }
    /**
     * @return (Updatable) The maximum time (in seconds) to wait for the Global Transaction Identifier (GTID) synchronization process to complete before timing out.  Example: `600`
     * 
     */
    public Optional<Integer> gtidReconciliationTimeout() {
        return Optional.ofNullable(this.gtidReconciliationTimeout);
    }
    /**
     * @return (Updatable) A flag indicating whether to continue with DR operation if the Global Transaction Identifier (GTID) reconciliation operation times out.  Example: `false`
     * 
     */
    public Optional<Boolean> isContinueOnGtidReconciliationTimeout() {
        return Optional.ofNullable(this.isContinueOnGtidReconciliationTimeout);
    }
    /**
     * @return (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    public Optional<Boolean> isMovable() {
        return Optional.ofNullable(this.isMovable);
    }
    /**
     * @return (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    public Optional<Boolean> isRetainFaultDomain() {
        return Optional.ofNullable(this.isRetainFaultDomain);
    }
    /**
     * @return (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
     * 
     */
    public Optional<Boolean> isStartStopEnabled() {
        return Optional.ofNullable(this.isStartStopEnabled);
    }
    /**
     * @return (Updatable) The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent&#39;s Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public Optional<String> jumpHostId() {
        return Optional.ofNullable(this.jumpHostId);
    }
    /**
     * @return (Updatable) The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<DrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings() {
        return this.loadBalancerMappings == null ? List.of() : this.loadBalancerMappings;
    }
    /**
     * @return (Updatable) The list of managed node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    public List<DrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs() {
        return this.managedNodePoolConfigs == null ? List.of() : this.managedNodePoolConfigs;
    }
    /**
     * @return (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public String memberId() {
        return this.memberId;
    }
    /**
     * @return (Updatable) The type of the member.
     * 
     */
    public String memberType() {
        return this.memberType;
    }
    /**
     * @return (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return (Updatable) The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<DrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings() {
        return this.networkLoadBalancerMappings == null ? List.of() : this.networkLoadBalancerMappings;
    }
    /**
     * @return (Updatable) The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    public Optional<String> passwordVaultSecretId() {
        return Optional.ofNullable(this.passwordVaultSecretId);
    }
    /**
     * @return (Updatable) The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.   Example: `ocid1.cluster.oc1..uniqueID`
     * 
     */
    public Optional<String> peerClusterId() {
        return Optional.ofNullable(this.peerClusterId);
    }
    /**
     * @return (Updatable) The OCID of the peer HeatWave MySQL DB System from the peer region.  Example: `ocid1.mysqldbsystem.oc1..uniqueID`
     * 
     */
    public Optional<String> peerDbSystemId() {
        return Optional.ofNullable(this.peerDbSystemId);
    }
    /**
     * @return (Updatable) A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
     * 
     * If you add the entry for source volumes and its corresponding vault and encryption keys here, you can not use  &#39;commonDestinationKey&#39; for encrypting all volumes with common encryption key. Similarly, if you specify common vault and encryption key using &#39;commonDestinationKey&#39;, you cannot specify vaults and encryption keys individually  for each volume using &#39;sourceVolumeToDestinationEncryptionKeyMappings&#39;.
     * 
     * An entry for each volume in volume group should be added in this list. The encryption key will not be updated  for the volumes that are part of volume group but missing in this list.
     * 
     */
    public List<DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings() {
        return this.sourceVolumeToDestinationEncryptionKeyMappings == null ? List.of() : this.sourceVolumeToDestinationEncryptionKeyMappings;
    }
    /**
     * @return (Updatable) The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<DrProtectionGroupMemberVaultMapping> vaultMappings() {
        return this.vaultMappings == null ? List.of() : this.vaultMappings;
    }
    /**
     * @return (Updatable) The list of virtual node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    public List<DrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs() {
        return this.virtualNodePoolConfigs == null ? List.of() : this.virtualNodePoolConfigs;
    }
    /**
     * @return (Updatable) A list of compute instance VNIC mappings.
     * 
     */
    public List<DrProtectionGroupMemberVnicMapping> vnicMapping() {
        return this.vnicMapping == null ? List.of() : this.vnicMapping;
    }
    /**
     * @return (Updatable) A list of compute instance VNIC mappings.
     * 
     */
    public List<DrProtectionGroupMemberVnicMapping> vnicMappings() {
        return this.vnicMappings == null ? List.of() : this.vnicMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DrProtectionGroupMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String autonomousDatabaseStandbyTypeForDrDrills;
        private @Nullable List<DrProtectionGroupMemberBackendSetMapping> backendSetMappings;
        private @Nullable DrProtectionGroupMemberBackupConfig backupConfig;
        private @Nullable DrProtectionGroupMemberBackupLocation backupLocation;
        private @Nullable DrProtectionGroupMemberBlockVolumeAttachAndMountOperations blockVolumeAttachAndMountOperations;
        private @Nullable List<DrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations;
        private @Nullable String bucket;
        private @Nullable DrProtectionGroupMemberCommonDestinationKey commonDestinationKey;
        private @Nullable String connectionStringType;
        private @Nullable DrProtectionGroupMemberDbSystemAdminUserDetails dbSystemAdminUserDetails;
        private @Nullable DrProtectionGroupMemberDbSystemReplicationUserDetails dbSystemReplicationUserDetails;
        private @Nullable String destinationAvailabilityDomain;
        private @Nullable String destinationBackupPolicyId;
        private @Nullable String destinationCapacityReservationId;
        private @Nullable String destinationCompartmentId;
        private @Nullable String destinationDedicatedVmHostId;
        private @Nullable DrProtectionGroupMemberDestinationEncryptionKey destinationEncryptionKey;
        private @Nullable String destinationLoadBalancerId;
        private @Nullable String destinationNetworkLoadBalancerId;
        private @Nullable String destinationSnapshotPolicyId;
        private @Nullable List<DrProtectionGroupMemberExportMapping> exportMappings;
        private @Nullable List<DrProtectionGroupMemberFileSystemOperation> fileSystemOperations;
        private @Nullable Integer gtidReconciliationTimeout;
        private @Nullable Boolean isContinueOnGtidReconciliationTimeout;
        private @Nullable Boolean isMovable;
        private @Nullable Boolean isRetainFaultDomain;
        private @Nullable Boolean isStartStopEnabled;
        private @Nullable String jumpHostId;
        private @Nullable List<DrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings;
        private @Nullable List<DrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs;
        private String memberId;
        private String memberType;
        private @Nullable String namespace;
        private @Nullable List<DrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings;
        private @Nullable String passwordVaultSecretId;
        private @Nullable String peerClusterId;
        private @Nullable String peerDbSystemId;
        private @Nullable List<DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings;
        private @Nullable List<DrProtectionGroupMemberVaultMapping> vaultMappings;
        private @Nullable List<DrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs;
        private @Nullable List<DrProtectionGroupMemberVnicMapping> vnicMapping;
        private @Nullable List<DrProtectionGroupMemberVnicMapping> vnicMappings;
        public Builder() {}
        public Builder(DrProtectionGroupMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousDatabaseStandbyTypeForDrDrills = defaults.autonomousDatabaseStandbyTypeForDrDrills;
    	      this.backendSetMappings = defaults.backendSetMappings;
    	      this.backupConfig = defaults.backupConfig;
    	      this.backupLocation = defaults.backupLocation;
    	      this.blockVolumeAttachAndMountOperations = defaults.blockVolumeAttachAndMountOperations;
    	      this.blockVolumeOperations = defaults.blockVolumeOperations;
    	      this.bucket = defaults.bucket;
    	      this.commonDestinationKey = defaults.commonDestinationKey;
    	      this.connectionStringType = defaults.connectionStringType;
    	      this.dbSystemAdminUserDetails = defaults.dbSystemAdminUserDetails;
    	      this.dbSystemReplicationUserDetails = defaults.dbSystemReplicationUserDetails;
    	      this.destinationAvailabilityDomain = defaults.destinationAvailabilityDomain;
    	      this.destinationBackupPolicyId = defaults.destinationBackupPolicyId;
    	      this.destinationCapacityReservationId = defaults.destinationCapacityReservationId;
    	      this.destinationCompartmentId = defaults.destinationCompartmentId;
    	      this.destinationDedicatedVmHostId = defaults.destinationDedicatedVmHostId;
    	      this.destinationEncryptionKey = defaults.destinationEncryptionKey;
    	      this.destinationLoadBalancerId = defaults.destinationLoadBalancerId;
    	      this.destinationNetworkLoadBalancerId = defaults.destinationNetworkLoadBalancerId;
    	      this.destinationSnapshotPolicyId = defaults.destinationSnapshotPolicyId;
    	      this.exportMappings = defaults.exportMappings;
    	      this.fileSystemOperations = defaults.fileSystemOperations;
    	      this.gtidReconciliationTimeout = defaults.gtidReconciliationTimeout;
    	      this.isContinueOnGtidReconciliationTimeout = defaults.isContinueOnGtidReconciliationTimeout;
    	      this.isMovable = defaults.isMovable;
    	      this.isRetainFaultDomain = defaults.isRetainFaultDomain;
    	      this.isStartStopEnabled = defaults.isStartStopEnabled;
    	      this.jumpHostId = defaults.jumpHostId;
    	      this.loadBalancerMappings = defaults.loadBalancerMappings;
    	      this.managedNodePoolConfigs = defaults.managedNodePoolConfigs;
    	      this.memberId = defaults.memberId;
    	      this.memberType = defaults.memberType;
    	      this.namespace = defaults.namespace;
    	      this.networkLoadBalancerMappings = defaults.networkLoadBalancerMappings;
    	      this.passwordVaultSecretId = defaults.passwordVaultSecretId;
    	      this.peerClusterId = defaults.peerClusterId;
    	      this.peerDbSystemId = defaults.peerDbSystemId;
    	      this.sourceVolumeToDestinationEncryptionKeyMappings = defaults.sourceVolumeToDestinationEncryptionKeyMappings;
    	      this.vaultMappings = defaults.vaultMappings;
    	      this.virtualNodePoolConfigs = defaults.virtualNodePoolConfigs;
    	      this.vnicMapping = defaults.vnicMapping;
    	      this.vnicMappings = defaults.vnicMappings;
        }

        @CustomType.Setter
        public Builder autonomousDatabaseStandbyTypeForDrDrills(@Nullable String autonomousDatabaseStandbyTypeForDrDrills) {

            this.autonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            return this;
        }
        @CustomType.Setter
        public Builder backendSetMappings(@Nullable List<DrProtectionGroupMemberBackendSetMapping> backendSetMappings) {

            this.backendSetMappings = backendSetMappings;
            return this;
        }
        public Builder backendSetMappings(DrProtectionGroupMemberBackendSetMapping... backendSetMappings) {
            return backendSetMappings(List.of(backendSetMappings));
        }
        @CustomType.Setter
        public Builder backupConfig(@Nullable DrProtectionGroupMemberBackupConfig backupConfig) {

            this.backupConfig = backupConfig;
            return this;
        }
        @CustomType.Setter
        public Builder backupLocation(@Nullable DrProtectionGroupMemberBackupLocation backupLocation) {

            this.backupLocation = backupLocation;
            return this;
        }
        @CustomType.Setter
        public Builder blockVolumeAttachAndMountOperations(@Nullable DrProtectionGroupMemberBlockVolumeAttachAndMountOperations blockVolumeAttachAndMountOperations) {

            this.blockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            return this;
        }
        @CustomType.Setter
        public Builder blockVolumeOperations(@Nullable List<DrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations) {

            this.blockVolumeOperations = blockVolumeOperations;
            return this;
        }
        public Builder blockVolumeOperations(DrProtectionGroupMemberBlockVolumeOperation... blockVolumeOperations) {
            return blockVolumeOperations(List.of(blockVolumeOperations));
        }
        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {

            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder commonDestinationKey(@Nullable DrProtectionGroupMemberCommonDestinationKey commonDestinationKey) {

            this.commonDestinationKey = commonDestinationKey;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStringType(@Nullable String connectionStringType) {

            this.connectionStringType = connectionStringType;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemAdminUserDetails(@Nullable DrProtectionGroupMemberDbSystemAdminUserDetails dbSystemAdminUserDetails) {

            this.dbSystemAdminUserDetails = dbSystemAdminUserDetails;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemReplicationUserDetails(@Nullable DrProtectionGroupMemberDbSystemReplicationUserDetails dbSystemReplicationUserDetails) {

            this.dbSystemReplicationUserDetails = dbSystemReplicationUserDetails;
            return this;
        }
        @CustomType.Setter
        public Builder destinationAvailabilityDomain(@Nullable String destinationAvailabilityDomain) {

            this.destinationAvailabilityDomain = destinationAvailabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder destinationBackupPolicyId(@Nullable String destinationBackupPolicyId) {

            this.destinationBackupPolicyId = destinationBackupPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCapacityReservationId(@Nullable String destinationCapacityReservationId) {

            this.destinationCapacityReservationId = destinationCapacityReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCompartmentId(@Nullable String destinationCompartmentId) {

            this.destinationCompartmentId = destinationCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDedicatedVmHostId(@Nullable String destinationDedicatedVmHostId) {

            this.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationEncryptionKey(@Nullable DrProtectionGroupMemberDestinationEncryptionKey destinationEncryptionKey) {

            this.destinationEncryptionKey = destinationEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder destinationLoadBalancerId(@Nullable String destinationLoadBalancerId) {

            this.destinationLoadBalancerId = destinationLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetworkLoadBalancerId(@Nullable String destinationNetworkLoadBalancerId) {

            this.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationSnapshotPolicyId(@Nullable String destinationSnapshotPolicyId) {

            this.destinationSnapshotPolicyId = destinationSnapshotPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder exportMappings(@Nullable List<DrProtectionGroupMemberExportMapping> exportMappings) {

            this.exportMappings = exportMappings;
            return this;
        }
        public Builder exportMappings(DrProtectionGroupMemberExportMapping... exportMappings) {
            return exportMappings(List.of(exportMappings));
        }
        @CustomType.Setter
        public Builder fileSystemOperations(@Nullable List<DrProtectionGroupMemberFileSystemOperation> fileSystemOperations) {

            this.fileSystemOperations = fileSystemOperations;
            return this;
        }
        public Builder fileSystemOperations(DrProtectionGroupMemberFileSystemOperation... fileSystemOperations) {
            return fileSystemOperations(List.of(fileSystemOperations));
        }
        @CustomType.Setter
        public Builder gtidReconciliationTimeout(@Nullable Integer gtidReconciliationTimeout) {

            this.gtidReconciliationTimeout = gtidReconciliationTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder isContinueOnGtidReconciliationTimeout(@Nullable Boolean isContinueOnGtidReconciliationTimeout) {

            this.isContinueOnGtidReconciliationTimeout = isContinueOnGtidReconciliationTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder isMovable(@Nullable Boolean isMovable) {

            this.isMovable = isMovable;
            return this;
        }
        @CustomType.Setter
        public Builder isRetainFaultDomain(@Nullable Boolean isRetainFaultDomain) {

            this.isRetainFaultDomain = isRetainFaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder isStartStopEnabled(@Nullable Boolean isStartStopEnabled) {

            this.isStartStopEnabled = isStartStopEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jumpHostId(@Nullable String jumpHostId) {

            this.jumpHostId = jumpHostId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerMappings(@Nullable List<DrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings) {

            this.loadBalancerMappings = loadBalancerMappings;
            return this;
        }
        public Builder loadBalancerMappings(DrProtectionGroupMemberLoadBalancerMapping... loadBalancerMappings) {
            return loadBalancerMappings(List.of(loadBalancerMappings));
        }
        @CustomType.Setter
        public Builder managedNodePoolConfigs(@Nullable List<DrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs) {

            this.managedNodePoolConfigs = managedNodePoolConfigs;
            return this;
        }
        public Builder managedNodePoolConfigs(DrProtectionGroupMemberManagedNodePoolConfig... managedNodePoolConfigs) {
            return managedNodePoolConfigs(List.of(managedNodePoolConfigs));
        }
        @CustomType.Setter
        public Builder memberId(String memberId) {
            if (memberId == null) {
              throw new MissingRequiredPropertyException("DrProtectionGroupMember", "memberId");
            }
            this.memberId = memberId;
            return this;
        }
        @CustomType.Setter
        public Builder memberType(String memberType) {
            if (memberType == null) {
              throw new MissingRequiredPropertyException("DrProtectionGroupMember", "memberType");
            }
            this.memberType = memberType;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder networkLoadBalancerMappings(@Nullable List<DrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings) {

            this.networkLoadBalancerMappings = networkLoadBalancerMappings;
            return this;
        }
        public Builder networkLoadBalancerMappings(DrProtectionGroupMemberNetworkLoadBalancerMapping... networkLoadBalancerMappings) {
            return networkLoadBalancerMappings(List.of(networkLoadBalancerMappings));
        }
        @CustomType.Setter
        public Builder passwordVaultSecretId(@Nullable String passwordVaultSecretId) {

            this.passwordVaultSecretId = passwordVaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder peerClusterId(@Nullable String peerClusterId) {

            this.peerClusterId = peerClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder peerDbSystemId(@Nullable String peerDbSystemId) {

            this.peerDbSystemId = peerDbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVolumeToDestinationEncryptionKeyMappings(@Nullable List<DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings) {

            this.sourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            return this;
        }
        public Builder sourceVolumeToDestinationEncryptionKeyMappings(DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping... sourceVolumeToDestinationEncryptionKeyMappings) {
            return sourceVolumeToDestinationEncryptionKeyMappings(List.of(sourceVolumeToDestinationEncryptionKeyMappings));
        }
        @CustomType.Setter
        public Builder vaultMappings(@Nullable List<DrProtectionGroupMemberVaultMapping> vaultMappings) {

            this.vaultMappings = vaultMappings;
            return this;
        }
        public Builder vaultMappings(DrProtectionGroupMemberVaultMapping... vaultMappings) {
            return vaultMappings(List.of(vaultMappings));
        }
        @CustomType.Setter
        public Builder virtualNodePoolConfigs(@Nullable List<DrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs) {

            this.virtualNodePoolConfigs = virtualNodePoolConfigs;
            return this;
        }
        public Builder virtualNodePoolConfigs(DrProtectionGroupMemberVirtualNodePoolConfig... virtualNodePoolConfigs) {
            return virtualNodePoolConfigs(List.of(virtualNodePoolConfigs));
        }
        @CustomType.Setter
        public Builder vnicMapping(@Nullable List<DrProtectionGroupMemberVnicMapping> vnicMapping) {

            this.vnicMapping = vnicMapping;
            return this;
        }
        public Builder vnicMapping(DrProtectionGroupMemberVnicMapping... vnicMapping) {
            return vnicMapping(List.of(vnicMapping));
        }
        @CustomType.Setter
        public Builder vnicMappings(@Nullable List<DrProtectionGroupMemberVnicMapping> vnicMappings) {

            this.vnicMappings = vnicMappings;
            return this;
        }
        public Builder vnicMappings(DrProtectionGroupMemberVnicMapping... vnicMappings) {
            return vnicMappings(List.of(vnicMappings));
        }
        public DrProtectionGroupMember build() {
            final var _resultValue = new DrProtectionGroupMember();
            _resultValue.autonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            _resultValue.backendSetMappings = backendSetMappings;
            _resultValue.backupConfig = backupConfig;
            _resultValue.backupLocation = backupLocation;
            _resultValue.blockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            _resultValue.blockVolumeOperations = blockVolumeOperations;
            _resultValue.bucket = bucket;
            _resultValue.commonDestinationKey = commonDestinationKey;
            _resultValue.connectionStringType = connectionStringType;
            _resultValue.dbSystemAdminUserDetails = dbSystemAdminUserDetails;
            _resultValue.dbSystemReplicationUserDetails = dbSystemReplicationUserDetails;
            _resultValue.destinationAvailabilityDomain = destinationAvailabilityDomain;
            _resultValue.destinationBackupPolicyId = destinationBackupPolicyId;
            _resultValue.destinationCapacityReservationId = destinationCapacityReservationId;
            _resultValue.destinationCompartmentId = destinationCompartmentId;
            _resultValue.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            _resultValue.destinationEncryptionKey = destinationEncryptionKey;
            _resultValue.destinationLoadBalancerId = destinationLoadBalancerId;
            _resultValue.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            _resultValue.destinationSnapshotPolicyId = destinationSnapshotPolicyId;
            _resultValue.exportMappings = exportMappings;
            _resultValue.fileSystemOperations = fileSystemOperations;
            _resultValue.gtidReconciliationTimeout = gtidReconciliationTimeout;
            _resultValue.isContinueOnGtidReconciliationTimeout = isContinueOnGtidReconciliationTimeout;
            _resultValue.isMovable = isMovable;
            _resultValue.isRetainFaultDomain = isRetainFaultDomain;
            _resultValue.isStartStopEnabled = isStartStopEnabled;
            _resultValue.jumpHostId = jumpHostId;
            _resultValue.loadBalancerMappings = loadBalancerMappings;
            _resultValue.managedNodePoolConfigs = managedNodePoolConfigs;
            _resultValue.memberId = memberId;
            _resultValue.memberType = memberType;
            _resultValue.namespace = namespace;
            _resultValue.networkLoadBalancerMappings = networkLoadBalancerMappings;
            _resultValue.passwordVaultSecretId = passwordVaultSecretId;
            _resultValue.peerClusterId = peerClusterId;
            _resultValue.peerDbSystemId = peerDbSystemId;
            _resultValue.sourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            _resultValue.vaultMappings = vaultMappings;
            _resultValue.virtualNodePoolConfigs = virtualNodePoolConfigs;
            _resultValue.vnicMapping = vnicMapping;
            _resultValue.vnicMappings = vnicMappings;
            return _resultValue;
        }
    }
}
