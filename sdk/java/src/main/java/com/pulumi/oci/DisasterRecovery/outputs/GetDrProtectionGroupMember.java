// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DisasterRecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberBackendSetMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberBackupConfig;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberBackupLocation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberBlockVolumeOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberCommonDestinationKey;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberDestinationEncryptionKey;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberExportMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberFileSystemOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberLoadBalancerMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberManagedNodePoolConfig;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberNetworkLoadBalancerMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberVaultMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberVirtualNodePoolConfig;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupMemberVnicMapping;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDrProtectionGroupMember {
    /**
     * @return This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
     * 
     */
    private String autonomousDatabaseStandbyTypeForDrDrills;
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    private List<GetDrProtectionGroupMemberBackendSetMapping> backendSetMappings;
    /**
     * @return The details of backup performed on OKE Cluster.
     * 
     */
    private List<GetDrProtectionGroupMemberBackupConfig> backupConfigs;
    /**
     * @return The details for object storage backup location of an OKE Cluster
     * 
     */
    private List<GetDrProtectionGroupMemberBackupLocation> backupLocations;
    /**
     * @return The details of the block volume operations performed on the non-movable compute instance.
     * 
     */
    private List<GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation> blockVolumeAttachAndMountOperations;
    /**
     * @return Deprecated. Use the &#39;blockVolumeAttachAndMountOperations&#39; attribute instead of this. Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    private List<GetDrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations;
    /**
     * @return The bucket name inside the object storage namespace.  Example: `bucket_name`
     * 
     */
    private String bucket;
    /**
     * @return The OCID of a vault and customer-managed encryption key in the destination region.
     * 
     */
    private List<GetDrProtectionGroupMemberCommonDestinationKey> commonDestinationKeys;
    /**
     * @return The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
     * 
     */
    private String connectionStringType;
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    private String destinationAvailabilityDomain;
    /**
     * @return The OCID of the backup policy to use in the destination region. This policy will be used to create backups for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
     * 
     */
    private String destinationBackupPolicyId;
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    private String destinationCapacityReservationId;
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    private String destinationCompartmentId;
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    private String destinationDedicatedVmHostId;
    /**
     * @return The OCID of a vault and customer-managed encryption key in the destination region.
     * 
     */
    private List<GetDrProtectionGroupMemberDestinationEncryptionKey> destinationEncryptionKeys;
    /**
     * @return The OCID of the destination Load Balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    private String destinationLoadBalancerId;
    /**
     * @return The OCID of the destination Network Load Balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    private String destinationNetworkLoadBalancerId;
    /**
     * @return The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
     * 
     */
    private String destinationSnapshotPolicyId;
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    private List<GetDrProtectionGroupMemberExportMapping> exportMappings;
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    private List<GetDrProtectionGroupMemberFileSystemOperation> fileSystemOperations;
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    private Boolean isMovable;
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    private Boolean isRetainFaultDomain;
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    private Boolean isStartStopEnabled;
    /**
     * @return The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent&#39;s Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private String jumpHostId;
    /**
     * @return The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private List<GetDrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings;
    /**
     * @return The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    private List<GetDrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs;
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private String memberId;
    /**
     * @return The type of the member.
     * 
     */
    private String memberType;
    /**
     * @return The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
     * 
     */
    private String namespace;
    /**
     * @return The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private List<GetDrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings;
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    private String passwordVaultSecretId;
    /**
     * @return The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.  Example: `ocid1.cluster.oc1.uniqueID`
     * 
     */
    private String peerClusterId;
    /**
     * @return A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
     * 
     */
    private List<GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings;
    /**
     * @return The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    private List<GetDrProtectionGroupMemberVaultMapping> vaultMappings;
    /**
     * @return The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    private List<GetDrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private List<GetDrProtectionGroupMemberVnicMapping> vnicMapping;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private List<GetDrProtectionGroupMemberVnicMapping> vnicMappings;

    private GetDrProtectionGroupMember() {}
    /**
     * @return This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
     * 
     */
    public String autonomousDatabaseStandbyTypeForDrDrills() {
        return this.autonomousDatabaseStandbyTypeForDrDrills;
    }
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    public List<GetDrProtectionGroupMemberBackendSetMapping> backendSetMappings() {
        return this.backendSetMappings;
    }
    /**
     * @return The details of backup performed on OKE Cluster.
     * 
     */
    public List<GetDrProtectionGroupMemberBackupConfig> backupConfigs() {
        return this.backupConfigs;
    }
    /**
     * @return The details for object storage backup location of an OKE Cluster
     * 
     */
    public List<GetDrProtectionGroupMemberBackupLocation> backupLocations() {
        return this.backupLocations;
    }
    /**
     * @return The details of the block volume operations performed on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation> blockVolumeAttachAndMountOperations() {
        return this.blockVolumeAttachAndMountOperations;
    }
    /**
     * @return Deprecated. Use the &#39;blockVolumeAttachAndMountOperations&#39; attribute instead of this. Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations() {
        return this.blockVolumeOperations;
    }
    /**
     * @return The bucket name inside the object storage namespace.  Example: `bucket_name`
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The OCID of a vault and customer-managed encryption key in the destination region.
     * 
     */
    public List<GetDrProtectionGroupMemberCommonDestinationKey> commonDestinationKeys() {
        return this.commonDestinationKeys;
    }
    /**
     * @return The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
     * 
     */
    public String connectionStringType() {
        return this.connectionStringType;
    }
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    public String destinationAvailabilityDomain() {
        return this.destinationAvailabilityDomain;
    }
    /**
     * @return The OCID of the backup policy to use in the destination region. This policy will be used to create backups for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
     * 
     */
    public String destinationBackupPolicyId() {
        return this.destinationBackupPolicyId;
    }
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    public String destinationCapacityReservationId() {
        return this.destinationCapacityReservationId;
    }
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    public String destinationCompartmentId() {
        return this.destinationCompartmentId;
    }
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    public String destinationDedicatedVmHostId() {
        return this.destinationDedicatedVmHostId;
    }
    /**
     * @return The OCID of a vault and customer-managed encryption key in the destination region.
     * 
     */
    public List<GetDrProtectionGroupMemberDestinationEncryptionKey> destinationEncryptionKeys() {
        return this.destinationEncryptionKeys;
    }
    /**
     * @return The OCID of the destination Load Balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    public String destinationLoadBalancerId() {
        return this.destinationLoadBalancerId;
    }
    /**
     * @return The OCID of the destination Network Load Balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    public String destinationNetworkLoadBalancerId() {
        return this.destinationNetworkLoadBalancerId;
    }
    /**
     * @return The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
     * 
     */
    public String destinationSnapshotPolicyId() {
        return this.destinationSnapshotPolicyId;
    }
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    public List<GetDrProtectionGroupMemberExportMapping> exportMappings() {
        return this.exportMappings;
    }
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupMemberFileSystemOperation> fileSystemOperations() {
        return this.fileSystemOperations;
    }
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    public Boolean isMovable() {
        return this.isMovable;
    }
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    public Boolean isRetainFaultDomain() {
        return this.isRetainFaultDomain;
    }
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    public Boolean isStartStopEnabled() {
        return this.isStartStopEnabled;
    }
    /**
     * @return The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent&#39;s Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public String jumpHostId() {
        return this.jumpHostId;
    }
    /**
     * @return The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<GetDrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings() {
        return this.loadBalancerMappings;
    }
    /**
     * @return The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    public List<GetDrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs() {
        return this.managedNodePoolConfigs;
    }
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public String memberId() {
        return this.memberId;
    }
    /**
     * @return The type of the member.
     * 
     */
    public String memberType() {
        return this.memberType;
    }
    /**
     * @return The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<GetDrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings() {
        return this.networkLoadBalancerMappings;
    }
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    public String passwordVaultSecretId() {
        return this.passwordVaultSecretId;
    }
    /**
     * @return The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.  Example: `ocid1.cluster.oc1.uniqueID`
     * 
     */
    public String peerClusterId() {
        return this.peerClusterId;
    }
    /**
     * @return A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
     * 
     */
    public List<GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings() {
        return this.sourceVolumeToDestinationEncryptionKeyMappings;
    }
    /**
     * @return The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
     * 
     */
    public List<GetDrProtectionGroupMemberVaultMapping> vaultMappings() {
        return this.vaultMappings;
    }
    /**
     * @return The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
     * 
     */
    public List<GetDrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs() {
        return this.virtualNodePoolConfigs;
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupMemberVnicMapping> vnicMapping() {
        return this.vnicMapping;
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupMemberVnicMapping> vnicMappings() {
        return this.vnicMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDrProtectionGroupMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autonomousDatabaseStandbyTypeForDrDrills;
        private List<GetDrProtectionGroupMemberBackendSetMapping> backendSetMappings;
        private List<GetDrProtectionGroupMemberBackupConfig> backupConfigs;
        private List<GetDrProtectionGroupMemberBackupLocation> backupLocations;
        private List<GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation> blockVolumeAttachAndMountOperations;
        private List<GetDrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations;
        private String bucket;
        private List<GetDrProtectionGroupMemberCommonDestinationKey> commonDestinationKeys;
        private String connectionStringType;
        private String destinationAvailabilityDomain;
        private String destinationBackupPolicyId;
        private String destinationCapacityReservationId;
        private String destinationCompartmentId;
        private String destinationDedicatedVmHostId;
        private List<GetDrProtectionGroupMemberDestinationEncryptionKey> destinationEncryptionKeys;
        private String destinationLoadBalancerId;
        private String destinationNetworkLoadBalancerId;
        private String destinationSnapshotPolicyId;
        private List<GetDrProtectionGroupMemberExportMapping> exportMappings;
        private List<GetDrProtectionGroupMemberFileSystemOperation> fileSystemOperations;
        private Boolean isMovable;
        private Boolean isRetainFaultDomain;
        private Boolean isStartStopEnabled;
        private String jumpHostId;
        private List<GetDrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings;
        private List<GetDrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs;
        private String memberId;
        private String memberType;
        private String namespace;
        private List<GetDrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings;
        private String passwordVaultSecretId;
        private String peerClusterId;
        private List<GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings;
        private List<GetDrProtectionGroupMemberVaultMapping> vaultMappings;
        private List<GetDrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs;
        private List<GetDrProtectionGroupMemberVnicMapping> vnicMapping;
        private List<GetDrProtectionGroupMemberVnicMapping> vnicMappings;
        public Builder() {}
        public Builder(GetDrProtectionGroupMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousDatabaseStandbyTypeForDrDrills = defaults.autonomousDatabaseStandbyTypeForDrDrills;
    	      this.backendSetMappings = defaults.backendSetMappings;
    	      this.backupConfigs = defaults.backupConfigs;
    	      this.backupLocations = defaults.backupLocations;
    	      this.blockVolumeAttachAndMountOperations = defaults.blockVolumeAttachAndMountOperations;
    	      this.blockVolumeOperations = defaults.blockVolumeOperations;
    	      this.bucket = defaults.bucket;
    	      this.commonDestinationKeys = defaults.commonDestinationKeys;
    	      this.connectionStringType = defaults.connectionStringType;
    	      this.destinationAvailabilityDomain = defaults.destinationAvailabilityDomain;
    	      this.destinationBackupPolicyId = defaults.destinationBackupPolicyId;
    	      this.destinationCapacityReservationId = defaults.destinationCapacityReservationId;
    	      this.destinationCompartmentId = defaults.destinationCompartmentId;
    	      this.destinationDedicatedVmHostId = defaults.destinationDedicatedVmHostId;
    	      this.destinationEncryptionKeys = defaults.destinationEncryptionKeys;
    	      this.destinationLoadBalancerId = defaults.destinationLoadBalancerId;
    	      this.destinationNetworkLoadBalancerId = defaults.destinationNetworkLoadBalancerId;
    	      this.destinationSnapshotPolicyId = defaults.destinationSnapshotPolicyId;
    	      this.exportMappings = defaults.exportMappings;
    	      this.fileSystemOperations = defaults.fileSystemOperations;
    	      this.isMovable = defaults.isMovable;
    	      this.isRetainFaultDomain = defaults.isRetainFaultDomain;
    	      this.isStartStopEnabled = defaults.isStartStopEnabled;
    	      this.jumpHostId = defaults.jumpHostId;
    	      this.loadBalancerMappings = defaults.loadBalancerMappings;
    	      this.managedNodePoolConfigs = defaults.managedNodePoolConfigs;
    	      this.memberId = defaults.memberId;
    	      this.memberType = defaults.memberType;
    	      this.namespace = defaults.namespace;
    	      this.networkLoadBalancerMappings = defaults.networkLoadBalancerMappings;
    	      this.passwordVaultSecretId = defaults.passwordVaultSecretId;
    	      this.peerClusterId = defaults.peerClusterId;
    	      this.sourceVolumeToDestinationEncryptionKeyMappings = defaults.sourceVolumeToDestinationEncryptionKeyMappings;
    	      this.vaultMappings = defaults.vaultMappings;
    	      this.virtualNodePoolConfigs = defaults.virtualNodePoolConfigs;
    	      this.vnicMapping = defaults.vnicMapping;
    	      this.vnicMappings = defaults.vnicMappings;
        }

        @CustomType.Setter
        public Builder autonomousDatabaseStandbyTypeForDrDrills(String autonomousDatabaseStandbyTypeForDrDrills) {
            if (autonomousDatabaseStandbyTypeForDrDrills == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "autonomousDatabaseStandbyTypeForDrDrills");
            }
            this.autonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            return this;
        }
        @CustomType.Setter
        public Builder backendSetMappings(List<GetDrProtectionGroupMemberBackendSetMapping> backendSetMappings) {
            if (backendSetMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "backendSetMappings");
            }
            this.backendSetMappings = backendSetMappings;
            return this;
        }
        public Builder backendSetMappings(GetDrProtectionGroupMemberBackendSetMapping... backendSetMappings) {
            return backendSetMappings(List.of(backendSetMappings));
        }
        @CustomType.Setter
        public Builder backupConfigs(List<GetDrProtectionGroupMemberBackupConfig> backupConfigs) {
            if (backupConfigs == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "backupConfigs");
            }
            this.backupConfigs = backupConfigs;
            return this;
        }
        public Builder backupConfigs(GetDrProtectionGroupMemberBackupConfig... backupConfigs) {
            return backupConfigs(List.of(backupConfigs));
        }
        @CustomType.Setter
        public Builder backupLocations(List<GetDrProtectionGroupMemberBackupLocation> backupLocations) {
            if (backupLocations == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "backupLocations");
            }
            this.backupLocations = backupLocations;
            return this;
        }
        public Builder backupLocations(GetDrProtectionGroupMemberBackupLocation... backupLocations) {
            return backupLocations(List.of(backupLocations));
        }
        @CustomType.Setter
        public Builder blockVolumeAttachAndMountOperations(List<GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation> blockVolumeAttachAndMountOperations) {
            if (blockVolumeAttachAndMountOperations == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "blockVolumeAttachAndMountOperations");
            }
            this.blockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            return this;
        }
        public Builder blockVolumeAttachAndMountOperations(GetDrProtectionGroupMemberBlockVolumeAttachAndMountOperation... blockVolumeAttachAndMountOperations) {
            return blockVolumeAttachAndMountOperations(List.of(blockVolumeAttachAndMountOperations));
        }
        @CustomType.Setter
        public Builder blockVolumeOperations(List<GetDrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations) {
            if (blockVolumeOperations == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "blockVolumeOperations");
            }
            this.blockVolumeOperations = blockVolumeOperations;
            return this;
        }
        public Builder blockVolumeOperations(GetDrProtectionGroupMemberBlockVolumeOperation... blockVolumeOperations) {
            return blockVolumeOperations(List.of(blockVolumeOperations));
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder commonDestinationKeys(List<GetDrProtectionGroupMemberCommonDestinationKey> commonDestinationKeys) {
            if (commonDestinationKeys == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "commonDestinationKeys");
            }
            this.commonDestinationKeys = commonDestinationKeys;
            return this;
        }
        public Builder commonDestinationKeys(GetDrProtectionGroupMemberCommonDestinationKey... commonDestinationKeys) {
            return commonDestinationKeys(List.of(commonDestinationKeys));
        }
        @CustomType.Setter
        public Builder connectionStringType(String connectionStringType) {
            if (connectionStringType == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "connectionStringType");
            }
            this.connectionStringType = connectionStringType;
            return this;
        }
        @CustomType.Setter
        public Builder destinationAvailabilityDomain(String destinationAvailabilityDomain) {
            if (destinationAvailabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationAvailabilityDomain");
            }
            this.destinationAvailabilityDomain = destinationAvailabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder destinationBackupPolicyId(String destinationBackupPolicyId) {
            if (destinationBackupPolicyId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationBackupPolicyId");
            }
            this.destinationBackupPolicyId = destinationBackupPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCapacityReservationId(String destinationCapacityReservationId) {
            if (destinationCapacityReservationId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationCapacityReservationId");
            }
            this.destinationCapacityReservationId = destinationCapacityReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCompartmentId(String destinationCompartmentId) {
            if (destinationCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationCompartmentId");
            }
            this.destinationCompartmentId = destinationCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDedicatedVmHostId(String destinationDedicatedVmHostId) {
            if (destinationDedicatedVmHostId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationDedicatedVmHostId");
            }
            this.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationEncryptionKeys(List<GetDrProtectionGroupMemberDestinationEncryptionKey> destinationEncryptionKeys) {
            if (destinationEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationEncryptionKeys");
            }
            this.destinationEncryptionKeys = destinationEncryptionKeys;
            return this;
        }
        public Builder destinationEncryptionKeys(GetDrProtectionGroupMemberDestinationEncryptionKey... destinationEncryptionKeys) {
            return destinationEncryptionKeys(List.of(destinationEncryptionKeys));
        }
        @CustomType.Setter
        public Builder destinationLoadBalancerId(String destinationLoadBalancerId) {
            if (destinationLoadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationLoadBalancerId");
            }
            this.destinationLoadBalancerId = destinationLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetworkLoadBalancerId(String destinationNetworkLoadBalancerId) {
            if (destinationNetworkLoadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationNetworkLoadBalancerId");
            }
            this.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationSnapshotPolicyId(String destinationSnapshotPolicyId) {
            if (destinationSnapshotPolicyId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "destinationSnapshotPolicyId");
            }
            this.destinationSnapshotPolicyId = destinationSnapshotPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder exportMappings(List<GetDrProtectionGroupMemberExportMapping> exportMappings) {
            if (exportMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "exportMappings");
            }
            this.exportMappings = exportMappings;
            return this;
        }
        public Builder exportMappings(GetDrProtectionGroupMemberExportMapping... exportMappings) {
            return exportMappings(List.of(exportMappings));
        }
        @CustomType.Setter
        public Builder fileSystemOperations(List<GetDrProtectionGroupMemberFileSystemOperation> fileSystemOperations) {
            if (fileSystemOperations == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "fileSystemOperations");
            }
            this.fileSystemOperations = fileSystemOperations;
            return this;
        }
        public Builder fileSystemOperations(GetDrProtectionGroupMemberFileSystemOperation... fileSystemOperations) {
            return fileSystemOperations(List.of(fileSystemOperations));
        }
        @CustomType.Setter
        public Builder isMovable(Boolean isMovable) {
            if (isMovable == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "isMovable");
            }
            this.isMovable = isMovable;
            return this;
        }
        @CustomType.Setter
        public Builder isRetainFaultDomain(Boolean isRetainFaultDomain) {
            if (isRetainFaultDomain == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "isRetainFaultDomain");
            }
            this.isRetainFaultDomain = isRetainFaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder isStartStopEnabled(Boolean isStartStopEnabled) {
            if (isStartStopEnabled == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "isStartStopEnabled");
            }
            this.isStartStopEnabled = isStartStopEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jumpHostId(String jumpHostId) {
            if (jumpHostId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "jumpHostId");
            }
            this.jumpHostId = jumpHostId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerMappings(List<GetDrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings) {
            if (loadBalancerMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "loadBalancerMappings");
            }
            this.loadBalancerMappings = loadBalancerMappings;
            return this;
        }
        public Builder loadBalancerMappings(GetDrProtectionGroupMemberLoadBalancerMapping... loadBalancerMappings) {
            return loadBalancerMappings(List.of(loadBalancerMappings));
        }
        @CustomType.Setter
        public Builder managedNodePoolConfigs(List<GetDrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs) {
            if (managedNodePoolConfigs == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "managedNodePoolConfigs");
            }
            this.managedNodePoolConfigs = managedNodePoolConfigs;
            return this;
        }
        public Builder managedNodePoolConfigs(GetDrProtectionGroupMemberManagedNodePoolConfig... managedNodePoolConfigs) {
            return managedNodePoolConfigs(List.of(managedNodePoolConfigs));
        }
        @CustomType.Setter
        public Builder memberId(String memberId) {
            if (memberId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "memberId");
            }
            this.memberId = memberId;
            return this;
        }
        @CustomType.Setter
        public Builder memberType(String memberType) {
            if (memberType == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "memberType");
            }
            this.memberType = memberType;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder networkLoadBalancerMappings(List<GetDrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings) {
            if (networkLoadBalancerMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "networkLoadBalancerMappings");
            }
            this.networkLoadBalancerMappings = networkLoadBalancerMappings;
            return this;
        }
        public Builder networkLoadBalancerMappings(GetDrProtectionGroupMemberNetworkLoadBalancerMapping... networkLoadBalancerMappings) {
            return networkLoadBalancerMappings(List.of(networkLoadBalancerMappings));
        }
        @CustomType.Setter
        public Builder passwordVaultSecretId(String passwordVaultSecretId) {
            if (passwordVaultSecretId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "passwordVaultSecretId");
            }
            this.passwordVaultSecretId = passwordVaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder peerClusterId(String peerClusterId) {
            if (peerClusterId == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "peerClusterId");
            }
            this.peerClusterId = peerClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVolumeToDestinationEncryptionKeyMappings(List<GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings) {
            if (sourceVolumeToDestinationEncryptionKeyMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "sourceVolumeToDestinationEncryptionKeyMappings");
            }
            this.sourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            return this;
        }
        public Builder sourceVolumeToDestinationEncryptionKeyMappings(GetDrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping... sourceVolumeToDestinationEncryptionKeyMappings) {
            return sourceVolumeToDestinationEncryptionKeyMappings(List.of(sourceVolumeToDestinationEncryptionKeyMappings));
        }
        @CustomType.Setter
        public Builder vaultMappings(List<GetDrProtectionGroupMemberVaultMapping> vaultMappings) {
            if (vaultMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "vaultMappings");
            }
            this.vaultMappings = vaultMappings;
            return this;
        }
        public Builder vaultMappings(GetDrProtectionGroupMemberVaultMapping... vaultMappings) {
            return vaultMappings(List.of(vaultMappings));
        }
        @CustomType.Setter
        public Builder virtualNodePoolConfigs(List<GetDrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs) {
            if (virtualNodePoolConfigs == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "virtualNodePoolConfigs");
            }
            this.virtualNodePoolConfigs = virtualNodePoolConfigs;
            return this;
        }
        public Builder virtualNodePoolConfigs(GetDrProtectionGroupMemberVirtualNodePoolConfig... virtualNodePoolConfigs) {
            return virtualNodePoolConfigs(List.of(virtualNodePoolConfigs));
        }
        @CustomType.Setter
        public Builder vnicMapping(List<GetDrProtectionGroupMemberVnicMapping> vnicMapping) {
            if (vnicMapping == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "vnicMapping");
            }
            this.vnicMapping = vnicMapping;
            return this;
        }
        public Builder vnicMapping(GetDrProtectionGroupMemberVnicMapping... vnicMapping) {
            return vnicMapping(List.of(vnicMapping));
        }
        @CustomType.Setter
        public Builder vnicMappings(List<GetDrProtectionGroupMemberVnicMapping> vnicMappings) {
            if (vnicMappings == null) {
              throw new MissingRequiredPropertyException("GetDrProtectionGroupMember", "vnicMappings");
            }
            this.vnicMappings = vnicMappings;
            return this;
        }
        public Builder vnicMappings(GetDrProtectionGroupMemberVnicMapping... vnicMappings) {
            return vnicMappings(List.of(vnicMappings));
        }
        public GetDrProtectionGroupMember build() {
            final var _resultValue = new GetDrProtectionGroupMember();
            _resultValue.autonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            _resultValue.backendSetMappings = backendSetMappings;
            _resultValue.backupConfigs = backupConfigs;
            _resultValue.backupLocations = backupLocations;
            _resultValue.blockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            _resultValue.blockVolumeOperations = blockVolumeOperations;
            _resultValue.bucket = bucket;
            _resultValue.commonDestinationKeys = commonDestinationKeys;
            _resultValue.connectionStringType = connectionStringType;
            _resultValue.destinationAvailabilityDomain = destinationAvailabilityDomain;
            _resultValue.destinationBackupPolicyId = destinationBackupPolicyId;
            _resultValue.destinationCapacityReservationId = destinationCapacityReservationId;
            _resultValue.destinationCompartmentId = destinationCompartmentId;
            _resultValue.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            _resultValue.destinationEncryptionKeys = destinationEncryptionKeys;
            _resultValue.destinationLoadBalancerId = destinationLoadBalancerId;
            _resultValue.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            _resultValue.destinationSnapshotPolicyId = destinationSnapshotPolicyId;
            _resultValue.exportMappings = exportMappings;
            _resultValue.fileSystemOperations = fileSystemOperations;
            _resultValue.isMovable = isMovable;
            _resultValue.isRetainFaultDomain = isRetainFaultDomain;
            _resultValue.isStartStopEnabled = isStartStopEnabled;
            _resultValue.jumpHostId = jumpHostId;
            _resultValue.loadBalancerMappings = loadBalancerMappings;
            _resultValue.managedNodePoolConfigs = managedNodePoolConfigs;
            _resultValue.memberId = memberId;
            _resultValue.memberType = memberType;
            _resultValue.namespace = namespace;
            _resultValue.networkLoadBalancerMappings = networkLoadBalancerMappings;
            _resultValue.passwordVaultSecretId = passwordVaultSecretId;
            _resultValue.peerClusterId = peerClusterId;
            _resultValue.sourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            _resultValue.vaultMappings = vaultMappings;
            _resultValue.virtualNodePoolConfigs = virtualNodePoolConfigs;
            _resultValue.vnicMapping = vnicMapping;
            _resultValue.vnicMappings = vnicMappings;
            return _resultValue;
        }
    }
}
