// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DisasterRecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDrProtectionGroupsDrProtectionGroupCollectionItemMember {
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings;
    /**
     * @return Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations;
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    private String destinationAvailabilityDomain;
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    private String destinationCapacityReservationId;
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    private String destinationCompartmentId;
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    private String destinationDedicatedVmHostId;
    /**
     * @return The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    private String destinationLoadBalancerId;
    /**
     * @return The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    private String destinationNetworkLoadBalancerId;
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings;
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations;
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    private Boolean isMovable;
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    private Boolean isRetainFaultDomain;
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    private Boolean isStartStopEnabled;
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private String memberId;
    /**
     * @return The type of the member.
     * 
     */
    private String memberType;
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    private String passwordVaultSecretId;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings;

    private GetDrProtectionGroupsDrProtectionGroupCollectionItemMember() {}
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings() {
        return this.backendSetMappings;
    }
    /**
     * @return Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations() {
        return this.blockVolumeOperations;
    }
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    public String destinationAvailabilityDomain() {
        return this.destinationAvailabilityDomain;
    }
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    public String destinationCapacityReservationId() {
        return this.destinationCapacityReservationId;
    }
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    public String destinationCompartmentId() {
        return this.destinationCompartmentId;
    }
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    public String destinationDedicatedVmHostId() {
        return this.destinationDedicatedVmHostId;
    }
    /**
     * @return The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    public String destinationLoadBalancerId() {
        return this.destinationLoadBalancerId;
    }
    /**
     * @return The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    public String destinationNetworkLoadBalancerId() {
        return this.destinationNetworkLoadBalancerId;
    }
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings() {
        return this.exportMappings;
    }
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations() {
        return this.fileSystemOperations;
    }
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    public Boolean isMovable() {
        return this.isMovable;
    }
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    public Boolean isRetainFaultDomain() {
        return this.isRetainFaultDomain;
    }
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    public Boolean isStartStopEnabled() {
        return this.isStartStopEnabled;
    }
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public String memberId() {
        return this.memberId;
    }
    /**
     * @return The type of the member.
     * 
     */
    public String memberType() {
        return this.memberType;
    }
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    public String passwordVaultSecretId() {
        return this.passwordVaultSecretId;
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping() {
        return this.vnicMapping;
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings() {
        return this.vnicMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDrProtectionGroupsDrProtectionGroupCollectionItemMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings;
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations;
        private String destinationAvailabilityDomain;
        private String destinationCapacityReservationId;
        private String destinationCompartmentId;
        private String destinationDedicatedVmHostId;
        private String destinationLoadBalancerId;
        private String destinationNetworkLoadBalancerId;
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings;
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations;
        private Boolean isMovable;
        private Boolean isRetainFaultDomain;
        private Boolean isStartStopEnabled;
        private String memberId;
        private String memberType;
        private String passwordVaultSecretId;
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping;
        private List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings;
        public Builder() {}
        public Builder(GetDrProtectionGroupsDrProtectionGroupCollectionItemMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetMappings = defaults.backendSetMappings;
    	      this.blockVolumeOperations = defaults.blockVolumeOperations;
    	      this.destinationAvailabilityDomain = defaults.destinationAvailabilityDomain;
    	      this.destinationCapacityReservationId = defaults.destinationCapacityReservationId;
    	      this.destinationCompartmentId = defaults.destinationCompartmentId;
    	      this.destinationDedicatedVmHostId = defaults.destinationDedicatedVmHostId;
    	      this.destinationLoadBalancerId = defaults.destinationLoadBalancerId;
    	      this.destinationNetworkLoadBalancerId = defaults.destinationNetworkLoadBalancerId;
    	      this.exportMappings = defaults.exportMappings;
    	      this.fileSystemOperations = defaults.fileSystemOperations;
    	      this.isMovable = defaults.isMovable;
    	      this.isRetainFaultDomain = defaults.isRetainFaultDomain;
    	      this.isStartStopEnabled = defaults.isStartStopEnabled;
    	      this.memberId = defaults.memberId;
    	      this.memberType = defaults.memberType;
    	      this.passwordVaultSecretId = defaults.passwordVaultSecretId;
    	      this.vnicMapping = defaults.vnicMapping;
    	      this.vnicMappings = defaults.vnicMappings;
        }

        @CustomType.Setter
        public Builder backendSetMappings(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings) {
            this.backendSetMappings = Objects.requireNonNull(backendSetMappings);
            return this;
        }
        public Builder backendSetMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping... backendSetMappings) {
            return backendSetMappings(List.of(backendSetMappings));
        }
        @CustomType.Setter
        public Builder blockVolumeOperations(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations) {
            this.blockVolumeOperations = Objects.requireNonNull(blockVolumeOperations);
            return this;
        }
        public Builder blockVolumeOperations(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation... blockVolumeOperations) {
            return blockVolumeOperations(List.of(blockVolumeOperations));
        }
        @CustomType.Setter
        public Builder destinationAvailabilityDomain(String destinationAvailabilityDomain) {
            this.destinationAvailabilityDomain = Objects.requireNonNull(destinationAvailabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder destinationCapacityReservationId(String destinationCapacityReservationId) {
            this.destinationCapacityReservationId = Objects.requireNonNull(destinationCapacityReservationId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationCompartmentId(String destinationCompartmentId) {
            this.destinationCompartmentId = Objects.requireNonNull(destinationCompartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationDedicatedVmHostId(String destinationDedicatedVmHostId) {
            this.destinationDedicatedVmHostId = Objects.requireNonNull(destinationDedicatedVmHostId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationLoadBalancerId(String destinationLoadBalancerId) {
            this.destinationLoadBalancerId = Objects.requireNonNull(destinationLoadBalancerId);
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetworkLoadBalancerId(String destinationNetworkLoadBalancerId) {
            this.destinationNetworkLoadBalancerId = Objects.requireNonNull(destinationNetworkLoadBalancerId);
            return this;
        }
        @CustomType.Setter
        public Builder exportMappings(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings) {
            this.exportMappings = Objects.requireNonNull(exportMappings);
            return this;
        }
        public Builder exportMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping... exportMappings) {
            return exportMappings(List.of(exportMappings));
        }
        @CustomType.Setter
        public Builder fileSystemOperations(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations) {
            this.fileSystemOperations = Objects.requireNonNull(fileSystemOperations);
            return this;
        }
        public Builder fileSystemOperations(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation... fileSystemOperations) {
            return fileSystemOperations(List.of(fileSystemOperations));
        }
        @CustomType.Setter
        public Builder isMovable(Boolean isMovable) {
            this.isMovable = Objects.requireNonNull(isMovable);
            return this;
        }
        @CustomType.Setter
        public Builder isRetainFaultDomain(Boolean isRetainFaultDomain) {
            this.isRetainFaultDomain = Objects.requireNonNull(isRetainFaultDomain);
            return this;
        }
        @CustomType.Setter
        public Builder isStartStopEnabled(Boolean isStartStopEnabled) {
            this.isStartStopEnabled = Objects.requireNonNull(isStartStopEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder memberId(String memberId) {
            this.memberId = Objects.requireNonNull(memberId);
            return this;
        }
        @CustomType.Setter
        public Builder memberType(String memberType) {
            this.memberType = Objects.requireNonNull(memberType);
            return this;
        }
        @CustomType.Setter
        public Builder passwordVaultSecretId(String passwordVaultSecretId) {
            this.passwordVaultSecretId = Objects.requireNonNull(passwordVaultSecretId);
            return this;
        }
        @CustomType.Setter
        public Builder vnicMapping(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping) {
            this.vnicMapping = Objects.requireNonNull(vnicMapping);
            return this;
        }
        public Builder vnicMapping(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping... vnicMapping) {
            return vnicMapping(List.of(vnicMapping));
        }
        @CustomType.Setter
        public Builder vnicMappings(List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings) {
            this.vnicMappings = Objects.requireNonNull(vnicMappings);
            return this;
        }
        public Builder vnicMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping... vnicMappings) {
            return vnicMappings(List.of(vnicMappings));
        }
        public GetDrProtectionGroupsDrProtectionGroupCollectionItemMember build() {
            final var _resultValue = new GetDrProtectionGroupsDrProtectionGroupCollectionItemMember();
            _resultValue.backendSetMappings = backendSetMappings;
            _resultValue.blockVolumeOperations = blockVolumeOperations;
            _resultValue.destinationAvailabilityDomain = destinationAvailabilityDomain;
            _resultValue.destinationCapacityReservationId = destinationCapacityReservationId;
            _resultValue.destinationCompartmentId = destinationCompartmentId;
            _resultValue.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            _resultValue.destinationLoadBalancerId = destinationLoadBalancerId;
            _resultValue.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            _resultValue.exportMappings = exportMappings;
            _resultValue.fileSystemOperations = fileSystemOperations;
            _resultValue.isMovable = isMovable;
            _resultValue.isRetainFaultDomain = isRetainFaultDomain;
            _resultValue.isStartStopEnabled = isStartStopEnabled;
            _resultValue.memberId = memberId;
            _resultValue.memberType = memberType;
            _resultValue.passwordVaultSecretId = passwordVaultSecretId;
            _resultValue.vnicMapping = vnicMapping;
            _resultValue.vnicMappings = vnicMappings;
            return _resultValue;
        }
    }
}
