// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DisasterRecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation;
import com.pulumi.oci.DisasterRecovery.outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDrProtectionGroupsDrProtectionGroupCollectionItemMember {
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings;
    /**
     * @return Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations;
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    private @Nullable String destinationAvailabilityDomain;
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationCapacityReservationId;
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationCompartmentId;
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationDedicatedVmHostId;
    /**
     * @return The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationLoadBalancerId;
    /**
     * @return The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    private @Nullable String destinationNetworkLoadBalancerId;
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings;
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations;
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    private @Nullable Boolean isMovable;
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    private @Nullable Boolean isRetainFaultDomain;
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    private @Nullable Boolean isStartStopEnabled;
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    private @Nullable String memberId;
    /**
     * @return The type of the member.
     * 
     */
    private @Nullable String memberType;
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    private @Nullable String passwordVaultSecretId;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping;
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings;

    private GetDrProtectionGroupsDrProtectionGroupCollectionItemMember() {}
    /**
     * @return A list of backend set mappings that are used to transfer or update backends during DR.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings() {
        return this.backendSetMappings == null ? List.of() : this.backendSetMappings;
    }
    /**
     * @return Operations performed on a list of block volumes used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations() {
        return this.blockVolumeOperations == null ? List.of() : this.blockVolumeOperations;
    }
    /**
     * @return The availability domain of the destination mount target. Example: `BBTh:region-AD`
     * 
     */
    public Optional<String> destinationAvailabilityDomain() {
        return Optional.ofNullable(this.destinationAvailabilityDomain);
    }
    /**
     * @return The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationCapacityReservationId() {
        return Optional.ofNullable(this.destinationCapacityReservationId);
    }
    /**
     * @return The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationCompartmentId() {
        return Optional.ofNullable(this.destinationCompartmentId);
    }
    /**
     * @return The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationDedicatedVmHostId() {
        return Optional.ofNullable(this.destinationDedicatedVmHostId);
    }
    /**
     * @return The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationLoadBalancerId() {
        return Optional.ofNullable(this.destinationLoadBalancerId);
    }
    /**
     * @return The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
     * 
     */
    public Optional<String> destinationNetworkLoadBalancerId() {
        return Optional.ofNullable(this.destinationNetworkLoadBalancerId);
    }
    /**
     * @return A list of mappings between the primary region file system export and destination region mount target.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings() {
        return this.exportMappings == null ? List.of() : this.exportMappings;
    }
    /**
     * @return Operations performed on a list of file systems used on the non-movable compute instance.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations() {
        return this.fileSystemOperations == null ? List.of() : this.fileSystemOperations;
    }
    /**
     * @return A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
     * 
     */
    public Optional<Boolean> isMovable() {
        return Optional.ofNullable(this.isMovable);
    }
    /**
     * @return A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
     * 
     */
    public Optional<Boolean> isRetainFaultDomain() {
        return Optional.ofNullable(this.isRetainFaultDomain);
    }
    /**
     * @return A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
     * 
     */
    public Optional<Boolean> isStartStopEnabled() {
        return Optional.ofNullable(this.isStartStopEnabled);
    }
    /**
     * @return The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
     * 
     */
    public Optional<String> memberId() {
        return Optional.ofNullable(this.memberId);
    }
    /**
     * @return The type of the member.
     * 
     */
    public Optional<String> memberType() {
        return Optional.ofNullable(this.memberType);
    }
    /**
     * @return The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
     * 
     */
    public Optional<String> passwordVaultSecretId() {
        return Optional.ofNullable(this.passwordVaultSecretId);
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping() {
        return this.vnicMapping == null ? List.of() : this.vnicMapping;
    }
    /**
     * @return A list of compute instance VNIC mappings.
     * 
     */
    public List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings() {
        return this.vnicMappings == null ? List.of() : this.vnicMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDrProtectionGroupsDrProtectionGroupCollectionItemMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings;
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations;
        private @Nullable String destinationAvailabilityDomain;
        private @Nullable String destinationCapacityReservationId;
        private @Nullable String destinationCompartmentId;
        private @Nullable String destinationDedicatedVmHostId;
        private @Nullable String destinationLoadBalancerId;
        private @Nullable String destinationNetworkLoadBalancerId;
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings;
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations;
        private @Nullable Boolean isMovable;
        private @Nullable Boolean isRetainFaultDomain;
        private @Nullable Boolean isStartStopEnabled;
        private @Nullable String memberId;
        private @Nullable String memberType;
        private @Nullable String passwordVaultSecretId;
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping;
        private @Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings;
        public Builder() {}
        public Builder(GetDrProtectionGroupsDrProtectionGroupCollectionItemMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetMappings = defaults.backendSetMappings;
    	      this.blockVolumeOperations = defaults.blockVolumeOperations;
    	      this.destinationAvailabilityDomain = defaults.destinationAvailabilityDomain;
    	      this.destinationCapacityReservationId = defaults.destinationCapacityReservationId;
    	      this.destinationCompartmentId = defaults.destinationCompartmentId;
    	      this.destinationDedicatedVmHostId = defaults.destinationDedicatedVmHostId;
    	      this.destinationLoadBalancerId = defaults.destinationLoadBalancerId;
    	      this.destinationNetworkLoadBalancerId = defaults.destinationNetworkLoadBalancerId;
    	      this.exportMappings = defaults.exportMappings;
    	      this.fileSystemOperations = defaults.fileSystemOperations;
    	      this.isMovable = defaults.isMovable;
    	      this.isRetainFaultDomain = defaults.isRetainFaultDomain;
    	      this.isStartStopEnabled = defaults.isStartStopEnabled;
    	      this.memberId = defaults.memberId;
    	      this.memberType = defaults.memberType;
    	      this.passwordVaultSecretId = defaults.passwordVaultSecretId;
    	      this.vnicMapping = defaults.vnicMapping;
    	      this.vnicMappings = defaults.vnicMappings;
        }

        @CustomType.Setter
        public Builder backendSetMappings(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping> backendSetMappings) {
            this.backendSetMappings = backendSetMappings;
            return this;
        }
        public Builder backendSetMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping... backendSetMappings) {
            return backendSetMappings(List.of(backendSetMappings));
        }
        @CustomType.Setter
        public Builder blockVolumeOperations(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation> blockVolumeOperations) {
            this.blockVolumeOperations = blockVolumeOperations;
            return this;
        }
        public Builder blockVolumeOperations(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation... blockVolumeOperations) {
            return blockVolumeOperations(List.of(blockVolumeOperations));
        }
        @CustomType.Setter
        public Builder destinationAvailabilityDomain(@Nullable String destinationAvailabilityDomain) {
            this.destinationAvailabilityDomain = destinationAvailabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCapacityReservationId(@Nullable String destinationCapacityReservationId) {
            this.destinationCapacityReservationId = destinationCapacityReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCompartmentId(@Nullable String destinationCompartmentId) {
            this.destinationCompartmentId = destinationCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDedicatedVmHostId(@Nullable String destinationDedicatedVmHostId) {
            this.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationLoadBalancerId(@Nullable String destinationLoadBalancerId) {
            this.destinationLoadBalancerId = destinationLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetworkLoadBalancerId(@Nullable String destinationNetworkLoadBalancerId) {
            this.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder exportMappings(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping> exportMappings) {
            this.exportMappings = exportMappings;
            return this;
        }
        public Builder exportMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping... exportMappings) {
            return exportMappings(List.of(exportMappings));
        }
        @CustomType.Setter
        public Builder fileSystemOperations(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation> fileSystemOperations) {
            this.fileSystemOperations = fileSystemOperations;
            return this;
        }
        public Builder fileSystemOperations(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation... fileSystemOperations) {
            return fileSystemOperations(List.of(fileSystemOperations));
        }
        @CustomType.Setter
        public Builder isMovable(@Nullable Boolean isMovable) {
            this.isMovable = isMovable;
            return this;
        }
        @CustomType.Setter
        public Builder isRetainFaultDomain(@Nullable Boolean isRetainFaultDomain) {
            this.isRetainFaultDomain = isRetainFaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder isStartStopEnabled(@Nullable Boolean isStartStopEnabled) {
            this.isStartStopEnabled = isStartStopEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder memberId(@Nullable String memberId) {
            this.memberId = memberId;
            return this;
        }
        @CustomType.Setter
        public Builder memberType(@Nullable String memberType) {
            this.memberType = memberType;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVaultSecretId(@Nullable String passwordVaultSecretId) {
            this.passwordVaultSecretId = passwordVaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder vnicMapping(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMapping) {
            this.vnicMapping = vnicMapping;
            return this;
        }
        public Builder vnicMapping(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping... vnicMapping) {
            return vnicMapping(List.of(vnicMapping));
        }
        @CustomType.Setter
        public Builder vnicMappings(@Nullable List<GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping> vnicMappings) {
            this.vnicMappings = vnicMappings;
            return this;
        }
        public Builder vnicMappings(GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping... vnicMappings) {
            return vnicMappings(List.of(vnicMappings));
        }
        public GetDrProtectionGroupsDrProtectionGroupCollectionItemMember build() {
            final var o = new GetDrProtectionGroupsDrProtectionGroupCollectionItemMember();
            o.backendSetMappings = backendSetMappings;
            o.blockVolumeOperations = blockVolumeOperations;
            o.destinationAvailabilityDomain = destinationAvailabilityDomain;
            o.destinationCapacityReservationId = destinationCapacityReservationId;
            o.destinationCompartmentId = destinationCompartmentId;
            o.destinationDedicatedVmHostId = destinationDedicatedVmHostId;
            o.destinationLoadBalancerId = destinationLoadBalancerId;
            o.destinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            o.exportMappings = exportMappings;
            o.fileSystemOperations = fileSystemOperations;
            o.isMovable = isMovable;
            o.isRetainFaultDomain = isRetainFaultDomain;
            o.isStartStopEnabled = isStartStopEnabled;
            o.memberId = memberId;
            o.memberType = memberType;
            o.passwordVaultSecretId = passwordVaultSecretId;
            o.vnicMapping = vnicMapping;
            o.vnicMappings = vnicMappings;
            return o;
        }
    }
}
