// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Dns.ResolverArgs;
import com.pulumi.oci.Dns.inputs.ResolverState;
import com.pulumi.oci.Dns.outputs.ResolverAttachedView;
import com.pulumi.oci.Dns.outputs.ResolverEndpoint;
import com.pulumi.oci.Dns.outputs.ResolverRule;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Resolver resource in Oracle Cloud Infrastructure DNS service.
 * 
 * Updates the specified resolver with your new information.
 * 
 * Note: Resolvers are associated with VCNs and created when a VCN is created. Wait until created VCN&#39;s state shows as Available in OCI console before updating DNS resolver properties.
 * Also a VCN cannot be deleted while its resolver has resolver endpoints. Additionally a resolver endpoint cannot be deleted if it is referenced in the resolver&#39;s rules. To remove the rules from a resolver user needs to update the resolver resource. Since DNS Resolver gets deleted when VCN is deleted there is no support for Delete for DNS Resolver.
 * 
 * ## Import
 * 
 * Resolvers can be imported using their OCID, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Dns/resolver:Resolver test_resolver &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Dns/resolver:Resolver")
public class Resolver extends com.pulumi.resources.CustomResource {
    /**
     * The OCID of the attached VCN.
     * 
     */
    @Export(name="attachedVcnId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> attachedVcnId;

    /**
     * @return The OCID of the attached VCN.
     * 
     */
    public Output<Optional<String>> attachedVcnId() {
        return Codegen.optional(this.attachedVcnId);
    }
    /**
     * (Updatable) The attached views. Views are evaluated in order.
     * 
     */
    @Export(name="attachedViews", refs={List.class,ResolverAttachedView.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ResolverAttachedView>> attachedViews;

    /**
     * @return (Updatable) The attached views. Views are evaluated in order.
     * 
     */
    public Output<Optional<List<ResolverAttachedView>>> attachedViews() {
        return Codegen.optional(this.attachedViews);
    }
    /**
     * (Updatable) The OCID of the owning compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compartmentId;

    /**
     * @return (Updatable) The OCID of the owning compartment.
     * 
     */
    public Output<Optional<String>> compartmentId() {
        return Codegen.optional(this.compartmentId);
    }
    /**
     * The OCID of the default view.
     * 
     */
    @Export(name="defaultViewId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultViewId;

    /**
     * @return The OCID of the default view.
     * 
     */
    public Output<Optional<String>> defaultViewId() {
        return Codegen.optional(this.defaultViewId);
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
     * 
     */
    public Output<Optional<Map<String,Object>>> definedTags() {
        return Codegen.optional(this.definedTags);
    }
    /**
     * (Updatable) The display name of the resolver.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return (Updatable) The display name of the resolver.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Read-only array of endpoints for the resolver.
     * 
     */
    @Export(name="endpoints", refs={List.class,ResolverEndpoint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ResolverEndpoint>> endpoints;

    /**
     * @return Read-only array of endpoints for the resolver.
     * 
     */
    public Output<Optional<List<ResolverEndpoint>>> endpoints() {
        return Codegen.optional(this.endpoints);
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> freeformTags() {
        return Codegen.optional(this.freeformTags);
    }
    /**
     * A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     * 
     */
    @Export(name="isProtected", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isProtected;

    /**
     * @return A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     * 
     */
    public Output<Optional<Boolean>> isProtected() {
        return Codegen.optional(this.isProtected);
    }
    /**
     * The OCID of the target resolver.
     * 
     */
    @Export(name="resolverId", refs={String.class}, tree="[0]")
    private Output<String> resolverId;

    /**
     * @return The OCID of the target resolver.
     * 
     */
    public Output<String> resolverId() {
        return this.resolverId;
    }
    /**
     * (Updatable) Rules for the resolver. Rules are evaluated in order.
     * 
     */
    @Export(name="rules", refs={List.class,ResolverRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ResolverRule>> rules;

    /**
     * @return (Updatable) Rules for the resolver. Rules are evaluated in order.
     * 
     */
    public Output<Optional<List<ResolverRule>>> rules() {
        return Codegen.optional(this.rules);
    }
    /**
     * If specified, must be `PRIVATE` when creating private name resolvers.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return If specified, must be `PRIVATE` when creating private name resolvers.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * The canonical absolute URL of the resource.
     * 
     */
    @Export(name="self", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> self;

    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public Output<Optional<String>> self() {
        return Codegen.optional(this.self);
    }
    /**
     * The current state of the resource.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return The current state of the resource.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeCreated;

    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Output<Optional<String>> timeCreated() {
        return Codegen.optional(this.timeCreated);
    }
    /**
     * The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeUpdated;

    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Output<Optional<String>> timeUpdated() {
        return Codegen.optional(this.timeUpdated);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Resolver(String name) {
        this(name, ResolverArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Resolver(String name, ResolverArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Resolver(String name, ResolverArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Dns/resolver:Resolver", name, args == null ? ResolverArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Resolver(String name, Output<String> id, @Nullable ResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Dns/resolver:Resolver", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Resolver get(String name, Output<String> id, @Nullable ResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Resolver(name, id, state, options);
    }
}
