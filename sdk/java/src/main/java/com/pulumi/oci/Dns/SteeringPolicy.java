// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Dns.SteeringPolicyArgs;
import com.pulumi.oci.Dns.inputs.SteeringPolicyState;
import com.pulumi.oci.Dns.outputs.SteeringPolicyAnswer;
import com.pulumi.oci.Dns.outputs.SteeringPolicyRule;
import com.pulumi.oci.Utilities;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Steering Policy resource in Oracle Cloud Infrastructure DNS service.
 * 
 * Creates a new steering policy in the specified compartment. For more information on
 * creating policies with templates, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Dns.SteeringPolicy;
 * import com.pulumi.oci.Dns.SteeringPolicyArgs;
 * import com.pulumi.oci.Dns.inputs.SteeringPolicyAnswerArgs;
 * import com.pulumi.oci.Dns.inputs.SteeringPolicyRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testSteeringPolicy = new SteeringPolicy("testSteeringPolicy", SteeringPolicyArgs.builder()        
 *             .compartmentId(compartmentId)
 *             .displayName(steeringPolicyDisplayName)
 *             .template(steeringPolicyTemplate)
 *             .answers(SteeringPolicyAnswerArgs.builder()
 *                 .name(steeringPolicyAnswersName)
 *                 .rdata(steeringPolicyAnswersRdata)
 *                 .rtype(steeringPolicyAnswersRtype)
 *                 .isDisabled(steeringPolicyAnswersIsDisabled)
 *                 .pool(steeringPolicyAnswersPool)
 *                 .build())
 *             .definedTags(steeringPolicyDefinedTags)
 *             .freeformTags(steeringPolicyFreeformTags)
 *             .healthCheckMonitorId(testHttpMonitor.id())
 *             .rules(SteeringPolicyRuleArgs.builder()
 *                 .ruleType(steeringPolicyRulesRuleType)
 *                 .cases(SteeringPolicyRuleCaseArgs.builder()
 *                     .answerDatas(SteeringPolicyRuleCaseAnswerDataArgs.builder()
 *                         .answerCondition(steeringPolicyRulesCasesAnswerDataAnswerCondition)
 *                         .shouldKeep(steeringPolicyRulesCasesAnswerDataShouldKeep)
 *                         .value(steeringPolicyRulesCasesAnswerDataValue)
 *                         .build())
 *                     .caseCondition(steeringPolicyRulesCasesCaseCondition)
 *                     .count(steeringPolicyRulesCasesCount)
 *                     .build())
 *                 .defaultAnswerDatas(SteeringPolicyRuleDefaultAnswerDataArgs.builder()
 *                     .answerCondition(steeringPolicyRulesDefaultAnswerDataAnswerCondition)
 *                     .shouldKeep(steeringPolicyRulesDefaultAnswerDataShouldKeep)
 *                     .value(steeringPolicyRulesDefaultAnswerDataValue)
 *                     .build())
 *                 .defaultCount(steeringPolicyRulesDefaultCount)
 *                 .description(steeringPolicyRulesDescription)
 *                 .build())
 *             .ttl(steeringPolicyTtl)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * SteeringPolicies can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:Dns/steeringPolicy:SteeringPolicy test_steering_policy &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Dns/steeringPolicy:SteeringPolicy")
public class SteeringPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The set of all answers that can potentially issue from the steering policy.
     * 
     */
    @Export(name="answers", refs={List.class,SteeringPolicyAnswer.class}, tree="[0,1]")
    private Output<List<SteeringPolicyAnswer>> answers;

    /**
     * @return The set of all answers that can potentially issue from the steering policy.
     * 
     */
    public Output<List<SteeringPolicyAnswer>> answers() {
        return this.answers;
    }
    /**
     * (Updatable) The OCID of the compartment containing the steering policy.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment containing the steering policy.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
     * 
     * **Note:** To use the Health Check monitoring feature in a steering policy, a monitor must be created using the Health Checks service first. For more information on how to create a monitor, please see [Managing Health Checks](https://docs.cloud.oracle.com/iaas/Content/HealthChecks/Tasks/managinghealthchecks.htm).
     * 
     */
    @Export(name="healthCheckMonitorId", refs={String.class}, tree="[0]")
    private Output<String> healthCheckMonitorId;

    /**
     * @return (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
     * 
     * **Note:** To use the Health Check monitoring feature in a steering policy, a monitor must be created using the Health Checks service first. For more information on how to create a monitor, please see [Managing Health Checks](https://docs.cloud.oracle.com/iaas/Content/HealthChecks/Tasks/managinghealthchecks.htm).
     * 
     */
    public Output<String> healthCheckMonitorId() {
        return this.healthCheckMonitorId;
    }
    /**
     * The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
     * 
     * The first rule receives a shuffled list of all answers, and every other rule receives the list of answers emitted by the one preceding it. The last rule populates the response.
     * 
     */
    @Export(name="rules", refs={List.class,SteeringPolicyRule.class}, tree="[0,1]")
    private Output<List<SteeringPolicyRule>> rules;

    /**
     * @return The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
     * 
     * The first rule receives a shuffled list of all answers, and every other rule receives the list of answers emitted by the one preceding it. The last rule populates the response.
     * 
     */
    public Output<List<SteeringPolicyRule>> rules() {
        return this.rules;
    }
    /**
     * The canonical absolute URL of the resource.
     * 
     */
    @Export(name="self", refs={String.class}, tree="[0]")
    private Output<String> self;

    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public Output<String> self() {
        return this.self;
    }
    /**
     * The current state of the resource.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the resource.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management&#39;s rules in a different order to produce the desired results when answering DNS queries.
     * 
     * **Example:** The `FAILOVER` template determines answers by filtering the policy&#39;s answers using the `FILTER` rule first, then the following rules in succession: `HEALTH`, `PRIORITY`, and `LIMIT`. This gives the domain dynamic failover capability.
     * 
     * It is **strongly recommended** to use a template other than `CUSTOM` when creating a steering policy.
     * 
     * All templates require the rule order to begin with an unconditional `FILTER` rule that keeps answers contingent upon `answer.isDisabled != true`, except for `CUSTOM`. A defined `HEALTH` rule must follow the `FILTER` rule if the policy references a `healthCheckMonitorId`. The last rule of a template must must be a `LIMIT` rule. For more information about templates and code examples, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
     * 
     * **Template Types**
     * * `FAILOVER` - Uses health check information on your endpoints to determine which DNS answers to serve. If an endpoint fails a health check, the answer for that endpoint will be removed from the list of available answers until the endpoint is detected as healthy.
     * * `LOAD_BALANCE` - Distributes web traffic to specified endpoints based on defined weights.
     * * `ROUTE_BY_GEO` - Answers DNS queries based on the query&#39;s geographic location. For a list of geographic locations to route by, see [Traffic Management Geographic Locations](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Reference/trafficmanagementgeo.htm).
     * * `ROUTE_BY_ASN` - Answers DNS queries based on the query&#39;s originating ASN.
     * * `ROUTE_BY_IP` - Answers DNS queries based on the query&#39;s IP address.
     * * `CUSTOM` - Allows a customized configuration of rules.
     * 
     */
    @Export(name="template", refs={String.class}, tree="[0]")
    private Output<String> template;

    /**
     * @return (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management&#39;s rules in a different order to produce the desired results when answering DNS queries.
     * 
     * **Example:** The `FAILOVER` template determines answers by filtering the policy&#39;s answers using the `FILTER` rule first, then the following rules in succession: `HEALTH`, `PRIORITY`, and `LIMIT`. This gives the domain dynamic failover capability.
     * 
     * It is **strongly recommended** to use a template other than `CUSTOM` when creating a steering policy.
     * 
     * All templates require the rule order to begin with an unconditional `FILTER` rule that keeps answers contingent upon `answer.isDisabled != true`, except for `CUSTOM`. A defined `HEALTH` rule must follow the `FILTER` rule if the policy references a `healthCheckMonitorId`. The last rule of a template must must be a `LIMIT` rule. For more information about templates and code examples, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
     * 
     * **Template Types**
     * * `FAILOVER` - Uses health check information on your endpoints to determine which DNS answers to serve. If an endpoint fails a health check, the answer for that endpoint will be removed from the list of available answers until the endpoint is detected as healthy.
     * * `LOAD_BALANCE` - Distributes web traffic to specified endpoints based on defined weights.
     * * `ROUTE_BY_GEO` - Answers DNS queries based on the query&#39;s geographic location. For a list of geographic locations to route by, see [Traffic Management Geographic Locations](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Reference/trafficmanagementgeo.htm).
     * * `ROUTE_BY_ASN` - Answers DNS queries based on the query&#39;s originating ASN.
     * * `ROUTE_BY_IP` - Answers DNS queries based on the query&#39;s IP address.
     * * `CUSTOM` - Allows a customized configuration of rules.
     * 
     */
    public Output<String> template() {
        return this.template;
    }
    /**
     * The date and time the resource was created, expressed in RFC 3339 timestamp format.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return The date and time the resource was created, expressed in RFC 3339 timestamp format.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="ttl", refs={Integer.class}, tree="[0]")
    private Output<Integer> ttl;

    /**
     * @return (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Integer> ttl() {
        return this.ttl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SteeringPolicy(String name) {
        this(name, SteeringPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SteeringPolicy(String name, SteeringPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SteeringPolicy(String name, SteeringPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Dns/steeringPolicy:SteeringPolicy", name, args == null ? SteeringPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SteeringPolicy(String name, Output<String> id, @Nullable SteeringPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Dns/steeringPolicy:SteeringPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SteeringPolicy get(String name, Output<String> id, @Nullable SteeringPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SteeringPolicy(name, id, state, options);
    }
}
