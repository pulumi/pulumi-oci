// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.inputs.ZoneExternalDownstreamArgs;
import com.pulumi.oci.Dns.inputs.ZoneExternalMasterArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneArgs Empty = new ZoneArgs();

    /**
     * (Updatable) The OCID of the compartment containing the zone.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment containing the zone.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The state of DNSSEC on the zone.
     * 
     * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone&#39;s parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
     * 
     * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`&#39;s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone&#39;s DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
     * 
     * To remove the old DS record without causing service disruption, wait until the old DS record&#39;s TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
     * 
     * Metrics are emitted in the `oci_dns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
     * 
     * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
     * 
     * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
     * 
     */
    @Import(name="dnssecState")
    private @Nullable Output<String> dnssecState;

    /**
     * @return (Updatable) The state of DNSSEC on the zone.
     * 
     * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone&#39;s parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
     * 
     * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`&#39;s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone&#39;s DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
     * 
     * To remove the old DS record without causing service disruption, wait until the old DS record&#39;s TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
     * 
     * Metrics are emitted in the `oci_dns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
     * 
     * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
     * 
     * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
     * 
     */
    public Optional<Output<String>> dnssecState() {
        return Optional.ofNullable(this.dnssecState);
    }

    /**
     * (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     * 
     */
    @Import(name="externalDownstreams")
    private @Nullable Output<List<ZoneExternalDownstreamArgs>> externalDownstreams;

    /**
     * @return (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     * 
     */
    public Optional<Output<List<ZoneExternalDownstreamArgs>>> externalDownstreams() {
        return Optional.ofNullable(this.externalDownstreams);
    }

    /**
     * (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     * 
     */
    @Import(name="externalMasters")
    private @Nullable Output<List<ZoneExternalMasterArgs>> externalMasters;

    /**
     * @return (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     * 
     */
    public Optional<Output<List<ZoneExternalMasterArgs>>> externalMasters() {
        return Optional.ofNullable(this.externalMasters);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The name of the zone.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the zone.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Specifies to operate only on resources that have a matching DNS scope.
     * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
     * 
     */
    @Import(name="viewId")
    private @Nullable Output<String> viewId;

    /**
     * @return The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
     * 
     */
    public Optional<Output<String>> viewId() {
        return Optional.ofNullable(this.viewId);
    }

    /**
     * The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="zoneType", required=true)
    private Output<String> zoneType;

    /**
     * @return The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> zoneType() {
        return this.zoneType;
    }

    private ZoneArgs() {}

    private ZoneArgs(ZoneArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.dnssecState = $.dnssecState;
        this.externalDownstreams = $.externalDownstreams;
        this.externalMasters = $.externalMasters;
        this.freeformTags = $.freeformTags;
        this.name = $.name;
        this.scope = $.scope;
        this.viewId = $.viewId;
        this.zoneType = $.zoneType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneArgs $;

        public Builder() {
            $ = new ZoneArgs();
        }

        public Builder(ZoneArgs defaults) {
            $ = new ZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the zone.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the zone.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * **Example:** `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param dnssecState (Updatable) The state of DNSSEC on the zone.
         * 
         * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone&#39;s parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
         * 
         * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`&#39;s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone&#39;s DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
         * 
         * To remove the old DS record without causing service disruption, wait until the old DS record&#39;s TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
         * 
         * Metrics are emitted in the `oci_dns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
         * 
         * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
         * 
         * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
         * 
         * @return builder
         * 
         */
        public Builder dnssecState(@Nullable Output<String> dnssecState) {
            $.dnssecState = dnssecState;
            return this;
        }

        /**
         * @param dnssecState (Updatable) The state of DNSSEC on the zone.
         * 
         * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone&#39;s parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
         * 
         * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`&#39;s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone&#39;s DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
         * 
         * To remove the old DS record without causing service disruption, wait until the old DS record&#39;s TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
         * 
         * Metrics are emitted in the `oci_dns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
         * 
         * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
         * 
         * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
         * 
         * @return builder
         * 
         */
        public Builder dnssecState(String dnssecState) {
            return dnssecState(Output.of(dnssecState));
        }

        /**
         * @param externalDownstreams (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder externalDownstreams(@Nullable Output<List<ZoneExternalDownstreamArgs>> externalDownstreams) {
            $.externalDownstreams = externalDownstreams;
            return this;
        }

        /**
         * @param externalDownstreams (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder externalDownstreams(List<ZoneExternalDownstreamArgs> externalDownstreams) {
            return externalDownstreams(Output.of(externalDownstreams));
        }

        /**
         * @param externalDownstreams (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder externalDownstreams(ZoneExternalDownstreamArgs... externalDownstreams) {
            return externalDownstreams(List.of(externalDownstreams));
        }

        /**
         * @param externalMasters (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder externalMasters(@Nullable Output<List<ZoneExternalMasterArgs>> externalMasters) {
            $.externalMasters = externalMasters;
            return this;
        }

        /**
         * @param externalMasters (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder externalMasters(List<ZoneExternalMasterArgs> externalMasters) {
            return externalMasters(Output.of(externalMasters));
        }

        /**
         * @param externalMasters (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder externalMasters(ZoneExternalMasterArgs... externalMasters) {
            return externalMasters(List.of(externalMasters));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * **Example:** `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param name The name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param viewId The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
         * 
         * @return builder
         * 
         */
        public Builder viewId(@Nullable Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        /**
         * @param zoneType The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder zoneType(Output<String> zoneType) {
            $.zoneType = zoneType;
            return this;
        }

        /**
         * @param zoneType The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder zoneType(String zoneType) {
            return zoneType(Output.of(zoneType));
        }

        public ZoneArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ZoneArgs", "compartmentId");
            }
            if ($.zoneType == null) {
                throw new MissingRequiredPropertyException("ZoneArgs", "zoneType");
            }
            return $;
        }
    }

}
