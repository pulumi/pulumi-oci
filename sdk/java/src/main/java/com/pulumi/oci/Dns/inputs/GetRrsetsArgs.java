// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.inputs.GetRrsetsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRrsetsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRrsetsArgs Empty = new GetRrsetsArgs();

    /**
     * The target fully-qualified domain name (FQDN) within the target zone.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The target fully-qualified domain name (FQDN) within the target zone.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
     * 
     */
    @Import(name="domainContains")
    private @Nullable Output<String> domainContains;

    /**
     * @return Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
     * 
     */
    public Optional<Output<String>> domainContains() {
        return Optional.ofNullable(this.domainContains);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetRrsetsFilterArgs>> filters;

    public Optional<Output<List<GetRrsetsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     * 
     */
    @Import(name="rtype")
    private @Nullable Output<String> rtype;

    /**
     * @return Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     * 
     */
    public Optional<Output<String>> rtype() {
        return Optional.ofNullable(this.rtype);
    }

    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Specifies to operate only on resources that have a matching DNS scope.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The OCID of the view the zone is associated with. Required when accessing a private zone by name.
     * 
     */
    @Import(name="viewId")
    private @Nullable Output<String> viewId;

    /**
     * @return The OCID of the view the zone is associated with. Required when accessing a private zone by name.
     * 
     */
    public Optional<Output<String>> viewId() {
        return Optional.ofNullable(this.viewId);
    }

    /**
     * The name or OCID of the target zone.
     * 
     */
    @Import(name="zoneNameOrId", required=true)
    private Output<String> zoneNameOrId;

    /**
     * @return The name or OCID of the target zone.
     * 
     */
    public Output<String> zoneNameOrId() {
        return this.zoneNameOrId;
    }

    private GetRrsetsArgs() {}

    private GetRrsetsArgs(GetRrsetsArgs $) {
        this.domain = $.domain;
        this.domainContains = $.domainContains;
        this.filters = $.filters;
        this.rtype = $.rtype;
        this.scope = $.scope;
        this.viewId = $.viewId;
        this.zoneNameOrId = $.zoneNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRrsetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRrsetsArgs $;

        public Builder() {
            $ = new GetRrsetsArgs();
        }

        public Builder(GetRrsetsArgs defaults) {
            $ = new GetRrsetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The target fully-qualified domain name (FQDN) within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The target fully-qualified domain name (FQDN) within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param domainContains Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
         * 
         * @return builder
         * 
         */
        public Builder domainContains(@Nullable Output<String> domainContains) {
            $.domainContains = domainContains;
            return this;
        }

        /**
         * @param domainContains Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
         * 
         * @return builder
         * 
         */
        public Builder domainContains(String domainContains) {
            return domainContains(Output.of(domainContains));
        }

        public Builder filters(@Nullable Output<List<GetRrsetsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetRrsetsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRrsetsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param rtype Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder rtype(@Nullable Output<String> rtype) {
            $.rtype = rtype;
            return this;
        }

        /**
         * @param rtype Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder rtype(String rtype) {
            return rtype(Output.of(rtype));
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param viewId The OCID of the view the zone is associated with. Required when accessing a private zone by name.
         * 
         * @return builder
         * 
         */
        public Builder viewId(@Nullable Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The OCID of the view the zone is associated with. Required when accessing a private zone by name.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        /**
         * @param zoneNameOrId The name or OCID of the target zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneNameOrId(Output<String> zoneNameOrId) {
            $.zoneNameOrId = zoneNameOrId;
            return this;
        }

        /**
         * @param zoneNameOrId The name or OCID of the target zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneNameOrId(String zoneNameOrId) {
            return zoneNameOrId(Output.of(zoneNameOrId));
        }

        public GetRrsetsArgs build() {
            if ($.zoneNameOrId == null) {
                throw new MissingRequiredPropertyException("GetRrsetsArgs", "zoneNameOrId");
            }
            return $;
        }
    }

}
