// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.inputs.GetZonesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZonesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZonesArgs Empty = new GetZonesArgs();

    /**
     * The OCID of the compartment the resource belongs to.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment the resource belongs to.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Search for zones that have the given `DnssecState`.
     * 
     */
    @Import(name="dnssecState")
    private @Nullable Output<String> dnssecState;

    /**
     * @return Search for zones that have the given `DnssecState`.
     * 
     */
    public Optional<Output<String>> dnssecState() {
        return Optional.ofNullable(this.dnssecState);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetZonesFilterArgs>> filters;

    public Optional<Output<List<GetZonesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Search by zone name. Will match any zone whose name (case-insensitive) contains the provided value.
     * 
     */
    @Import(name="nameContains")
    private @Nullable Output<String> nameContains;

    /**
     * @return Search by zone name. Will match any zone whose name (case-insensitive) contains the provided value.
     * 
     */
    public Optional<Output<String>> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Specifies to operate only on resources that have a matching DNS scope.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The field by which to sort zones. Allowed values are: name|zoneType|timeCreated
     * 
     */
    @Import(name="sortBy")
    private @Nullable Output<String> sortBy;

    /**
     * @return The field by which to sort zones. Allowed values are: name|zoneType|timeCreated
     * 
     */
    public Optional<Output<String>> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }

    /**
     * The order to sort the resources. Allowed values are: ASC|DESC
     * 
     */
    @Import(name="sortOrder")
    private @Nullable Output<String> sortOrder;

    /**
     * @return The order to sort the resources. Allowed values are: ASC|DESC
     * 
     */
    public Optional<Output<String>> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    /**
     * The state of a resource.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of a resource.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created on or after the indicated time.
     * 
     */
    @Import(name="timeCreatedGreaterThanOrEqualTo")
    private @Nullable Output<String> timeCreatedGreaterThanOrEqualTo;

    /**
     * @return An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created on or after the indicated time.
     * 
     */
    public Optional<Output<String>> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }

    /**
     * An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created before the indicated time.
     * 
     */
    @Import(name="timeCreatedLessThan")
    private @Nullable Output<String> timeCreatedLessThan;

    /**
     * @return An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created before the indicated time.
     * 
     */
    public Optional<Output<String>> timeCreatedLessThan() {
        return Optional.ofNullable(this.timeCreatedLessThan);
    }

    /**
     * Search for zones that are associated with a TSIG key.
     * 
     */
    @Import(name="tsigKeyId")
    private @Nullable Output<String> tsigKeyId;

    /**
     * @return Search for zones that are associated with a TSIG key.
     * 
     */
    public Optional<Output<String>> tsigKeyId() {
        return Optional.ofNullable(this.tsigKeyId);
    }

    /**
     * The OCID of the view the resource is associated with.
     * 
     */
    @Import(name="viewId")
    private @Nullable Output<String> viewId;

    /**
     * @return The OCID of the view the resource is associated with.
     * 
     */
    public Optional<Output<String>> viewId() {
        return Optional.ofNullable(this.viewId);
    }

    /**
     * Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
     * 
     */
    @Import(name="zoneType")
    private @Nullable Output<String> zoneType;

    /**
     * @return Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
     * 
     */
    public Optional<Output<String>> zoneType() {
        return Optional.ofNullable(this.zoneType);
    }

    private GetZonesArgs() {}

    private GetZonesArgs(GetZonesArgs $) {
        this.compartmentId = $.compartmentId;
        this.dnssecState = $.dnssecState;
        this.filters = $.filters;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.scope = $.scope;
        this.sortBy = $.sortBy;
        this.sortOrder = $.sortOrder;
        this.state = $.state;
        this.timeCreatedGreaterThanOrEqualTo = $.timeCreatedGreaterThanOrEqualTo;
        this.timeCreatedLessThan = $.timeCreatedLessThan;
        this.tsigKeyId = $.tsigKeyId;
        this.viewId = $.viewId;
        this.zoneType = $.zoneType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZonesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZonesArgs $;

        public Builder() {
            $ = new GetZonesArgs();
        }

        public Builder(GetZonesArgs defaults) {
            $ = new GetZonesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dnssecState Search for zones that have the given `DnssecState`.
         * 
         * @return builder
         * 
         */
        public Builder dnssecState(@Nullable Output<String> dnssecState) {
            $.dnssecState = dnssecState;
            return this;
        }

        /**
         * @param dnssecState Search for zones that have the given `DnssecState`.
         * 
         * @return builder
         * 
         */
        public Builder dnssecState(String dnssecState) {
            return dnssecState(Output.of(dnssecState));
        }

        public Builder filters(@Nullable Output<List<GetZonesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetZonesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetZonesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameContains Search by zone name. Will match any zone whose name (case-insensitive) contains the provided value.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable Output<String> nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param nameContains Search by zone name. Will match any zone whose name (case-insensitive) contains the provided value.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(String nameContains) {
            return nameContains(Output.of(nameContains));
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sortBy The field by which to sort zones. Allowed values are: name|zoneType|timeCreated
         * 
         * @return builder
         * 
         */
        public Builder sortBy(@Nullable Output<String> sortBy) {
            $.sortBy = sortBy;
            return this;
        }

        /**
         * @param sortBy The field by which to sort zones. Allowed values are: name|zoneType|timeCreated
         * 
         * @return builder
         * 
         */
        public Builder sortBy(String sortBy) {
            return sortBy(Output.of(sortBy));
        }

        /**
         * @param sortOrder The order to sort the resources. Allowed values are: ASC|DESC
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(@Nullable Output<String> sortOrder) {
            $.sortOrder = sortOrder;
            return this;
        }

        /**
         * @param sortOrder The order to sort the resources. Allowed values are: ASC|DESC
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(String sortOrder) {
            return sortOrder(Output.of(sortOrder));
        }

        /**
         * @param state The state of a resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of a resource.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreatedGreaterThanOrEqualTo An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created on or after the indicated time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable Output<String> timeCreatedGreaterThanOrEqualTo) {
            $.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeCreatedGreaterThanOrEqualTo An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created on or after the indicated time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThanOrEqualTo(String timeCreatedGreaterThanOrEqualTo) {
            return timeCreatedGreaterThanOrEqualTo(Output.of(timeCreatedGreaterThanOrEqualTo));
        }

        /**
         * @param timeCreatedLessThan An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created before the indicated time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedLessThan(@Nullable Output<String> timeCreatedLessThan) {
            $.timeCreatedLessThan = timeCreatedLessThan;
            return this;
        }

        /**
         * @param timeCreatedLessThan An [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp that states all returned resources were created before the indicated time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedLessThan(String timeCreatedLessThan) {
            return timeCreatedLessThan(Output.of(timeCreatedLessThan));
        }

        /**
         * @param tsigKeyId Search for zones that are associated with a TSIG key.
         * 
         * @return builder
         * 
         */
        public Builder tsigKeyId(@Nullable Output<String> tsigKeyId) {
            $.tsigKeyId = tsigKeyId;
            return this;
        }

        /**
         * @param tsigKeyId Search for zones that are associated with a TSIG key.
         * 
         * @return builder
         * 
         */
        public Builder tsigKeyId(String tsigKeyId) {
            return tsigKeyId(Output.of(tsigKeyId));
        }

        /**
         * @param viewId The OCID of the view the resource is associated with.
         * 
         * @return builder
         * 
         */
        public Builder viewId(@Nullable Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The OCID of the view the resource is associated with.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        /**
         * @param zoneType Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder zoneType(@Nullable Output<String> zoneType) {
            $.zoneType = zoneType;
            return this;
        }

        /**
         * @param zoneType Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder zoneType(String zoneType) {
            return zoneType(Output.of(zoneType));
        }

        public GetZonesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetZonesArgs", "compartmentId");
            }
            return $;
        }
    }

}
