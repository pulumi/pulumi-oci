// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dns.inputs.ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnssecConfigKskDnssecKeyVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnssecConfigKskDnssecKeyVersionArgs Empty = new ZoneDnssecConfigKskDnssecKeyVersionArgs();

    /**
     * The signing algorithm used for the key.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return The signing algorithm used for the key.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
     * 
     */
    @Import(name="dsDatas")
    private @Nullable Output<List<ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs>> dsDatas;

    /**
     * @return An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
     * 
     */
    public Optional<Output<List<ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs>>> dsDatas() {
        return Optional.ofNullable(this.dsDatas);
    }

    /**
     * The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
     * 
     */
    @Import(name="keyTag")
    private @Nullable Output<Integer> keyTag;

    /**
     * @return The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
     * 
     */
    public Optional<Output<Integer>> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }

    /**
     * The length of the corresponding private key in bytes, expressed as an integer.
     * 
     */
    @Import(name="lengthInBytes")
    private @Nullable Output<Integer> lengthInBytes;

    /**
     * @return The length of the corresponding private key in bytes, expressed as an integer.
     * 
     */
    public Optional<Output<Integer>> lengthInBytes() {
        return Optional.ofNullable(this.lengthInBytes);
    }

    /**
     * When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
     * 
     */
    @Import(name="predecessorDnssecKeyVersionUuid")
    private @Nullable Output<String> predecessorDnssecKeyVersionUuid;

    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
     * 
     */
    public Optional<Output<String>> predecessorDnssecKeyVersionUuid() {
        return Optional.ofNullable(this.predecessorDnssecKeyVersionUuid);
    }

    /**
     * When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
     * 
     */
    @Import(name="successorDnssecKeyVersionUuid")
    private @Nullable Output<String> successorDnssecKeyVersionUuid;

    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
     * 
     */
    public Optional<Output<String>> successorDnssecKeyVersionUuid() {
        return Optional.ofNullable(this.successorDnssecKeyVersionUuid);
    }

    /**
     * The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
     * 
     */
    @Import(name="timeActivated")
    private @Nullable Output<String> timeActivated;

    /**
     * @return The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
     * 
     */
    public Optional<Output<String>> timeActivated() {
        return Optional.ofNullable(this.timeActivated);
    }

    /**
     * The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
     * 
     */
    @Import(name="timeExpired")
    private @Nullable Output<String> timeExpired;

    /**
     * @return The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
     * 
     */
    public Optional<Output<String>> timeExpired() {
        return Optional.ofNullable(this.timeExpired);
    }

    /**
     * The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    @Import(name="timeInactivated")
    private @Nullable Output<String> timeInactivated;

    /**
     * @return The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    public Optional<Output<String>> timeInactivated() {
        return Optional.ofNullable(this.timeInactivated);
    }

    /**
     * The date and time the key version was promoted expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timePromoted")
    private @Nullable Output<String> timePromoted;

    /**
     * @return The date and time the key version was promoted expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<Output<String>> timePromoted() {
        return Optional.ofNullable(this.timePromoted);
    }

    /**
     * The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
     * 
     */
    @Import(name="timePublished")
    private @Nullable Output<String> timePublished;

    /**
     * @return The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
     * 
     */
    public Optional<Output<String>> timePublished() {
        return Optional.ofNullable(this.timePublished);
    }

    /**
     * The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    @Import(name="timeUnpublished")
    private @Nullable Output<String> timeUnpublished;

    /**
     * @return The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    public Optional<Output<String>> timeUnpublished() {
        return Optional.ofNullable(this.timeUnpublished);
    }

    /**
     * The UUID of the `DnssecKeyVersion`.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID of the `DnssecKeyVersion`.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ZoneDnssecConfigKskDnssecKeyVersionArgs() {}

    private ZoneDnssecConfigKskDnssecKeyVersionArgs(ZoneDnssecConfigKskDnssecKeyVersionArgs $) {
        this.algorithm = $.algorithm;
        this.dsDatas = $.dsDatas;
        this.keyTag = $.keyTag;
        this.lengthInBytes = $.lengthInBytes;
        this.predecessorDnssecKeyVersionUuid = $.predecessorDnssecKeyVersionUuid;
        this.successorDnssecKeyVersionUuid = $.successorDnssecKeyVersionUuid;
        this.timeActivated = $.timeActivated;
        this.timeCreated = $.timeCreated;
        this.timeExpired = $.timeExpired;
        this.timeInactivated = $.timeInactivated;
        this.timePromoted = $.timePromoted;
        this.timePublished = $.timePublished;
        this.timeUnpublished = $.timeUnpublished;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnssecConfigKskDnssecKeyVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnssecConfigKskDnssecKeyVersionArgs $;

        public Builder() {
            $ = new ZoneDnssecConfigKskDnssecKeyVersionArgs();
        }

        public Builder(ZoneDnssecConfigKskDnssecKeyVersionArgs defaults) {
            $ = new ZoneDnssecConfigKskDnssecKeyVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The signing algorithm used for the key.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The signing algorithm used for the key.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param dsDatas An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder dsDatas(@Nullable Output<List<ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs>> dsDatas) {
            $.dsDatas = dsDatas;
            return this;
        }

        /**
         * @param dsDatas An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder dsDatas(List<ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs> dsDatas) {
            return dsDatas(Output.of(dsDatas));
        }

        /**
         * @param dsDatas An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder dsDatas(ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs... dsDatas) {
            return dsDatas(List.of(dsDatas));
        }

        /**
         * @param keyTag The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
         * 
         * @return builder
         * 
         */
        public Builder keyTag(@Nullable Output<Integer> keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        /**
         * @param keyTag The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
         * 
         * @return builder
         * 
         */
        public Builder keyTag(Integer keyTag) {
            return keyTag(Output.of(keyTag));
        }

        /**
         * @param lengthInBytes The length of the corresponding private key in bytes, expressed as an integer.
         * 
         * @return builder
         * 
         */
        public Builder lengthInBytes(@Nullable Output<Integer> lengthInBytes) {
            $.lengthInBytes = lengthInBytes;
            return this;
        }

        /**
         * @param lengthInBytes The length of the corresponding private key in bytes, expressed as an integer.
         * 
         * @return builder
         * 
         */
        public Builder lengthInBytes(Integer lengthInBytes) {
            return lengthInBytes(Output.of(lengthInBytes));
        }

        /**
         * @param predecessorDnssecKeyVersionUuid When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
         * 
         * @return builder
         * 
         */
        public Builder predecessorDnssecKeyVersionUuid(@Nullable Output<String> predecessorDnssecKeyVersionUuid) {
            $.predecessorDnssecKeyVersionUuid = predecessorDnssecKeyVersionUuid;
            return this;
        }

        /**
         * @param predecessorDnssecKeyVersionUuid When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
         * 
         * @return builder
         * 
         */
        public Builder predecessorDnssecKeyVersionUuid(String predecessorDnssecKeyVersionUuid) {
            return predecessorDnssecKeyVersionUuid(Output.of(predecessorDnssecKeyVersionUuid));
        }

        /**
         * @param successorDnssecKeyVersionUuid When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder successorDnssecKeyVersionUuid(@Nullable Output<String> successorDnssecKeyVersionUuid) {
            $.successorDnssecKeyVersionUuid = successorDnssecKeyVersionUuid;
            return this;
        }

        /**
         * @param successorDnssecKeyVersionUuid When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder successorDnssecKeyVersionUuid(String successorDnssecKeyVersionUuid) {
            return successorDnssecKeyVersionUuid(Output.of(successorDnssecKeyVersionUuid));
        }

        /**
         * @param timeActivated The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
         * 
         * @return builder
         * 
         */
        public Builder timeActivated(@Nullable Output<String> timeActivated) {
            $.timeActivated = timeActivated;
            return this;
        }

        /**
         * @param timeActivated The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
         * 
         * @return builder
         * 
         */
        public Builder timeActivated(String timeActivated) {
            return timeActivated(Output.of(timeActivated));
        }

        /**
         * @param timeCreated The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeExpired The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
         * 
         * @return builder
         * 
         */
        public Builder timeExpired(@Nullable Output<String> timeExpired) {
            $.timeExpired = timeExpired;
            return this;
        }

        /**
         * @param timeExpired The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
         * 
         * @return builder
         * 
         */
        public Builder timeExpired(String timeExpired) {
            return timeExpired(Output.of(timeExpired));
        }

        /**
         * @param timeInactivated The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder timeInactivated(@Nullable Output<String> timeInactivated) {
            $.timeInactivated = timeInactivated;
            return this;
        }

        /**
         * @param timeInactivated The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder timeInactivated(String timeInactivated) {
            return timeInactivated(Output.of(timeInactivated));
        }

        /**
         * @param timePromoted The date and time the key version was promoted expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timePromoted(@Nullable Output<String> timePromoted) {
            $.timePromoted = timePromoted;
            return this;
        }

        /**
         * @param timePromoted The date and time the key version was promoted expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timePromoted(String timePromoted) {
            return timePromoted(Output.of(timePromoted));
        }

        /**
         * @param timePublished The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
         * 
         * @return builder
         * 
         */
        public Builder timePublished(@Nullable Output<String> timePublished) {
            $.timePublished = timePublished;
            return this;
        }

        /**
         * @param timePublished The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
         * 
         * @return builder
         * 
         */
        public Builder timePublished(String timePublished) {
            return timePublished(Output.of(timePublished));
        }

        /**
         * @param timeUnpublished The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder timeUnpublished(@Nullable Output<String> timeUnpublished) {
            $.timeUnpublished = timeUnpublished;
            return this;
        }

        /**
         * @param timeUnpublished The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder timeUnpublished(String timeUnpublished) {
            return timeUnpublished(Output.of(timeUnpublished));
        }

        /**
         * @param uuid The UUID of the `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of the `DnssecKeyVersion`.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ZoneDnssecConfigKskDnssecKeyVersionArgs build() {
            return $;
        }
    }

}
