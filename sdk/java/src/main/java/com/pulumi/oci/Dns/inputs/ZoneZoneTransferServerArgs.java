// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneZoneTransferServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneZoneTransferServerArgs Empty = new ZoneZoneTransferServerArgs();

    /**
     * (Updatable) The server&#39;s IP address (IPv4 or IPv6).
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return (Updatable) The server&#39;s IP address (IPv4 or IPv6).
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * A Boolean flag indicating whether or not the server is a zone data transfer destination.
     * 
     */
    @Import(name="isTransferDestination")
    private @Nullable Output<Boolean> isTransferDestination;

    /**
     * @return A Boolean flag indicating whether or not the server is a zone data transfer destination.
     * 
     */
    public Optional<Output<Boolean>> isTransferDestination() {
        return Optional.ofNullable(this.isTransferDestination);
    }

    /**
     * A Boolean flag indicating whether or not the server is a zone data transfer source.
     * 
     */
    @Import(name="isTransferSource")
    private @Nullable Output<Boolean> isTransferSource;

    /**
     * @return A Boolean flag indicating whether or not the server is a zone data transfer source.
     * 
     */
    public Optional<Output<Boolean>> isTransferSource() {
        return Optional.ofNullable(this.isTransferSource);
    }

    /**
     * (Updatable) The server&#39;s port. Port value must be a value of 53, otherwise omit the port value.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The server&#39;s port. Port value must be a value of 53, otherwise omit the port value.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    private ZoneZoneTransferServerArgs() {}

    private ZoneZoneTransferServerArgs(ZoneZoneTransferServerArgs $) {
        this.address = $.address;
        this.isTransferDestination = $.isTransferDestination;
        this.isTransferSource = $.isTransferSource;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneZoneTransferServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneZoneTransferServerArgs $;

        public Builder() {
            $ = new ZoneZoneTransferServerArgs();
        }

        public Builder(ZoneZoneTransferServerArgs defaults) {
            $ = new ZoneZoneTransferServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address (Updatable) The server&#39;s IP address (IPv4 or IPv6).
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address (Updatable) The server&#39;s IP address (IPv4 or IPv6).
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param isTransferDestination A Boolean flag indicating whether or not the server is a zone data transfer destination.
         * 
         * @return builder
         * 
         */
        public Builder isTransferDestination(@Nullable Output<Boolean> isTransferDestination) {
            $.isTransferDestination = isTransferDestination;
            return this;
        }

        /**
         * @param isTransferDestination A Boolean flag indicating whether or not the server is a zone data transfer destination.
         * 
         * @return builder
         * 
         */
        public Builder isTransferDestination(Boolean isTransferDestination) {
            return isTransferDestination(Output.of(isTransferDestination));
        }

        /**
         * @param isTransferSource A Boolean flag indicating whether or not the server is a zone data transfer source.
         * 
         * @return builder
         * 
         */
        public Builder isTransferSource(@Nullable Output<Boolean> isTransferSource) {
            $.isTransferSource = isTransferSource;
            return this;
        }

        /**
         * @param isTransferSource A Boolean flag indicating whether or not the server is a zone data transfer source.
         * 
         * @return builder
         * 
         */
        public Builder isTransferSource(Boolean isTransferSource) {
            return isTransferSource(Output.of(isTransferSource));
        }

        /**
         * @param port (Updatable) The server&#39;s port. Port value must be a value of 53, otherwise omit the port value.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The server&#39;s port. Port value must be a value of 53, otherwise omit the port value.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public ZoneZoneTransferServerArgs build() {
            return $;
        }
    }

}
