// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.outputs.GetRecordsFilter;
import com.pulumi.oci.Dns.outputs.GetRecordsRecord;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRecordsResult {
    private @Nullable String compartmentId;
    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    private @Nullable String domain;
    private @Nullable String domainContains;
    private @Nullable List<GetRecordsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of records.
     * 
     */
    private List<GetRecordsRecord> records;
    /**
     * @return The canonical name for the record&#39;s type, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     * 
     */
    private @Nullable String rtype;
    private @Nullable String sortBy;
    private @Nullable String sortOrder;
    /**
     * @return The name or OCID of the target zone.
     * 
     * @deprecated
     * The &#39;oci_dns_records&#39; resource has been deprecated. Please use &#39;oci_dns_rrsets&#39; instead.
     * 
     */
    @Deprecated /* The 'oci_dns_records' resource has been deprecated. Please use 'oci_dns_rrsets' instead. */
    private String zoneNameOrId;
    private @Nullable String zoneVersion;

    private GetRecordsResult() {}
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    public Optional<String> domainContains() {
        return Optional.ofNullable(this.domainContains);
    }
    public List<GetRecordsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of records.
     * 
     */
    public List<GetRecordsRecord> records() {
        return this.records;
    }
    /**
     * @return The canonical name for the record&#39;s type, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     * 
     */
    public Optional<String> rtype() {
        return Optional.ofNullable(this.rtype);
    }
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }
    /**
     * @return The name or OCID of the target zone.
     * 
     * @deprecated
     * The &#39;oci_dns_records&#39; resource has been deprecated. Please use &#39;oci_dns_rrsets&#39; instead.
     * 
     */
    @Deprecated /* The 'oci_dns_records' resource has been deprecated. Please use 'oci_dns_rrsets' instead. */
    public String zoneNameOrId() {
        return this.zoneNameOrId;
    }
    public Optional<String> zoneVersion() {
        return Optional.ofNullable(this.zoneVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecordsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String domain;
        private @Nullable String domainContains;
        private @Nullable List<GetRecordsFilter> filters;
        private String id;
        private List<GetRecordsRecord> records;
        private @Nullable String rtype;
        private @Nullable String sortBy;
        private @Nullable String sortOrder;
        private String zoneNameOrId;
        private @Nullable String zoneVersion;
        public Builder() {}
        public Builder(GetRecordsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.domain = defaults.domain;
    	      this.domainContains = defaults.domainContains;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.records = defaults.records;
    	      this.rtype = defaults.rtype;
    	      this.sortBy = defaults.sortBy;
    	      this.sortOrder = defaults.sortOrder;
    	      this.zoneNameOrId = defaults.zoneNameOrId;
    	      this.zoneVersion = defaults.zoneVersion;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainContains(@Nullable String domainContains) {

            this.domainContains = domainContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRecordsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRecordsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecordsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder records(List<GetRecordsRecord> records) {
            if (records == null) {
              throw new MissingRequiredPropertyException("GetRecordsResult", "records");
            }
            this.records = records;
            return this;
        }
        public Builder records(GetRecordsRecord... records) {
            return records(List.of(records));
        }
        @CustomType.Setter
        public Builder rtype(@Nullable String rtype) {

            this.rtype = rtype;
            return this;
        }
        @CustomType.Setter
        public Builder sortBy(@Nullable String sortBy) {

            this.sortBy = sortBy;
            return this;
        }
        @CustomType.Setter
        public Builder sortOrder(@Nullable String sortOrder) {

            this.sortOrder = sortOrder;
            return this;
        }
        @CustomType.Setter
        public Builder zoneNameOrId(String zoneNameOrId) {
            if (zoneNameOrId == null) {
              throw new MissingRequiredPropertyException("GetRecordsResult", "zoneNameOrId");
            }
            this.zoneNameOrId = zoneNameOrId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneVersion(@Nullable String zoneVersion) {

            this.zoneVersion = zoneVersion;
            return this;
        }
        public GetRecordsResult build() {
            final var _resultValue = new GetRecordsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.domain = domain;
            _resultValue.domainContains = domainContains;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.records = records;
            _resultValue.rtype = rtype;
            _resultValue.sortBy = sortBy;
            _resultValue.sortOrder = sortOrder;
            _resultValue.zoneNameOrId = zoneNameOrId;
            _resultValue.zoneVersion = zoneVersion;
            return _resultValue;
        }
    }
}
