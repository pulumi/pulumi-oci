// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetResolverEndpointResult {
    /**
     * @return The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver&#39;s compartment is changed.
     * 
     */
    private String compartmentId;
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    private String endpointType;
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    private String forwardingAddress;
    private String id;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    private Boolean isForwarding;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    private Boolean isListening;
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    private String listeningAddress;
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    private String name;
    /**
     * @return An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    private List<String> nsgIds;
    private String resolverEndpointName;
    private String resolverId;
    private @Nullable String scope;
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    private String self;
    /**
     * @return The current state of the resource.
     * 
     */
    private String state;
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    private String subnetId;
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private String timeUpdated;

    private GetResolverEndpointResult() {}
    /**
     * @return The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver&#39;s compartment is changed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    public String endpointType() {
        return this.endpointType;
    }
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    public String forwardingAddress() {
        return this.forwardingAddress;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    public Boolean isForwarding() {
        return this.isForwarding;
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    public Boolean isListening() {
        return this.isListening;
    }
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    public String listeningAddress() {
        return this.listeningAddress;
    }
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    public String resolverEndpointName() {
        return this.resolverEndpointName;
    }
    public String resolverId() {
        return this.resolverId;
    }
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public String self() {
        return this.self;
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverEndpointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String endpointType;
        private String forwardingAddress;
        private String id;
        private Boolean isForwarding;
        private Boolean isListening;
        private String listeningAddress;
        private String name;
        private List<String> nsgIds;
        private String resolverEndpointName;
        private String resolverId;
        private @Nullable String scope;
        private String self;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetResolverEndpointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.endpointType = defaults.endpointType;
    	      this.forwardingAddress = defaults.forwardingAddress;
    	      this.id = defaults.id;
    	      this.isForwarding = defaults.isForwarding;
    	      this.isListening = defaults.isListening;
    	      this.listeningAddress = defaults.listeningAddress;
    	      this.name = defaults.name;
    	      this.nsgIds = defaults.nsgIds;
    	      this.resolverEndpointName = defaults.resolverEndpointName;
    	      this.resolverId = defaults.resolverId;
    	      this.scope = defaults.scope;
    	      this.self = defaults.self;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder endpointType(String endpointType) {
            if (endpointType == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "endpointType");
            }
            this.endpointType = endpointType;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingAddress(String forwardingAddress) {
            if (forwardingAddress == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "forwardingAddress");
            }
            this.forwardingAddress = forwardingAddress;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isForwarding(Boolean isForwarding) {
            if (isForwarding == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "isForwarding");
            }
            this.isForwarding = isForwarding;
            return this;
        }
        @CustomType.Setter
        public Builder isListening(Boolean isListening) {
            if (isListening == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "isListening");
            }
            this.isListening = isListening;
            return this;
        }
        @CustomType.Setter
        public Builder listeningAddress(String listeningAddress) {
            if (listeningAddress == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "listeningAddress");
            }
            this.listeningAddress = listeningAddress;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder resolverEndpointName(String resolverEndpointName) {
            if (resolverEndpointName == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "resolverEndpointName");
            }
            this.resolverEndpointName = resolverEndpointName;
            return this;
        }
        @CustomType.Setter
        public Builder resolverId(String resolverId) {
            if (resolverId == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "resolverId");
            }
            this.resolverId = resolverId;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder self(String self) {
            if (self == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "self");
            }
            this.self = self;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetResolverEndpointResult build() {
            final var _resultValue = new GetResolverEndpointResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.endpointType = endpointType;
            _resultValue.forwardingAddress = forwardingAddress;
            _resultValue.id = id;
            _resultValue.isForwarding = isForwarding;
            _resultValue.isListening = isListening;
            _resultValue.listeningAddress = listeningAddress;
            _resultValue.name = name;
            _resultValue.nsgIds = nsgIds;
            _resultValue.resolverEndpointName = resolverEndpointName;
            _resultValue.resolverId = resolverId;
            _resultValue.scope = scope;
            _resultValue.self = self;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
