// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.outputs.GetResolverEndpointsFilter;
import com.pulumi.oci.Dns.outputs.GetResolverEndpointsResolverEndpoint;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetResolverEndpointsResult {
    private @Nullable List<GetResolverEndpointsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    private @Nullable String name;
    /**
     * @return The list of resolver_endpoints.
     * 
     */
    private List<GetResolverEndpointsResolverEndpoint> resolverEndpoints;
    private String resolverId;
    private String scope;
    /**
     * @return The current state of the resource.
     * 
     */
    private @Nullable String state;

    private GetResolverEndpointsResult() {}
    public List<GetResolverEndpointsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of resolver_endpoints.
     * 
     */
    public List<GetResolverEndpointsResolverEndpoint> resolverEndpoints() {
        return this.resolverEndpoints;
    }
    public String resolverId() {
        return this.resolverId;
    }
    public String scope() {
        return this.scope;
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverEndpointsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetResolverEndpointsFilter> filters;
        private String id;
        private @Nullable String name;
        private List<GetResolverEndpointsResolverEndpoint> resolverEndpoints;
        private String resolverId;
        private String scope;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetResolverEndpointsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.resolverEndpoints = defaults.resolverEndpoints;
    	      this.resolverId = defaults.resolverId;
    	      this.scope = defaults.scope;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetResolverEndpointsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetResolverEndpointsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resolverEndpoints(List<GetResolverEndpointsResolverEndpoint> resolverEndpoints) {
            if (resolverEndpoints == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointsResult", "resolverEndpoints");
            }
            this.resolverEndpoints = resolverEndpoints;
            return this;
        }
        public Builder resolverEndpoints(GetResolverEndpointsResolverEndpoint... resolverEndpoints) {
            return resolverEndpoints(List.of(resolverEndpoints));
        }
        @CustomType.Setter
        public Builder resolverId(String resolverId) {
            if (resolverId == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointsResult", "resolverId");
            }
            this.resolverId = resolverId;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetResolverEndpointsResult", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetResolverEndpointsResult build() {
            final var _resultValue = new GetResolverEndpointsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.resolverEndpoints = resolverEndpoints;
            _resultValue.resolverId = resolverId;
            _resultValue.scope = scope;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
