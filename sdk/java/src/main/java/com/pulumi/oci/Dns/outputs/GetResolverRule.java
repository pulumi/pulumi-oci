// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetResolverRule {
    /**
     * @return The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
     * 
     */
    private String action;
    /**
     * @return A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
     * 
     */
    private List<String> clientAddressConditions;
    /**
     * @return IP addresses to which queries should be forwarded. Currently limited to a single address.
     * 
     */
    private List<String> destinationAddresses;
    /**
     * @return A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
     * 
     */
    private List<String> qnameCoverConditions;
    /**
     * @return Case-insensitive name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
     * 
     */
    private String sourceEndpointName;

    private GetResolverRule() {}
    /**
     * @return The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
     * 
     */
    public List<String> clientAddressConditions() {
        return this.clientAddressConditions;
    }
    /**
     * @return IP addresses to which queries should be forwarded. Currently limited to a single address.
     * 
     */
    public List<String> destinationAddresses() {
        return this.destinationAddresses;
    }
    /**
     * @return A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
     * 
     */
    public List<String> qnameCoverConditions() {
        return this.qnameCoverConditions;
    }
    /**
     * @return Case-insensitive name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
     * 
     */
    public String sourceEndpointName() {
        return this.sourceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<String> clientAddressConditions;
        private List<String> destinationAddresses;
        private List<String> qnameCoverConditions;
        private String sourceEndpointName;
        public Builder() {}
        public Builder(GetResolverRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.clientAddressConditions = defaults.clientAddressConditions;
    	      this.destinationAddresses = defaults.destinationAddresses;
    	      this.qnameCoverConditions = defaults.qnameCoverConditions;
    	      this.sourceEndpointName = defaults.sourceEndpointName;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetResolverRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder clientAddressConditions(List<String> clientAddressConditions) {
            if (clientAddressConditions == null) {
              throw new MissingRequiredPropertyException("GetResolverRule", "clientAddressConditions");
            }
            this.clientAddressConditions = clientAddressConditions;
            return this;
        }
        public Builder clientAddressConditions(String... clientAddressConditions) {
            return clientAddressConditions(List.of(clientAddressConditions));
        }
        @CustomType.Setter
        public Builder destinationAddresses(List<String> destinationAddresses) {
            if (destinationAddresses == null) {
              throw new MissingRequiredPropertyException("GetResolverRule", "destinationAddresses");
            }
            this.destinationAddresses = destinationAddresses;
            return this;
        }
        public Builder destinationAddresses(String... destinationAddresses) {
            return destinationAddresses(List.of(destinationAddresses));
        }
        @CustomType.Setter
        public Builder qnameCoverConditions(List<String> qnameCoverConditions) {
            if (qnameCoverConditions == null) {
              throw new MissingRequiredPropertyException("GetResolverRule", "qnameCoverConditions");
            }
            this.qnameCoverConditions = qnameCoverConditions;
            return this;
        }
        public Builder qnameCoverConditions(String... qnameCoverConditions) {
            return qnameCoverConditions(List.of(qnameCoverConditions));
        }
        @CustomType.Setter
        public Builder sourceEndpointName(String sourceEndpointName) {
            if (sourceEndpointName == null) {
              throw new MissingRequiredPropertyException("GetResolverRule", "sourceEndpointName");
            }
            this.sourceEndpointName = sourceEndpointName;
            return this;
        }
        public GetResolverRule build() {
            final var _resultValue = new GetResolverRule();
            _resultValue.action = action;
            _resultValue.clientAddressConditions = clientAddressConditions;
            _resultValue.destinationAddresses = destinationAddresses;
            _resultValue.qnameCoverConditions = qnameCoverConditions;
            _resultValue.sourceEndpointName = sourceEndpointName;
            return _resultValue;
        }
    }
}
