// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Dns.outputs.GetResolversFilter;
import com.pulumi.oci.Dns.outputs.GetResolversResolver;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetResolversResult {
    /**
     * @return The OCID of the owning compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The display name of the resolver.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetResolversFilter> filters;
    /**
     * @return The OCID of the resolver.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of resolvers.
     * 
     */
    private List<GetResolversResolver> resolvers;
    private String scope;
    /**
     * @return The current state of the resource.
     * 
     */
    private @Nullable String state;

    private GetResolversResult() {}
    /**
     * @return The OCID of the owning compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The display name of the resolver.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetResolversFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The OCID of the resolver.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of resolvers.
     * 
     */
    public List<GetResolversResolver> resolvers() {
        return this.resolvers;
    }
    public String scope() {
        return this.scope;
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolversResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetResolversFilter> filters;
        private @Nullable String id;
        private List<GetResolversResolver> resolvers;
        private String scope;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetResolversResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.resolvers = defaults.resolvers;
    	      this.scope = defaults.scope;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetResolversFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetResolversFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder resolvers(List<GetResolversResolver> resolvers) {
            this.resolvers = Objects.requireNonNull(resolvers);
            return this;
        }
        public Builder resolvers(GetResolversResolver... resolvers) {
            return resolvers(List.of(resolvers));
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetResolversResult build() {
            final var o = new GetResolversResult();
            o.compartmentId = compartmentId;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.resolvers = resolvers;
            o.scope = scope;
            o.state = state;
            return o;
        }
    }
}
