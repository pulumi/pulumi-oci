// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Dns.outputs.GetRrsetsFilter;
import com.pulumi.oci.Dns.outputs.GetRrsetsRrset;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRrsetsResult {
    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    private @Nullable String domain;
    private @Nullable String domainContains;
    private @Nullable List<GetRrsetsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of rrsets.
     * 
     */
    private List<GetRrsetsRrset> rrsets;
    /**
     * @return The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     * 
     */
    private @Nullable String rtype;
    private @Nullable String scope;
    private @Nullable String viewId;
    private String zoneNameOrId;

    private GetRrsetsResult() {}
    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    public Optional<String> domainContains() {
        return Optional.ofNullable(this.domainContains);
    }
    public List<GetRrsetsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of rrsets.
     * 
     */
    public List<GetRrsetsRrset> rrsets() {
        return this.rrsets;
    }
    /**
     * @return The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     * 
     */
    public Optional<String> rtype() {
        return Optional.ofNullable(this.rtype);
    }
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    public Optional<String> viewId() {
        return Optional.ofNullable(this.viewId);
    }
    public String zoneNameOrId() {
        return this.zoneNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRrsetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String domain;
        private @Nullable String domainContains;
        private @Nullable List<GetRrsetsFilter> filters;
        private String id;
        private List<GetRrsetsRrset> rrsets;
        private @Nullable String rtype;
        private @Nullable String scope;
        private @Nullable String viewId;
        private String zoneNameOrId;
        public Builder() {}
        public Builder(GetRrsetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.domainContains = defaults.domainContains;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.rrsets = defaults.rrsets;
    	      this.rtype = defaults.rtype;
    	      this.scope = defaults.scope;
    	      this.viewId = defaults.viewId;
    	      this.zoneNameOrId = defaults.zoneNameOrId;
        }

        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainContains(@Nullable String domainContains) {
            this.domainContains = domainContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRrsetsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRrsetsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder rrsets(List<GetRrsetsRrset> rrsets) {
            this.rrsets = Objects.requireNonNull(rrsets);
            return this;
        }
        public Builder rrsets(GetRrsetsRrset... rrsets) {
            return rrsets(List.of(rrsets));
        }
        @CustomType.Setter
        public Builder rtype(@Nullable String rtype) {
            this.rtype = rtype;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder viewId(@Nullable String viewId) {
            this.viewId = viewId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneNameOrId(String zoneNameOrId) {
            this.zoneNameOrId = Objects.requireNonNull(zoneNameOrId);
            return this;
        }
        public GetRrsetsResult build() {
            final var o = new GetRrsetsResult();
            o.domain = domain;
            o.domainContains = domainContains;
            o.filters = filters;
            o.id = id;
            o.rrsets = rrsets;
            o.rtype = rtype;
            o.scope = scope;
            o.viewId = viewId;
            o.zoneNameOrId = zoneNameOrId;
            return o;
        }
    }
}
