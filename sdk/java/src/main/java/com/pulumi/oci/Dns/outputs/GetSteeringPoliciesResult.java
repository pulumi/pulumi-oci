// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.outputs.GetSteeringPoliciesFilter;
import com.pulumi.oci.Dns.outputs.GetSteeringPoliciesSteeringPolicy;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSteeringPoliciesResult {
    /**
     * @return The OCID of the compartment containing the steering policy.
     * 
     */
    private String compartmentId;
    /**
     * @return A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable String displayNameContains;
    private @Nullable List<GetSteeringPoliciesFilter> filters;
    /**
     * @return The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
     * 
     */
    private @Nullable String healthCheckMonitorId;
    /**
     * @return The OCID of the resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The current state of the resource.
     * 
     */
    private @Nullable String state;
    /**
     * @return The list of steering_policies.
     * 
     */
    private List<GetSteeringPoliciesSteeringPolicy> steeringPolicies;
    /**
     * @return A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management&#39;s rules in a different order to produce the desired results when answering DNS queries.
     * 
     */
    private @Nullable String template;
    private @Nullable String timeCreatedGreaterThanOrEqualTo;
    private @Nullable String timeCreatedLessThan;

    private GetSteeringPoliciesResult() {}
    /**
     * @return The OCID of the compartment containing the steering policy.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    public List<GetSteeringPoliciesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
     * 
     */
    public Optional<String> healthCheckMonitorId() {
        return Optional.ofNullable(this.healthCheckMonitorId);
    }
    /**
     * @return The OCID of the resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The list of steering_policies.
     * 
     */
    public List<GetSteeringPoliciesSteeringPolicy> steeringPolicies() {
        return this.steeringPolicies;
    }
    /**
     * @return A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management&#39;s rules in a different order to produce the desired results when answering DNS queries.
     * 
     */
    public Optional<String> template() {
        return Optional.ofNullable(this.template);
    }
    public Optional<String> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeCreatedLessThan() {
        return Optional.ofNullable(this.timeCreatedLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSteeringPoliciesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable String displayNameContains;
        private @Nullable List<GetSteeringPoliciesFilter> filters;
        private @Nullable String healthCheckMonitorId;
        private @Nullable String id;
        private @Nullable String state;
        private List<GetSteeringPoliciesSteeringPolicy> steeringPolicies;
        private @Nullable String template;
        private @Nullable String timeCreatedGreaterThanOrEqualTo;
        private @Nullable String timeCreatedLessThan;
        public Builder() {}
        public Builder(GetSteeringPoliciesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.filters = defaults.filters;
    	      this.healthCheckMonitorId = defaults.healthCheckMonitorId;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.steeringPolicies = defaults.steeringPolicies;
    	      this.template = defaults.template;
    	      this.timeCreatedGreaterThanOrEqualTo = defaults.timeCreatedGreaterThanOrEqualTo;
    	      this.timeCreatedLessThan = defaults.timeCreatedLessThan;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSteeringPoliciesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSteeringPoliciesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSteeringPoliciesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder healthCheckMonitorId(@Nullable String healthCheckMonitorId) {

            this.healthCheckMonitorId = healthCheckMonitorId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder steeringPolicies(List<GetSteeringPoliciesSteeringPolicy> steeringPolicies) {
            if (steeringPolicies == null) {
              throw new MissingRequiredPropertyException("GetSteeringPoliciesResult", "steeringPolicies");
            }
            this.steeringPolicies = steeringPolicies;
            return this;
        }
        public Builder steeringPolicies(GetSteeringPoliciesSteeringPolicy... steeringPolicies) {
            return steeringPolicies(List.of(steeringPolicies));
        }
        @CustomType.Setter
        public Builder template(@Nullable String template) {

            this.template = template;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable String timeCreatedGreaterThanOrEqualTo) {

            this.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreatedLessThan(@Nullable String timeCreatedLessThan) {

            this.timeCreatedLessThan = timeCreatedLessThan;
            return this;
        }
        public GetSteeringPoliciesResult build() {
            final var _resultValue = new GetSteeringPoliciesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.filters = filters;
            _resultValue.healthCheckMonitorId = healthCheckMonitorId;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.steeringPolicies = steeringPolicies;
            _resultValue.template = template;
            _resultValue.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            _resultValue.timeCreatedLessThan = timeCreatedLessThan;
            return _resultValue;
        }
    }
}
