// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dns.outputs.GetSteeringPolicyRuleCase;
import com.pulumi.oci.Dns.outputs.GetSteeringPolicyRuleDefaultAnswerData;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSteeringPolicyRule {
    /**
     * @return An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
     * 
     */
    private List<GetSteeringPolicyRuleCase> cases;
    /**
     * @return Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
     * 
     */
    private List<GetSteeringPolicyRuleDefaultAnswerData> defaultAnswerDatas;
    /**
     * @return Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
     * 
     */
    private Integer defaultCount;
    /**
     * @return A user-defined description of the rule&#39;s purpose or behavior.
     * 
     */
    private String description;
    /**
     * @return The type of a rule determines its sorting/filtering behavior.
     * 
     */
    private String ruleType;

    private GetSteeringPolicyRule() {}
    /**
     * @return An array of `caseConditions`. A rule may optionally include a sequence of cases defining alternate configurations for how it should behave during processing for any given DNS query. When a rule has no sequence of `cases`, it is always evaluated with the same configuration during processing. When a rule has an empty sequence of `cases`, it is always ignored during processing. When a rule has a non-empty sequence of `cases`, its behavior during processing is configured by the first matching `case` in the sequence. When a rule has no matching cases the rule is ignored. A rule case with no `caseCondition` always matches. A rule case with a `caseCondition` matches only when that expression evaluates to true for the given query.
     * 
     */
    public List<GetSteeringPolicyRuleCase> cases() {
        return this.cases;
    }
    /**
     * @return Defines a default set of answer conditions and values that are applied to an answer when `cases` is not defined for the rule, or a matching case does not have any matching `answerCondition`s in its `answerData`. `defaultAnswerData` is not applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed.
     * 
     */
    public List<GetSteeringPolicyRuleDefaultAnswerData> defaultAnswerDatas() {
        return this.defaultAnswerDatas;
    }
    /**
     * @return Defines a default count if `cases` is not defined for the rule or a matching case does not define `count`. `defaultCount` is **not** applied if `cases` is defined and there are no matching cases. In this scenario, the next rule will be processed. If no rules remain to be processed, the answer will be chosen from the remaining list of answers.
     * 
     */
    public Integer defaultCount() {
        return this.defaultCount;
    }
    /**
     * @return A user-defined description of the rule&#39;s purpose or behavior.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The type of a rule determines its sorting/filtering behavior.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSteeringPolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSteeringPolicyRuleCase> cases;
        private List<GetSteeringPolicyRuleDefaultAnswerData> defaultAnswerDatas;
        private Integer defaultCount;
        private String description;
        private String ruleType;
        public Builder() {}
        public Builder(GetSteeringPolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cases = defaults.cases;
    	      this.defaultAnswerDatas = defaults.defaultAnswerDatas;
    	      this.defaultCount = defaults.defaultCount;
    	      this.description = defaults.description;
    	      this.ruleType = defaults.ruleType;
        }

        @CustomType.Setter
        public Builder cases(List<GetSteeringPolicyRuleCase> cases) {
            if (cases == null) {
              throw new MissingRequiredPropertyException("GetSteeringPolicyRule", "cases");
            }
            this.cases = cases;
            return this;
        }
        public Builder cases(GetSteeringPolicyRuleCase... cases) {
            return cases(List.of(cases));
        }
        @CustomType.Setter
        public Builder defaultAnswerDatas(List<GetSteeringPolicyRuleDefaultAnswerData> defaultAnswerDatas) {
            if (defaultAnswerDatas == null) {
              throw new MissingRequiredPropertyException("GetSteeringPolicyRule", "defaultAnswerDatas");
            }
            this.defaultAnswerDatas = defaultAnswerDatas;
            return this;
        }
        public Builder defaultAnswerDatas(GetSteeringPolicyRuleDefaultAnswerData... defaultAnswerDatas) {
            return defaultAnswerDatas(List.of(defaultAnswerDatas));
        }
        @CustomType.Setter
        public Builder defaultCount(Integer defaultCount) {
            if (defaultCount == null) {
              throw new MissingRequiredPropertyException("GetSteeringPolicyRule", "defaultCount");
            }
            this.defaultCount = defaultCount;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSteeringPolicyRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            if (ruleType == null) {
              throw new MissingRequiredPropertyException("GetSteeringPolicyRule", "ruleType");
            }
            this.ruleType = ruleType;
            return this;
        }
        public GetSteeringPolicyRule build() {
            final var _resultValue = new GetSteeringPolicyRule();
            _resultValue.cases = cases;
            _resultValue.defaultAnswerDatas = defaultAnswerDatas;
            _resultValue.defaultCount = defaultCount;
            _resultValue.description = description;
            _resultValue.ruleType = ruleType;
            return _resultValue;
        }
    }
}
