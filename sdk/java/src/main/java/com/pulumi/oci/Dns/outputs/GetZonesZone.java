// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Dns.outputs.GetZonesZoneExternalDownstream;
import com.pulumi.oci.Dns.outputs.GetZonesZoneExternalMaster;
import com.pulumi.oci.Dns.outputs.GetZonesZoneNameserver;
import com.pulumi.oci.Dns.outputs.GetZonesZoneZoneTransferServer;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetZonesZone {
    /**
     * @return The OCID of the compartment the resource belongs to.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     * 
     */
    private List<GetZonesZoneExternalDownstream> externalDownstreams;
    /**
     * @return External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     * 
     */
    private List<GetZonesZoneExternalMaster> externalMasters;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the zone.
     * 
     */
    private String id;
    /**
     * @return A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     * 
     */
    private Boolean isProtected;
    /**
     * @return A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
     * 
     */
    private String name;
    /**
     * @return The authoritative nameservers for the zone.
     * 
     */
    private List<GetZonesZoneNameserver> nameservers;
    /**
     * @return Specifies to operate only on resources that have a matching DNS scope. This value will be null
     * for zones in the global DNS and `PRIVATE` when listing private zones.
     * 
     */
    private String scope;
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    private String self;
    /**
     * @return The current serial of the zone. As seen in the zone&#39;s SOA record.
     * 
     */
    private Integer serial;
    /**
     * @return The state of a resource.
     * 
     */
    private String state;
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private String timeCreated;
    /**
     * @return Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone&#39;s SOA record is derived.
     * 
     */
    private String version;
    /**
     * @return The OCID of the view the resource is associated with.
     * 
     */
    private String viewId;
    /**
     * @return The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
     * 
     */
    private List<GetZonesZoneZoneTransferServer> zoneTransferServers;
    /**
     * @return Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
     * 
     */
    private String zoneType;

    private GetZonesZone() {}
    /**
     * @return The OCID of the compartment the resource belongs to.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     * 
     */
    public List<GetZonesZoneExternalDownstream> externalDownstreams() {
        return this.externalDownstreams;
    }
    /**
     * @return External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     * 
     */
    public List<GetZonesZoneExternalMaster> externalMasters() {
        return this.externalMasters;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the zone.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     * 
     */
    public Boolean isProtected() {
        return this.isProtected;
    }
    /**
     * @return A case-sensitive filter for zone names. Will match any zone with a name that equals the provided value.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The authoritative nameservers for the zone.
     * 
     */
    public List<GetZonesZoneNameserver> nameservers() {
        return this.nameservers;
    }
    /**
     * @return Specifies to operate only on resources that have a matching DNS scope. This value will be null
     * for zones in the global DNS and `PRIVATE` when listing private zones.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public String self() {
        return this.self;
    }
    /**
     * @return The current serial of the zone. As seen in the zone&#39;s SOA record.
     * 
     */
    public Integer serial() {
        return this.serial;
    }
    /**
     * @return The state of a resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone&#39;s SOA record is derived.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The OCID of the view the resource is associated with.
     * 
     */
    public String viewId() {
        return this.viewId;
    }
    /**
     * @return The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
     * 
     */
    public List<GetZonesZoneZoneTransferServer> zoneTransferServers() {
        return this.zoneTransferServers;
    }
    /**
     * @return Search by zone type, `PRIMARY` or `SECONDARY`. Will match any zone whose type equals the provided value.
     * 
     */
    public String zoneType() {
        return this.zoneType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZonesZone defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private List<GetZonesZoneExternalDownstream> externalDownstreams;
        private List<GetZonesZoneExternalMaster> externalMasters;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isProtected;
        private String name;
        private List<GetZonesZoneNameserver> nameservers;
        private String scope;
        private String self;
        private Integer serial;
        private String state;
        private String timeCreated;
        private String version;
        private String viewId;
        private List<GetZonesZoneZoneTransferServer> zoneTransferServers;
        private String zoneType;
        public Builder() {}
        public Builder(GetZonesZone defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.externalDownstreams = defaults.externalDownstreams;
    	      this.externalMasters = defaults.externalMasters;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isProtected = defaults.isProtected;
    	      this.name = defaults.name;
    	      this.nameservers = defaults.nameservers;
    	      this.scope = defaults.scope;
    	      this.self = defaults.self;
    	      this.serial = defaults.serial;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.version = defaults.version;
    	      this.viewId = defaults.viewId;
    	      this.zoneTransferServers = defaults.zoneTransferServers;
    	      this.zoneType = defaults.zoneType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder externalDownstreams(List<GetZonesZoneExternalDownstream> externalDownstreams) {
            this.externalDownstreams = Objects.requireNonNull(externalDownstreams);
            return this;
        }
        public Builder externalDownstreams(GetZonesZoneExternalDownstream... externalDownstreams) {
            return externalDownstreams(List.of(externalDownstreams));
        }
        @CustomType.Setter
        public Builder externalMasters(List<GetZonesZoneExternalMaster> externalMasters) {
            this.externalMasters = Objects.requireNonNull(externalMasters);
            return this;
        }
        public Builder externalMasters(GetZonesZoneExternalMaster... externalMasters) {
            return externalMasters(List.of(externalMasters));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isProtected(Boolean isProtected) {
            this.isProtected = Objects.requireNonNull(isProtected);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameservers(List<GetZonesZoneNameserver> nameservers) {
            this.nameservers = Objects.requireNonNull(nameservers);
            return this;
        }
        public Builder nameservers(GetZonesZoneNameserver... nameservers) {
            return nameservers(List.of(nameservers));
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        @CustomType.Setter
        public Builder self(String self) {
            this.self = Objects.requireNonNull(self);
            return this;
        }
        @CustomType.Setter
        public Builder serial(Integer serial) {
            this.serial = Objects.requireNonNull(serial);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder viewId(String viewId) {
            this.viewId = Objects.requireNonNull(viewId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneTransferServers(List<GetZonesZoneZoneTransferServer> zoneTransferServers) {
            this.zoneTransferServers = Objects.requireNonNull(zoneTransferServers);
            return this;
        }
        public Builder zoneTransferServers(GetZonesZoneZoneTransferServer... zoneTransferServers) {
            return zoneTransferServers(List.of(zoneTransferServers));
        }
        @CustomType.Setter
        public Builder zoneType(String zoneType) {
            this.zoneType = Objects.requireNonNull(zoneType);
            return this;
        }
        public GetZonesZone build() {
            final var o = new GetZonesZone();
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.externalDownstreams = externalDownstreams;
            o.externalMasters = externalMasters;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isProtected = isProtected;
            o.name = name;
            o.nameservers = nameservers;
            o.scope = scope;
            o.self = self;
            o.serial = serial;
            o.state = state;
            o.timeCreated = timeCreated;
            o.version = version;
            o.viewId = viewId;
            o.zoneTransferServers = zoneTransferServers;
            o.zoneType = zoneType;
            return o;
        }
    }
}
