// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResolverEndpoint {
    /**
     * @return (Updatable) The OCID of the owning compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    private @Nullable String endpointType;
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    private @Nullable String forwardingAddress;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    private @Nullable Boolean isForwarding;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    private @Nullable Boolean isListening;
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    private @Nullable String listeningAddress;
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    private @Nullable String name;
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    private @Nullable String self;
    /**
     * @return The current state of the resource.
     * 
     */
    private @Nullable String state;
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private @Nullable String timeUpdated;

    private ResolverEndpoint() {}
    /**
     * @return (Updatable) The OCID of the owning compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    public Optional<String> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    public Optional<String> forwardingAddress() {
        return Optional.ofNullable(this.forwardingAddress);
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    public Optional<Boolean> isForwarding() {
        return Optional.ofNullable(this.isForwarding);
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    public Optional<Boolean> isListening() {
        return Optional.ofNullable(this.isListening);
    }
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    public Optional<String> listeningAddress() {
        return Optional.ofNullable(this.listeningAddress);
    }
    /**
     * @return The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public Optional<String> self() {
        return Optional.ofNullable(this.self);
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String endpointType;
        private @Nullable String forwardingAddress;
        private @Nullable Boolean isForwarding;
        private @Nullable Boolean isListening;
        private @Nullable String listeningAddress;
        private @Nullable String name;
        private @Nullable String self;
        private @Nullable String state;
        private @Nullable String subnetId;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(ResolverEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.endpointType = defaults.endpointType;
    	      this.forwardingAddress = defaults.forwardingAddress;
    	      this.isForwarding = defaults.isForwarding;
    	      this.isListening = defaults.isListening;
    	      this.listeningAddress = defaults.listeningAddress;
    	      this.name = defaults.name;
    	      this.self = defaults.self;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder endpointType(@Nullable String endpointType) {
            this.endpointType = endpointType;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingAddress(@Nullable String forwardingAddress) {
            this.forwardingAddress = forwardingAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isForwarding(@Nullable Boolean isForwarding) {
            this.isForwarding = isForwarding;
            return this;
        }
        @CustomType.Setter
        public Builder isListening(@Nullable Boolean isListening) {
            this.isListening = isListening;
            return this;
        }
        @CustomType.Setter
        public Builder listeningAddress(@Nullable String listeningAddress) {
            this.listeningAddress = listeningAddress;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder self(@Nullable String self) {
            this.self = self;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public ResolverEndpoint build() {
            final var _resultValue = new ResolverEndpoint();
            _resultValue.compartmentId = compartmentId;
            _resultValue.endpointType = endpointType;
            _resultValue.forwardingAddress = forwardingAddress;
            _resultValue.isForwarding = isForwarding;
            _resultValue.isListening = isListening;
            _resultValue.listeningAddress = listeningAddress;
            _resultValue.name = name;
            _resultValue.self = self;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
