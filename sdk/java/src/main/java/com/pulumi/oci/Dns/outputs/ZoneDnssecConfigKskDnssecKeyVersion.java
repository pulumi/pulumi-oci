// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Dns.outputs.ZoneDnssecConfigKskDnssecKeyVersionDsData;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZoneDnssecConfigKskDnssecKeyVersion {
    /**
     * @return The signing algorithm used for the key.
     * 
     */
    private @Nullable String algorithm;
    /**
     * @return An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
     * 
     */
    private @Nullable List<ZoneDnssecConfigKskDnssecKeyVersionDsData> dsDatas;
    /**
     * @return The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
     * 
     */
    private @Nullable Integer keyTag;
    /**
     * @return The length of the corresponding private key in bytes, expressed as an integer.
     * 
     */
    private @Nullable Integer lengthInBytes;
    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
     * 
     */
    private @Nullable String predecessorDnssecKeyVersionUuid;
    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
     * 
     */
    private @Nullable String successorDnssecKeyVersionUuid;
    /**
     * @return The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
     * 
     */
    private @Nullable String timeActivated;
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
     * 
     */
    private @Nullable String timeExpired;
    /**
     * @return The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    private @Nullable String timeInactivated;
    /**
     * @return The date and time the key version was promoted expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timePromoted;
    /**
     * @return The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
     * 
     */
    private @Nullable String timePublished;
    /**
     * @return The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    private @Nullable String timeUnpublished;
    /**
     * @return The UUID of the `DnssecKeyVersion`.
     * 
     */
    private @Nullable String uuid;

    private ZoneDnssecConfigKskDnssecKeyVersion() {}
    /**
     * @return The signing algorithm used for the key.
     * 
     */
    public Optional<String> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    /**
     * @return An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
     * 
     */
    public List<ZoneDnssecConfigKskDnssecKeyVersionDsData> dsDatas() {
        return this.dsDatas == null ? List.of() : this.dsDatas;
    }
    /**
     * @return The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
     * 
     */
    public Optional<Integer> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }
    /**
     * @return The length of the corresponding private key in bytes, expressed as an integer.
     * 
     */
    public Optional<Integer> lengthInBytes() {
        return Optional.ofNullable(this.lengthInBytes);
    }
    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
     * 
     */
    public Optional<String> predecessorDnssecKeyVersionUuid() {
        return Optional.ofNullable(this.predecessorDnssecKeyVersionUuid);
    }
    /**
     * @return When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
     * 
     */
    public Optional<String> successorDnssecKeyVersionUuid() {
        return Optional.ofNullable(this.successorDnssecKeyVersionUuid);
    }
    /**
     * @return The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
     * 
     */
    public Optional<String> timeActivated() {
        return Optional.ofNullable(this.timeActivated);
    }
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`&#39;s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
     * 
     */
    public Optional<String> timeExpired() {
        return Optional.ofNullable(this.timeExpired);
    }
    /**
     * @return The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    public Optional<String> timeInactivated() {
        return Optional.ofNullable(this.timeInactivated);
    }
    /**
     * @return The date and time the key version was promoted expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timePromoted() {
        return Optional.ofNullable(this.timePromoted);
    }
    /**
     * @return The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
     * 
     */
    public Optional<String> timePublished() {
        return Optional.ofNullable(this.timePublished);
    }
    /**
     * @return The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
     * 
     */
    public Optional<String> timeUnpublished() {
        return Optional.ofNullable(this.timeUnpublished);
    }
    /**
     * @return The UUID of the `DnssecKeyVersion`.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZoneDnssecConfigKskDnssecKeyVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String algorithm;
        private @Nullable List<ZoneDnssecConfigKskDnssecKeyVersionDsData> dsDatas;
        private @Nullable Integer keyTag;
        private @Nullable Integer lengthInBytes;
        private @Nullable String predecessorDnssecKeyVersionUuid;
        private @Nullable String successorDnssecKeyVersionUuid;
        private @Nullable String timeActivated;
        private @Nullable String timeCreated;
        private @Nullable String timeExpired;
        private @Nullable String timeInactivated;
        private @Nullable String timePromoted;
        private @Nullable String timePublished;
        private @Nullable String timeUnpublished;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(ZoneDnssecConfigKskDnssecKeyVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.dsDatas = defaults.dsDatas;
    	      this.keyTag = defaults.keyTag;
    	      this.lengthInBytes = defaults.lengthInBytes;
    	      this.predecessorDnssecKeyVersionUuid = defaults.predecessorDnssecKeyVersionUuid;
    	      this.successorDnssecKeyVersionUuid = defaults.successorDnssecKeyVersionUuid;
    	      this.timeActivated = defaults.timeActivated;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpired = defaults.timeExpired;
    	      this.timeInactivated = defaults.timeInactivated;
    	      this.timePromoted = defaults.timePromoted;
    	      this.timePublished = defaults.timePublished;
    	      this.timeUnpublished = defaults.timeUnpublished;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable String algorithm) {

            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder dsDatas(@Nullable List<ZoneDnssecConfigKskDnssecKeyVersionDsData> dsDatas) {

            this.dsDatas = dsDatas;
            return this;
        }
        public Builder dsDatas(ZoneDnssecConfigKskDnssecKeyVersionDsData... dsDatas) {
            return dsDatas(List.of(dsDatas));
        }
        @CustomType.Setter
        public Builder keyTag(@Nullable Integer keyTag) {

            this.keyTag = keyTag;
            return this;
        }
        @CustomType.Setter
        public Builder lengthInBytes(@Nullable Integer lengthInBytes) {

            this.lengthInBytes = lengthInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder predecessorDnssecKeyVersionUuid(@Nullable String predecessorDnssecKeyVersionUuid) {

            this.predecessorDnssecKeyVersionUuid = predecessorDnssecKeyVersionUuid;
            return this;
        }
        @CustomType.Setter
        public Builder successorDnssecKeyVersionUuid(@Nullable String successorDnssecKeyVersionUuid) {

            this.successorDnssecKeyVersionUuid = successorDnssecKeyVersionUuid;
            return this;
        }
        @CustomType.Setter
        public Builder timeActivated(@Nullable String timeActivated) {

            this.timeActivated = timeActivated;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {

            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpired(@Nullable String timeExpired) {

            this.timeExpired = timeExpired;
            return this;
        }
        @CustomType.Setter
        public Builder timeInactivated(@Nullable String timeInactivated) {

            this.timeInactivated = timeInactivated;
            return this;
        }
        @CustomType.Setter
        public Builder timePromoted(@Nullable String timePromoted) {

            this.timePromoted = timePromoted;
            return this;
        }
        @CustomType.Setter
        public Builder timePublished(@Nullable String timePublished) {

            this.timePublished = timePublished;
            return this;
        }
        @CustomType.Setter
        public Builder timeUnpublished(@Nullable String timeUnpublished) {

            this.timeUnpublished = timeUnpublished;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public ZoneDnssecConfigKskDnssecKeyVersion build() {
            final var _resultValue = new ZoneDnssecConfigKskDnssecKeyVersion();
            _resultValue.algorithm = algorithm;
            _resultValue.dsDatas = dsDatas;
            _resultValue.keyTag = keyTag;
            _resultValue.lengthInBytes = lengthInBytes;
            _resultValue.predecessorDnssecKeyVersionUuid = predecessorDnssecKeyVersionUuid;
            _resultValue.successorDnssecKeyVersionUuid = successorDnssecKeyVersionUuid;
            _resultValue.timeActivated = timeActivated;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpired = timeExpired;
            _resultValue.timeInactivated = timeInactivated;
            _resultValue.timePromoted = timePromoted;
            _resultValue.timePublished = timePublished;
            _resultValue.timeUnpublished = timeUnpublished;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
