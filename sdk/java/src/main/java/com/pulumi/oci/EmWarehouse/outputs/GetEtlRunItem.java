// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.EmWarehouse.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEtlRunItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Data read by the dataflow run
     * 
     */
    private final String dataReadInBytes;
    /**
     * @return Data written by the dataflow run
     * 
     */
    private final String dataWritten;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Details of the lifecycle state
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return Dataflow run duration
     * 
     */
    private final String runDurationInMilliseconds;
    /**
     * @return The current state of the etlRun.
     * 
     */
    private final String state;
    /**
     * @return Time when the dataflow run was created
     * 
     */
    private final String timeCreated;
    /**
     * @return Time when the dataflow run was updated
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetEtlRunItem(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("dataReadInBytes") String dataReadInBytes,
        @CustomType.Parameter("dataWritten") String dataWritten,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("runDurationInMilliseconds") String runDurationInMilliseconds,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.dataReadInBytes = dataReadInBytes;
        this.dataWritten = dataWritten;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.lifecycleDetails = lifecycleDetails;
        this.runDurationInMilliseconds = runDurationInMilliseconds;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Data read by the dataflow run
     * 
     */
    public String dataReadInBytes() {
        return this.dataReadInBytes;
    }
    /**
     * @return Data written by the dataflow run
     * 
     */
    public String dataWritten() {
        return this.dataWritten;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Details of the lifecycle state
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Dataflow run duration
     * 
     */
    public String runDurationInMilliseconds() {
        return this.runDurationInMilliseconds;
    }
    /**
     * @return The current state of the etlRun.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when the dataflow run was created
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time when the dataflow run was updated
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEtlRunItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String dataReadInBytes;
        private String dataWritten;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String lifecycleDetails;
        private String runDurationInMilliseconds;
        private String state;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEtlRunItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dataReadInBytes = defaults.dataReadInBytes;
    	      this.dataWritten = defaults.dataWritten;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.runDurationInMilliseconds = defaults.runDurationInMilliseconds;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder dataReadInBytes(String dataReadInBytes) {
            this.dataReadInBytes = Objects.requireNonNull(dataReadInBytes);
            return this;
        }
        public Builder dataWritten(String dataWritten) {
            this.dataWritten = Objects.requireNonNull(dataWritten);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder runDurationInMilliseconds(String runDurationInMilliseconds) {
            this.runDurationInMilliseconds = Objects.requireNonNull(runDurationInMilliseconds);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetEtlRunItem build() {
            return new GetEtlRunItem(compartmentId, dataReadInBytes, dataWritten, definedTags, displayName, freeformTags, lifecycleDetails, runDurationInMilliseconds, state, timeCreated, timeUpdated);
        }
    }
}
