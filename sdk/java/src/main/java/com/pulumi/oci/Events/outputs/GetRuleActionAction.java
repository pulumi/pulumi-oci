// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Events.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRuleActionAction {
    /**
     * @return The action to perform if the condition in the rule matches an event.
     * * **ONS:** Send to an Oracle Notification Service topic.
     * * **OSS:** Send to a stream from Oracle Streaming Service.
     * * **FAAS:** Send to an Oracle Functions Service endpoint.
     * 
     */
    private String actionType;
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and you can change it. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Function hosted by Oracle Functions Service.
     * 
     */
    private String functionId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    private String id;
    /**
     * @return Whether or not this rule is currently enabled.  Example: `true`
     * 
     */
    private Boolean isEnabled;
    /**
     * @return A message generated by the Events service about the current state of this rule.
     * 
     */
    private String lifecycleMessage;
    /**
     * @return The current state of the rule.
     * 
     */
    private String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream to which messages are delivered.
     * 
     */
    private String streamId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic to which messages are delivered.
     * 
     */
    private String topicId;

    private GetRuleActionAction() {}
    /**
     * @return The action to perform if the condition in the rule matches an event.
     * * **ONS:** Send to an Oracle Notification Service topic.
     * * **OSS:** Send to a stream from Oracle Streaming Service.
     * * **FAAS:** Send to an Oracle Functions Service endpoint.
     * 
     */
    public String actionType() {
        return this.actionType;
    }
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and you can change it. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Function hosted by Oracle Functions Service.
     * 
     */
    public String functionId() {
        return this.functionId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not this rule is currently enabled.  Example: `true`
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return A message generated by the Events service about the current state of this rule.
     * 
     */
    public String lifecycleMessage() {
        return this.lifecycleMessage;
    }
    /**
     * @return The current state of the rule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream to which messages are delivered.
     * 
     */
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic to which messages are delivered.
     * 
     */
    public String topicId() {
        return this.topicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleActionAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String actionType;
        private String description;
        private String functionId;
        private String id;
        private Boolean isEnabled;
        private String lifecycleMessage;
        private String state;
        private String streamId;
        private String topicId;
        public Builder() {}
        public Builder(GetRuleActionAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionType = defaults.actionType;
    	      this.description = defaults.description;
    	      this.functionId = defaults.functionId;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.lifecycleMessage = defaults.lifecycleMessage;
    	      this.state = defaults.state;
    	      this.streamId = defaults.streamId;
    	      this.topicId = defaults.topicId;
        }

        @CustomType.Setter
        public Builder actionType(String actionType) {
            if (actionType == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "actionType");
            }
            this.actionType = actionType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder functionId(String functionId) {
            if (functionId == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "functionId");
            }
            this.functionId = functionId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleMessage(String lifecycleMessage) {
            if (lifecycleMessage == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "lifecycleMessage");
            }
            this.lifecycleMessage = lifecycleMessage;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            if (streamId == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "streamId");
            }
            this.streamId = streamId;
            return this;
        }
        @CustomType.Setter
        public Builder topicId(String topicId) {
            if (topicId == null) {
              throw new MissingRequiredPropertyException("GetRuleActionAction", "topicId");
            }
            this.topicId = topicId;
            return this;
        }
        public GetRuleActionAction build() {
            final var _resultValue = new GetRuleActionAction();
            _resultValue.actionType = actionType;
            _resultValue.description = description;
            _resultValue.functionId = functionId;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.lifecycleMessage = lifecycleMessage;
            _resultValue.state = state;
            _resultValue.streamId = streamId;
            _resultValue.topicId = topicId;
            return _resultValue;
        }
    }
}
