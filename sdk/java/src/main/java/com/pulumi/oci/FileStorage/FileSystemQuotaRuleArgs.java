// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemQuotaRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemQuotaRuleArgs Empty = new FileSystemQuotaRuleArgs();

    @Import(name="areViolatorsOnly")
    private @Nullable Output<Boolean> areViolatorsOnly;

    public Optional<Output<Boolean>> areViolatorsOnly() {
        return Optional.ofNullable(this.areViolatorsOnly);
    }

    /**
     * (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
     * 
     */
    @Import(name="fileSystemId", required=true)
    private Output<String> fileSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
     * 
     */
    public Output<String> fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is true, the quota rule will be enforced so the write will be blocked if usage exceeds the hard quota limit. If `isHardQuota` is false, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
     * 
     */
    @Import(name="isHardQuota", required=true)
    private Output<Boolean> isHardQuota;

    /**
     * @return The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is true, the quota rule will be enforced so the write will be blocked if usage exceeds the hard quota limit. If `isHardQuota` is false, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
     * 
     */
    public Output<Boolean> isHardQuota() {
        return this.isHardQuota;
    }

    /**
     * An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
     * 
     */
    @Import(name="principalId")
    private @Nullable Output<Integer> principalId;

    /**
     * @return An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
     * 
     */
    public Optional<Output<Integer>> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * The type of the owner of this quota rule and usage.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return The type of the owner of this quota rule and usage.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    /**
     * (Updatable) The value of the quota rule. The unit is Gigabyte.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="quotaLimitInGigabytes", required=true)
    private Output<Integer> quotaLimitInGigabytes;

    /**
     * @return (Updatable) The value of the quota rule. The unit is Gigabyte.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Integer> quotaLimitInGigabytes() {
        return this.quotaLimitInGigabytes;
    }

    @Import(name="quotaRuleId")
    private @Nullable Output<String> quotaRuleId;

    public Optional<Output<String>> quotaRuleId() {
        return Optional.ofNullable(this.quotaRuleId);
    }

    private FileSystemQuotaRuleArgs() {}

    private FileSystemQuotaRuleArgs(FileSystemQuotaRuleArgs $) {
        this.areViolatorsOnly = $.areViolatorsOnly;
        this.displayName = $.displayName;
        this.fileSystemId = $.fileSystemId;
        this.isHardQuota = $.isHardQuota;
        this.principalId = $.principalId;
        this.principalType = $.principalType;
        this.quotaLimitInGigabytes = $.quotaLimitInGigabytes;
        this.quotaRuleId = $.quotaRuleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemQuotaRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemQuotaRuleArgs $;

        public Builder() {
            $ = new FileSystemQuotaRuleArgs();
        }

        public Builder(FileSystemQuotaRuleArgs defaults) {
            $ = new FileSystemQuotaRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder areViolatorsOnly(@Nullable Output<Boolean> areViolatorsOnly) {
            $.areViolatorsOnly = areViolatorsOnly;
            return this;
        }

        public Builder areViolatorsOnly(Boolean areViolatorsOnly) {
            return areViolatorsOnly(Output.of(areViolatorsOnly));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fileSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param isHardQuota The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is true, the quota rule will be enforced so the write will be blocked if usage exceeds the hard quota limit. If `isHardQuota` is false, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
         * 
         * @return builder
         * 
         */
        public Builder isHardQuota(Output<Boolean> isHardQuota) {
            $.isHardQuota = isHardQuota;
            return this;
        }

        /**
         * @param isHardQuota The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is true, the quota rule will be enforced so the write will be blocked if usage exceeds the hard quota limit. If `isHardQuota` is false, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
         * 
         * @return builder
         * 
         */
        public Builder isHardQuota(Boolean isHardQuota) {
            return isHardQuota(Output.of(isHardQuota));
        }

        /**
         * @param principalId An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable Output<Integer> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Integer principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalType The type of the owner of this quota rule and usage.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The type of the owner of this quota rule and usage.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param quotaLimitInGigabytes (Updatable) The value of the quota rule. The unit is Gigabyte.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder quotaLimitInGigabytes(Output<Integer> quotaLimitInGigabytes) {
            $.quotaLimitInGigabytes = quotaLimitInGigabytes;
            return this;
        }

        /**
         * @param quotaLimitInGigabytes (Updatable) The value of the quota rule. The unit is Gigabyte.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder quotaLimitInGigabytes(Integer quotaLimitInGigabytes) {
            return quotaLimitInGigabytes(Output.of(quotaLimitInGigabytes));
        }

        public Builder quotaRuleId(@Nullable Output<String> quotaRuleId) {
            $.quotaRuleId = quotaRuleId;
            return this;
        }

        public Builder quotaRuleId(String quotaRuleId) {
            return quotaRuleId(Output.of(quotaRuleId));
        }

        public FileSystemQuotaRuleArgs build() {
            if ($.fileSystemId == null) {
                throw new MissingRequiredPropertyException("FileSystemQuotaRuleArgs", "fileSystemId");
            }
            if ($.isHardQuota == null) {
                throw new MissingRequiredPropertyException("FileSystemQuotaRuleArgs", "isHardQuota");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("FileSystemQuotaRuleArgs", "principalType");
            }
            if ($.quotaLimitInGigabytes == null) {
                throw new MissingRequiredPropertyException("FileSystemQuotaRuleArgs", "quotaLimitInGigabytes");
            }
            return $;
        }
    }

}
