// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilesystemSnapshotPolicyScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilesystemSnapshotPolicyScheduleArgs Empty = new FilesystemSnapshotPolicyScheduleArgs();

    /**
     * (Updatable) The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return (Updatable) The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * (Updatable) The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<String> dayOfWeek;

    /**
     * @return (Updatable) The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    public Optional<Output<String>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * (Updatable) The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, the system chooses a value at creation time.
     * 
     */
    @Import(name="hourOfDay")
    private @Nullable Output<Integer> hourOfDay;

    /**
     * @return (Updatable) The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, the system chooses a value at creation time.
     * 
     */
    public Optional<Output<Integer>> hourOfDay() {
        return Optional.ofNullable(this.hourOfDay);
    }

    /**
     * (Updatable) The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    @Import(name="month")
    private @Nullable Output<String> month;

    /**
     * @return (Updatable) The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
     * 
     */
    public Optional<Output<String>> month() {
        return Optional.ofNullable(this.month);
    }

    /**
     * (Updatable) The frequency of scheduled snapshots.
     * 
     */
    @Import(name="period", required=true)
    private Output<String> period;

    /**
     * @return (Updatable) The frequency of scheduled snapshots.
     * 
     */
    public Output<String> period() {
        return this.period;
    }

    /**
     * (Updatable) The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    @Import(name="retentionDurationInSeconds")
    private @Nullable Output<String> retentionDurationInSeconds;

    /**
     * @return (Updatable) The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    public Optional<Output<String>> retentionDurationInSeconds() {
        return Optional.ofNullable(this.retentionDurationInSeconds);
    }

    /**
     * (Updatable) A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    @Import(name="schedulePrefix")
    private @Nullable Output<String> schedulePrefix;

    /**
     * @return (Updatable) A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    public Optional<Output<String>> schedulePrefix() {
        return Optional.ofNullable(this.schedulePrefix);
    }

    /**
     * (Updatable) The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    @Import(name="timeScheduleStart")
    private @Nullable Output<String> timeScheduleStart;

    /**
     * @return (Updatable) The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    public Optional<Output<String>> timeScheduleStart() {
        return Optional.ofNullable(this.timeScheduleStart);
    }

    /**
     * (Updatable) Time zone used for scheduling the snapshot.
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    /**
     * @return (Updatable) Time zone used for scheduling the snapshot.
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    private FilesystemSnapshotPolicyScheduleArgs() {}

    private FilesystemSnapshotPolicyScheduleArgs(FilesystemSnapshotPolicyScheduleArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
        this.hourOfDay = $.hourOfDay;
        this.month = $.month;
        this.period = $.period;
        this.retentionDurationInSeconds = $.retentionDurationInSeconds;
        this.schedulePrefix = $.schedulePrefix;
        this.timeScheduleStart = $.timeScheduleStart;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilesystemSnapshotPolicyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilesystemSnapshotPolicyScheduleArgs $;

        public Builder() {
            $ = new FilesystemSnapshotPolicyScheduleArgs();
        }

        public Builder(FilesystemSnapshotPolicyScheduleArgs defaults) {
            $ = new FilesystemSnapshotPolicyScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth (Updatable) The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth (Updatable) The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param dayOfWeek (Updatable) The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek (Updatable) The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param hourOfDay (Updatable) The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(@Nullable Output<Integer> hourOfDay) {
            $.hourOfDay = hourOfDay;
            return this;
        }

        /**
         * @param hourOfDay (Updatable) The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(Integer hourOfDay) {
            return hourOfDay(Output.of(hourOfDay));
        }

        /**
         * @param month (Updatable) The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder month(@Nullable Output<String> month) {
            $.month = month;
            return this;
        }

        /**
         * @param month (Updatable) The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules. If not set, the system chooses a value at creation time.
         * 
         * @return builder
         * 
         */
        public Builder month(String month) {
            return month(Output.of(month));
        }

        /**
         * @param period (Updatable) The frequency of scheduled snapshots.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period (Updatable) The frequency of scheduled snapshots.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param retentionDurationInSeconds (Updatable) The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
         * 
         * @return builder
         * 
         */
        public Builder retentionDurationInSeconds(@Nullable Output<String> retentionDurationInSeconds) {
            $.retentionDurationInSeconds = retentionDurationInSeconds;
            return this;
        }

        /**
         * @param retentionDurationInSeconds (Updatable) The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
         * 
         * @return builder
         * 
         */
        public Builder retentionDurationInSeconds(String retentionDurationInSeconds) {
            return retentionDurationInSeconds(Output.of(retentionDurationInSeconds));
        }

        /**
         * @param schedulePrefix (Updatable) A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
         * 
         * @return builder
         * 
         */
        public Builder schedulePrefix(@Nullable Output<String> schedulePrefix) {
            $.schedulePrefix = schedulePrefix;
            return this;
        }

        /**
         * @param schedulePrefix (Updatable) A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
         * 
         * @return builder
         * 
         */
        public Builder schedulePrefix(String schedulePrefix) {
            return schedulePrefix(Output.of(schedulePrefix));
        }

        /**
         * @param timeScheduleStart (Updatable) The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
         * 
         * @return builder
         * 
         */
        public Builder timeScheduleStart(@Nullable Output<String> timeScheduleStart) {
            $.timeScheduleStart = timeScheduleStart;
            return this;
        }

        /**
         * @param timeScheduleStart (Updatable) The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
         * 
         * @return builder
         * 
         */
        public Builder timeScheduleStart(String timeScheduleStart) {
            return timeScheduleStart(Output.of(timeScheduleStart));
        }

        /**
         * @param timeZone (Updatable) Time zone used for scheduling the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone (Updatable) Time zone used for scheduling the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public FilesystemSnapshotPolicyScheduleArgs build() {
            if ($.period == null) {
                throw new MissingRequiredPropertyException("FilesystemSnapshotPolicyScheduleArgs", "period");
            }
            if ($.timeZone == null) {
                throw new MissingRequiredPropertyException("FilesystemSnapshotPolicyScheduleArgs", "timeZone");
            }
            return $;
        }
    }

}
