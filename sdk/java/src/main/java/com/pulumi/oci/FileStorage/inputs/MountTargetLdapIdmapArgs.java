// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MountTargetLdapIdmapArgs extends com.pulumi.resources.ResourceArgs {

    public static final MountTargetLdapIdmapArgs Empty = new MountTargetLdapIdmapArgs();

    /**
     * (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    @Import(name="cacheLifetimeSeconds")
    private @Nullable Output<Integer> cacheLifetimeSeconds;

    /**
     * @return (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    public Optional<Output<Integer>> cacheLifetimeSeconds() {
        return Optional.ofNullable(this.cacheLifetimeSeconds);
    }

    /**
     * (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    @Import(name="cacheRefreshIntervalSeconds")
    private @Nullable Output<Integer> cacheRefreshIntervalSeconds;

    /**
     * @return (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    public Optional<Output<Integer>> cacheRefreshIntervalSeconds() {
        return Optional.ofNullable(this.cacheRefreshIntervalSeconds);
    }

    /**
     * (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    @Import(name="groupSearchBase")
    private @Nullable Output<String> groupSearchBase;

    /**
     * @return (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    public Optional<Output<String>> groupSearchBase() {
        return Optional.ofNullable(this.groupSearchBase);
    }

    /**
     * (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    @Import(name="negativeCacheLifetimeSeconds")
    private @Nullable Output<Integer> negativeCacheLifetimeSeconds;

    /**
     * @return (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    public Optional<Output<Integer>> negativeCacheLifetimeSeconds() {
        return Optional.ofNullable(this.negativeCacheLifetimeSeconds);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    @Import(name="outboundConnector1id")
    private @Nullable Output<String> outboundConnector1id;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    public Optional<Output<String>> outboundConnector1id() {
        return Optional.ofNullable(this.outboundConnector1id);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    @Import(name="outboundConnector2id")
    private @Nullable Output<String> outboundConnector2id;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    public Optional<Output<String>> outboundConnector2id() {
        return Optional.ofNullable(this.outboundConnector2id);
    }

    /**
     * (Updatable) Schema type of the LDAP account.
     * 
     */
    @Import(name="schemaType")
    private @Nullable Output<String> schemaType;

    /**
     * @return (Updatable) Schema type of the LDAP account.
     * 
     */
    public Optional<Output<String>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    /**
     * (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    @Import(name="userSearchBase")
    private @Nullable Output<String> userSearchBase;

    /**
     * @return (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    public Optional<Output<String>> userSearchBase() {
        return Optional.ofNullable(this.userSearchBase);
    }

    private MountTargetLdapIdmapArgs() {}

    private MountTargetLdapIdmapArgs(MountTargetLdapIdmapArgs $) {
        this.cacheLifetimeSeconds = $.cacheLifetimeSeconds;
        this.cacheRefreshIntervalSeconds = $.cacheRefreshIntervalSeconds;
        this.groupSearchBase = $.groupSearchBase;
        this.negativeCacheLifetimeSeconds = $.negativeCacheLifetimeSeconds;
        this.outboundConnector1id = $.outboundConnector1id;
        this.outboundConnector2id = $.outboundConnector2id;
        this.schemaType = $.schemaType;
        this.userSearchBase = $.userSearchBase;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MountTargetLdapIdmapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MountTargetLdapIdmapArgs $;

        public Builder() {
            $ = new MountTargetLdapIdmapArgs();
        }

        public Builder(MountTargetLdapIdmapArgs defaults) {
            $ = new MountTargetLdapIdmapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheLifetimeSeconds (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
         * 
         * @return builder
         * 
         */
        public Builder cacheLifetimeSeconds(@Nullable Output<Integer> cacheLifetimeSeconds) {
            $.cacheLifetimeSeconds = cacheLifetimeSeconds;
            return this;
        }

        /**
         * @param cacheLifetimeSeconds (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
         * 
         * @return builder
         * 
         */
        public Builder cacheLifetimeSeconds(Integer cacheLifetimeSeconds) {
            return cacheLifetimeSeconds(Output.of(cacheLifetimeSeconds));
        }

        /**
         * @param cacheRefreshIntervalSeconds (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
         * 
         * @return builder
         * 
         */
        public Builder cacheRefreshIntervalSeconds(@Nullable Output<Integer> cacheRefreshIntervalSeconds) {
            $.cacheRefreshIntervalSeconds = cacheRefreshIntervalSeconds;
            return this;
        }

        /**
         * @param cacheRefreshIntervalSeconds (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
         * 
         * @return builder
         * 
         */
        public Builder cacheRefreshIntervalSeconds(Integer cacheRefreshIntervalSeconds) {
            return cacheRefreshIntervalSeconds(Output.of(cacheRefreshIntervalSeconds));
        }

        /**
         * @param groupSearchBase (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
         * 
         * @return builder
         * 
         */
        public Builder groupSearchBase(@Nullable Output<String> groupSearchBase) {
            $.groupSearchBase = groupSearchBase;
            return this;
        }

        /**
         * @param groupSearchBase (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
         * 
         * @return builder
         * 
         */
        public Builder groupSearchBase(String groupSearchBase) {
            return groupSearchBase(Output.of(groupSearchBase));
        }

        /**
         * @param negativeCacheLifetimeSeconds (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
         * 
         * @return builder
         * 
         */
        public Builder negativeCacheLifetimeSeconds(@Nullable Output<Integer> negativeCacheLifetimeSeconds) {
            $.negativeCacheLifetimeSeconds = negativeCacheLifetimeSeconds;
            return this;
        }

        /**
         * @param negativeCacheLifetimeSeconds (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
         * 
         * @return builder
         * 
         */
        public Builder negativeCacheLifetimeSeconds(Integer negativeCacheLifetimeSeconds) {
            return negativeCacheLifetimeSeconds(Output.of(negativeCacheLifetimeSeconds));
        }

        /**
         * @param outboundConnector1id (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder outboundConnector1id(@Nullable Output<String> outboundConnector1id) {
            $.outboundConnector1id = outboundConnector1id;
            return this;
        }

        /**
         * @param outboundConnector1id (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder outboundConnector1id(String outboundConnector1id) {
            return outboundConnector1id(Output.of(outboundConnector1id));
        }

        /**
         * @param outboundConnector2id (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder outboundConnector2id(@Nullable Output<String> outboundConnector2id) {
            $.outboundConnector2id = outboundConnector2id;
            return this;
        }

        /**
         * @param outboundConnector2id (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder outboundConnector2id(String outboundConnector2id) {
            return outboundConnector2id(Output.of(outboundConnector2id));
        }

        /**
         * @param schemaType (Updatable) Schema type of the LDAP account.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(@Nullable Output<String> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType (Updatable) Schema type of the LDAP account.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(String schemaType) {
            return schemaType(Output.of(schemaType));
        }

        /**
         * @param userSearchBase (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
         * 
         * @return builder
         * 
         */
        public Builder userSearchBase(@Nullable Output<String> userSearchBase) {
            $.userSearchBase = userSearchBase;
            return this;
        }

        /**
         * @param userSearchBase (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
         * 
         * @return builder
         * 
         */
        public Builder userSearchBase(String userSearchBase) {
            return userSearchBase(Output.of(userSearchBase));
        }

        public MountTargetLdapIdmapArgs build() {
            return $;
        }
    }

}
