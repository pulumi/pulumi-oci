// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExportExportOption {
    /**
     * @return (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
     * 
     */
    private @Nullable String access;
    /**
     * @return (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    private @Nullable String anonymousGid;
    /**
     * @return (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    private @Nullable String anonymousUid;
    /**
     * @return (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    private @Nullable String identitySquash;
    /**
     * @return (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    private @Nullable Boolean requirePrivilegedSourcePort;
    /**
     * @return (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    private String source;

    private ExportExportOption() {}
    /**
     * @return (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
     * 
     */
    public Optional<String> access() {
        return Optional.ofNullable(this.access);
    }
    /**
     * @return (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    public Optional<String> anonymousGid() {
        return Optional.ofNullable(this.anonymousGid);
    }
    /**
     * @return (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    public Optional<String> anonymousUid() {
        return Optional.ofNullable(this.anonymousUid);
    }
    /**
     * @return (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    public Optional<String> identitySquash() {
        return Optional.ofNullable(this.identitySquash);
    }
    /**
     * @return (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    public Optional<Boolean> requirePrivilegedSourcePort() {
        return Optional.ofNullable(this.requirePrivilegedSourcePort);
    }
    /**
     * @return (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExportExportOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String access;
        private @Nullable String anonymousGid;
        private @Nullable String anonymousUid;
        private @Nullable String identitySquash;
        private @Nullable Boolean requirePrivilegedSourcePort;
        private String source;
        public Builder() {}
        public Builder(ExportExportOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.anonymousGid = defaults.anonymousGid;
    	      this.anonymousUid = defaults.anonymousUid;
    	      this.identitySquash = defaults.identitySquash;
    	      this.requirePrivilegedSourcePort = defaults.requirePrivilegedSourcePort;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder access(@Nullable String access) {
            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder anonymousGid(@Nullable String anonymousGid) {
            this.anonymousGid = anonymousGid;
            return this;
        }
        @CustomType.Setter
        public Builder anonymousUid(@Nullable String anonymousUid) {
            this.anonymousUid = anonymousUid;
            return this;
        }
        @CustomType.Setter
        public Builder identitySquash(@Nullable String identitySquash) {
            this.identitySquash = identitySquash;
            return this;
        }
        @CustomType.Setter
        public Builder requirePrivilegedSourcePort(@Nullable Boolean requirePrivilegedSourcePort) {
            this.requirePrivilegedSourcePort = requirePrivilegedSourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public ExportExportOption build() {
            final var o = new ExportExportOption();
            o.access = access;
            o.anonymousGid = anonymousGid;
            o.anonymousUid = anonymousUid;
            o.identitySquash = identitySquash;
            o.requirePrivilegedSourcePort = requirePrivilegedSourcePort;
            o.source = source;
            return o;
        }
    }
}
