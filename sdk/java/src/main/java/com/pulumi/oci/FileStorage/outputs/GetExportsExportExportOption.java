// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExportsExportExportOption {
    /**
     * @return Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_WRITE`.
     * 
     */
    private String access;
    /**
     * @return Array of allowed NFS authentication types.
     * 
     */
    private List<String> allowedAuths;
    /**
     * @return GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    private String anonymousGid;
    /**
     * @return UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    private String anonymousUid;
    /**
     * @return Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    private String identitySquash;
    /**
     * @return Whether or not to enable anonymous access to the file system through this export in cases where a user isn&#39;t found in the LDAP server used for ID mapping. If true, and the user is not found in the LDAP directory, the operation uses the Squash UID and Squash GID.
     * 
     */
    private Boolean isAnonymousAccessAllowed;
    /**
     * @return If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    private Boolean requirePrivilegedSourcePort;
    /**
     * @return Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    private String source;

    private GetExportsExportExportOption() {}
    /**
     * @return Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_WRITE`.
     * 
     */
    public String access() {
        return this.access;
    }
    /**
     * @return Array of allowed NFS authentication types.
     * 
     */
    public List<String> allowedAuths() {
        return this.allowedAuths;
    }
    /**
     * @return GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    public String anonymousGid() {
        return this.anonymousGid;
    }
    /**
     * @return UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    public String anonymousUid() {
        return this.anonymousUid;
    }
    /**
     * @return Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    public String identitySquash() {
        return this.identitySquash;
    }
    /**
     * @return Whether or not to enable anonymous access to the file system through this export in cases where a user isn&#39;t found in the LDAP server used for ID mapping. If true, and the user is not found in the LDAP directory, the operation uses the Squash UID and Squash GID.
     * 
     */
    public Boolean isAnonymousAccessAllowed() {
        return this.isAnonymousAccessAllowed;
    }
    /**
     * @return If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    public Boolean requirePrivilegedSourcePort() {
        return this.requirePrivilegedSourcePort;
    }
    /**
     * @return Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExportsExportExportOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String access;
        private List<String> allowedAuths;
        private String anonymousGid;
        private String anonymousUid;
        private String identitySquash;
        private Boolean isAnonymousAccessAllowed;
        private Boolean requirePrivilegedSourcePort;
        private String source;
        public Builder() {}
        public Builder(GetExportsExportExportOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.allowedAuths = defaults.allowedAuths;
    	      this.anonymousGid = defaults.anonymousGid;
    	      this.anonymousUid = defaults.anonymousUid;
    	      this.identitySquash = defaults.identitySquash;
    	      this.isAnonymousAccessAllowed = defaults.isAnonymousAccessAllowed;
    	      this.requirePrivilegedSourcePort = defaults.requirePrivilegedSourcePort;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder access(String access) {
            if (access == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "access");
            }
            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder allowedAuths(List<String> allowedAuths) {
            if (allowedAuths == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "allowedAuths");
            }
            this.allowedAuths = allowedAuths;
            return this;
        }
        public Builder allowedAuths(String... allowedAuths) {
            return allowedAuths(List.of(allowedAuths));
        }
        @CustomType.Setter
        public Builder anonymousGid(String anonymousGid) {
            if (anonymousGid == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "anonymousGid");
            }
            this.anonymousGid = anonymousGid;
            return this;
        }
        @CustomType.Setter
        public Builder anonymousUid(String anonymousUid) {
            if (anonymousUid == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "anonymousUid");
            }
            this.anonymousUid = anonymousUid;
            return this;
        }
        @CustomType.Setter
        public Builder identitySquash(String identitySquash) {
            if (identitySquash == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "identitySquash");
            }
            this.identitySquash = identitySquash;
            return this;
        }
        @CustomType.Setter
        public Builder isAnonymousAccessAllowed(Boolean isAnonymousAccessAllowed) {
            if (isAnonymousAccessAllowed == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "isAnonymousAccessAllowed");
            }
            this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder requirePrivilegedSourcePort(Boolean requirePrivilegedSourcePort) {
            if (requirePrivilegedSourcePort == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "requirePrivilegedSourcePort");
            }
            this.requirePrivilegedSourcePort = requirePrivilegedSourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetExportsExportExportOption", "source");
            }
            this.source = source;
            return this;
        }
        public GetExportsExportExportOption build() {
            final var _resultValue = new GetExportsExportExportOption();
            _resultValue.access = access;
            _resultValue.allowedAuths = allowedAuths;
            _resultValue.anonymousGid = anonymousGid;
            _resultValue.anonymousUid = anonymousUid;
            _resultValue.identitySquash = identitySquash;
            _resultValue.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            _resultValue.requirePrivilegedSourcePort = requirePrivilegedSourcePort;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
