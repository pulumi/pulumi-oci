// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFileSystemQuotaRulesQuotaRule {
    /**
     * @return An option to only display the users or groups that violate their quota rules. If `areViolatorsOnly` is false, the list result will display all the quota and usage report. If `areViolatorsOnly` is true, the list result will only display the quota and usage report for the users or groups that violate their quota rules.
     * 
     */
    private Boolean areViolatorsOnly;
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
     * 
     */
    private String fileSystemId;
    /**
     * @return The identifier of the quota rule. It is the base64 encoded string of the tuple &lt;principalId, principalType, isHardQuota&gt;.
     * 
     */
    private String id;
    /**
     * @return The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is false, the quota rule will be enforced so the usage cannot exceed the hard quota limit. If `isHardQuota` is true, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
     * 
     */
    private Boolean isHardQuota;
    /**
     * @return An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
     * 
     */
    private Integer principalId;
    /**
     * @return The type of the owner of this quota rule and usage.
     * 
     */
    private String principalType;
    /**
     * @return The value of the quota rule. The unit is Gigabyte.
     * 
     */
    private Integer quotaLimitInGigabytes;
    private String quotaRuleId;
    /**
     * @return The date and time the quota rule was started, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the quota rule was last updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeUpdated;

    private GetFileSystemQuotaRulesQuotaRule() {}
    /**
     * @return An option to only display the users or groups that violate their quota rules. If `areViolatorsOnly` is false, the list result will display all the quota and usage report. If `areViolatorsOnly` is true, the list result will only display the quota and usage report for the users or groups that violate their quota rules.
     * 
     */
    public Boolean areViolatorsOnly() {
        return this.areViolatorsOnly;
    }
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information. Example: `UserXYZ&#39;s quota`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return The identifier of the quota rule. It is the base64 encoded string of the tuple &lt;principalId, principalType, isHardQuota&gt;.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The flag is an identifier to tell whether the quota rule will be enforced. If `isHardQuota` is false, the quota rule will be enforced so the usage cannot exceed the hard quota limit. If `isHardQuota` is true, usage can exceed the soft quota limit. An alarm or notification will be sent to the customer, if the specific usage exceeds.
     * 
     */
    public Boolean isHardQuota() {
        return this.isHardQuota;
    }
    /**
     * @return An identifier for the owner of this usage and quota rule. Unix-like operating systems use this integer value to identify a user or group to manage access control.
     * 
     */
    public Integer principalId() {
        return this.principalId;
    }
    /**
     * @return The type of the owner of this quota rule and usage.
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return The value of the quota rule. The unit is Gigabyte.
     * 
     */
    public Integer quotaLimitInGigabytes() {
        return this.quotaLimitInGigabytes;
    }
    public String quotaRuleId() {
        return this.quotaRuleId;
    }
    /**
     * @return The date and time the quota rule was started, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the quota rule was last updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileSystemQuotaRulesQuotaRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean areViolatorsOnly;
        private String displayName;
        private String fileSystemId;
        private String id;
        private Boolean isHardQuota;
        private Integer principalId;
        private String principalType;
        private Integer quotaLimitInGigabytes;
        private String quotaRuleId;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetFileSystemQuotaRulesQuotaRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areViolatorsOnly = defaults.areViolatorsOnly;
    	      this.displayName = defaults.displayName;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.isHardQuota = defaults.isHardQuota;
    	      this.principalId = defaults.principalId;
    	      this.principalType = defaults.principalType;
    	      this.quotaLimitInGigabytes = defaults.quotaLimitInGigabytes;
    	      this.quotaRuleId = defaults.quotaRuleId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder areViolatorsOnly(Boolean areViolatorsOnly) {
            if (areViolatorsOnly == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "areViolatorsOnly");
            }
            this.areViolatorsOnly = areViolatorsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isHardQuota(Boolean isHardQuota) {
            if (isHardQuota == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "isHardQuota");
            }
            this.isHardQuota = isHardQuota;
            return this;
        }
        @CustomType.Setter
        public Builder principalId(Integer principalId) {
            if (principalId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "principalId");
            }
            this.principalId = principalId;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            if (principalType == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "principalType");
            }
            this.principalType = principalType;
            return this;
        }
        @CustomType.Setter
        public Builder quotaLimitInGigabytes(Integer quotaLimitInGigabytes) {
            if (quotaLimitInGigabytes == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "quotaLimitInGigabytes");
            }
            this.quotaLimitInGigabytes = quotaLimitInGigabytes;
            return this;
        }
        @CustomType.Setter
        public Builder quotaRuleId(String quotaRuleId) {
            if (quotaRuleId == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "quotaRuleId");
            }
            this.quotaRuleId = quotaRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetFileSystemQuotaRulesQuotaRule", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetFileSystemQuotaRulesQuotaRule build() {
            final var _resultValue = new GetFileSystemQuotaRulesQuotaRule();
            _resultValue.areViolatorsOnly = areViolatorsOnly;
            _resultValue.displayName = displayName;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.id = id;
            _resultValue.isHardQuota = isHardQuota;
            _resultValue.principalId = principalId;
            _resultValue.principalType = principalType;
            _resultValue.quotaLimitInGigabytes = quotaLimitInGigabytes;
            _resultValue.quotaRuleId = quotaRuleId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
