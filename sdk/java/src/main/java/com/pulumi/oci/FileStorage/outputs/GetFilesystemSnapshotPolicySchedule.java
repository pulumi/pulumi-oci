// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFilesystemSnapshotPolicySchedule {
    /**
     * @return The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules.
     * 
     */
    private @Nullable Integer dayOfMonth;
    /**
     * @return The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules.
     * 
     */
    private @Nullable String dayOfWeek;
    /**
     * @return The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, a value will be chosen at creation time.
     * 
     */
    private @Nullable Integer hourOfDay;
    /**
     * @return The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules.
     * 
     */
    private @Nullable String month;
    /**
     * @return The frequency of scheduled snapshots.
     * 
     */
    private @Nullable String period;
    /**
     * @return The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    private @Nullable String retentionDurationInSeconds;
    /**
     * @return A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    private @Nullable String schedulePrefix;
    /**
     * @return The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    private @Nullable String timeScheduleStart;
    /**
     * @return Time zone used for scheduling the snapshot.
     * 
     */
    private @Nullable String timeZone;

    private GetFilesystemSnapshotPolicySchedule() {}
    /**
     * @return The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules.
     * 
     */
    public Optional<Integer> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }
    /**
     * @return The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules.
     * 
     */
    public Optional<String> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }
    /**
     * @return The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, a value will be chosen at creation time.
     * 
     */
    public Optional<Integer> hourOfDay() {
        return Optional.ofNullable(this.hourOfDay);
    }
    /**
     * @return The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules.
     * 
     */
    public Optional<String> month() {
        return Optional.ofNullable(this.month);
    }
    /**
     * @return The frequency of scheduled snapshots.
     * 
     */
    public Optional<String> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    public Optional<String> retentionDurationInSeconds() {
        return Optional.ofNullable(this.retentionDurationInSeconds);
    }
    /**
     * @return A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    public Optional<String> schedulePrefix() {
        return Optional.ofNullable(this.schedulePrefix);
    }
    /**
     * @return The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    public Optional<String> timeScheduleStart() {
        return Optional.ofNullable(this.timeScheduleStart);
    }
    /**
     * @return Time zone used for scheduling the snapshot.
     * 
     */
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFilesystemSnapshotPolicySchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dayOfMonth;
        private @Nullable String dayOfWeek;
        private @Nullable Integer hourOfDay;
        private @Nullable String month;
        private @Nullable String period;
        private @Nullable String retentionDurationInSeconds;
        private @Nullable String schedulePrefix;
        private @Nullable String timeScheduleStart;
        private @Nullable String timeZone;
        public Builder() {}
        public Builder(GetFilesystemSnapshotPolicySchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dayOfMonth = defaults.dayOfMonth;
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.hourOfDay = defaults.hourOfDay;
    	      this.month = defaults.month;
    	      this.period = defaults.period;
    	      this.retentionDurationInSeconds = defaults.retentionDurationInSeconds;
    	      this.schedulePrefix = defaults.schedulePrefix;
    	      this.timeScheduleStart = defaults.timeScheduleStart;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder dayOfMonth(@Nullable Integer dayOfMonth) {
            this.dayOfMonth = dayOfMonth;
            return this;
        }
        @CustomType.Setter
        public Builder dayOfWeek(@Nullable String dayOfWeek) {
            this.dayOfWeek = dayOfWeek;
            return this;
        }
        @CustomType.Setter
        public Builder hourOfDay(@Nullable Integer hourOfDay) {
            this.hourOfDay = hourOfDay;
            return this;
        }
        @CustomType.Setter
        public Builder month(@Nullable String month) {
            this.month = month;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable String period) {
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder retentionDurationInSeconds(@Nullable String retentionDurationInSeconds) {
            this.retentionDurationInSeconds = retentionDurationInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder schedulePrefix(@Nullable String schedulePrefix) {
            this.schedulePrefix = schedulePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduleStart(@Nullable String timeScheduleStart) {
            this.timeScheduleStart = timeScheduleStart;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        public GetFilesystemSnapshotPolicySchedule build() {
            final var o = new GetFilesystemSnapshotPolicySchedule();
            o.dayOfMonth = dayOfMonth;
            o.dayOfWeek = dayOfWeek;
            o.hourOfDay = hourOfDay;
            o.month = month;
            o.period = period;
            o.retentionDurationInSeconds = retentionDurationInSeconds;
            o.schedulePrefix = schedulePrefix;
            o.timeScheduleStart = timeScheduleStart;
            o.timeZone = timeZone;
            return o;
        }
    }
}
