// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFilesystemSnapshotPolicySchedule {
    /**
     * @return The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules.
     * 
     */
    private Integer dayOfMonth;
    /**
     * @return The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules.
     * 
     */
    private String dayOfWeek;
    /**
     * @return The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, a value will be chosen at creation time.
     * 
     */
    private Integer hourOfDay;
    /**
     * @return The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules.
     * 
     */
    private String month;
    /**
     * @return The frequency of scheduled snapshots.
     * 
     */
    private String period;
    /**
     * @return The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    private String retentionDurationInSeconds;
    /**
     * @return A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    private String schedulePrefix;
    /**
     * @return The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    private String timeScheduleStart;
    /**
     * @return Time zone used for scheduling the snapshot.
     * 
     */
    private String timeZone;

    private GetFilesystemSnapshotPolicySchedule() {}
    /**
     * @return The day of the month to create a scheduled snapshot. If the day does not exist for the month, snapshot creation will be skipped. Used for MONTHLY and YEARLY snapshot schedules.
     * 
     */
    public Integer dayOfMonth() {
        return this.dayOfMonth;
    }
    /**
     * @return The day of the week to create a scheduled snapshot. Used for WEEKLY snapshot schedules.
     * 
     */
    public String dayOfWeek() {
        return this.dayOfWeek;
    }
    /**
     * @return The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot. If not set, a value will be chosen at creation time.
     * 
     */
    public Integer hourOfDay() {
        return this.hourOfDay;
    }
    /**
     * @return The month to create a scheduled snapshot. Used only for YEARLY snapshot schedules.
     * 
     */
    public String month() {
        return this.month;
    }
    /**
     * @return The frequency of scheduled snapshots.
     * 
     */
    public String period() {
        return this.period;
    }
    /**
     * @return The number of seconds to retain snapshots created with this schedule. Snapshot expiration time will not be set if this value is empty.
     * 
     */
    public String retentionDurationInSeconds() {
        return this.retentionDurationInSeconds;
    }
    /**
     * @return A name prefix to be applied to snapshots created by this schedule.  Example: `compliance1`
     * 
     */
    public String schedulePrefix() {
        return this.schedulePrefix;
    }
    /**
     * @return The starting point used to begin the scheduling of the snapshots based upon recurrence string in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
     * 
     */
    public String timeScheduleStart() {
        return this.timeScheduleStart;
    }
    /**
     * @return Time zone used for scheduling the snapshot.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFilesystemSnapshotPolicySchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dayOfMonth;
        private String dayOfWeek;
        private Integer hourOfDay;
        private String month;
        private String period;
        private String retentionDurationInSeconds;
        private String schedulePrefix;
        private String timeScheduleStart;
        private String timeZone;
        public Builder() {}
        public Builder(GetFilesystemSnapshotPolicySchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dayOfMonth = defaults.dayOfMonth;
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.hourOfDay = defaults.hourOfDay;
    	      this.month = defaults.month;
    	      this.period = defaults.period;
    	      this.retentionDurationInSeconds = defaults.retentionDurationInSeconds;
    	      this.schedulePrefix = defaults.schedulePrefix;
    	      this.timeScheduleStart = defaults.timeScheduleStart;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder dayOfMonth(Integer dayOfMonth) {
            this.dayOfMonth = Objects.requireNonNull(dayOfMonth);
            return this;
        }
        @CustomType.Setter
        public Builder dayOfWeek(String dayOfWeek) {
            this.dayOfWeek = Objects.requireNonNull(dayOfWeek);
            return this;
        }
        @CustomType.Setter
        public Builder hourOfDay(Integer hourOfDay) {
            this.hourOfDay = Objects.requireNonNull(hourOfDay);
            return this;
        }
        @CustomType.Setter
        public Builder month(String month) {
            this.month = Objects.requireNonNull(month);
            return this;
        }
        @CustomType.Setter
        public Builder period(String period) {
            this.period = Objects.requireNonNull(period);
            return this;
        }
        @CustomType.Setter
        public Builder retentionDurationInSeconds(String retentionDurationInSeconds) {
            this.retentionDurationInSeconds = Objects.requireNonNull(retentionDurationInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder schedulePrefix(String schedulePrefix) {
            this.schedulePrefix = Objects.requireNonNull(schedulePrefix);
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduleStart(String timeScheduleStart) {
            this.timeScheduleStart = Objects.requireNonNull(timeScheduleStart);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        public GetFilesystemSnapshotPolicySchedule build() {
            final var o = new GetFilesystemSnapshotPolicySchedule();
            o.dayOfMonth = dayOfMonth;
            o.dayOfWeek = dayOfWeek;
            o.hourOfDay = hourOfDay;
            o.month = month;
            o.period = period;
            o.retentionDurationInSeconds = retentionDurationInSeconds;
            o.schedulePrefix = schedulePrefix;
            o.timeScheduleStart = timeScheduleStart;
            o.timeZone = timeZone;
            return o;
        }
    }
}
