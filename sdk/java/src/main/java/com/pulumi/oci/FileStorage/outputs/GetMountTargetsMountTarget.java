// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FileStorage.outputs.GetMountTargetsMountTargetKerbero;
import com.pulumi.oci.FileStorage.outputs.GetMountTargetsMountTargetLdapIdmap;
import com.pulumi.oci.FileStorage.outputs.GetMountTargetsMountTargetLock;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMountTargetsMountTarget {
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable.  Example: `My resource`
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the export set.
     * 
     */
    private String exportSetId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    private String hostnameLabel;
    /**
     * @return Filter results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resouce type.
     * 
     */
    private String id;
    /**
     * @return The method used to map a Unix UID to secondary groups. If NONE, the mount target will not use the Unix UID for ID mapping.
     * 
     */
    private String idmapType;
    private String ipAddress;
    private Boolean isLockOverride;
    /**
     * @return Allows administrator to configure a mount target to interact with the administrator&#39;s Kerberos infrastructure.
     * 
     */
    private List<GetMountTargetsMountTargetKerbero> kerberos;
    /**
     * @return Mount target details about the LDAP ID mapping configuration.
     * 
     */
    private List<GetMountTargetsMountTargetLdapIdmap> ldapIdmaps;
    /**
     * @return Additional information about the current &#39;lifecycleState&#39;.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Locks associated with this resource.
     * 
     */
    private List<GetMountTargetsMountTargetLock> locks;
    /**
     * @return A list of Network Security Group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this mount target. A maximum of 5 is allowed. Setting this to an empty array after the list is created removes the mount target from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm).
     * 
     */
    private List<String> nsgIds;
    /**
     * @return Current billed throughput for mount target in Gbps. This corresponds to shape of mount target. Available shapes and corresponding throughput are listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
     * 
     */
    private String observedThroughput;
    /**
     * @return The OCIDs of the private IP addresses associated with this mount target.
     * 
     */
    private List<String> privateIpIds;
    /**
     * @return * New throughput for mount target at the end of billing cycle in Gbps.
     * 
     */
    private String requestedThroughput;
    /**
     * @return * Reserved capacity (GB) associated with this mount target. Reserved capacity depends on observedThroughput value of mount target. Value is listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
     * 
     */
    private String reservedStorageCapacity;
    /**
     * @return Filter results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    private String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the mount target is in.
     * 
     */
    private String subnetId;
    /**
     * @return System tags for this resource. System tags are applied to resources by internal Oracle Cloud Infrastructure services.
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the mount target current billing cycle will end, expressed in  [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. Once a cycle ends, it is updated  automatically to next timestamp which is after 30 days.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeBillingCycleEnd;
    /**
     * @return The date and time the mount target was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetMountTargetsMountTarget() {}
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable.  Example: `My resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the export set.
     * 
     */
    public String exportSetId() {
        return this.exportSetId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return Filter results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resouce type.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The method used to map a Unix UID to secondary groups. If NONE, the mount target will not use the Unix UID for ID mapping.
     * 
     */
    public String idmapType() {
        return this.idmapType;
    }
    public String ipAddress() {
        return this.ipAddress;
    }
    public Boolean isLockOverride() {
        return this.isLockOverride;
    }
    /**
     * @return Allows administrator to configure a mount target to interact with the administrator&#39;s Kerberos infrastructure.
     * 
     */
    public List<GetMountTargetsMountTargetKerbero> kerberos() {
        return this.kerberos;
    }
    /**
     * @return Mount target details about the LDAP ID mapping configuration.
     * 
     */
    public List<GetMountTargetsMountTargetLdapIdmap> ldapIdmaps() {
        return this.ldapIdmaps;
    }
    /**
     * @return Additional information about the current &#39;lifecycleState&#39;.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Locks associated with this resource.
     * 
     */
    public List<GetMountTargetsMountTargetLock> locks() {
        return this.locks;
    }
    /**
     * @return A list of Network Security Group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this mount target. A maximum of 5 is allowed. Setting this to an empty array after the list is created removes the mount target from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm).
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return Current billed throughput for mount target in Gbps. This corresponds to shape of mount target. Available shapes and corresponding throughput are listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
     * 
     */
    public String observedThroughput() {
        return this.observedThroughput;
    }
    /**
     * @return The OCIDs of the private IP addresses associated with this mount target.
     * 
     */
    public List<String> privateIpIds() {
        return this.privateIpIds;
    }
    /**
     * @return * New throughput for mount target at the end of billing cycle in Gbps.
     * 
     */
    public String requestedThroughput() {
        return this.requestedThroughput;
    }
    /**
     * @return * Reserved capacity (GB) associated with this mount target. Reserved capacity depends on observedThroughput value of mount target. Value is listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
     * 
     */
    public String reservedStorageCapacity() {
        return this.reservedStorageCapacity;
    }
    /**
     * @return Filter results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the mount target is in.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return System tags for this resource. System tags are applied to resources by internal Oracle Cloud Infrastructure services.
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the mount target current billing cycle will end, expressed in  [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. Once a cycle ends, it is updated  automatically to next timestamp which is after 30 days.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeBillingCycleEnd() {
        return this.timeBillingCycleEnd;
    }
    /**
     * @return The date and time the mount target was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMountTargetsMountTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private String exportSetId;
        private Map<String,String> freeformTags;
        private String hostnameLabel;
        private String id;
        private String idmapType;
        private String ipAddress;
        private Boolean isLockOverride;
        private List<GetMountTargetsMountTargetKerbero> kerberos;
        private List<GetMountTargetsMountTargetLdapIdmap> ldapIdmaps;
        private String lifecycleDetails;
        private List<GetMountTargetsMountTargetLock> locks;
        private List<String> nsgIds;
        private String observedThroughput;
        private List<String> privateIpIds;
        private String requestedThroughput;
        private String reservedStorageCapacity;
        private String state;
        private String subnetId;
        private Map<String,String> systemTags;
        private String timeBillingCycleEnd;
        private String timeCreated;
        public Builder() {}
        public Builder(GetMountTargetsMountTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.exportSetId = defaults.exportSetId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.idmapType = defaults.idmapType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isLockOverride = defaults.isLockOverride;
    	      this.kerberos = defaults.kerberos;
    	      this.ldapIdmaps = defaults.ldapIdmaps;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.locks = defaults.locks;
    	      this.nsgIds = defaults.nsgIds;
    	      this.observedThroughput = defaults.observedThroughput;
    	      this.privateIpIds = defaults.privateIpIds;
    	      this.requestedThroughput = defaults.requestedThroughput;
    	      this.reservedStorageCapacity = defaults.reservedStorageCapacity;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeBillingCycleEnd = defaults.timeBillingCycleEnd;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder exportSetId(String exportSetId) {
            if (exportSetId == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "exportSetId");
            }
            this.exportSetId = exportSetId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            if (hostnameLabel == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "hostnameLabel");
            }
            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idmapType(String idmapType) {
            if (idmapType == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "idmapType");
            }
            this.idmapType = idmapType;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isLockOverride(Boolean isLockOverride) {
            if (isLockOverride == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "isLockOverride");
            }
            this.isLockOverride = isLockOverride;
            return this;
        }
        @CustomType.Setter
        public Builder kerberos(List<GetMountTargetsMountTargetKerbero> kerberos) {
            if (kerberos == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "kerberos");
            }
            this.kerberos = kerberos;
            return this;
        }
        public Builder kerberos(GetMountTargetsMountTargetKerbero... kerberos) {
            return kerberos(List.of(kerberos));
        }
        @CustomType.Setter
        public Builder ldapIdmaps(List<GetMountTargetsMountTargetLdapIdmap> ldapIdmaps) {
            if (ldapIdmaps == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "ldapIdmaps");
            }
            this.ldapIdmaps = ldapIdmaps;
            return this;
        }
        public Builder ldapIdmaps(GetMountTargetsMountTargetLdapIdmap... ldapIdmaps) {
            return ldapIdmaps(List.of(ldapIdmaps));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder locks(List<GetMountTargetsMountTargetLock> locks) {
            if (locks == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "locks");
            }
            this.locks = locks;
            return this;
        }
        public Builder locks(GetMountTargetsMountTargetLock... locks) {
            return locks(List.of(locks));
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder observedThroughput(String observedThroughput) {
            if (observedThroughput == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "observedThroughput");
            }
            this.observedThroughput = observedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpIds(List<String> privateIpIds) {
            if (privateIpIds == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "privateIpIds");
            }
            this.privateIpIds = privateIpIds;
            return this;
        }
        public Builder privateIpIds(String... privateIpIds) {
            return privateIpIds(List.of(privateIpIds));
        }
        @CustomType.Setter
        public Builder requestedThroughput(String requestedThroughput) {
            if (requestedThroughput == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "requestedThroughput");
            }
            this.requestedThroughput = requestedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder reservedStorageCapacity(String reservedStorageCapacity) {
            if (reservedStorageCapacity == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "reservedStorageCapacity");
            }
            this.reservedStorageCapacity = reservedStorageCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeBillingCycleEnd(String timeBillingCycleEnd) {
            if (timeBillingCycleEnd == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "timeBillingCycleEnd");
            }
            this.timeBillingCycleEnd = timeBillingCycleEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTarget", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetMountTargetsMountTarget build() {
            final var _resultValue = new GetMountTargetsMountTarget();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.exportSetId = exportSetId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostnameLabel = hostnameLabel;
            _resultValue.id = id;
            _resultValue.idmapType = idmapType;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isLockOverride = isLockOverride;
            _resultValue.kerberos = kerberos;
            _resultValue.ldapIdmaps = ldapIdmaps;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.locks = locks;
            _resultValue.nsgIds = nsgIds;
            _resultValue.observedThroughput = observedThroughput;
            _resultValue.privateIpIds = privateIpIds;
            _resultValue.requestedThroughput = requestedThroughput;
            _resultValue.reservedStorageCapacity = reservedStorageCapacity;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeBillingCycleEnd = timeBillingCycleEnd;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
