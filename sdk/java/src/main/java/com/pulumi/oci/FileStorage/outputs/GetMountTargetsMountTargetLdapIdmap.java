// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMountTargetsMountTargetLdapIdmap {
    /**
     * @return The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    private Integer cacheLifetimeSeconds;
    /**
     * @return The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    private Integer cacheRefreshIntervalSeconds;
    /**
     * @return All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    private String groupSearchBase;
    /**
     * @return The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    private Integer negativeCacheLifetimeSeconds;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    private String outboundConnector1id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    private String outboundConnector2id;
    /**
     * @return Schema type of the LDAP account.
     * 
     */
    private String schemaType;
    /**
     * @return All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    private String userSearchBase;

    private GetMountTargetsMountTargetLdapIdmap() {}
    /**
     * @return The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    public Integer cacheLifetimeSeconds() {
        return this.cacheLifetimeSeconds;
    }
    /**
     * @return The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    public Integer cacheRefreshIntervalSeconds() {
        return this.cacheRefreshIntervalSeconds;
    }
    /**
     * @return All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    public String groupSearchBase() {
        return this.groupSearchBase;
    }
    /**
     * @return The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    public Integer negativeCacheLifetimeSeconds() {
        return this.negativeCacheLifetimeSeconds;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    public String outboundConnector1id() {
        return this.outboundConnector1id;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    public String outboundConnector2id() {
        return this.outboundConnector2id;
    }
    /**
     * @return Schema type of the LDAP account.
     * 
     */
    public String schemaType() {
        return this.schemaType;
    }
    /**
     * @return All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    public String userSearchBase() {
        return this.userSearchBase;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMountTargetsMountTargetLdapIdmap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cacheLifetimeSeconds;
        private Integer cacheRefreshIntervalSeconds;
        private String groupSearchBase;
        private Integer negativeCacheLifetimeSeconds;
        private String outboundConnector1id;
        private String outboundConnector2id;
        private String schemaType;
        private String userSearchBase;
        public Builder() {}
        public Builder(GetMountTargetsMountTargetLdapIdmap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheLifetimeSeconds = defaults.cacheLifetimeSeconds;
    	      this.cacheRefreshIntervalSeconds = defaults.cacheRefreshIntervalSeconds;
    	      this.groupSearchBase = defaults.groupSearchBase;
    	      this.negativeCacheLifetimeSeconds = defaults.negativeCacheLifetimeSeconds;
    	      this.outboundConnector1id = defaults.outboundConnector1id;
    	      this.outboundConnector2id = defaults.outboundConnector2id;
    	      this.schemaType = defaults.schemaType;
    	      this.userSearchBase = defaults.userSearchBase;
        }

        @CustomType.Setter
        public Builder cacheLifetimeSeconds(Integer cacheLifetimeSeconds) {
            if (cacheLifetimeSeconds == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "cacheLifetimeSeconds");
            }
            this.cacheLifetimeSeconds = cacheLifetimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder cacheRefreshIntervalSeconds(Integer cacheRefreshIntervalSeconds) {
            if (cacheRefreshIntervalSeconds == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "cacheRefreshIntervalSeconds");
            }
            this.cacheRefreshIntervalSeconds = cacheRefreshIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder groupSearchBase(String groupSearchBase) {
            if (groupSearchBase == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "groupSearchBase");
            }
            this.groupSearchBase = groupSearchBase;
            return this;
        }
        @CustomType.Setter
        public Builder negativeCacheLifetimeSeconds(Integer negativeCacheLifetimeSeconds) {
            if (negativeCacheLifetimeSeconds == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "negativeCacheLifetimeSeconds");
            }
            this.negativeCacheLifetimeSeconds = negativeCacheLifetimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder outboundConnector1id(String outboundConnector1id) {
            if (outboundConnector1id == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "outboundConnector1id");
            }
            this.outboundConnector1id = outboundConnector1id;
            return this;
        }
        @CustomType.Setter
        public Builder outboundConnector2id(String outboundConnector2id) {
            if (outboundConnector2id == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "outboundConnector2id");
            }
            this.outboundConnector2id = outboundConnector2id;
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(String schemaType) {
            if (schemaType == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "schemaType");
            }
            this.schemaType = schemaType;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchBase(String userSearchBase) {
            if (userSearchBase == null) {
              throw new MissingRequiredPropertyException("GetMountTargetsMountTargetLdapIdmap", "userSearchBase");
            }
            this.userSearchBase = userSearchBase;
            return this;
        }
        public GetMountTargetsMountTargetLdapIdmap build() {
            final var _resultValue = new GetMountTargetsMountTargetLdapIdmap();
            _resultValue.cacheLifetimeSeconds = cacheLifetimeSeconds;
            _resultValue.cacheRefreshIntervalSeconds = cacheRefreshIntervalSeconds;
            _resultValue.groupSearchBase = groupSearchBase;
            _resultValue.negativeCacheLifetimeSeconds = negativeCacheLifetimeSeconds;
            _resultValue.outboundConnector1id = outboundConnector1id;
            _resultValue.outboundConnector2id = outboundConnector2id;
            _resultValue.schemaType = schemaType;
            _resultValue.userSearchBase = userSearchBase;
            return _resultValue;
        }
    }
}
