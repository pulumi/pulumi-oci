// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FileStorage.outputs.GetOutboundConnectorsFilter;
import com.pulumi.oci.FileStorage.outputs.GetOutboundConnectorsOutboundConnector;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOutboundConnectorsResult {
    /**
     * @return The availability domain the outbound connector is in. May be unset as a blank or NULL value.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the outbound connector.
     * 
     */
    private String compartmentId;
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My outbound connector`
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetOutboundConnectorsFilter> filters;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the outbound connector.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of outbound_connectors.
     * 
     */
    private List<GetOutboundConnectorsOutboundConnector> outboundConnectors;
    /**
     * @return The current state of this outbound connector.
     * 
     */
    private @Nullable String state;

    private GetOutboundConnectorsResult() {}
    /**
     * @return The availability domain the outbound connector is in. May be unset as a blank or NULL value.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the outbound connector.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My outbound connector`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetOutboundConnectorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the outbound connector.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of outbound_connectors.
     * 
     */
    public List<GetOutboundConnectorsOutboundConnector> outboundConnectors() {
        return this.outboundConnectors;
    }
    /**
     * @return The current state of this outbound connector.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOutboundConnectorsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetOutboundConnectorsFilter> filters;
        private @Nullable String id;
        private List<GetOutboundConnectorsOutboundConnector> outboundConnectors;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetOutboundConnectorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.outboundConnectors = defaults.outboundConnectors;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetOutboundConnectorsResult", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetOutboundConnectorsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetOutboundConnectorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetOutboundConnectorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder outboundConnectors(List<GetOutboundConnectorsOutboundConnector> outboundConnectors) {
            if (outboundConnectors == null) {
              throw new MissingRequiredPropertyException("GetOutboundConnectorsResult", "outboundConnectors");
            }
            this.outboundConnectors = outboundConnectors;
            return this;
        }
        public Builder outboundConnectors(GetOutboundConnectorsOutboundConnector... outboundConnectors) {
            return outboundConnectors(List.of(outboundConnectors));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetOutboundConnectorsResult build() {
            final var _resultValue = new GetOutboundConnectorsResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.outboundConnectors = outboundConnectors;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
