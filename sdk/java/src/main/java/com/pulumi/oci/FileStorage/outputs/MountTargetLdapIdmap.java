// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MountTargetLdapIdmap {
    /**
     * @return (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    private @Nullable Integer cacheLifetimeSeconds;
    /**
     * @return (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    private @Nullable Integer cacheRefreshIntervalSeconds;
    /**
     * @return (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    private @Nullable String groupSearchBase;
    /**
     * @return (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    private @Nullable Integer negativeCacheLifetimeSeconds;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    private @Nullable String outboundConnector1id;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    private @Nullable String outboundConnector2id;
    /**
     * @return (Updatable) Schema type of the LDAP account.
     * 
     */
    private @Nullable String schemaType;
    /**
     * @return (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    private @Nullable String userSearchBase;

    private MountTargetLdapIdmap() {}
    /**
     * @return (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
     * 
     */
    public Optional<Integer> cacheLifetimeSeconds() {
        return Optional.ofNullable(this.cacheLifetimeSeconds);
    }
    /**
     * @return (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
     * 
     */
    public Optional<Integer> cacheRefreshIntervalSeconds() {
        return Optional.ofNullable(this.cacheRefreshIntervalSeconds);
    }
    /**
     * @return (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
     * 
     */
    public Optional<String> groupSearchBase() {
        return Optional.ofNullable(this.groupSearchBase);
    }
    /**
     * @return (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
     * 
     */
    public Optional<Integer> negativeCacheLifetimeSeconds() {
        return Optional.ofNullable(this.negativeCacheLifetimeSeconds);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
     * 
     */
    public Optional<String> outboundConnector1id() {
        return Optional.ofNullable(this.outboundConnector1id);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
     * 
     */
    public Optional<String> outboundConnector2id() {
        return Optional.ofNullable(this.outboundConnector2id);
    }
    /**
     * @return (Updatable) Schema type of the LDAP account.
     * 
     */
    public Optional<String> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }
    /**
     * @return (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
     * 
     */
    public Optional<String> userSearchBase() {
        return Optional.ofNullable(this.userSearchBase);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MountTargetLdapIdmap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer cacheLifetimeSeconds;
        private @Nullable Integer cacheRefreshIntervalSeconds;
        private @Nullable String groupSearchBase;
        private @Nullable Integer negativeCacheLifetimeSeconds;
        private @Nullable String outboundConnector1id;
        private @Nullable String outboundConnector2id;
        private @Nullable String schemaType;
        private @Nullable String userSearchBase;
        public Builder() {}
        public Builder(MountTargetLdapIdmap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheLifetimeSeconds = defaults.cacheLifetimeSeconds;
    	      this.cacheRefreshIntervalSeconds = defaults.cacheRefreshIntervalSeconds;
    	      this.groupSearchBase = defaults.groupSearchBase;
    	      this.negativeCacheLifetimeSeconds = defaults.negativeCacheLifetimeSeconds;
    	      this.outboundConnector1id = defaults.outboundConnector1id;
    	      this.outboundConnector2id = defaults.outboundConnector2id;
    	      this.schemaType = defaults.schemaType;
    	      this.userSearchBase = defaults.userSearchBase;
        }

        @CustomType.Setter
        public Builder cacheLifetimeSeconds(@Nullable Integer cacheLifetimeSeconds) {
            this.cacheLifetimeSeconds = cacheLifetimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder cacheRefreshIntervalSeconds(@Nullable Integer cacheRefreshIntervalSeconds) {
            this.cacheRefreshIntervalSeconds = cacheRefreshIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder groupSearchBase(@Nullable String groupSearchBase) {
            this.groupSearchBase = groupSearchBase;
            return this;
        }
        @CustomType.Setter
        public Builder negativeCacheLifetimeSeconds(@Nullable Integer negativeCacheLifetimeSeconds) {
            this.negativeCacheLifetimeSeconds = negativeCacheLifetimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder outboundConnector1id(@Nullable String outboundConnector1id) {
            this.outboundConnector1id = outboundConnector1id;
            return this;
        }
        @CustomType.Setter
        public Builder outboundConnector2id(@Nullable String outboundConnector2id) {
            this.outboundConnector2id = outboundConnector2id;
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(@Nullable String schemaType) {
            this.schemaType = schemaType;
            return this;
        }
        @CustomType.Setter
        public Builder userSearchBase(@Nullable String userSearchBase) {
            this.userSearchBase = userSearchBase;
            return this;
        }
        public MountTargetLdapIdmap build() {
            final var o = new MountTargetLdapIdmap();
            o.cacheLifetimeSeconds = cacheLifetimeSeconds;
            o.cacheRefreshIntervalSeconds = cacheRefreshIntervalSeconds;
            o.groupSearchBase = groupSearchBase;
            o.negativeCacheLifetimeSeconds = negativeCacheLifetimeSeconds;
            o.outboundConnector1id = outboundConnector1id;
            o.outboundConnector2id = outboundConnector2id;
            o.schemaType = schemaType;
            o.userSearchBase = userSearchBase;
            return o;
        }
    }
}
