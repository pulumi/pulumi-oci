// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.FleetNotificationPreferencesArgs;
import com.pulumi.oci.FleetAppsManagement.inputs.FleetRuleSelectionCriteriaArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetArgs Empty = new FleetArgs();

    /**
     * Application Type associated with the Fleet.Applicable for Environment fleet types.
     * 
     */
    @Import(name="applicationType")
    private @Nullable Output<String> applicationType;

    /**
     * @return Application Type associated with the Fleet.Applicable for Environment fleet types.
     * 
     */
    public Optional<Output<String>> applicationType() {
        return Optional.ofNullable(this.applicationType);
    }

    /**
     * Tenancy OCID
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return Tenancy OCID
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Environment Type associated with the Fleet.Applicable for Environment fleet types.
     * 
     */
    @Import(name="environmentType")
    private @Nullable Output<String> environmentType;

    /**
     * @return Environment Type associated with the Fleet.Applicable for Environment fleet types.
     * 
     */
    public Optional<Output<String>> environmentType() {
        return Optional.ofNullable(this.environmentType);
    }

    /**
     * Type of the Fleet
     * 
     */
    @Import(name="fleetType", required=true)
    private Output<String> fleetType;

    /**
     * @return Type of the Fleet
     * 
     */
    public Output<String> fleetType() {
        return this.fleetType;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Group Type associated with Group Fleet.Applicable for Group fleet types.
     * 
     */
    @Import(name="groupType")
    private @Nullable Output<String> groupType;

    /**
     * @return Group Type associated with Group Fleet.Applicable for Group fleet types.
     * 
     */
    public Optional<Output<String>> groupType() {
        return Optional.ofNullable(this.groupType);
    }

    /**
     * (Updatable) A value which represents if auto confirming of the targets can be enabled
     * 
     */
    @Import(name="isTargetAutoConfirm")
    private @Nullable Output<Boolean> isTargetAutoConfirm;

    /**
     * @return (Updatable) A value which represents if auto confirming of the targets can be enabled
     * 
     */
    public Optional<Output<Boolean>> isTargetAutoConfirm() {
        return Optional.ofNullable(this.isTargetAutoConfirm);
    }

    /**
     * (Updatable) Conditions when met to send notifications on the fleet activities
     * 
     */
    @Import(name="notificationPreferences")
    private @Nullable Output<FleetNotificationPreferencesArgs> notificationPreferences;

    /**
     * @return (Updatable) Conditions when met to send notifications on the fleet activities
     * 
     */
    public Optional<Output<FleetNotificationPreferencesArgs>> notificationPreferences() {
        return Optional.ofNullable(this.notificationPreferences);
    }

    /**
     * Products associated with the Fleet
     * 
     */
    @Import(name="products")
    private @Nullable Output<List<String>> products;

    /**
     * @return Products associated with the Fleet
     * 
     */
    public Optional<Output<List<String>>> products() {
        return Optional.ofNullable(this.products);
    }

    /**
     * Type of resource selection in a fleet
     * 
     */
    @Import(name="resourceSelectionType")
    private @Nullable Output<String> resourceSelectionType;

    /**
     * @return Type of resource selection in a fleet
     * 
     */
    public Optional<Output<String>> resourceSelectionType() {
        return Optional.ofNullable(this.resourceSelectionType);
    }

    /**
     * (Updatable) Rule Selection Criteria
     * 
     */
    @Import(name="ruleSelectionCriteria")
    private @Nullable Output<FleetRuleSelectionCriteriaArgs> ruleSelectionCriteria;

    /**
     * @return (Updatable) Rule Selection Criteria
     * 
     */
    public Optional<Output<FleetRuleSelectionCriteriaArgs>> ruleSelectionCriteria() {
        return Optional.ofNullable(this.ruleSelectionCriteria);
    }

    private FleetArgs() {}

    private FleetArgs(FleetArgs $) {
        this.applicationType = $.applicationType;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.environmentType = $.environmentType;
        this.fleetType = $.fleetType;
        this.freeformTags = $.freeformTags;
        this.groupType = $.groupType;
        this.isTargetAutoConfirm = $.isTargetAutoConfirm;
        this.notificationPreferences = $.notificationPreferences;
        this.products = $.products;
        this.resourceSelectionType = $.resourceSelectionType;
        this.ruleSelectionCriteria = $.ruleSelectionCriteria;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetArgs $;

        public Builder() {
            $ = new FleetArgs();
        }

        public Builder(FleetArgs defaults) {
            $ = new FleetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationType Application Type associated with the Fleet.Applicable for Environment fleet types.
         * 
         * @return builder
         * 
         */
        public Builder applicationType(@Nullable Output<String> applicationType) {
            $.applicationType = applicationType;
            return this;
        }

        /**
         * @param applicationType Application Type associated with the Fleet.Applicable for Environment fleet types.
         * 
         * @return builder
         * 
         */
        public Builder applicationType(String applicationType) {
            return applicationType(Output.of(applicationType));
        }

        /**
         * @param compartmentId Tenancy OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Tenancy OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environmentType Environment Type associated with the Fleet.Applicable for Environment fleet types.
         * 
         * @return builder
         * 
         */
        public Builder environmentType(@Nullable Output<String> environmentType) {
            $.environmentType = environmentType;
            return this;
        }

        /**
         * @param environmentType Environment Type associated with the Fleet.Applicable for Environment fleet types.
         * 
         * @return builder
         * 
         */
        public Builder environmentType(String environmentType) {
            return environmentType(Output.of(environmentType));
        }

        /**
         * @param fleetType Type of the Fleet
         * 
         * @return builder
         * 
         */
        public Builder fleetType(Output<String> fleetType) {
            $.fleetType = fleetType;
            return this;
        }

        /**
         * @param fleetType Type of the Fleet
         * 
         * @return builder
         * 
         */
        public Builder fleetType(String fleetType) {
            return fleetType(Output.of(fleetType));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param groupType Group Type associated with Group Fleet.Applicable for Group fleet types.
         * 
         * @return builder
         * 
         */
        public Builder groupType(@Nullable Output<String> groupType) {
            $.groupType = groupType;
            return this;
        }

        /**
         * @param groupType Group Type associated with Group Fleet.Applicable for Group fleet types.
         * 
         * @return builder
         * 
         */
        public Builder groupType(String groupType) {
            return groupType(Output.of(groupType));
        }

        /**
         * @param isTargetAutoConfirm (Updatable) A value which represents if auto confirming of the targets can be enabled
         * 
         * @return builder
         * 
         */
        public Builder isTargetAutoConfirm(@Nullable Output<Boolean> isTargetAutoConfirm) {
            $.isTargetAutoConfirm = isTargetAutoConfirm;
            return this;
        }

        /**
         * @param isTargetAutoConfirm (Updatable) A value which represents if auto confirming of the targets can be enabled
         * 
         * @return builder
         * 
         */
        public Builder isTargetAutoConfirm(Boolean isTargetAutoConfirm) {
            return isTargetAutoConfirm(Output.of(isTargetAutoConfirm));
        }

        /**
         * @param notificationPreferences (Updatable) Conditions when met to send notifications on the fleet activities
         * 
         * @return builder
         * 
         */
        public Builder notificationPreferences(@Nullable Output<FleetNotificationPreferencesArgs> notificationPreferences) {
            $.notificationPreferences = notificationPreferences;
            return this;
        }

        /**
         * @param notificationPreferences (Updatable) Conditions when met to send notifications on the fleet activities
         * 
         * @return builder
         * 
         */
        public Builder notificationPreferences(FleetNotificationPreferencesArgs notificationPreferences) {
            return notificationPreferences(Output.of(notificationPreferences));
        }

        /**
         * @param products Products associated with the Fleet
         * 
         * @return builder
         * 
         */
        public Builder products(@Nullable Output<List<String>> products) {
            $.products = products;
            return this;
        }

        /**
         * @param products Products associated with the Fleet
         * 
         * @return builder
         * 
         */
        public Builder products(List<String> products) {
            return products(Output.of(products));
        }

        /**
         * @param products Products associated with the Fleet
         * 
         * @return builder
         * 
         */
        public Builder products(String... products) {
            return products(List.of(products));
        }

        /**
         * @param resourceSelectionType Type of resource selection in a fleet
         * 
         * @return builder
         * 
         */
        public Builder resourceSelectionType(@Nullable Output<String> resourceSelectionType) {
            $.resourceSelectionType = resourceSelectionType;
            return this;
        }

        /**
         * @param resourceSelectionType Type of resource selection in a fleet
         * 
         * @return builder
         * 
         */
        public Builder resourceSelectionType(String resourceSelectionType) {
            return resourceSelectionType(Output.of(resourceSelectionType));
        }

        /**
         * @param ruleSelectionCriteria (Updatable) Rule Selection Criteria
         * 
         * @return builder
         * 
         */
        public Builder ruleSelectionCriteria(@Nullable Output<FleetRuleSelectionCriteriaArgs> ruleSelectionCriteria) {
            $.ruleSelectionCriteria = ruleSelectionCriteria;
            return this;
        }

        /**
         * @param ruleSelectionCriteria (Updatable) Rule Selection Criteria
         * 
         * @return builder
         * 
         */
        public Builder ruleSelectionCriteria(FleetRuleSelectionCriteriaArgs ruleSelectionCriteria) {
            return ruleSelectionCriteria(Output.of(ruleSelectionCriteria));
        }

        public FleetArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("FleetArgs", "compartmentId");
            }
            if ($.fleetType == null) {
                throw new MissingRequiredPropertyException("FleetArgs", "fleetType");
            }
            return $;
        }
    }

}
