// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyArgs Empty = new PropertyArgs();

    /**
     * Tenancy OCID
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return Tenancy OCID
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Text selection of the property.
     * 
     */
    @Import(name="selection", required=true)
    private Output<String> selection;

    /**
     * @return (Updatable) Text selection of the property.
     * 
     */
    public Output<String> selection() {
        return this.selection;
    }

    /**
     * (Updatable) Format of the value.
     * 
     */
    @Import(name="valueType", required=true)
    private Output<String> valueType;

    /**
     * @return (Updatable) Format of the value.
     * 
     */
    public Output<String> valueType() {
        return this.valueType;
    }

    /**
     * (Updatable) Values of the property (must be a single value if selection = &#39;SINGLE_CHOICE&#39;).
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return (Updatable) Values of the property (must be a single value if selection = &#39;SINGLE_CHOICE&#39;).
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private PropertyArgs() {}

    private PropertyArgs(PropertyArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.selection = $.selection;
        this.valueType = $.valueType;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyArgs $;

        public Builder() {
            $ = new PropertyArgs();
        }

        public Builder(PropertyArgs defaults) {
            $ = new PropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId Tenancy OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Tenancy OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param selection (Updatable) Text selection of the property.
         * 
         * @return builder
         * 
         */
        public Builder selection(Output<String> selection) {
            $.selection = selection;
            return this;
        }

        /**
         * @param selection (Updatable) Text selection of the property.
         * 
         * @return builder
         * 
         */
        public Builder selection(String selection) {
            return selection(Output.of(selection));
        }

        /**
         * @param valueType (Updatable) Format of the value.
         * 
         * @return builder
         * 
         */
        public Builder valueType(Output<String> valueType) {
            $.valueType = valueType;
            return this;
        }

        /**
         * @param valueType (Updatable) Format of the value.
         * 
         * @return builder
         * 
         */
        public Builder valueType(String valueType) {
            return valueType(Output.of(valueType));
        }

        /**
         * @param values (Updatable) Values of the property (must be a single value if selection = &#39;SINGLE_CHOICE&#39;).
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values (Updatable) Values of the property (must be a single value if selection = &#39;SINGLE_CHOICE&#39;).
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values (Updatable) Values of the property (must be a single value if selection = &#39;SINGLE_CHOICE&#39;).
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public PropertyArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "compartmentId");
            }
            if ($.selection == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "selection");
            }
            if ($.valueType == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "valueType");
            }
            return $;
        }
    }

}
