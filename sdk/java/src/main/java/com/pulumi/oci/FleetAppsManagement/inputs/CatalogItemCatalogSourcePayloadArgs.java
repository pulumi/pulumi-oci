// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogItemCatalogSourcePayloadArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogItemCatalogSourcePayloadArgs Empty = new CatalogItemCatalogSourcePayloadArgs();

    /**
     * access uri
     * 
     */
    @Import(name="accessUri")
    private @Nullable Output<String> accessUri;

    /**
     * @return access uri
     * 
     */
    public Optional<Output<String>> accessUri() {
        return Optional.ofNullable(this.accessUri);
    }

    /**
     * branch Name
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return branch Name
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * bucket name
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return bucket name
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * config source type.
     * 
     */
    @Import(name="configSourceType", required=true)
    private Output<String> configSourceType;

    /**
     * @return config source type.
     * 
     */
    public Output<String> configSourceType() {
        return this.configSourceType;
    }

    /**
     * configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    @Import(name="configurationSourceProviderId")
    private @Nullable Output<String> configurationSourceProviderId;

    /**
     * @return configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public Optional<Output<String>> configurationSourceProviderId() {
        return Optional.ofNullable(this.configurationSourceProviderId);
    }

    /**
     * Template Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Template Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This listing Id parameter of Payload.
     * 
     */
    @Import(name="listingId")
    private @Nullable Output<String> listingId;

    /**
     * @return This listing Id parameter of Payload.
     * 
     */
    public Optional<Output<String>> listingId() {
        return Optional.ofNullable(this.listingId);
    }

    /**
     * Template Long Description
     * 
     */
    @Import(name="longDescription")
    private @Nullable Output<String> longDescription;

    /**
     * @return Template Long Description
     * 
     */
    public Optional<Output<String>> longDescription() {
        return Optional.ofNullable(this.longDescription);
    }

    /**
     * nameSpace
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return nameSpace
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * object name
     * 
     */
    @Import(name="object")
    private @Nullable Output<String> object;

    /**
     * @return object name
     * 
     */
    public Optional<Output<String>> object() {
        return Optional.ofNullable(this.object);
    }

    /**
     * repository Url
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable Output<String> repositoryUrl;

    /**
     * @return repository Url
     * 
     */
    public Optional<Output<String>> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * Template Display Name
     * 
     */
    @Import(name="templateDisplayName")
    private @Nullable Output<String> templateDisplayName;

    /**
     * @return Template Display Name
     * 
     */
    public Optional<Output<String>> templateDisplayName() {
        return Optional.ofNullable(this.templateDisplayName);
    }

    /**
     * The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeExpires")
    private @Nullable Output<String> timeExpires;

    /**
     * @return The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeExpires() {
        return Optional.ofNullable(this.timeExpires);
    }

    /**
     * This version parameter of Payload.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return This version parameter of Payload.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    /**
     * The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
     * 
     */
    @Import(name="zipFileBase64encoded")
    private @Nullable Output<String> zipFileBase64encoded;

    /**
     * @return The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
     * 
     */
    public Optional<Output<String>> zipFileBase64encoded() {
        return Optional.ofNullable(this.zipFileBase64encoded);
    }

    private CatalogItemCatalogSourcePayloadArgs() {}

    private CatalogItemCatalogSourcePayloadArgs(CatalogItemCatalogSourcePayloadArgs $) {
        this.accessUri = $.accessUri;
        this.branchName = $.branchName;
        this.bucket = $.bucket;
        this.configSourceType = $.configSourceType;
        this.configurationSourceProviderId = $.configurationSourceProviderId;
        this.description = $.description;
        this.listingId = $.listingId;
        this.longDescription = $.longDescription;
        this.namespace = $.namespace;
        this.object = $.object;
        this.repositoryUrl = $.repositoryUrl;
        this.templateDisplayName = $.templateDisplayName;
        this.timeExpires = $.timeExpires;
        this.version = $.version;
        this.workingDirectory = $.workingDirectory;
        this.zipFileBase64encoded = $.zipFileBase64encoded;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogItemCatalogSourcePayloadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogItemCatalogSourcePayloadArgs $;

        public Builder() {
            $ = new CatalogItemCatalogSourcePayloadArgs();
        }

        public Builder(CatalogItemCatalogSourcePayloadArgs defaults) {
            $ = new CatalogItemCatalogSourcePayloadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessUri access uri
         * 
         * @return builder
         * 
         */
        public Builder accessUri(@Nullable Output<String> accessUri) {
            $.accessUri = accessUri;
            return this;
        }

        /**
         * @param accessUri access uri
         * 
         * @return builder
         * 
         */
        public Builder accessUri(String accessUri) {
            return accessUri(Output.of(accessUri));
        }

        /**
         * @param branchName branch Name
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName branch Name
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param bucket bucket name
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket bucket name
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param configSourceType config source type.
         * 
         * @return builder
         * 
         */
        public Builder configSourceType(Output<String> configSourceType) {
            $.configSourceType = configSourceType;
            return this;
        }

        /**
         * @param configSourceType config source type.
         * 
         * @return builder
         * 
         */
        public Builder configSourceType(String configSourceType) {
            return configSourceType(Output.of(configSourceType));
        }

        /**
         * @param configurationSourceProviderId configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder configurationSourceProviderId(@Nullable Output<String> configurationSourceProviderId) {
            $.configurationSourceProviderId = configurationSourceProviderId;
            return this;
        }

        /**
         * @param configurationSourceProviderId configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder configurationSourceProviderId(String configurationSourceProviderId) {
            return configurationSourceProviderId(Output.of(configurationSourceProviderId));
        }

        /**
         * @param description Template Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Template Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param listingId This listing Id parameter of Payload.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId This listing Id parameter of Payload.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param longDescription Template Long Description
         * 
         * @return builder
         * 
         */
        public Builder longDescription(@Nullable Output<String> longDescription) {
            $.longDescription = longDescription;
            return this;
        }

        /**
         * @param longDescription Template Long Description
         * 
         * @return builder
         * 
         */
        public Builder longDescription(String longDescription) {
            return longDescription(Output.of(longDescription));
        }

        /**
         * @param namespace nameSpace
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace nameSpace
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param object object name
         * 
         * @return builder
         * 
         */
        public Builder object(@Nullable Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object object name
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param repositoryUrl repository Url
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl repository Url
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param templateDisplayName Template Display Name
         * 
         * @return builder
         * 
         */
        public Builder templateDisplayName(@Nullable Output<String> templateDisplayName) {
            $.templateDisplayName = templateDisplayName;
            return this;
        }

        /**
         * @param templateDisplayName Template Display Name
         * 
         * @return builder
         * 
         */
        public Builder templateDisplayName(String templateDisplayName) {
            return templateDisplayName(Output.of(templateDisplayName));
        }

        /**
         * @param timeExpires The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(@Nullable Output<String> timeExpires) {
            $.timeExpires = timeExpires;
            return this;
        }

        /**
         * @param timeExpires The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(String timeExpires) {
            return timeExpires(Output.of(timeExpires));
        }

        /**
         * @param version This version parameter of Payload.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version This version parameter of Payload.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        /**
         * @param zipFileBase64encoded The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
         * 
         * @return builder
         * 
         */
        public Builder zipFileBase64encoded(@Nullable Output<String> zipFileBase64encoded) {
            $.zipFileBase64encoded = zipFileBase64encoded;
            return this;
        }

        /**
         * @param zipFileBase64encoded The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
         * 
         * @return builder
         * 
         */
        public Builder zipFileBase64encoded(String zipFileBase64encoded) {
            return zipFileBase64encoded(Output.of(zipFileBase64encoded));
        }

        public CatalogItemCatalogSourcePayloadArgs build() {
            if ($.configSourceType == null) {
                throw new MissingRequiredPropertyException("CatalogItemCatalogSourcePayloadArgs", "configSourceType");
            }
            return $;
        }
    }

}
