// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.FleetAppsManagement.inputs.CatalogItemCatalogResultPayloadArgs;
import com.pulumi.oci.FleetAppsManagement.inputs.CatalogItemCatalogSourcePayloadArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogItemState extends com.pulumi.resources.ResourceArgs {

    public static final CatalogItemState Empty = new CatalogItemState();

    /**
     * Catalog result payload.
     * 
     */
    @Import(name="catalogResultPayloads")
    private @Nullable Output<List<CatalogItemCatalogResultPayloadArgs>> catalogResultPayloads;

    /**
     * @return Catalog result payload.
     * 
     */
    public Optional<Output<List<CatalogItemCatalogResultPayloadArgs>>> catalogResultPayloads() {
        return Optional.ofNullable(this.catalogResultPayloads);
    }

    /**
     * Catalog source payload.
     * 
     */
    @Import(name="catalogSourcePayload")
    private @Nullable Output<CatalogItemCatalogSourcePayloadArgs> catalogSourcePayload;

    /**
     * @return Catalog source payload.
     * 
     */
    public Optional<Output<CatalogItemCatalogSourcePayloadArgs>> catalogSourcePayload() {
        return Optional.ofNullable(this.catalogSourcePayload);
    }

    /**
     * (Updatable) An optional property when incremented triggers Clone Catalog Item. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="cloneCatalogItemTrigger")
    private @Nullable Output<Integer> cloneCatalogItemTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Clone Catalog Item. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> cloneCatalogItemTrigger() {
        return Optional.ofNullable(this.cloneCatalogItemTrigger);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    @Import(name="configSourceType")
    private @Nullable Output<String> configSourceType;

    /**
     * @return Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    public Optional<Output<String>> configSourceType() {
        return Optional.ofNullable(this.configSourceType);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The description of the CatalogItem.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the CatalogItem.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The CatalogItem name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The CatalogItem name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The details of lifecycle state CatalogItem.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return The details of lifecycle state CatalogItem.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The catalog listing Id.
     * 
     */
    @Import(name="listingId")
    private @Nullable Output<String> listingId;

    /**
     * @return The catalog listing Id.
     * 
     */
    public Optional<Output<String>> listingId() {
        return Optional.ofNullable(this.listingId);
    }

    /**
     * The catalog package version.
     * 
     */
    @Import(name="listingVersion")
    private @Nullable Output<String> listingVersion;

    /**
     * @return The catalog package version.
     * 
     */
    public Optional<Output<String>> listingVersion() {
        return Optional.ofNullable(this.listingVersion);
    }

    /**
     * Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
     * 
     */
    @Import(name="packageType")
    private @Nullable Output<String> packageType;

    /**
     * @return Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
     * 
     */
    public Optional<Output<String>> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * (Updatable) Short description about the catalog item.
     * 
     */
    @Import(name="shortDescription")
    private @Nullable Output<String> shortDescription;

    /**
     * @return (Updatable) Short description about the catalog item.
     * 
     */
    public Optional<Output<String>> shortDescription() {
        return Optional.ofNullable(this.shortDescription);
    }

    /**
     * The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    @Import(name="shouldListPublicItems")
    private @Nullable Output<Boolean> shouldListPublicItems;

    /**
     * @return The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    public Optional<Output<Boolean>> shouldListPublicItems() {
        return Optional.ofNullable(this.shouldListPublicItems);
    }

    /**
     * The current state of the CatalogItem.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the CatalogItem.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeBackfillLastChecked")
    private @Nullable Output<String> timeBackfillLastChecked;

    /**
     * @return The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeBackfillLastChecked() {
        return Optional.ofNullable(this.timeBackfillLastChecked);
    }

    /**
     * The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeLastChecked")
    private @Nullable Output<String> timeLastChecked;

    /**
     * @return The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeLastChecked() {
        return Optional.ofNullable(this.timeLastChecked);
    }

    /**
     * The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeReleased")
    private @Nullable Output<String> timeReleased;

    /**
     * @return The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeReleased() {
        return Optional.ofNullable(this.timeReleased);
    }

    /**
     * The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * (Updatable) Version description about the catalog item.
     * 
     */
    @Import(name="versionDescription")
    private @Nullable Output<String> versionDescription;

    /**
     * @return (Updatable) Version description about the catalog item.
     * 
     */
    public Optional<Output<String>> versionDescription() {
        return Optional.ofNullable(this.versionDescription);
    }

    private CatalogItemState() {}

    private CatalogItemState(CatalogItemState $) {
        this.catalogResultPayloads = $.catalogResultPayloads;
        this.catalogSourcePayload = $.catalogSourcePayload;
        this.cloneCatalogItemTrigger = $.cloneCatalogItemTrigger;
        this.compartmentId = $.compartmentId;
        this.configSourceType = $.configSourceType;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.lifecycleDetails = $.lifecycleDetails;
        this.listingId = $.listingId;
        this.listingVersion = $.listingVersion;
        this.packageType = $.packageType;
        this.shortDescription = $.shortDescription;
        this.shouldListPublicItems = $.shouldListPublicItems;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeBackfillLastChecked = $.timeBackfillLastChecked;
        this.timeCreated = $.timeCreated;
        this.timeLastChecked = $.timeLastChecked;
        this.timeReleased = $.timeReleased;
        this.timeUpdated = $.timeUpdated;
        this.versionDescription = $.versionDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogItemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogItemState $;

        public Builder() {
            $ = new CatalogItemState();
        }

        public Builder(CatalogItemState defaults) {
            $ = new CatalogItemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogResultPayloads Catalog result payload.
         * 
         * @return builder
         * 
         */
        public Builder catalogResultPayloads(@Nullable Output<List<CatalogItemCatalogResultPayloadArgs>> catalogResultPayloads) {
            $.catalogResultPayloads = catalogResultPayloads;
            return this;
        }

        /**
         * @param catalogResultPayloads Catalog result payload.
         * 
         * @return builder
         * 
         */
        public Builder catalogResultPayloads(List<CatalogItemCatalogResultPayloadArgs> catalogResultPayloads) {
            return catalogResultPayloads(Output.of(catalogResultPayloads));
        }

        /**
         * @param catalogResultPayloads Catalog result payload.
         * 
         * @return builder
         * 
         */
        public Builder catalogResultPayloads(CatalogItemCatalogResultPayloadArgs... catalogResultPayloads) {
            return catalogResultPayloads(List.of(catalogResultPayloads));
        }

        /**
         * @param catalogSourcePayload Catalog source payload.
         * 
         * @return builder
         * 
         */
        public Builder catalogSourcePayload(@Nullable Output<CatalogItemCatalogSourcePayloadArgs> catalogSourcePayload) {
            $.catalogSourcePayload = catalogSourcePayload;
            return this;
        }

        /**
         * @param catalogSourcePayload Catalog source payload.
         * 
         * @return builder
         * 
         */
        public Builder catalogSourcePayload(CatalogItemCatalogSourcePayloadArgs catalogSourcePayload) {
            return catalogSourcePayload(Output.of(catalogSourcePayload));
        }

        /**
         * @param cloneCatalogItemTrigger (Updatable) An optional property when incremented triggers Clone Catalog Item. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder cloneCatalogItemTrigger(@Nullable Output<Integer> cloneCatalogItemTrigger) {
            $.cloneCatalogItemTrigger = cloneCatalogItemTrigger;
            return this;
        }

        /**
         * @param cloneCatalogItemTrigger (Updatable) An optional property when incremented triggers Clone Catalog Item. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder cloneCatalogItemTrigger(Integer cloneCatalogItemTrigger) {
            return cloneCatalogItemTrigger(Output.of(cloneCatalogItemTrigger));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configSourceType Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
         * 
         * @return builder
         * 
         */
        public Builder configSourceType(@Nullable Output<String> configSourceType) {
            $.configSourceType = configSourceType;
            return this;
        }

        /**
         * @param configSourceType Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
         * 
         * @return builder
         * 
         */
        public Builder configSourceType(String configSourceType) {
            return configSourceType(Output.of(configSourceType));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The description of the CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The CatalogItem name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The CatalogItem name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param lifecycleDetails The details of lifecycle state CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails The details of lifecycle state CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param listingId The catalog listing Id.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The catalog listing Id.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param listingVersion The catalog package version.
         * 
         * @return builder
         * 
         */
        public Builder listingVersion(@Nullable Output<String> listingVersion) {
            $.listingVersion = listingVersion;
            return this;
        }

        /**
         * @param listingVersion The catalog package version.
         * 
         * @return builder
         * 
         */
        public Builder listingVersion(String listingVersion) {
            return listingVersion(Output.of(listingVersion));
        }

        /**
         * @param packageType Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
         * 
         * @return builder
         * 
         */
        public Builder packageType(@Nullable Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param shortDescription (Updatable) Short description about the catalog item.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(@Nullable Output<String> shortDescription) {
            $.shortDescription = shortDescription;
            return this;
        }

        /**
         * @param shortDescription (Updatable) Short description about the catalog item.
         * 
         * @return builder
         * 
         */
        public Builder shortDescription(String shortDescription) {
            return shortDescription(Output.of(shortDescription));
        }

        /**
         * @param shouldListPublicItems The indicator to append Public Items from the root compartment to any query, when set to TRUE.
         * 
         * @return builder
         * 
         */
        public Builder shouldListPublicItems(@Nullable Output<Boolean> shouldListPublicItems) {
            $.shouldListPublicItems = shouldListPublicItems;
            return this;
        }

        /**
         * @param shouldListPublicItems The indicator to append Public Items from the root compartment to any query, when set to TRUE.
         * 
         * @return builder
         * 
         */
        public Builder shouldListPublicItems(Boolean shouldListPublicItems) {
            return shouldListPublicItems(Output.of(shouldListPublicItems));
        }

        /**
         * @param state The current state of the CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the CatalogItem.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeBackfillLastChecked The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeBackfillLastChecked(@Nullable Output<String> timeBackfillLastChecked) {
            $.timeBackfillLastChecked = timeBackfillLastChecked;
            return this;
        }

        /**
         * @param timeBackfillLastChecked The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeBackfillLastChecked(String timeBackfillLastChecked) {
            return timeBackfillLastChecked(Output.of(timeBackfillLastChecked));
        }

        /**
         * @param timeCreated The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeLastChecked The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeLastChecked(@Nullable Output<String> timeLastChecked) {
            $.timeLastChecked = timeLastChecked;
            return this;
        }

        /**
         * @param timeLastChecked The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeLastChecked(String timeLastChecked) {
            return timeLastChecked(Output.of(timeLastChecked));
        }

        /**
         * @param timeReleased The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeReleased(@Nullable Output<String> timeReleased) {
            $.timeReleased = timeReleased;
            return this;
        }

        /**
         * @param timeReleased The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeReleased(String timeReleased) {
            return timeReleased(Output.of(timeReleased));
        }

        /**
         * @param timeUpdated The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param versionDescription (Updatable) Version description about the catalog item.
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(@Nullable Output<String> versionDescription) {
            $.versionDescription = versionDescription;
            return this;
        }

        /**
         * @param versionDescription (Updatable) Version description about the catalog item.
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(String versionDescription) {
            return versionDescription(Output.of(versionDescription));
        }

        public CatalogItemState build() {
            return $;
        }
    }

}
