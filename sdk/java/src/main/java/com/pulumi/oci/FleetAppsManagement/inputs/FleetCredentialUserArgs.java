// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetCredentialUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetCredentialUserArgs Empty = new FleetCredentialUserArgs();

    /**
     * (Updatable) Credential Type.
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return (Updatable) Credential Type.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * (Updatable) The Vault Key version.
     * 
     */
    @Import(name="keyVersion")
    private @Nullable Output<String> keyVersion;

    /**
     * @return (Updatable) The Vault Key version.
     * 
     */
    public Optional<Output<String>> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * (Updatable) The secret version.
     * 
     */
    @Import(name="secretVersion")
    private @Nullable Output<String> secretVersion;

    /**
     * @return (Updatable) The secret version.
     * 
     */
    public Optional<Output<String>> secretVersion() {
        return Optional.ofNullable(this.secretVersion);
    }

    /**
     * (Updatable) The value corresponding to the credential.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return (Updatable) The value corresponding to the credential.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private FleetCredentialUserArgs() {}

    private FleetCredentialUserArgs(FleetCredentialUserArgs $) {
        this.credentialType = $.credentialType;
        this.keyId = $.keyId;
        this.keyVersion = $.keyVersion;
        this.secretId = $.secretId;
        this.secretVersion = $.secretVersion;
        this.value = $.value;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetCredentialUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetCredentialUserArgs $;

        public Builder() {
            $ = new FleetCredentialUserArgs();
        }

        public Builder(FleetCredentialUserArgs defaults) {
            $ = new FleetCredentialUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType (Updatable) Credential Type.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType (Updatable) Credential Type.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param keyId (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId (Updatable) OCID for the Vault Key that will be used to encrypt/decrypt the value given.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyVersion (Updatable) The Vault Key version.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(@Nullable Output<String> keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        /**
         * @param keyVersion (Updatable) The Vault Key version.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(String keyVersion) {
            return keyVersion(Output.of(keyVersion));
        }

        /**
         * @param secretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param secretVersion (Updatable) The secret version.
         * 
         * @return builder
         * 
         */
        public Builder secretVersion(@Nullable Output<String> secretVersion) {
            $.secretVersion = secretVersion;
            return this;
        }

        /**
         * @param secretVersion (Updatable) The secret version.
         * 
         * @return builder
         * 
         */
        public Builder secretVersion(String secretVersion) {
            return secretVersion(Output.of(secretVersion));
        }

        /**
         * @param value (Updatable) The value corresponding to the credential.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value (Updatable) The value corresponding to the credential.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param vaultId (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) OCID for the Vault that will be used to fetch the key to encrypt/decrypt the value given.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public FleetCredentialUserArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("FleetCredentialUserArgs", "credentialType");
            }
            return $;
        }
    }

}
