// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetCatalogItemsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogItemsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCatalogItemsPlainArgs Empty = new GetCatalogItemsPlainArgs();

    /**
     * catalogListingId of the package. This is an integer whose min and max length are specified.
     * 
     */
    @Import(name="catalogListingId")
    private @Nullable String catalogListingId;

    /**
     * @return catalogListingId of the package. This is an integer whose min and max length are specified.
     * 
     */
    public Optional<String> catalogListingId() {
        return Optional.ofNullable(this.catalogListingId);
    }

    /**
     * Parameter to list all catalog items only with latest version or list all catalog items with all versions.
     * 
     */
    @Import(name="catalogListingVersionCriteria")
    private @Nullable String catalogListingVersionCriteria;

    /**
     * @return Parameter to list all catalog items only with latest version or list all catalog items with all versions.
     * 
     */
    public Optional<String> catalogListingVersionCriteria() {
        return Optional.ofNullable(this.catalogListingVersionCriteria);
    }

    /**
     * (Updatable) The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return (Updatable) The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    @Import(name="configSourceType")
    private @Nullable String configSourceType;

    /**
     * @return The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    public Optional<String> configSourceType() {
        return Optional.ofNullable(this.configSourceType);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetCatalogItemsFilter> filters;

    public Optional<List<GetCatalogItemsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    @Import(name="shouldListPublicItems")
    private @Nullable Boolean shouldListPublicItems;

    /**
     * @return The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    public Optional<Boolean> shouldListPublicItems() {
        return Optional.ofNullable(this.shouldListPublicItems);
    }

    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetCatalogItemsPlainArgs() {}

    private GetCatalogItemsPlainArgs(GetCatalogItemsPlainArgs $) {
        this.catalogListingId = $.catalogListingId;
        this.catalogListingVersionCriteria = $.catalogListingVersionCriteria;
        this.compartmentId = $.compartmentId;
        this.configSourceType = $.configSourceType;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.shouldListPublicItems = $.shouldListPublicItems;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogItemsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogItemsPlainArgs $;

        public Builder() {
            $ = new GetCatalogItemsPlainArgs();
        }

        public Builder(GetCatalogItemsPlainArgs defaults) {
            $ = new GetCatalogItemsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogListingId catalogListingId of the package. This is an integer whose min and max length are specified.
         * 
         * @return builder
         * 
         */
        public Builder catalogListingId(@Nullable String catalogListingId) {
            $.catalogListingId = catalogListingId;
            return this;
        }

        /**
         * @param catalogListingVersionCriteria Parameter to list all catalog items only with latest version or list all catalog items with all versions.
         * 
         * @return builder
         * 
         */
        public Builder catalogListingVersionCriteria(@Nullable String catalogListingVersionCriteria) {
            $.catalogListingVersionCriteria = catalogListingVersionCriteria;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param configSourceType The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
         * 
         * @return builder
         * 
         */
        public Builder configSourceType(@Nullable String configSourceType) {
            $.configSourceType = configSourceType;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetCatalogItemsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetCatalogItemsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param shouldListPublicItems The indicator to append Public Items from the root compartment to any query, when set to TRUE.
         * 
         * @return builder
         * 
         */
        public Builder shouldListPublicItems(@Nullable Boolean shouldListPublicItems) {
            $.shouldListPublicItems = shouldListPublicItems;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetCatalogItemsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetCatalogItemsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
