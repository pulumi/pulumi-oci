// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetComplianceRecordsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetComplianceRecordsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetComplianceRecordsPlainArgs Empty = new GetComplianceRecordsPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * If set to true, resources will be returned for not only the provided compartment, but all compartments which descend from it. Which resources are returned and their field contents depends on the value of accessLevel.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return If set to true, resources will be returned for not only the provided compartment, but all compartments which descend from it. Which resources are returned and their field contents depends on the value of accessLevel.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * Target Compliance State.
     * 
     */
    @Import(name="complianceState")
    private @Nullable String complianceState;

    /**
     * @return Target Compliance State.
     * 
     */
    public Optional<String> complianceState() {
        return Optional.ofNullable(this.complianceState);
    }

    /**
     * Entity identifier.Ex:FleetId
     * 
     */
    @Import(name="entityId")
    private @Nullable String entityId;

    /**
     * @return Entity identifier.Ex:FleetId
     * 
     */
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="filters")
    private @Nullable List<GetComplianceRecordsFilter> filters;

    public Optional<List<GetComplianceRecordsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Product Name.
     * 
     */
    @Import(name="productName")
    private @Nullable String productName;

    /**
     * @return Product Name.
     * 
     */
    public Optional<String> productName() {
        return Optional.ofNullable(this.productName);
    }

    /**
     * ProductStack name.
     * 
     */
    @Import(name="productStack")
    private @Nullable String productStack;

    /**
     * @return ProductStack name.
     * 
     */
    public Optional<String> productStack() {
        return Optional.ofNullable(this.productStack);
    }

    /**
     * Resource identifier.
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return Resource identifier.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Unique target name
     * 
     */
    @Import(name="targetName")
    private @Nullable String targetName;

    /**
     * @return Unique target name
     * 
     */
    public Optional<String> targetName() {
        return Optional.ofNullable(this.targetName);
    }

    private GetComplianceRecordsPlainArgs() {}

    private GetComplianceRecordsPlainArgs(GetComplianceRecordsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.complianceState = $.complianceState;
        this.entityId = $.entityId;
        this.filters = $.filters;
        this.productName = $.productName;
        this.productStack = $.productStack;
        this.resourceId = $.resourceId;
        this.targetName = $.targetName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetComplianceRecordsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetComplianceRecordsPlainArgs $;

        public Builder() {
            $ = new GetComplianceRecordsPlainArgs();
        }

        public Builder(GetComplianceRecordsPlainArgs defaults) {
            $ = new GetComplianceRecordsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree If set to true, resources will be returned for not only the provided compartment, but all compartments which descend from it. Which resources are returned and their field contents depends on the value of accessLevel.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param complianceState Target Compliance State.
         * 
         * @return builder
         * 
         */
        public Builder complianceState(@Nullable String complianceState) {
            $.complianceState = complianceState;
            return this;
        }

        /**
         * @param entityId Entity identifier.Ex:FleetId
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable String entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder filters(@Nullable List<GetComplianceRecordsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetComplianceRecordsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param productName Product Name.
         * 
         * @return builder
         * 
         */
        public Builder productName(@Nullable String productName) {
            $.productName = productName;
            return this;
        }

        /**
         * @param productStack ProductStack name.
         * 
         * @return builder
         * 
         */
        public Builder productStack(@Nullable String productStack) {
            $.productStack = productStack;
            return this;
        }

        /**
         * @param resourceId Resource identifier.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param targetName Unique target name
         * 
         * @return builder
         * 
         */
        public Builder targetName(@Nullable String targetName) {
            $.targetName = targetName;
            return this;
        }

        public GetComplianceRecordsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetComplianceRecordsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
