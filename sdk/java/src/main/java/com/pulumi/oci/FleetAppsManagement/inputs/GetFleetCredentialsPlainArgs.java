// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetFleetCredentialsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFleetCredentialsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFleetCredentialsPlainArgs Empty = new GetFleetCredentialsPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources whose credentialLevel matches the given credentialLevel.
     * 
     */
    @Import(name="credentialLevel")
    private @Nullable String credentialLevel;

    /**
     * @return A filter to return only resources whose credentialLevel matches the given credentialLevel.
     * 
     */
    public Optional<String> credentialLevel() {
        return Optional.ofNullable(this.credentialLevel);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetFleetCredentialsFilter> filters;

    public Optional<List<GetFleetCredentialsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Fleet identifier.
     * 
     */
    @Import(name="fleetId", required=true)
    private String fleetId;

    /**
     * @return Unique Fleet identifier.
     * 
     */
    public String fleetId() {
        return this.fleetId;
    }

    /**
     * A filter to return only resources whose credential identifier matches the given identifier.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return A filter to return only resources whose credential identifier matches the given identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource Identifier
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return Resource Identifier
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only resources whose target matches the given target name.
     * 
     */
    @Import(name="target")
    private @Nullable String target;

    /**
     * @return A filter to return only resources whose target matches the given target name.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }

    private GetFleetCredentialsPlainArgs() {}

    private GetFleetCredentialsPlainArgs(GetFleetCredentialsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.credentialLevel = $.credentialLevel;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fleetId = $.fleetId;
        this.id = $.id;
        this.resourceId = $.resourceId;
        this.state = $.state;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFleetCredentialsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFleetCredentialsPlainArgs $;

        public Builder() {
            $ = new GetFleetCredentialsPlainArgs();
        }

        public Builder(GetFleetCredentialsPlainArgs defaults) {
            $ = new GetFleetCredentialsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param credentialLevel A filter to return only resources whose credentialLevel matches the given credentialLevel.
         * 
         * @return builder
         * 
         */
        public Builder credentialLevel(@Nullable String credentialLevel) {
            $.credentialLevel = credentialLevel;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetFleetCredentialsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFleetCredentialsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fleetId Unique Fleet identifier.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(String fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param id A filter to return only resources whose credential identifier matches the given identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param resourceId Resource Identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param target A filter to return only resources whose target matches the given target name.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable String target) {
            $.target = target;
            return this;
        }

        public GetFleetCredentialsPlainArgs build() {
            if ($.fleetId == null) {
                throw new MissingRequiredPropertyException("GetFleetCredentialsPlainArgs", "fleetId");
            }
            return $;
        }
    }

}
