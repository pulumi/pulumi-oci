// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetFleetProductsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFleetProductsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFleetProductsPlainArgs Empty = new GetFleetProductsPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetFleetProductsFilter> filters;

    public Optional<List<GetFleetProductsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Fleet identifier.
     * 
     */
    @Import(name="fleetId", required=true)
    private String fleetId;

    /**
     * @return Unique Fleet identifier.
     * 
     */
    public String fleetId() {
        return this.fleetId;
    }

    /**
     * Resource Display Name.
     * 
     */
    @Import(name="resourceDisplayName")
    private @Nullable String resourceDisplayName;

    /**
     * @return Resource Display Name.
     * 
     */
    public Optional<String> resourceDisplayName() {
        return Optional.ofNullable(this.resourceDisplayName);
    }

    /**
     * Resource Identifier
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return Resource Identifier
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private GetFleetProductsPlainArgs() {}

    private GetFleetProductsPlainArgs(GetFleetProductsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fleetId = $.fleetId;
        this.resourceDisplayName = $.resourceDisplayName;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFleetProductsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFleetProductsPlainArgs $;

        public Builder() {
            $ = new GetFleetProductsPlainArgs();
        }

        public Builder(GetFleetProductsPlainArgs defaults) {
            $ = new GetFleetProductsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetFleetProductsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFleetProductsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fleetId Unique Fleet identifier.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(String fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param resourceDisplayName Resource Display Name.
         * 
         * @return builder
         * 
         */
        public Builder resourceDisplayName(@Nullable String resourceDisplayName) {
            $.resourceDisplayName = resourceDisplayName;
            return this;
        }

        /**
         * @param resourceId Resource Identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public GetFleetProductsPlainArgs build() {
            if ($.fleetId == null) {
                throw new MissingRequiredPropertyException("GetFleetProductsPlainArgs", "fleetId");
            }
            return $;
        }
    }

}
