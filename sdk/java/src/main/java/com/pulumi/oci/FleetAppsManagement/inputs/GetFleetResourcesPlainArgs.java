// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetFleetResourcesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFleetResourcesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFleetResourcesPlainArgs Empty = new GetFleetResourcesPlainArgs();

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetFleetResourcesFilter> filters;

    public Optional<List<GetFleetResourcesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Fleet identifier.
     * 
     */
    @Import(name="fleetId", required=true)
    private String fleetId;

    /**
     * @return Unique Fleet identifier.
     * 
     */
    public String fleetId() {
        return this.fleetId;
    }

    /**
     * A filter to return only resources whose resourceType matches the given resourceType.
     * 
     */
    @Import(name="fleetResourceType")
    private @Nullable String fleetResourceType;

    /**
     * @return A filter to return only resources whose resourceType matches the given resourceType.
     * 
     */
    public Optional<String> fleetResourceType() {
        return Optional.ofNullable(this.fleetResourceType);
    }

    /**
     * A filter to return only resources whose identifier matches the given identifier.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return A filter to return only resources whose identifier matches the given identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetFleetResourcesPlainArgs() {}

    private GetFleetResourcesPlainArgs(GetFleetResourcesPlainArgs $) {
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fleetId = $.fleetId;
        this.fleetResourceType = $.fleetResourceType;
        this.id = $.id;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFleetResourcesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFleetResourcesPlainArgs $;

        public Builder() {
            $ = new GetFleetResourcesPlainArgs();
        }

        public Builder(GetFleetResourcesPlainArgs defaults) {
            $ = new GetFleetResourcesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetFleetResourcesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFleetResourcesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fleetId Unique Fleet identifier.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(String fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param fleetResourceType A filter to return only resources whose resourceType matches the given resourceType.
         * 
         * @return builder
         * 
         */
        public Builder fleetResourceType(@Nullable String fleetResourceType) {
            $.fleetResourceType = fleetResourceType;
            return this;
        }

        /**
         * @param id A filter to return only resources whose identifier matches the given identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetFleetResourcesPlainArgs build() {
            if ($.fleetId == null) {
                throw new MissingRequiredPropertyException("GetFleetResourcesPlainArgs", "fleetId");
            }
            return $;
        }
    }

}
