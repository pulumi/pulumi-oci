// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.FleetAppsManagement.inputs.GetFleetsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFleetsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFleetsPlainArgs Empty = new GetFleetsPlainArgs();

    /**
     * A filter to return resources that match the Application Type/Product Stack given..
     * 
     */
    @Import(name="applicationType")
    private @Nullable String applicationType;

    /**
     * @return A filter to return resources that match the Application Type/Product Stack given..
     * 
     */
    public Optional<String> applicationType() {
        return Optional.ofNullable(this.applicationType);
    }

    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that match the Environment Type given.
     * 
     */
    @Import(name="environmentType")
    private @Nullable String environmentType;

    /**
     * @return A filter to return resources that match the Environment Type given.
     * 
     */
    public Optional<String> environmentType() {
        return Optional.ofNullable(this.environmentType);
    }

    @Import(name="filters")
    private @Nullable List<GetFleetsFilter> filters;

    public Optional<List<GetFleetsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return fleets whose fleetType matches the given fleetType.
     * 
     */
    @Import(name="fleetType")
    private @Nullable String fleetType;

    /**
     * @return A filter to return fleets whose fleetType matches the given fleetType.
     * 
     */
    public Optional<String> fleetType() {
        return Optional.ofNullable(this.fleetType);
    }

    /**
     * Unique identifier or OCID for listing a single fleet by id. Either compartmentId or id must be provided.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Unique identifier or OCID for listing a single fleet by id. Either compartmentId or id must be provided.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return resources that match the Product/Product Stack given.
     * 
     */
    @Import(name="product")
    private @Nullable String product;

    /**
     * @return A filter to return resources that match the Product/Product Stack given.
     * 
     */
    public Optional<String> product() {
        return Optional.ofNullable(this.product);
    }

    /**
     * A filter to return fleets whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return fleets whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetFleetsPlainArgs() {}

    private GetFleetsPlainArgs(GetFleetsPlainArgs $) {
        this.applicationType = $.applicationType;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.environmentType = $.environmentType;
        this.filters = $.filters;
        this.fleetType = $.fleetType;
        this.id = $.id;
        this.product = $.product;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFleetsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFleetsPlainArgs $;

        public Builder() {
            $ = new GetFleetsPlainArgs();
        }

        public Builder(GetFleetsPlainArgs defaults) {
            $ = new GetFleetsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationType A filter to return resources that match the Application Type/Product Stack given..
         * 
         * @return builder
         * 
         */
        public Builder applicationType(@Nullable String applicationType) {
            $.applicationType = applicationType;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param environmentType A filter to return resources that match the Environment Type given.
         * 
         * @return builder
         * 
         */
        public Builder environmentType(@Nullable String environmentType) {
            $.environmentType = environmentType;
            return this;
        }

        public Builder filters(@Nullable List<GetFleetsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFleetsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fleetType A filter to return fleets whose fleetType matches the given fleetType.
         * 
         * @return builder
         * 
         */
        public Builder fleetType(@Nullable String fleetType) {
            $.fleetType = fleetType;
            return this;
        }

        /**
         * @param id Unique identifier or OCID for listing a single fleet by id. Either compartmentId or id must be provided.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param product A filter to return resources that match the Product/Product Stack given.
         * 
         * @return builder
         * 
         */
        public Builder product(@Nullable String product) {
            $.product = product;
            return this;
        }

        /**
         * @param state A filter to return fleets whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetFleetsPlainArgs build() {
            return $;
        }
    }

}
