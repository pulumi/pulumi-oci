// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.GetInventoryResourcesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInventoryResourcesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInventoryResourcesPlainArgs Empty = new GetInventoryResourcesPlainArgs();

    /**
     * A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}={value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;. Example: Identification.Development=Yes
     * 
     */
    @Import(name="definedTagEquals")
    private @Nullable List<String> definedTagEquals;

    /**
     * @return A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}={value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;. Example: Identification.Development=Yes
     * 
     */
    public Optional<List<String>> definedTagEquals() {
        return Optional.ofNullable(this.definedTagEquals);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetInventoryResourcesFilter> filters;

    public Optional<List<GetInventoryResourcesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagEquals")
    private @Nullable List<String> freeformTagEquals;

    /**
     * @return A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> freeformTagEquals() {
        return Optional.ofNullable(this.freeformTagEquals);
    }

    /**
     * A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is &#34;{resourceType}.{inventoryProperty}={value}&#34;. Example: Instance.displayName=TEST_INSTANCE
     * 
     */
    @Import(name="inventoryProperties")
    private @Nullable List<String> inventoryProperties;

    /**
     * @return A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is &#34;{resourceType}.{inventoryProperty}={value}&#34;. Example: Instance.displayName=TEST_INSTANCE
     * 
     */
    public Optional<List<String>> inventoryProperties() {
        return Optional.ofNullable(this.inventoryProperties);
    }

    /**
     * Fetch resources matching ANY or ALL criteria passed as params in &#34;tags&#34; and &#34;inventoryProperties&#34;. Example: matchingCriteria=ANY
     * 
     */
    @Import(name="matchingCriteria")
    private @Nullable String matchingCriteria;

    /**
     * @return Fetch resources matching ANY or ALL criteria passed as params in &#34;tags&#34; and &#34;inventoryProperties&#34;. Example: matchingCriteria=ANY
     * 
     */
    public Optional<String> matchingCriteria() {
        return Optional.ofNullable(this.matchingCriteria);
    }

    /**
     * A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
     * 
     */
    @Import(name="resourceCompartmentId", required=true)
    private String resourceCompartmentId;

    /**
     * @return A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
     * 
     */
    public String resourceCompartmentId() {
        return this.resourceCompartmentId;
    }

    /**
     * Resource Region
     * 
     */
    @Import(name="resourceRegion")
    private @Nullable String resourceRegion;

    /**
     * @return Resource Region
     * 
     */
    public Optional<String> resourceRegion() {
        return Optional.ofNullable(this.resourceRegion);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetInventoryResourcesPlainArgs() {}

    private GetInventoryResourcesPlainArgs(GetInventoryResourcesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTagEquals = $.definedTagEquals;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.freeformTagEquals = $.freeformTagEquals;
        this.inventoryProperties = $.inventoryProperties;
        this.matchingCriteria = $.matchingCriteria;
        this.resourceCompartmentId = $.resourceCompartmentId;
        this.resourceRegion = $.resourceRegion;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInventoryResourcesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInventoryResourcesPlainArgs $;

        public Builder() {
            $ = new GetInventoryResourcesPlainArgs();
        }

        public Builder(GetInventoryResourcesPlainArgs defaults) {
            $ = new GetInventoryResourcesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}={value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;. Example: Identification.Development=Yes
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(@Nullable List<String> definedTagEquals) {
            $.definedTagEquals = definedTagEquals;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}={value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;. Example: Identification.Development=Yes
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(String... definedTagEquals) {
            return definedTagEquals(List.of(definedTagEquals));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetInventoryResourcesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetInventoryResourcesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(@Nullable List<String> freeformTagEquals) {
            $.freeformTagEquals = freeformTagEquals;
            return this;
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(String... freeformTagEquals) {
            return freeformTagEquals(List.of(freeformTagEquals));
        }

        /**
         * @param inventoryProperties A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is &#34;{resourceType}.{inventoryProperty}={value}&#34;. Example: Instance.displayName=TEST_INSTANCE
         * 
         * @return builder
         * 
         */
        public Builder inventoryProperties(@Nullable List<String> inventoryProperties) {
            $.inventoryProperties = inventoryProperties;
            return this;
        }

        /**
         * @param inventoryProperties A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is &#34;{resourceType}.{inventoryProperty}={value}&#34;. Example: Instance.displayName=TEST_INSTANCE
         * 
         * @return builder
         * 
         */
        public Builder inventoryProperties(String... inventoryProperties) {
            return inventoryProperties(List.of(inventoryProperties));
        }

        /**
         * @param matchingCriteria Fetch resources matching ANY or ALL criteria passed as params in &#34;tags&#34; and &#34;inventoryProperties&#34;. Example: matchingCriteria=ANY
         * 
         * @return builder
         * 
         */
        public Builder matchingCriteria(@Nullable String matchingCriteria) {
            $.matchingCriteria = matchingCriteria;
            return this;
        }

        /**
         * @param resourceCompartmentId A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
         * 
         * @return builder
         * 
         */
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            $.resourceCompartmentId = resourceCompartmentId;
            return this;
        }

        /**
         * @param resourceRegion Resource Region
         * 
         * @return builder
         * 
         */
        public Builder resourceRegion(@Nullable String resourceRegion) {
            $.resourceRegion = resourceRegion;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetInventoryResourcesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetInventoryResourcesPlainArgs", "compartmentId");
            }
            if ($.resourceCompartmentId == null) {
                throw new MissingRequiredPropertyException("GetInventoryResourcesPlainArgs", "resourceCompartmentId");
            }
            return $;
        }
    }

}
