// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.FleetAppsManagement.inputs.GetPatchesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPatchesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPatchesArgs Empty = new GetPatchesArgs();

    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetPatchesFilterArgs>> filters;

    public Optional<Output<List<GetPatchesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only resources that match the entire name given.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Patch Type platformConfigurationId associated with the Patch.
     * 
     */
    @Import(name="patchTypeId")
    private @Nullable Output<String> patchTypeId;

    /**
     * @return Patch Type platformConfigurationId associated with the Patch.
     * 
     */
    public Optional<Output<String>> patchTypeId() {
        return Optional.ofNullable(this.patchTypeId);
    }

    /**
     * Product platformConfigurationId associated with the Patch.
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return Product platformConfigurationId associated with the Patch.
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * Filter patch based on compliance policy rules for the Product.
     * 
     */
    @Import(name="shouldCompliancePolicyRulesBeApplied")
    private @Nullable Output<Boolean> shouldCompliancePolicyRulesBeApplied;

    /**
     * @return Filter patch based on compliance policy rules for the Product.
     * 
     */
    public Optional<Output<Boolean>> shouldCompliancePolicyRulesBeApplied() {
        return Optional.ofNullable(this.shouldCompliancePolicyRulesBeApplied);
    }

    /**
     * The current state of the Patch.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the Patch.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return patches whose release date is greater than or equal to the given date.
     * 
     */
    @Import(name="timeReleasedGreaterThanOrEqualTo")
    private @Nullable Output<String> timeReleasedGreaterThanOrEqualTo;

    /**
     * @return A filter to return patches whose release date is greater than or equal to the given date.
     * 
     */
    public Optional<Output<String>> timeReleasedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeReleasedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return patches whose release date is less than the given date.
     * 
     */
    @Import(name="timeReleasedLessThan")
    private @Nullable Output<String> timeReleasedLessThan;

    /**
     * @return A filter to return patches whose release date is less than the given date.
     * 
     */
    public Optional<Output<String>> timeReleasedLessThan() {
        return Optional.ofNullable(this.timeReleasedLessThan);
    }

    /**
     * DefinedBy type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return DefinedBy type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Product version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Product version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetPatchesArgs() {}

    private GetPatchesArgs(GetPatchesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.id = $.id;
        this.name = $.name;
        this.patchTypeId = $.patchTypeId;
        this.productId = $.productId;
        this.shouldCompliancePolicyRulesBeApplied = $.shouldCompliancePolicyRulesBeApplied;
        this.state = $.state;
        this.timeReleasedGreaterThanOrEqualTo = $.timeReleasedGreaterThanOrEqualTo;
        this.timeReleasedLessThan = $.timeReleasedLessThan;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPatchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPatchesArgs $;

        public Builder() {
            $ = new GetPatchesArgs();
        }

        public Builder(GetPatchesArgs defaults) {
            $ = new GetPatchesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetPatchesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPatchesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPatchesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patchTypeId Patch Type platformConfigurationId associated with the Patch.
         * 
         * @return builder
         * 
         */
        public Builder patchTypeId(@Nullable Output<String> patchTypeId) {
            $.patchTypeId = patchTypeId;
            return this;
        }

        /**
         * @param patchTypeId Patch Type platformConfigurationId associated with the Patch.
         * 
         * @return builder
         * 
         */
        public Builder patchTypeId(String patchTypeId) {
            return patchTypeId(Output.of(patchTypeId));
        }

        /**
         * @param productId Product platformConfigurationId associated with the Patch.
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId Product platformConfigurationId associated with the Patch.
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param shouldCompliancePolicyRulesBeApplied Filter patch based on compliance policy rules for the Product.
         * 
         * @return builder
         * 
         */
        public Builder shouldCompliancePolicyRulesBeApplied(@Nullable Output<Boolean> shouldCompliancePolicyRulesBeApplied) {
            $.shouldCompliancePolicyRulesBeApplied = shouldCompliancePolicyRulesBeApplied;
            return this;
        }

        /**
         * @param shouldCompliancePolicyRulesBeApplied Filter patch based on compliance policy rules for the Product.
         * 
         * @return builder
         * 
         */
        public Builder shouldCompliancePolicyRulesBeApplied(Boolean shouldCompliancePolicyRulesBeApplied) {
            return shouldCompliancePolicyRulesBeApplied(Output.of(shouldCompliancePolicyRulesBeApplied));
        }

        /**
         * @param state The current state of the Patch.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the Patch.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeReleasedGreaterThanOrEqualTo A filter to return patches whose release date is greater than or equal to the given date.
         * 
         * @return builder
         * 
         */
        public Builder timeReleasedGreaterThanOrEqualTo(@Nullable Output<String> timeReleasedGreaterThanOrEqualTo) {
            $.timeReleasedGreaterThanOrEqualTo = timeReleasedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeReleasedGreaterThanOrEqualTo A filter to return patches whose release date is greater than or equal to the given date.
         * 
         * @return builder
         * 
         */
        public Builder timeReleasedGreaterThanOrEqualTo(String timeReleasedGreaterThanOrEqualTo) {
            return timeReleasedGreaterThanOrEqualTo(Output.of(timeReleasedGreaterThanOrEqualTo));
        }

        /**
         * @param timeReleasedLessThan A filter to return patches whose release date is less than the given date.
         * 
         * @return builder
         * 
         */
        public Builder timeReleasedLessThan(@Nullable Output<String> timeReleasedLessThan) {
            $.timeReleasedLessThan = timeReleasedLessThan;
            return this;
        }

        /**
         * @param timeReleasedLessThan A filter to return patches whose release date is less than the given date.
         * 
         * @return builder
         * 
         */
        public Builder timeReleasedLessThan(String timeReleasedLessThan) {
            return timeReleasedLessThan(Output.of(timeReleasedLessThan));
        }

        /**
         * @param type DefinedBy type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type DefinedBy type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version Product version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Product version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetPatchesArgs build() {
            return $;
        }
    }

}
