// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.inputs.TaskRecordDetailsExecutionDetailsContentArgs;
import com.pulumi.oci.FleetAppsManagement.inputs.TaskRecordDetailsExecutionDetailsCredentialArgs;
import com.pulumi.oci.FleetAppsManagement.inputs.TaskRecordDetailsExecutionDetailsVariablesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskRecordDetailsExecutionDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskRecordDetailsExecutionDetailsArgs Empty = new TaskRecordDetailsExecutionDetailsArgs();

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * (Updatable) Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
     * 
     */
    @Import(name="command")
    private @Nullable Output<String> command;

    /**
     * @return (Updatable) Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
     * 
     */
    public Optional<Output<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * (Updatable) Catalog Id having config file.
     * 
     */
    @Import(name="configFile")
    private @Nullable Output<String> configFile;

    /**
     * @return (Updatable) Catalog Id having config file.
     * 
     */
    public Optional<Output<String>> configFile() {
        return Optional.ofNullable(this.configFile);
    }

    /**
     * (Updatable) Content Source details.
     * 
     */
    @Import(name="content")
    private @Nullable Output<TaskRecordDetailsExecutionDetailsContentArgs> content;

    /**
     * @return (Updatable) Content Source details.
     * 
     */
    public Optional<Output<TaskRecordDetailsExecutionDetailsContentArgs>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * (Updatable) Credentials required for executing the task.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<List<TaskRecordDetailsExecutionDetailsCredentialArgs>> credentials;

    /**
     * @return (Updatable) Credentials required for executing the task.
     * 
     */
    public Optional<Output<List<TaskRecordDetailsExecutionDetailsCredentialArgs>>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * (Updatable) Endpoint to be invoked.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return (Updatable) Endpoint to be invoked.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * (Updatable) The action type of the task
     * 
     */
    @Import(name="executionType", required=true)
    private Output<String> executionType;

    /**
     * @return (Updatable) The action type of the task
     * 
     */
    public Output<String> executionType() {
        return this.executionType;
    }

    /**
     * (Updatable) Is the Content an executable file?
     * 
     */
    @Import(name="isExecutableContent")
    private @Nullable Output<Boolean> isExecutableContent;

    /**
     * @return (Updatable) Is the Content an executable file?
     * 
     */
    public Optional<Output<Boolean>> isExecutableContent() {
        return Optional.ofNullable(this.isExecutableContent);
    }

    /**
     * (Updatable) Is the script locked to prevent changes directly in Object Storage?
     * 
     */
    @Import(name="isLocked")
    private @Nullable Output<Boolean> isLocked;

    /**
     * @return (Updatable) Is the script locked to prevent changes directly in Object Storage?
     * 
     */
    public Optional<Output<Boolean>> isLocked() {
        return Optional.ofNullable(this.isLocked);
    }

    /**
     * (Updatable) Is read output variable enabled
     * 
     */
    @Import(name="isReadOutputVariableEnabled")
    private @Nullable Output<Boolean> isReadOutputVariableEnabled;

    /**
     * @return (Updatable) Is read output variable enabled
     * 
     */
    public Optional<Output<Boolean>> isReadOutputVariableEnabled() {
        return Optional.ofNullable(this.isReadOutputVariableEnabled);
    }

    /**
     * (Updatable) OCID of the compartment to which the resource belongs to.
     * 
     */
    @Import(name="targetCompartmentId")
    private @Nullable Output<String> targetCompartmentId;

    /**
     * @return (Updatable) OCID of the compartment to which the resource belongs to.
     * 
     */
    public Optional<Output<String>> targetCompartmentId() {
        return Optional.ofNullable(this.targetCompartmentId);
    }

    /**
     * (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<TaskRecordDetailsExecutionDetailsVariablesArgs> variables;

    /**
     * @return (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
     * 
     */
    public Optional<Output<TaskRecordDetailsExecutionDetailsVariablesArgs>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private TaskRecordDetailsExecutionDetailsArgs() {}

    private TaskRecordDetailsExecutionDetailsArgs(TaskRecordDetailsExecutionDetailsArgs $) {
        this.catalogId = $.catalogId;
        this.command = $.command;
        this.configFile = $.configFile;
        this.content = $.content;
        this.credentials = $.credentials;
        this.endpoint = $.endpoint;
        this.executionType = $.executionType;
        this.isExecutableContent = $.isExecutableContent;
        this.isLocked = $.isLocked;
        this.isReadOutputVariableEnabled = $.isReadOutputVariableEnabled;
        this.targetCompartmentId = $.targetCompartmentId;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskRecordDetailsExecutionDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskRecordDetailsExecutionDetailsArgs $;

        public Builder() {
            $ = new TaskRecordDetailsExecutionDetailsArgs();
        }

        public Builder(TaskRecordDetailsExecutionDetailsArgs defaults) {
            $ = new TaskRecordDetailsExecutionDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param command (Updatable) Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable Output<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command (Updatable) Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
         * 
         * @return builder
         * 
         */
        public Builder command(String command) {
            return command(Output.of(command));
        }

        /**
         * @param configFile (Updatable) Catalog Id having config file.
         * 
         * @return builder
         * 
         */
        public Builder configFile(@Nullable Output<String> configFile) {
            $.configFile = configFile;
            return this;
        }

        /**
         * @param configFile (Updatable) Catalog Id having config file.
         * 
         * @return builder
         * 
         */
        public Builder configFile(String configFile) {
            return configFile(Output.of(configFile));
        }

        /**
         * @param content (Updatable) Content Source details.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<TaskRecordDetailsExecutionDetailsContentArgs> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content (Updatable) Content Source details.
         * 
         * @return builder
         * 
         */
        public Builder content(TaskRecordDetailsExecutionDetailsContentArgs content) {
            return content(Output.of(content));
        }

        /**
         * @param credentials (Updatable) Credentials required for executing the task.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<List<TaskRecordDetailsExecutionDetailsCredentialArgs>> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials (Updatable) Credentials required for executing the task.
         * 
         * @return builder
         * 
         */
        public Builder credentials(List<TaskRecordDetailsExecutionDetailsCredentialArgs> credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param credentials (Updatable) Credentials required for executing the task.
         * 
         * @return builder
         * 
         */
        public Builder credentials(TaskRecordDetailsExecutionDetailsCredentialArgs... credentials) {
            return credentials(List.of(credentials));
        }

        /**
         * @param endpoint (Updatable) Endpoint to be invoked.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint (Updatable) Endpoint to be invoked.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param executionType (Updatable) The action type of the task
         * 
         * @return builder
         * 
         */
        public Builder executionType(Output<String> executionType) {
            $.executionType = executionType;
            return this;
        }

        /**
         * @param executionType (Updatable) The action type of the task
         * 
         * @return builder
         * 
         */
        public Builder executionType(String executionType) {
            return executionType(Output.of(executionType));
        }

        /**
         * @param isExecutableContent (Updatable) Is the Content an executable file?
         * 
         * @return builder
         * 
         */
        public Builder isExecutableContent(@Nullable Output<Boolean> isExecutableContent) {
            $.isExecutableContent = isExecutableContent;
            return this;
        }

        /**
         * @param isExecutableContent (Updatable) Is the Content an executable file?
         * 
         * @return builder
         * 
         */
        public Builder isExecutableContent(Boolean isExecutableContent) {
            return isExecutableContent(Output.of(isExecutableContent));
        }

        /**
         * @param isLocked (Updatable) Is the script locked to prevent changes directly in Object Storage?
         * 
         * @return builder
         * 
         */
        public Builder isLocked(@Nullable Output<Boolean> isLocked) {
            $.isLocked = isLocked;
            return this;
        }

        /**
         * @param isLocked (Updatable) Is the script locked to prevent changes directly in Object Storage?
         * 
         * @return builder
         * 
         */
        public Builder isLocked(Boolean isLocked) {
            return isLocked(Output.of(isLocked));
        }

        /**
         * @param isReadOutputVariableEnabled (Updatable) Is read output variable enabled
         * 
         * @return builder
         * 
         */
        public Builder isReadOutputVariableEnabled(@Nullable Output<Boolean> isReadOutputVariableEnabled) {
            $.isReadOutputVariableEnabled = isReadOutputVariableEnabled;
            return this;
        }

        /**
         * @param isReadOutputVariableEnabled (Updatable) Is read output variable enabled
         * 
         * @return builder
         * 
         */
        public Builder isReadOutputVariableEnabled(Boolean isReadOutputVariableEnabled) {
            return isReadOutputVariableEnabled(Output.of(isReadOutputVariableEnabled));
        }

        /**
         * @param targetCompartmentId (Updatable) OCID of the compartment to which the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder targetCompartmentId(@Nullable Output<String> targetCompartmentId) {
            $.targetCompartmentId = targetCompartmentId;
            return this;
        }

        /**
         * @param targetCompartmentId (Updatable) OCID of the compartment to which the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder targetCompartmentId(String targetCompartmentId) {
            return targetCompartmentId(Output.of(targetCompartmentId));
        }

        /**
         * @param variables (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<TaskRecordDetailsExecutionDetailsVariablesArgs> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables (Updatable) The variable of the task. At least one of the dynamicArguments or output needs to be provided.
         * 
         * @return builder
         * 
         */
        public Builder variables(TaskRecordDetailsExecutionDetailsVariablesArgs variables) {
            return variables(Output.of(variables));
        }

        public TaskRecordDetailsExecutionDetailsArgs build() {
            if ($.executionType == null) {
                throw new MissingRequiredPropertyException("TaskRecordDetailsExecutionDetailsArgs", "executionType");
            }
            return $;
        }
    }

}
