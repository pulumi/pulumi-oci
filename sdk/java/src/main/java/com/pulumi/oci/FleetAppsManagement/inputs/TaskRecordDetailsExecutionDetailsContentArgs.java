// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskRecordDetailsExecutionDetailsContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskRecordDetailsExecutionDetailsContentArgs Empty = new TaskRecordDetailsExecutionDetailsContentArgs();

    /**
     * (Updatable) Bucket Name.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return (Updatable) Bucket Name.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * (Updatable) md5 checksum of the artifact.
     * 
     */
    @Import(name="checksum")
    private @Nullable Output<String> checksum;

    /**
     * @return (Updatable) md5 checksum of the artifact.
     * 
     */
    public Optional<Output<String>> checksum() {
        return Optional.ofNullable(this.checksum);
    }

    /**
     * (Updatable) Namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return (Updatable) Namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * (Updatable) Object Name.
     * 
     */
    @Import(name="object")
    private @Nullable Output<String> object;

    /**
     * @return (Updatable) Object Name.
     * 
     */
    public Optional<Output<String>> object() {
        return Optional.ofNullable(this.object);
    }

    /**
     * (Updatable) Content Source type details.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return (Updatable) Content Source type details.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private TaskRecordDetailsExecutionDetailsContentArgs() {}

    private TaskRecordDetailsExecutionDetailsContentArgs(TaskRecordDetailsExecutionDetailsContentArgs $) {
        this.bucket = $.bucket;
        this.catalogId = $.catalogId;
        this.checksum = $.checksum;
        this.namespace = $.namespace;
        this.object = $.object;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskRecordDetailsExecutionDetailsContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskRecordDetailsExecutionDetailsContentArgs $;

        public Builder() {
            $ = new TaskRecordDetailsExecutionDetailsContentArgs();
        }

        public Builder(TaskRecordDetailsExecutionDetailsContentArgs defaults) {
            $ = new TaskRecordDetailsExecutionDetailsContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket (Updatable) Bucket Name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket (Updatable) Bucket Name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param checksum (Updatable) md5 checksum of the artifact.
         * 
         * @return builder
         * 
         */
        public Builder checksum(@Nullable Output<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param checksum (Updatable) md5 checksum of the artifact.
         * 
         * @return builder
         * 
         */
        public Builder checksum(String checksum) {
            return checksum(Output.of(checksum));
        }

        /**
         * @param namespace (Updatable) Namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace (Updatable) Namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param object (Updatable) Object Name.
         * 
         * @return builder
         * 
         */
        public Builder object(@Nullable Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object (Updatable) Object Name.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param sourceType (Updatable) Content Source type details.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType (Updatable) Content Source type details.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public TaskRecordDetailsExecutionDetailsContentArgs build() {
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("TaskRecordDetailsExecutionDetailsContentArgs", "sourceType");
            }
            return $;
        }
    }

}
