// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class TaskRecordDetailsPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskRecordDetailsPropertiesArgs Empty = new TaskRecordDetailsPropertiesArgs();

    /**
     * (Updatable) The number of retries allowed.
     * 
     */
    @Import(name="numRetries", required=true)
    private Output<Integer> numRetries;

    /**
     * @return (Updatable) The number of retries allowed.
     * 
     */
    public Output<Integer> numRetries() {
        return this.numRetries;
    }

    /**
     * (Updatable) The timeout in seconds for the task.
     * 
     */
    @Import(name="timeoutInSeconds", required=true)
    private Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) The timeout in seconds for the task.
     * 
     */
    public Output<Integer> timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    private TaskRecordDetailsPropertiesArgs() {}

    private TaskRecordDetailsPropertiesArgs(TaskRecordDetailsPropertiesArgs $) {
        this.numRetries = $.numRetries;
        this.timeoutInSeconds = $.timeoutInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskRecordDetailsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskRecordDetailsPropertiesArgs $;

        public Builder() {
            $ = new TaskRecordDetailsPropertiesArgs();
        }

        public Builder(TaskRecordDetailsPropertiesArgs defaults) {
            $ = new TaskRecordDetailsPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param numRetries (Updatable) The number of retries allowed.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(Output<Integer> numRetries) {
            $.numRetries = numRetries;
            return this;
        }

        /**
         * @param numRetries (Updatable) The number of retries allowed.
         * 
         * @return builder
         * 
         */
        public Builder numRetries(Integer numRetries) {
            return numRetries(Output.of(numRetries));
        }

        /**
         * @param timeoutInSeconds (Updatable) The timeout in seconds for the task.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds (Updatable) The timeout in seconds for the task.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        public TaskRecordDetailsPropertiesArgs build() {
            if ($.numRetries == null) {
                throw new MissingRequiredPropertyException("TaskRecordDetailsPropertiesArgs", "numRetries");
            }
            if ($.timeoutInSeconds == null) {
                throw new MissingRequiredPropertyException("TaskRecordDetailsPropertiesArgs", "timeoutInSeconds");
            }
            return $;
        }
    }

}
