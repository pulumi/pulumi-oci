// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.FleetCredentialEntitySpecifics;
import com.pulumi.oci.FleetAppsManagement.outputs.FleetCredentialPassword;
import com.pulumi.oci.FleetAppsManagement.outputs.FleetCredentialUser;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class FleetCredential {
    /**
     * @return Tenancy OCID
     * 
     */
    private String compartmentId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    private String displayName;
    /**
     * @return Credential specific Details.
     * 
     */
    private FleetCredentialEntitySpecifics entitySpecifics;
    /**
     * @return Credential Details.
     * 
     */
    private FleetCredentialPassword password;
    /**
     * @return Credential Details.
     * 
     */
    private FleetCredentialUser user;

    private FleetCredential() {}
    /**
     * @return Tenancy OCID
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Credential specific Details.
     * 
     */
    public FleetCredentialEntitySpecifics entitySpecifics() {
        return this.entitySpecifics;
    }
    /**
     * @return Credential Details.
     * 
     */
    public FleetCredentialPassword password() {
        return this.password;
    }
    /**
     * @return Credential Details.
     * 
     */
    public FleetCredentialUser user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String displayName;
        private FleetCredentialEntitySpecifics entitySpecifics;
        private FleetCredentialPassword password;
        private FleetCredentialUser user;
        public Builder() {}
        public Builder(FleetCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.entitySpecifics = defaults.entitySpecifics;
    	      this.password = defaults.password;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("FleetCredential", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("FleetCredential", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder entitySpecifics(FleetCredentialEntitySpecifics entitySpecifics) {
            if (entitySpecifics == null) {
              throw new MissingRequiredPropertyException("FleetCredential", "entitySpecifics");
            }
            this.entitySpecifics = entitySpecifics;
            return this;
        }
        @CustomType.Setter
        public Builder password(FleetCredentialPassword password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("FleetCredential", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder user(FleetCredentialUser user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("FleetCredential", "user");
            }
            this.user = user;
            return this;
        }
        public FleetCredential build() {
            final var _resultValue = new FleetCredential();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.entitySpecifics = entitySpecifics;
            _resultValue.password = password;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
