// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetAnnouncementsAnnouncementCollection;
import com.pulumi.oci.FleetAppsManagement.outputs.GetAnnouncementsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAnnouncementsResult {
    /**
     * @return The list of announcement_collection.
     * 
     */
    private List<GetAnnouncementsAnnouncementCollection> announcementCollections;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAnnouncementsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String summaryContains;

    private GetAnnouncementsResult() {}
    /**
     * @return The list of announcement_collection.
     * 
     */
    public List<GetAnnouncementsAnnouncementCollection> announcementCollections() {
        return this.announcementCollections;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAnnouncementsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> summaryContains() {
        return Optional.ofNullable(this.summaryContains);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAnnouncementsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAnnouncementsAnnouncementCollection> announcementCollections;
        private @Nullable String displayName;
        private @Nullable List<GetAnnouncementsFilter> filters;
        private String id;
        private @Nullable String summaryContains;
        public Builder() {}
        public Builder(GetAnnouncementsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.announcementCollections = defaults.announcementCollections;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.summaryContains = defaults.summaryContains;
        }

        @CustomType.Setter
        public Builder announcementCollections(List<GetAnnouncementsAnnouncementCollection> announcementCollections) {
            if (announcementCollections == null) {
              throw new MissingRequiredPropertyException("GetAnnouncementsResult", "announcementCollections");
            }
            this.announcementCollections = announcementCollections;
            return this;
        }
        public Builder announcementCollections(GetAnnouncementsAnnouncementCollection... announcementCollections) {
            return announcementCollections(List.of(announcementCollections));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAnnouncementsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAnnouncementsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAnnouncementsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder summaryContains(@Nullable String summaryContains) {

            this.summaryContains = summaryContains;
            return this;
        }
        public GetAnnouncementsResult build() {
            final var _resultValue = new GetAnnouncementsResult();
            _resultValue.announcementCollections = announcementCollections;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.summaryContains = summaryContains;
            return _resultValue;
        }
    }
}
