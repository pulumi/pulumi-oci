// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCatalogItemCatalogResultPayload {
    /**
     * @return branch Name
     * 
     */
    private String branchName;
    /**
     * @return config result type.
     * 
     */
    private String configResultType;
    /**
     * @return configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String configurationSourceProviderId;
    /**
     * @return package url
     * 
     */
    private String packageUrl;
    /**
     * @return repository Url
     * 
     */
    private String repositoryUrl;
    /**
     * @return template id
     * 
     */
    private String templateId;
    /**
     * @return The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeExpires;
    private String workingDirectory;

    private GetCatalogItemCatalogResultPayload() {}
    /**
     * @return branch Name
     * 
     */
    public String branchName() {
        return this.branchName;
    }
    /**
     * @return config result type.
     * 
     */
    public String configResultType() {
        return this.configResultType;
    }
    /**
     * @return configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String configurationSourceProviderId() {
        return this.configurationSourceProviderId;
    }
    /**
     * @return package url
     * 
     */
    public String packageUrl() {
        return this.packageUrl;
    }
    /**
     * @return repository Url
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return template id
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }
    public String workingDirectory() {
        return this.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogItemCatalogResultPayload defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branchName;
        private String configResultType;
        private String configurationSourceProviderId;
        private String packageUrl;
        private String repositoryUrl;
        private String templateId;
        private String timeExpires;
        private String workingDirectory;
        public Builder() {}
        public Builder(GetCatalogItemCatalogResultPayload defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchName = defaults.branchName;
    	      this.configResultType = defaults.configResultType;
    	      this.configurationSourceProviderId = defaults.configurationSourceProviderId;
    	      this.packageUrl = defaults.packageUrl;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.templateId = defaults.templateId;
    	      this.timeExpires = defaults.timeExpires;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder branchName(String branchName) {
            if (branchName == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "branchName");
            }
            this.branchName = branchName;
            return this;
        }
        @CustomType.Setter
        public Builder configResultType(String configResultType) {
            if (configResultType == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "configResultType");
            }
            this.configResultType = configResultType;
            return this;
        }
        @CustomType.Setter
        public Builder configurationSourceProviderId(String configurationSourceProviderId) {
            if (configurationSourceProviderId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "configurationSourceProviderId");
            }
            this.configurationSourceProviderId = configurationSourceProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder packageUrl(String packageUrl) {
            if (packageUrl == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "packageUrl");
            }
            this.packageUrl = packageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            if (repositoryUrl == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "repositoryUrl");
            }
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(String timeExpires) {
            if (timeExpires == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "timeExpires");
            }
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder workingDirectory(String workingDirectory) {
            if (workingDirectory == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogResultPayload", "workingDirectory");
            }
            this.workingDirectory = workingDirectory;
            return this;
        }
        public GetCatalogItemCatalogResultPayload build() {
            final var _resultValue = new GetCatalogItemCatalogResultPayload();
            _resultValue.branchName = branchName;
            _resultValue.configResultType = configResultType;
            _resultValue.configurationSourceProviderId = configurationSourceProviderId;
            _resultValue.packageUrl = packageUrl;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.templateId = templateId;
            _resultValue.timeExpires = timeExpires;
            _resultValue.workingDirectory = workingDirectory;
            return _resultValue;
        }
    }
}
