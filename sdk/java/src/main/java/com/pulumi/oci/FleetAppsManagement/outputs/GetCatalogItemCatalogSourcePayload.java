// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCatalogItemCatalogSourcePayload {
    /**
     * @return access uri
     * 
     */
    private String accessUri;
    /**
     * @return branch Name
     * 
     */
    private String branchName;
    /**
     * @return bucket name
     * 
     */
    private String bucket;
    /**
     * @return Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    private String configSourceType;
    /**
     * @return configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String configurationSourceProviderId;
    /**
     * @return Description about the catalog item.
     * 
     */
    private String description;
    /**
     * @return The catalog listing Id.
     * 
     */
    private String listingId;
    /**
     * @return Template Long Description
     * 
     */
    private String longDescription;
    /**
     * @return nameSpace
     * 
     */
    private String namespace;
    /**
     * @return object name
     * 
     */
    private String object;
    /**
     * @return repository Url
     * 
     */
    private String repositoryUrl;
    /**
     * @return Template Display Name
     * 
     */
    private String templateDisplayName;
    /**
     * @return The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeExpires;
    /**
     * @return This version parameter of Payload.
     * 
     */
    private String version;
    private String workingDirectory;
    /**
     * @return The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
     * 
     */
    private String zipFileBase64encoded;

    private GetCatalogItemCatalogSourcePayload() {}
    /**
     * @return access uri
     * 
     */
    public String accessUri() {
        return this.accessUri;
    }
    /**
     * @return branch Name
     * 
     */
    public String branchName() {
        return this.branchName;
    }
    /**
     * @return bucket name
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    public String configSourceType() {
        return this.configSourceType;
    }
    /**
     * @return configuration Source Provider [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String configurationSourceProviderId() {
        return this.configurationSourceProviderId;
    }
    /**
     * @return Description about the catalog item.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The catalog listing Id.
     * 
     */
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return Template Long Description
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }
    /**
     * @return nameSpace
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return object name
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return repository Url
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return Template Display Name
     * 
     */
    public String templateDisplayName() {
        return this.templateDisplayName;
    }
    /**
     * @return The date and time expires, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }
    /**
     * @return This version parameter of Payload.
     * 
     */
    public String version() {
        return this.version;
    }
    public String workingDirectory() {
        return this.workingDirectory;
    }
    /**
     * @return The Base64 encoded template. This payload will trigger CreateTemplate API, where the parameter will be passed.
     * 
     */
    public String zipFileBase64encoded() {
        return this.zipFileBase64encoded;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogItemCatalogSourcePayload defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessUri;
        private String branchName;
        private String bucket;
        private String configSourceType;
        private String configurationSourceProviderId;
        private String description;
        private String listingId;
        private String longDescription;
        private String namespace;
        private String object;
        private String repositoryUrl;
        private String templateDisplayName;
        private String timeExpires;
        private String version;
        private String workingDirectory;
        private String zipFileBase64encoded;
        public Builder() {}
        public Builder(GetCatalogItemCatalogSourcePayload defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUri = defaults.accessUri;
    	      this.branchName = defaults.branchName;
    	      this.bucket = defaults.bucket;
    	      this.configSourceType = defaults.configSourceType;
    	      this.configurationSourceProviderId = defaults.configurationSourceProviderId;
    	      this.description = defaults.description;
    	      this.listingId = defaults.listingId;
    	      this.longDescription = defaults.longDescription;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.templateDisplayName = defaults.templateDisplayName;
    	      this.timeExpires = defaults.timeExpires;
    	      this.version = defaults.version;
    	      this.workingDirectory = defaults.workingDirectory;
    	      this.zipFileBase64encoded = defaults.zipFileBase64encoded;
        }

        @CustomType.Setter
        public Builder accessUri(String accessUri) {
            if (accessUri == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "accessUri");
            }
            this.accessUri = accessUri;
            return this;
        }
        @CustomType.Setter
        public Builder branchName(String branchName) {
            if (branchName == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "branchName");
            }
            this.branchName = branchName;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder configSourceType(String configSourceType) {
            if (configSourceType == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "configSourceType");
            }
            this.configSourceType = configSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder configurationSourceProviderId(String configurationSourceProviderId) {
            if (configurationSourceProviderId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "configurationSourceProviderId");
            }
            this.configurationSourceProviderId = configurationSourceProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            if (listingId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "listingId");
            }
            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder longDescription(String longDescription) {
            if (longDescription == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "longDescription");
            }
            this.longDescription = longDescription;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            if (repositoryUrl == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "repositoryUrl");
            }
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder templateDisplayName(String templateDisplayName) {
            if (templateDisplayName == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "templateDisplayName");
            }
            this.templateDisplayName = templateDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(String timeExpires) {
            if (timeExpires == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "timeExpires");
            }
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder workingDirectory(String workingDirectory) {
            if (workingDirectory == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "workingDirectory");
            }
            this.workingDirectory = workingDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder zipFileBase64encoded(String zipFileBase64encoded) {
            if (zipFileBase64encoded == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemCatalogSourcePayload", "zipFileBase64encoded");
            }
            this.zipFileBase64encoded = zipFileBase64encoded;
            return this;
        }
        public GetCatalogItemCatalogSourcePayload build() {
            final var _resultValue = new GetCatalogItemCatalogSourcePayload();
            _resultValue.accessUri = accessUri;
            _resultValue.branchName = branchName;
            _resultValue.bucket = bucket;
            _resultValue.configSourceType = configSourceType;
            _resultValue.configurationSourceProviderId = configurationSourceProviderId;
            _resultValue.description = description;
            _resultValue.listingId = listingId;
            _resultValue.longDescription = longDescription;
            _resultValue.namespace = namespace;
            _resultValue.object = object;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.templateDisplayName = templateDisplayName;
            _resultValue.timeExpires = timeExpires;
            _resultValue.version = version;
            _resultValue.workingDirectory = workingDirectory;
            _resultValue.zipFileBase64encoded = zipFileBase64encoded;
            return _resultValue;
        }
    }
}
