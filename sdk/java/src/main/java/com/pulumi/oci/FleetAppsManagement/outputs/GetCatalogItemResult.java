// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetCatalogItemCatalogResultPayload;
import com.pulumi.oci.FleetAppsManagement.outputs.GetCatalogItemCatalogSourcePayload;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCatalogItemResult {
    private String catalogItemId;
    /**
     * @return Catalog result payload.
     * 
     */
    private List<GetCatalogItemCatalogResultPayload> catalogResultPayloads;
    /**
     * @return Catalog source payload.
     * 
     */
    private List<GetCatalogItemCatalogSourcePayload> catalogSourcePayloads;
    private Integer cloneCatalogItemTrigger;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    private String configSourceType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Description about the catalog item.
     * 
     */
    private String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the catalog.
     * 
     */
    private String id;
    /**
     * @return The details of lifecycle state CatalogItem.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The catalog listing Id.
     * 
     */
    private String listingId;
    /**
     * @return The catalog package version.
     * 
     */
    private String listingVersion;
    /**
     * @return Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
     * 
     */
    private String packageType;
    /**
     * @return Short description about the catalog item.
     * 
     */
    private String shortDescription;
    /**
     * @return The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    private Boolean shouldListPublicItems;
    /**
     * @return The current state of the CatalogItem.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeBackfillLastChecked;
    /**
     * @return The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeLastChecked;
    /**
     * @return The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeReleased;
    /**
     * @return The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeUpdated;
    /**
     * @return Version description about the catalog item.
     * 
     */
    private String versionDescription;

    private GetCatalogItemResult() {}
    public String catalogItemId() {
        return this.catalogItemId;
    }
    /**
     * @return Catalog result payload.
     * 
     */
    public List<GetCatalogItemCatalogResultPayload> catalogResultPayloads() {
        return this.catalogResultPayloads;
    }
    /**
     * @return Catalog source payload.
     * 
     */
    public List<GetCatalogItemCatalogSourcePayload> catalogSourcePayloads() {
        return this.catalogSourcePayloads;
    }
    public Integer cloneCatalogItemTrigger() {
        return this.cloneCatalogItemTrigger;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
     * 
     */
    public String configSourceType() {
        return this.configSourceType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description about the catalog item.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the catalog.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The details of lifecycle state CatalogItem.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The catalog listing Id.
     * 
     */
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return The catalog package version.
     * 
     */
    public String listingVersion() {
        return this.listingVersion;
    }
    /**
     * @return Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return Short description about the catalog item.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }
    /**
     * @return The indicator to append Public Items from the root compartment to any query, when set to TRUE.
     * 
     */
    public Boolean shouldListPublicItems() {
        return this.shouldListPublicItems;
    }
    /**
     * @return The current state of the CatalogItem.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the CatalogItem was last checked by backfill job, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeBackfillLastChecked() {
        return this.timeBackfillLastChecked;
    }
    /**
     * @return The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the CatalogItem was last checked, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeLastChecked() {
        return this.timeLastChecked;
    }
    /**
     * @return The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeReleased() {
        return this.timeReleased;
    }
    /**
     * @return The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339). Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Version description about the catalog item.
     * 
     */
    public String versionDescription() {
        return this.versionDescription;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogItemResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogItemId;
        private List<GetCatalogItemCatalogResultPayload> catalogResultPayloads;
        private List<GetCatalogItemCatalogSourcePayload> catalogSourcePayloads;
        private Integer cloneCatalogItemTrigger;
        private String compartmentId;
        private String configSourceType;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String listingId;
        private String listingVersion;
        private String packageType;
        private String shortDescription;
        private Boolean shouldListPublicItems;
        private String state;
        private Map<String,String> systemTags;
        private String timeBackfillLastChecked;
        private String timeCreated;
        private String timeLastChecked;
        private String timeReleased;
        private String timeUpdated;
        private String versionDescription;
        public Builder() {}
        public Builder(GetCatalogItemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogItemId = defaults.catalogItemId;
    	      this.catalogResultPayloads = defaults.catalogResultPayloads;
    	      this.catalogSourcePayloads = defaults.catalogSourcePayloads;
    	      this.cloneCatalogItemTrigger = defaults.cloneCatalogItemTrigger;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configSourceType = defaults.configSourceType;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.listingId = defaults.listingId;
    	      this.listingVersion = defaults.listingVersion;
    	      this.packageType = defaults.packageType;
    	      this.shortDescription = defaults.shortDescription;
    	      this.shouldListPublicItems = defaults.shouldListPublicItems;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeBackfillLastChecked = defaults.timeBackfillLastChecked;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastChecked = defaults.timeLastChecked;
    	      this.timeReleased = defaults.timeReleased;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.versionDescription = defaults.versionDescription;
        }

        @CustomType.Setter
        public Builder catalogItemId(String catalogItemId) {
            if (catalogItemId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "catalogItemId");
            }
            this.catalogItemId = catalogItemId;
            return this;
        }
        @CustomType.Setter
        public Builder catalogResultPayloads(List<GetCatalogItemCatalogResultPayload> catalogResultPayloads) {
            if (catalogResultPayloads == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "catalogResultPayloads");
            }
            this.catalogResultPayloads = catalogResultPayloads;
            return this;
        }
        public Builder catalogResultPayloads(GetCatalogItemCatalogResultPayload... catalogResultPayloads) {
            return catalogResultPayloads(List.of(catalogResultPayloads));
        }
        @CustomType.Setter
        public Builder catalogSourcePayloads(List<GetCatalogItemCatalogSourcePayload> catalogSourcePayloads) {
            if (catalogSourcePayloads == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "catalogSourcePayloads");
            }
            this.catalogSourcePayloads = catalogSourcePayloads;
            return this;
        }
        public Builder catalogSourcePayloads(GetCatalogItemCatalogSourcePayload... catalogSourcePayloads) {
            return catalogSourcePayloads(List.of(catalogSourcePayloads));
        }
        @CustomType.Setter
        public Builder cloneCatalogItemTrigger(Integer cloneCatalogItemTrigger) {
            if (cloneCatalogItemTrigger == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "cloneCatalogItemTrigger");
            }
            this.cloneCatalogItemTrigger = cloneCatalogItemTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configSourceType(String configSourceType) {
            if (configSourceType == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "configSourceType");
            }
            this.configSourceType = configSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            if (listingId == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "listingId");
            }
            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder listingVersion(String listingVersion) {
            if (listingVersion == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "listingVersion");
            }
            this.listingVersion = listingVersion;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(String packageType) {
            if (packageType == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "packageType");
            }
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder shortDescription(String shortDescription) {
            if (shortDescription == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "shortDescription");
            }
            this.shortDescription = shortDescription;
            return this;
        }
        @CustomType.Setter
        public Builder shouldListPublicItems(Boolean shouldListPublicItems) {
            if (shouldListPublicItems == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "shouldListPublicItems");
            }
            this.shouldListPublicItems = shouldListPublicItems;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeBackfillLastChecked(String timeBackfillLastChecked) {
            if (timeBackfillLastChecked == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "timeBackfillLastChecked");
            }
            this.timeBackfillLastChecked = timeBackfillLastChecked;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastChecked(String timeLastChecked) {
            if (timeLastChecked == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "timeLastChecked");
            }
            this.timeLastChecked = timeLastChecked;
            return this;
        }
        @CustomType.Setter
        public Builder timeReleased(String timeReleased) {
            if (timeReleased == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "timeReleased");
            }
            this.timeReleased = timeReleased;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder versionDescription(String versionDescription) {
            if (versionDescription == null) {
              throw new MissingRequiredPropertyException("GetCatalogItemResult", "versionDescription");
            }
            this.versionDescription = versionDescription;
            return this;
        }
        public GetCatalogItemResult build() {
            final var _resultValue = new GetCatalogItemResult();
            _resultValue.catalogItemId = catalogItemId;
            _resultValue.catalogResultPayloads = catalogResultPayloads;
            _resultValue.catalogSourcePayloads = catalogSourcePayloads;
            _resultValue.cloneCatalogItemTrigger = cloneCatalogItemTrigger;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configSourceType = configSourceType;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.listingId = listingId;
            _resultValue.listingVersion = listingVersion;
            _resultValue.packageType = packageType;
            _resultValue.shortDescription = shortDescription;
            _resultValue.shouldListPublicItems = shouldListPublicItems;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeBackfillLastChecked = timeBackfillLastChecked;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastChecked = timeLastChecked;
            _resultValue.timeReleased = timeReleased;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.versionDescription = versionDescription;
            return _resultValue;
        }
    }
}
