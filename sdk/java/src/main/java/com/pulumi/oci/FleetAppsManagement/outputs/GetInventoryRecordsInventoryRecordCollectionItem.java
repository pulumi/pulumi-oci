// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetInventoryRecordsInventoryRecordCollectionItemComponent;
import com.pulumi.oci.FleetAppsManagement.outputs.GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch;
import com.pulumi.oci.FleetAppsManagement.outputs.GetInventoryRecordsInventoryRecordCollectionItemProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInventoryRecordsInventoryRecordCollectionItem {
    /**
     * @return Architecture of the resource associated with the target
     * 
     */
    private String architecture;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return List of target components
     * 
     */
    private List<GetInventoryRecordsInventoryRecordCollectionItemComponent> components;
    /**
     * @return List of details on the patches currently installed on the target
     * 
     */
    private List<GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch> installedPatches;
    /**
     * @return OS installed on the resource associated with the target
     * 
     */
    private String osType;
    /**
     * @return List of target properties
     * 
     */
    private List<GetInventoryRecordsInventoryRecordCollectionItemProperty> properties;
    /**
     * @return The current state of the Inventory target.
     * 
     */
    private String state;
    /**
     * @return The OCID of the Inventory target.
     * 
     */
    private String targetId;
    /**
     * @return Name of the target
     * 
     */
    private String targetName;
    /**
     * @return OCID of the product installed at the target path
     * 
     */
    private String targetProductId;
    /**
     * @return Name of the product installed at the target path
     * 
     */
    private String targetProductName;
    /**
     * @return OCID of the resource associated with the target
     * 
     */
    private String targetResourceId;
    /**
     * @return Name of the resource associated with the target
     * 
     */
    private String targetResourceName;
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return Version of the product on the target
     * 
     */
    private String version;

    private GetInventoryRecordsInventoryRecordCollectionItem() {}
    /**
     * @return Architecture of the resource associated with the target
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of target components
     * 
     */
    public List<GetInventoryRecordsInventoryRecordCollectionItemComponent> components() {
        return this.components;
    }
    /**
     * @return List of details on the patches currently installed on the target
     * 
     */
    public List<GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch> installedPatches() {
        return this.installedPatches;
    }
    /**
     * @return OS installed on the resource associated with the target
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return List of target properties
     * 
     */
    public List<GetInventoryRecordsInventoryRecordCollectionItemProperty> properties() {
        return this.properties;
    }
    /**
     * @return The current state of the Inventory target.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the Inventory target.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return Name of the target
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return OCID of the product installed at the target path
     * 
     */
    public String targetProductId() {
        return this.targetProductId;
    }
    /**
     * @return Name of the product installed at the target path
     * 
     */
    public String targetProductName() {
        return this.targetProductName;
    }
    /**
     * @return OCID of the resource associated with the target
     * 
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }
    /**
     * @return Name of the resource associated with the target
     * 
     */
    public String targetResourceName() {
        return this.targetResourceName;
    }
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Version of the product on the target
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInventoryRecordsInventoryRecordCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String compartmentId;
        private List<GetInventoryRecordsInventoryRecordCollectionItemComponent> components;
        private List<GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch> installedPatches;
        private String osType;
        private List<GetInventoryRecordsInventoryRecordCollectionItemProperty> properties;
        private String state;
        private String targetId;
        private String targetName;
        private String targetProductId;
        private String targetProductName;
        private String targetResourceId;
        private String targetResourceName;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetInventoryRecordsInventoryRecordCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.compartmentId = defaults.compartmentId;
    	      this.components = defaults.components;
    	      this.installedPatches = defaults.installedPatches;
    	      this.osType = defaults.osType;
    	      this.properties = defaults.properties;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.targetProductId = defaults.targetProductId;
    	      this.targetProductName = defaults.targetProductName;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.targetResourceName = defaults.targetResourceName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder components(List<GetInventoryRecordsInventoryRecordCollectionItemComponent> components) {
            if (components == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "components");
            }
            this.components = components;
            return this;
        }
        public Builder components(GetInventoryRecordsInventoryRecordCollectionItemComponent... components) {
            return components(List.of(components));
        }
        @CustomType.Setter
        public Builder installedPatches(List<GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch> installedPatches) {
            if (installedPatches == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "installedPatches");
            }
            this.installedPatches = installedPatches;
            return this;
        }
        public Builder installedPatches(GetInventoryRecordsInventoryRecordCollectionItemInstalledPatch... installedPatches) {
            return installedPatches(List.of(installedPatches));
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetInventoryRecordsInventoryRecordCollectionItemProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetInventoryRecordsInventoryRecordCollectionItemProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(String targetName) {
            if (targetName == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetName");
            }
            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder targetProductId(String targetProductId) {
            if (targetProductId == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetProductId");
            }
            this.targetProductId = targetProductId;
            return this;
        }
        @CustomType.Setter
        public Builder targetProductName(String targetProductName) {
            if (targetProductName == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetProductName");
            }
            this.targetProductName = targetProductName;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceId(String targetResourceId) {
            if (targetResourceId == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetResourceId");
            }
            this.targetResourceId = targetResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceName(String targetResourceName) {
            if (targetResourceName == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "targetResourceName");
            }
            this.targetResourceName = targetResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetInventoryRecordsInventoryRecordCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetInventoryRecordsInventoryRecordCollectionItem build() {
            final var _resultValue = new GetInventoryRecordsInventoryRecordCollectionItem();
            _resultValue.architecture = architecture;
            _resultValue.compartmentId = compartmentId;
            _resultValue.components = components;
            _resultValue.installedPatches = installedPatches;
            _resultValue.osType = osType;
            _resultValue.properties = properties;
            _resultValue.state = state;
            _resultValue.targetId = targetId;
            _resultValue.targetName = targetName;
            _resultValue.targetProductId = targetProductId;
            _resultValue.targetProductName = targetProductName;
            _resultValue.targetResourceId = targetResourceId;
            _resultValue.targetResourceName = targetResourceName;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
