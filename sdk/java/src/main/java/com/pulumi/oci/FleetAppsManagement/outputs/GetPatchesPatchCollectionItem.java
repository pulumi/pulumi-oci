// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPatchesPatchCollectionItemArtifactDetail;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPatchesPatchCollectionItemDependentPatch;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPatchesPatchCollectionItemPatchType;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPatchesPatchCollectionItemProduct;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPatchesPatchCollectionItem {
    /**
     * @return Patch artifact description and content details.
     * 
     */
    private List<GetPatchesPatchCollectionItemArtifactDetail> artifactDetails;
    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Dependent Patches for this patch.
     * 
     */
    private List<GetPatchesPatchCollectionItemDependentPatch> dependentPatches;
    /**
     * @return A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    private String name;
    /**
     * @return Patch Type
     * 
     */
    private List<GetPatchesPatchCollectionItemPatchType> patchTypes;
    /**
     * @return Product
     * 
     */
    private List<GetPatchesPatchCollectionItemProduct> products;
    /**
     * @return Associated region
     * 
     */
    private String resourceRegion;
    /**
     * @return Patch Severity.
     * 
     */
    private String severity;
    /**
     * @return The current state of the Patch.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Date when the patch was released.
     * 
     */
    private String timeReleased;
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return DefinedBy type.
     * 
     */
    private String type;

    private GetPatchesPatchCollectionItem() {}
    /**
     * @return Patch artifact description and content details.
     * 
     */
    public List<GetPatchesPatchCollectionItemArtifactDetail> artifactDetails() {
        return this.artifactDetails;
    }
    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Dependent Patches for this patch.
     * 
     */
    public List<GetPatchesPatchCollectionItemDependentPatch> dependentPatches() {
        return this.dependentPatches;
    }
    /**
     * @return A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Patch Type
     * 
     */
    public List<GetPatchesPatchCollectionItemPatchType> patchTypes() {
        return this.patchTypes;
    }
    /**
     * @return Product
     * 
     */
    public List<GetPatchesPatchCollectionItemProduct> products() {
        return this.products;
    }
    /**
     * @return Associated region
     * 
     */
    public String resourceRegion() {
        return this.resourceRegion;
    }
    /**
     * @return Patch Severity.
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return The current state of the Patch.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date when the patch was released.
     * 
     */
    public String timeReleased() {
        return this.timeReleased;
    }
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return DefinedBy type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPatchesPatchCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetPatchesPatchCollectionItemArtifactDetail> artifactDetails;
        private String compartmentId;
        private Map<String,String> definedTags;
        private List<GetPatchesPatchCollectionItemDependentPatch> dependentPatches;
        private String description;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String name;
        private List<GetPatchesPatchCollectionItemPatchType> patchTypes;
        private List<GetPatchesPatchCollectionItemProduct> products;
        private String resourceRegion;
        private String severity;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeReleased;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetPatchesPatchCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactDetails = defaults.artifactDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.dependentPatches = defaults.dependentPatches;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.patchTypes = defaults.patchTypes;
    	      this.products = defaults.products;
    	      this.resourceRegion = defaults.resourceRegion;
    	      this.severity = defaults.severity;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeReleased = defaults.timeReleased;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder artifactDetails(List<GetPatchesPatchCollectionItemArtifactDetail> artifactDetails) {
            if (artifactDetails == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "artifactDetails");
            }
            this.artifactDetails = artifactDetails;
            return this;
        }
        public Builder artifactDetails(GetPatchesPatchCollectionItemArtifactDetail... artifactDetails) {
            return artifactDetails(List.of(artifactDetails));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder dependentPatches(List<GetPatchesPatchCollectionItemDependentPatch> dependentPatches) {
            if (dependentPatches == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "dependentPatches");
            }
            this.dependentPatches = dependentPatches;
            return this;
        }
        public Builder dependentPatches(GetPatchesPatchCollectionItemDependentPatch... dependentPatches) {
            return dependentPatches(List.of(dependentPatches));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder patchTypes(List<GetPatchesPatchCollectionItemPatchType> patchTypes) {
            if (patchTypes == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "patchTypes");
            }
            this.patchTypes = patchTypes;
            return this;
        }
        public Builder patchTypes(GetPatchesPatchCollectionItemPatchType... patchTypes) {
            return patchTypes(List.of(patchTypes));
        }
        @CustomType.Setter
        public Builder products(List<GetPatchesPatchCollectionItemProduct> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(GetPatchesPatchCollectionItemProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder resourceRegion(String resourceRegion) {
            if (resourceRegion == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "resourceRegion");
            }
            this.resourceRegion = resourceRegion;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeReleased(String timeReleased) {
            if (timeReleased == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "timeReleased");
            }
            this.timeReleased = timeReleased;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetPatchesPatchCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        public GetPatchesPatchCollectionItem build() {
            final var _resultValue = new GetPatchesPatchCollectionItem();
            _resultValue.artifactDetails = artifactDetails;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.dependentPatches = dependentPatches;
            _resultValue.description = description;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.patchTypes = patchTypes;
            _resultValue.products = products;
            _resultValue.resourceRegion = resourceRegion;
            _resultValue.severity = severity;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeReleased = timeReleased;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
