// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential;
import com.pulumi.oci.FleetAppsManagement.outputs.GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail {
    /**
     * @return Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
     * 
     */
    private List<String> components;
    /**
     * @return OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
     * 
     */
    private List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential> credentials;
    /**
     * @return Patch Types associated with this Product Stack which will be considered as Product.
     * 
     */
    private List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType> patchTypes;
    /**
     * @return SubCategory of Product Stack.
     * 
     */
    private String subCategory;
    /**
     * @return Versions associated with the PRODUCT .
     * 
     */
    private List<String> versions;

    private GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail() {}
    /**
     * @return Various components of the Product. For example:The administration server or node manager can be the components of the Oracle WebLogic Application server. Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
     * 
     */
    public List<String> components() {
        return this.components;
    }
    /**
     * @return OCID for the Credential name to be associated with the Product Stack. These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
     * 
     */
    public List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential> credentials() {
        return this.credentials;
    }
    /**
     * @return Patch Types associated with this Product Stack which will be considered as Product.
     * 
     */
    public List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType> patchTypes() {
        return this.patchTypes;
    }
    /**
     * @return SubCategory of Product Stack.
     * 
     */
    public String subCategory() {
        return this.subCategory;
    }
    /**
     * @return Versions associated with the PRODUCT .
     * 
     */
    public List<String> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> components;
        private List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential> credentials;
        private List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType> patchTypes;
        private String subCategory;
        private List<String> versions;
        public Builder() {}
        public Builder(GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.components = defaults.components;
    	      this.credentials = defaults.credentials;
    	      this.patchTypes = defaults.patchTypes;
    	      this.subCategory = defaults.subCategory;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder components(List<String> components) {
            if (components == null) {
              throw new MissingRequiredPropertyException("GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail", "components");
            }
            this.components = components;
            return this;
        }
        public Builder components(String... components) {
            return components(List.of(components));
        }
        @CustomType.Setter
        public Builder credentials(List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential> credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        public Builder credentials(GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailCredential... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder patchTypes(List<GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType> patchTypes) {
            if (patchTypes == null) {
              throw new MissingRequiredPropertyException("GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail", "patchTypes");
            }
            this.patchTypes = patchTypes;
            return this;
        }
        public Builder patchTypes(GetPlatformConfigurationConfigCategoryDetailSubCategoryDetailPatchType... patchTypes) {
            return patchTypes(List.of(patchTypes));
        }
        @CustomType.Setter
        public Builder subCategory(String subCategory) {
            if (subCategory == null) {
              throw new MissingRequiredPropertyException("GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail", "subCategory");
            }
            this.subCategory = subCategory;
            return this;
        }
        @CustomType.Setter
        public Builder versions(List<String> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }
        public GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail build() {
            final var _resultValue = new GetPlatformConfigurationConfigCategoryDetailSubCategoryDetail();
            _resultValue.components = components;
            _resultValue.credentials = credentials;
            _resultValue.patchTypes = patchTypes;
            _resultValue.subCategory = subCategory;
            _resultValue.versions = versions;
            return _resultValue;
        }
    }
}
