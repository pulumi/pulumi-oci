// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetRunbookVersionGroupPropertyNotificationPreference;
import com.pulumi.oci.FleetAppsManagement.outputs.GetRunbookVersionGroupPropertyPauseDetail;
import com.pulumi.oci.FleetAppsManagement.outputs.GetRunbookVersionGroupPropertyRunOn;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRunbookVersionGroupProperty {
    /**
     * @return The action to be taken in case of a failure.
     * 
     */
    private String actionOnFailure;
    /**
     * @return Preferences to send notifications on the task activities.
     * 
     */
    private List<GetRunbookVersionGroupPropertyNotificationPreference> notificationPreferences;
    /**
     * @return Pause Details
     * 
     */
    private List<GetRunbookVersionGroupPropertyPauseDetail> pauseDetails;
    /**
     * @return Build control flow conditions that determine the relevance of the task execution.
     * 
     */
    private String preCondition;
    /**
     * @return The runon conditions
     * 
     */
    private List<GetRunbookVersionGroupPropertyRunOn> runOns;

    private GetRunbookVersionGroupProperty() {}
    /**
     * @return The action to be taken in case of a failure.
     * 
     */
    public String actionOnFailure() {
        return this.actionOnFailure;
    }
    /**
     * @return Preferences to send notifications on the task activities.
     * 
     */
    public List<GetRunbookVersionGroupPropertyNotificationPreference> notificationPreferences() {
        return this.notificationPreferences;
    }
    /**
     * @return Pause Details
     * 
     */
    public List<GetRunbookVersionGroupPropertyPauseDetail> pauseDetails() {
        return this.pauseDetails;
    }
    /**
     * @return Build control flow conditions that determine the relevance of the task execution.
     * 
     */
    public String preCondition() {
        return this.preCondition;
    }
    /**
     * @return The runon conditions
     * 
     */
    public List<GetRunbookVersionGroupPropertyRunOn> runOns() {
        return this.runOns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunbookVersionGroupProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String actionOnFailure;
        private List<GetRunbookVersionGroupPropertyNotificationPreference> notificationPreferences;
        private List<GetRunbookVersionGroupPropertyPauseDetail> pauseDetails;
        private String preCondition;
        private List<GetRunbookVersionGroupPropertyRunOn> runOns;
        public Builder() {}
        public Builder(GetRunbookVersionGroupProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionOnFailure = defaults.actionOnFailure;
    	      this.notificationPreferences = defaults.notificationPreferences;
    	      this.pauseDetails = defaults.pauseDetails;
    	      this.preCondition = defaults.preCondition;
    	      this.runOns = defaults.runOns;
        }

        @CustomType.Setter
        public Builder actionOnFailure(String actionOnFailure) {
            if (actionOnFailure == null) {
              throw new MissingRequiredPropertyException("GetRunbookVersionGroupProperty", "actionOnFailure");
            }
            this.actionOnFailure = actionOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder notificationPreferences(List<GetRunbookVersionGroupPropertyNotificationPreference> notificationPreferences) {
            if (notificationPreferences == null) {
              throw new MissingRequiredPropertyException("GetRunbookVersionGroupProperty", "notificationPreferences");
            }
            this.notificationPreferences = notificationPreferences;
            return this;
        }
        public Builder notificationPreferences(GetRunbookVersionGroupPropertyNotificationPreference... notificationPreferences) {
            return notificationPreferences(List.of(notificationPreferences));
        }
        @CustomType.Setter
        public Builder pauseDetails(List<GetRunbookVersionGroupPropertyPauseDetail> pauseDetails) {
            if (pauseDetails == null) {
              throw new MissingRequiredPropertyException("GetRunbookVersionGroupProperty", "pauseDetails");
            }
            this.pauseDetails = pauseDetails;
            return this;
        }
        public Builder pauseDetails(GetRunbookVersionGroupPropertyPauseDetail... pauseDetails) {
            return pauseDetails(List.of(pauseDetails));
        }
        @CustomType.Setter
        public Builder preCondition(String preCondition) {
            if (preCondition == null) {
              throw new MissingRequiredPropertyException("GetRunbookVersionGroupProperty", "preCondition");
            }
            this.preCondition = preCondition;
            return this;
        }
        @CustomType.Setter
        public Builder runOns(List<GetRunbookVersionGroupPropertyRunOn> runOns) {
            if (runOns == null) {
              throw new MissingRequiredPropertyException("GetRunbookVersionGroupProperty", "runOns");
            }
            this.runOns = runOns;
            return this;
        }
        public Builder runOns(GetRunbookVersionGroupPropertyRunOn... runOns) {
            return runOns(List.of(runOns));
        }
        public GetRunbookVersionGroupProperty build() {
            final var _resultValue = new GetRunbookVersionGroupProperty();
            _resultValue.actionOnFailure = actionOnFailure;
            _resultValue.notificationPreferences = notificationPreferences;
            _resultValue.pauseDetails = pauseDetails;
            _resultValue.preCondition = preCondition;
            _resultValue.runOns = runOns;
            return _resultValue;
        }
    }
}
