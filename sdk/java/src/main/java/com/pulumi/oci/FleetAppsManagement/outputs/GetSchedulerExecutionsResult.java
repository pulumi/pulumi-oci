// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetSchedulerExecutionsFilter;
import com.pulumi.oci.FleetAppsManagement.outputs.GetSchedulerExecutionsSchedulerExecutionCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSchedulerExecutionsResult {
    /**
     * @return Compartment OCID
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetSchedulerExecutionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ResourceId associated with the Schedule.
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return RunbookId associated with the Schedule.
     * 
     */
    private @Nullable String runbookId;
    /**
     * @return Name of the Runbook version associated with the Schedule.
     * 
     */
    private @Nullable String runbookVersionName;
    private @Nullable String schedulerDefintionId;
    /**
     * @return The list of scheduler_execution_collection.
     * 
     */
    private List<GetSchedulerExecutionsSchedulerExecutionCollection> schedulerExecutionCollections;
    /**
     * @return jobId associated with the Schedule.
     * 
     */
    private @Nullable String schedulerJobId;
    private @Nullable String substate;
    private @Nullable String timeScheduledGreaterThanOrEqualTo;
    private @Nullable String timeScheduledLessThan;

    private GetSchedulerExecutionsResult() {}
    /**
     * @return Compartment OCID
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.  Example: `My new resource`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetSchedulerExecutionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ResourceId associated with the Schedule.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return RunbookId associated with the Schedule.
     * 
     */
    public Optional<String> runbookId() {
        return Optional.ofNullable(this.runbookId);
    }
    /**
     * @return Name of the Runbook version associated with the Schedule.
     * 
     */
    public Optional<String> runbookVersionName() {
        return Optional.ofNullable(this.runbookVersionName);
    }
    public Optional<String> schedulerDefintionId() {
        return Optional.ofNullable(this.schedulerDefintionId);
    }
    /**
     * @return The list of scheduler_execution_collection.
     * 
     */
    public List<GetSchedulerExecutionsSchedulerExecutionCollection> schedulerExecutionCollections() {
        return this.schedulerExecutionCollections;
    }
    /**
     * @return jobId associated with the Schedule.
     * 
     */
    public Optional<String> schedulerJobId() {
        return Optional.ofNullable(this.schedulerJobId);
    }
    public Optional<String> substate() {
        return Optional.ofNullable(this.substate);
    }
    public Optional<String> timeScheduledGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeScheduledGreaterThanOrEqualTo);
    }
    public Optional<String> timeScheduledLessThan() {
        return Optional.ofNullable(this.timeScheduledLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchedulerExecutionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetSchedulerExecutionsFilter> filters;
        private String id;
        private @Nullable String resourceId;
        private @Nullable String runbookId;
        private @Nullable String runbookVersionName;
        private @Nullable String schedulerDefintionId;
        private List<GetSchedulerExecutionsSchedulerExecutionCollection> schedulerExecutionCollections;
        private @Nullable String schedulerJobId;
        private @Nullable String substate;
        private @Nullable String timeScheduledGreaterThanOrEqualTo;
        private @Nullable String timeScheduledLessThan;
        public Builder() {}
        public Builder(GetSchedulerExecutionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.resourceId = defaults.resourceId;
    	      this.runbookId = defaults.runbookId;
    	      this.runbookVersionName = defaults.runbookVersionName;
    	      this.schedulerDefintionId = defaults.schedulerDefintionId;
    	      this.schedulerExecutionCollections = defaults.schedulerExecutionCollections;
    	      this.schedulerJobId = defaults.schedulerJobId;
    	      this.substate = defaults.substate;
    	      this.timeScheduledGreaterThanOrEqualTo = defaults.timeScheduledGreaterThanOrEqualTo;
    	      this.timeScheduledLessThan = defaults.timeScheduledLessThan;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSchedulerExecutionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSchedulerExecutionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {

            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder runbookId(@Nullable String runbookId) {

            this.runbookId = runbookId;
            return this;
        }
        @CustomType.Setter
        public Builder runbookVersionName(@Nullable String runbookVersionName) {

            this.runbookVersionName = runbookVersionName;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerDefintionId(@Nullable String schedulerDefintionId) {

            this.schedulerDefintionId = schedulerDefintionId;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerExecutionCollections(List<GetSchedulerExecutionsSchedulerExecutionCollection> schedulerExecutionCollections) {
            if (schedulerExecutionCollections == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsResult", "schedulerExecutionCollections");
            }
            this.schedulerExecutionCollections = schedulerExecutionCollections;
            return this;
        }
        public Builder schedulerExecutionCollections(GetSchedulerExecutionsSchedulerExecutionCollection... schedulerExecutionCollections) {
            return schedulerExecutionCollections(List.of(schedulerExecutionCollections));
        }
        @CustomType.Setter
        public Builder schedulerJobId(@Nullable String schedulerJobId) {

            this.schedulerJobId = schedulerJobId;
            return this;
        }
        @CustomType.Setter
        public Builder substate(@Nullable String substate) {

            this.substate = substate;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduledGreaterThanOrEqualTo(@Nullable String timeScheduledGreaterThanOrEqualTo) {

            this.timeScheduledGreaterThanOrEqualTo = timeScheduledGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduledLessThan(@Nullable String timeScheduledLessThan) {

            this.timeScheduledLessThan = timeScheduledLessThan;
            return this;
        }
        public GetSchedulerExecutionsResult build() {
            final var _resultValue = new GetSchedulerExecutionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.resourceId = resourceId;
            _resultValue.runbookId = runbookId;
            _resultValue.runbookVersionName = runbookVersionName;
            _resultValue.schedulerDefintionId = schedulerDefintionId;
            _resultValue.schedulerExecutionCollections = schedulerExecutionCollections;
            _resultValue.schedulerJobId = schedulerJobId;
            _resultValue.substate = substate;
            _resultValue.timeScheduledGreaterThanOrEqualTo = timeScheduledGreaterThanOrEqualTo;
            _resultValue.timeScheduledLessThan = timeScheduledLessThan;
            return _resultValue;
        }
    }
}
