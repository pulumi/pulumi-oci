// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSchedulerExecutionsSchedulerExecutionCollectionItem {
    /**
     * @return Action Group associated with the Schedule.
     * 
     */
    private String activityId;
    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the resource.
     * 
     */
    private String id;
    /**
     * @return Latest Runbook version available.
     * 
     */
    private String latestRunbookVersionName;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Resource DsiplayName associated with the Schedule.
     * 
     */
    private String resourceDisplayName;
    /**
     * @return ResourceId filter (Example FleetId)
     * 
     */
    private String resourceId;
    /**
     * @return DsiplayName of Runbook associated with the Schedule.
     * 
     */
    private String runbookDisplayName;
    /**
     * @return A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
     * 
     */
    private String runbookId;
    /**
     * @return RunbookVersion Name filter
     * 
     */
    private String runbookVersionName;
    /**
     * @return SchedulerDefinition  associated with the job.
     * 
     */
    private List<GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition> schedulerDefinitions;
    /**
     * @return SchedulerJob identifier filter
     * 
     */
    private String schedulerJobId;
    /**
     * @return The current state of the Scheduler Execution.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Actual end date and time for the Execution.
     * 
     */
    private String timeEnded;
    /**
     * @return The scheduled date and time for the Job.
     * 
     */
    private String timeScheduled;
    /**
     * @return Actual start date and time for the Execution.
     * 
     */
    private String timeStarted;
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetSchedulerExecutionsSchedulerExecutionCollectionItem() {}
    /**
     * @return Action Group associated with the Schedule.
     * 
     */
    public String activityId() {
        return this.activityId;
    }
    /**
     * @return The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Latest Runbook version available.
     * 
     */
    public String latestRunbookVersionName() {
        return this.latestRunbookVersionName;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Resource DsiplayName associated with the Schedule.
     * 
     */
    public String resourceDisplayName() {
        return this.resourceDisplayName;
    }
    /**
     * @return ResourceId filter (Example FleetId)
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return DsiplayName of Runbook associated with the Schedule.
     * 
     */
    public String runbookDisplayName() {
        return this.runbookDisplayName;
    }
    /**
     * @return A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
     * 
     */
    public String runbookId() {
        return this.runbookId;
    }
    /**
     * @return RunbookVersion Name filter
     * 
     */
    public String runbookVersionName() {
        return this.runbookVersionName;
    }
    /**
     * @return SchedulerDefinition  associated with the job.
     * 
     */
    public List<GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition> schedulerDefinitions() {
        return this.schedulerDefinitions;
    }
    /**
     * @return SchedulerJob identifier filter
     * 
     */
    public String schedulerJobId() {
        return this.schedulerJobId;
    }
    /**
     * @return The current state of the Scheduler Execution.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time this resource was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Actual end date and time for the Execution.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The scheduled date and time for the Job.
     * 
     */
    public String timeScheduled() {
        return this.timeScheduled;
    }
    /**
     * @return Actual start date and time for the Execution.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return The time this resource was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchedulerExecutionsSchedulerExecutionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activityId;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String latestRunbookVersionName;
        private String lifecycleDetails;
        private String resourceDisplayName;
        private String resourceId;
        private String runbookDisplayName;
        private String runbookId;
        private String runbookVersionName;
        private List<GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition> schedulerDefinitions;
        private String schedulerJobId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeEnded;
        private String timeScheduled;
        private String timeStarted;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSchedulerExecutionsSchedulerExecutionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activityId = defaults.activityId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.latestRunbookVersionName = defaults.latestRunbookVersionName;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.resourceDisplayName = defaults.resourceDisplayName;
    	      this.resourceId = defaults.resourceId;
    	      this.runbookDisplayName = defaults.runbookDisplayName;
    	      this.runbookId = defaults.runbookId;
    	      this.runbookVersionName = defaults.runbookVersionName;
    	      this.schedulerDefinitions = defaults.schedulerDefinitions;
    	      this.schedulerJobId = defaults.schedulerJobId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeScheduled = defaults.timeScheduled;
    	      this.timeStarted = defaults.timeStarted;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder activityId(String activityId) {
            if (activityId == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "activityId");
            }
            this.activityId = activityId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder latestRunbookVersionName(String latestRunbookVersionName) {
            if (latestRunbookVersionName == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "latestRunbookVersionName");
            }
            this.latestRunbookVersionName = latestRunbookVersionName;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder resourceDisplayName(String resourceDisplayName) {
            if (resourceDisplayName == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "resourceDisplayName");
            }
            this.resourceDisplayName = resourceDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder runbookDisplayName(String runbookDisplayName) {
            if (runbookDisplayName == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "runbookDisplayName");
            }
            this.runbookDisplayName = runbookDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder runbookId(String runbookId) {
            if (runbookId == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "runbookId");
            }
            this.runbookId = runbookId;
            return this;
        }
        @CustomType.Setter
        public Builder runbookVersionName(String runbookVersionName) {
            if (runbookVersionName == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "runbookVersionName");
            }
            this.runbookVersionName = runbookVersionName;
            return this;
        }
        @CustomType.Setter
        public Builder schedulerDefinitions(List<GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition> schedulerDefinitions) {
            if (schedulerDefinitions == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "schedulerDefinitions");
            }
            this.schedulerDefinitions = schedulerDefinitions;
            return this;
        }
        public Builder schedulerDefinitions(GetSchedulerExecutionsSchedulerExecutionCollectionItemSchedulerDefinition... schedulerDefinitions) {
            return schedulerDefinitions(List.of(schedulerDefinitions));
        }
        @CustomType.Setter
        public Builder schedulerJobId(String schedulerJobId) {
            if (schedulerJobId == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "schedulerJobId");
            }
            this.schedulerJobId = schedulerJobId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduled(String timeScheduled) {
            if (timeScheduled == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "timeScheduled");
            }
            this.timeScheduled = timeScheduled;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSchedulerExecutionsSchedulerExecutionCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSchedulerExecutionsSchedulerExecutionCollectionItem build() {
            final var _resultValue = new GetSchedulerExecutionsSchedulerExecutionCollectionItem();
            _resultValue.activityId = activityId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.latestRunbookVersionName = latestRunbookVersionName;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.resourceDisplayName = resourceDisplayName;
            _resultValue.resourceId = resourceId;
            _resultValue.runbookDisplayName = runbookDisplayName;
            _resultValue.runbookId = runbookId;
            _resultValue.runbookVersionName = runbookVersionName;
            _resultValue.schedulerDefinitions = schedulerDefinitions;
            _resultValue.schedulerJobId = schedulerJobId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeScheduled = timeScheduled;
            _resultValue.timeStarted = timeStarted;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
