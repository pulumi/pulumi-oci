// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetAppsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetAppsManagement.outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent;
import com.pulumi.oci.FleetAppsManagement.outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential;
import com.pulumi.oci.FleetAppsManagement.outputs.GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail {
    private String catalogId;
    /**
     * @return Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
     * 
     */
    private String command;
    /**
     * @return Catalog Id having config file.
     * 
     */
    private String configFile;
    /**
     * @return Content Source details.
     * 
     */
    private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent> contents;
    /**
     * @return Credentials required for executing the task.
     * 
     */
    private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential> credentials;
    /**
     * @return Endpoint to be invoked.
     * 
     */
    private String endpoint;
    /**
     * @return The action type of the task
     * 
     */
    private String executionType;
    /**
     * @return Is the Content an executable file?
     * 
     */
    private Boolean isExecutableContent;
    /**
     * @return Is the script locked to prevent changes directly in Object Storage?
     * 
     */
    private Boolean isLocked;
    /**
     * @return Is read output variable enabled
     * 
     */
    private Boolean isReadOutputVariableEnabled;
    /**
     * @return OCID of the compartment to which the resource belongs to.
     * 
     */
    private String targetCompartmentId;
    /**
     * @return The variable of the task. At least one of the dynamicArguments or output needs to be provided.
     * 
     */
    private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable> variables;

    private GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail() {}
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return Optional command to execute the content. You can provide any commands/arguments that can&#39;t be part of the script.
     * 
     */
    public String command() {
        return this.command;
    }
    /**
     * @return Catalog Id having config file.
     * 
     */
    public String configFile() {
        return this.configFile;
    }
    /**
     * @return Content Source details.
     * 
     */
    public List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent> contents() {
        return this.contents;
    }
    /**
     * @return Credentials required for executing the task.
     * 
     */
    public List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential> credentials() {
        return this.credentials;
    }
    /**
     * @return Endpoint to be invoked.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The action type of the task
     * 
     */
    public String executionType() {
        return this.executionType;
    }
    /**
     * @return Is the Content an executable file?
     * 
     */
    public Boolean isExecutableContent() {
        return this.isExecutableContent;
    }
    /**
     * @return Is the script locked to prevent changes directly in Object Storage?
     * 
     */
    public Boolean isLocked() {
        return this.isLocked;
    }
    /**
     * @return Is read output variable enabled
     * 
     */
    public Boolean isReadOutputVariableEnabled() {
        return this.isReadOutputVariableEnabled;
    }
    /**
     * @return OCID of the compartment to which the resource belongs to.
     * 
     */
    public String targetCompartmentId() {
        return this.targetCompartmentId;
    }
    /**
     * @return The variable of the task. At least one of the dynamicArguments or output needs to be provided.
     * 
     */
    public List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable> variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogId;
        private String command;
        private String configFile;
        private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent> contents;
        private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential> credentials;
        private String endpoint;
        private String executionType;
        private Boolean isExecutableContent;
        private Boolean isLocked;
        private Boolean isReadOutputVariableEnabled;
        private String targetCompartmentId;
        private List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable> variables;
        public Builder() {}
        public Builder(GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.command = defaults.command;
    	      this.configFile = defaults.configFile;
    	      this.contents = defaults.contents;
    	      this.credentials = defaults.credentials;
    	      this.endpoint = defaults.endpoint;
    	      this.executionType = defaults.executionType;
    	      this.isExecutableContent = defaults.isExecutableContent;
    	      this.isLocked = defaults.isLocked;
    	      this.isReadOutputVariableEnabled = defaults.isReadOutputVariableEnabled;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            if (catalogId == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "catalogId");
            }
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder command(String command) {
            if (command == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "command");
            }
            this.command = command;
            return this;
        }
        @CustomType.Setter
        public Builder configFile(String configFile) {
            if (configFile == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "configFile");
            }
            this.configFile = configFile;
            return this;
        }
        @CustomType.Setter
        public Builder contents(List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent> contents) {
            if (contents == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "contents");
            }
            this.contents = contents;
            return this;
        }
        public Builder contents(GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailContent... contents) {
            return contents(List.of(contents));
        }
        @CustomType.Setter
        public Builder credentials(List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential> credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        public Builder credentials(GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailCredential... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder executionType(String executionType) {
            if (executionType == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "executionType");
            }
            this.executionType = executionType;
            return this;
        }
        @CustomType.Setter
        public Builder isExecutableContent(Boolean isExecutableContent) {
            if (isExecutableContent == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "isExecutableContent");
            }
            this.isExecutableContent = isExecutableContent;
            return this;
        }
        @CustomType.Setter
        public Builder isLocked(Boolean isLocked) {
            if (isLocked == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "isLocked");
            }
            this.isLocked = isLocked;
            return this;
        }
        @CustomType.Setter
        public Builder isReadOutputVariableEnabled(Boolean isReadOutputVariableEnabled) {
            if (isReadOutputVariableEnabled == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "isReadOutputVariableEnabled");
            }
            this.isReadOutputVariableEnabled = isReadOutputVariableEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder targetCompartmentId(String targetCompartmentId) {
            if (targetCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "targetCompartmentId");
            }
            this.targetCompartmentId = targetCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder variables(List<GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable> variables) {
            if (variables == null) {
              throw new MissingRequiredPropertyException("GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail", "variables");
            }
            this.variables = variables;
            return this;
        }
        public Builder variables(GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetailVariable... variables) {
            return variables(List.of(variables));
        }
        public GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail build() {
            final var _resultValue = new GetTaskRecordsTaskRecordCollectionItemDetailExecutionDetail();
            _resultValue.catalogId = catalogId;
            _resultValue.command = command;
            _resultValue.configFile = configFile;
            _resultValue.contents = contents;
            _resultValue.credentials = credentials;
            _resultValue.endpoint = endpoint;
            _resultValue.executionType = executionType;
            _resultValue.isExecutableContent = isExecutableContent;
            _resultValue.isLocked = isLocked;
            _resultValue.isReadOutputVariableEnabled = isReadOutputVariableEnabled;
            _resultValue.targetCompartmentId = targetCompartmentId;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
