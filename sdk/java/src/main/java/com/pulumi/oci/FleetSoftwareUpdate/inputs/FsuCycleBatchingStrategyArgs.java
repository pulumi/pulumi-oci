// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FsuCycleBatchingStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final FsuCycleBatchingStrategyArgs Empty = new FsuCycleBatchingStrategyArgs();

    @Import(name="isForceRolling")
    private @Nullable Output<Boolean> isForceRolling;

    public Optional<Output<Boolean>> isForceRolling() {
        return Optional.ofNullable(this.isForceRolling);
    }

    @Import(name="isWaitForBatchResume")
    private @Nullable Output<Boolean> isWaitForBatchResume;

    public Optional<Output<Boolean>> isWaitForBatchResume() {
        return Optional.ofNullable(this.isWaitForBatchResume);
    }

    @Import(name="percentage")
    private @Nullable Output<Integer> percentage;

    public Optional<Output<Integer>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private FsuCycleBatchingStrategyArgs() {}

    private FsuCycleBatchingStrategyArgs(FsuCycleBatchingStrategyArgs $) {
        this.isForceRolling = $.isForceRolling;
        this.isWaitForBatchResume = $.isWaitForBatchResume;
        this.percentage = $.percentage;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FsuCycleBatchingStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FsuCycleBatchingStrategyArgs $;

        public Builder() {
            $ = new FsuCycleBatchingStrategyArgs();
        }

        public Builder(FsuCycleBatchingStrategyArgs defaults) {
            $ = new FsuCycleBatchingStrategyArgs(Objects.requireNonNull(defaults));
        }

        public Builder isForceRolling(@Nullable Output<Boolean> isForceRolling) {
            $.isForceRolling = isForceRolling;
            return this;
        }

        public Builder isForceRolling(Boolean isForceRolling) {
            return isForceRolling(Output.of(isForceRolling));
        }

        public Builder isWaitForBatchResume(@Nullable Output<Boolean> isWaitForBatchResume) {
            $.isWaitForBatchResume = isWaitForBatchResume;
            return this;
        }

        public Builder isWaitForBatchResume(Boolean isWaitForBatchResume) {
            return isWaitForBatchResume(Output.of(isWaitForBatchResume));
        }

        public Builder percentage(@Nullable Output<Integer> percentage) {
            $.percentage = percentage;
            return this;
        }

        public Builder percentage(Integer percentage) {
            return percentage(Output.of(percentage));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FsuCycleBatchingStrategyArgs build() {
            return $;
        }
    }

}
