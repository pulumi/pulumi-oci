// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FsuCycleGoalVersionDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FsuCycleGoalVersionDetailsArgs Empty = new FsuCycleGoalVersionDetailsArgs();

    /**
     * (Updatable) Goal home policy to use when Staging the Goal Version during patching. CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version. USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home.  If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created.  If more than one existing home for the selected image is found, then the home with the least number of databases will be used.  If multiple homes have the least number of databases, then a home will be selected at random.
     * 
     */
    @Import(name="homePolicy")
    private @Nullable Output<String> homePolicy;

    /**
     * @return (Updatable) Goal home policy to use when Staging the Goal Version during patching. CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version. USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home.  If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created.  If more than one existing home for the selected image is found, then the home with the least number of databases will be used.  If multiple homes have the least number of databases, then a home will be selected at random.
     * 
     */
    public Optional<Output<String>> homePolicy() {
        return Optional.ofNullable(this.homePolicy);
    }

    /**
     * (Updatable) Prefix name used for new DB home resources created as part of the Stage Action. Format: &lt;specified_prefix&gt;_&lt;timestamp&gt; If not specified, a default Oracle Cloud Infrastructure DB home resource will be generated for the new DB home resources created.
     * 
     */
    @Import(name="newHomePrefix")
    private @Nullable Output<String> newHomePrefix;

    /**
     * @return (Updatable) Prefix name used for new DB home resources created as part of the Stage Action. Format: &lt;specified_prefix&gt;_&lt;timestamp&gt; If not specified, a default Oracle Cloud Infrastructure DB home resource will be generated for the new DB home resources created.
     * 
     */
    public Optional<Output<String>> newHomePrefix() {
        return Optional.ofNullable(this.newHomePrefix);
    }

    /**
     * (Updatable) Target database software image OCID.
     * 
     */
    @Import(name="softwareImageId")
    private @Nullable Output<String> softwareImageId;

    /**
     * @return (Updatable) Target database software image OCID.
     * 
     */
    public Optional<Output<String>> softwareImageId() {
        return Optional.ofNullable(this.softwareImageId);
    }

    /**
     * (Updatable) Type of goal target version specified
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of goal target version specified
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) Target DB or GI version string for the Exadata Fleet Update Cycle.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return (Updatable) Target DB or GI version string for the Exadata Fleet Update Cycle.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private FsuCycleGoalVersionDetailsArgs() {}

    private FsuCycleGoalVersionDetailsArgs(FsuCycleGoalVersionDetailsArgs $) {
        this.homePolicy = $.homePolicy;
        this.newHomePrefix = $.newHomePrefix;
        this.softwareImageId = $.softwareImageId;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FsuCycleGoalVersionDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FsuCycleGoalVersionDetailsArgs $;

        public Builder() {
            $ = new FsuCycleGoalVersionDetailsArgs();
        }

        public Builder(FsuCycleGoalVersionDetailsArgs defaults) {
            $ = new FsuCycleGoalVersionDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param homePolicy (Updatable) Goal home policy to use when Staging the Goal Version during patching. CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version. USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home.  If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created.  If more than one existing home for the selected image is found, then the home with the least number of databases will be used.  If multiple homes have the least number of databases, then a home will be selected at random.
         * 
         * @return builder
         * 
         */
        public Builder homePolicy(@Nullable Output<String> homePolicy) {
            $.homePolicy = homePolicy;
            return this;
        }

        /**
         * @param homePolicy (Updatable) Goal home policy to use when Staging the Goal Version during patching. CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version. USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home.  If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created.  If more than one existing home for the selected image is found, then the home with the least number of databases will be used.  If multiple homes have the least number of databases, then a home will be selected at random.
         * 
         * @return builder
         * 
         */
        public Builder homePolicy(String homePolicy) {
            return homePolicy(Output.of(homePolicy));
        }

        /**
         * @param newHomePrefix (Updatable) Prefix name used for new DB home resources created as part of the Stage Action. Format: &lt;specified_prefix&gt;_&lt;timestamp&gt; If not specified, a default Oracle Cloud Infrastructure DB home resource will be generated for the new DB home resources created.
         * 
         * @return builder
         * 
         */
        public Builder newHomePrefix(@Nullable Output<String> newHomePrefix) {
            $.newHomePrefix = newHomePrefix;
            return this;
        }

        /**
         * @param newHomePrefix (Updatable) Prefix name used for new DB home resources created as part of the Stage Action. Format: &lt;specified_prefix&gt;_&lt;timestamp&gt; If not specified, a default Oracle Cloud Infrastructure DB home resource will be generated for the new DB home resources created.
         * 
         * @return builder
         * 
         */
        public Builder newHomePrefix(String newHomePrefix) {
            return newHomePrefix(Output.of(newHomePrefix));
        }

        /**
         * @param softwareImageId (Updatable) Target database software image OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareImageId(@Nullable Output<String> softwareImageId) {
            $.softwareImageId = softwareImageId;
            return this;
        }

        /**
         * @param softwareImageId (Updatable) Target database software image OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareImageId(String softwareImageId) {
            return softwareImageId(Output.of(softwareImageId));
        }

        /**
         * @param type (Updatable) Type of goal target version specified
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of goal target version specified
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version (Updatable) Target DB or GI version string for the Exadata Fleet Update Cycle.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version (Updatable) Target DB or GI version string for the Exadata Fleet Update Cycle.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public FsuCycleGoalVersionDetailsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("FsuCycleGoalVersionDetailsArgs", "type");
            }
            return $;
        }
    }

}
