// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleApplyActionScheduleArgs;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleBatchingStrategyArgs;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleDiagnosticsCollectionArgs;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleGoalVersionDetailsArgs;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleNextActionToExecuteArgs;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.FsuCycleStageActionScheduleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FsuCycleState extends com.pulumi.resources.ResourceArgs {

    public static final FsuCycleState Empty = new FsuCycleState();

    @Import(name="applyActionSchedule")
    private @Nullable Output<FsuCycleApplyActionScheduleArgs> applyActionSchedule;

    public Optional<Output<FsuCycleApplyActionScheduleArgs>> applyActionSchedule() {
        return Optional.ofNullable(this.applyActionSchedule);
    }

    @Import(name="batchingStrategy")
    private @Nullable Output<FsuCycleBatchingStrategyArgs> batchingStrategy;

    public Optional<Output<FsuCycleBatchingStrategyArgs>> batchingStrategy() {
        return Optional.ofNullable(this.batchingStrategy);
    }

    @Import(name="collectionType")
    private @Nullable Output<String> collectionType;

    public Optional<Output<String>> collectionType() {
        return Optional.ofNullable(this.collectionType);
    }

    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    @Import(name="diagnosticsCollection")
    private @Nullable Output<FsuCycleDiagnosticsCollectionArgs> diagnosticsCollection;

    public Optional<Output<FsuCycleDiagnosticsCollectionArgs>> diagnosticsCollection() {
        return Optional.ofNullable(this.diagnosticsCollection);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="executingFsuActionId")
    private @Nullable Output<String> executingFsuActionId;

    public Optional<Output<String>> executingFsuActionId() {
        return Optional.ofNullable(this.executingFsuActionId);
    }

    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    @Import(name="fsuCollectionId")
    private @Nullable Output<String> fsuCollectionId;

    public Optional<Output<String>> fsuCollectionId() {
        return Optional.ofNullable(this.fsuCollectionId);
    }

    @Import(name="goalVersionDetails")
    private @Nullable Output<FsuCycleGoalVersionDetailsArgs> goalVersionDetails;

    public Optional<Output<FsuCycleGoalVersionDetailsArgs>> goalVersionDetails() {
        return Optional.ofNullable(this.goalVersionDetails);
    }

    @Import(name="isIgnoreMissingPatches")
    private @Nullable Output<List<String>> isIgnoreMissingPatches;

    public Optional<Output<List<String>>> isIgnoreMissingPatches() {
        return Optional.ofNullable(this.isIgnoreMissingPatches);
    }

    @Import(name="isIgnorePatches")
    private @Nullable Output<Boolean> isIgnorePatches;

    public Optional<Output<Boolean>> isIgnorePatches() {
        return Optional.ofNullable(this.isIgnorePatches);
    }

    @Import(name="isKeepPlacement")
    private @Nullable Output<Boolean> isKeepPlacement;

    public Optional<Output<Boolean>> isKeepPlacement() {
        return Optional.ofNullable(this.isKeepPlacement);
    }

    @Import(name="lastCompletedAction")
    private @Nullable Output<String> lastCompletedAction;

    public Optional<Output<String>> lastCompletedAction() {
        return Optional.ofNullable(this.lastCompletedAction);
    }

    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    @Import(name="maxDrainTimeoutInSeconds")
    private @Nullable Output<Integer> maxDrainTimeoutInSeconds;

    public Optional<Output<Integer>> maxDrainTimeoutInSeconds() {
        return Optional.ofNullable(this.maxDrainTimeoutInSeconds);
    }

    @Import(name="nextActionToExecutes")
    private @Nullable Output<List<FsuCycleNextActionToExecuteArgs>> nextActionToExecutes;

    public Optional<Output<List<FsuCycleNextActionToExecuteArgs>>> nextActionToExecutes() {
        return Optional.ofNullable(this.nextActionToExecutes);
    }

    @Import(name="stageActionSchedule")
    private @Nullable Output<FsuCycleStageActionScheduleArgs> stageActionSchedule;

    public Optional<Output<FsuCycleStageActionScheduleArgs>> stageActionSchedule() {
        return Optional.ofNullable(this.stageActionSchedule);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    @Import(name="timeFinished")
    private @Nullable Output<String> timeFinished;

    public Optional<Output<String>> timeFinished() {
        return Optional.ofNullable(this.timeFinished);
    }

    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private FsuCycleState() {}

    private FsuCycleState(FsuCycleState $) {
        this.applyActionSchedule = $.applyActionSchedule;
        this.batchingStrategy = $.batchingStrategy;
        this.collectionType = $.collectionType;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.diagnosticsCollection = $.diagnosticsCollection;
        this.displayName = $.displayName;
        this.executingFsuActionId = $.executingFsuActionId;
        this.freeformTags = $.freeformTags;
        this.fsuCollectionId = $.fsuCollectionId;
        this.goalVersionDetails = $.goalVersionDetails;
        this.isIgnoreMissingPatches = $.isIgnoreMissingPatches;
        this.isIgnorePatches = $.isIgnorePatches;
        this.isKeepPlacement = $.isKeepPlacement;
        this.lastCompletedAction = $.lastCompletedAction;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maxDrainTimeoutInSeconds = $.maxDrainTimeoutInSeconds;
        this.nextActionToExecutes = $.nextActionToExecutes;
        this.stageActionSchedule = $.stageActionSchedule;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeFinished = $.timeFinished;
        this.timeUpdated = $.timeUpdated;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FsuCycleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FsuCycleState $;

        public Builder() {
            $ = new FsuCycleState();
        }

        public Builder(FsuCycleState defaults) {
            $ = new FsuCycleState(Objects.requireNonNull(defaults));
        }

        public Builder applyActionSchedule(@Nullable Output<FsuCycleApplyActionScheduleArgs> applyActionSchedule) {
            $.applyActionSchedule = applyActionSchedule;
            return this;
        }

        public Builder applyActionSchedule(FsuCycleApplyActionScheduleArgs applyActionSchedule) {
            return applyActionSchedule(Output.of(applyActionSchedule));
        }

        public Builder batchingStrategy(@Nullable Output<FsuCycleBatchingStrategyArgs> batchingStrategy) {
            $.batchingStrategy = batchingStrategy;
            return this;
        }

        public Builder batchingStrategy(FsuCycleBatchingStrategyArgs batchingStrategy) {
            return batchingStrategy(Output.of(batchingStrategy));
        }

        public Builder collectionType(@Nullable Output<String> collectionType) {
            $.collectionType = collectionType;
            return this;
        }

        public Builder collectionType(String collectionType) {
            return collectionType(Output.of(collectionType));
        }

        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        public Builder diagnosticsCollection(@Nullable Output<FsuCycleDiagnosticsCollectionArgs> diagnosticsCollection) {
            $.diagnosticsCollection = diagnosticsCollection;
            return this;
        }

        public Builder diagnosticsCollection(FsuCycleDiagnosticsCollectionArgs diagnosticsCollection) {
            return diagnosticsCollection(Output.of(diagnosticsCollection));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder executingFsuActionId(@Nullable Output<String> executingFsuActionId) {
            $.executingFsuActionId = executingFsuActionId;
            return this;
        }

        public Builder executingFsuActionId(String executingFsuActionId) {
            return executingFsuActionId(Output.of(executingFsuActionId));
        }

        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        public Builder fsuCollectionId(@Nullable Output<String> fsuCollectionId) {
            $.fsuCollectionId = fsuCollectionId;
            return this;
        }

        public Builder fsuCollectionId(String fsuCollectionId) {
            return fsuCollectionId(Output.of(fsuCollectionId));
        }

        public Builder goalVersionDetails(@Nullable Output<FsuCycleGoalVersionDetailsArgs> goalVersionDetails) {
            $.goalVersionDetails = goalVersionDetails;
            return this;
        }

        public Builder goalVersionDetails(FsuCycleGoalVersionDetailsArgs goalVersionDetails) {
            return goalVersionDetails(Output.of(goalVersionDetails));
        }

        public Builder isIgnoreMissingPatches(@Nullable Output<List<String>> isIgnoreMissingPatches) {
            $.isIgnoreMissingPatches = isIgnoreMissingPatches;
            return this;
        }

        public Builder isIgnoreMissingPatches(List<String> isIgnoreMissingPatches) {
            return isIgnoreMissingPatches(Output.of(isIgnoreMissingPatches));
        }

        public Builder isIgnoreMissingPatches(String... isIgnoreMissingPatches) {
            return isIgnoreMissingPatches(List.of(isIgnoreMissingPatches));
        }

        public Builder isIgnorePatches(@Nullable Output<Boolean> isIgnorePatches) {
            $.isIgnorePatches = isIgnorePatches;
            return this;
        }

        public Builder isIgnorePatches(Boolean isIgnorePatches) {
            return isIgnorePatches(Output.of(isIgnorePatches));
        }

        public Builder isKeepPlacement(@Nullable Output<Boolean> isKeepPlacement) {
            $.isKeepPlacement = isKeepPlacement;
            return this;
        }

        public Builder isKeepPlacement(Boolean isKeepPlacement) {
            return isKeepPlacement(Output.of(isKeepPlacement));
        }

        public Builder lastCompletedAction(@Nullable Output<String> lastCompletedAction) {
            $.lastCompletedAction = lastCompletedAction;
            return this;
        }

        public Builder lastCompletedAction(String lastCompletedAction) {
            return lastCompletedAction(Output.of(lastCompletedAction));
        }

        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        public Builder maxDrainTimeoutInSeconds(@Nullable Output<Integer> maxDrainTimeoutInSeconds) {
            $.maxDrainTimeoutInSeconds = maxDrainTimeoutInSeconds;
            return this;
        }

        public Builder maxDrainTimeoutInSeconds(Integer maxDrainTimeoutInSeconds) {
            return maxDrainTimeoutInSeconds(Output.of(maxDrainTimeoutInSeconds));
        }

        public Builder nextActionToExecutes(@Nullable Output<List<FsuCycleNextActionToExecuteArgs>> nextActionToExecutes) {
            $.nextActionToExecutes = nextActionToExecutes;
            return this;
        }

        public Builder nextActionToExecutes(List<FsuCycleNextActionToExecuteArgs> nextActionToExecutes) {
            return nextActionToExecutes(Output.of(nextActionToExecutes));
        }

        public Builder nextActionToExecutes(FsuCycleNextActionToExecuteArgs... nextActionToExecutes) {
            return nextActionToExecutes(List.of(nextActionToExecutes));
        }

        public Builder stageActionSchedule(@Nullable Output<FsuCycleStageActionScheduleArgs> stageActionSchedule) {
            $.stageActionSchedule = stageActionSchedule;
            return this;
        }

        public Builder stageActionSchedule(FsuCycleStageActionScheduleArgs stageActionSchedule) {
            return stageActionSchedule(Output.of(stageActionSchedule));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public Builder timeFinished(@Nullable Output<String> timeFinished) {
            $.timeFinished = timeFinished;
            return this;
        }

        public Builder timeFinished(String timeFinished) {
            return timeFinished(Output.of(timeFinished));
        }

        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FsuCycleState build() {
            return $;
        }
    }

}
