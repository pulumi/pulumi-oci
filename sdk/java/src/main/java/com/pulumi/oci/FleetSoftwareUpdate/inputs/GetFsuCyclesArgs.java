// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetSoftwareUpdate.inputs.GetFsuCyclesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFsuCyclesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFsuCyclesArgs Empty = new GetFsuCyclesArgs();

    /**
     * A filter to return only resources whose Collection type matches the given type.
     * 
     */
    @Import(name="collectionType")
    private @Nullable Output<String> collectionType;

    /**
     * @return A filter to return only resources whose Collection type matches the given type.
     * 
     */
    public Optional<Output<String>> collectionType() {
        return Optional.ofNullable(this.collectionType);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetFsuCyclesFilterArgs>> filters;

    public Optional<Output<List<GetFsuCyclesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
     * 
     */
    @Import(name="fsuCollectionId")
    private @Nullable Output<String> fsuCollectionId;

    /**
     * @return A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
     * 
     */
    public Optional<Output<String>> fsuCollectionId() {
        return Optional.ofNullable(this.fsuCollectionId);
    }

    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only entries whose targetVersion matches the given targetVersion.
     * 
     */
    @Import(name="targetVersion")
    private @Nullable Output<String> targetVersion;

    /**
     * @return A filter to return only entries whose targetVersion matches the given targetVersion.
     * 
     */
    public Optional<Output<String>> targetVersion() {
        return Optional.ofNullable(this.targetVersion);
    }

    private GetFsuCyclesArgs() {}

    private GetFsuCyclesArgs(GetFsuCyclesArgs $) {
        this.collectionType = $.collectionType;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fsuCollectionId = $.fsuCollectionId;
        this.state = $.state;
        this.targetVersion = $.targetVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFsuCyclesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFsuCyclesArgs $;

        public Builder() {
            $ = new GetFsuCyclesArgs();
        }

        public Builder(GetFsuCyclesArgs defaults) {
            $ = new GetFsuCyclesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionType A filter to return only resources whose Collection type matches the given type.
         * 
         * @return builder
         * 
         */
        public Builder collectionType(@Nullable Output<String> collectionType) {
            $.collectionType = collectionType;
            return this;
        }

        /**
         * @param collectionType A filter to return only resources whose Collection type matches the given type.
         * 
         * @return builder
         * 
         */
        public Builder collectionType(String collectionType) {
            return collectionType(Output.of(collectionType));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetFsuCyclesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetFsuCyclesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetFsuCyclesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fsuCollectionId A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
         * 
         * @return builder
         * 
         */
        public Builder fsuCollectionId(@Nullable Output<String> fsuCollectionId) {
            $.fsuCollectionId = fsuCollectionId;
            return this;
        }

        /**
         * @param fsuCollectionId A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
         * 
         * @return builder
         * 
         */
        public Builder fsuCollectionId(String fsuCollectionId) {
            return fsuCollectionId(Output.of(fsuCollectionId));
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetVersion A filter to return only entries whose targetVersion matches the given targetVersion.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(@Nullable Output<String> targetVersion) {
            $.targetVersion = targetVersion;
            return this;
        }

        /**
         * @param targetVersion A filter to return only entries whose targetVersion matches the given targetVersion.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(String targetVersion) {
            return targetVersion(Output.of(targetVersion));
        }

        public GetFsuCyclesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetFsuCyclesArgs", "compartmentId");
            }
            return $;
        }
    }

}
