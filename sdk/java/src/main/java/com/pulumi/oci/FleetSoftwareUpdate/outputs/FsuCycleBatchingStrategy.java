// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FsuCycleBatchingStrategy {
    /**
     * @return (Updatable) True to force rolling patching.
     * 
     */
    private @Nullable Boolean isForceRolling;
    /**
     * @return (Updatable) True to wait for customer to resume the Apply Action once the first half is done. False to automatically patch the second half.
     * 
     */
    private @Nullable Boolean isWaitForBatchResume;
    /**
     * @return (Updatable) Percentage of availability in the service during the Patch operation.
     * 
     */
    private @Nullable Integer percentage;
    /**
     * @return (Updatable) Supported batching strategies.
     * 
     */
    private @Nullable String type;

    private FsuCycleBatchingStrategy() {}
    /**
     * @return (Updatable) True to force rolling patching.
     * 
     */
    public Optional<Boolean> isForceRolling() {
        return Optional.ofNullable(this.isForceRolling);
    }
    /**
     * @return (Updatable) True to wait for customer to resume the Apply Action once the first half is done. False to automatically patch the second half.
     * 
     */
    public Optional<Boolean> isWaitForBatchResume() {
        return Optional.ofNullable(this.isWaitForBatchResume);
    }
    /**
     * @return (Updatable) Percentage of availability in the service during the Patch operation.
     * 
     */
    public Optional<Integer> percentage() {
        return Optional.ofNullable(this.percentage);
    }
    /**
     * @return (Updatable) Supported batching strategies.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FsuCycleBatchingStrategy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isForceRolling;
        private @Nullable Boolean isWaitForBatchResume;
        private @Nullable Integer percentage;
        private @Nullable String type;
        public Builder() {}
        public Builder(FsuCycleBatchingStrategy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isForceRolling = defaults.isForceRolling;
    	      this.isWaitForBatchResume = defaults.isWaitForBatchResume;
    	      this.percentage = defaults.percentage;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder isForceRolling(@Nullable Boolean isForceRolling) {

            this.isForceRolling = isForceRolling;
            return this;
        }
        @CustomType.Setter
        public Builder isWaitForBatchResume(@Nullable Boolean isWaitForBatchResume) {

            this.isWaitForBatchResume = isWaitForBatchResume;
            return this;
        }
        @CustomType.Setter
        public Builder percentage(@Nullable Integer percentage) {

            this.percentage = percentage;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public FsuCycleBatchingStrategy build() {
            final var _resultValue = new FsuCycleBatchingStrategy();
            _resultValue.isForceRolling = isForceRolling;
            _resultValue.isWaitForBatchResume = isWaitForBatchResume;
            _resultValue.percentage = percentage;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
