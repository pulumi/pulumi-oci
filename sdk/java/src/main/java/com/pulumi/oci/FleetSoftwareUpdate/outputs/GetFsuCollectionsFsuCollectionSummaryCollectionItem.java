// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFsuCollectionsFsuCollectionSummaryCollectionItem {
    private List<GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle> activeFsuCycles;
    private String compartmentId;
    private Map<String,Object> definedTags;
    private String displayName;
    private List<GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery> fleetDiscoveries;
    private Map<String,Object> freeformTags;
    private String id;
    private String lifecycleDetails;
    private String serviceType;
    private String sourceMajorVersion;
    private String state;
    private Map<String,Object> systemTags;
    private Integer targetCount;
    private String timeCreated;
    private String timeUpdated;
    private String type;

    private GetFsuCollectionsFsuCollectionSummaryCollectionItem() {}
    public List<GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle> activeFsuCycles() {
        return this.activeFsuCycles;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public String displayName() {
        return this.displayName;
    }
    public List<GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery> fleetDiscoveries() {
        return this.fleetDiscoveries;
    }
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public String id() {
        return this.id;
    }
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String serviceType() {
        return this.serviceType;
    }
    public String sourceMajorVersion() {
        return this.sourceMajorVersion;
    }
    public String state() {
        return this.state;
    }
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    public Integer targetCount() {
        return this.targetCount;
    }
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFsuCollectionsFsuCollectionSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle> activeFsuCycles;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private List<GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery> fleetDiscoveries;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String serviceType;
        private String sourceMajorVersion;
        private String state;
        private Map<String,Object> systemTags;
        private Integer targetCount;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetFsuCollectionsFsuCollectionSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeFsuCycles = defaults.activeFsuCycles;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.fleetDiscoveries = defaults.fleetDiscoveries;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.serviceType = defaults.serviceType;
    	      this.sourceMajorVersion = defaults.sourceMajorVersion;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetCount = defaults.targetCount;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder activeFsuCycles(List<GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle> activeFsuCycles) {
            if (activeFsuCycles == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "activeFsuCycles");
            }
            this.activeFsuCycles = activeFsuCycles;
            return this;
        }
        public Builder activeFsuCycles(GetFsuCollectionsFsuCollectionSummaryCollectionItemActiveFsuCycle... activeFsuCycles) {
            return activeFsuCycles(List.of(activeFsuCycles));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder fleetDiscoveries(List<GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery> fleetDiscoveries) {
            if (fleetDiscoveries == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "fleetDiscoveries");
            }
            this.fleetDiscoveries = fleetDiscoveries;
            return this;
        }
        public Builder fleetDiscoveries(GetFsuCollectionsFsuCollectionSummaryCollectionItemFleetDiscovery... fleetDiscoveries) {
            return fleetDiscoveries(List.of(fleetDiscoveries));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceMajorVersion(String sourceMajorVersion) {
            if (sourceMajorVersion == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "sourceMajorVersion");
            }
            this.sourceMajorVersion = sourceMajorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetCount(Integer targetCount) {
            if (targetCount == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "targetCount");
            }
            this.targetCount = targetCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetFsuCollectionsFsuCollectionSummaryCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        public GetFsuCollectionsFsuCollectionSummaryCollectionItem build() {
            final var _resultValue = new GetFsuCollectionsFsuCollectionSummaryCollectionItem();
            _resultValue.activeFsuCycles = activeFsuCycles;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.fleetDiscoveries = fleetDiscoveries;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.serviceType = serviceType;
            _resultValue.sourceMajorVersion = sourceMajorVersion;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetCount = targetCount;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
