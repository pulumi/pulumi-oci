// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFsuCycleBatchingStrategy {
    /**
     * @return True to force rolling patching.
     * 
     */
    private Boolean isForceRolling;
    /**
     * @return True to wait for customer to resume the Apply Action once the first half is done. False to automatically patch the second half.
     * 
     */
    private Boolean isWaitForBatchResume;
    /**
     * @return Percentage of availability in the service during the Patch operation.
     * 
     */
    private Integer percentage;
    /**
     * @return Type of Exadata Fleet Update Cycle.
     * 
     */
    private String type;

    private GetFsuCycleBatchingStrategy() {}
    /**
     * @return True to force rolling patching.
     * 
     */
    public Boolean isForceRolling() {
        return this.isForceRolling;
    }
    /**
     * @return True to wait for customer to resume the Apply Action once the first half is done. False to automatically patch the second half.
     * 
     */
    public Boolean isWaitForBatchResume() {
        return this.isWaitForBatchResume;
    }
    /**
     * @return Percentage of availability in the service during the Patch operation.
     * 
     */
    public Integer percentage() {
        return this.percentage;
    }
    /**
     * @return Type of Exadata Fleet Update Cycle.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFsuCycleBatchingStrategy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isForceRolling;
        private Boolean isWaitForBatchResume;
        private Integer percentage;
        private String type;
        public Builder() {}
        public Builder(GetFsuCycleBatchingStrategy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isForceRolling = defaults.isForceRolling;
    	      this.isWaitForBatchResume = defaults.isWaitForBatchResume;
    	      this.percentage = defaults.percentage;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder isForceRolling(Boolean isForceRolling) {
            if (isForceRolling == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleBatchingStrategy", "isForceRolling");
            }
            this.isForceRolling = isForceRolling;
            return this;
        }
        @CustomType.Setter
        public Builder isWaitForBatchResume(Boolean isWaitForBatchResume) {
            if (isWaitForBatchResume == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleBatchingStrategy", "isWaitForBatchResume");
            }
            this.isWaitForBatchResume = isWaitForBatchResume;
            return this;
        }
        @CustomType.Setter
        public Builder percentage(Integer percentage) {
            if (percentage == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleBatchingStrategy", "percentage");
            }
            this.percentage = percentage;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleBatchingStrategy", "type");
            }
            this.type = type;
            return this;
        }
        public GetFsuCycleBatchingStrategy build() {
            final var _resultValue = new GetFsuCycleBatchingStrategy();
            _resultValue.isForceRolling = isForceRolling;
            _resultValue.isWaitForBatchResume = isWaitForBatchResume;
            _resultValue.percentage = percentage;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
