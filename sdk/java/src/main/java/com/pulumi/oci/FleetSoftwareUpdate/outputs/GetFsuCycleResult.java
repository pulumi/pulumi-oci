// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleApplyActionSchedule;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleBatchingStrategy;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleDiagnosticsCollection;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleGoalVersionDetail;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleNextActionToExecute;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCycleStageActionSchedule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFsuCycleResult {
    /**
     * @return Scheduling related details for the Exadata Fleet Update Action. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails would execute the Exadata Fleet Update Action as soon as possible.
     * 
     */
    private List<GetFsuCycleApplyActionSchedule> applyActionSchedules;
    /**
     * @return Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
     * 
     */
    private List<GetFsuCycleBatchingStrategy> batchingStrategies;
    /**
     * @return Type of Collection this Exadata Fleet Update Cycle belongs to.
     * 
     */
    private String collectionType;
    /**
     * @return Compartment Identifier.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
     * 
     */
    private List<GetFsuCycleDiagnosticsCollection> diagnosticsCollections;
    /**
     * @return Exadata Fleet Update Cycle display name.
     * 
     */
    private String displayName;
    /**
     * @return OCID identifier for the Action that is currently in execution, if applicable.
     * 
     */
    private String executingFsuActionId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return OCID identifier for the Collection ID the Exadata Fleet Update Cycle is assigned to.
     * 
     */
    private String fsuCollectionId;
    private String fsuCycleId;
    /**
     * @return Goal version or image details for the Exadata Fleet Update Cycle.
     * 
     */
    private List<GetFsuCycleGoalVersionDetail> goalVersionDetails;
    /**
     * @return OCID identifier for the Exadata Fleet Update Cycle.
     * 
     */
    private String id;
    /**
     * @return List of bug numbers to ignore.
     * 
     */
    private List<String> isIgnoreMissingPatches;
    /**
     * @return Ignore all patches between the source and target homes during patching.
     * 
     */
    private Boolean isIgnorePatches;
    /**
     * @return Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
     * 
     */
    private Boolean isKeepPlacement;
    /**
     * @return The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
     * 
     */
    private String lastCompletedAction;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Service drain timeout specified in seconds.
     * 
     */
    private Integer maxDrainTimeoutInSeconds;
    /**
     * @return In this array all the possible actions will be listed. The first element is the suggested Action.
     * 
     */
    private List<GetFsuCycleNextActionToExecute> nextActionToExecutes;
    /**
     * @return Scheduling related details for the Exadata Fleet Update Action. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails would execute the Exadata Fleet Update Action as soon as possible.
     * 
     */
    private List<GetFsuCycleStageActionSchedule> stageActionSchedules;
    /**
     * @return The current state of the Exadata Fleet Update Cycle.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeFinished;
    /**
     * @return The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    private String timeUpdated;
    /**
     * @return Type of Exadata Fleet Update Cycle.
     * 
     */
    private String type;

    private GetFsuCycleResult() {}
    /**
     * @return Scheduling related details for the Exadata Fleet Update Action. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails would execute the Exadata Fleet Update Action as soon as possible.
     * 
     */
    public List<GetFsuCycleApplyActionSchedule> applyActionSchedules() {
        return this.applyActionSchedules;
    }
    /**
     * @return Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
     * 
     */
    public List<GetFsuCycleBatchingStrategy> batchingStrategies() {
        return this.batchingStrategies;
    }
    /**
     * @return Type of Collection this Exadata Fleet Update Cycle belongs to.
     * 
     */
    public String collectionType() {
        return this.collectionType;
    }
    /**
     * @return Compartment Identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
     * 
     */
    public List<GetFsuCycleDiagnosticsCollection> diagnosticsCollections() {
        return this.diagnosticsCollections;
    }
    /**
     * @return Exadata Fleet Update Cycle display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return OCID identifier for the Action that is currently in execution, if applicable.
     * 
     */
    public String executingFsuActionId() {
        return this.executingFsuActionId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID identifier for the Collection ID the Exadata Fleet Update Cycle is assigned to.
     * 
     */
    public String fsuCollectionId() {
        return this.fsuCollectionId;
    }
    public String fsuCycleId() {
        return this.fsuCycleId;
    }
    /**
     * @return Goal version or image details for the Exadata Fleet Update Cycle.
     * 
     */
    public List<GetFsuCycleGoalVersionDetail> goalVersionDetails() {
        return this.goalVersionDetails;
    }
    /**
     * @return OCID identifier for the Exadata Fleet Update Cycle.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of bug numbers to ignore.
     * 
     */
    public List<String> isIgnoreMissingPatches() {
        return this.isIgnoreMissingPatches;
    }
    /**
     * @return Ignore all patches between the source and target homes during patching.
     * 
     */
    public Boolean isIgnorePatches() {
        return this.isIgnorePatches;
    }
    /**
     * @return Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
     * 
     */
    public Boolean isKeepPlacement() {
        return this.isKeepPlacement;
    }
    /**
     * @return The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
     * 
     */
    public String lastCompletedAction() {
        return this.lastCompletedAction;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Service drain timeout specified in seconds.
     * 
     */
    public Integer maxDrainTimeoutInSeconds() {
        return this.maxDrainTimeoutInSeconds;
    }
    /**
     * @return In this array all the possible actions will be listed. The first element is the suggested Action.
     * 
     */
    public List<GetFsuCycleNextActionToExecute> nextActionToExecutes() {
        return this.nextActionToExecutes;
    }
    /**
     * @return Scheduling related details for the Exadata Fleet Update Action. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails would execute the Exadata Fleet Update Action as soon as possible.
     * 
     */
    public List<GetFsuCycleStageActionSchedule> stageActionSchedules() {
        return this.stageActionSchedules;
    }
    /**
     * @return The current state of the Exadata Fleet Update Cycle.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeFinished() {
        return this.timeFinished;
    }
    /**
     * @return The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Type of Exadata Fleet Update Cycle.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFsuCycleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetFsuCycleApplyActionSchedule> applyActionSchedules;
        private List<GetFsuCycleBatchingStrategy> batchingStrategies;
        private String collectionType;
        private String compartmentId;
        private Map<String,String> definedTags;
        private List<GetFsuCycleDiagnosticsCollection> diagnosticsCollections;
        private String displayName;
        private String executingFsuActionId;
        private Map<String,String> freeformTags;
        private String fsuCollectionId;
        private String fsuCycleId;
        private List<GetFsuCycleGoalVersionDetail> goalVersionDetails;
        private String id;
        private List<String> isIgnoreMissingPatches;
        private Boolean isIgnorePatches;
        private Boolean isKeepPlacement;
        private String lastCompletedAction;
        private String lifecycleDetails;
        private Integer maxDrainTimeoutInSeconds;
        private List<GetFsuCycleNextActionToExecute> nextActionToExecutes;
        private List<GetFsuCycleStageActionSchedule> stageActionSchedules;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeFinished;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetFsuCycleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyActionSchedules = defaults.applyActionSchedules;
    	      this.batchingStrategies = defaults.batchingStrategies;
    	      this.collectionType = defaults.collectionType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.diagnosticsCollections = defaults.diagnosticsCollections;
    	      this.displayName = defaults.displayName;
    	      this.executingFsuActionId = defaults.executingFsuActionId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.fsuCollectionId = defaults.fsuCollectionId;
    	      this.fsuCycleId = defaults.fsuCycleId;
    	      this.goalVersionDetails = defaults.goalVersionDetails;
    	      this.id = defaults.id;
    	      this.isIgnoreMissingPatches = defaults.isIgnoreMissingPatches;
    	      this.isIgnorePatches = defaults.isIgnorePatches;
    	      this.isKeepPlacement = defaults.isKeepPlacement;
    	      this.lastCompletedAction = defaults.lastCompletedAction;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maxDrainTimeoutInSeconds = defaults.maxDrainTimeoutInSeconds;
    	      this.nextActionToExecutes = defaults.nextActionToExecutes;
    	      this.stageActionSchedules = defaults.stageActionSchedules;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeFinished = defaults.timeFinished;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder applyActionSchedules(List<GetFsuCycleApplyActionSchedule> applyActionSchedules) {
            if (applyActionSchedules == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "applyActionSchedules");
            }
            this.applyActionSchedules = applyActionSchedules;
            return this;
        }
        public Builder applyActionSchedules(GetFsuCycleApplyActionSchedule... applyActionSchedules) {
            return applyActionSchedules(List.of(applyActionSchedules));
        }
        @CustomType.Setter
        public Builder batchingStrategies(List<GetFsuCycleBatchingStrategy> batchingStrategies) {
            if (batchingStrategies == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "batchingStrategies");
            }
            this.batchingStrategies = batchingStrategies;
            return this;
        }
        public Builder batchingStrategies(GetFsuCycleBatchingStrategy... batchingStrategies) {
            return batchingStrategies(List.of(batchingStrategies));
        }
        @CustomType.Setter
        public Builder collectionType(String collectionType) {
            if (collectionType == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "collectionType");
            }
            this.collectionType = collectionType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticsCollections(List<GetFsuCycleDiagnosticsCollection> diagnosticsCollections) {
            if (diagnosticsCollections == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "diagnosticsCollections");
            }
            this.diagnosticsCollections = diagnosticsCollections;
            return this;
        }
        public Builder diagnosticsCollections(GetFsuCycleDiagnosticsCollection... diagnosticsCollections) {
            return diagnosticsCollections(List.of(diagnosticsCollections));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder executingFsuActionId(String executingFsuActionId) {
            if (executingFsuActionId == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "executingFsuActionId");
            }
            this.executingFsuActionId = executingFsuActionId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder fsuCollectionId(String fsuCollectionId) {
            if (fsuCollectionId == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "fsuCollectionId");
            }
            this.fsuCollectionId = fsuCollectionId;
            return this;
        }
        @CustomType.Setter
        public Builder fsuCycleId(String fsuCycleId) {
            if (fsuCycleId == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "fsuCycleId");
            }
            this.fsuCycleId = fsuCycleId;
            return this;
        }
        @CustomType.Setter
        public Builder goalVersionDetails(List<GetFsuCycleGoalVersionDetail> goalVersionDetails) {
            if (goalVersionDetails == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "goalVersionDetails");
            }
            this.goalVersionDetails = goalVersionDetails;
            return this;
        }
        public Builder goalVersionDetails(GetFsuCycleGoalVersionDetail... goalVersionDetails) {
            return goalVersionDetails(List.of(goalVersionDetails));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIgnoreMissingPatches(List<String> isIgnoreMissingPatches) {
            if (isIgnoreMissingPatches == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "isIgnoreMissingPatches");
            }
            this.isIgnoreMissingPatches = isIgnoreMissingPatches;
            return this;
        }
        public Builder isIgnoreMissingPatches(String... isIgnoreMissingPatches) {
            return isIgnoreMissingPatches(List.of(isIgnoreMissingPatches));
        }
        @CustomType.Setter
        public Builder isIgnorePatches(Boolean isIgnorePatches) {
            if (isIgnorePatches == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "isIgnorePatches");
            }
            this.isIgnorePatches = isIgnorePatches;
            return this;
        }
        @CustomType.Setter
        public Builder isKeepPlacement(Boolean isKeepPlacement) {
            if (isKeepPlacement == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "isKeepPlacement");
            }
            this.isKeepPlacement = isKeepPlacement;
            return this;
        }
        @CustomType.Setter
        public Builder lastCompletedAction(String lastCompletedAction) {
            if (lastCompletedAction == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "lastCompletedAction");
            }
            this.lastCompletedAction = lastCompletedAction;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maxDrainTimeoutInSeconds(Integer maxDrainTimeoutInSeconds) {
            if (maxDrainTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "maxDrainTimeoutInSeconds");
            }
            this.maxDrainTimeoutInSeconds = maxDrainTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder nextActionToExecutes(List<GetFsuCycleNextActionToExecute> nextActionToExecutes) {
            if (nextActionToExecutes == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "nextActionToExecutes");
            }
            this.nextActionToExecutes = nextActionToExecutes;
            return this;
        }
        public Builder nextActionToExecutes(GetFsuCycleNextActionToExecute... nextActionToExecutes) {
            return nextActionToExecutes(List.of(nextActionToExecutes));
        }
        @CustomType.Setter
        public Builder stageActionSchedules(List<GetFsuCycleStageActionSchedule> stageActionSchedules) {
            if (stageActionSchedules == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "stageActionSchedules");
            }
            this.stageActionSchedules = stageActionSchedules;
            return this;
        }
        public Builder stageActionSchedules(GetFsuCycleStageActionSchedule... stageActionSchedules) {
            return stageActionSchedules(List.of(stageActionSchedules));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeFinished(String timeFinished) {
            if (timeFinished == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "timeFinished");
            }
            this.timeFinished = timeFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetFsuCycleResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetFsuCycleResult build() {
            final var _resultValue = new GetFsuCycleResult();
            _resultValue.applyActionSchedules = applyActionSchedules;
            _resultValue.batchingStrategies = batchingStrategies;
            _resultValue.collectionType = collectionType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.diagnosticsCollections = diagnosticsCollections;
            _resultValue.displayName = displayName;
            _resultValue.executingFsuActionId = executingFsuActionId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.fsuCollectionId = fsuCollectionId;
            _resultValue.fsuCycleId = fsuCycleId;
            _resultValue.goalVersionDetails = goalVersionDetails;
            _resultValue.id = id;
            _resultValue.isIgnoreMissingPatches = isIgnoreMissingPatches;
            _resultValue.isIgnorePatches = isIgnorePatches;
            _resultValue.isKeepPlacement = isKeepPlacement;
            _resultValue.lastCompletedAction = lastCompletedAction;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maxDrainTimeoutInSeconds = maxDrainTimeoutInSeconds;
            _resultValue.nextActionToExecutes = nextActionToExecutes;
            _resultValue.stageActionSchedules = stageActionSchedules;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeFinished = timeFinished;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
