// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FleetSoftwareUpdate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute;
import com.pulumi.oci.FleetSoftwareUpdate.outputs.GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFsuCyclesFsuCycleSummaryCollectionItem {
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule> applyActionSchedules;
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy> batchingStrategies;
    private String collectionType;
    private String compartmentId;
    private Map<String,Object> definedTags;
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection> diagnosticsCollections;
    private String displayName;
    private String executingFsuActionId;
    private Map<String,Object> freeformTags;
    private String fsuCollectionId;
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail> goalVersionDetails;
    private String id;
    private List<String> isIgnoreMissingPatches;
    private Boolean isIgnorePatches;
    private Boolean isKeepPlacement;
    private String lastCompletedAction;
    private String lifecycleDetails;
    private Integer maxDrainTimeoutInSeconds;
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute> nextActionToExecutes;
    private List<GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule> stageActionSchedules;
    private String state;
    private Map<String,Object> systemTags;
    private String timeCreated;
    private String timeFinished;
    private String timeUpdated;
    private String type;

    private GetFsuCyclesFsuCycleSummaryCollectionItem() {}
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule> applyActionSchedules() {
        return this.applyActionSchedules;
    }
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy> batchingStrategies() {
        return this.batchingStrategies;
    }
    public String collectionType() {
        return this.collectionType;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection> diagnosticsCollections() {
        return this.diagnosticsCollections;
    }
    public String displayName() {
        return this.displayName;
    }
    public String executingFsuActionId() {
        return this.executingFsuActionId;
    }
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public String fsuCollectionId() {
        return this.fsuCollectionId;
    }
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail> goalVersionDetails() {
        return this.goalVersionDetails;
    }
    public String id() {
        return this.id;
    }
    public List<String> isIgnoreMissingPatches() {
        return this.isIgnoreMissingPatches;
    }
    public Boolean isIgnorePatches() {
        return this.isIgnorePatches;
    }
    public Boolean isKeepPlacement() {
        return this.isKeepPlacement;
    }
    public String lastCompletedAction() {
        return this.lastCompletedAction;
    }
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public Integer maxDrainTimeoutInSeconds() {
        return this.maxDrainTimeoutInSeconds;
    }
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute> nextActionToExecutes() {
        return this.nextActionToExecutes;
    }
    public List<GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule> stageActionSchedules() {
        return this.stageActionSchedules;
    }
    public String state() {
        return this.state;
    }
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeFinished() {
        return this.timeFinished;
    }
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFsuCyclesFsuCycleSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule> applyActionSchedules;
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy> batchingStrategies;
        private String collectionType;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection> diagnosticsCollections;
        private String displayName;
        private String executingFsuActionId;
        private Map<String,Object> freeformTags;
        private String fsuCollectionId;
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail> goalVersionDetails;
        private String id;
        private List<String> isIgnoreMissingPatches;
        private Boolean isIgnorePatches;
        private Boolean isKeepPlacement;
        private String lastCompletedAction;
        private String lifecycleDetails;
        private Integer maxDrainTimeoutInSeconds;
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute> nextActionToExecutes;
        private List<GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule> stageActionSchedules;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeFinished;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetFsuCyclesFsuCycleSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyActionSchedules = defaults.applyActionSchedules;
    	      this.batchingStrategies = defaults.batchingStrategies;
    	      this.collectionType = defaults.collectionType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.diagnosticsCollections = defaults.diagnosticsCollections;
    	      this.displayName = defaults.displayName;
    	      this.executingFsuActionId = defaults.executingFsuActionId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.fsuCollectionId = defaults.fsuCollectionId;
    	      this.goalVersionDetails = defaults.goalVersionDetails;
    	      this.id = defaults.id;
    	      this.isIgnoreMissingPatches = defaults.isIgnoreMissingPatches;
    	      this.isIgnorePatches = defaults.isIgnorePatches;
    	      this.isKeepPlacement = defaults.isKeepPlacement;
    	      this.lastCompletedAction = defaults.lastCompletedAction;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maxDrainTimeoutInSeconds = defaults.maxDrainTimeoutInSeconds;
    	      this.nextActionToExecutes = defaults.nextActionToExecutes;
    	      this.stageActionSchedules = defaults.stageActionSchedules;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeFinished = defaults.timeFinished;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder applyActionSchedules(List<GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule> applyActionSchedules) {
            if (applyActionSchedules == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "applyActionSchedules");
            }
            this.applyActionSchedules = applyActionSchedules;
            return this;
        }
        public Builder applyActionSchedules(GetFsuCyclesFsuCycleSummaryCollectionItemApplyActionSchedule... applyActionSchedules) {
            return applyActionSchedules(List.of(applyActionSchedules));
        }
        @CustomType.Setter
        public Builder batchingStrategies(List<GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy> batchingStrategies) {
            if (batchingStrategies == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "batchingStrategies");
            }
            this.batchingStrategies = batchingStrategies;
            return this;
        }
        public Builder batchingStrategies(GetFsuCyclesFsuCycleSummaryCollectionItemBatchingStrategy... batchingStrategies) {
            return batchingStrategies(List.of(batchingStrategies));
        }
        @CustomType.Setter
        public Builder collectionType(String collectionType) {
            if (collectionType == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "collectionType");
            }
            this.collectionType = collectionType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticsCollections(List<GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection> diagnosticsCollections) {
            if (diagnosticsCollections == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "diagnosticsCollections");
            }
            this.diagnosticsCollections = diagnosticsCollections;
            return this;
        }
        public Builder diagnosticsCollections(GetFsuCyclesFsuCycleSummaryCollectionItemDiagnosticsCollection... diagnosticsCollections) {
            return diagnosticsCollections(List.of(diagnosticsCollections));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder executingFsuActionId(String executingFsuActionId) {
            if (executingFsuActionId == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "executingFsuActionId");
            }
            this.executingFsuActionId = executingFsuActionId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder fsuCollectionId(String fsuCollectionId) {
            if (fsuCollectionId == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "fsuCollectionId");
            }
            this.fsuCollectionId = fsuCollectionId;
            return this;
        }
        @CustomType.Setter
        public Builder goalVersionDetails(List<GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail> goalVersionDetails) {
            if (goalVersionDetails == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "goalVersionDetails");
            }
            this.goalVersionDetails = goalVersionDetails;
            return this;
        }
        public Builder goalVersionDetails(GetFsuCyclesFsuCycleSummaryCollectionItemGoalVersionDetail... goalVersionDetails) {
            return goalVersionDetails(List.of(goalVersionDetails));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIgnoreMissingPatches(List<String> isIgnoreMissingPatches) {
            if (isIgnoreMissingPatches == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "isIgnoreMissingPatches");
            }
            this.isIgnoreMissingPatches = isIgnoreMissingPatches;
            return this;
        }
        public Builder isIgnoreMissingPatches(String... isIgnoreMissingPatches) {
            return isIgnoreMissingPatches(List.of(isIgnoreMissingPatches));
        }
        @CustomType.Setter
        public Builder isIgnorePatches(Boolean isIgnorePatches) {
            if (isIgnorePatches == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "isIgnorePatches");
            }
            this.isIgnorePatches = isIgnorePatches;
            return this;
        }
        @CustomType.Setter
        public Builder isKeepPlacement(Boolean isKeepPlacement) {
            if (isKeepPlacement == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "isKeepPlacement");
            }
            this.isKeepPlacement = isKeepPlacement;
            return this;
        }
        @CustomType.Setter
        public Builder lastCompletedAction(String lastCompletedAction) {
            if (lastCompletedAction == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "lastCompletedAction");
            }
            this.lastCompletedAction = lastCompletedAction;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maxDrainTimeoutInSeconds(Integer maxDrainTimeoutInSeconds) {
            if (maxDrainTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "maxDrainTimeoutInSeconds");
            }
            this.maxDrainTimeoutInSeconds = maxDrainTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder nextActionToExecutes(List<GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute> nextActionToExecutes) {
            if (nextActionToExecutes == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "nextActionToExecutes");
            }
            this.nextActionToExecutes = nextActionToExecutes;
            return this;
        }
        public Builder nextActionToExecutes(GetFsuCyclesFsuCycleSummaryCollectionItemNextActionToExecute... nextActionToExecutes) {
            return nextActionToExecutes(List.of(nextActionToExecutes));
        }
        @CustomType.Setter
        public Builder stageActionSchedules(List<GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule> stageActionSchedules) {
            if (stageActionSchedules == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "stageActionSchedules");
            }
            this.stageActionSchedules = stageActionSchedules;
            return this;
        }
        public Builder stageActionSchedules(GetFsuCyclesFsuCycleSummaryCollectionItemStageActionSchedule... stageActionSchedules) {
            return stageActionSchedules(List.of(stageActionSchedules));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeFinished(String timeFinished) {
            if (timeFinished == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "timeFinished");
            }
            this.timeFinished = timeFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetFsuCyclesFsuCycleSummaryCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        public GetFsuCyclesFsuCycleSummaryCollectionItem build() {
            final var _resultValue = new GetFsuCyclesFsuCycleSummaryCollectionItem();
            _resultValue.applyActionSchedules = applyActionSchedules;
            _resultValue.batchingStrategies = batchingStrategies;
            _resultValue.collectionType = collectionType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.diagnosticsCollections = diagnosticsCollections;
            _resultValue.displayName = displayName;
            _resultValue.executingFsuActionId = executingFsuActionId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.fsuCollectionId = fsuCollectionId;
            _resultValue.goalVersionDetails = goalVersionDetails;
            _resultValue.id = id;
            _resultValue.isIgnoreMissingPatches = isIgnoreMissingPatches;
            _resultValue.isIgnorePatches = isIgnorePatches;
            _resultValue.isKeepPlacement = isKeepPlacement;
            _resultValue.lastCompletedAction = lastCompletedAction;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maxDrainTimeoutInSeconds = maxDrainTimeoutInSeconds;
            _resultValue.nextActionToExecutes = nextActionToExecutes;
            _resultValue.stageActionSchedules = stageActionSchedules;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeFinished = timeFinished;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
