// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Functions.inputs.FunctionProvisionedConcurrencyConfigArgs;
import com.pulumi.oci.Functions.inputs.FunctionSourceDetailsArgs;
import com.pulumi.oci.Functions.inputs.FunctionTraceConfigArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionArgs Empty = new FunctionArgs();

    /**
     * The OCID of the application this function belongs to.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return The OCID of the application this function belongs to.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
     * 
     * The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,Object>> config;

    /**
     * @return (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
     * 
     * The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
     * 
     */
    public Optional<Output<Map<String,Object>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if image_digest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if image_digest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
     * 
     */
    @Import(name="imageDigest")
    private @Nullable Output<String> imageDigest;

    /**
     * @return (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
     * 
     */
    public Optional<Output<String>> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }

    /**
     * (Updatable) Maximum usable memory for the function (MiB).
     * 
     */
    @Import(name="memoryInMbs", required=true)
    private Output<String> memoryInMbs;

    /**
     * @return (Updatable) Maximum usable memory for the function (MiB).
     * 
     */
    public Output<String> memoryInMbs() {
        return this.memoryInMbs;
    }

    /**
     * (Updatable) Define the strategy for provisioned concurrency for the function.
     * 
     */
    @Import(name="provisionedConcurrencyConfig")
    private @Nullable Output<FunctionProvisionedConcurrencyConfigArgs> provisionedConcurrencyConfig;

    /**
     * @return (Updatable) Define the strategy for provisioned concurrency for the function.
     * 
     */
    public Optional<Output<FunctionProvisionedConcurrencyConfigArgs>> provisionedConcurrencyConfig() {
        return Optional.ofNullable(this.provisionedConcurrencyConfig);
    }

    /**
     * The source details for the Function. The function can be created from various sources.
     * 
     */
    @Import(name="sourceDetails")
    private @Nullable Output<FunctionSourceDetailsArgs> sourceDetails;

    /**
     * @return The source details for the Function. The function can be created from various sources.
     * 
     */
    public Optional<Output<FunctionSourceDetailsArgs>> sourceDetails() {
        return Optional.ofNullable(this.sourceDetails);
    }

    /**
     * (Updatable) Timeout for executions of the function. Value in seconds.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) Timeout for executions of the function. Value in seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * (Updatable) Define the tracing configuration for a function.
     * 
     */
    @Import(name="traceConfig")
    private @Nullable Output<FunctionTraceConfigArgs> traceConfig;

    /**
     * @return (Updatable) Define the tracing configuration for a function.
     * 
     */
    public Optional<Output<FunctionTraceConfigArgs>> traceConfig() {
        return Optional.ofNullable(this.traceConfig);
    }

    private FunctionArgs() {}

    private FunctionArgs(FunctionArgs $) {
        this.applicationId = $.applicationId;
        this.config = $.config;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.image = $.image;
        this.imageDigest = $.imageDigest;
        this.memoryInMbs = $.memoryInMbs;
        this.provisionedConcurrencyConfig = $.provisionedConcurrencyConfig;
        this.sourceDetails = $.sourceDetails;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.traceConfig = $.traceConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionArgs $;

        public Builder() {
            $ = new FunctionArgs();
        }

        public Builder(FunctionArgs defaults) {
            $ = new FunctionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The OCID of the application this function belongs to.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The OCID of the application this function belongs to.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param config (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
         * 
         * The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,Object>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
         * 
         * The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,Object> config) {
            return config(Output.of(config));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param image (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if image_digest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if image_digest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imageDigest (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(@Nullable Output<String> imageDigest) {
            $.imageDigest = imageDigest;
            return this;
        }

        /**
         * @param imageDigest (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(String imageDigest) {
            return imageDigest(Output.of(imageDigest));
        }

        /**
         * @param memoryInMbs (Updatable) Maximum usable memory for the function (MiB).
         * 
         * @return builder
         * 
         */
        public Builder memoryInMbs(Output<String> memoryInMbs) {
            $.memoryInMbs = memoryInMbs;
            return this;
        }

        /**
         * @param memoryInMbs (Updatable) Maximum usable memory for the function (MiB).
         * 
         * @return builder
         * 
         */
        public Builder memoryInMbs(String memoryInMbs) {
            return memoryInMbs(Output.of(memoryInMbs));
        }

        /**
         * @param provisionedConcurrencyConfig (Updatable) Define the strategy for provisioned concurrency for the function.
         * 
         * @return builder
         * 
         */
        public Builder provisionedConcurrencyConfig(@Nullable Output<FunctionProvisionedConcurrencyConfigArgs> provisionedConcurrencyConfig) {
            $.provisionedConcurrencyConfig = provisionedConcurrencyConfig;
            return this;
        }

        /**
         * @param provisionedConcurrencyConfig (Updatable) Define the strategy for provisioned concurrency for the function.
         * 
         * @return builder
         * 
         */
        public Builder provisionedConcurrencyConfig(FunctionProvisionedConcurrencyConfigArgs provisionedConcurrencyConfig) {
            return provisionedConcurrencyConfig(Output.of(provisionedConcurrencyConfig));
        }

        /**
         * @param sourceDetails The source details for the Function. The function can be created from various sources.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(@Nullable Output<FunctionSourceDetailsArgs> sourceDetails) {
            $.sourceDetails = sourceDetails;
            return this;
        }

        /**
         * @param sourceDetails The source details for the Function. The function can be created from various sources.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(FunctionSourceDetailsArgs sourceDetails) {
            return sourceDetails(Output.of(sourceDetails));
        }

        /**
         * @param timeoutInSeconds (Updatable) Timeout for executions of the function. Value in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds (Updatable) Timeout for executions of the function. Value in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param traceConfig (Updatable) Define the tracing configuration for a function.
         * 
         * @return builder
         * 
         */
        public Builder traceConfig(@Nullable Output<FunctionTraceConfigArgs> traceConfig) {
            $.traceConfig = traceConfig;
            return this;
        }

        /**
         * @param traceConfig (Updatable) Define the tracing configuration for a function.
         * 
         * @return builder
         * 
         */
        public Builder traceConfig(FunctionTraceConfigArgs traceConfig) {
            return traceConfig(Output.of(traceConfig));
        }

        public FunctionArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("FunctionArgs", "applicationId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("FunctionArgs", "displayName");
            }
            if ($.memoryInMbs == null) {
                throw new MissingRequiredPropertyException("FunctionArgs", "memoryInMbs");
            }
            return $;
        }
    }

}
