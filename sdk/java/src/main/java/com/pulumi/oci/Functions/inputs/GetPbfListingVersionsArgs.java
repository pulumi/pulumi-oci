// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Functions.inputs.GetPbfListingVersionsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPbfListingVersionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPbfListingVersionsArgs Empty = new GetPbfListingVersionsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetPbfListingVersionsFilterArgs>> filters;

    public Optional<Output<List<GetPbfListingVersionsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Matches the current version (the most recently added version with an Active  lifecycleState) associated with a PbfListing.
     * 
     */
    @Import(name="isCurrentVersion")
    private @Nullable Output<Boolean> isCurrentVersion;

    /**
     * @return Matches the current version (the most recently added version with an Active  lifecycleState) associated with a PbfListing.
     * 
     */
    public Optional<Output<Boolean>> isCurrentVersion() {
        return Optional.ofNullable(this.isCurrentVersion);
    }

    /**
     * Matches a PbfListingVersion based on a provided semantic version name for a PbfListingVersion.  Each PbfListingVersion name is unique with respect to its associated PbfListing.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Matches a PbfListingVersion based on a provided semantic version name for a PbfListingVersion.  Each PbfListingVersion name is unique with respect to its associated PbfListing.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * unique PbfListing identifier
     * 
     */
    @Import(name="pbfListingId", required=true)
    private Output<String> pbfListingId;

    /**
     * @return unique PbfListing identifier
     * 
     */
    public Output<String> pbfListingId() {
        return this.pbfListingId;
    }

    /**
     * unique PbfListingVersion identifier
     * 
     */
    @Import(name="pbfListingVersionId")
    private @Nullable Output<String> pbfListingVersionId;

    /**
     * @return unique PbfListingVersion identifier
     * 
     */
    public Optional<Output<String>> pbfListingVersionId() {
        return Optional.ofNullable(this.pbfListingVersionId);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetPbfListingVersionsArgs() {}

    private GetPbfListingVersionsArgs(GetPbfListingVersionsArgs $) {
        this.filters = $.filters;
        this.isCurrentVersion = $.isCurrentVersion;
        this.name = $.name;
        this.pbfListingId = $.pbfListingId;
        this.pbfListingVersionId = $.pbfListingVersionId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPbfListingVersionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPbfListingVersionsArgs $;

        public Builder() {
            $ = new GetPbfListingVersionsArgs();
        }

        public Builder(GetPbfListingVersionsArgs defaults) {
            $ = new GetPbfListingVersionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetPbfListingVersionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPbfListingVersionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPbfListingVersionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isCurrentVersion Matches the current version (the most recently added version with an Active  lifecycleState) associated with a PbfListing.
         * 
         * @return builder
         * 
         */
        public Builder isCurrentVersion(@Nullable Output<Boolean> isCurrentVersion) {
            $.isCurrentVersion = isCurrentVersion;
            return this;
        }

        /**
         * @param isCurrentVersion Matches the current version (the most recently added version with an Active  lifecycleState) associated with a PbfListing.
         * 
         * @return builder
         * 
         */
        public Builder isCurrentVersion(Boolean isCurrentVersion) {
            return isCurrentVersion(Output.of(isCurrentVersion));
        }

        /**
         * @param name Matches a PbfListingVersion based on a provided semantic version name for a PbfListingVersion.  Each PbfListingVersion name is unique with respect to its associated PbfListing.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Matches a PbfListingVersion based on a provided semantic version name for a PbfListingVersion.  Each PbfListingVersion name is unique with respect to its associated PbfListing.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pbfListingId unique PbfListing identifier
         * 
         * @return builder
         * 
         */
        public Builder pbfListingId(Output<String> pbfListingId) {
            $.pbfListingId = pbfListingId;
            return this;
        }

        /**
         * @param pbfListingId unique PbfListing identifier
         * 
         * @return builder
         * 
         */
        public Builder pbfListingId(String pbfListingId) {
            return pbfListingId(Output.of(pbfListingId));
        }

        /**
         * @param pbfListingVersionId unique PbfListingVersion identifier
         * 
         * @return builder
         * 
         */
        public Builder pbfListingVersionId(@Nullable Output<String> pbfListingVersionId) {
            $.pbfListingVersionId = pbfListingVersionId;
            return this;
        }

        /**
         * @param pbfListingVersionId unique PbfListingVersion identifier
         * 
         * @return builder
         * 
         */
        public Builder pbfListingVersionId(String pbfListingVersionId) {
            return pbfListingVersionId(Output.of(pbfListingVersionId));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetPbfListingVersionsArgs build() {
            if ($.pbfListingId == null) {
                throw new MissingRequiredPropertyException("GetPbfListingVersionsArgs", "pbfListingId");
            }
            return $;
        }
    }

}
