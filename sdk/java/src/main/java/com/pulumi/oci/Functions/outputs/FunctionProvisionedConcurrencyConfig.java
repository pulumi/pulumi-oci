// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FunctionProvisionedConcurrencyConfig {
    /**
     * @return (Updatable)
     * 
     */
    private final @Nullable Integer count;
    /**
     * @return (Updatable) The strategy for provisioned concurrency to be used.
     * 
     */
    private final String strategy;

    @CustomType.Constructor
    private FunctionProvisionedConcurrencyConfig(
        @CustomType.Parameter("count") @Nullable Integer count,
        @CustomType.Parameter("strategy") String strategy) {
        this.count = count;
        this.strategy = strategy;
    }

    /**
     * @return (Updatable)
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    /**
     * @return (Updatable) The strategy for provisioned concurrency to be used.
     * 
     */
    public String strategy() {
        return this.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionProvisionedConcurrencyConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer count;
        private String strategy;

        public Builder() {
    	      // Empty
        }

        public Builder(FunctionProvisionedConcurrencyConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.strategy = defaults.strategy;
        }

        public Builder count(@Nullable Integer count) {
            this.count = count;
            return this;
        }
        public Builder strategy(String strategy) {
            this.strategy = Objects.requireNonNull(strategy);
            return this;
        }        public FunctionProvisionedConcurrencyConfig build() {
            return new FunctionProvisionedConcurrencyConfig(count, strategy);
        }
    }
}
