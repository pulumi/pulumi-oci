// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FunctionProvisionedConcurrencyConfig {
    /**
     * @return (Updatable) Configuration specifying a constant amount of provisioned concurrency.
     * 
     */
    private @Nullable Integer count;
    /**
     * @return (Updatable) The strategy for provisioned concurrency to be used.
     * 
     */
    private String strategy;

    private FunctionProvisionedConcurrencyConfig() {}
    /**
     * @return (Updatable) Configuration specifying a constant amount of provisioned concurrency.
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    /**
     * @return (Updatable) The strategy for provisioned concurrency to be used.
     * 
     */
    public String strategy() {
        return this.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionProvisionedConcurrencyConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer count;
        private String strategy;
        public Builder() {}
        public Builder(FunctionProvisionedConcurrencyConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.strategy = defaults.strategy;
        }

        @CustomType.Setter
        public Builder count(@Nullable Integer count) {

            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder strategy(String strategy) {
            if (strategy == null) {
              throw new MissingRequiredPropertyException("FunctionProvisionedConcurrencyConfig", "strategy");
            }
            this.strategy = strategy;
            return this;
        }
        public FunctionProvisionedConcurrencyConfig build() {
            final var _resultValue = new FunctionProvisionedConcurrencyConfig();
            _resultValue.count = count;
            _resultValue.strategy = strategy;
            return _resultValue;
        }
    }
}
