// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFunctionProvisionedConcurrencyConfig {
    /**
     * @return Configuration specifying a constant amount of provisioned concurrency.
     * 
     */
    private Integer count;
    /**
     * @return The strategy for provisioned concurrency to be used.
     * 
     */
    private String strategy;

    private GetFunctionProvisionedConcurrencyConfig() {}
    /**
     * @return Configuration specifying a constant amount of provisioned concurrency.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return The strategy for provisioned concurrency to be used.
     * 
     */
    public String strategy() {
        return this.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionProvisionedConcurrencyConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private String strategy;
        public Builder() {}
        public Builder(GetFunctionProvisionedConcurrencyConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.strategy = defaults.strategy;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetFunctionProvisionedConcurrencyConfig", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder strategy(String strategy) {
            if (strategy == null) {
              throw new MissingRequiredPropertyException("GetFunctionProvisionedConcurrencyConfig", "strategy");
            }
            this.strategy = strategy;
            return this;
        }
        public GetFunctionProvisionedConcurrencyConfig build() {
            final var _resultValue = new GetFunctionProvisionedConcurrencyConfig();
            _resultValue.count = count;
            _resultValue.strategy = strategy;
            return _resultValue;
        }
    }
}
