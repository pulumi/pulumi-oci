// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Functions.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Functions.outputs.GetFunctionProvisionedConcurrencyConfig;
import com.pulumi.oci.Functions.outputs.GetFunctionSourceDetail;
import com.pulumi.oci.Functions.outputs.GetFunctionTraceConfig;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionResult {
    /**
     * @return The OCID of the application the function belongs to.
     * 
     */
    private @Nullable String applicationId;
    /**
     * @return The OCID of the compartment that contains the function.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Function configuration. Overrides application configuration. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
     * 
     */
    private @Nullable Map<String,Object> config;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The display name of the function. The display name is unique within the application containing the function.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    private String functionId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function.
     * 
     */
    private @Nullable String id;
    /**
     * @return The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. Example: `phx.ocir.io/ten/functions/function:0.0.1`
     * 
     */
    private @Nullable String image;
    /**
     * @return The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
     * 
     */
    private @Nullable String invokeEndpoint;
    /**
     * @return Maximum usable memory for the function (MiB).
     * 
     */
    private @Nullable String memoryInMbs;
    /**
     * @return Define the strategy for provisioned concurrency for the function.
     * 
     */
    private @Nullable List<GetFunctionProvisionedConcurrencyConfig> provisionedConcurrencyConfigs;
    /**
     * @return The processor shape (`GENERIC_X86`/`GENERIC_ARM`) on which to run functions in the application, extracted from the image manifest.
     * 
     */
    private @Nullable String shape;
    /**
     * @return The source details for the Function. The function can be created from various sources.
     * 
     */
    private @Nullable List<GetFunctionSourceDetail> sourceDetails;
    /**
     * @return The current state of the function.
     * 
     */
    private @Nullable String state;
    /**
     * @return The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return Timeout for executions of the function. Value in seconds.
     * 
     */
    private @Nullable Integer timeoutInSeconds;
    /**
     * @return Define the tracing configuration for a function.
     * 
     */
    private @Nullable List<GetFunctionTraceConfig> traceConfigs;

    private GetFunctionResult() {}
    /**
     * @return The OCID of the application the function belongs to.
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }
    /**
     * @return The OCID of the compartment that contains the function.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Function configuration. Overrides application configuration. Keys must be ASCII strings consisting solely of letters, digits, and the &#39;_&#39; (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{&#34;MY_FUNCTION_CONFIG&#34;: &#34;ConfVal&#34;}`
     * 
     */
    public Map<String,Object> config() {
        return this.config == null ? Map.of() : this.config;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The display name of the function. The display name is unique within the application containing the function.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    public String functionId() {
        return this.functionId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. Example: `phx.ocir.io/ten/functions/function:0.0.1`
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
     * 
     */
    public Optional<String> invokeEndpoint() {
        return Optional.ofNullable(this.invokeEndpoint);
    }
    /**
     * @return Maximum usable memory for the function (MiB).
     * 
     */
    public Optional<String> memoryInMbs() {
        return Optional.ofNullable(this.memoryInMbs);
    }
    /**
     * @return Define the strategy for provisioned concurrency for the function.
     * 
     */
    public List<GetFunctionProvisionedConcurrencyConfig> provisionedConcurrencyConfigs() {
        return this.provisionedConcurrencyConfigs == null ? List.of() : this.provisionedConcurrencyConfigs;
    }
    /**
     * @return The processor shape (`GENERIC_X86`/`GENERIC_ARM`) on which to run functions in the application, extracted from the image manifest.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The source details for the Function. The function can be created from various sources.
     * 
     */
    public List<GetFunctionSourceDetail> sourceDetails() {
        return this.sourceDetails == null ? List.of() : this.sourceDetails;
    }
    /**
     * @return The current state of the function.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return Timeout for executions of the function. Value in seconds.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return Define the tracing configuration for a function.
     * 
     */
    public List<GetFunctionTraceConfig> traceConfigs() {
        return this.traceConfigs == null ? List.of() : this.traceConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationId;
        private @Nullable String compartmentId;
        private @Nullable Map<String,Object> config;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private String functionId;
        private @Nullable String id;
        private @Nullable String image;
        private @Nullable String imageDigest;
        private @Nullable String invokeEndpoint;
        private @Nullable String memoryInMbs;
        private @Nullable List<GetFunctionProvisionedConcurrencyConfig> provisionedConcurrencyConfigs;
        private @Nullable String shape;
        private @Nullable List<GetFunctionSourceDetail> sourceDetails;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable Integer timeoutInSeconds;
        private @Nullable List<GetFunctionTraceConfig> traceConfigs;
        public Builder() {}
        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.config = defaults.config;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.functionId = defaults.functionId;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.imageDigest = defaults.imageDigest;
    	      this.invokeEndpoint = defaults.invokeEndpoint;
    	      this.memoryInMbs = defaults.memoryInMbs;
    	      this.provisionedConcurrencyConfigs = defaults.provisionedConcurrencyConfigs;
    	      this.shape = defaults.shape;
    	      this.sourceDetails = defaults.sourceDetails;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.traceConfigs = defaults.traceConfigs;
        }

        @CustomType.Setter
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder config(@Nullable Map<String,Object> config) {
            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder functionId(String functionId) {
            this.functionId = Objects.requireNonNull(functionId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {
            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder invokeEndpoint(@Nullable String invokeEndpoint) {
            this.invokeEndpoint = invokeEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInMbs(@Nullable String memoryInMbs) {
            this.memoryInMbs = memoryInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedConcurrencyConfigs(@Nullable List<GetFunctionProvisionedConcurrencyConfig> provisionedConcurrencyConfigs) {
            this.provisionedConcurrencyConfigs = provisionedConcurrencyConfigs;
            return this;
        }
        public Builder provisionedConcurrencyConfigs(GetFunctionProvisionedConcurrencyConfig... provisionedConcurrencyConfigs) {
            return provisionedConcurrencyConfigs(List.of(provisionedConcurrencyConfigs));
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDetails(@Nullable List<GetFunctionSourceDetail> sourceDetails) {
            this.sourceDetails = sourceDetails;
            return this;
        }
        public Builder sourceDetails(GetFunctionSourceDetail... sourceDetails) {
            return sourceDetails(List.of(sourceDetails));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder traceConfigs(@Nullable List<GetFunctionTraceConfig> traceConfigs) {
            this.traceConfigs = traceConfigs;
            return this;
        }
        public Builder traceConfigs(GetFunctionTraceConfig... traceConfigs) {
            return traceConfigs(List.of(traceConfigs));
        }
        public GetFunctionResult build() {
            final var o = new GetFunctionResult();
            o.applicationId = applicationId;
            o.compartmentId = compartmentId;
            o.config = config;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.functionId = functionId;
            o.id = id;
            o.image = image;
            o.imageDigest = imageDigest;
            o.invokeEndpoint = invokeEndpoint;
            o.memoryInMbs = memoryInMbs;
            o.provisionedConcurrencyConfigs = provisionedConcurrencyConfigs;
            o.shape = shape;
            o.sourceDetails = sourceDetails;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.timeoutInSeconds = timeoutInSeconds;
            o.traceConfigs = traceConfigs;
            return o;
        }
    }
}
