// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentKnowledgeBaseIndexConfigSecretDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentKnowledgeBaseIndexConfigSecretDetailArgs Empty = new AgentKnowledgeBaseIndexConfigSecretDetailArgs();

    /**
     * (Updatable) The IDCS Connect clientId.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Updatable) The IDCS Connect clientId.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Updatable) The URL represent authentication url of the IDCS.
     * 
     */
    @Import(name="idcsUrl")
    private @Nullable Output<String> idcsUrl;

    /**
     * @return (Updatable) The URL represent authentication url of the IDCS.
     * 
     */
    public Optional<Output<String>> idcsUrl() {
        return Optional.ofNullable(this.idcsUrl);
    }

    /**
     * (Updatable) Fully qualified scope url
     * 
     */
    @Import(name="scopeUrl")
    private @Nullable Output<String> scopeUrl;

    /**
     * @return (Updatable) Fully qualified scope url
     * 
     */
    public Optional<Output<String>> scopeUrl() {
        return Optional.ofNullable(this.scopeUrl);
    }

    /**
     * (Updatable) The type of OpenID. The allowed values are:
     * * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
     * * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of OpenID. The allowed values are:
     * * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
     * * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
     * 
     */
    @Import(name="vaultSecretId", required=true)
    private Output<String> vaultSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
     * 
     */
    public Output<String> vaultSecretId() {
        return this.vaultSecretId;
    }

    private AgentKnowledgeBaseIndexConfigSecretDetailArgs() {}

    private AgentKnowledgeBaseIndexConfigSecretDetailArgs(AgentKnowledgeBaseIndexConfigSecretDetailArgs $) {
        this.clientId = $.clientId;
        this.idcsUrl = $.idcsUrl;
        this.scopeUrl = $.scopeUrl;
        this.type = $.type;
        this.vaultSecretId = $.vaultSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentKnowledgeBaseIndexConfigSecretDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentKnowledgeBaseIndexConfigSecretDetailArgs $;

        public Builder() {
            $ = new AgentKnowledgeBaseIndexConfigSecretDetailArgs();
        }

        public Builder(AgentKnowledgeBaseIndexConfigSecretDetailArgs defaults) {
            $ = new AgentKnowledgeBaseIndexConfigSecretDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId (Updatable) The IDCS Connect clientId.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Updatable) The IDCS Connect clientId.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param idcsUrl (Updatable) The URL represent authentication url of the IDCS.
         * 
         * @return builder
         * 
         */
        public Builder idcsUrl(@Nullable Output<String> idcsUrl) {
            $.idcsUrl = idcsUrl;
            return this;
        }

        /**
         * @param idcsUrl (Updatable) The URL represent authentication url of the IDCS.
         * 
         * @return builder
         * 
         */
        public Builder idcsUrl(String idcsUrl) {
            return idcsUrl(Output.of(idcsUrl));
        }

        /**
         * @param scopeUrl (Updatable) Fully qualified scope url
         * 
         * @return builder
         * 
         */
        public Builder scopeUrl(@Nullable Output<String> scopeUrl) {
            $.scopeUrl = scopeUrl;
            return this;
        }

        /**
         * @param scopeUrl (Updatable) Fully qualified scope url
         * 
         * @return builder
         * 
         */
        public Builder scopeUrl(String scopeUrl) {
            return scopeUrl(Output.of(scopeUrl));
        }

        /**
         * @param type (Updatable) The type of OpenID. The allowed values are:
         * * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
         * * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of OpenID. The allowed values are:
         * * `IDCS_SECRET`: The OpenID configuration used is OpenSearch is IDCS.
         * * `BASIC_AUTH_SECRET`: Basic authentication use for OpenSearch
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(Output<String> vaultSecretId) {
            $.vaultSecretId = vaultSecretId;
            return this;
        }

        /**
         * @param vaultSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(String vaultSecretId) {
            return vaultSecretId(Output.of(vaultSecretId));
        }

        public AgentKnowledgeBaseIndexConfigSecretDetailArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseIndexConfigSecretDetailArgs", "type");
            }
            if ($.vaultSecretId == null) {
                throw new MissingRequiredPropertyException("AgentKnowledgeBaseIndexConfigSecretDetailArgs", "vaultSecretId");
            }
            return $;
        }
    }

}
