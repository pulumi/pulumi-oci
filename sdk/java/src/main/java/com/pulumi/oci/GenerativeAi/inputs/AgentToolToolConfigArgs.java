// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigApiSchemaArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigDatabaseConnectionArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigDatabaseSchemaArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigFunctionArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigGenerationLlmCustomizationArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigHttpEndpointAuthConfigArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigIclExamplesArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigKnowledgeBaseConfigArgs;
import com.pulumi.oci.GenerativeAi.inputs.AgentToolToolConfigTableAndColumnDescriptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentToolToolConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentToolToolConfigArgs Empty = new AgentToolToolConfigArgs();

    /**
     * (Updatable) The AgentEndpoint OCID to be used as a tool in this agent.
     * 
     */
    @Import(name="agentEndpointId")
    private @Nullable Output<String> agentEndpointId;

    /**
     * @return (Updatable) The AgentEndpoint OCID to be used as a tool in this agent.
     * 
     */
    public Optional<Output<String>> agentEndpointId() {
        return Optional.ofNullable(this.agentEndpointId);
    }

    /**
     * (Updatable) The input location definition for Api schema.
     * 
     */
    @Import(name="apiSchema")
    private @Nullable Output<AgentToolToolConfigApiSchemaArgs> apiSchema;

    /**
     * @return (Updatable) The input location definition for Api schema.
     * 
     */
    public Optional<Output<AgentToolToolConfigApiSchemaArgs>> apiSchema() {
        return Optional.ofNullable(this.apiSchema);
    }

    /**
     * (Updatable) The connection type for Databases.
     * 
     */
    @Import(name="databaseConnection")
    private @Nullable Output<AgentToolToolConfigDatabaseConnectionArgs> databaseConnection;

    /**
     * @return (Updatable) The connection type for Databases.
     * 
     */
    public Optional<Output<AgentToolToolConfigDatabaseConnectionArgs>> databaseConnection() {
        return Optional.ofNullable(this.databaseConnection);
    }

    /**
     * (Updatable) The input location definition.
     * 
     */
    @Import(name="databaseSchema")
    private @Nullable Output<AgentToolToolConfigDatabaseSchemaArgs> databaseSchema;

    /**
     * @return (Updatable) The input location definition.
     * 
     */
    public Optional<Output<AgentToolToolConfigDatabaseSchemaArgs>> databaseSchema() {
        return Optional.ofNullable(this.databaseSchema);
    }

    /**
     * (Updatable) Dialect to be used for SQL generation.
     * 
     */
    @Import(name="dialect")
    private @Nullable Output<String> dialect;

    /**
     * @return (Updatable) Dialect to be used for SQL generation.
     * 
     */
    public Optional<Output<String>> dialect() {
        return Optional.ofNullable(this.dialect);
    }

    /**
     * (Updatable) Details of Function for Function calling tool.
     * 
     */
    @Import(name="function")
    private @Nullable Output<AgentToolToolConfigFunctionArgs> function;

    /**
     * @return (Updatable) Details of Function for Function calling tool.
     * 
     */
    public Optional<Output<AgentToolToolConfigFunctionArgs>> function() {
        return Optional.ofNullable(this.function);
    }

    /**
     * (Updatable) Configuration to customize LLM.
     * 
     */
    @Import(name="generationLlmCustomization")
    private @Nullable Output<AgentToolToolConfigGenerationLlmCustomizationArgs> generationLlmCustomization;

    /**
     * @return (Updatable) Configuration to customize LLM.
     * 
     */
    public Optional<Output<AgentToolToolConfigGenerationLlmCustomizationArgs>> generationLlmCustomization() {
        return Optional.ofNullable(this.generationLlmCustomization);
    }

    /**
     * (Updatable) Authentication configuration used for HTTP Endpoint tools. Defines the type of authentication and the source of credentials.
     * 
     */
    @Import(name="httpEndpointAuthConfig")
    private @Nullable Output<AgentToolToolConfigHttpEndpointAuthConfigArgs> httpEndpointAuthConfig;

    /**
     * @return (Updatable) Authentication configuration used for HTTP Endpoint tools. Defines the type of authentication and the source of credentials.
     * 
     */
    public Optional<Output<AgentToolToolConfigHttpEndpointAuthConfigArgs>> httpEndpointAuthConfig() {
        return Optional.ofNullable(this.httpEndpointAuthConfig);
    }

    /**
     * (Updatable) The input location definition.
     * 
     */
    @Import(name="iclExamples")
    private @Nullable Output<AgentToolToolConfigIclExamplesArgs> iclExamples;

    /**
     * @return (Updatable) The input location definition.
     * 
     */
    public Optional<Output<AgentToolToolConfigIclExamplesArgs>> iclExamples() {
        return Optional.ofNullable(this.iclExamples);
    }

    /**
     * (Updatable) The KnowledgeBase configurations that this RAG Tool uses
     * 
     */
    @Import(name="knowledgeBaseConfigs")
    private @Nullable Output<List<AgentToolToolConfigKnowledgeBaseConfigArgs>> knowledgeBaseConfigs;

    /**
     * @return (Updatable) The KnowledgeBase configurations that this RAG Tool uses
     * 
     */
    public Optional<Output<List<AgentToolToolConfigKnowledgeBaseConfigArgs>>> knowledgeBaseConfigs() {
        return Optional.ofNullable(this.knowledgeBaseConfigs);
    }

    /**
     * (Updatable) Size of the model.
     * 
     */
    @Import(name="modelSize")
    private @Nullable Output<String> modelSize;

    /**
     * @return (Updatable) Size of the model.
     * 
     */
    public Optional<Output<String>> modelSize() {
        return Optional.ofNullable(this.modelSize);
    }

    /**
     * (Updatable) To enable/disable self correction.
     * 
     */
    @Import(name="shouldEnableSelfCorrection")
    private @Nullable Output<Boolean> shouldEnableSelfCorrection;

    /**
     * @return (Updatable) To enable/disable self correction.
     * 
     */
    public Optional<Output<Boolean>> shouldEnableSelfCorrection() {
        return Optional.ofNullable(this.shouldEnableSelfCorrection);
    }

    /**
     * (Updatable) To enable/disable SQL execution.
     * 
     */
    @Import(name="shouldEnableSqlExecution")
    private @Nullable Output<Boolean> shouldEnableSqlExecution;

    /**
     * @return (Updatable) To enable/disable SQL execution.
     * 
     */
    public Optional<Output<Boolean>> shouldEnableSqlExecution() {
        return Optional.ofNullable(this.shouldEnableSqlExecution);
    }

    /**
     * (Updatable) The subnet ID from agent developer tenancy through which the egress is going to be routed.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) The subnet ID from agent developer tenancy through which the egress is going to be routed.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * (Updatable) The input location definition.
     * 
     */
    @Import(name="tableAndColumnDescription")
    private @Nullable Output<AgentToolToolConfigTableAndColumnDescriptionArgs> tableAndColumnDescription;

    /**
     * @return (Updatable) The input location definition.
     * 
     */
    public Optional<Output<AgentToolToolConfigTableAndColumnDescriptionArgs>> tableAndColumnDescription() {
        return Optional.ofNullable(this.tableAndColumnDescription);
    }

    /**
     * (Updatable) The type of the Tool config. The allowed values are:
     * * `SQL_TOOL_CONFIG`: The config for sql Tool.
     * * `RAG_TOOL_CONFIG`: The config for rag Tool.
     * * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="toolConfigType", required=true)
    private Output<String> toolConfigType;

    /**
     * @return (Updatable) The type of the Tool config. The allowed values are:
     * * `SQL_TOOL_CONFIG`: The config for sql Tool.
     * * `RAG_TOOL_CONFIG`: The config for rag Tool.
     * * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> toolConfigType() {
        return this.toolConfigType;
    }

    private AgentToolToolConfigArgs() {}

    private AgentToolToolConfigArgs(AgentToolToolConfigArgs $) {
        this.agentEndpointId = $.agentEndpointId;
        this.apiSchema = $.apiSchema;
        this.databaseConnection = $.databaseConnection;
        this.databaseSchema = $.databaseSchema;
        this.dialect = $.dialect;
        this.function = $.function;
        this.generationLlmCustomization = $.generationLlmCustomization;
        this.httpEndpointAuthConfig = $.httpEndpointAuthConfig;
        this.iclExamples = $.iclExamples;
        this.knowledgeBaseConfigs = $.knowledgeBaseConfigs;
        this.modelSize = $.modelSize;
        this.shouldEnableSelfCorrection = $.shouldEnableSelfCorrection;
        this.shouldEnableSqlExecution = $.shouldEnableSqlExecution;
        this.subnetId = $.subnetId;
        this.tableAndColumnDescription = $.tableAndColumnDescription;
        this.toolConfigType = $.toolConfigType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentToolToolConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentToolToolConfigArgs $;

        public Builder() {
            $ = new AgentToolToolConfigArgs();
        }

        public Builder(AgentToolToolConfigArgs defaults) {
            $ = new AgentToolToolConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentEndpointId (Updatable) The AgentEndpoint OCID to be used as a tool in this agent.
         * 
         * @return builder
         * 
         */
        public Builder agentEndpointId(@Nullable Output<String> agentEndpointId) {
            $.agentEndpointId = agentEndpointId;
            return this;
        }

        /**
         * @param agentEndpointId (Updatable) The AgentEndpoint OCID to be used as a tool in this agent.
         * 
         * @return builder
         * 
         */
        public Builder agentEndpointId(String agentEndpointId) {
            return agentEndpointId(Output.of(agentEndpointId));
        }

        /**
         * @param apiSchema (Updatable) The input location definition for Api schema.
         * 
         * @return builder
         * 
         */
        public Builder apiSchema(@Nullable Output<AgentToolToolConfigApiSchemaArgs> apiSchema) {
            $.apiSchema = apiSchema;
            return this;
        }

        /**
         * @param apiSchema (Updatable) The input location definition for Api schema.
         * 
         * @return builder
         * 
         */
        public Builder apiSchema(AgentToolToolConfigApiSchemaArgs apiSchema) {
            return apiSchema(Output.of(apiSchema));
        }

        /**
         * @param databaseConnection (Updatable) The connection type for Databases.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnection(@Nullable Output<AgentToolToolConfigDatabaseConnectionArgs> databaseConnection) {
            $.databaseConnection = databaseConnection;
            return this;
        }

        /**
         * @param databaseConnection (Updatable) The connection type for Databases.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnection(AgentToolToolConfigDatabaseConnectionArgs databaseConnection) {
            return databaseConnection(Output.of(databaseConnection));
        }

        /**
         * @param databaseSchema (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder databaseSchema(@Nullable Output<AgentToolToolConfigDatabaseSchemaArgs> databaseSchema) {
            $.databaseSchema = databaseSchema;
            return this;
        }

        /**
         * @param databaseSchema (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder databaseSchema(AgentToolToolConfigDatabaseSchemaArgs databaseSchema) {
            return databaseSchema(Output.of(databaseSchema));
        }

        /**
         * @param dialect (Updatable) Dialect to be used for SQL generation.
         * 
         * @return builder
         * 
         */
        public Builder dialect(@Nullable Output<String> dialect) {
            $.dialect = dialect;
            return this;
        }

        /**
         * @param dialect (Updatable) Dialect to be used for SQL generation.
         * 
         * @return builder
         * 
         */
        public Builder dialect(String dialect) {
            return dialect(Output.of(dialect));
        }

        /**
         * @param function (Updatable) Details of Function for Function calling tool.
         * 
         * @return builder
         * 
         */
        public Builder function(@Nullable Output<AgentToolToolConfigFunctionArgs> function) {
            $.function = function;
            return this;
        }

        /**
         * @param function (Updatable) Details of Function for Function calling tool.
         * 
         * @return builder
         * 
         */
        public Builder function(AgentToolToolConfigFunctionArgs function) {
            return function(Output.of(function));
        }

        /**
         * @param generationLlmCustomization (Updatable) Configuration to customize LLM.
         * 
         * @return builder
         * 
         */
        public Builder generationLlmCustomization(@Nullable Output<AgentToolToolConfigGenerationLlmCustomizationArgs> generationLlmCustomization) {
            $.generationLlmCustomization = generationLlmCustomization;
            return this;
        }

        /**
         * @param generationLlmCustomization (Updatable) Configuration to customize LLM.
         * 
         * @return builder
         * 
         */
        public Builder generationLlmCustomization(AgentToolToolConfigGenerationLlmCustomizationArgs generationLlmCustomization) {
            return generationLlmCustomization(Output.of(generationLlmCustomization));
        }

        /**
         * @param httpEndpointAuthConfig (Updatable) Authentication configuration used for HTTP Endpoint tools. Defines the type of authentication and the source of credentials.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointAuthConfig(@Nullable Output<AgentToolToolConfigHttpEndpointAuthConfigArgs> httpEndpointAuthConfig) {
            $.httpEndpointAuthConfig = httpEndpointAuthConfig;
            return this;
        }

        /**
         * @param httpEndpointAuthConfig (Updatable) Authentication configuration used for HTTP Endpoint tools. Defines the type of authentication and the source of credentials.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointAuthConfig(AgentToolToolConfigHttpEndpointAuthConfigArgs httpEndpointAuthConfig) {
            return httpEndpointAuthConfig(Output.of(httpEndpointAuthConfig));
        }

        /**
         * @param iclExamples (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder iclExamples(@Nullable Output<AgentToolToolConfigIclExamplesArgs> iclExamples) {
            $.iclExamples = iclExamples;
            return this;
        }

        /**
         * @param iclExamples (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder iclExamples(AgentToolToolConfigIclExamplesArgs iclExamples) {
            return iclExamples(Output.of(iclExamples));
        }

        /**
         * @param knowledgeBaseConfigs (Updatable) The KnowledgeBase configurations that this RAG Tool uses
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseConfigs(@Nullable Output<List<AgentToolToolConfigKnowledgeBaseConfigArgs>> knowledgeBaseConfigs) {
            $.knowledgeBaseConfigs = knowledgeBaseConfigs;
            return this;
        }

        /**
         * @param knowledgeBaseConfigs (Updatable) The KnowledgeBase configurations that this RAG Tool uses
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseConfigs(List<AgentToolToolConfigKnowledgeBaseConfigArgs> knowledgeBaseConfigs) {
            return knowledgeBaseConfigs(Output.of(knowledgeBaseConfigs));
        }

        /**
         * @param knowledgeBaseConfigs (Updatable) The KnowledgeBase configurations that this RAG Tool uses
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseConfigs(AgentToolToolConfigKnowledgeBaseConfigArgs... knowledgeBaseConfigs) {
            return knowledgeBaseConfigs(List.of(knowledgeBaseConfigs));
        }

        /**
         * @param modelSize (Updatable) Size of the model.
         * 
         * @return builder
         * 
         */
        public Builder modelSize(@Nullable Output<String> modelSize) {
            $.modelSize = modelSize;
            return this;
        }

        /**
         * @param modelSize (Updatable) Size of the model.
         * 
         * @return builder
         * 
         */
        public Builder modelSize(String modelSize) {
            return modelSize(Output.of(modelSize));
        }

        /**
         * @param shouldEnableSelfCorrection (Updatable) To enable/disable self correction.
         * 
         * @return builder
         * 
         */
        public Builder shouldEnableSelfCorrection(@Nullable Output<Boolean> shouldEnableSelfCorrection) {
            $.shouldEnableSelfCorrection = shouldEnableSelfCorrection;
            return this;
        }

        /**
         * @param shouldEnableSelfCorrection (Updatable) To enable/disable self correction.
         * 
         * @return builder
         * 
         */
        public Builder shouldEnableSelfCorrection(Boolean shouldEnableSelfCorrection) {
            return shouldEnableSelfCorrection(Output.of(shouldEnableSelfCorrection));
        }

        /**
         * @param shouldEnableSqlExecution (Updatable) To enable/disable SQL execution.
         * 
         * @return builder
         * 
         */
        public Builder shouldEnableSqlExecution(@Nullable Output<Boolean> shouldEnableSqlExecution) {
            $.shouldEnableSqlExecution = shouldEnableSqlExecution;
            return this;
        }

        /**
         * @param shouldEnableSqlExecution (Updatable) To enable/disable SQL execution.
         * 
         * @return builder
         * 
         */
        public Builder shouldEnableSqlExecution(Boolean shouldEnableSqlExecution) {
            return shouldEnableSqlExecution(Output.of(shouldEnableSqlExecution));
        }

        /**
         * @param subnetId (Updatable) The subnet ID from agent developer tenancy through which the egress is going to be routed.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) The subnet ID from agent developer tenancy through which the egress is going to be routed.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tableAndColumnDescription (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder tableAndColumnDescription(@Nullable Output<AgentToolToolConfigTableAndColumnDescriptionArgs> tableAndColumnDescription) {
            $.tableAndColumnDescription = tableAndColumnDescription;
            return this;
        }

        /**
         * @param tableAndColumnDescription (Updatable) The input location definition.
         * 
         * @return builder
         * 
         */
        public Builder tableAndColumnDescription(AgentToolToolConfigTableAndColumnDescriptionArgs tableAndColumnDescription) {
            return tableAndColumnDescription(Output.of(tableAndColumnDescription));
        }

        /**
         * @param toolConfigType (Updatable) The type of the Tool config. The allowed values are:
         * * `SQL_TOOL_CONFIG`: The config for sql Tool.
         * * `RAG_TOOL_CONFIG`: The config for rag Tool.
         * * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder toolConfigType(Output<String> toolConfigType) {
            $.toolConfigType = toolConfigType;
            return this;
        }

        /**
         * @param toolConfigType (Updatable) The type of the Tool config. The allowed values are:
         * * `SQL_TOOL_CONFIG`: The config for sql Tool.
         * * `RAG_TOOL_CONFIG`: The config for rag Tool.
         * * FUNCTION_CALLING_TOOL_CONFIG: The config for Function calling Tool.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder toolConfigType(String toolConfigType) {
            return toolConfigType(Output.of(toolConfigType));
        }

        public AgentToolToolConfigArgs build() {
            if ($.toolConfigType == null) {
                throw new MissingRequiredPropertyException("AgentToolToolConfigArgs", "toolConfigType");
            }
            return $;
        }
    }

}
