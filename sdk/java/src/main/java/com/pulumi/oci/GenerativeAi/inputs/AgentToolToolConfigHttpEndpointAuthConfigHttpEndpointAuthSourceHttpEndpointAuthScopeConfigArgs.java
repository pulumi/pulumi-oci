// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs Empty = new AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs();

    /**
     * (Updatable) IDCS client ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Updatable) IDCS client ID.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Updatable) The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    @Import(name="httpEndpointAuthScopeConfigType", required=true)
    private Output<String> httpEndpointAuthScopeConfigType;

    /**
     * @return (Updatable) The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    public Output<String> httpEndpointAuthScopeConfigType() {
        return this.httpEndpointAuthScopeConfigType;
    }

    /**
     * (Updatable) IDCS OpenID discovery endpoint.
     * 
     */
    @Import(name="idcsUrl")
    private @Nullable Output<String> idcsUrl;

    /**
     * @return (Updatable) IDCS OpenID discovery endpoint.
     * 
     */
    public Optional<Output<String>> idcsUrl() {
        return Optional.ofNullable(this.idcsUrl);
    }

    /**
     * (Updatable) The location of the API key in the request.
     * 
     */
    @Import(name="keyLocation")
    private @Nullable Output<String> keyLocation;

    /**
     * @return (Updatable) The location of the API key in the request.
     * 
     */
    public Optional<Output<String>> keyLocation() {
        return Optional.ofNullable(this.keyLocation);
    }

    /**
     * (Updatable) The name of the key parameter in the location.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return (Updatable) The name of the key parameter in the location.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * (Updatable) OAuth2 scopes for token generation.
     * 
     */
    @Import(name="scopeUrl")
    private @Nullable Output<String> scopeUrl;

    /**
     * @return (Updatable) OAuth2 scopes for token generation.
     * 
     */
    public Optional<Output<String>> scopeUrl() {
        return Optional.ofNullable(this.scopeUrl);
    }

    /**
     * (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    @Import(name="vaultSecretId")
    private @Nullable Output<String> vaultSecretId;

    /**
     * @return (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    public Optional<Output<String>> vaultSecretId() {
        return Optional.ofNullable(this.vaultSecretId);
    }

    private AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs() {}

    private AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs(AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs $) {
        this.clientId = $.clientId;
        this.httpEndpointAuthScopeConfigType = $.httpEndpointAuthScopeConfigType;
        this.idcsUrl = $.idcsUrl;
        this.keyLocation = $.keyLocation;
        this.keyName = $.keyName;
        this.scopeUrl = $.scopeUrl;
        this.vaultSecretId = $.vaultSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs $;

        public Builder() {
            $ = new AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs();
        }

        public Builder(AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs defaults) {
            $ = new AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId (Updatable) IDCS client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Updatable) IDCS client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param httpEndpointAuthScopeConfigType (Updatable) The type of authentication to be applied for this HTTP Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointAuthScopeConfigType(Output<String> httpEndpointAuthScopeConfigType) {
            $.httpEndpointAuthScopeConfigType = httpEndpointAuthScopeConfigType;
            return this;
        }

        /**
         * @param httpEndpointAuthScopeConfigType (Updatable) The type of authentication to be applied for this HTTP Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder httpEndpointAuthScopeConfigType(String httpEndpointAuthScopeConfigType) {
            return httpEndpointAuthScopeConfigType(Output.of(httpEndpointAuthScopeConfigType));
        }

        /**
         * @param idcsUrl (Updatable) IDCS OpenID discovery endpoint.
         * 
         * @return builder
         * 
         */
        public Builder idcsUrl(@Nullable Output<String> idcsUrl) {
            $.idcsUrl = idcsUrl;
            return this;
        }

        /**
         * @param idcsUrl (Updatable) IDCS OpenID discovery endpoint.
         * 
         * @return builder
         * 
         */
        public Builder idcsUrl(String idcsUrl) {
            return idcsUrl(Output.of(idcsUrl));
        }

        /**
         * @param keyLocation (Updatable) The location of the API key in the request.
         * 
         * @return builder
         * 
         */
        public Builder keyLocation(@Nullable Output<String> keyLocation) {
            $.keyLocation = keyLocation;
            return this;
        }

        /**
         * @param keyLocation (Updatable) The location of the API key in the request.
         * 
         * @return builder
         * 
         */
        public Builder keyLocation(String keyLocation) {
            return keyLocation(Output.of(keyLocation));
        }

        /**
         * @param keyName (Updatable) The name of the key parameter in the location.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName (Updatable) The name of the key parameter in the location.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param scopeUrl (Updatable) OAuth2 scopes for token generation.
         * 
         * @return builder
         * 
         */
        public Builder scopeUrl(@Nullable Output<String> scopeUrl) {
            $.scopeUrl = scopeUrl;
            return this;
        }

        /**
         * @param scopeUrl (Updatable) OAuth2 scopes for token generation.
         * 
         * @return builder
         * 
         */
        public Builder scopeUrl(String scopeUrl) {
            return scopeUrl(Output.of(scopeUrl));
        }

        /**
         * @param vaultSecretId (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(@Nullable Output<String> vaultSecretId) {
            $.vaultSecretId = vaultSecretId;
            return this;
        }

        /**
         * @param vaultSecretId (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(String vaultSecretId) {
            return vaultSecretId(Output.of(vaultSecretId));
        }

        public AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs build() {
            if ($.httpEndpointAuthScopeConfigType == null) {
                throw new MissingRequiredPropertyException("AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfigArgs", "httpEndpointAuthScopeConfigType");
            }
            return $;
        }
    }

}
