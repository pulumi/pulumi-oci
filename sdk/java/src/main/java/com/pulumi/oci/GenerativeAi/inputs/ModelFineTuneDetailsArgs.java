// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GenerativeAi.inputs.ModelFineTuneDetailsTrainingConfigArgs;
import com.pulumi.oci.GenerativeAi.inputs.ModelFineTuneDetailsTrainingDatasetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelFineTuneDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelFineTuneDetailsArgs Empty = new ModelFineTuneDetailsArgs();

    /**
     * The OCID of the dedicated AI cluster this fine-tuning runs on.
     * 
     */
    @Import(name="dedicatedAiClusterId", required=true)
    private Output<String> dedicatedAiClusterId;

    /**
     * @return The OCID of the dedicated AI cluster this fine-tuning runs on.
     * 
     */
    public Output<String> dedicatedAiClusterId() {
        return this.dedicatedAiClusterId;
    }

    /**
     * The fine-tuning method and hyperparameters used for fine-tuning a custom model.
     * 
     */
    @Import(name="trainingConfig")
    private @Nullable Output<ModelFineTuneDetailsTrainingConfigArgs> trainingConfig;

    /**
     * @return The fine-tuning method and hyperparameters used for fine-tuning a custom model.
     * 
     */
    public Optional<Output<ModelFineTuneDetailsTrainingConfigArgs>> trainingConfig() {
        return Optional.ofNullable(this.trainingConfig);
    }

    /**
     * The dataset used to fine-tune the model.
     * 
     * Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{&#34;prompt&#34;: &#34;&lt;first prompt&gt;&#34;, &#34;completion&#34;: &#34;&lt;expected completion given first prompt&gt;&#34;}`
     * 
     */
    @Import(name="trainingDataset", required=true)
    private Output<ModelFineTuneDetailsTrainingDatasetArgs> trainingDataset;

    /**
     * @return The dataset used to fine-tune the model.
     * 
     * Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{&#34;prompt&#34;: &#34;&lt;first prompt&gt;&#34;, &#34;completion&#34;: &#34;&lt;expected completion given first prompt&gt;&#34;}`
     * 
     */
    public Output<ModelFineTuneDetailsTrainingDatasetArgs> trainingDataset() {
        return this.trainingDataset;
    }

    private ModelFineTuneDetailsArgs() {}

    private ModelFineTuneDetailsArgs(ModelFineTuneDetailsArgs $) {
        this.dedicatedAiClusterId = $.dedicatedAiClusterId;
        this.trainingConfig = $.trainingConfig;
        this.trainingDataset = $.trainingDataset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelFineTuneDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelFineTuneDetailsArgs $;

        public Builder() {
            $ = new ModelFineTuneDetailsArgs();
        }

        public Builder(ModelFineTuneDetailsArgs defaults) {
            $ = new ModelFineTuneDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dedicatedAiClusterId The OCID of the dedicated AI cluster this fine-tuning runs on.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedAiClusterId(Output<String> dedicatedAiClusterId) {
            $.dedicatedAiClusterId = dedicatedAiClusterId;
            return this;
        }

        /**
         * @param dedicatedAiClusterId The OCID of the dedicated AI cluster this fine-tuning runs on.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedAiClusterId(String dedicatedAiClusterId) {
            return dedicatedAiClusterId(Output.of(dedicatedAiClusterId));
        }

        /**
         * @param trainingConfig The fine-tuning method and hyperparameters used for fine-tuning a custom model.
         * 
         * @return builder
         * 
         */
        public Builder trainingConfig(@Nullable Output<ModelFineTuneDetailsTrainingConfigArgs> trainingConfig) {
            $.trainingConfig = trainingConfig;
            return this;
        }

        /**
         * @param trainingConfig The fine-tuning method and hyperparameters used for fine-tuning a custom model.
         * 
         * @return builder
         * 
         */
        public Builder trainingConfig(ModelFineTuneDetailsTrainingConfigArgs trainingConfig) {
            return trainingConfig(Output.of(trainingConfig));
        }

        /**
         * @param trainingDataset The dataset used to fine-tune the model.
         * 
         * Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{&#34;prompt&#34;: &#34;&lt;first prompt&gt;&#34;, &#34;completion&#34;: &#34;&lt;expected completion given first prompt&gt;&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(Output<ModelFineTuneDetailsTrainingDatasetArgs> trainingDataset) {
            $.trainingDataset = trainingDataset;
            return this;
        }

        /**
         * @param trainingDataset The dataset used to fine-tune the model.
         * 
         * Only one dataset is allowed per custom model, which is split 80-20 for training and validating. You must provide the dataset in a JSON Lines (JSONL) file. Each line in the JSONL file must have the format: `{&#34;prompt&#34;: &#34;&lt;first prompt&gt;&#34;, &#34;completion&#34;: &#34;&lt;expected completion given first prompt&gt;&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(ModelFineTuneDetailsTrainingDatasetArgs trainingDataset) {
            return trainingDataset(Output.of(trainingDataset));
        }

        public ModelFineTuneDetailsArgs build() {
            if ($.dedicatedAiClusterId == null) {
                throw new MissingRequiredPropertyException("ModelFineTuneDetailsArgs", "dedicatedAiClusterId");
            }
            if ($.trainingDataset == null) {
                throw new MissingRequiredPropertyException("ModelFineTuneDetailsArgs", "trainingDataset");
            }
            return $;
        }
    }

}
