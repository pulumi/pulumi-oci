// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelModelMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelModelMetricArgs Empty = new ModelModelMetricArgs();

    /**
     * Fine-tuned model accuracy.
     * 
     */
    @Import(name="finalAccuracy")
    private @Nullable Output<Double> finalAccuracy;

    /**
     * @return Fine-tuned model accuracy.
     * 
     */
    public Optional<Output<Double>> finalAccuracy() {
        return Optional.ofNullable(this.finalAccuracy);
    }

    /**
     * Fine-tuned model loss.
     * 
     */
    @Import(name="finalLoss")
    private @Nullable Output<Double> finalLoss;

    /**
     * @return Fine-tuned model loss.
     * 
     */
    public Optional<Output<Double>> finalLoss() {
        return Optional.ofNullable(this.finalLoss);
    }

    /**
     * The type of the model metrics. Each type of model can expect a different set of model metrics.
     * 
     */
    @Import(name="modelMetricsType")
    private @Nullable Output<String> modelMetricsType;

    /**
     * @return The type of the model metrics. Each type of model can expect a different set of model metrics.
     * 
     */
    public Optional<Output<String>> modelMetricsType() {
        return Optional.ofNullable(this.modelMetricsType);
    }

    private ModelModelMetricArgs() {}

    private ModelModelMetricArgs(ModelModelMetricArgs $) {
        this.finalAccuracy = $.finalAccuracy;
        this.finalLoss = $.finalLoss;
        this.modelMetricsType = $.modelMetricsType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelModelMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelModelMetricArgs $;

        public Builder() {
            $ = new ModelModelMetricArgs();
        }

        public Builder(ModelModelMetricArgs defaults) {
            $ = new ModelModelMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param finalAccuracy Fine-tuned model accuracy.
         * 
         * @return builder
         * 
         */
        public Builder finalAccuracy(@Nullable Output<Double> finalAccuracy) {
            $.finalAccuracy = finalAccuracy;
            return this;
        }

        /**
         * @param finalAccuracy Fine-tuned model accuracy.
         * 
         * @return builder
         * 
         */
        public Builder finalAccuracy(Double finalAccuracy) {
            return finalAccuracy(Output.of(finalAccuracy));
        }

        /**
         * @param finalLoss Fine-tuned model loss.
         * 
         * @return builder
         * 
         */
        public Builder finalLoss(@Nullable Output<Double> finalLoss) {
            $.finalLoss = finalLoss;
            return this;
        }

        /**
         * @param finalLoss Fine-tuned model loss.
         * 
         * @return builder
         * 
         */
        public Builder finalLoss(Double finalLoss) {
            return finalLoss(Output.of(finalLoss));
        }

        /**
         * @param modelMetricsType The type of the model metrics. Each type of model can expect a different set of model metrics.
         * 
         * @return builder
         * 
         */
        public Builder modelMetricsType(@Nullable Output<String> modelMetricsType) {
            $.modelMetricsType = modelMetricsType;
            return this;
        }

        /**
         * @param modelMetricsType The type of the model metrics. Each type of model can expect a different set of model metrics.
         * 
         * @return builder
         * 
         */
        public Builder modelMetricsType(String modelMetricsType) {
            return modelMetricsType(Output.of(modelMetricsType));
        }

        public ModelModelMetricArgs build() {
            return $;
        }
    }

}
