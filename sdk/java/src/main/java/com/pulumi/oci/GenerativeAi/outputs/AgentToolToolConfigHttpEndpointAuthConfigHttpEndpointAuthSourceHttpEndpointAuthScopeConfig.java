// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig {
    /**
     * @return (Updatable) IDCS client ID.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return (Updatable) The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    private String httpEndpointAuthScopeConfigType;
    /**
     * @return (Updatable) IDCS OpenID discovery endpoint.
     * 
     */
    private @Nullable String idcsUrl;
    /**
     * @return (Updatable) The location of the API key in the request.
     * 
     */
    private @Nullable String keyLocation;
    /**
     * @return (Updatable) The name of the key parameter in the location.
     * 
     */
    private @Nullable String keyName;
    /**
     * @return (Updatable) OAuth2 scopes for token generation.
     * 
     */
    private @Nullable String scopeUrl;
    /**
     * @return (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    private @Nullable String vaultSecretId;

    private AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig() {}
    /**
     * @return (Updatable) IDCS client ID.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return (Updatable) The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    public String httpEndpointAuthScopeConfigType() {
        return this.httpEndpointAuthScopeConfigType;
    }
    /**
     * @return (Updatable) IDCS OpenID discovery endpoint.
     * 
     */
    public Optional<String> idcsUrl() {
        return Optional.ofNullable(this.idcsUrl);
    }
    /**
     * @return (Updatable) The location of the API key in the request.
     * 
     */
    public Optional<String> keyLocation() {
        return Optional.ofNullable(this.keyLocation);
    }
    /**
     * @return (Updatable) The name of the key parameter in the location.
     * 
     */
    public Optional<String> keyName() {
        return Optional.ofNullable(this.keyName);
    }
    /**
     * @return (Updatable) OAuth2 scopes for token generation.
     * 
     */
    public Optional<String> scopeUrl() {
        return Optional.ofNullable(this.scopeUrl);
    }
    /**
     * @return (Updatable) The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    public Optional<String> vaultSecretId() {
        return Optional.ofNullable(this.vaultSecretId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientId;
        private String httpEndpointAuthScopeConfigType;
        private @Nullable String idcsUrl;
        private @Nullable String keyLocation;
        private @Nullable String keyName;
        private @Nullable String scopeUrl;
        private @Nullable String vaultSecretId;
        public Builder() {}
        public Builder(AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.httpEndpointAuthScopeConfigType = defaults.httpEndpointAuthScopeConfigType;
    	      this.idcsUrl = defaults.idcsUrl;
    	      this.keyLocation = defaults.keyLocation;
    	      this.keyName = defaults.keyName;
    	      this.scopeUrl = defaults.scopeUrl;
    	      this.vaultSecretId = defaults.vaultSecretId;
        }

        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder httpEndpointAuthScopeConfigType(String httpEndpointAuthScopeConfigType) {
            if (httpEndpointAuthScopeConfigType == null) {
              throw new MissingRequiredPropertyException("AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "httpEndpointAuthScopeConfigType");
            }
            this.httpEndpointAuthScopeConfigType = httpEndpointAuthScopeConfigType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsUrl(@Nullable String idcsUrl) {

            this.idcsUrl = idcsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder keyLocation(@Nullable String keyLocation) {

            this.keyLocation = keyLocation;
            return this;
        }
        @CustomType.Setter
        public Builder keyName(@Nullable String keyName) {

            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder scopeUrl(@Nullable String scopeUrl) {

            this.scopeUrl = scopeUrl;
            return this;
        }
        @CustomType.Setter
        public Builder vaultSecretId(@Nullable String vaultSecretId) {

            this.vaultSecretId = vaultSecretId;
            return this;
        }
        public AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig build() {
            final var _resultValue = new AgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig();
            _resultValue.clientId = clientId;
            _resultValue.httpEndpointAuthScopeConfigType = httpEndpointAuthScopeConfigType;
            _resultValue.idcsUrl = idcsUrl;
            _resultValue.keyLocation = keyLocation;
            _resultValue.keyName = keyName;
            _resultValue.scopeUrl = scopeUrl;
            _resultValue.vaultSecretId = vaultSecretId;
            return _resultValue;
        }
    }
}
