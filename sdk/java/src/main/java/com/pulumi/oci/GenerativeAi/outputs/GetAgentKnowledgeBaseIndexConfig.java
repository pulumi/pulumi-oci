// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GenerativeAi.outputs.GetAgentKnowledgeBaseIndexConfigDatabaseConnection;
import com.pulumi.oci.GenerativeAi.outputs.GetAgentKnowledgeBaseIndexConfigDatabaseFunction;
import com.pulumi.oci.GenerativeAi.outputs.GetAgentKnowledgeBaseIndexConfigIndex;
import com.pulumi.oci.GenerativeAi.outputs.GetAgentKnowledgeBaseIndexConfigSecretDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAgentKnowledgeBaseIndexConfig {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
     * 
     */
    private String clusterId;
    /**
     * @return The connection type for Databases.
     * 
     */
    private List<GetAgentKnowledgeBaseIndexConfigDatabaseConnection> databaseConnections;
    /**
     * @return Array of Database functions to be used.
     * 
     */
    private List<GetAgentKnowledgeBaseIndexConfigDatabaseFunction> databaseFunctions;
    /**
     * @return The type of index.
     * 
     */
    private String indexConfigType;
    /**
     * @return Index configuration for open search.
     * 
     */
    private List<GetAgentKnowledgeBaseIndexConfigIndex> indexes;
    /**
     * @return The details of configured security configuration on OpenSearch.
     * 
     */
    private List<GetAgentKnowledgeBaseIndexConfigSecretDetail> secretDetails;
    /**
     * @return Whether to enable Hybrid search in service managed OpenSearch.
     * 
     */
    private Boolean shouldEnableHybridSearch;

    private GetAgentKnowledgeBaseIndexConfig() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OpenSearch Cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The connection type for Databases.
     * 
     */
    public List<GetAgentKnowledgeBaseIndexConfigDatabaseConnection> databaseConnections() {
        return this.databaseConnections;
    }
    /**
     * @return Array of Database functions to be used.
     * 
     */
    public List<GetAgentKnowledgeBaseIndexConfigDatabaseFunction> databaseFunctions() {
        return this.databaseFunctions;
    }
    /**
     * @return The type of index.
     * 
     */
    public String indexConfigType() {
        return this.indexConfigType;
    }
    /**
     * @return Index configuration for open search.
     * 
     */
    public List<GetAgentKnowledgeBaseIndexConfigIndex> indexes() {
        return this.indexes;
    }
    /**
     * @return The details of configured security configuration on OpenSearch.
     * 
     */
    public List<GetAgentKnowledgeBaseIndexConfigSecretDetail> secretDetails() {
        return this.secretDetails;
    }
    /**
     * @return Whether to enable Hybrid search in service managed OpenSearch.
     * 
     */
    public Boolean shouldEnableHybridSearch() {
        return this.shouldEnableHybridSearch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAgentKnowledgeBaseIndexConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private List<GetAgentKnowledgeBaseIndexConfigDatabaseConnection> databaseConnections;
        private List<GetAgentKnowledgeBaseIndexConfigDatabaseFunction> databaseFunctions;
        private String indexConfigType;
        private List<GetAgentKnowledgeBaseIndexConfigIndex> indexes;
        private List<GetAgentKnowledgeBaseIndexConfigSecretDetail> secretDetails;
        private Boolean shouldEnableHybridSearch;
        public Builder() {}
        public Builder(GetAgentKnowledgeBaseIndexConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.databaseConnections = defaults.databaseConnections;
    	      this.databaseFunctions = defaults.databaseFunctions;
    	      this.indexConfigType = defaults.indexConfigType;
    	      this.indexes = defaults.indexes;
    	      this.secretDetails = defaults.secretDetails;
    	      this.shouldEnableHybridSearch = defaults.shouldEnableHybridSearch;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseConnections(List<GetAgentKnowledgeBaseIndexConfigDatabaseConnection> databaseConnections) {
            if (databaseConnections == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "databaseConnections");
            }
            this.databaseConnections = databaseConnections;
            return this;
        }
        public Builder databaseConnections(GetAgentKnowledgeBaseIndexConfigDatabaseConnection... databaseConnections) {
            return databaseConnections(List.of(databaseConnections));
        }
        @CustomType.Setter
        public Builder databaseFunctions(List<GetAgentKnowledgeBaseIndexConfigDatabaseFunction> databaseFunctions) {
            if (databaseFunctions == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "databaseFunctions");
            }
            this.databaseFunctions = databaseFunctions;
            return this;
        }
        public Builder databaseFunctions(GetAgentKnowledgeBaseIndexConfigDatabaseFunction... databaseFunctions) {
            return databaseFunctions(List.of(databaseFunctions));
        }
        @CustomType.Setter
        public Builder indexConfigType(String indexConfigType) {
            if (indexConfigType == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "indexConfigType");
            }
            this.indexConfigType = indexConfigType;
            return this;
        }
        @CustomType.Setter
        public Builder indexes(List<GetAgentKnowledgeBaseIndexConfigIndex> indexes) {
            if (indexes == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "indexes");
            }
            this.indexes = indexes;
            return this;
        }
        public Builder indexes(GetAgentKnowledgeBaseIndexConfigIndex... indexes) {
            return indexes(List.of(indexes));
        }
        @CustomType.Setter
        public Builder secretDetails(List<GetAgentKnowledgeBaseIndexConfigSecretDetail> secretDetails) {
            if (secretDetails == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "secretDetails");
            }
            this.secretDetails = secretDetails;
            return this;
        }
        public Builder secretDetails(GetAgentKnowledgeBaseIndexConfigSecretDetail... secretDetails) {
            return secretDetails(List.of(secretDetails));
        }
        @CustomType.Setter
        public Builder shouldEnableHybridSearch(Boolean shouldEnableHybridSearch) {
            if (shouldEnableHybridSearch == null) {
              throw new MissingRequiredPropertyException("GetAgentKnowledgeBaseIndexConfig", "shouldEnableHybridSearch");
            }
            this.shouldEnableHybridSearch = shouldEnableHybridSearch;
            return this;
        }
        public GetAgentKnowledgeBaseIndexConfig build() {
            final var _resultValue = new GetAgentKnowledgeBaseIndexConfig();
            _resultValue.clusterId = clusterId;
            _resultValue.databaseConnections = databaseConnections;
            _resultValue.databaseFunctions = databaseFunctions;
            _resultValue.indexConfigType = indexConfigType;
            _resultValue.indexes = indexes;
            _resultValue.secretDetails = secretDetails;
            _resultValue.shouldEnableHybridSearch = shouldEnableHybridSearch;
            return _resultValue;
        }
    }
}
