// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig {
    /**
     * @return IDCS client ID.
     * 
     */
    private String clientId;
    /**
     * @return The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    private String httpEndpointAuthScopeConfigType;
    /**
     * @return IDCS OpenID discovery endpoint.
     * 
     */
    private String idcsUrl;
    /**
     * @return The location of the API key in the request.
     * 
     */
    private String keyLocation;
    /**
     * @return The name of the key parameter in the location.
     * 
     */
    private String keyName;
    /**
     * @return OAuth2 scopes for token generation.
     * 
     */
    private String scopeUrl;
    /**
     * @return The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    private String vaultSecretId;

    private GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig() {}
    /**
     * @return IDCS client ID.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The type of authentication to be applied for this HTTP Endpoint.
     * 
     */
    public String httpEndpointAuthScopeConfigType() {
        return this.httpEndpointAuthScopeConfigType;
    }
    /**
     * @return IDCS OpenID discovery endpoint.
     * 
     */
    public String idcsUrl() {
        return this.idcsUrl;
    }
    /**
     * @return The location of the API key in the request.
     * 
     */
    public String keyLocation() {
        return this.keyLocation;
    }
    /**
     * @return The name of the key parameter in the location.
     * 
     */
    public String keyName() {
        return this.keyName;
    }
    /**
     * @return OAuth2 scopes for token generation.
     * 
     */
    public String scopeUrl() {
        return this.scopeUrl;
    }
    /**
     * @return The OCID of the vault secret with username:password. Required when `authScope` is AGENT.
     * 
     */
    public String vaultSecretId() {
        return this.vaultSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private String httpEndpointAuthScopeConfigType;
        private String idcsUrl;
        private String keyLocation;
        private String keyName;
        private String scopeUrl;
        private String vaultSecretId;
        public Builder() {}
        public Builder(GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.httpEndpointAuthScopeConfigType = defaults.httpEndpointAuthScopeConfigType;
    	      this.idcsUrl = defaults.idcsUrl;
    	      this.keyLocation = defaults.keyLocation;
    	      this.keyName = defaults.keyName;
    	      this.scopeUrl = defaults.scopeUrl;
    	      this.vaultSecretId = defaults.vaultSecretId;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder httpEndpointAuthScopeConfigType(String httpEndpointAuthScopeConfigType) {
            if (httpEndpointAuthScopeConfigType == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "httpEndpointAuthScopeConfigType");
            }
            this.httpEndpointAuthScopeConfigType = httpEndpointAuthScopeConfigType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsUrl(String idcsUrl) {
            if (idcsUrl == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "idcsUrl");
            }
            this.idcsUrl = idcsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder keyLocation(String keyLocation) {
            if (keyLocation == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "keyLocation");
            }
            this.keyLocation = keyLocation;
            return this;
        }
        @CustomType.Setter
        public Builder keyName(String keyName) {
            if (keyName == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "keyName");
            }
            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder scopeUrl(String scopeUrl) {
            if (scopeUrl == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "scopeUrl");
            }
            this.scopeUrl = scopeUrl;
            return this;
        }
        @CustomType.Setter
        public Builder vaultSecretId(String vaultSecretId) {
            if (vaultSecretId == null) {
              throw new MissingRequiredPropertyException("GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig", "vaultSecretId");
            }
            this.vaultSecretId = vaultSecretId;
            return this;
        }
        public GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig build() {
            final var _resultValue = new GetAgentToolToolConfigHttpEndpointAuthConfigHttpEndpointAuthSourceHttpEndpointAuthScopeConfig();
            _resultValue.clientId = clientId;
            _resultValue.httpEndpointAuthScopeConfigType = httpEndpointAuthScopeConfigType;
            _resultValue.idcsUrl = idcsUrl;
            _resultValue.keyLocation = keyLocation;
            _resultValue.keyName = keyName;
            _resultValue.scopeUrl = scopeUrl;
            _resultValue.vaultSecretId = vaultSecretId;
            return _resultValue;
        }
    }
}
