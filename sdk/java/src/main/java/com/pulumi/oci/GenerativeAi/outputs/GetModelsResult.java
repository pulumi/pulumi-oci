// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenerativeAi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GenerativeAi.outputs.GetModelsFilter;
import com.pulumi.oci.GenerativeAi.outputs.GetModelsModelCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetModelsResult {
    private @Nullable List<String> capabilities;
    /**
     * @return The compartment OCID for fine-tuned models. For pretrained models, this value is null.
     * 
     */
    private String compartmentId;
    private @Nullable String displayName;
    private @Nullable List<GetModelsFilter> filters;
    /**
     * @return An ID that uniquely identifies a pretrained or fine-tuned model.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of model_collection.
     * 
     */
    private List<GetModelsModelCollection> modelCollections;
    /**
     * @return The lifecycle state of the model.
     * 
     */
    private @Nullable String state;
    private @Nullable String vendor;

    private GetModelsResult() {}
    public List<String> capabilities() {
        return this.capabilities == null ? List.of() : this.capabilities;
    }
    /**
     * @return The compartment OCID for fine-tuned models. For pretrained models, this value is null.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetModelsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return An ID that uniquely identifies a pretrained or fine-tuned model.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of model_collection.
     * 
     */
    public List<GetModelsModelCollection> modelCollections() {
        return this.modelCollections;
    }
    /**
     * @return The lifecycle state of the model.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> capabilities;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetModelsFilter> filters;
        private @Nullable String id;
        private List<GetModelsModelCollection> modelCollections;
        private @Nullable String state;
        private @Nullable String vendor;
        public Builder() {}
        public Builder(GetModelsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.modelCollections = defaults.modelCollections;
    	      this.state = defaults.state;
    	      this.vendor = defaults.vendor;
        }

        @CustomType.Setter
        public Builder capabilities(@Nullable List<String> capabilities) {

            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetModelsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetModelsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetModelsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modelCollections(List<GetModelsModelCollection> modelCollections) {
            if (modelCollections == null) {
              throw new MissingRequiredPropertyException("GetModelsResult", "modelCollections");
            }
            this.modelCollections = modelCollections;
            return this;
        }
        public Builder modelCollections(GetModelsModelCollection... modelCollections) {
            return modelCollections(List.of(modelCollections));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vendor(@Nullable String vendor) {

            this.vendor = vendor;
            return this;
        }
        public GetModelsResult build() {
            final var _resultValue = new GetModelsResult();
            _resultValue.capabilities = capabilities;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.modelCollections = modelCollections;
            _resultValue.state = state;
            _resultValue.vendor = vendor;
            return _resultValue;
        }
    }
}
