// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardedDatabaseGsmArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShardedDatabaseGsmArgs Empty = new ShardedDatabaseGsmArgs();

    /**
     * The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    @Import(name="computeCount")
    private @Nullable Output<Double> computeCount;

    /**
     * @return The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    public Optional<Output<Double>> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }

    /**
     * The data disk group size to be allocated in GBs.
     * 
     */
    @Import(name="dataStorageSizeInGbs")
    private @Nullable Output<Double> dataStorageSizeInGbs;

    /**
     * @return The data disk group size to be allocated in GBs.
     * 
     */
    public Optional<Output<Double>> dataStorageSizeInGbs() {
        return Optional.ofNullable(this.dataStorageSizeInGbs);
    }

    /**
     * Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Name of the shard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the shard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status of shard or catalog or gsm for the sharded database.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifier of the underlying supporting resource.
     * 
     */
    @Import(name="supportingResourceId")
    private @Nullable Output<String> supportingResourceId;

    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    public Optional<Output<String>> supportingResourceId() {
        return Optional.ofNullable(this.supportingResourceId);
    }

    /**
     * The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeSslCertificateExpires")
    private @Nullable Output<String> timeSslCertificateExpires;

    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeSslCertificateExpires() {
        return Optional.ofNullable(this.timeSslCertificateExpires);
    }

    /**
     * The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ShardedDatabaseGsmArgs() {}

    private ShardedDatabaseGsmArgs(ShardedDatabaseGsmArgs $) {
        this.computeCount = $.computeCount;
        this.dataStorageSizeInGbs = $.dataStorageSizeInGbs;
        this.metadata = $.metadata;
        this.name = $.name;
        this.status = $.status;
        this.supportingResourceId = $.supportingResourceId;
        this.timeCreated = $.timeCreated;
        this.timeSslCertificateExpires = $.timeSslCertificateExpires;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardedDatabaseGsmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardedDatabaseGsmArgs $;

        public Builder() {
            $ = new ShardedDatabaseGsmArgs();
        }

        public Builder(ShardedDatabaseGsmArgs defaults) {
            $ = new ShardedDatabaseGsmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeCount The compute amount available to the underlying autonomous database associated with shard.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(@Nullable Output<Double> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount The compute amount available to the underlying autonomous database associated with shard.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Double computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param dataStorageSizeInGbs The data disk group size to be allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGbs(@Nullable Output<Double> dataStorageSizeInGbs) {
            $.dataStorageSizeInGbs = dataStorageSizeInGbs;
            return this;
        }

        /**
         * @param dataStorageSizeInGbs The data disk group size to be allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGbs(Double dataStorageSizeInGbs) {
            return dataStorageSizeInGbs(Output.of(dataStorageSizeInGbs));
        }

        /**
         * @param metadata Additional metadata related to shard&#39;s underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Additional metadata related to shard&#39;s underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name Name of the shard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the shard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Status of shard or catalog or gsm for the sharded database.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of shard or catalog or gsm for the sharded database.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param supportingResourceId Identifier of the underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder supportingResourceId(@Nullable Output<String> supportingResourceId) {
            $.supportingResourceId = supportingResourceId;
            return this;
        }

        /**
         * @param supportingResourceId Identifier of the underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder supportingResourceId(String supportingResourceId) {
            return supportingResourceId(Output.of(supportingResourceId));
        }

        /**
         * @param timeCreated The time the the Sharded Database was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the the Sharded Database was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeSslCertificateExpires The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeSslCertificateExpires(@Nullable Output<String> timeSslCertificateExpires) {
            $.timeSslCertificateExpires = timeSslCertificateExpires;
            return this;
        }

        /**
         * @param timeSslCertificateExpires The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeSslCertificateExpires(String timeSslCertificateExpires) {
            return timeSslCertificateExpires(Output.of(timeSslCertificateExpires));
        }

        /**
         * @param timeUpdated The time the Sharded Database was last updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the Sharded Database was last updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ShardedDatabaseGsmArgs build() {
            return $;
        }
    }

}
