// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GloballyDistributedDatabase.inputs.ShardedDatabaseShardDetailEncryptionKeyDetailsArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShardedDatabaseShardDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShardedDatabaseShardDetailArgs Empty = new ShardedDatabaseShardDetailArgs();

    /**
     * Admin password for shard database.
     * 
     */
    @Import(name="adminPassword", required=true)
    private Output<String> adminPassword;

    /**
     * @return Admin password for shard database.
     * 
     */
    public Output<String> adminPassword() {
        return this.adminPassword;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cloud Autonomous Exadata VM Cluster.
     * 
     */
    @Import(name="cloudAutonomousVmClusterId", required=true)
    private Output<String> cloudAutonomousVmClusterId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cloud Autonomous Exadata VM Cluster.
     * 
     */
    public Output<String> cloudAutonomousVmClusterId() {
        return this.cloudAutonomousVmClusterId;
    }

    /**
     * The compute count for the shard database. It has to be in multiples of 2.
     * 
     */
    @Import(name="computeCount", required=true)
    private Output<Double> computeCount;

    /**
     * @return The compute count for the shard database. It has to be in multiples of 2.
     * 
     */
    public Output<Double> computeCount() {
        return this.computeCount;
    }

    /**
     * Identifier of the underlying container database.
     * 
     */
    @Import(name="containerDatabaseId")
    private @Nullable Output<String> containerDatabaseId;

    /**
     * @return Identifier of the underlying container database.
     * 
     */
    public Optional<Output<String>> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }

    /**
     * Identifier of the underlying container database parent.
     * 
     */
    @Import(name="containerDatabaseParentId")
    private @Nullable Output<String> containerDatabaseParentId;

    /**
     * @return Identifier of the underlying container database parent.
     * 
     */
    public Optional<Output<String>> containerDatabaseParentId() {
        return Optional.ofNullable(this.containerDatabaseParentId);
    }

    /**
     * The data disk group size to be allocated in GBs for the shard database.
     * 
     */
    @Import(name="dataStorageSizeInGbs", required=true)
    private Output<Double> dataStorageSizeInGbs;

    /**
     * @return The data disk group size to be allocated in GBs for the shard database.
     * 
     */
    public Output<Double> dataStorageSizeInGbs() {
        return this.dataStorageSizeInGbs;
    }

    /**
     * Details of encryption key to be used to encrypt data for shards and catalog for sharded database. For system-defined sharding type, all shards have to use same encryptionKeyDetails. For system-defined sharding, if encryptionKeyDetails are not specified for catalog, then Oracle managed key will be used for catalog. For user-defined sharding type, if encryptionKeyDetails are not provided for any shard or catalog, then Oracle managed key will be used for such shard or catalog. For system-defined or user-defined sharding type, if the shard or catalog has a peer in region other than primary shard or catalog region, then make sure to provide virtual vault for such shard or catalog, which is also replicated to peer region (the region where peer or standby shard or catalog exists).
     * 
     */
    @Import(name="encryptionKeyDetails")
    private @Nullable Output<ShardedDatabaseShardDetailEncryptionKeyDetailsArgs> encryptionKeyDetails;

    /**
     * @return Details of encryption key to be used to encrypt data for shards and catalog for sharded database. For system-defined sharding type, all shards have to use same encryptionKeyDetails. For system-defined sharding, if encryptionKeyDetails are not specified for catalog, then Oracle managed key will be used for catalog. For user-defined sharding type, if encryptionKeyDetails are not provided for any shard or catalog, then Oracle managed key will be used for such shard or catalog. For system-defined or user-defined sharding type, if the shard or catalog has a peer in region other than primary shard or catalog region, then make sure to provide virtual vault for such shard or catalog, which is also replicated to peer region (the region where peer or standby shard or catalog exists).
     * 
     */
    public Optional<Output<ShardedDatabaseShardDetailEncryptionKeyDetailsArgs>> encryptionKeyDetails() {
        return Optional.ofNullable(this.encryptionKeyDetails);
    }

    /**
     * Determines the auto-scaling mode for the shard database.
     * 
     */
    @Import(name="isAutoScalingEnabled", required=true)
    private Output<Boolean> isAutoScalingEnabled;

    /**
     * @return Determines the auto-scaling mode for the shard database.
     * 
     */
    public Output<Boolean> isAutoScalingEnabled() {
        return this.isAutoScalingEnabled;
    }

    /**
     * Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Name of the shard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the shard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer cloud Autonomous Exadata VM Cluster.
     * 
     */
    @Import(name="peerCloudAutonomousVmClusterId")
    private @Nullable Output<String> peerCloudAutonomousVmClusterId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer cloud Autonomous Exadata VM Cluster.
     * 
     */
    public Optional<Output<String>> peerCloudAutonomousVmClusterId() {
        return Optional.ofNullable(this.peerCloudAutonomousVmClusterId);
    }

    /**
     * Name of the shard-group to which the shard belongs.
     * 
     */
    @Import(name="shardGroup")
    private @Nullable Output<String> shardGroup;

    /**
     * @return Name of the shard-group to which the shard belongs.
     * 
     */
    public Optional<Output<String>> shardGroup() {
        return Optional.ofNullable(this.shardGroup);
    }

    /**
     * The shard space name for the shard database. Shard space for existing shard cannot be changed, once shard is created. Shard space name shall be used while creation of new shards. For User defined sharding, every shard must have a unique shard space name. For system defined sharding, shard space name is not required.
     * 
     */
    @Import(name="shardSpace")
    private @Nullable Output<String> shardSpace;

    /**
     * @return The shard space name for the shard database. Shard space for existing shard cannot be changed, once shard is created. Shard space name shall be used while creation of new shards. For User defined sharding, every shard must have a unique shard space name. For system defined sharding, shard space name is not required.
     * 
     */
    public Optional<Output<String>> shardSpace() {
        return Optional.ofNullable(this.shardSpace);
    }

    /**
     * Status of shard or catalog or gsm for the sharded database.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifier of the underlying supporting resource.
     * 
     */
    @Import(name="supportingResourceId")
    private @Nullable Output<String> supportingResourceId;

    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    public Optional<Output<String>> supportingResourceId() {
        return Optional.ofNullable(this.supportingResourceId);
    }

    /**
     * The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeSslCertificateExpires")
    private @Nullable Output<String> timeSslCertificateExpires;

    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeSslCertificateExpires() {
        return Optional.ofNullable(this.timeSslCertificateExpires);
    }

    /**
     * The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ShardedDatabaseShardDetailArgs() {}

    private ShardedDatabaseShardDetailArgs(ShardedDatabaseShardDetailArgs $) {
        this.adminPassword = $.adminPassword;
        this.cloudAutonomousVmClusterId = $.cloudAutonomousVmClusterId;
        this.computeCount = $.computeCount;
        this.containerDatabaseId = $.containerDatabaseId;
        this.containerDatabaseParentId = $.containerDatabaseParentId;
        this.dataStorageSizeInGbs = $.dataStorageSizeInGbs;
        this.encryptionKeyDetails = $.encryptionKeyDetails;
        this.isAutoScalingEnabled = $.isAutoScalingEnabled;
        this.metadata = $.metadata;
        this.name = $.name;
        this.peerCloudAutonomousVmClusterId = $.peerCloudAutonomousVmClusterId;
        this.shardGroup = $.shardGroup;
        this.shardSpace = $.shardSpace;
        this.status = $.status;
        this.supportingResourceId = $.supportingResourceId;
        this.timeCreated = $.timeCreated;
        this.timeSslCertificateExpires = $.timeSslCertificateExpires;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShardedDatabaseShardDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShardedDatabaseShardDetailArgs $;

        public Builder() {
            $ = new ShardedDatabaseShardDetailArgs();
        }

        public Builder(ShardedDatabaseShardDetailArgs defaults) {
            $ = new ShardedDatabaseShardDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword Admin password for shard database.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Admin password for shard database.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param cloudAutonomousVmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cloud Autonomous Exadata VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder cloudAutonomousVmClusterId(Output<String> cloudAutonomousVmClusterId) {
            $.cloudAutonomousVmClusterId = cloudAutonomousVmClusterId;
            return this;
        }

        /**
         * @param cloudAutonomousVmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cloud Autonomous Exadata VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder cloudAutonomousVmClusterId(String cloudAutonomousVmClusterId) {
            return cloudAutonomousVmClusterId(Output.of(cloudAutonomousVmClusterId));
        }

        /**
         * @param computeCount The compute count for the shard database. It has to be in multiples of 2.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Output<Double> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount The compute count for the shard database. It has to be in multiples of 2.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Double computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param containerDatabaseId Identifier of the underlying container database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(@Nullable Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId Identifier of the underlying container database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param containerDatabaseParentId Identifier of the underlying container database parent.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseParentId(@Nullable Output<String> containerDatabaseParentId) {
            $.containerDatabaseParentId = containerDatabaseParentId;
            return this;
        }

        /**
         * @param containerDatabaseParentId Identifier of the underlying container database parent.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseParentId(String containerDatabaseParentId) {
            return containerDatabaseParentId(Output.of(containerDatabaseParentId));
        }

        /**
         * @param dataStorageSizeInGbs The data disk group size to be allocated in GBs for the shard database.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGbs(Output<Double> dataStorageSizeInGbs) {
            $.dataStorageSizeInGbs = dataStorageSizeInGbs;
            return this;
        }

        /**
         * @param dataStorageSizeInGbs The data disk group size to be allocated in GBs for the shard database.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGbs(Double dataStorageSizeInGbs) {
            return dataStorageSizeInGbs(Output.of(dataStorageSizeInGbs));
        }

        /**
         * @param encryptionKeyDetails Details of encryption key to be used to encrypt data for shards and catalog for sharded database. For system-defined sharding type, all shards have to use same encryptionKeyDetails. For system-defined sharding, if encryptionKeyDetails are not specified for catalog, then Oracle managed key will be used for catalog. For user-defined sharding type, if encryptionKeyDetails are not provided for any shard or catalog, then Oracle managed key will be used for such shard or catalog. For system-defined or user-defined sharding type, if the shard or catalog has a peer in region other than primary shard or catalog region, then make sure to provide virtual vault for such shard or catalog, which is also replicated to peer region (the region where peer or standby shard or catalog exists).
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyDetails(@Nullable Output<ShardedDatabaseShardDetailEncryptionKeyDetailsArgs> encryptionKeyDetails) {
            $.encryptionKeyDetails = encryptionKeyDetails;
            return this;
        }

        /**
         * @param encryptionKeyDetails Details of encryption key to be used to encrypt data for shards and catalog for sharded database. For system-defined sharding type, all shards have to use same encryptionKeyDetails. For system-defined sharding, if encryptionKeyDetails are not specified for catalog, then Oracle managed key will be used for catalog. For user-defined sharding type, if encryptionKeyDetails are not provided for any shard or catalog, then Oracle managed key will be used for such shard or catalog. For system-defined or user-defined sharding type, if the shard or catalog has a peer in region other than primary shard or catalog region, then make sure to provide virtual vault for such shard or catalog, which is also replicated to peer region (the region where peer or standby shard or catalog exists).
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyDetails(ShardedDatabaseShardDetailEncryptionKeyDetailsArgs encryptionKeyDetails) {
            return encryptionKeyDetails(Output.of(encryptionKeyDetails));
        }

        /**
         * @param isAutoScalingEnabled Determines the auto-scaling mode for the shard database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoScalingEnabled(Output<Boolean> isAutoScalingEnabled) {
            $.isAutoScalingEnabled = isAutoScalingEnabled;
            return this;
        }

        /**
         * @param isAutoScalingEnabled Determines the auto-scaling mode for the shard database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoScalingEnabled(Boolean isAutoScalingEnabled) {
            return isAutoScalingEnabled(Output.of(isAutoScalingEnabled));
        }

        /**
         * @param metadata Additional metadata related to shard&#39;s underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Additional metadata related to shard&#39;s underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name Name of the shard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the shard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerCloudAutonomousVmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer cloud Autonomous Exadata VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerCloudAutonomousVmClusterId(@Nullable Output<String> peerCloudAutonomousVmClusterId) {
            $.peerCloudAutonomousVmClusterId = peerCloudAutonomousVmClusterId;
            return this;
        }

        /**
         * @param peerCloudAutonomousVmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer cloud Autonomous Exadata VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerCloudAutonomousVmClusterId(String peerCloudAutonomousVmClusterId) {
            return peerCloudAutonomousVmClusterId(Output.of(peerCloudAutonomousVmClusterId));
        }

        /**
         * @param shardGroup Name of the shard-group to which the shard belongs.
         * 
         * @return builder
         * 
         */
        public Builder shardGroup(@Nullable Output<String> shardGroup) {
            $.shardGroup = shardGroup;
            return this;
        }

        /**
         * @param shardGroup Name of the shard-group to which the shard belongs.
         * 
         * @return builder
         * 
         */
        public Builder shardGroup(String shardGroup) {
            return shardGroup(Output.of(shardGroup));
        }

        /**
         * @param shardSpace The shard space name for the shard database. Shard space for existing shard cannot be changed, once shard is created. Shard space name shall be used while creation of new shards. For User defined sharding, every shard must have a unique shard space name. For system defined sharding, shard space name is not required.
         * 
         * @return builder
         * 
         */
        public Builder shardSpace(@Nullable Output<String> shardSpace) {
            $.shardSpace = shardSpace;
            return this;
        }

        /**
         * @param shardSpace The shard space name for the shard database. Shard space for existing shard cannot be changed, once shard is created. Shard space name shall be used while creation of new shards. For User defined sharding, every shard must have a unique shard space name. For system defined sharding, shard space name is not required.
         * 
         * @return builder
         * 
         */
        public Builder shardSpace(String shardSpace) {
            return shardSpace(Output.of(shardSpace));
        }

        /**
         * @param status Status of shard or catalog or gsm for the sharded database.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of shard or catalog or gsm for the sharded database.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param supportingResourceId Identifier of the underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder supportingResourceId(@Nullable Output<String> supportingResourceId) {
            $.supportingResourceId = supportingResourceId;
            return this;
        }

        /**
         * @param supportingResourceId Identifier of the underlying supporting resource.
         * 
         * @return builder
         * 
         */
        public Builder supportingResourceId(String supportingResourceId) {
            return supportingResourceId(Output.of(supportingResourceId));
        }

        /**
         * @param timeCreated The time the the Sharded Database was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the the Sharded Database was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeSslCertificateExpires The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeSslCertificateExpires(@Nullable Output<String> timeSslCertificateExpires) {
            $.timeSslCertificateExpires = timeSslCertificateExpires;
            return this;
        }

        /**
         * @param timeSslCertificateExpires The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeSslCertificateExpires(String timeSslCertificateExpires) {
            return timeSslCertificateExpires(Output.of(timeSslCertificateExpires));
        }

        /**
         * @param timeUpdated The time the Sharded Database was last updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the Sharded Database was last updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ShardedDatabaseShardDetailArgs build() {
            if ($.adminPassword == null) {
                throw new MissingRequiredPropertyException("ShardedDatabaseShardDetailArgs", "adminPassword");
            }
            if ($.cloudAutonomousVmClusterId == null) {
                throw new MissingRequiredPropertyException("ShardedDatabaseShardDetailArgs", "cloudAutonomousVmClusterId");
            }
            if ($.computeCount == null) {
                throw new MissingRequiredPropertyException("ShardedDatabaseShardDetailArgs", "computeCount");
            }
            if ($.dataStorageSizeInGbs == null) {
                throw new MissingRequiredPropertyException("ShardedDatabaseShardDetailArgs", "dataStorageSizeInGbs");
            }
            if ($.isAutoScalingEnabled == null) {
                throw new MissingRequiredPropertyException("ShardedDatabaseShardDetailArgs", "isAutoScalingEnabled");
            }
            return $;
        }
    }

}
