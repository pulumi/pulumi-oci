// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetShardedDatabaseGsm {
    /**
     * @return The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    private Double computeCount;
    /**
     * @return The data disk group size to be allocated in GBs.
     * 
     */
    private Double dataStorageSizeInGbs;
    /**
     * @return Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return Name of the shard.
     * 
     */
    private String name;
    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    private String status;
    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    private String supportingResourceId;
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    private String timeSslCertificateExpires;
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;

    private GetShardedDatabaseGsm() {}
    /**
     * @return The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    public Double computeCount() {
        return this.computeCount;
    }
    /**
     * @return The data disk group size to be allocated in GBs.
     * 
     */
    public Double dataStorageSizeInGbs() {
        return this.dataStorageSizeInGbs;
    }
    /**
     * @return Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return Name of the shard.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    public String supportingResourceId() {
        return this.supportingResourceId;
    }
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    public String timeSslCertificateExpires() {
        return this.timeSslCertificateExpires;
    }
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShardedDatabaseGsm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double computeCount;
        private Double dataStorageSizeInGbs;
        private Map<String,String> metadata;
        private String name;
        private String status;
        private String supportingResourceId;
        private String timeCreated;
        private String timeSslCertificateExpires;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetShardedDatabaseGsm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeCount = defaults.computeCount;
    	      this.dataStorageSizeInGbs = defaults.dataStorageSizeInGbs;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.supportingResourceId = defaults.supportingResourceId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeSslCertificateExpires = defaults.timeSslCertificateExpires;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder computeCount(Double computeCount) {
            if (computeCount == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "computeCount");
            }
            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGbs(Double dataStorageSizeInGbs) {
            if (dataStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "dataStorageSizeInGbs");
            }
            this.dataStorageSizeInGbs = dataStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder supportingResourceId(String supportingResourceId) {
            if (supportingResourceId == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "supportingResourceId");
            }
            this.supportingResourceId = supportingResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeSslCertificateExpires(String timeSslCertificateExpires) {
            if (timeSslCertificateExpires == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "timeSslCertificateExpires");
            }
            this.timeSslCertificateExpires = timeSslCertificateExpires;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseGsm", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetShardedDatabaseGsm build() {
            final var _resultValue = new GetShardedDatabaseGsm();
            _resultValue.computeCount = computeCount;
            _resultValue.dataStorageSizeInGbs = dataStorageSizeInGbs;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.status = status;
            _resultValue.supportingResourceId = supportingResourceId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeSslCertificateExpires = timeSslCertificateExpires;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
