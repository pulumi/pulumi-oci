// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GloballyDistributedDatabase.outputs.GetShardedDatabaseCatalogDetail;
import com.pulumi.oci.GloballyDistributedDatabase.outputs.GetShardedDatabaseConnectionString;
import com.pulumi.oci.GloballyDistributedDatabase.outputs.GetShardedDatabaseGsm;
import com.pulumi.oci.GloballyDistributedDatabase.outputs.GetShardedDatabasePatchOperation;
import com.pulumi.oci.GloballyDistributedDatabase.outputs.GetShardedDatabaseShardDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetShardedDatabaseResult {
    private String caSignedCertificate;
    /**
     * @return Details of ATP-D based catalogs.
     * 
     */
    private List<GetShardedDatabaseCatalogDetail> catalogDetails;
    /**
     * @return The character set for the database.
     * 
     */
    private String characterSet;
    /**
     * @return The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
     * 
     */
    private Integer chunks;
    /**
     * @return The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
     * 
     */
    private String clusterCertificateCommonName;
    /**
     * @return Identifier of the compartment in which sharded database exists.
     * 
     */
    private String compartmentId;
    private Integer configureGsmsTrigger;
    private Boolean configureGsmsTriggerIsLatestGsmImage;
    private List<String> configureGsmsTriggerOldGsmNames;
    private Integer configureShardingTrigger;
    /**
     * @return Details of sharded database connection String.
     * 
     */
    private List<GetShardedDatabaseConnectionString> connectionStrings;
    /**
     * @return The database deployment type.
     * 
     */
    private String dbDeploymentType;
    /**
     * @return Oracle Database version number.
     * 
     */
    private String dbVersion;
    /**
     * @return Possible workload types.
     * 
     */
    private String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Oracle sharded database display name.
     * 
     */
    private String displayName;
    private Integer downloadGsmCertificateSigningRequestTrigger;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    private Integer generateGsmCertificateSigningRequestTrigger;
    private String generateWalletPassword;
    private Integer generateWalletTrigger;
    private Integer getConnectionStringTrigger;
    /**
     * @return Details of GSM instances for the sharded database.
     * 
     */
    private List<GetShardedDatabaseGsm> gsms;
    /**
     * @return Sharded Database identifier
     * 
     */
    private String id;
    private String lifecycleState;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private String lifecycleStateDetails;
    /**
     * @return The GSM listener port number.
     * 
     */
    private Integer listenerPort;
    /**
     * @return The TLS listener port number for sharded database.
     * 
     */
    private Integer listenerPortTls;
    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    private @Nullable String metadata;
    /**
     * @return The national character set for the database.
     * 
     */
    private String ncharacterSet;
    /**
     * @return Ons local port number.
     * 
     */
    private Integer onsPortLocal;
    /**
     * @return Ons remote port number.
     * 
     */
    private Integer onsPortRemote;
    private List<GetShardedDatabasePatchOperation> patchOperations;
    /**
     * @return Unique prefix for the sharded database.
     * 
     */
    private String prefix;
    /**
     * @return The OCID of private endpoint being used by the sharded database.
     * 
     */
    private String privateEndpoint;
    /**
     * @return The Replication factor for RAFT replication based sharded database. Currently supported values are 3, 5 and 7.
     * 
     */
    private Integer replicationFactor;
    /**
     * @return The Replication method for sharded database. Use RAFT for Raft replication, and DG for DataGuard. If replicationMethod is not provided, it defaults to DG.
     * 
     */
    private String replicationMethod;
    /**
     * @return For RAFT replication based sharded database, the value should be atleast twice the number of shards.
     * 
     */
    private Integer replicationUnit;
    /**
     * @return Details of ATP-D based shards.
     * 
     */
    private List<GetShardedDatabaseShardDetail> shardDetails;
    private String shardedDatabaseId;
    /**
     * @return Sharding Method.
     * 
     */
    private String shardingMethod;
    private Integer startDatabaseTrigger;
    /**
     * @return Lifecycle states for sharded databases.
     * 
     */
    private String state;
    private Integer stopDatabaseTrigger;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return Timezone associated with the sharded database.
     * 
     */
    private String timeZone;
    private Integer uploadSignedCertificateAndGenerateWalletTrigger;
    private Integer validateNetworkTrigger;

    private GetShardedDatabaseResult() {}
    public String caSignedCertificate() {
        return this.caSignedCertificate;
    }
    /**
     * @return Details of ATP-D based catalogs.
     * 
     */
    public List<GetShardedDatabaseCatalogDetail> catalogDetails() {
        return this.catalogDetails;
    }
    /**
     * @return The character set for the database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
     * 
     */
    public Integer chunks() {
        return this.chunks;
    }
    /**
     * @return The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
     * 
     */
    public String clusterCertificateCommonName() {
        return this.clusterCertificateCommonName;
    }
    /**
     * @return Identifier of the compartment in which sharded database exists.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Integer configureGsmsTrigger() {
        return this.configureGsmsTrigger;
    }
    public Boolean configureGsmsTriggerIsLatestGsmImage() {
        return this.configureGsmsTriggerIsLatestGsmImage;
    }
    public List<String> configureGsmsTriggerOldGsmNames() {
        return this.configureGsmsTriggerOldGsmNames;
    }
    public Integer configureShardingTrigger() {
        return this.configureShardingTrigger;
    }
    /**
     * @return Details of sharded database connection String.
     * 
     */
    public List<GetShardedDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return The database deployment type.
     * 
     */
    public String dbDeploymentType() {
        return this.dbDeploymentType;
    }
    /**
     * @return Oracle Database version number.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return Possible workload types.
     * 
     */
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Oracle sharded database display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Integer downloadGsmCertificateSigningRequestTrigger() {
        return this.downloadGsmCertificateSigningRequestTrigger;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    public Integer generateGsmCertificateSigningRequestTrigger() {
        return this.generateGsmCertificateSigningRequestTrigger;
    }
    public String generateWalletPassword() {
        return this.generateWalletPassword;
    }
    public Integer generateWalletTrigger() {
        return this.generateWalletTrigger;
    }
    public Integer getConnectionStringTrigger() {
        return this.getConnectionStringTrigger;
    }
    /**
     * @return Details of GSM instances for the sharded database.
     * 
     */
    public List<GetShardedDatabaseGsm> gsms() {
        return this.gsms;
    }
    /**
     * @return Sharded Database identifier
     * 
     */
    public String id() {
        return this.id;
    }
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public String lifecycleStateDetails() {
        return this.lifecycleStateDetails;
    }
    /**
     * @return The GSM listener port number.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return The TLS listener port number for sharded database.
     * 
     */
    public Integer listenerPortTls() {
        return this.listenerPortTls;
    }
    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    public Optional<String> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return The national character set for the database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return Ons local port number.
     * 
     */
    public Integer onsPortLocal() {
        return this.onsPortLocal;
    }
    /**
     * @return Ons remote port number.
     * 
     */
    public Integer onsPortRemote() {
        return this.onsPortRemote;
    }
    public List<GetShardedDatabasePatchOperation> patchOperations() {
        return this.patchOperations;
    }
    /**
     * @return Unique prefix for the sharded database.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return The OCID of private endpoint being used by the sharded database.
     * 
     */
    public String privateEndpoint() {
        return this.privateEndpoint;
    }
    /**
     * @return The Replication factor for RAFT replication based sharded database. Currently supported values are 3, 5 and 7.
     * 
     */
    public Integer replicationFactor() {
        return this.replicationFactor;
    }
    /**
     * @return The Replication method for sharded database. Use RAFT for Raft replication, and DG for DataGuard. If replicationMethod is not provided, it defaults to DG.
     * 
     */
    public String replicationMethod() {
        return this.replicationMethod;
    }
    /**
     * @return For RAFT replication based sharded database, the value should be atleast twice the number of shards.
     * 
     */
    public Integer replicationUnit() {
        return this.replicationUnit;
    }
    /**
     * @return Details of ATP-D based shards.
     * 
     */
    public List<GetShardedDatabaseShardDetail> shardDetails() {
        return this.shardDetails;
    }
    public String shardedDatabaseId() {
        return this.shardedDatabaseId;
    }
    /**
     * @return Sharding Method.
     * 
     */
    public String shardingMethod() {
        return this.shardingMethod;
    }
    public Integer startDatabaseTrigger() {
        return this.startDatabaseTrigger;
    }
    /**
     * @return Lifecycle states for sharded databases.
     * 
     */
    public String state() {
        return this.state;
    }
    public Integer stopDatabaseTrigger() {
        return this.stopDatabaseTrigger;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Timezone associated with the sharded database.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    public Integer uploadSignedCertificateAndGenerateWalletTrigger() {
        return this.uploadSignedCertificateAndGenerateWalletTrigger;
    }
    public Integer validateNetworkTrigger() {
        return this.validateNetworkTrigger;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShardedDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caSignedCertificate;
        private List<GetShardedDatabaseCatalogDetail> catalogDetails;
        private String characterSet;
        private Integer chunks;
        private String clusterCertificateCommonName;
        private String compartmentId;
        private Integer configureGsmsTrigger;
        private Boolean configureGsmsTriggerIsLatestGsmImage;
        private List<String> configureGsmsTriggerOldGsmNames;
        private Integer configureShardingTrigger;
        private List<GetShardedDatabaseConnectionString> connectionStrings;
        private String dbDeploymentType;
        private String dbVersion;
        private String dbWorkload;
        private Map<String,String> definedTags;
        private String displayName;
        private Integer downloadGsmCertificateSigningRequestTrigger;
        private Map<String,String> freeformTags;
        private Integer generateGsmCertificateSigningRequestTrigger;
        private String generateWalletPassword;
        private Integer generateWalletTrigger;
        private Integer getConnectionStringTrigger;
        private List<GetShardedDatabaseGsm> gsms;
        private String id;
        private String lifecycleState;
        private String lifecycleStateDetails;
        private Integer listenerPort;
        private Integer listenerPortTls;
        private @Nullable String metadata;
        private String ncharacterSet;
        private Integer onsPortLocal;
        private Integer onsPortRemote;
        private List<GetShardedDatabasePatchOperation> patchOperations;
        private String prefix;
        private String privateEndpoint;
        private Integer replicationFactor;
        private String replicationMethod;
        private Integer replicationUnit;
        private List<GetShardedDatabaseShardDetail> shardDetails;
        private String shardedDatabaseId;
        private String shardingMethod;
        private Integer startDatabaseTrigger;
        private String state;
        private Integer stopDatabaseTrigger;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String timeZone;
        private Integer uploadSignedCertificateAndGenerateWalletTrigger;
        private Integer validateNetworkTrigger;
        public Builder() {}
        public Builder(GetShardedDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caSignedCertificate = defaults.caSignedCertificate;
    	      this.catalogDetails = defaults.catalogDetails;
    	      this.characterSet = defaults.characterSet;
    	      this.chunks = defaults.chunks;
    	      this.clusterCertificateCommonName = defaults.clusterCertificateCommonName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configureGsmsTrigger = defaults.configureGsmsTrigger;
    	      this.configureGsmsTriggerIsLatestGsmImage = defaults.configureGsmsTriggerIsLatestGsmImage;
    	      this.configureGsmsTriggerOldGsmNames = defaults.configureGsmsTriggerOldGsmNames;
    	      this.configureShardingTrigger = defaults.configureShardingTrigger;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.dbDeploymentType = defaults.dbDeploymentType;
    	      this.dbVersion = defaults.dbVersion;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.downloadGsmCertificateSigningRequestTrigger = defaults.downloadGsmCertificateSigningRequestTrigger;
    	      this.freeformTags = defaults.freeformTags;
    	      this.generateGsmCertificateSigningRequestTrigger = defaults.generateGsmCertificateSigningRequestTrigger;
    	      this.generateWalletPassword = defaults.generateWalletPassword;
    	      this.generateWalletTrigger = defaults.generateWalletTrigger;
    	      this.getConnectionStringTrigger = defaults.getConnectionStringTrigger;
    	      this.gsms = defaults.gsms;
    	      this.id = defaults.id;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.lifecycleStateDetails = defaults.lifecycleStateDetails;
    	      this.listenerPort = defaults.listenerPort;
    	      this.listenerPortTls = defaults.listenerPortTls;
    	      this.metadata = defaults.metadata;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.onsPortLocal = defaults.onsPortLocal;
    	      this.onsPortRemote = defaults.onsPortRemote;
    	      this.patchOperations = defaults.patchOperations;
    	      this.prefix = defaults.prefix;
    	      this.privateEndpoint = defaults.privateEndpoint;
    	      this.replicationFactor = defaults.replicationFactor;
    	      this.replicationMethod = defaults.replicationMethod;
    	      this.replicationUnit = defaults.replicationUnit;
    	      this.shardDetails = defaults.shardDetails;
    	      this.shardedDatabaseId = defaults.shardedDatabaseId;
    	      this.shardingMethod = defaults.shardingMethod;
    	      this.startDatabaseTrigger = defaults.startDatabaseTrigger;
    	      this.state = defaults.state;
    	      this.stopDatabaseTrigger = defaults.stopDatabaseTrigger;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeZone = defaults.timeZone;
    	      this.uploadSignedCertificateAndGenerateWalletTrigger = defaults.uploadSignedCertificateAndGenerateWalletTrigger;
    	      this.validateNetworkTrigger = defaults.validateNetworkTrigger;
        }

        @CustomType.Setter
        public Builder caSignedCertificate(String caSignedCertificate) {
            if (caSignedCertificate == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "caSignedCertificate");
            }
            this.caSignedCertificate = caSignedCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder catalogDetails(List<GetShardedDatabaseCatalogDetail> catalogDetails) {
            if (catalogDetails == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "catalogDetails");
            }
            this.catalogDetails = catalogDetails;
            return this;
        }
        public Builder catalogDetails(GetShardedDatabaseCatalogDetail... catalogDetails) {
            return catalogDetails(List.of(catalogDetails));
        }
        @CustomType.Setter
        public Builder characterSet(String characterSet) {
            if (characterSet == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "characterSet");
            }
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder chunks(Integer chunks) {
            if (chunks == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "chunks");
            }
            this.chunks = chunks;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCertificateCommonName(String clusterCertificateCommonName) {
            if (clusterCertificateCommonName == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "clusterCertificateCommonName");
            }
            this.clusterCertificateCommonName = clusterCertificateCommonName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configureGsmsTrigger(Integer configureGsmsTrigger) {
            if (configureGsmsTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "configureGsmsTrigger");
            }
            this.configureGsmsTrigger = configureGsmsTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder configureGsmsTriggerIsLatestGsmImage(Boolean configureGsmsTriggerIsLatestGsmImage) {
            if (configureGsmsTriggerIsLatestGsmImage == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "configureGsmsTriggerIsLatestGsmImage");
            }
            this.configureGsmsTriggerIsLatestGsmImage = configureGsmsTriggerIsLatestGsmImage;
            return this;
        }
        @CustomType.Setter
        public Builder configureGsmsTriggerOldGsmNames(List<String> configureGsmsTriggerOldGsmNames) {
            if (configureGsmsTriggerOldGsmNames == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "configureGsmsTriggerOldGsmNames");
            }
            this.configureGsmsTriggerOldGsmNames = configureGsmsTriggerOldGsmNames;
            return this;
        }
        public Builder configureGsmsTriggerOldGsmNames(String... configureGsmsTriggerOldGsmNames) {
            return configureGsmsTriggerOldGsmNames(List.of(configureGsmsTriggerOldGsmNames));
        }
        @CustomType.Setter
        public Builder configureShardingTrigger(Integer configureShardingTrigger) {
            if (configureShardingTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "configureShardingTrigger");
            }
            this.configureShardingTrigger = configureShardingTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetShardedDatabaseConnectionString> connectionStrings) {
            if (connectionStrings == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "connectionStrings");
            }
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetShardedDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder dbDeploymentType(String dbDeploymentType) {
            if (dbDeploymentType == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "dbDeploymentType");
            }
            this.dbDeploymentType = dbDeploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(String dbWorkload) {
            if (dbWorkload == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "dbWorkload");
            }
            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder downloadGsmCertificateSigningRequestTrigger(Integer downloadGsmCertificateSigningRequestTrigger) {
            if (downloadGsmCertificateSigningRequestTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "downloadGsmCertificateSigningRequestTrigger");
            }
            this.downloadGsmCertificateSigningRequestTrigger = downloadGsmCertificateSigningRequestTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder generateGsmCertificateSigningRequestTrigger(Integer generateGsmCertificateSigningRequestTrigger) {
            if (generateGsmCertificateSigningRequestTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "generateGsmCertificateSigningRequestTrigger");
            }
            this.generateGsmCertificateSigningRequestTrigger = generateGsmCertificateSigningRequestTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder generateWalletPassword(String generateWalletPassword) {
            if (generateWalletPassword == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "generateWalletPassword");
            }
            this.generateWalletPassword = generateWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder generateWalletTrigger(Integer generateWalletTrigger) {
            if (generateWalletTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "generateWalletTrigger");
            }
            this.generateWalletTrigger = generateWalletTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder getConnectionStringTrigger(Integer getConnectionStringTrigger) {
            if (getConnectionStringTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "getConnectionStringTrigger");
            }
            this.getConnectionStringTrigger = getConnectionStringTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder gsms(List<GetShardedDatabaseGsm> gsms) {
            if (gsms == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "gsms");
            }
            this.gsms = gsms;
            return this;
        }
        public Builder gsms(GetShardedDatabaseGsm... gsms) {
            return gsms(List.of(gsms));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStateDetails(String lifecycleStateDetails) {
            if (lifecycleStateDetails == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "lifecycleStateDetails");
            }
            this.lifecycleStateDetails = lifecycleStateDetails;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPortTls(Integer listenerPortTls) {
            if (listenerPortTls == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "listenerPortTls");
            }
            this.listenerPortTls = listenerPortTls;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable String metadata) {

            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(String ncharacterSet) {
            if (ncharacterSet == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "ncharacterSet");
            }
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder onsPortLocal(Integer onsPortLocal) {
            if (onsPortLocal == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "onsPortLocal");
            }
            this.onsPortLocal = onsPortLocal;
            return this;
        }
        @CustomType.Setter
        public Builder onsPortRemote(Integer onsPortRemote) {
            if (onsPortRemote == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "onsPortRemote");
            }
            this.onsPortRemote = onsPortRemote;
            return this;
        }
        @CustomType.Setter
        public Builder patchOperations(List<GetShardedDatabasePatchOperation> patchOperations) {
            if (patchOperations == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "patchOperations");
            }
            this.patchOperations = patchOperations;
            return this;
        }
        public Builder patchOperations(GetShardedDatabasePatchOperation... patchOperations) {
            return patchOperations(List.of(patchOperations));
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpoint(String privateEndpoint) {
            if (privateEndpoint == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "privateEndpoint");
            }
            this.privateEndpoint = privateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder replicationFactor(Integer replicationFactor) {
            if (replicationFactor == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "replicationFactor");
            }
            this.replicationFactor = replicationFactor;
            return this;
        }
        @CustomType.Setter
        public Builder replicationMethod(String replicationMethod) {
            if (replicationMethod == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "replicationMethod");
            }
            this.replicationMethod = replicationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder replicationUnit(Integer replicationUnit) {
            if (replicationUnit == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "replicationUnit");
            }
            this.replicationUnit = replicationUnit;
            return this;
        }
        @CustomType.Setter
        public Builder shardDetails(List<GetShardedDatabaseShardDetail> shardDetails) {
            if (shardDetails == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "shardDetails");
            }
            this.shardDetails = shardDetails;
            return this;
        }
        public Builder shardDetails(GetShardedDatabaseShardDetail... shardDetails) {
            return shardDetails(List.of(shardDetails));
        }
        @CustomType.Setter
        public Builder shardedDatabaseId(String shardedDatabaseId) {
            if (shardedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "shardedDatabaseId");
            }
            this.shardedDatabaseId = shardedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder shardingMethod(String shardingMethod) {
            if (shardingMethod == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "shardingMethod");
            }
            this.shardingMethod = shardingMethod;
            return this;
        }
        @CustomType.Setter
        public Builder startDatabaseTrigger(Integer startDatabaseTrigger) {
            if (startDatabaseTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "startDatabaseTrigger");
            }
            this.startDatabaseTrigger = startDatabaseTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stopDatabaseTrigger(Integer stopDatabaseTrigger) {
            if (stopDatabaseTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "stopDatabaseTrigger");
            }
            this.stopDatabaseTrigger = stopDatabaseTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder uploadSignedCertificateAndGenerateWalletTrigger(Integer uploadSignedCertificateAndGenerateWalletTrigger) {
            if (uploadSignedCertificateAndGenerateWalletTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "uploadSignedCertificateAndGenerateWalletTrigger");
            }
            this.uploadSignedCertificateAndGenerateWalletTrigger = uploadSignedCertificateAndGenerateWalletTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder validateNetworkTrigger(Integer validateNetworkTrigger) {
            if (validateNetworkTrigger == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabaseResult", "validateNetworkTrigger");
            }
            this.validateNetworkTrigger = validateNetworkTrigger;
            return this;
        }
        public GetShardedDatabaseResult build() {
            final var _resultValue = new GetShardedDatabaseResult();
            _resultValue.caSignedCertificate = caSignedCertificate;
            _resultValue.catalogDetails = catalogDetails;
            _resultValue.characterSet = characterSet;
            _resultValue.chunks = chunks;
            _resultValue.clusterCertificateCommonName = clusterCertificateCommonName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configureGsmsTrigger = configureGsmsTrigger;
            _resultValue.configureGsmsTriggerIsLatestGsmImage = configureGsmsTriggerIsLatestGsmImage;
            _resultValue.configureGsmsTriggerOldGsmNames = configureGsmsTriggerOldGsmNames;
            _resultValue.configureShardingTrigger = configureShardingTrigger;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.dbDeploymentType = dbDeploymentType;
            _resultValue.dbVersion = dbVersion;
            _resultValue.dbWorkload = dbWorkload;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.downloadGsmCertificateSigningRequestTrigger = downloadGsmCertificateSigningRequestTrigger;
            _resultValue.freeformTags = freeformTags;
            _resultValue.generateGsmCertificateSigningRequestTrigger = generateGsmCertificateSigningRequestTrigger;
            _resultValue.generateWalletPassword = generateWalletPassword;
            _resultValue.generateWalletTrigger = generateWalletTrigger;
            _resultValue.getConnectionStringTrigger = getConnectionStringTrigger;
            _resultValue.gsms = gsms;
            _resultValue.id = id;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.lifecycleStateDetails = lifecycleStateDetails;
            _resultValue.listenerPort = listenerPort;
            _resultValue.listenerPortTls = listenerPortTls;
            _resultValue.metadata = metadata;
            _resultValue.ncharacterSet = ncharacterSet;
            _resultValue.onsPortLocal = onsPortLocal;
            _resultValue.onsPortRemote = onsPortRemote;
            _resultValue.patchOperations = patchOperations;
            _resultValue.prefix = prefix;
            _resultValue.privateEndpoint = privateEndpoint;
            _resultValue.replicationFactor = replicationFactor;
            _resultValue.replicationMethod = replicationMethod;
            _resultValue.replicationUnit = replicationUnit;
            _resultValue.shardDetails = shardDetails;
            _resultValue.shardedDatabaseId = shardedDatabaseId;
            _resultValue.shardingMethod = shardingMethod;
            _resultValue.startDatabaseTrigger = startDatabaseTrigger;
            _resultValue.state = state;
            _resultValue.stopDatabaseTrigger = stopDatabaseTrigger;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timeZone = timeZone;
            _resultValue.uploadSignedCertificateAndGenerateWalletTrigger = uploadSignedCertificateAndGenerateWalletTrigger;
            _resultValue.validateNetworkTrigger = validateNetworkTrigger;
            return _resultValue;
        }
    }
}
