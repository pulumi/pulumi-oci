// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetShardedDatabasesShardedDatabaseCollectionItem {
    /**
     * @return The character set for the database.
     * 
     */
    private String characterSet;
    /**
     * @return The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
     * 
     */
    private Integer chunks;
    /**
     * @return The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
     * 
     */
    private String clusterCertificateCommonName;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return The database deployment type.
     * 
     */
    private String dbDeploymentType;
    /**
     * @return Oracle Database version number.
     * 
     */
    private String dbVersion;
    /**
     * @return Possible workload types.
     * 
     */
    private String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only sharded databases that match the entire name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Sharded Database identifier
     * 
     */
    private String id;
    private String lifecycleState;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private String lifecycleStateDetails;
    /**
     * @return The GSM listener port number.
     * 
     */
    private Integer listenerPort;
    /**
     * @return The TLS listener port number for sharded database.
     * 
     */
    private Integer listenerPortTls;
    /**
     * @return The national character set for the database.
     * 
     */
    private String ncharacterSet;
    /**
     * @return Ons local port number.
     * 
     */
    private Integer onsPortLocal;
    /**
     * @return Ons remote port number.
     * 
     */
    private Integer onsPortRemote;
    /**
     * @return Unique prefix for the sharded database.
     * 
     */
    private String prefix;
    /**
     * @return Sharding Method.
     * 
     */
    private String shardingMethod;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    private Double totalCpuCount;
    private Double totalDataStorageSizeInGbs;

    private GetShardedDatabasesShardedDatabaseCollectionItem() {}
    /**
     * @return The character set for the database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
     * 
     */
    public Integer chunks() {
        return this.chunks;
    }
    /**
     * @return The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
     * 
     */
    public String clusterCertificateCommonName() {
        return this.clusterCertificateCommonName;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The database deployment type.
     * 
     */
    public String dbDeploymentType() {
        return this.dbDeploymentType;
    }
    /**
     * @return Oracle Database version number.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return Possible workload types.
     * 
     */
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only sharded databases that match the entire name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Sharded Database identifier
     * 
     */
    public String id() {
        return this.id;
    }
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public String lifecycleStateDetails() {
        return this.lifecycleStateDetails;
    }
    /**
     * @return The GSM listener port number.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return The TLS listener port number for sharded database.
     * 
     */
    public Integer listenerPortTls() {
        return this.listenerPortTls;
    }
    /**
     * @return The national character set for the database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return Ons local port number.
     * 
     */
    public Integer onsPortLocal() {
        return this.onsPortLocal;
    }
    /**
     * @return Ons remote port number.
     * 
     */
    public Integer onsPortRemote() {
        return this.onsPortRemote;
    }
    /**
     * @return Unique prefix for the sharded database.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return Sharding Method.
     * 
     */
    public String shardingMethod() {
        return this.shardingMethod;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public Double totalCpuCount() {
        return this.totalCpuCount;
    }
    public Double totalDataStorageSizeInGbs() {
        return this.totalDataStorageSizeInGbs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShardedDatabasesShardedDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String characterSet;
        private Integer chunks;
        private String clusterCertificateCommonName;
        private String compartmentId;
        private String dbDeploymentType;
        private String dbVersion;
        private String dbWorkload;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleState;
        private String lifecycleStateDetails;
        private Integer listenerPort;
        private Integer listenerPortTls;
        private String ncharacterSet;
        private Integer onsPortLocal;
        private Integer onsPortRemote;
        private String prefix;
        private String shardingMethod;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private Double totalCpuCount;
        private Double totalDataStorageSizeInGbs;
        public Builder() {}
        public Builder(GetShardedDatabasesShardedDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.chunks = defaults.chunks;
    	      this.clusterCertificateCommonName = defaults.clusterCertificateCommonName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbDeploymentType = defaults.dbDeploymentType;
    	      this.dbVersion = defaults.dbVersion;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.lifecycleStateDetails = defaults.lifecycleStateDetails;
    	      this.listenerPort = defaults.listenerPort;
    	      this.listenerPortTls = defaults.listenerPortTls;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.onsPortLocal = defaults.onsPortLocal;
    	      this.onsPortRemote = defaults.onsPortRemote;
    	      this.prefix = defaults.prefix;
    	      this.shardingMethod = defaults.shardingMethod;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.totalCpuCount = defaults.totalCpuCount;
    	      this.totalDataStorageSizeInGbs = defaults.totalDataStorageSizeInGbs;
        }

        @CustomType.Setter
        public Builder characterSet(String characterSet) {
            if (characterSet == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "characterSet");
            }
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder chunks(Integer chunks) {
            if (chunks == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "chunks");
            }
            this.chunks = chunks;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCertificateCommonName(String clusterCertificateCommonName) {
            if (clusterCertificateCommonName == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "clusterCertificateCommonName");
            }
            this.clusterCertificateCommonName = clusterCertificateCommonName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbDeploymentType(String dbDeploymentType) {
            if (dbDeploymentType == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "dbDeploymentType");
            }
            this.dbDeploymentType = dbDeploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(String dbWorkload) {
            if (dbWorkload == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "dbWorkload");
            }
            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStateDetails(String lifecycleStateDetails) {
            if (lifecycleStateDetails == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "lifecycleStateDetails");
            }
            this.lifecycleStateDetails = lifecycleStateDetails;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPortTls(Integer listenerPortTls) {
            if (listenerPortTls == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "listenerPortTls");
            }
            this.listenerPortTls = listenerPortTls;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(String ncharacterSet) {
            if (ncharacterSet == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "ncharacterSet");
            }
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder onsPortLocal(Integer onsPortLocal) {
            if (onsPortLocal == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "onsPortLocal");
            }
            this.onsPortLocal = onsPortLocal;
            return this;
        }
        @CustomType.Setter
        public Builder onsPortRemote(Integer onsPortRemote) {
            if (onsPortRemote == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "onsPortRemote");
            }
            this.onsPortRemote = onsPortRemote;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder shardingMethod(String shardingMethod) {
            if (shardingMethod == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "shardingMethod");
            }
            this.shardingMethod = shardingMethod;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder totalCpuCount(Double totalCpuCount) {
            if (totalCpuCount == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "totalCpuCount");
            }
            this.totalCpuCount = totalCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder totalDataStorageSizeInGbs(Double totalDataStorageSizeInGbs) {
            if (totalDataStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetShardedDatabasesShardedDatabaseCollectionItem", "totalDataStorageSizeInGbs");
            }
            this.totalDataStorageSizeInGbs = totalDataStorageSizeInGbs;
            return this;
        }
        public GetShardedDatabasesShardedDatabaseCollectionItem build() {
            final var _resultValue = new GetShardedDatabasesShardedDatabaseCollectionItem();
            _resultValue.characterSet = characterSet;
            _resultValue.chunks = chunks;
            _resultValue.clusterCertificateCommonName = clusterCertificateCommonName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbDeploymentType = dbDeploymentType;
            _resultValue.dbVersion = dbVersion;
            _resultValue.dbWorkload = dbWorkload;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.lifecycleStateDetails = lifecycleStateDetails;
            _resultValue.listenerPort = listenerPort;
            _resultValue.listenerPortTls = listenerPortTls;
            _resultValue.ncharacterSet = ncharacterSet;
            _resultValue.onsPortLocal = onsPortLocal;
            _resultValue.onsPortRemote = onsPortRemote;
            _resultValue.prefix = prefix;
            _resultValue.shardingMethod = shardingMethod;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.totalCpuCount = totalCpuCount;
            _resultValue.totalDataStorageSizeInGbs = totalDataStorageSizeInGbs;
            return _resultValue;
        }
    }
}
