// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GloballyDistributedDatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ShardedDatabaseGsm {
    /**
     * @return The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    private @Nullable Double computeCount;
    /**
     * @return The data disk group size to be allocated in GBs.
     * 
     */
    private @Nullable Double dataStorageSizeInGbs;
    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    private @Nullable Map<String,Object> metadata;
    /**
     * @return Name of the shard.
     * 
     */
    private @Nullable String name;
    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    private @Nullable String status;
    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    private @Nullable String supportingResourceId;
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeSslCertificateExpires;
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeUpdated;

    private ShardedDatabaseGsm() {}
    /**
     * @return The compute amount available to the underlying autonomous database associated with shard.
     * 
     */
    public Optional<Double> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }
    /**
     * @return The data disk group size to be allocated in GBs.
     * 
     */
    public Optional<Double> dataStorageSizeInGbs() {
        return Optional.ofNullable(this.dataStorageSizeInGbs);
    }
    /**
     * @return Additional metadata related to shard&#39;s underlying supporting resource.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * @return Name of the shard.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Status of shard or catalog or gsm for the sharded database.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Identifier of the underlying supporting resource.
     * 
     */
    public Optional<String> supportingResourceId() {
        return Optional.ofNullable(this.supportingResourceId);
    }
    /**
     * @return The time the the Sharded Database was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeSslCertificateExpires() {
        return Optional.ofNullable(this.timeSslCertificateExpires);
    }
    /**
     * @return The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ShardedDatabaseGsm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double computeCount;
        private @Nullable Double dataStorageSizeInGbs;
        private @Nullable Map<String,Object> metadata;
        private @Nullable String name;
        private @Nullable String status;
        private @Nullable String supportingResourceId;
        private @Nullable String timeCreated;
        private @Nullable String timeSslCertificateExpires;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(ShardedDatabaseGsm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeCount = defaults.computeCount;
    	      this.dataStorageSizeInGbs = defaults.dataStorageSizeInGbs;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.supportingResourceId = defaults.supportingResourceId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeSslCertificateExpires = defaults.timeSslCertificateExpires;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder computeCount(@Nullable Double computeCount) {

            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGbs(@Nullable Double dataStorageSizeInGbs) {

            this.dataStorageSizeInGbs = dataStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable Map<String,Object> metadata) {

            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder supportingResourceId(@Nullable String supportingResourceId) {

            this.supportingResourceId = supportingResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {

            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeSslCertificateExpires(@Nullable String timeSslCertificateExpires) {

            this.timeSslCertificateExpires = timeSslCertificateExpires;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {

            this.timeUpdated = timeUpdated;
            return this;
        }
        public ShardedDatabaseGsm build() {
            final var _resultValue = new ShardedDatabaseGsm();
            _resultValue.computeCount = computeCount;
            _resultValue.dataStorageSizeInGbs = dataStorageSizeInGbs;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.status = status;
            _resultValue.supportingResourceId = supportingResourceId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeSslCertificateExpires = timeSslCertificateExpires;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
