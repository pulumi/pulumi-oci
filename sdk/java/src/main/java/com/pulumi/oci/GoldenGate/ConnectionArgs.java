// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.ConnectionAdditionalAttributeArgs;
import com.pulumi.oci.GoldenGate.inputs.ConnectionBootstrapServerArgs;
import com.pulumi.oci.GoldenGate.inputs.ConnectionLockArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ== Deprecated: This field is deprecated and replaced by &#34;accountKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    /**
     * @return (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ== Deprecated: This field is deprecated and replaced by &#34;accountKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, &#39;accountKey&#39; field must not be provided.
     * 
     */
    @Import(name="accountKeySecretId")
    private @Nullable Output<String> accountKeySecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, &#39;accountKey&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> accountKeySecretId() {
        return Optional.ofNullable(this.accountKeySecretId);
    }

    /**
     * (Updatable) Sets the Azure storage account name.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return (Updatable) Sets the Azure storage account name.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    @Import(name="additionalAttributes")
    private @Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes;

    /**
     * @return (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    public Optional<Output<List<ConnectionAdditionalAttributeArgs>>> additionalAttributes() {
        return Optional.ofNullable(this.additionalAttributes);
    }

    /**
     * (Updatable) Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
     * 
     */
    @Import(name="authenticationMode")
    private @Nullable Output<String> authenticationMode;

    /**
     * @return (Updatable) Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
     * 
     */
    public Optional<Output<String>> authenticationMode() {
        return Optional.ofNullable(this.authenticationMode);
    }

    /**
     * (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    @Import(name="azureTenantId")
    private @Nullable Output<String> azureTenantId;

    /**
     * @return (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    public Optional<Output<String>> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }

    /**
     * (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    @Import(name="bootstrapServers")
    private @Nullable Output<List<ConnectionBootstrapServerArgs>> bootstrapServers;

    /**
     * @return (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    public Optional<Output<List<ConnectionBootstrapServerArgs>>> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }

    /**
     * (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1 Deprecated: This field is deprecated and replaced by &#34;clientSecretSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1 Deprecated: This field is deprecated and replaced by &#34;clientSecretSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Only applicable for authenticationType == OAUTH_M2M. Note: When provided, &#39;clientSecret&#39; field must not be provided.
     * 
     */
    @Import(name="clientSecretSecretId")
    private @Nullable Output<String> clientSecretSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Only applicable for authenticationType == OAUTH_M2M. Note: When provided, &#39;clientSecret&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> clientSecretSecretId() {
        return Optional.ofNullable(this.clientSecretSecretId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    @Import(name="connectionFactory")
    private @Nullable Output<String> connectionFactory;

    /**
     * @return (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    public Optional<Output<String>> connectionFactory() {
        return Optional.ofNullable(this.connectionFactory);
    }

    /**
     * (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * (Updatable) The connection type.
     * 
     */
    @Import(name="connectionType", required=true)
    private Output<String> connectionType;

    /**
     * @return (Updatable) The connection type.
     * 
     */
    public Output<String> connectionType() {
        return this.connectionType;
    }

    /**
     * (Updatable) Connection URL. e.g.: &#39;jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb&#39;
     * 
     */
    @Import(name="connectionUrl")
    private @Nullable Output<String> connectionUrl;

    /**
     * @return (Updatable) Connection URL. e.g.: &#39;jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb&#39;
     * 
     */
    public Optional<Output<String>> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }

    /**
     * (Updatable) The base64 encoded content of the consumer.properties file.
     * 
     */
    @Import(name="consumerProperties")
    private @Nullable Output<String> consumerProperties;

    /**
     * @return (Updatable) The base64 encoded content of the consumer.properties file.
     * 
     */
    public Optional<Output<String>> consumerProperties() {
        return Optional.ofNullable(this.consumerProperties);
    }

    /**
     * (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
     * 
     */
    @Import(name="coreSiteXml")
    private @Nullable Output<String> coreSiteXml;

    /**
     * @return (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
     * 
     */
    public Optional<Output<String>> coreSiteXml() {
        return Optional.ofNullable(this.coreSiteXml);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * (Updatable) The name of the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return (Updatable) The name of the database.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * (Updatable) Metadata about this specific object.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Metadata about this specific object.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) An object&#39;s Display Name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) An object&#39;s Display Name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Indicates that sensitive attributes are provided via Secrets.
     * 
     */
    @Import(name="doesUseSecretIds")
    private @Nullable Output<Boolean> doesUseSecretIds;

    /**
     * @return (Updatable) Indicates that sensitive attributes are provided via Secrets.
     * 
     */
    public Optional<Output<Boolean>> doesUseSecretIds() {
        return Optional.ofNullable(this.doesUseSecretIds);
    }

    /**
     * (Updatable)Azure Storage service endpoint. e.g: https://test.blob.core.windows.net,  Optional Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return (Updatable)Azure Storage service endpoint. e.g: https://test.blob.core.windows.net,  Optional Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
     * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
     * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="isLockOverride")
    private @Nullable Output<Boolean> isLockOverride;

    public Optional<Output<Boolean>> isLockOverride() {
        return Optional.ofNullable(this.isLockOverride);
    }

    /**
     * (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    @Import(name="jndiConnectionFactory")
    private @Nullable Output<String> jndiConnectionFactory;

    /**
     * @return (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    public Optional<Output<String>> jndiConnectionFactory() {
        return Optional.ofNullable(this.jndiConnectionFactory);
    }

    /**
     * (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    @Import(name="jndiInitialContextFactory")
    private @Nullable Output<String> jndiInitialContextFactory;

    /**
     * @return (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    public Optional<Output<String>> jndiInitialContextFactory() {
        return Optional.ofNullable(this.jndiInitialContextFactory);
    }

    /**
     * (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    @Import(name="jndiProviderUrl")
    private @Nullable Output<String> jndiProviderUrl;

    /**
     * @return (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    public Optional<Output<String>> jndiProviderUrl() {
        return Optional.ofNullable(this.jndiProviderUrl);
    }

    /**
     * (Updatable) The password associated to the principal. Deprecated: This field is deprecated and replaced by &#34;jndiSecurityCredentialsSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="jndiSecurityCredentials")
    private @Nullable Output<String> jndiSecurityCredentials;

    /**
     * @return (Updatable) The password associated to the principal. Deprecated: This field is deprecated and replaced by &#34;jndiSecurityCredentialsSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> jndiSecurityCredentials() {
        return Optional.ofNullable(this.jndiSecurityCredentials);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, &#39;jndiSecurityCredentials&#39; field must not be provided.
     * 
     */
    @Import(name="jndiSecurityCredentialsSecretId")
    private @Nullable Output<String> jndiSecurityCredentialsSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, &#39;jndiSecurityCredentials&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> jndiSecurityCredentialsSecretId() {
        return Optional.ofNullable(this.jndiSecurityCredentialsSecretId);
    }

    /**
     * (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    @Import(name="jndiSecurityPrincipal")
    private @Nullable Output<String> jndiSecurityPrincipal;

    /**
     * @return (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    public Optional<Output<String>> jndiSecurityPrincipal() {
        return Optional.ofNullable(this.jndiSecurityPrincipal);
    }

    /**
     * (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * (Updatable) The base64 encoded content of the KeyStore file. Deprecated: This field is deprecated and replaced by &#34;keyStoreSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="keyStore")
    private @Nullable Output<String> keyStore;

    /**
     * @return (Updatable) The base64 encoded content of the KeyStore file. Deprecated: This field is deprecated and replaced by &#34;keyStoreSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> keyStore() {
        return Optional.ofNullable(this.keyStore);
    }

    /**
     * (Updatable) The KeyStore password. Deprecated: This field is deprecated and replaced by &#34;keyStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="keyStorePassword")
    private @Nullable Output<String> keyStorePassword;

    /**
     * @return (Updatable) The KeyStore password. Deprecated: This field is deprecated and replaced by &#34;keyStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> keyStorePassword() {
        return Optional.ofNullable(this.keyStorePassword);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, &#39;keyStorePassword&#39; field must not be provided.
     * 
     */
    @Import(name="keyStorePasswordSecretId")
    private @Nullable Output<String> keyStorePasswordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, &#39;keyStorePassword&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> keyStorePasswordSecretId() {
        return Optional.ofNullable(this.keyStorePasswordSecretId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, &#39;keyStore&#39; field must not be provided.
     * 
     */
    @Import(name="keyStoreSecretId")
    private @Nullable Output<String> keyStoreSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, &#39;keyStore&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> keyStoreSecretId() {
        return Optional.ofNullable(this.keyStoreSecretId);
    }

    /**
     * Locks associated with this resource.
     * 
     */
    @Import(name="locks")
    private @Nullable Output<List<ConnectionLockArgs>> locks;

    /**
     * @return Locks associated with this resource.
     * 
     */
    public Optional<Output<List<ConnectionLockArgs>>> locks() {
        return Optional.ofNullable(this.locks);
    }

    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Deprecated: This field is deprecated and replaced by &#34;passwordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Deprecated: This field is deprecated and replaced by &#34;passwordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. If secretId is used plaintext field must not be provided. Note: When provided, &#39;password&#39; field must not be provided.
     * 
     */
    @Import(name="passwordSecretId")
    private @Nullable Output<String> passwordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. If secretId is used plaintext field must not be provided. Note: When provided, &#39;password&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> passwordSecretId() {
        return Optional.ofNullable(this.passwordSecretId);
    }

    /**
     * (Updatable) The port of an endpoint usually specified for a connection.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The port of an endpoint usually specified for a connection.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
     * 
     * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
     * 
     * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Deprecated: This field is deprecated and replaced by &#34;privateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="privateKeyFile")
    private @Nullable Output<String> privateKeyFile;

    /**
     * @return (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Deprecated: This field is deprecated and replaced by &#34;privateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> privateKeyFile() {
        return Optional.ofNullable(this.privateKeyFile);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, &#39;privateKeyFile&#39; field must not be provided.
     * 
     */
    @Import(name="privateKeyFileSecretId")
    private @Nullable Output<String> privateKeyFileSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, &#39;privateKeyFile&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> privateKeyFileSecretId() {
        return Optional.ofNullable(this.privateKeyFileSecretId);
    }

    /**
     * (Updatable) Password if the private key file is encrypted. Deprecated: This field is deprecated and replaced by &#34;privateKeyPassphraseSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="privateKeyPassphrase")
    private @Nullable Output<String> privateKeyPassphrase;

    /**
     * @return (Updatable) Password if the private key file is encrypted. Deprecated: This field is deprecated and replaced by &#34;privateKeyPassphraseSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, &#39;privateKeyPassphrase&#39; field must not be provided.
     * 
     */
    @Import(name="privateKeyPassphraseSecretId")
    private @Nullable Output<String> privateKeyPassphraseSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, &#39;privateKeyPassphrase&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> privateKeyPassphraseSecretId() {
        return Optional.ofNullable(this.privateKeyPassphraseSecretId);
    }

    /**
     * (Updatable) The base64 encoded content of the producer.properties file.
     * 
     */
    @Import(name="producerProperties")
    private @Nullable Output<String> producerProperties;

    /**
     * @return (Updatable) The base64 encoded content of the producer.properties file.
     * 
     */
    public Optional<Output<String>> producerProperties() {
        return Optional.ofNullable(this.producerProperties);
    }

    /**
     * (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    @Import(name="publicKeyFingerprint")
    private @Nullable Output<String> publicKeyFingerprint;

    /**
     * @return (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    public Optional<Output<String>> publicKeyFingerprint() {
        return Optional.ofNullable(this.publicKeyFingerprint);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
     * 
     */
    @Import(name="redisClusterId")
    private @Nullable Output<String> redisClusterId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
     * 
     */
    public Optional<Output<String>> redisClusterId() {
        return Optional.ofNullable(this.redisClusterId);
    }

    /**
     * (Updatable) The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Updatable) The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
     * 
     */
    @Import(name="routingMethod")
    private @Nullable Output<String> routingMethod;

    /**
     * @return (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
     * 
     */
    public Optional<Output<String>> routingMethod() {
        return Optional.ofNullable(this.routingMethod);
    }

    /**
     * (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D Deprecated: This field is deprecated and replaced by &#34;sasTokenSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="sasToken")
    private @Nullable Output<String> sasToken;

    /**
     * @return (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D Deprecated: This field is deprecated and replaced by &#34;sasTokenSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, &#39;sasToken&#39; field must not be provided.
     * 
     */
    @Import(name="sasTokenSecretId")
    private @Nullable Output<String> sasTokenSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, &#39;sasToken&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> sasTokenSecretId() {
        return Optional.ofNullable(this.sasTokenSecretId);
    }

    /**
     * (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34; Deprecated: This field is deprecated and replaced by &#34;secretAccessKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34; Deprecated: This field is deprecated and replaced by &#34;secretAccessKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, &#39;secretAccessKey&#39; field must not be provided.
     * 
     */
    @Import(name="secretAccessKeySecretId")
    private @Nullable Output<String> secretAccessKeySecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, &#39;secretAccessKey&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> secretAccessKeySecretId() {
        return Optional.ofNullable(this.secretAccessKeySecretId);
    }

    /**
     * (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    @Import(name="securityProtocol")
    private @Nullable Output<String> securityProtocol;

    /**
     * @return (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    public Optional<Output<String>> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }

    /**
     * (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
     * 
     */
    @Import(name="servers")
    private @Nullable Output<String> servers;

    /**
     * @return (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
     * 
     */
    public Optional<Output<String>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage. Deprecated: This field is deprecated and replaced by &#34;serviceAccountKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="serviceAccountKeyFile")
    private @Nullable Output<String> serviceAccountKeyFile;

    /**
     * @return (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage. Deprecated: This field is deprecated and replaced by &#34;serviceAccountKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> serviceAccountKeyFile() {
        return Optional.ofNullable(this.serviceAccountKeyFile);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, &#39;serviceAccountKeyFile&#39; field must not be provided.
     * 
     */
    @Import(name="serviceAccountKeyFileSecretId")
    private @Nullable Output<String> serviceAccountKeyFileSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, &#39;serviceAccountKeyFile&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> serviceAccountKeyFileSecretId() {
        return Optional.ofNullable(this.serviceAccountKeyFileSecretId);
    }

    /**
     * (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    @Import(name="sessionMode")
    private @Nullable Output<String> sessionMode;

    /**
     * @return (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    public Optional<Output<String>> sessionMode() {
        return Optional.ofNullable(this.sessionMode);
    }

    /**
     * (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    @Import(name="shouldUseJndi")
    private @Nullable Output<Boolean> shouldUseJndi;

    /**
     * @return (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    public Optional<Output<Boolean>> shouldUseJndi() {
        return Optional.ofNullable(this.shouldUseJndi);
    }

    /**
     * (Updatable) Indicates that the user intents to connect to the instance through resource principal.
     * 
     */
    @Import(name="shouldUseResourcePrincipal")
    private @Nullable Output<Boolean> shouldUseResourcePrincipal;

    /**
     * @return (Updatable) Indicates that the user intents to connect to the instance through resource principal.
     * 
     */
    public Optional<Output<Boolean>> shouldUseResourcePrincipal() {
        return Optional.ofNullable(this.shouldUseResourcePrincipal);
    }

    /**
     * (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    @Import(name="shouldValidateServerCertificate")
    private @Nullable Output<Boolean> shouldValidateServerCertificate;

    /**
     * @return (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    public Optional<Output<Boolean>> shouldValidateServerCertificate() {
        return Optional.ofNullable(this.shouldValidateServerCertificate);
    }

    /**
     * (Updatable) The base64 encoded certificate of the trusted certificate authorities (Trusted CA) for PostgreSQL.  The supported file formats are .pem and .crt.
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return (Updatable) The base64 encoded certificate of the trusted certificate authorities (Trusted CA) for PostgreSQL.  The supported file formats are .pem and .crt.
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * (Updatable) Client Certificate - The base64 encoded content of a .pem or .crt file. containing the client public key (for 2-way SSL).
     * 
     */
    @Import(name="sslCert")
    private @Nullable Output<String> sslCert;

    /**
     * @return (Updatable) Client Certificate - The base64 encoded content of a .pem or .crt file. containing the client public key (for 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }

    /**
     * (Updatable) The base64 encoded keystash file which contains the encrypted password to the key database file. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystashSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="sslClientKeystash")
    private @Nullable Output<String> sslClientKeystash;

    /**
     * @return (Updatable) The base64 encoded keystash file which contains the encrypted password to the key database file. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystashSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> sslClientKeystash() {
        return Optional.ofNullable(this.sslClientKeystash);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, &#39;sslClientKeystash&#39; field must not be provided.
     * 
     */
    @Import(name="sslClientKeystashSecretId")
    private @Nullable Output<String> sslClientKeystashSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, &#39;sslClientKeystash&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> sslClientKeystashSecretId() {
        return Optional.ofNullable(this.sslClientKeystashSecretId);
    }

    /**
     * (Updatable) The base64 encoded keystore file created at the client containing the server certificate / CA root certificate. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystoredbSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="sslClientKeystoredb")
    private @Nullable Output<String> sslClientKeystoredb;

    /**
     * @return (Updatable) The base64 encoded keystore file created at the client containing the server certificate / CA root certificate. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystoredbSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> sslClientKeystoredb() {
        return Optional.ofNullable(this.sslClientKeystoredb);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, &#39;sslClientKeystoredb&#39; field must not be provided.
     * 
     */
    @Import(name="sslClientKeystoredbSecretId")
    private @Nullable Output<String> sslClientKeystoredbSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, &#39;sslClientKeystoredb&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> sslClientKeystoredbSecretId() {
        return Optional.ofNullable(this.sslClientKeystoredbSecretId);
    }

    /**
     * (Updatable) The base64 encoded list of certificates revoked by the trusted certificate authorities (Trusted CA). Note: This is an optional property and only applicable if TLS/MTLS option is selected.
     * 
     */
    @Import(name="sslCrl")
    private @Nullable Output<String> sslCrl;

    /**
     * @return (Updatable) The base64 encoded list of certificates revoked by the trusted certificate authorities (Trusted CA). Note: This is an optional property and only applicable if TLS/MTLS option is selected.
     * 
     */
    public Optional<Output<String>> sslCrl() {
        return Optional.ofNullable(this.sslCrl);
    }

    /**
     * (Updatable) Client Key - The base64 encoded content of a .pem or .crt file containing the client private key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;sslKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="sslKey")
    private @Nullable Output<String> sslKey;

    /**
     * @return (Updatable) Client Key - The base64 encoded content of a .pem or .crt file containing the client private key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;sslKeySecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }

    /**
     * (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided. Deprecated: This field is deprecated and replaced by &#34;sslKeyPasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="sslKeyPassword")
    private @Nullable Output<String> sslKeyPassword;

    /**
     * @return (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided. Deprecated: This field is deprecated and replaced by &#34;sslKeyPasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> sslKeyPassword() {
        return Optional.ofNullable(this.sslKeyPassword);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, &#39;sslKeyPassword&#39; field must not be provided.
     * 
     */
    @Import(name="sslKeyPasswordSecretId")
    private @Nullable Output<String> sslKeyPasswordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, &#39;sslKeyPassword&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> sslKeyPasswordSecretId() {
        return Optional.ofNullable(this.sslKeyPasswordSecretId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
     * * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, &#39;sslKey&#39; field must not be provided.
     * 
     */
    @Import(name="sslKeySecretId")
    private @Nullable Output<String> sslKeySecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
     * * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, &#39;sslKey&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> sslKeySecretId() {
        return Optional.ofNullable(this.sslKeySecretId);
    }

    /**
     * (Updatable) SSL modes for PostgreSQL.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return (Updatable) SSL modes for PostgreSQL.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * (Updatable) The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate.
     * 
     */
    @Import(name="sslServerCertificate")
    private @Nullable Output<String> sslServerCertificate;

    /**
     * @return (Updatable) The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate.
     * 
     */
    public Optional<Output<String>> sslServerCertificate() {
        return Optional.ofNullable(this.sslServerCertificate);
    }

    /**
     * (Updatable) Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
     * 
     */
    @Import(name="storageCredentialName")
    private @Nullable Output<String> storageCredentialName;

    /**
     * @return (Updatable) Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
     * 
     */
    public Optional<Output<String>> storageCredentialName() {
        return Optional.ofNullable(this.storageCredentialName);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    @Import(name="streamPoolId")
    private @Nullable Output<String> streamPoolId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    public Optional<Output<String>> streamPoolId() {
        return Optional.ofNullable(this.streamPoolId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The Kafka (e.g. Confluent) Schema Registry technology type.
     * 
     */
    @Import(name="technologyType", required=true)
    private Output<String> technologyType;

    /**
     * @return The Kafka (e.g. Confluent) Schema Registry technology type.
     * 
     */
    public Output<String> technologyType() {
        return this.technologyType;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    @Import(name="tenancyId")
    private @Nullable Output<String> tenancyId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    public Optional<Output<String>> tenancyId() {
        return Optional.ofNullable(this.tenancyId);
    }

    /**
     * (Updatable) Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return (Updatable) Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * (Updatable) Database Certificate - The base64 encoded content of a .pem file, containing the server public key (for 1 and 2-way SSL).
     * 
     */
    @Import(name="tlsCaFile")
    private @Nullable Output<String> tlsCaFile;

    /**
     * @return (Updatable) Database Certificate - The base64 encoded content of a .pem file, containing the server public key (for 1 and 2-way SSL).
     * 
     */
    public Optional<Output<String>> tlsCaFile() {
        return Optional.ofNullable(this.tlsCaFile);
    }

    /**
     * (Updatable) Client Certificate - The base64 encoded content of a .pem file, containing the client public key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="tlsCertificateKeyFile")
    private @Nullable Output<String> tlsCertificateKeyFile;

    /**
     * @return (Updatable) Client Certificate - The base64 encoded content of a .pem file, containing the client public key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> tlsCertificateKeyFile() {
        return Optional.ofNullable(this.tlsCertificateKeyFile);
    }

    /**
     * (Updatable) Client Certificate key file password. Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFilePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="tlsCertificateKeyFilePassword")
    private @Nullable Output<String> tlsCertificateKeyFilePassword;

    /**
     * @return (Updatable) Client Certificate key file password. Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFilePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> tlsCertificateKeyFilePassword() {
        return Optional.ofNullable(this.tlsCertificateKeyFilePassword);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, &#39;tlsCertificateKeyFilePassword&#39; field must not be provided.
     * 
     */
    @Import(name="tlsCertificateKeyFilePasswordSecretId")
    private @Nullable Output<String> tlsCertificateKeyFilePasswordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, &#39;tlsCertificateKeyFilePassword&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> tlsCertificateKeyFilePasswordSecretId() {
        return Optional.ofNullable(this.tlsCertificateKeyFilePasswordSecretId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
     * * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, &#39;tlsCertificateKeyFile&#39; field must not be provided.
     * 
     */
    @Import(name="tlsCertificateKeyFileSecretId")
    private @Nullable Output<String> tlsCertificateKeyFileSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
     * * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, &#39;tlsCertificateKeyFile&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> tlsCertificateKeyFileSecretId() {
        return Optional.ofNullable(this.tlsCertificateKeyFileSecretId);
    }

    /**
     * (Updatable) If value is true, it triggers connection refresh action and this attribute change will always show up in the &#34;update&#34; plan and will apply steps in order to refresh secrets and dependent service properties (such as ADB connection strings, wallets, etc..).
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="triggerRefresh")
    private @Nullable Output<Boolean> triggerRefresh;

    /**
     * @return (Updatable) If value is true, it triggers connection refresh action and this attribute change will always show up in the &#34;update&#34; plan and will apply steps in order to refresh secrets and dependent service properties (such as ADB connection strings, wallets, etc..).
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> triggerRefresh() {
        return Optional.ofNullable(this.triggerRefresh);
    }

    /**
     * (Updatable) The base64 encoded content of the TrustStore file. Deprecated: This field is deprecated and replaced by &#34;trustStoreSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="trustStore")
    private @Nullable Output<String> trustStore;

    /**
     * @return (Updatable) The base64 encoded content of the TrustStore file. Deprecated: This field is deprecated and replaced by &#34;trustStoreSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> trustStore() {
        return Optional.ofNullable(this.trustStore);
    }

    /**
     * (Updatable) The TrustStore password. Deprecated: This field is deprecated and replaced by &#34;trustStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="trustStorePassword")
    private @Nullable Output<String> trustStorePassword;

    /**
     * @return (Updatable) The TrustStore password. Deprecated: This field is deprecated and replaced by &#34;trustStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> trustStorePassword() {
        return Optional.ofNullable(this.trustStorePassword);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, &#39;trustStorePassword&#39; field must not be provided.
     * 
     */
    @Import(name="trustStorePasswordSecretId")
    private @Nullable Output<String> trustStorePasswordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, &#39;trustStorePassword&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> trustStorePasswordSecretId() {
        return Optional.ofNullable(this.trustStorePasswordSecretId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, &#39;trustStore&#39; field must not be provided.
     * 
     */
    @Import(name="trustStoreSecretId")
    private @Nullable Output<String> trustStoreSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, &#39;trustStore&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> trustStoreSecretId() {
        return Optional.ofNullable(this.trustStoreSecretId);
    }

    /**
     * (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    /**
     * (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database. This attribute is expected to be base64 encoded. Deprecated: This field is deprecated and replaced by &#34;walletSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    @Import(name="wallet")
    private @Nullable Output<String> wallet;

    /**
     * @return (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database. This attribute is expected to be base64 encoded. Deprecated: This field is deprecated and replaced by &#34;walletSecretId&#34;. This field will be removed after February 15 2026.
     * 
     */
    public Optional<Output<String>> wallet() {
        return Optional.ofNullable(this.wallet);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, &#39;wallet&#39; field must not be provided.
     * 
     */
    @Import(name="walletSecretId")
    private @Nullable Output<String> walletSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, &#39;wallet&#39; field must not be provided.
     * 
     */
    public Optional<Output<String>> walletSecretId() {
        return Optional.ofNullable(this.walletSecretId);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.accountKey = $.accountKey;
        this.accountKeySecretId = $.accountKeySecretId;
        this.accountName = $.accountName;
        this.additionalAttributes = $.additionalAttributes;
        this.authenticationMode = $.authenticationMode;
        this.authenticationType = $.authenticationType;
        this.azureTenantId = $.azureTenantId;
        this.bootstrapServers = $.bootstrapServers;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.clientSecretSecretId = $.clientSecretSecretId;
        this.compartmentId = $.compartmentId;
        this.connectionFactory = $.connectionFactory;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.connectionUrl = $.connectionUrl;
        this.consumerProperties = $.consumerProperties;
        this.coreSiteXml = $.coreSiteXml;
        this.databaseId = $.databaseId;
        this.databaseName = $.databaseName;
        this.dbSystemId = $.dbSystemId;
        this.definedTags = $.definedTags;
        this.deploymentId = $.deploymentId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.doesUseSecretIds = $.doesUseSecretIds;
        this.endpoint = $.endpoint;
        this.fingerprint = $.fingerprint;
        this.freeformTags = $.freeformTags;
        this.host = $.host;
        this.isLockOverride = $.isLockOverride;
        this.jndiConnectionFactory = $.jndiConnectionFactory;
        this.jndiInitialContextFactory = $.jndiInitialContextFactory;
        this.jndiProviderUrl = $.jndiProviderUrl;
        this.jndiSecurityCredentials = $.jndiSecurityCredentials;
        this.jndiSecurityCredentialsSecretId = $.jndiSecurityCredentialsSecretId;
        this.jndiSecurityPrincipal = $.jndiSecurityPrincipal;
        this.keyId = $.keyId;
        this.keyStore = $.keyStore;
        this.keyStorePassword = $.keyStorePassword;
        this.keyStorePasswordSecretId = $.keyStorePasswordSecretId;
        this.keyStoreSecretId = $.keyStoreSecretId;
        this.locks = $.locks;
        this.nsgIds = $.nsgIds;
        this.password = $.password;
        this.passwordSecretId = $.passwordSecretId;
        this.port = $.port;
        this.privateIp = $.privateIp;
        this.privateKeyFile = $.privateKeyFile;
        this.privateKeyFileSecretId = $.privateKeyFileSecretId;
        this.privateKeyPassphrase = $.privateKeyPassphrase;
        this.privateKeyPassphraseSecretId = $.privateKeyPassphraseSecretId;
        this.producerProperties = $.producerProperties;
        this.publicKeyFingerprint = $.publicKeyFingerprint;
        this.redisClusterId = $.redisClusterId;
        this.region = $.region;
        this.routingMethod = $.routingMethod;
        this.sasToken = $.sasToken;
        this.sasTokenSecretId = $.sasTokenSecretId;
        this.secretAccessKey = $.secretAccessKey;
        this.secretAccessKeySecretId = $.secretAccessKeySecretId;
        this.securityProtocol = $.securityProtocol;
        this.servers = $.servers;
        this.serviceAccountKeyFile = $.serviceAccountKeyFile;
        this.serviceAccountKeyFileSecretId = $.serviceAccountKeyFileSecretId;
        this.sessionMode = $.sessionMode;
        this.shouldUseJndi = $.shouldUseJndi;
        this.shouldUseResourcePrincipal = $.shouldUseResourcePrincipal;
        this.shouldValidateServerCertificate = $.shouldValidateServerCertificate;
        this.sslCa = $.sslCa;
        this.sslCert = $.sslCert;
        this.sslClientKeystash = $.sslClientKeystash;
        this.sslClientKeystashSecretId = $.sslClientKeystashSecretId;
        this.sslClientKeystoredb = $.sslClientKeystoredb;
        this.sslClientKeystoredbSecretId = $.sslClientKeystoredbSecretId;
        this.sslCrl = $.sslCrl;
        this.sslKey = $.sslKey;
        this.sslKeyPassword = $.sslKeyPassword;
        this.sslKeyPasswordSecretId = $.sslKeyPasswordSecretId;
        this.sslKeySecretId = $.sslKeySecretId;
        this.sslMode = $.sslMode;
        this.sslServerCertificate = $.sslServerCertificate;
        this.storageCredentialName = $.storageCredentialName;
        this.streamPoolId = $.streamPoolId;
        this.subnetId = $.subnetId;
        this.technologyType = $.technologyType;
        this.tenancyId = $.tenancyId;
        this.tenantId = $.tenantId;
        this.tlsCaFile = $.tlsCaFile;
        this.tlsCertificateKeyFile = $.tlsCertificateKeyFile;
        this.tlsCertificateKeyFilePassword = $.tlsCertificateKeyFilePassword;
        this.tlsCertificateKeyFilePasswordSecretId = $.tlsCertificateKeyFilePasswordSecretId;
        this.tlsCertificateKeyFileSecretId = $.tlsCertificateKeyFileSecretId;
        this.triggerRefresh = $.triggerRefresh;
        this.trustStore = $.trustStore;
        this.trustStorePassword = $.trustStorePassword;
        this.trustStorePasswordSecretId = $.trustStorePasswordSecretId;
        this.trustStoreSecretId = $.trustStoreSecretId;
        this.url = $.url;
        this.userId = $.userId;
        this.username = $.username;
        this.vaultId = $.vaultId;
        this.wallet = $.wallet;
        this.walletSecretId = $.walletSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param accountKey (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ== Deprecated: This field is deprecated and replaced by &#34;accountKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        /**
         * @param accountKey (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ== Deprecated: This field is deprecated and replaced by &#34;accountKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        /**
         * @param accountKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, &#39;accountKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder accountKeySecretId(@Nullable Output<String> accountKeySecretId) {
            $.accountKeySecretId = accountKeySecretId;
            return this;
        }

        /**
         * @param accountKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored. Note: When provided, &#39;accountKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder accountKeySecretId(String accountKeySecretId) {
            return accountKeySecretId(Output.of(accountKeySecretId));
        }

        /**
         * @param accountName (Updatable) Sets the Azure storage account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName (Updatable) Sets the Azure storage account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(@Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes) {
            $.additionalAttributes = additionalAttributes;
            return this;
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(List<ConnectionAdditionalAttributeArgs> additionalAttributes) {
            return additionalAttributes(Output.of(additionalAttributes));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(ConnectionAdditionalAttributeArgs... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }

        /**
         * @param authenticationMode (Updatable) Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMode(@Nullable Output<String> authenticationMode) {
            $.authenticationMode = authenticationMode;
            return this;
        }

        /**
         * @param authenticationMode (Updatable) Authentication mode. It can be provided at creation of Oracle Autonomous Database Serverless connections, when a databaseId is provided. The default value is MTLS.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMode(String authenticationMode) {
            return authenticationMode(Output.of(authenticationMode));
        }

        /**
         * @param authenticationType (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param azureTenantId (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(@Nullable Output<String> azureTenantId) {
            $.azureTenantId = azureTenantId;
            return this;
        }

        /**
         * @param azureTenantId (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(String azureTenantId) {
            return azureTenantId(Output.of(azureTenantId));
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(@Nullable Output<List<ConnectionBootstrapServerArgs>> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(List<ConnectionBootstrapServerArgs> bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(ConnectionBootstrapServerArgs... bootstrapServers) {
            return bootstrapServers(List.of(bootstrapServers));
        }

        /**
         * @param clientId (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1 Deprecated: This field is deprecated and replaced by &#34;clientSecretSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1 Deprecated: This field is deprecated and replaced by &#34;clientSecretSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param clientSecretSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Only applicable for authenticationType == OAUTH_M2M. Note: When provided, &#39;clientSecret&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSecretId(@Nullable Output<String> clientSecretSecretId) {
            $.clientSecretSecretId = clientSecretSecretId;
            return this;
        }

        /**
         * @param clientSecretSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Only applicable for authenticationType == OAUTH_M2M. Note: When provided, &#39;clientSecret&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSecretId(String clientSecretSecretId) {
            return clientSecretSecretId(Output.of(clientSecretSecretId));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionFactory (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionFactory(@Nullable Output<String> connectionFactory) {
            $.connectionFactory = connectionFactory;
            return this;
        }

        /**
         * @param connectionFactory (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionFactory(String connectionFactory) {
            return connectionFactory(Output.of(connectionFactory));
        }

        /**
         * @param connectionString (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param connectionType (Updatable) The connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType (Updatable) The connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param connectionUrl (Updatable) Connection URL. e.g.: &#39;jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(@Nullable Output<String> connectionUrl) {
            $.connectionUrl = connectionUrl;
            return this;
        }

        /**
         * @param connectionUrl (Updatable) Connection URL. e.g.: &#39;jdbc:databricks://adb-33934.4.azuredatabricks.net:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/3393########44/0##3-7-hlrb&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(String connectionUrl) {
            return connectionUrl(Output.of(connectionUrl));
        }

        /**
         * @param consumerProperties (Updatable) The base64 encoded content of the consumer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder consumerProperties(@Nullable Output<String> consumerProperties) {
            $.consumerProperties = consumerProperties;
            return this;
        }

        /**
         * @param consumerProperties (Updatable) The base64 encoded content of the consumer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder consumerProperties(String consumerProperties) {
            return consumerProperties(Output.of(consumerProperties));
        }

        /**
         * @param coreSiteXml (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
         * 
         * @return builder
         * 
         */
        public Builder coreSiteXml(@Nullable Output<String> coreSiteXml) {
            $.coreSiteXml = coreSiteXml;
            return this;
        }

        /**
         * @param coreSiteXml (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
         * 
         * @return builder
         * 
         */
        public Builder coreSiteXml(String coreSiteXml) {
            return coreSiteXml(Output.of(coreSiteXml));
        }

        /**
         * @param databaseId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param databaseName (Updatable) The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName (Updatable) The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param dbSystemId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param definedTags (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param deploymentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param description (Updatable) Metadata about this specific object.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Metadata about this specific object.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) An object&#39;s Display Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) An object&#39;s Display Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param doesUseSecretIds (Updatable) Indicates that sensitive attributes are provided via Secrets.
         * 
         * @return builder
         * 
         */
        public Builder doesUseSecretIds(@Nullable Output<Boolean> doesUseSecretIds) {
            $.doesUseSecretIds = doesUseSecretIds;
            return this;
        }

        /**
         * @param doesUseSecretIds (Updatable) Indicates that sensitive attributes are provided via Secrets.
         * 
         * @return builder
         * 
         */
        public Builder doesUseSecretIds(Boolean doesUseSecretIds) {
            return doesUseSecretIds(Output.of(doesUseSecretIds));
        }

        /**
         * @param endpoint (Updatable)Azure Storage service endpoint. e.g: https://test.blob.core.windows.net,  Optional Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint (Updatable)Azure Storage service endpoint. e.g: https://test.blob.core.windows.net,  Optional Microsoft Fabric service endpoint. Default value: https://onelake.dfs.fabric.microsoft.com
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param fingerprint (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param host (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
         * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
         * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder isLockOverride(@Nullable Output<Boolean> isLockOverride) {
            $.isLockOverride = isLockOverride;
            return this;
        }

        public Builder isLockOverride(Boolean isLockOverride) {
            return isLockOverride(Output.of(isLockOverride));
        }

        /**
         * @param jndiConnectionFactory (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiConnectionFactory(@Nullable Output<String> jndiConnectionFactory) {
            $.jndiConnectionFactory = jndiConnectionFactory;
            return this;
        }

        /**
         * @param jndiConnectionFactory (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiConnectionFactory(String jndiConnectionFactory) {
            return jndiConnectionFactory(Output.of(jndiConnectionFactory));
        }

        /**
         * @param jndiInitialContextFactory (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiInitialContextFactory(@Nullable Output<String> jndiInitialContextFactory) {
            $.jndiInitialContextFactory = jndiInitialContextFactory;
            return this;
        }

        /**
         * @param jndiInitialContextFactory (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiInitialContextFactory(String jndiInitialContextFactory) {
            return jndiInitialContextFactory(Output.of(jndiInitialContextFactory));
        }

        /**
         * @param jndiProviderUrl (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiProviderUrl(@Nullable Output<String> jndiProviderUrl) {
            $.jndiProviderUrl = jndiProviderUrl;
            return this;
        }

        /**
         * @param jndiProviderUrl (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiProviderUrl(String jndiProviderUrl) {
            return jndiProviderUrl(Output.of(jndiProviderUrl));
        }

        /**
         * @param jndiSecurityCredentials (Updatable) The password associated to the principal. Deprecated: This field is deprecated and replaced by &#34;jndiSecurityCredentialsSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentials(@Nullable Output<String> jndiSecurityCredentials) {
            $.jndiSecurityCredentials = jndiSecurityCredentials;
            return this;
        }

        /**
         * @param jndiSecurityCredentials (Updatable) The password associated to the principal. Deprecated: This field is deprecated and replaced by &#34;jndiSecurityCredentialsSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentials(String jndiSecurityCredentials) {
            return jndiSecurityCredentials(Output.of(jndiSecurityCredentials));
        }

        /**
         * @param jndiSecurityCredentialsSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, &#39;jndiSecurityCredentials&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentialsSecretId(@Nullable Output<String> jndiSecurityCredentialsSecretId) {
            $.jndiSecurityCredentialsSecretId = jndiSecurityCredentialsSecretId;
            return this;
        }

        /**
         * @param jndiSecurityCredentialsSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal. Note: When provided, &#39;jndiSecurityCredentials&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentialsSecretId(String jndiSecurityCredentialsSecretId) {
            return jndiSecurityCredentialsSecretId(Output.of(jndiSecurityCredentialsSecretId));
        }

        /**
         * @param jndiSecurityPrincipal (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityPrincipal(@Nullable Output<String> jndiSecurityPrincipal) {
            $.jndiSecurityPrincipal = jndiSecurityPrincipal;
            return this;
        }

        /**
         * @param jndiSecurityPrincipal (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityPrincipal(String jndiSecurityPrincipal) {
            return jndiSecurityPrincipal(Output.of(jndiSecurityPrincipal));
        }

        /**
         * @param keyId (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyStore (Updatable) The base64 encoded content of the KeyStore file. Deprecated: This field is deprecated and replaced by &#34;keyStoreSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder keyStore(@Nullable Output<String> keyStore) {
            $.keyStore = keyStore;
            return this;
        }

        /**
         * @param keyStore (Updatable) The base64 encoded content of the KeyStore file. Deprecated: This field is deprecated and replaced by &#34;keyStoreSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder keyStore(String keyStore) {
            return keyStore(Output.of(keyStore));
        }

        /**
         * @param keyStorePassword (Updatable) The KeyStore password. Deprecated: This field is deprecated and replaced by &#34;keyStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(@Nullable Output<String> keyStorePassword) {
            $.keyStorePassword = keyStorePassword;
            return this;
        }

        /**
         * @param keyStorePassword (Updatable) The KeyStore password. Deprecated: This field is deprecated and replaced by &#34;keyStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(String keyStorePassword) {
            return keyStorePassword(Output.of(keyStorePassword));
        }

        /**
         * @param keyStorePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, &#39;keyStorePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePasswordSecretId(@Nullable Output<String> keyStorePasswordSecretId) {
            $.keyStorePasswordSecretId = keyStorePasswordSecretId;
            return this;
        }

        /**
         * @param keyStorePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored. Note: When provided, &#39;keyStorePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePasswordSecretId(String keyStorePasswordSecretId) {
            return keyStorePasswordSecretId(Output.of(keyStorePasswordSecretId));
        }

        /**
         * @param keyStoreSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, &#39;keyStore&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder keyStoreSecretId(@Nullable Output<String> keyStoreSecretId) {
            $.keyStoreSecretId = keyStoreSecretId;
            return this;
        }

        /**
         * @param keyStoreSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored. Note: When provided, &#39;keyStore&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder keyStoreSecretId(String keyStoreSecretId) {
            return keyStoreSecretId(Output.of(keyStoreSecretId));
        }

        /**
         * @param locks Locks associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder locks(@Nullable Output<List<ConnectionLockArgs>> locks) {
            $.locks = locks;
            return this;
        }

        /**
         * @param locks Locks associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder locks(List<ConnectionLockArgs> locks) {
            return locks(Output.of(locks));
        }

        /**
         * @param locks Locks associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder locks(ConnectionLockArgs... locks) {
            return locks(List.of(locks));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param password (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Deprecated: This field is deprecated and replaced by &#34;passwordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. Deprecated: This field is deprecated and replaced by &#34;passwordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. If secretId is used plaintext field must not be provided. Note: When provided, &#39;password&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(@Nullable Output<String> passwordSecretId) {
            $.passwordSecretId = passwordSecretId;
            return this;
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored. The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on. If secretId is used plaintext field must not be provided. Note: When provided, &#39;password&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(String passwordSecretId) {
            return passwordSecretId(Output.of(passwordSecretId));
        }

        /**
         * @param port (Updatable) The port of an endpoint usually specified for a connection.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The port of an endpoint usually specified for a connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateIp (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
         * 
         * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
         * 
         * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privateKeyFile (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Deprecated: This field is deprecated and replaced by &#34;privateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFile(@Nullable Output<String> privateKeyFile) {
            $.privateKeyFile = privateKeyFile;
            return this;
        }

        /**
         * @param privateKeyFile (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Deprecated: This field is deprecated and replaced by &#34;privateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFile(String privateKeyFile) {
            return privateKeyFile(Output.of(privateKeyFile));
        }

        /**
         * @param privateKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, &#39;privateKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFileSecretId(@Nullable Output<String> privateKeyFileSecretId) {
            $.privateKeyFileSecretId = privateKeyFileSecretId;
            return this;
        }

        /**
         * @param privateKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm Note: When provided, &#39;privateKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFileSecretId(String privateKeyFileSecretId) {
            return privateKeyFileSecretId(Output.of(privateKeyFileSecretId));
        }

        /**
         * @param privateKeyPassphrase (Updatable) Password if the private key file is encrypted. Deprecated: This field is deprecated and replaced by &#34;privateKeyPassphraseSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(@Nullable Output<String> privateKeyPassphrase) {
            $.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }

        /**
         * @param privateKeyPassphrase (Updatable) Password if the private key file is encrypted. Deprecated: This field is deprecated and replaced by &#34;privateKeyPassphraseSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(String privateKeyPassphrase) {
            return privateKeyPassphrase(Output.of(privateKeyPassphrase));
        }

        /**
         * @param privateKeyPassphraseSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, &#39;privateKeyPassphrase&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphraseSecretId(@Nullable Output<String> privateKeyPassphraseSecretId) {
            $.privateKeyPassphraseSecretId = privateKeyPassphraseSecretId;
            return this;
        }

        /**
         * @param privateKeyPassphraseSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file. Note: When provided, &#39;privateKeyPassphrase&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphraseSecretId(String privateKeyPassphraseSecretId) {
            return privateKeyPassphraseSecretId(Output.of(privateKeyPassphraseSecretId));
        }

        /**
         * @param producerProperties (Updatable) The base64 encoded content of the producer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder producerProperties(@Nullable Output<String> producerProperties) {
            $.producerProperties = producerProperties;
            return this;
        }

        /**
         * @param producerProperties (Updatable) The base64 encoded content of the producer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder producerProperties(String producerProperties) {
            return producerProperties(Output.of(producerProperties));
        }

        /**
         * @param publicKeyFingerprint (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder publicKeyFingerprint(@Nullable Output<String> publicKeyFingerprint) {
            $.publicKeyFingerprint = publicKeyFingerprint;
            return this;
        }

        /**
         * @param publicKeyFingerprint (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder publicKeyFingerprint(String publicKeyFingerprint) {
            return publicKeyFingerprint(Output.of(publicKeyFingerprint));
        }

        /**
         * @param redisClusterId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
         * 
         * @return builder
         * 
         */
        public Builder redisClusterId(@Nullable Output<String> redisClusterId) {
            $.redisClusterId = redisClusterId;
            return this;
        }

        /**
         * @param redisClusterId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
         * 
         * @return builder
         * 
         */
        public Builder redisClusterId(String redisClusterId) {
            return redisClusterId(Output.of(redisClusterId));
        }

        /**
         * @param region (Updatable) The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Updatable) The name of the region. e.g.: us-ashburn-1 If the region is not provided, backend will default to the default region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routingMethod (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
         * 
         * @return builder
         * 
         */
        public Builder routingMethod(@Nullable Output<String> routingMethod) {
            $.routingMethod = routingMethod;
            return this;
        }

        /**
         * @param routingMethod (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
         * 
         * @return builder
         * 
         */
        public Builder routingMethod(String routingMethod) {
            return routingMethod(Output.of(routingMethod));
        }

        /**
         * @param sasToken (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D Deprecated: This field is deprecated and replaced by &#34;sasTokenSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sasToken(@Nullable Output<String> sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        /**
         * @param sasToken (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D Deprecated: This field is deprecated and replaced by &#34;sasTokenSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sasToken(String sasToken) {
            return sasToken(Output.of(sasToken));
        }

        /**
         * @param sasTokenSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, &#39;sasToken&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sasTokenSecretId(@Nullable Output<String> sasTokenSecretId) {
            $.sasTokenSecretId = sasTokenSecretId;
            return this;
        }

        /**
         * @param sasTokenSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored. Note: When provided, &#39;sasToken&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sasTokenSecretId(String sasTokenSecretId) {
            return sasTokenSecretId(Output.of(sasTokenSecretId));
        }

        /**
         * @param secretAccessKey (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34; Deprecated: This field is deprecated and replaced by &#34;secretAccessKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34; Deprecated: This field is deprecated and replaced by &#34;secretAccessKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param secretAccessKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, &#39;secretAccessKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKeySecretId(@Nullable Output<String> secretAccessKeySecretId) {
            $.secretAccessKeySecretId = secretAccessKeySecretId;
            return this;
        }

        /**
         * @param secretAccessKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the secret access key is stored. Note: When provided, &#39;secretAccessKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKeySecretId(String secretAccessKeySecretId) {
            return secretAccessKeySecretId(Output.of(secretAccessKeySecretId));
        }

        /**
         * @param securityProtocol (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(@Nullable Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        /**
         * @param securityProtocol (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        /**
         * @param servers (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<String> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder servers(String servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param serviceAccountKeyFile (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage. Deprecated: This field is deprecated and replaced by &#34;serviceAccountKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFile(@Nullable Output<String> serviceAccountKeyFile) {
            $.serviceAccountKeyFile = serviceAccountKeyFile;
            return this;
        }

        /**
         * @param serviceAccountKeyFile (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage. Deprecated: This field is deprecated and replaced by &#34;serviceAccountKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFile(String serviceAccountKeyFile) {
            return serviceAccountKeyFile(Output.of(serviceAccountKeyFile));
        }

        /**
         * @param serviceAccountKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, &#39;serviceAccountKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFileSecretId(@Nullable Output<String> serviceAccountKeyFileSecretId) {
            $.serviceAccountKeyFileSecretId = serviceAccountKeyFileSecretId;
            return this;
        }

        /**
         * @param serviceAccountKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which containing the credentials required to use Google Cloud Storage. Note: When provided, &#39;serviceAccountKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFileSecretId(String serviceAccountKeyFileSecretId) {
            return serviceAccountKeyFileSecretId(Output.of(serviceAccountKeyFileSecretId));
        }

        /**
         * @param sessionMode (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(@Nullable Output<String> sessionMode) {
            $.sessionMode = sessionMode;
            return this;
        }

        /**
         * @param sessionMode (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(String sessionMode) {
            return sessionMode(Output.of(sessionMode));
        }

        /**
         * @param shouldUseJndi (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseJndi(@Nullable Output<Boolean> shouldUseJndi) {
            $.shouldUseJndi = shouldUseJndi;
            return this;
        }

        /**
         * @param shouldUseJndi (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseJndi(Boolean shouldUseJndi) {
            return shouldUseJndi(Output.of(shouldUseJndi));
        }

        /**
         * @param shouldUseResourcePrincipal (Updatable) Indicates that the user intents to connect to the instance through resource principal.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseResourcePrincipal(@Nullable Output<Boolean> shouldUseResourcePrincipal) {
            $.shouldUseResourcePrincipal = shouldUseResourcePrincipal;
            return this;
        }

        /**
         * @param shouldUseResourcePrincipal (Updatable) Indicates that the user intents to connect to the instance through resource principal.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseResourcePrincipal(Boolean shouldUseResourcePrincipal) {
            return shouldUseResourcePrincipal(Output.of(shouldUseResourcePrincipal));
        }

        /**
         * @param shouldValidateServerCertificate (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
         * 
         * @return builder
         * 
         */
        public Builder shouldValidateServerCertificate(@Nullable Output<Boolean> shouldValidateServerCertificate) {
            $.shouldValidateServerCertificate = shouldValidateServerCertificate;
            return this;
        }

        /**
         * @param shouldValidateServerCertificate (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
         * 
         * @return builder
         * 
         */
        public Builder shouldValidateServerCertificate(Boolean shouldValidateServerCertificate) {
            return shouldValidateServerCertificate(Output.of(shouldValidateServerCertificate));
        }

        /**
         * @param sslCa (Updatable) The base64 encoded certificate of the trusted certificate authorities (Trusted CA) for PostgreSQL.  The supported file formats are .pem and .crt.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa (Updatable) The base64 encoded certificate of the trusted certificate authorities (Trusted CA) for PostgreSQL.  The supported file formats are .pem and .crt.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of a .pem or .crt file. containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(@Nullable Output<String> sslCert) {
            $.sslCert = sslCert;
            return this;
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of a .pem or .crt file. containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(String sslCert) {
            return sslCert(Output.of(sslCert));
        }

        /**
         * @param sslClientKeystash (Updatable) The base64 encoded keystash file which contains the encrypted password to the key database file. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystashSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystash(@Nullable Output<String> sslClientKeystash) {
            $.sslClientKeystash = sslClientKeystash;
            return this;
        }

        /**
         * @param sslClientKeystash (Updatable) The base64 encoded keystash file which contains the encrypted password to the key database file. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystashSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystash(String sslClientKeystash) {
            return sslClientKeystash(Output.of(sslClientKeystash));
        }

        /**
         * @param sslClientKeystashSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, &#39;sslClientKeystash&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystashSecretId(@Nullable Output<String> sslClientKeystashSecretId) {
            $.sslClientKeystashSecretId = sslClientKeystashSecretId;
            return this;
        }

        /**
         * @param sslClientKeystashSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,  which contains the encrypted password to the key database file. Note: When provided, &#39;sslClientKeystash&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystashSecretId(String sslClientKeystashSecretId) {
            return sslClientKeystashSecretId(Output.of(sslClientKeystashSecretId));
        }

        /**
         * @param sslClientKeystoredb (Updatable) The base64 encoded keystore file created at the client containing the server certificate / CA root certificate. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystoredbSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystoredb(@Nullable Output<String> sslClientKeystoredb) {
            $.sslClientKeystoredb = sslClientKeystoredb;
            return this;
        }

        /**
         * @param sslClientKeystoredb (Updatable) The base64 encoded keystore file created at the client containing the server certificate / CA root certificate. Deprecated: This field is deprecated and replaced by &#34;sslClientKeystoredbSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystoredb(String sslClientKeystoredb) {
            return sslClientKeystoredb(Output.of(sslClientKeystoredb));
        }

        /**
         * @param sslClientKeystoredbSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, &#39;sslClientKeystoredb&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystoredbSecretId(@Nullable Output<String> sslClientKeystoredbSecretId) {
            $.sslClientKeystoredbSecretId = sslClientKeystoredbSecretId;
            return this;
        }

        /**
         * @param sslClientKeystoredbSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,  which created at the client containing the server certificate / CA root certificate. Note: When provided, &#39;sslClientKeystoredb&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslClientKeystoredbSecretId(String sslClientKeystoredbSecretId) {
            return sslClientKeystoredbSecretId(Output.of(sslClientKeystoredbSecretId));
        }

        /**
         * @param sslCrl (Updatable) The base64 encoded list of certificates revoked by the trusted certificate authorities (Trusted CA). Note: This is an optional property and only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(@Nullable Output<String> sslCrl) {
            $.sslCrl = sslCrl;
            return this;
        }

        /**
         * @param sslCrl (Updatable) The base64 encoded list of certificates revoked by the trusted certificate authorities (Trusted CA). Note: This is an optional property and only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(String sslCrl) {
            return sslCrl(Output.of(sslCrl));
        }

        /**
         * @param sslKey (Updatable) Client Key - The base64 encoded content of a .pem or .crt file containing the client private key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;sslKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslKey(@Nullable Output<String> sslKey) {
            $.sslKey = sslKey;
            return this;
        }

        /**
         * @param sslKey (Updatable) Client Key - The base64 encoded content of a .pem or .crt file containing the client private key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;sslKeySecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslKey(String sslKey) {
            return sslKey(Output.of(sslKey));
        }

        /**
         * @param sslKeyPassword (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided. Deprecated: This field is deprecated and replaced by &#34;sslKeyPasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPassword(@Nullable Output<String> sslKeyPassword) {
            $.sslKeyPassword = sslKeyPassword;
            return this;
        }

        /**
         * @param sslKeyPassword (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided. Deprecated: This field is deprecated and replaced by &#34;sslKeyPasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPassword(String sslKeyPassword) {
            return sslKeyPassword(Output.of(sslKeyPassword));
        }

        /**
         * @param sslKeyPasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, &#39;sslKeyPassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPasswordSecretId(@Nullable Output<String> sslKeyPasswordSecretId) {
            $.sslKeyPasswordSecretId = sslKeyPasswordSecretId;
            return this;
        }

        /**
         * @param sslKeyPasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore. In case it differs from the KeyStore password, it should be provided. Note: When provided, &#39;sslKeyPassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPasswordSecretId(String sslKeyPasswordSecretId) {
            return sslKeyPasswordSecretId(Output.of(sslKeyPasswordSecretId));
        }

        /**
         * @param sslKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
         * * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, &#39;sslKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeySecretId(@Nullable Output<String> sslKeySecretId) {
            $.sslKeySecretId = sslKeySecretId;
            return this;
        }

        /**
         * @param sslKeySecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the Client Key
         * * The content of a .pem or .crt file containing the client private key (for 2-way SSL). Note: When provided, &#39;sslKey&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeySecretId(String sslKeySecretId) {
            return sslKeySecretId(Output.of(sslKeySecretId));
        }

        /**
         * @param sslMode (Updatable) SSL modes for PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode (Updatable) SSL modes for PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param sslServerCertificate (Updatable) The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslServerCertificate(@Nullable Output<String> sslServerCertificate) {
            $.sslServerCertificate = sslServerCertificate;
            return this;
        }

        /**
         * @param sslServerCertificate (Updatable) The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslServerCertificate(String sslServerCertificate) {
            return sslServerCertificate(Output.of(sslServerCertificate));
        }

        /**
         * @param storageCredentialName (Updatable) Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
         * 
         * @return builder
         * 
         */
        public Builder storageCredentialName(@Nullable Output<String> storageCredentialName) {
            $.storageCredentialName = storageCredentialName;
            return this;
        }

        /**
         * @param storageCredentialName (Updatable) Optional. External storage credential name to access files on object storage such as ADLS Gen2, S3 or GCS.
         * 
         * @return builder
         * 
         */
        public Builder storageCredentialName(String storageCredentialName) {
            return storageCredentialName(Output.of(storageCredentialName));
        }

        /**
         * @param streamPoolId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
         * 
         * @return builder
         * 
         */
        public Builder streamPoolId(@Nullable Output<String> streamPoolId) {
            $.streamPoolId = streamPoolId;
            return this;
        }

        /**
         * @param streamPoolId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
         * 
         * @return builder
         * 
         */
        public Builder streamPoolId(String streamPoolId) {
            return streamPoolId(Output.of(streamPoolId));
        }

        /**
         * @param subnetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param technologyType The Kafka (e.g. Confluent) Schema Registry technology type.
         * 
         * @return builder
         * 
         */
        public Builder technologyType(Output<String> technologyType) {
            $.technologyType = technologyType;
            return this;
        }

        /**
         * @param technologyType The Kafka (e.g. Confluent) Schema Registry technology type.
         * 
         * @return builder
         * 
         */
        public Builder technologyType(String technologyType) {
            return technologyType(Output.of(technologyType));
        }

        /**
         * @param tenancyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(@Nullable Output<String> tenancyId) {
            $.tenancyId = tenancyId;
            return this;
        }

        /**
         * @param tenancyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(String tenancyId) {
            return tenancyId(Output.of(tenancyId));
        }

        /**
         * @param tenantId (Updatable) Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId (Updatable) Azure tenant ID of the application. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param tlsCaFile (Updatable) Database Certificate - The base64 encoded content of a .pem file, containing the server public key (for 1 and 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder tlsCaFile(@Nullable Output<String> tlsCaFile) {
            $.tlsCaFile = tlsCaFile;
            return this;
        }

        /**
         * @param tlsCaFile (Updatable) Database Certificate - The base64 encoded content of a .pem file, containing the server public key (for 1 and 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder tlsCaFile(String tlsCaFile) {
            return tlsCaFile(Output.of(tlsCaFile));
        }

        /**
         * @param tlsCertificateKeyFile (Updatable) Client Certificate - The base64 encoded content of a .pem file, containing the client public key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFile(@Nullable Output<String> tlsCertificateKeyFile) {
            $.tlsCertificateKeyFile = tlsCertificateKeyFile;
            return this;
        }

        /**
         * @param tlsCertificateKeyFile (Updatable) Client Certificate - The base64 encoded content of a .pem file, containing the client public key (for 2-way SSL). Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFileSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFile(String tlsCertificateKeyFile) {
            return tlsCertificateKeyFile(Output.of(tlsCertificateKeyFile));
        }

        /**
         * @param tlsCertificateKeyFilePassword (Updatable) Client Certificate key file password. Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFilePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFilePassword(@Nullable Output<String> tlsCertificateKeyFilePassword) {
            $.tlsCertificateKeyFilePassword = tlsCertificateKeyFilePassword;
            return this;
        }

        /**
         * @param tlsCertificateKeyFilePassword (Updatable) Client Certificate key file password. Deprecated: This field is deprecated and replaced by &#34;tlsCertificateKeyFilePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFilePassword(String tlsCertificateKeyFilePassword) {
            return tlsCertificateKeyFilePassword(Output.of(tlsCertificateKeyFilePassword));
        }

        /**
         * @param tlsCertificateKeyFilePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, &#39;tlsCertificateKeyFilePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFilePasswordSecretId(@Nullable Output<String> tlsCertificateKeyFilePasswordSecretId) {
            $.tlsCertificateKeyFilePasswordSecretId = tlsCertificateKeyFilePasswordSecretId;
            return this;
        }

        /**
         * @param tlsCertificateKeyFilePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password of the tls certificate key file. Note: When provided, &#39;tlsCertificateKeyFilePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFilePasswordSecretId(String tlsCertificateKeyFilePasswordSecretId) {
            return tlsCertificateKeyFilePasswordSecretId(Output.of(tlsCertificateKeyFilePasswordSecretId));
        }

        /**
         * @param tlsCertificateKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
         * * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, &#39;tlsCertificateKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFileSecretId(@Nullable Output<String> tlsCertificateKeyFileSecretId) {
            $.tlsCertificateKeyFileSecretId = tlsCertificateKeyFileSecretId;
            return this;
        }

        /**
         * @param tlsCertificateKeyFileSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the certificate key file of the mtls connection.
         * * The content of a .pem file containing the client private key (for 2-way SSL). Note: When provided, &#39;tlsCertificateKeyFile&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificateKeyFileSecretId(String tlsCertificateKeyFileSecretId) {
            return tlsCertificateKeyFileSecretId(Output.of(tlsCertificateKeyFileSecretId));
        }

        /**
         * @param triggerRefresh (Updatable) If value is true, it triggers connection refresh action and this attribute change will always show up in the &#34;update&#34; plan and will apply steps in order to refresh secrets and dependent service properties (such as ADB connection strings, wallets, etc..).
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder triggerRefresh(@Nullable Output<Boolean> triggerRefresh) {
            $.triggerRefresh = triggerRefresh;
            return this;
        }

        /**
         * @param triggerRefresh (Updatable) If value is true, it triggers connection refresh action and this attribute change will always show up in the &#34;update&#34; plan and will apply steps in order to refresh secrets and dependent service properties (such as ADB connection strings, wallets, etc..).
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder triggerRefresh(Boolean triggerRefresh) {
            return triggerRefresh(Output.of(triggerRefresh));
        }

        /**
         * @param trustStore (Updatable) The base64 encoded content of the TrustStore file. Deprecated: This field is deprecated and replaced by &#34;trustStoreSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder trustStore(@Nullable Output<String> trustStore) {
            $.trustStore = trustStore;
            return this;
        }

        /**
         * @param trustStore (Updatable) The base64 encoded content of the TrustStore file. Deprecated: This field is deprecated and replaced by &#34;trustStoreSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder trustStore(String trustStore) {
            return trustStore(Output.of(trustStore));
        }

        /**
         * @param trustStorePassword (Updatable) The TrustStore password. Deprecated: This field is deprecated and replaced by &#34;trustStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePassword(@Nullable Output<String> trustStorePassword) {
            $.trustStorePassword = trustStorePassword;
            return this;
        }

        /**
         * @param trustStorePassword (Updatable) The TrustStore password. Deprecated: This field is deprecated and replaced by &#34;trustStorePasswordSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePassword(String trustStorePassword) {
            return trustStorePassword(Output.of(trustStorePassword));
        }

        /**
         * @param trustStorePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, &#39;trustStorePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePasswordSecretId(@Nullable Output<String> trustStorePasswordSecretId) {
            $.trustStorePasswordSecretId = trustStorePasswordSecretId;
            return this;
        }

        /**
         * @param trustStorePasswordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored. Note: When provided, &#39;trustStorePassword&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePasswordSecretId(String trustStorePasswordSecretId) {
            return trustStorePasswordSecretId(Output.of(trustStorePasswordSecretId));
        }

        /**
         * @param trustStoreSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, &#39;trustStore&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreSecretId(@Nullable Output<String> trustStoreSecretId) {
            $.trustStoreSecretId = trustStoreSecretId;
            return this;
        }

        /**
         * @param trustStoreSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored. Note: When provided, &#39;trustStore&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreSecretId(String trustStoreSecretId) {
            return trustStoreSecretId(Output.of(trustStoreSecretId));
        }

        /**
         * @param url (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param userId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to. If the user is not provided, backend will default to the user who is calling the API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param username (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vaultId (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        /**
         * @param wallet (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database. This attribute is expected to be base64 encoded. Deprecated: This field is deprecated and replaced by &#34;walletSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder wallet(@Nullable Output<String> wallet) {
            $.wallet = wallet;
            return this;
        }

        /**
         * @param wallet (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database. This attribute is expected to be base64 encoded. Deprecated: This field is deprecated and replaced by &#34;walletSecretId&#34;. This field will be removed after February 15 2026.
         * 
         * @return builder
         * 
         */
        public Builder wallet(String wallet) {
            return wallet(Output.of(wallet));
        }

        /**
         * @param walletSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, &#39;wallet&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder walletSecretId(@Nullable Output<String> walletSecretId) {
            $.walletSecretId = walletSecretId;
            return this;
        }

        /**
         * @param walletSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the wallet file is stored.  The wallet contents Oracle GoldenGate uses to make connections to a database. Note: When provided, &#39;wallet&#39; field must not be provided.
         * 
         * @return builder
         * 
         */
        public Builder walletSecretId(String walletSecretId) {
            return walletSecretId(Output.of(walletSecretId));
        }

        public ConnectionArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "compartmentId");
            }
            if ($.connectionType == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "connectionType");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "displayName");
            }
            if ($.technologyType == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "technologyType");
            }
            return $;
        }
    }

}
