// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DeploymentCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentCertificateArgs Empty = new DeploymentCertificateArgs();

    /**
     * A PEM-encoded SSL certificate.
     * 
     */
    @Import(name="certificateContent", required=true)
    private Output<String> certificateContent;

    /**
     * @return A PEM-encoded SSL certificate.
     * 
     */
    public Output<String> certificateContent() {
        return this.certificateContent;
    }

    /**
     * A unique Deployment identifier.
     * 
     */
    @Import(name="deploymentId", required=true)
    private Output<String> deploymentId;

    /**
     * @return A unique Deployment identifier.
     * 
     */
    public Output<String> deploymentId() {
        return this.deploymentId;
    }

    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    private DeploymentCertificateArgs() {}

    private DeploymentCertificateArgs(DeploymentCertificateArgs $) {
        this.certificateContent = $.certificateContent;
        this.deploymentId = $.deploymentId;
        this.key = $.key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentCertificateArgs $;

        public Builder() {
            $ = new DeploymentCertificateArgs();
        }

        public Builder(DeploymentCertificateArgs defaults) {
            $ = new DeploymentCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateContent A PEM-encoded SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContent(Output<String> certificateContent) {
            $.certificateContent = certificateContent;
            return this;
        }

        /**
         * @param certificateContent A PEM-encoded SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContent(String certificateContent) {
            return certificateContent(Output.of(certificateContent));
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param key The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        public DeploymentCertificateArgs build() {
            $.certificateContent = Objects.requireNonNull($.certificateContent, "expected parameter 'certificateContent' to be non-null");
            $.deploymentId = Objects.requireNonNull($.deploymentId, "expected parameter 'deploymentId' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            return $;
        }
    }

}
