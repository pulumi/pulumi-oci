// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.GoldenGate.inputs.ConnectionAdditionalAttributeArgs;
import com.pulumi.oci.GoldenGate.inputs.ConnectionBootstrapServerArgs;
import com.pulumi.oci.GoldenGate.inputs.ConnectionIngressIpArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
     * 
     */
    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    /**
     * @return (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
     * 
     */
    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * (Updatable) Sets the Azure storage account name.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return (Updatable) Sets the Azure storage account name.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    @Import(name="additionalAttributes")
    private @Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes;

    /**
     * @return (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    public Optional<Output<List<ConnectionAdditionalAttributeArgs>>> additionalAttributes() {
        return Optional.ofNullable(this.additionalAttributes);
    }

    /**
     * (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    @Import(name="azureTenantId")
    private @Nullable Output<String> azureTenantId;

    /**
     * @return (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    public Optional<Output<String>> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }

    /**
     * (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    @Import(name="bootstrapServers")
    private @Nullable Output<List<ConnectionBootstrapServerArgs>> bootstrapServers;

    /**
     * @return (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    public Optional<Output<List<ConnectionBootstrapServerArgs>>> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }

    /**
     * (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    @Import(name="connectionFactory")
    private @Nullable Output<String> connectionFactory;

    /**
     * @return (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    public Optional<Output<String>> connectionFactory() {
        return Optional.ofNullable(this.connectionFactory);
    }

    /**
     * (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * (Updatable) The connection type.
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return (Updatable) The connection type.
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * (Updatable) JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
     * 
     */
    @Import(name="connectionUrl")
    private @Nullable Output<String> connectionUrl;

    /**
     * @return (Updatable) JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
     * 
     */
    public Optional<Output<String>> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }

    /**
     * (Updatable) The base64 encoded content of the consumer.properties file.
     * 
     */
    @Import(name="consumerProperties")
    private @Nullable Output<String> consumerProperties;

    /**
     * @return (Updatable) The base64 encoded content of the consumer.properties file.
     * 
     */
    public Optional<Output<String>> consumerProperties() {
        return Optional.ofNullable(this.consumerProperties);
    }

    /**
     * (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
     * 
     */
    @Import(name="coreSiteXml")
    private @Nullable Output<String> coreSiteXml;

    /**
     * @return (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
     * 
     */
    public Optional<Output<String>> coreSiteXml() {
        return Optional.ofNullable(this.coreSiteXml);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * (Updatable) The name of the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return (Updatable) The name of the database.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * (Updatable) Metadata about this specific object.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Metadata about this specific object.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) An object&#39;s Display Name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) An object&#39;s Display Name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
     * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
     * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
     * 
     */
    @Import(name="ingressIps")
    private @Nullable Output<List<ConnectionIngressIpArgs>> ingressIps;

    /**
     * @return List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
     * 
     */
    public Optional<Output<List<ConnectionIngressIpArgs>>> ingressIps() {
        return Optional.ofNullable(this.ingressIps);
    }

    /**
     * (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    @Import(name="jndiConnectionFactory")
    private @Nullable Output<String> jndiConnectionFactory;

    /**
     * @return (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    public Optional<Output<String>> jndiConnectionFactory() {
        return Optional.ofNullable(this.jndiConnectionFactory);
    }

    /**
     * (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    @Import(name="jndiInitialContextFactory")
    private @Nullable Output<String> jndiInitialContextFactory;

    /**
     * @return (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    public Optional<Output<String>> jndiInitialContextFactory() {
        return Optional.ofNullable(this.jndiInitialContextFactory);
    }

    /**
     * (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    @Import(name="jndiProviderUrl")
    private @Nullable Output<String> jndiProviderUrl;

    /**
     * @return (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    public Optional<Output<String>> jndiProviderUrl() {
        return Optional.ofNullable(this.jndiProviderUrl);
    }

    /**
     * (Updatable) The password associated to the principal.
     * 
     */
    @Import(name="jndiSecurityCredentials")
    private @Nullable Output<String> jndiSecurityCredentials;

    /**
     * @return (Updatable) The password associated to the principal.
     * 
     */
    public Optional<Output<String>> jndiSecurityCredentials() {
        return Optional.ofNullable(this.jndiSecurityCredentials);
    }

    /**
     * (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    @Import(name="jndiSecurityPrincipal")
    private @Nullable Output<String> jndiSecurityPrincipal;

    /**
     * @return (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    public Optional<Output<String>> jndiSecurityPrincipal() {
        return Optional.ofNullable(this.jndiSecurityPrincipal);
    }

    /**
     * (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * (Updatable) The base64 encoded content of the KeyStore file.
     * 
     */
    @Import(name="keyStore")
    private @Nullable Output<String> keyStore;

    /**
     * @return (Updatable) The base64 encoded content of the KeyStore file.
     * 
     */
    public Optional<Output<String>> keyStore() {
        return Optional.ofNullable(this.keyStore);
    }

    /**
     * (Updatable) The KeyStore password.
     * 
     */
    @Import(name="keyStorePassword")
    private @Nullable Output<String> keyStorePassword;

    /**
     * @return (Updatable) The KeyStore password.
     * 
     */
    public Optional<Output<String>> keyStorePassword() {
        return Optional.ofNullable(this.keyStorePassword);
    }

    /**
     * Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * (Updatable) The port of an endpoint usually specified for a connection.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The port of an endpoint usually specified for a connection.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
     * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
     * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    @Import(name="privateKeyFile")
    private @Nullable Output<String> privateKeyFile;

    /**
     * @return (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    public Optional<Output<String>> privateKeyFile() {
        return Optional.ofNullable(this.privateKeyFile);
    }

    /**
     * (Updatable) Password if the private key file is encrypted.
     * 
     */
    @Import(name="privateKeyPassphrase")
    private @Nullable Output<String> privateKeyPassphrase;

    /**
     * @return (Updatable) Password if the private key file is encrypted.
     * 
     */
    public Optional<Output<String>> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }

    /**
     * (Updatable) The base64 encoded content of the producer.properties file.
     * 
     */
    @Import(name="producerProperties")
    private @Nullable Output<String> producerProperties;

    /**
     * @return (Updatable) The base64 encoded content of the producer.properties file.
     * 
     */
    public Optional<Output<String>> producerProperties() {
        return Optional.ofNullable(this.producerProperties);
    }

    /**
     * (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    @Import(name="publicKeyFingerprint")
    private @Nullable Output<String> publicKeyFingerprint;

    /**
     * @return (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    public Optional<Output<String>> publicKeyFingerprint() {
        return Optional.ofNullable(this.publicKeyFingerprint);
    }

    /**
     * (Updatable) The name of the region. e.g.: us-ashburn-1
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Updatable) The name of the region. e.g.: us-ashburn-1
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
     * 
     */
    @Import(name="routingMethod")
    private @Nullable Output<String> routingMethod;

    /**
     * @return (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
     * 
     */
    public Optional<Output<String>> routingMethod() {
        return Optional.ofNullable(this.routingMethod);
    }

    /**
     * (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
     * 
     */
    @Import(name="sasToken")
    private @Nullable Output<String> sasToken;

    /**
     * @return (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
     * 
     */
    public Optional<Output<String>> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    /**
     * (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    @Import(name="securityProtocol")
    private @Nullable Output<String> securityProtocol;

    /**
     * @return (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
     * 
     */
    public Optional<Output<String>> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }

    /**
     * (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
     * 
     */
    @Import(name="servers")
    private @Nullable Output<String> servers;

    /**
     * @return (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
     * 
     */
    public Optional<Output<String>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage.
     * 
     */
    @Import(name="serviceAccountKeyFile")
    private @Nullable Output<String> serviceAccountKeyFile;

    /**
     * @return (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage.
     * 
     */
    public Optional<Output<String>> serviceAccountKeyFile() {
        return Optional.ofNullable(this.serviceAccountKeyFile);
    }

    /**
     * (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    @Import(name="sessionMode")
    private @Nullable Output<String> sessionMode;

    /**
     * @return (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    public Optional<Output<String>> sessionMode() {
        return Optional.ofNullable(this.sessionMode);
    }

    /**
     * (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    @Import(name="shouldUseJndi")
    private @Nullable Output<Boolean> shouldUseJndi;

    /**
     * @return (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    public Optional<Output<Boolean>> shouldUseJndi() {
        return Optional.ofNullable(this.shouldUseJndi);
    }

    /**
     * (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    @Import(name="shouldValidateServerCertificate")
    private @Nullable Output<Boolean> shouldValidateServerCertificate;

    /**
     * @return (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    public Optional<Output<Boolean>> shouldValidateServerCertificate() {
        return Optional.ofNullable(this.shouldValidateServerCertificate);
    }

    /**
     * (Updatable) Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return (Updatable) Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     * 
     */
    @Import(name="sslCert")
    private @Nullable Output<String> sslCert;

    /**
     * @return (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }

    /**
     * (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     * 
     */
    @Import(name="sslCrl")
    private @Nullable Output<String> sslCrl;

    /**
     * @return (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     * 
     */
    public Optional<Output<String>> sslCrl() {
        return Optional.ofNullable(this.sslCrl);
    }

    /**
     * (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     * 
     */
    @Import(name="sslKey")
    private @Nullable Output<String> sslKey;

    /**
     * @return (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }

    /**
     * (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
     * 
     */
    @Import(name="sslKeyPassword")
    private @Nullable Output<String> sslKeyPassword;

    /**
     * @return (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
     * 
     */
    public Optional<Output<String>> sslKeyPassword() {
        return Optional.ofNullable(this.sslKeyPassword);
    }

    /**
     * (Updatable) SSL modes for PostgreSQL.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return (Updatable) SSL modes for PostgreSQL.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * Possible lifecycle states for connection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Possible lifecycle states for connection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    @Import(name="streamPoolId")
    private @Nullable Output<String> streamPoolId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    public Optional<Output<String>> streamPoolId() {
        return Optional.ofNullable(this.streamPoolId);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The Kafka (e.g. Confluent) Schema Registry technology type.
     * 
     */
    @Import(name="technologyType")
    private @Nullable Output<String> technologyType;

    /**
     * @return The Kafka (e.g. Confluent) Schema Registry technology type.
     * 
     */
    public Optional<Output<String>> technologyType() {
        return Optional.ofNullable(this.technologyType);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    @Import(name="tenancyId")
    private @Nullable Output<String> tenancyId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    public Optional<Output<String>> tenancyId() {
        return Optional.ofNullable(this.tenancyId);
    }

    /**
     * The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * (Updatable) The base64 encoded content of the TrustStore file.
     * 
     */
    @Import(name="trustStore")
    private @Nullable Output<String> trustStore;

    /**
     * @return (Updatable) The base64 encoded content of the TrustStore file.
     * 
     */
    public Optional<Output<String>> trustStore() {
        return Optional.ofNullable(this.trustStore);
    }

    /**
     * (Updatable) The TrustStore password.
     * 
     */
    @Import(name="trustStorePassword")
    private @Nullable Output<String> trustStorePassword;

    /**
     * @return (Updatable) The TrustStore password.
     * 
     */
    public Optional<Output<String>> trustStorePassword() {
        return Optional.ofNullable(this.trustStorePassword);
    }

    /**
     * (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    /**
     * (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="wallet")
    private @Nullable Output<String> wallet;

    /**
     * @return (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> wallet() {
        return Optional.ofNullable(this.wallet);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.accessKeyId = $.accessKeyId;
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.additionalAttributes = $.additionalAttributes;
        this.authenticationType = $.authenticationType;
        this.azureTenantId = $.azureTenantId;
        this.bootstrapServers = $.bootstrapServers;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.compartmentId = $.compartmentId;
        this.connectionFactory = $.connectionFactory;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.connectionUrl = $.connectionUrl;
        this.consumerProperties = $.consumerProperties;
        this.coreSiteXml = $.coreSiteXml;
        this.databaseId = $.databaseId;
        this.databaseName = $.databaseName;
        this.dbSystemId = $.dbSystemId;
        this.definedTags = $.definedTags;
        this.deploymentId = $.deploymentId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.endpoint = $.endpoint;
        this.fingerprint = $.fingerprint;
        this.freeformTags = $.freeformTags;
        this.host = $.host;
        this.ingressIps = $.ingressIps;
        this.jndiConnectionFactory = $.jndiConnectionFactory;
        this.jndiInitialContextFactory = $.jndiInitialContextFactory;
        this.jndiProviderUrl = $.jndiProviderUrl;
        this.jndiSecurityCredentials = $.jndiSecurityCredentials;
        this.jndiSecurityPrincipal = $.jndiSecurityPrincipal;
        this.keyId = $.keyId;
        this.keyStore = $.keyStore;
        this.keyStorePassword = $.keyStorePassword;
        this.lifecycleDetails = $.lifecycleDetails;
        this.nsgIds = $.nsgIds;
        this.password = $.password;
        this.port = $.port;
        this.privateIp = $.privateIp;
        this.privateKeyFile = $.privateKeyFile;
        this.privateKeyPassphrase = $.privateKeyPassphrase;
        this.producerProperties = $.producerProperties;
        this.publicKeyFingerprint = $.publicKeyFingerprint;
        this.region = $.region;
        this.routingMethod = $.routingMethod;
        this.sasToken = $.sasToken;
        this.secretAccessKey = $.secretAccessKey;
        this.securityProtocol = $.securityProtocol;
        this.servers = $.servers;
        this.serviceAccountKeyFile = $.serviceAccountKeyFile;
        this.sessionMode = $.sessionMode;
        this.shouldUseJndi = $.shouldUseJndi;
        this.shouldValidateServerCertificate = $.shouldValidateServerCertificate;
        this.sslCa = $.sslCa;
        this.sslCert = $.sslCert;
        this.sslCrl = $.sslCrl;
        this.sslKey = $.sslKey;
        this.sslKeyPassword = $.sslKeyPassword;
        this.sslMode = $.sslMode;
        this.state = $.state;
        this.streamPoolId = $.streamPoolId;
        this.subnetId = $.subnetId;
        this.systemTags = $.systemTags;
        this.technologyType = $.technologyType;
        this.tenancyId = $.tenancyId;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.trustStore = $.trustStore;
        this.trustStorePassword = $.trustStorePassword;
        this.url = $.url;
        this.userId = $.userId;
        this.username = $.username;
        this.vaultId = $.vaultId;
        this.wallet = $.wallet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId (Updatable) Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param accountKey (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
         * 
         * @return builder
         * 
         */
        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        /**
         * @param accountKey (Updatable) Azure storage account key. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_KEY&#39;. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
         * 
         * @return builder
         * 
         */
        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        /**
         * @param accountName (Updatable) Sets the Azure storage account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName (Updatable) Sets the Azure storage account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(@Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes) {
            $.additionalAttributes = additionalAttributes;
            return this;
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(List<ConnectionAdditionalAttributeArgs> additionalAttributes) {
            return additionalAttributes(Output.of(additionalAttributes));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(ConnectionAdditionalAttributeArgs... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }

        /**
         * @param authenticationType (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType (Updatable) Authentication type for Java Message Service.  If not provided, default is NONE. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param azureTenantId (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(@Nullable Output<String> azureTenantId) {
            $.azureTenantId = azureTenantId;
            return this;
        }

        /**
         * @param azureTenantId (Updatable) Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(String azureTenantId) {
            return azureTenantId(Output.of(azureTenantId));
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(@Nullable Output<List<ConnectionBootstrapServerArgs>> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(List<ConnectionBootstrapServerArgs> bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        /**
         * @param bootstrapServers (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(ConnectionBootstrapServerArgs... bootstrapServers) {
            return bootstrapServers(List.of(bootstrapServers));
        }

        /**
         * @param clientId (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Updatable) Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret (Updatable) Azure client secret (aka application password) for authentication. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionFactory (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionFactory(@Nullable Output<String> connectionFactory) {
            $.connectionFactory = connectionFactory;
            return this;
        }

        /**
         * @param connectionFactory (Updatable) The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionFactory(String connectionFactory) {
            return connectionFactory(Output.of(connectionFactory));
        }

        /**
         * @param connectionString (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString (Updatable) Connection string. AZURE_SYNAPSE_ANALYTICS e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;, MONGODB e.g.: &#39;mongodb://mongodb0.example.com:27017/recordsrecords&#39;.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param connectionType (Updatable) The connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType (Updatable) The connection type.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param connectionUrl (Updatable) JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(@Nullable Output<String> connectionUrl) {
            $.connectionUrl = connectionUrl;
            return this;
        }

        /**
         * @param connectionUrl (Updatable) JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(String connectionUrl) {
            return connectionUrl(Output.of(connectionUrl));
        }

        /**
         * @param consumerProperties (Updatable) The base64 encoded content of the consumer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder consumerProperties(@Nullable Output<String> consumerProperties) {
            $.consumerProperties = consumerProperties;
            return this;
        }

        /**
         * @param consumerProperties (Updatable) The base64 encoded content of the consumer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder consumerProperties(String consumerProperties) {
            return consumerProperties(Output.of(consumerProperties));
        }

        /**
         * @param coreSiteXml (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
         * 
         * @return builder
         * 
         */
        public Builder coreSiteXml(@Nullable Output<String> coreSiteXml) {
            $.coreSiteXml = coreSiteXml;
            return this;
        }

        /**
         * @param coreSiteXml (Updatable) The base64 encoded content of the Hadoop Distributed File System configuration file (core-site.xml).
         * 
         * @return builder
         * 
         */
        public Builder coreSiteXml(String coreSiteXml) {
            return coreSiteXml(Output.of(coreSiteXml));
        }

        /**
         * @param databaseId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param databaseName (Updatable) The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName (Updatable) The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param dbSystemId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param definedTags (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param deploymentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param description (Updatable) Metadata about this specific object.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Metadata about this specific object.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) An object&#39;s Display Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) An object&#39;s Display Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoint (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param fingerprint (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint (Updatable) Fingerprint required by TLS security protocol. Eg.: &#39;6152b2dfbff200f973c5074a5b91d06ab3b472c07c09a1ea57bb7fd406cdce9c&#39;
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param host (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
         * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) The name or address of a host. In case of Generic connection type host and port separated by colon. Example: `&#34;server.example.com:1234&#34;`
         * For multiple hosts, provide a comma separated list. Example: `&#34;server1.example.com:1000,server1.example.com:2000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param ingressIps List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(@Nullable Output<List<ConnectionIngressIpArgs>> ingressIps) {
            $.ingressIps = ingressIps;
            return this;
        }

        /**
         * @param ingressIps List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(List<ConnectionIngressIpArgs> ingressIps) {
            return ingressIps(Output.of(ingressIps));
        }

        /**
         * @param ingressIps List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(ConnectionIngressIpArgs... ingressIps) {
            return ingressIps(List.of(ingressIps));
        }

        /**
         * @param jndiConnectionFactory (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiConnectionFactory(@Nullable Output<String> jndiConnectionFactory) {
            $.jndiConnectionFactory = jndiConnectionFactory;
            return this;
        }

        /**
         * @param jndiConnectionFactory (Updatable) The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiConnectionFactory(String jndiConnectionFactory) {
            return jndiConnectionFactory(Output.of(jndiConnectionFactory));
        }

        /**
         * @param jndiInitialContextFactory (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiInitialContextFactory(@Nullable Output<String> jndiInitialContextFactory) {
            $.jndiInitialContextFactory = jndiInitialContextFactory;
            return this;
        }

        /**
         * @param jndiInitialContextFactory (Updatable) The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiInitialContextFactory(String jndiInitialContextFactory) {
            return jndiInitialContextFactory(Output.of(jndiInitialContextFactory));
        }

        /**
         * @param jndiProviderUrl (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiProviderUrl(@Nullable Output<String> jndiProviderUrl) {
            $.jndiProviderUrl = jndiProviderUrl;
            return this;
        }

        /**
         * @param jndiProviderUrl (Updatable) The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiProviderUrl(String jndiProviderUrl) {
            return jndiProviderUrl(Output.of(jndiProviderUrl));
        }

        /**
         * @param jndiSecurityCredentials (Updatable) The password associated to the principal.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentials(@Nullable Output<String> jndiSecurityCredentials) {
            $.jndiSecurityCredentials = jndiSecurityCredentials;
            return this;
        }

        /**
         * @param jndiSecurityCredentials (Updatable) The password associated to the principal.
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityCredentials(String jndiSecurityCredentials) {
            return jndiSecurityCredentials(Output.of(jndiSecurityCredentials));
        }

        /**
         * @param jndiSecurityPrincipal (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityPrincipal(@Nullable Output<String> jndiSecurityPrincipal) {
            $.jndiSecurityPrincipal = jndiSecurityPrincipal;
            return this;
        }

        /**
         * @param jndiSecurityPrincipal (Updatable) Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
         * 
         * @return builder
         * 
         */
        public Builder jndiSecurityPrincipal(String jndiSecurityPrincipal) {
            return jndiSecurityPrincipal(Output.of(jndiSecurityPrincipal));
        }

        /**
         * @param keyId (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId (Updatable) Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyStore (Updatable) The base64 encoded content of the KeyStore file.
         * 
         * @return builder
         * 
         */
        public Builder keyStore(@Nullable Output<String> keyStore) {
            $.keyStore = keyStore;
            return this;
        }

        /**
         * @param keyStore (Updatable) The base64 encoded content of the KeyStore file.
         * 
         * @return builder
         * 
         */
        public Builder keyStore(String keyStore) {
            return keyStore(Output.of(keyStore));
        }

        /**
         * @param keyStorePassword (Updatable) The KeyStore password.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(@Nullable Output<String> keyStorePassword) {
            $.keyStorePassword = keyStorePassword;
            return this;
        }

        /**
         * @param keyStorePassword (Updatable) The KeyStore password.
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(String keyStorePassword) {
            return keyStorePassword(Output.of(keyStorePassword));
        }

        /**
         * @param lifecycleDetails Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param password (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port (Updatable) The port of an endpoint usually specified for a connection.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The port of an endpoint usually specified for a connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateIp (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
         * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp (Updatable) Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host  field, or make sure the host name is resolvable in the target VCN.
         * The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privateKeyFile (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFile(@Nullable Output<String> privateKeyFile) {
            $.privateKeyFile = privateKeyFile;
            return this;
        }

        /**
         * @param privateKeyFile (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder privateKeyFile(String privateKeyFile) {
            return privateKeyFile(Output.of(privateKeyFile));
        }

        /**
         * @param privateKeyPassphrase (Updatable) Password if the private key file is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(@Nullable Output<String> privateKeyPassphrase) {
            $.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }

        /**
         * @param privateKeyPassphrase (Updatable) Password if the private key file is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(String privateKeyPassphrase) {
            return privateKeyPassphrase(Output.of(privateKeyPassphrase));
        }

        /**
         * @param producerProperties (Updatable) The base64 encoded content of the producer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder producerProperties(@Nullable Output<String> producerProperties) {
            $.producerProperties = producerProperties;
            return this;
        }

        /**
         * @param producerProperties (Updatable) The base64 encoded content of the producer.properties file.
         * 
         * @return builder
         * 
         */
        public Builder producerProperties(String producerProperties) {
            return producerProperties(Output.of(producerProperties));
        }

        /**
         * @param publicKeyFingerprint (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder publicKeyFingerprint(@Nullable Output<String> publicKeyFingerprint) {
            $.publicKeyFingerprint = publicKeyFingerprint;
            return this;
        }

        /**
         * @param publicKeyFingerprint (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
         * 
         * @return builder
         * 
         */
        public Builder publicKeyFingerprint(String publicKeyFingerprint) {
            return publicKeyFingerprint(Output.of(publicKeyFingerprint));
        }

        /**
         * @param region (Updatable) The name of the region. e.g.: us-ashburn-1
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Updatable) The name of the region. e.g.: us-ashburn-1
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routingMethod (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
         * 
         * @return builder
         * 
         */
        public Builder routingMethod(@Nullable Output<String> routingMethod) {
            $.routingMethod = routingMethod;
            return this;
        }

        /**
         * @param routingMethod (Updatable) Controls the network traffic direction to the target: SHARED_SERVICE_ENDPOINT: Traffic flows through the Goldengate Service&#39;s network to public hosts. Cannot be used for private targets.  SHARED_DEPLOYMENT_ENDPOINT: Network traffic flows from the assigned deployment&#39;s private endpoint through the deployment&#39;s subnet. DEDICATED_ENDPOINT: A dedicated private endpoint is created in the target VCN subnet for the connection. The subnetId is required when DEDICATED_ENDPOINT networking is selected.
         * 
         * @return builder
         * 
         */
        public Builder routingMethod(String routingMethod) {
            return routingMethod(Output.of(routingMethod));
        }

        /**
         * @param sasToken (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
         * 
         * @return builder
         * 
         */
        public Builder sasToken(@Nullable Output<String> sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        /**
         * @param sasToken (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when &#39;authenticationType&#39; is set to &#39;SHARED_ACCESS_SIGNATURE&#39;. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
         * 
         * @return builder
         * 
         */
        public Builder sasToken(String sasToken) {
            return sasToken(Output.of(sasToken));
        }

        /**
         * @param secretAccessKey (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey (Updatable) Secret access key to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param securityProtocol (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(@Nullable Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        /**
         * @param securityProtocol (Updatable) Security protocol for Java Message Service. If not provided, default is PLAIN. Optional until 2024-06-27, in the release after it will be made required.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        /**
         * @param servers (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<String> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers (Updatable) Comma separated list of Elasticsearch server addresses, specified as host:port entries, where :port is optional.  If port is not specified, it defaults to 9200. Used for establishing the initial connection to the Elasticsearch cluster. Example: `&#34;server1.example.com:4000,server2.example.com:4000&#34;`
         * 
         * @return builder
         * 
         */
        public Builder servers(String servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param serviceAccountKeyFile (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFile(@Nullable Output<String> serviceAccountKeyFile) {
            $.serviceAccountKeyFile = serviceAccountKeyFile;
            return this;
        }

        /**
         * @param serviceAccountKeyFile (Updatable) The base64 encoded content of the service account key file containing the credentials required to use Google Cloud Storage.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKeyFile(String serviceAccountKeyFile) {
            return serviceAccountKeyFile(Output.of(serviceAccountKeyFile));
        }

        /**
         * @param sessionMode (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(@Nullable Output<String> sessionMode) {
            $.sessionMode = sessionMode;
            return this;
        }

        /**
         * @param sessionMode (Updatable) The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
         * 
         * @return builder
         * 
         */
        public Builder sessionMode(String sessionMode) {
            return sessionMode(Output.of(sessionMode));
        }

        /**
         * @param shouldUseJndi (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseJndi(@Nullable Output<Boolean> shouldUseJndi) {
            $.shouldUseJndi = shouldUseJndi;
            return this;
        }

        /**
         * @param shouldUseJndi (Updatable) If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseJndi(Boolean shouldUseJndi) {
            return shouldUseJndi(Output.of(shouldUseJndi));
        }

        /**
         * @param shouldValidateServerCertificate (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
         * 
         * @return builder
         * 
         */
        public Builder shouldValidateServerCertificate(@Nullable Output<Boolean> shouldValidateServerCertificate) {
            $.shouldValidateServerCertificate = shouldValidateServerCertificate;
            return this;
        }

        /**
         * @param shouldValidateServerCertificate (Updatable) If set to true, the driver validates the certificate that is sent by the database server.
         * 
         * @return builder
         * 
         */
        public Builder shouldValidateServerCertificate(Boolean shouldValidateServerCertificate) {
            return shouldValidateServerCertificate(Output.of(shouldValidateServerCertificate));
        }

        /**
         * @param sslCa (Updatable) Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa (Updatable) Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(@Nullable Output<String> sslCert) {
            $.sslCert = sslCert;
            return this;
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(String sslCert) {
            return sslCert(Output.of(sslCert));
        }

        /**
         * @param sslCrl (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(@Nullable Output<String> sslCrl) {
            $.sslCrl = sslCrl;
            return this;
        }

        /**
         * @param sslCrl (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(String sslCrl) {
            return sslCrl(Output.of(sslCrl));
        }

        /**
         * @param sslKey (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslKey(@Nullable Output<String> sslKey) {
            $.sslKey = sslKey;
            return this;
        }

        /**
         * @param sslKey (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslKey(String sslKey) {
            return sslKey(Output.of(sslKey));
        }

        /**
         * @param sslKeyPassword (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPassword(@Nullable Output<String> sslKeyPassword) {
            $.sslKeyPassword = sslKeyPassword;
            return this;
        }

        /**
         * @param sslKeyPassword (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
         * 
         * @return builder
         * 
         */
        public Builder sslKeyPassword(String sslKeyPassword) {
            return sslKeyPassword(Output.of(sslKeyPassword));
        }

        /**
         * @param sslMode (Updatable) SSL modes for PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode (Updatable) SSL modes for PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param state Possible lifecycle states for connection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Possible lifecycle states for connection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamPoolId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
         * 
         * @return builder
         * 
         */
        public Builder streamPoolId(@Nullable Output<String> streamPoolId) {
            $.streamPoolId = streamPoolId;
            return this;
        }

        /**
         * @param streamPoolId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
         * 
         * @return builder
         * 
         */
        public Builder streamPoolId(String streamPoolId) {
            return streamPoolId(Output.of(streamPoolId));
        }

        /**
         * @param subnetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param systemTags The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param technologyType The Kafka (e.g. Confluent) Schema Registry technology type.
         * 
         * @return builder
         * 
         */
        public Builder technologyType(@Nullable Output<String> technologyType) {
            $.technologyType = technologyType;
            return this;
        }

        /**
         * @param technologyType The Kafka (e.g. Confluent) Schema Registry technology type.
         * 
         * @return builder
         * 
         */
        public Builder technologyType(String technologyType) {
            return technologyType(Output.of(technologyType));
        }

        /**
         * @param tenancyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(@Nullable Output<String> tenancyId) {
            $.tenancyId = tenancyId;
            return this;
        }

        /**
         * @param tenancyId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(String tenancyId) {
            return tenancyId(Output.of(tenancyId));
        }

        /**
         * @param timeCreated The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param trustStore (Updatable) The base64 encoded content of the TrustStore file.
         * 
         * @return builder
         * 
         */
        public Builder trustStore(@Nullable Output<String> trustStore) {
            $.trustStore = trustStore;
            return this;
        }

        /**
         * @param trustStore (Updatable) The base64 encoded content of the TrustStore file.
         * 
         * @return builder
         * 
         */
        public Builder trustStore(String trustStore) {
            return trustStore(Output.of(trustStore));
        }

        /**
         * @param trustStorePassword (Updatable) The TrustStore password.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePassword(@Nullable Output<String> trustStorePassword) {
            $.trustStorePassword = trustStorePassword;
            return this;
        }

        /**
         * @param trustStorePassword (Updatable) The TrustStore password.
         * 
         * @return builder
         * 
         */
        public Builder trustStorePassword(String trustStorePassword) {
            return trustStorePassword(Output.of(trustStorePassword));
        }

        /**
         * @param url (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Updatable) Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param userId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database. The user must have write access to the table they want to connect to.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param username (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vaultId (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        /**
         * @param wallet (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder wallet(@Nullable Output<String> wallet) {
            $.wallet = wallet;
            return this;
        }

        /**
         * @param wallet (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder wallet(String wallet) {
            return wallet(Output.of(wallet));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
