// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentCertificateState Empty = new DeploymentCertificateState();

    /**
     * The Certificate authority key id.
     * 
     */
    @Import(name="authorityKeyId")
    private @Nullable Output<String> authorityKeyId;

    /**
     * @return The Certificate authority key id.
     * 
     */
    public Optional<Output<String>> authorityKeyId() {
        return Optional.ofNullable(this.authorityKeyId);
    }

    /**
     * The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    @Import(name="certificateContent")
    private @Nullable Output<String> certificateContent;

    /**
     * @return The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    public Optional<Output<String>> certificateContent() {
        return Optional.ofNullable(this.certificateContent);
    }

    /**
     * A unique Deployment identifier.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return A unique Deployment identifier.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * Indicates if the certificate is ca.
     * 
     */
    @Import(name="isCa")
    private @Nullable Output<Boolean> isCa;

    /**
     * @return Indicates if the certificate is ca.
     * 
     */
    public Optional<Output<Boolean>> isCa() {
        return Optional.ofNullable(this.isCa);
    }

    /**
     * Whether to override locks (if any exist).
     * 
     */
    @Import(name="isLockOverride")
    private @Nullable Output<Boolean> isLockOverride;

    /**
     * @return Whether to override locks (if any exist).
     * 
     */
    public Optional<Output<Boolean>> isLockOverride() {
        return Optional.ofNullable(this.isLockOverride);
    }

    /**
     * Indicates if the certificate is self signed.
     * 
     */
    @Import(name="isSelfSigned")
    private @Nullable Output<Boolean> isSelfSigned;

    /**
     * @return Indicates if the certificate is self signed.
     * 
     */
    public Optional<Output<Boolean>> isSelfSigned() {
        return Optional.ofNullable(this.isSelfSigned);
    }

    /**
     * The Certificate issuer.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The Certificate issuer.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The Certificate md5Hash.
     * 
     */
    @Import(name="md5hash")
    private @Nullable Output<String> md5hash;

    /**
     * @return The Certificate md5Hash.
     * 
     */
    public Optional<Output<String>> md5hash() {
        return Optional.ofNullable(this.md5hash);
    }

    /**
     * The Certificate public key.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return The Certificate public key.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The Certificate public key algorithm.
     * 
     */
    @Import(name="publicKeyAlgorithm")
    private @Nullable Output<String> publicKeyAlgorithm;

    /**
     * @return The Certificate public key algorithm.
     * 
     */
    public Optional<Output<String>> publicKeyAlgorithm() {
        return Optional.ofNullable(this.publicKeyAlgorithm);
    }

    /**
     * The Certificate public key size.
     * 
     */
    @Import(name="publicKeySize")
    private @Nullable Output<String> publicKeySize;

    /**
     * @return The Certificate public key size.
     * 
     */
    public Optional<Output<String>> publicKeySize() {
        return Optional.ofNullable(this.publicKeySize);
    }

    /**
     * The Certificate serial.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return The Certificate serial.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * The Certificate sha1 hash.
     * 
     */
    @Import(name="sha1hash")
    private @Nullable Output<String> sha1hash;

    /**
     * @return The Certificate sha1 hash.
     * 
     */
    public Optional<Output<String>> sha1hash() {
        return Optional.ofNullable(this.sha1hash);
    }

    /**
     * Possible certificate lifecycle states.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Possible certificate lifecycle states.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The Certificate subject.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The Certificate subject.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The Certificate subject key id.
     * 
     */
    @Import(name="subjectKeyId")
    private @Nullable Output<String> subjectKeyId;

    /**
     * @return The Certificate subject key id.
     * 
     */
    public Optional<Output<String>> subjectKeyId() {
        return Optional.ofNullable(this.subjectKeyId);
    }

    /**
     * The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeValidFrom")
    private @Nullable Output<String> timeValidFrom;

    /**
     * @return The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeValidFrom() {
        return Optional.ofNullable(this.timeValidFrom);
    }

    /**
     * The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeValidTo")
    private @Nullable Output<String> timeValidTo;

    /**
     * @return The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeValidTo() {
        return Optional.ofNullable(this.timeValidTo);
    }

    /**
     * The Certificate version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The Certificate version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DeploymentCertificateState() {}

    private DeploymentCertificateState(DeploymentCertificateState $) {
        this.authorityKeyId = $.authorityKeyId;
        this.certificateContent = $.certificateContent;
        this.deploymentId = $.deploymentId;
        this.isCa = $.isCa;
        this.isLockOverride = $.isLockOverride;
        this.isSelfSigned = $.isSelfSigned;
        this.issuer = $.issuer;
        this.key = $.key;
        this.md5hash = $.md5hash;
        this.publicKey = $.publicKey;
        this.publicKeyAlgorithm = $.publicKeyAlgorithm;
        this.publicKeySize = $.publicKeySize;
        this.serial = $.serial;
        this.sha1hash = $.sha1hash;
        this.state = $.state;
        this.subject = $.subject;
        this.subjectKeyId = $.subjectKeyId;
        this.timeCreated = $.timeCreated;
        this.timeValidFrom = $.timeValidFrom;
        this.timeValidTo = $.timeValidTo;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentCertificateState $;

        public Builder() {
            $ = new DeploymentCertificateState();
        }

        public Builder(DeploymentCertificateState defaults) {
            $ = new DeploymentCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorityKeyId The Certificate authority key id.
         * 
         * @return builder
         * 
         */
        public Builder authorityKeyId(@Nullable Output<String> authorityKeyId) {
            $.authorityKeyId = authorityKeyId;
            return this;
        }

        /**
         * @param authorityKeyId The Certificate authority key id.
         * 
         * @return builder
         * 
         */
        public Builder authorityKeyId(String authorityKeyId) {
            return authorityKeyId(Output.of(authorityKeyId));
        }

        /**
         * @param certificateContent The base64 encoded content of the PEM file containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContent(@Nullable Output<String> certificateContent) {
            $.certificateContent = certificateContent;
            return this;
        }

        /**
         * @param certificateContent The base64 encoded content of the PEM file containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateContent(String certificateContent) {
            return certificateContent(Output.of(certificateContent));
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param isCa Indicates if the certificate is ca.
         * 
         * @return builder
         * 
         */
        public Builder isCa(@Nullable Output<Boolean> isCa) {
            $.isCa = isCa;
            return this;
        }

        /**
         * @param isCa Indicates if the certificate is ca.
         * 
         * @return builder
         * 
         */
        public Builder isCa(Boolean isCa) {
            return isCa(Output.of(isCa));
        }

        /**
         * @param isLockOverride Whether to override locks (if any exist).
         * 
         * @return builder
         * 
         */
        public Builder isLockOverride(@Nullable Output<Boolean> isLockOverride) {
            $.isLockOverride = isLockOverride;
            return this;
        }

        /**
         * @param isLockOverride Whether to override locks (if any exist).
         * 
         * @return builder
         * 
         */
        public Builder isLockOverride(Boolean isLockOverride) {
            return isLockOverride(Output.of(isLockOverride));
        }

        /**
         * @param isSelfSigned Indicates if the certificate is self signed.
         * 
         * @return builder
         * 
         */
        public Builder isSelfSigned(@Nullable Output<Boolean> isSelfSigned) {
            $.isSelfSigned = isSelfSigned;
            return this;
        }

        /**
         * @param isSelfSigned Indicates if the certificate is self signed.
         * 
         * @return builder
         * 
         */
        public Builder isSelfSigned(Boolean isSelfSigned) {
            return isSelfSigned(Output.of(isSelfSigned));
        }

        /**
         * @param issuer The Certificate issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The Certificate issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param key The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param md5hash The Certificate md5Hash.
         * 
         * @return builder
         * 
         */
        public Builder md5hash(@Nullable Output<String> md5hash) {
            $.md5hash = md5hash;
            return this;
        }

        /**
         * @param md5hash The Certificate md5Hash.
         * 
         * @return builder
         * 
         */
        public Builder md5hash(String md5hash) {
            return md5hash(Output.of(md5hash));
        }

        /**
         * @param publicKey The Certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The Certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param publicKeyAlgorithm The Certificate public key algorithm.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyAlgorithm(@Nullable Output<String> publicKeyAlgorithm) {
            $.publicKeyAlgorithm = publicKeyAlgorithm;
            return this;
        }

        /**
         * @param publicKeyAlgorithm The Certificate public key algorithm.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyAlgorithm(String publicKeyAlgorithm) {
            return publicKeyAlgorithm(Output.of(publicKeyAlgorithm));
        }

        /**
         * @param publicKeySize The Certificate public key size.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySize(@Nullable Output<String> publicKeySize) {
            $.publicKeySize = publicKeySize;
            return this;
        }

        /**
         * @param publicKeySize The Certificate public key size.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySize(String publicKeySize) {
            return publicKeySize(Output.of(publicKeySize));
        }

        /**
         * @param serial The Certificate serial.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial The Certificate serial.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param sha1hash The Certificate sha1 hash.
         * 
         * @return builder
         * 
         */
        public Builder sha1hash(@Nullable Output<String> sha1hash) {
            $.sha1hash = sha1hash;
            return this;
        }

        /**
         * @param sha1hash The Certificate sha1 hash.
         * 
         * @return builder
         * 
         */
        public Builder sha1hash(String sha1hash) {
            return sha1hash(Output.of(sha1hash));
        }

        /**
         * @param state Possible certificate lifecycle states.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Possible certificate lifecycle states.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subject The Certificate subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The Certificate subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectKeyId The Certificate subject key id.
         * 
         * @return builder
         * 
         */
        public Builder subjectKeyId(@Nullable Output<String> subjectKeyId) {
            $.subjectKeyId = subjectKeyId;
            return this;
        }

        /**
         * @param subjectKeyId The Certificate subject key id.
         * 
         * @return builder
         * 
         */
        public Builder subjectKeyId(String subjectKeyId) {
            return subjectKeyId(Output.of(subjectKeyId));
        }

        /**
         * @param timeCreated The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeValidFrom The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeValidFrom(@Nullable Output<String> timeValidFrom) {
            $.timeValidFrom = timeValidFrom;
            return this;
        }

        /**
         * @param timeValidFrom The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeValidFrom(String timeValidFrom) {
            return timeValidFrom(Output.of(timeValidFrom));
        }

        /**
         * @param timeValidTo The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeValidTo(@Nullable Output<String> timeValidTo) {
            $.timeValidTo = timeValidTo;
            return this;
        }

        /**
         * @param timeValidTo The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeValidTo(String timeValidTo) {
            return timeValidTo(Output.of(timeValidTo));
        }

        /**
         * @param version The Certificate version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The Certificate version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DeploymentCertificateState build() {
            return $;
        }
    }

}
