// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.DeploymentOggDataGroupToRolesMappingArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentOggDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentOggDataArgs Empty = new DeploymentOggDataArgs();

    /**
     * (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by &#34;passwordSecretId&#34;.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by &#34;passwordSecretId&#34;.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * (Updatable) The GoldenGate deployment console username.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return (Updatable) The GoldenGate deployment console username.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * (Updatable) The type of credential store for OGG.
     * 
     */
    @Import(name="credentialStore")
    private @Nullable Output<String> credentialStore;

    /**
     * @return (Updatable) The type of credential store for OGG.
     * 
     */
    public Optional<Output<String>> credentialStore() {
        return Optional.ofNullable(this.credentialStore);
    }

    /**
     * The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    @Import(name="deploymentName", required=true)
    private Output<String> deploymentName;

    /**
     * @return The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    public Output<String> deploymentName() {
        return this.deploymentName;
    }

    /**
     * (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
     * 
     */
    @Import(name="groupToRolesMapping")
    private @Nullable Output<DeploymentOggDataGroupToRolesMappingArgs> groupToRolesMapping;

    /**
     * @return (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
     * 
     */
    public Optional<Output<DeploymentOggDataGroupToRolesMappingArgs>> groupToRolesMapping() {
        return Optional.ofNullable(this.groupToRolesMapping);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
     * 
     */
    @Import(name="identityDomainId")
    private @Nullable Output<String> identityDomainId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
     * 
     */
    public Optional<Output<String>> identityDomainId() {
        return Optional.ofNullable(this.identityDomainId);
    }

    /**
     * (Updatable) The base64 encoded content of the PEM file containing the private key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) The base64 encoded content of the PEM file containing the private key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Version of OGG
     * 
     */
    @Import(name="oggVersion")
    private @Nullable Output<String> oggVersion;

    /**
     * @return Version of OGG
     * 
     */
    public Optional<Output<String>> oggVersion() {
        return Optional.ofNullable(this.oggVersion);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
     * 
     */
    @Import(name="passwordSecretId")
    private @Nullable Output<String> passwordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
     * 
     */
    public Optional<Output<String>> passwordSecretId() {
        return Optional.ofNullable(this.passwordSecretId);
    }

    private DeploymentOggDataArgs() {}

    private DeploymentOggDataArgs(DeploymentOggDataArgs $) {
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.certificate = $.certificate;
        this.credentialStore = $.credentialStore;
        this.deploymentName = $.deploymentName;
        this.groupToRolesMapping = $.groupToRolesMapping;
        this.identityDomainId = $.identityDomainId;
        this.key = $.key;
        this.oggVersion = $.oggVersion;
        this.passwordSecretId = $.passwordSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentOggDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentOggDataArgs $;

        public Builder() {
            $ = new DeploymentOggDataArgs();
        }

        public Builder(DeploymentOggDataArgs defaults) {
            $ = new DeploymentOggDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by &#34;passwordSecretId&#34;.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by &#34;passwordSecretId&#34;.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername (Updatable) The GoldenGate deployment console username.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername (Updatable) The GoldenGate deployment console username.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param certificate (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param credentialStore (Updatable) The type of credential store for OGG.
         * 
         * @return builder
         * 
         */
        public Builder credentialStore(@Nullable Output<String> credentialStore) {
            $.credentialStore = credentialStore;
            return this;
        }

        /**
         * @param credentialStore (Updatable) The type of credential store for OGG.
         * 
         * @return builder
         * 
         */
        public Builder credentialStore(String credentialStore) {
            return credentialStore(Output.of(credentialStore));
        }

        /**
         * @param deploymentName The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder deploymentName(Output<String> deploymentName) {
            $.deploymentName = deploymentName;
            return this;
        }

        /**
         * @param deploymentName The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
         * 
         * @return builder
         * 
         */
        public Builder deploymentName(String deploymentName) {
            return deploymentName(Output.of(deploymentName));
        }

        /**
         * @param groupToRolesMapping (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
         * 
         * @return builder
         * 
         */
        public Builder groupToRolesMapping(@Nullable Output<DeploymentOggDataGroupToRolesMappingArgs> groupToRolesMapping) {
            $.groupToRolesMapping = groupToRolesMapping;
            return this;
        }

        /**
         * @param groupToRolesMapping (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
         * 
         * @return builder
         * 
         */
        public Builder groupToRolesMapping(DeploymentOggDataGroupToRolesMappingArgs groupToRolesMapping) {
            return groupToRolesMapping(Output.of(groupToRolesMapping));
        }

        /**
         * @param identityDomainId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
         * 
         * @return builder
         * 
         */
        public Builder identityDomainId(@Nullable Output<String> identityDomainId) {
            $.identityDomainId = identityDomainId;
            return this;
        }

        /**
         * @param identityDomainId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
         * 
         * @return builder
         * 
         */
        public Builder identityDomainId(String identityDomainId) {
            return identityDomainId(Output.of(identityDomainId));
        }

        /**
         * @param key (Updatable) The base64 encoded content of the PEM file containing the private key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) The base64 encoded content of the PEM file containing the private key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param oggVersion Version of OGG
         * 
         * @return builder
         * 
         */
        public Builder oggVersion(@Nullable Output<String> oggVersion) {
            $.oggVersion = oggVersion;
            return this;
        }

        /**
         * @param oggVersion Version of OGG
         * 
         * @return builder
         * 
         */
        public Builder oggVersion(String oggVersion) {
            return oggVersion(Output.of(oggVersion));
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(@Nullable Output<String> passwordSecretId) {
            $.passwordSecretId = passwordSecretId;
            return this;
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(String passwordSecretId) {
            return passwordSecretId(Output.of(passwordSecretId));
        }

        public DeploymentOggDataArgs build() {
            if ($.deploymentName == null) {
                throw new MissingRequiredPropertyException("DeploymentOggDataArgs", "deploymentName");
            }
            return $;
        }
    }

}
