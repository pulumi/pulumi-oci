// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentCertificatesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentCertificatesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentCertificatesArgs Empty = new GetDeploymentCertificatesArgs();

    /**
     * A unique Deployment identifier.
     * 
     */
    @Import(name="deploymentId", required=true)
    private Output<String> deploymentId;

    /**
     * @return A unique Deployment identifier.
     * 
     */
    public Output<String> deploymentId() {
        return this.deploymentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDeploymentCertificatesFilterArgs>> filters;

    public Optional<Output<List<GetDeploymentCertificatesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only connections having the &#39;lifecycleState&#39; given.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only connections having the &#39;lifecycleState&#39; given.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDeploymentCertificatesArgs() {}

    private GetDeploymentCertificatesArgs(GetDeploymentCertificatesArgs $) {
        this.deploymentId = $.deploymentId;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentCertificatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentCertificatesArgs $;

        public Builder() {
            $ = new GetDeploymentCertificatesArgs();
        }

        public Builder(GetDeploymentCertificatesArgs defaults) {
            $ = new GetDeploymentCertificatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId A unique Deployment identifier.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        public Builder filters(@Nullable Output<List<GetDeploymentCertificatesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDeploymentCertificatesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDeploymentCertificatesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only connections having the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only connections having the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetDeploymentCertificatesArgs build() {
            $.deploymentId = Objects.requireNonNull($.deploymentId, "expected parameter 'deploymentId' to be non-null");
            return $;
        }
    }

}
