// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentEnvironmentsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentEnvironmentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentEnvironmentsArgs Empty = new GetDeploymentEnvironmentsArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDeploymentEnvironmentsFilterArgs>> filters;

    public Optional<Output<List<GetDeploymentEnvironmentsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    private GetDeploymentEnvironmentsArgs() {}

    private GetDeploymentEnvironmentsArgs(GetDeploymentEnvironmentsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentEnvironmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentEnvironmentsArgs $;

        public Builder() {
            $ = new GetDeploymentEnvironmentsArgs();
        }

        public Builder(GetDeploymentEnvironmentsArgs defaults) {
            $ = new GetDeploymentEnvironmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetDeploymentEnvironmentsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDeploymentEnvironmentsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDeploymentEnvironmentsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public GetDeploymentEnvironmentsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDeploymentEnvironmentsArgs", "compartmentId");
            }
            return $;
        }
    }

}
