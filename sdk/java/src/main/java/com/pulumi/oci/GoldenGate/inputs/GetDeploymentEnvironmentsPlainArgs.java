// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentEnvironmentsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentEnvironmentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentEnvironmentsPlainArgs Empty = new GetDeploymentEnvironmentsPlainArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetDeploymentEnvironmentsFilter> filters;

    public Optional<List<GetDeploymentEnvironmentsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    private GetDeploymentEnvironmentsPlainArgs() {}

    private GetDeploymentEnvironmentsPlainArgs(GetDeploymentEnvironmentsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentEnvironmentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentEnvironmentsPlainArgs $;

        public Builder() {
            $ = new GetDeploymentEnvironmentsPlainArgs();
        }

        public Builder(GetDeploymentEnvironmentsPlainArgs defaults) {
            $ = new GetDeploymentEnvironmentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetDeploymentEnvironmentsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDeploymentEnvironmentsFilter... filters) {
            return filters(List.of(filters));
        }

        public GetDeploymentEnvironmentsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDeploymentEnvironmentsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
