// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentTypesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentTypesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentTypesArgs Empty = new GetDeploymentTypesArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDeploymentTypesFilterArgs>> filters;

    public Optional<Output<List<GetDeploymentTypesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Allows to query by a specific GoldenGate version.
     * 
     */
    @Import(name="oggVersion")
    private @Nullable Output<String> oggVersion;

    /**
     * @return Allows to query by a specific GoldenGate version.
     * 
     */
    public Optional<Output<String>> oggVersion() {
        return Optional.ofNullable(this.oggVersion);
    }

    private GetDeploymentTypesArgs() {}

    private GetDeploymentTypesArgs(GetDeploymentTypesArgs $) {
        this.compartmentId = $.compartmentId;
        this.deploymentType = $.deploymentType;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.oggVersion = $.oggVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentTypesArgs $;

        public Builder() {
            $ = new GetDeploymentTypesArgs();
        }

        public Builder(GetDeploymentTypesArgs defaults) {
            $ = new GetDeploymentTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param deploymentType The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetDeploymentTypesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDeploymentTypesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDeploymentTypesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param oggVersion Allows to query by a specific GoldenGate version.
         * 
         * @return builder
         * 
         */
        public Builder oggVersion(@Nullable Output<String> oggVersion) {
            $.oggVersion = oggVersion;
            return this;
        }

        /**
         * @param oggVersion Allows to query by a specific GoldenGate version.
         * 
         * @return builder
         * 
         */
        public Builder oggVersion(String oggVersion) {
            return oggVersion(Output.of(oggVersion));
        }

        public GetDeploymentTypesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDeploymentTypesArgs", "compartmentId");
            }
            return $;
        }
    }

}
