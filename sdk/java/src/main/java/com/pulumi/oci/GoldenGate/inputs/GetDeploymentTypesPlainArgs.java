// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentTypesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentTypesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentTypesPlainArgs Empty = new GetDeploymentTypesPlainArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable String deploymentType;

    /**
     * @return The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetDeploymentTypesFilter> filters;

    public Optional<List<GetDeploymentTypesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Allows to query by a specific GoldenGate version.
     * 
     */
    @Import(name="oggVersion")
    private @Nullable String oggVersion;

    /**
     * @return Allows to query by a specific GoldenGate version.
     * 
     */
    public Optional<String> oggVersion() {
        return Optional.ofNullable(this.oggVersion);
    }

    private GetDeploymentTypesPlainArgs() {}

    private GetDeploymentTypesPlainArgs(GetDeploymentTypesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.deploymentType = $.deploymentType;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.oggVersion = $.oggVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentTypesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentTypesPlainArgs $;

        public Builder() {
            $ = new GetDeploymentTypesPlainArgs();
        }

        public Builder(GetDeploymentTypesPlainArgs defaults) {
            $ = new GetDeploymentTypesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param deploymentType The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable String deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetDeploymentTypesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDeploymentTypesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param oggVersion Allows to query by a specific GoldenGate version.
         * 
         * @return builder
         * 
         */
        public Builder oggVersion(@Nullable String oggVersion) {
            $.oggVersion = oggVersion;
            return this;
        }

        public GetDeploymentTypesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDeploymentTypesPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
