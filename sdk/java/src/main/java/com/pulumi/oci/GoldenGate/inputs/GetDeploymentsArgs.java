// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentsArgs Empty = new GetDeploymentsArgs();

    /**
     * Return the deployments to which the specified connectionId may be assigned.
     * 
     */
    @Import(name="assignableConnectionId")
    private @Nullable Output<String> assignableConnectionId;

    /**
     * @return Return the deployments to which the specified connectionId may be assigned.
     * 
     */
    public Optional<Output<String>> assignableConnectionId() {
        return Optional.ofNullable(this.assignableConnectionId);
    }

    /**
     * The OCID of the connection which for the deployment must be assigned.
     * 
     */
    @Import(name="assignedConnectionId")
    private @Nullable Output<String> assignedConnectionId;

    /**
     * @return The OCID of the connection which for the deployment must be assigned.
     * 
     */
    public Optional<Output<String>> assignedConnectionId() {
        return Optional.ofNullable(this.assignedConnectionId);
    }

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDeploymentsFilterArgs>> filters;

    public Optional<Output<List<GetDeploymentsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the resources that match the &#39;fqdn&#39; given.
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return A filter to return only the resources that match the &#39;fqdn&#39; given.
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
     * 
     */
    @Import(name="lifecycleSubState")
    private @Nullable Output<String> lifecycleSubState;

    /**
     * @return A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
     * 
     */
    public Optional<Output<String>> lifecycleSubState() {
        return Optional.ofNullable(this.lifecycleSubState);
    }

    /**
     * A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The connection type which the deployment must support.
     * 
     */
    @Import(name="supportedConnectionType")
    private @Nullable Output<String> supportedConnectionType;

    /**
     * @return The connection type which the deployment must support.
     * 
     */
    public Optional<Output<String>> supportedConnectionType() {
        return Optional.ofNullable(this.supportedConnectionType);
    }

    private GetDeploymentsArgs() {}

    private GetDeploymentsArgs(GetDeploymentsArgs $) {
        this.assignableConnectionId = $.assignableConnectionId;
        this.assignedConnectionId = $.assignedConnectionId;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fqdn = $.fqdn;
        this.lifecycleSubState = $.lifecycleSubState;
        this.state = $.state;
        this.supportedConnectionType = $.supportedConnectionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentsArgs $;

        public Builder() {
            $ = new GetDeploymentsArgs();
        }

        public Builder(GetDeploymentsArgs defaults) {
            $ = new GetDeploymentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignableConnectionId Return the deployments to which the specified connectionId may be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignableConnectionId(@Nullable Output<String> assignableConnectionId) {
            $.assignableConnectionId = assignableConnectionId;
            return this;
        }

        /**
         * @param assignableConnectionId Return the deployments to which the specified connectionId may be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignableConnectionId(String assignableConnectionId) {
            return assignableConnectionId(Output.of(assignableConnectionId));
        }

        /**
         * @param assignedConnectionId The OCID of the connection which for the deployment must be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignedConnectionId(@Nullable Output<String> assignedConnectionId) {
            $.assignedConnectionId = assignedConnectionId;
            return this;
        }

        /**
         * @param assignedConnectionId The OCID of the connection which for the deployment must be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignedConnectionId(String assignedConnectionId) {
            return assignedConnectionId(Output.of(assignedConnectionId));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetDeploymentsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDeploymentsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDeploymentsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fqdn A filter to return only the resources that match the &#39;fqdn&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn A filter to return only the resources that match the &#39;fqdn&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param lifecycleSubState A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleSubState(@Nullable Output<String> lifecycleSubState) {
            $.lifecycleSubState = lifecycleSubState;
            return this;
        }

        /**
         * @param lifecycleSubState A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleSubState(String lifecycleSubState) {
            return lifecycleSubState(Output.of(lifecycleSubState));
        }

        /**
         * @param state A filter to return only the resources that match the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only the resources that match the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param supportedConnectionType The connection type which the deployment must support.
         * 
         * @return builder
         * 
         */
        public Builder supportedConnectionType(@Nullable Output<String> supportedConnectionType) {
            $.supportedConnectionType = supportedConnectionType;
            return this;
        }

        /**
         * @param supportedConnectionType The connection type which the deployment must support.
         * 
         * @return builder
         * 
         */
        public Builder supportedConnectionType(String supportedConnectionType) {
            return supportedConnectionType(Output.of(supportedConnectionType));
        }

        public GetDeploymentsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
