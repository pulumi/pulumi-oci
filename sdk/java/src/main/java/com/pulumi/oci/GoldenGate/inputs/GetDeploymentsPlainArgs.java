// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentsPlainArgs Empty = new GetDeploymentsPlainArgs();

    /**
     * Return the deployments to which the specified connectionId may be assigned.
     * 
     */
    @Import(name="assignableConnectionId")
    private @Nullable String assignableConnectionId;

    /**
     * @return Return the deployments to which the specified connectionId may be assigned.
     * 
     */
    public Optional<String> assignableConnectionId() {
        return Optional.ofNullable(this.assignableConnectionId);
    }

    /**
     * The OCID of the connection which for the deployment must be assigned.
     * 
     */
    @Import(name="assignedConnectionId")
    private @Nullable String assignedConnectionId;

    /**
     * @return The OCID of the connection which for the deployment must be assigned.
     * 
     */
    public Optional<String> assignedConnectionId() {
        return Optional.ofNullable(this.assignedConnectionId);
    }

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetDeploymentsFilter> filters;

    public Optional<List<GetDeploymentsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the resources that match the &#39;fqdn&#39; given.
     * 
     */
    @Import(name="fqdn")
    private @Nullable String fqdn;

    /**
     * @return A filter to return only the resources that match the &#39;fqdn&#39; given.
     * 
     */
    public Optional<String> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
     * 
     */
    @Import(name="lifecycleSubState")
    private @Nullable String lifecycleSubState;

    /**
     * @return A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
     * 
     */
    public Optional<String> lifecycleSubState() {
        return Optional.ofNullable(this.lifecycleSubState);
    }

    /**
     * A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The connection type which the deployment must support.
     * 
     */
    @Import(name="supportedConnectionType")
    private @Nullable String supportedConnectionType;

    /**
     * @return The connection type which the deployment must support.
     * 
     */
    public Optional<String> supportedConnectionType() {
        return Optional.ofNullable(this.supportedConnectionType);
    }

    private GetDeploymentsPlainArgs() {}

    private GetDeploymentsPlainArgs(GetDeploymentsPlainArgs $) {
        this.assignableConnectionId = $.assignableConnectionId;
        this.assignedConnectionId = $.assignedConnectionId;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.fqdn = $.fqdn;
        this.lifecycleSubState = $.lifecycleSubState;
        this.state = $.state;
        this.supportedConnectionType = $.supportedConnectionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentsPlainArgs $;

        public Builder() {
            $ = new GetDeploymentsPlainArgs();
        }

        public Builder(GetDeploymentsPlainArgs defaults) {
            $ = new GetDeploymentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignableConnectionId Return the deployments to which the specified connectionId may be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignableConnectionId(@Nullable String assignableConnectionId) {
            $.assignableConnectionId = assignableConnectionId;
            return this;
        }

        /**
         * @param assignedConnectionId The OCID of the connection which for the deployment must be assigned.
         * 
         * @return builder
         * 
         */
        public Builder assignedConnectionId(@Nullable String assignedConnectionId) {
            $.assignedConnectionId = assignedConnectionId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetDeploymentsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDeploymentsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param fqdn A filter to return only the resources that match the &#39;fqdn&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable String fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param lifecycleSubState A filter to return only the resources that match the &#39;lifecycleSubState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleSubState(@Nullable String lifecycleSubState) {
            $.lifecycleSubState = lifecycleSubState;
            return this;
        }

        /**
         * @param state A filter to return only the resources that match the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param supportedConnectionType The connection type which the deployment must support.
         * 
         * @return builder
         * 
         */
        public Builder supportedConnectionType(@Nullable String supportedConnectionType) {
            $.supportedConnectionType = supportedConnectionType;
            return this;
        }

        public GetDeploymentsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDeploymentsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
