// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetPipelineSchemaTablesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPipelineSchemaTablesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPipelineSchemaTablesArgs Empty = new GetPipelineSchemaTablesArgs();

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetPipelineSchemaTablesFilterArgs>> filters;

    public Optional<Output<List<GetPipelineSchemaTablesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
     * 
     */
    @Import(name="pipelineId", required=true)
    private Output<String> pipelineId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
     * 
     */
    public Output<String> pipelineId() {
        return this.pipelineId;
    }

    /**
     * Name of the source schema obtained from get schema endpoint of the created pipeline.
     * 
     */
    @Import(name="sourceSchemaName", required=true)
    private Output<String> sourceSchemaName;

    /**
     * @return Name of the source schema obtained from get schema endpoint of the created pipeline.
     * 
     */
    public Output<String> sourceSchemaName() {
        return this.sourceSchemaName;
    }

    /**
     * Name of the target schema obtained from get schema endpoint of the created pipeline.
     * 
     */
    @Import(name="targetSchemaName", required=true)
    private Output<String> targetSchemaName;

    /**
     * @return Name of the target schema obtained from get schema endpoint of the created pipeline.
     * 
     */
    public Output<String> targetSchemaName() {
        return this.targetSchemaName;
    }

    private GetPipelineSchemaTablesArgs() {}

    private GetPipelineSchemaTablesArgs(GetPipelineSchemaTablesArgs $) {
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.pipelineId = $.pipelineId;
        this.sourceSchemaName = $.sourceSchemaName;
        this.targetSchemaName = $.targetSchemaName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPipelineSchemaTablesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPipelineSchemaTablesArgs $;

        public Builder() {
            $ = new GetPipelineSchemaTablesArgs();
        }

        public Builder(GetPipelineSchemaTablesArgs defaults) {
            $ = new GetPipelineSchemaTablesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetPipelineSchemaTablesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPipelineSchemaTablesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPipelineSchemaTablesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param pipelineId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        /**
         * @param pipelineId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        /**
         * @param sourceSchemaName Name of the source schema obtained from get schema endpoint of the created pipeline.
         * 
         * @return builder
         * 
         */
        public Builder sourceSchemaName(Output<String> sourceSchemaName) {
            $.sourceSchemaName = sourceSchemaName;
            return this;
        }

        /**
         * @param sourceSchemaName Name of the source schema obtained from get schema endpoint of the created pipeline.
         * 
         * @return builder
         * 
         */
        public Builder sourceSchemaName(String sourceSchemaName) {
            return sourceSchemaName(Output.of(sourceSchemaName));
        }

        /**
         * @param targetSchemaName Name of the target schema obtained from get schema endpoint of the created pipeline.
         * 
         * @return builder
         * 
         */
        public Builder targetSchemaName(Output<String> targetSchemaName) {
            $.targetSchemaName = targetSchemaName;
            return this;
        }

        /**
         * @param targetSchemaName Name of the target schema obtained from get schema endpoint of the created pipeline.
         * 
         * @return builder
         * 
         */
        public Builder targetSchemaName(String targetSchemaName) {
            return targetSchemaName(Output.of(targetSchemaName));
        }

        public GetPipelineSchemaTablesArgs build() {
            if ($.pipelineId == null) {
                throw new MissingRequiredPropertyException("GetPipelineSchemaTablesArgs", "pipelineId");
            }
            if ($.sourceSchemaName == null) {
                throw new MissingRequiredPropertyException("GetPipelineSchemaTablesArgs", "sourceSchemaName");
            }
            if ($.targetSchemaName == null) {
                throw new MissingRequiredPropertyException("GetPipelineSchemaTablesArgs", "targetSchemaName");
            }
            return $;
        }
    }

}
