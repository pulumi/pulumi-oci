// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetPipelinesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPipelinesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPipelinesPlainArgs Empty = new GetPipelinesPlainArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetPipelinesFilter> filters;

    public Optional<List<GetPipelinesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filtered list of pipelines to return for a given lifecycleSubState.
     * 
     */
    @Import(name="lifecycleSubState")
    private @Nullable String lifecycleSubState;

    /**
     * @return A filtered list of pipelines to return for a given lifecycleSubState.
     * 
     */
    public Optional<String> lifecycleSubState() {
        return Optional.ofNullable(this.lifecycleSubState);
    }

    /**
     * A filtered list of pipelines to return for a given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filtered list of pipelines to return for a given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetPipelinesPlainArgs() {}

    private GetPipelinesPlainArgs(GetPipelinesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.lifecycleSubState = $.lifecycleSubState;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPipelinesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPipelinesPlainArgs $;

        public Builder() {
            $ = new GetPipelinesPlainArgs();
        }

        public Builder(GetPipelinesPlainArgs defaults) {
            $ = new GetPipelinesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetPipelinesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetPipelinesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param lifecycleSubState A filtered list of pipelines to return for a given lifecycleSubState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleSubState(@Nullable String lifecycleSubState) {
            $.lifecycleSubState = lifecycleSubState;
            return this;
        }

        /**
         * @param state A filtered list of pipelines to return for a given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetPipelinesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetPipelinesPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
