// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.GetRecipesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecipesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRecipesArgs Empty = new GetRecipesArgs();

    /**
     * The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetRecipesFilterArgs>> filters;

    public Optional<Output<List<GetRecipesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The pipeline&#39;s recipe type. The default value is ZERO_ETL.
     * 
     */
    @Import(name="recipeType")
    private @Nullable Output<String> recipeType;

    /**
     * @return The pipeline&#39;s recipe type. The default value is ZERO_ETL.
     * 
     */
    public Optional<Output<String>> recipeType() {
        return Optional.ofNullable(this.recipeType);
    }

    private GetRecipesArgs() {}

    private GetRecipesArgs(GetRecipesArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.recipeType = $.recipeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecipesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecipesArgs $;

        public Builder() {
            $ = new GetRecipesArgs();
        }

        public Builder(GetRecipesArgs defaults) {
            $ = new GetRecipesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetRecipesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetRecipesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRecipesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param recipeType The pipeline&#39;s recipe type. The default value is ZERO_ETL.
         * 
         * @return builder
         * 
         */
        public Builder recipeType(@Nullable Output<String> recipeType) {
            $.recipeType = recipeType;
            return this;
        }

        /**
         * @param recipeType The pipeline&#39;s recipe type. The default value is ZERO_ETL.
         * 
         * @return builder
         * 
         */
        public Builder recipeType(String recipeType) {
            return recipeType(Output.of(recipeType));
        }

        public GetRecipesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetRecipesArgs", "compartmentId");
            }
            return $;
        }
    }

}
