// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineMappingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineMappingRuleArgs Empty = new PipelineMappingRuleArgs();

    /**
     * Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
     * 
     */
    @Import(name="mappingType")
    private @Nullable Output<String> mappingType;

    /**
     * @return Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
     * 
     */
    public Optional<Output<String>> mappingType() {
        return Optional.ofNullable(this.mappingType);
    }

    /**
     * The source schema/table combination for replication to target.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source schema/table combination for replication to target.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The target schema/table combination for replication from the source.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The target schema/table combination for replication from the source.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private PipelineMappingRuleArgs() {}

    private PipelineMappingRuleArgs(PipelineMappingRuleArgs $) {
        this.mappingType = $.mappingType;
        this.source = $.source;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineMappingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineMappingRuleArgs $;

        public Builder() {
            $ = new PipelineMappingRuleArgs();
        }

        public Builder(PipelineMappingRuleArgs defaults) {
            $ = new PipelineMappingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mappingType Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder mappingType(@Nullable Output<String> mappingType) {
            $.mappingType = mappingType;
            return this;
        }

        /**
         * @param mappingType Defines the exclude/include rules of source and target schemas and tables when replicating from source to target. This option applies when creating and updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder mappingType(String mappingType) {
            return mappingType(Output.of(mappingType));
        }

        /**
         * @param source The source schema/table combination for replication to target.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source schema/table combination for replication to target.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param target The target schema/table combination for replication from the source.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The target schema/table combination for replication from the source.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public PipelineMappingRuleArgs build() {
            return $;
        }
    }

}
