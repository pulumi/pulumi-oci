// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelinePipelineDiagnosticDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelinePipelineDiagnosticDataArgs Empty = new PipelinePipelineDiagnosticDataArgs();

    /**
     * Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The state of the pipeline diagnostics collection.
     * 
     */
    @Import(name="diagnosticState")
    private @Nullable Output<String> diagnosticState;

    /**
     * @return The state of the pipeline diagnostics collection.
     * 
     */
    public Optional<Output<String>> diagnosticState() {
        return Optional.ofNullable(this.diagnosticState);
    }

    /**
     * Name of namespace that serves as a container for all of your buckets
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name of namespace that serves as a container for all of your buckets
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the diagnostic collected and uploaded to object storage
     * 
     */
    @Import(name="object")
    private @Nullable Output<String> object;

    /**
     * @return Name of the diagnostic collected and uploaded to object storage
     * 
     */
    public Optional<Output<String>> object() {
        return Optional.ofNullable(this.object);
    }

    /**
     * The date and time the diagnostic data was last collected for the pipeline. The format is defined by  [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeLastCollected")
    private @Nullable Output<String> timeLastCollected;

    /**
     * @return The date and time the diagnostic data was last collected for the pipeline. The format is defined by  [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeLastCollected() {
        return Optional.ofNullable(this.timeLastCollected);
    }

    private PipelinePipelineDiagnosticDataArgs() {}

    private PipelinePipelineDiagnosticDataArgs(PipelinePipelineDiagnosticDataArgs $) {
        this.bucket = $.bucket;
        this.diagnosticState = $.diagnosticState;
        this.namespace = $.namespace;
        this.object = $.object;
        this.timeLastCollected = $.timeLastCollected;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelinePipelineDiagnosticDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelinePipelineDiagnosticDataArgs $;

        public Builder() {
            $ = new PipelinePipelineDiagnosticDataArgs();
        }

        public Builder(PipelinePipelineDiagnosticDataArgs defaults) {
            $ = new PipelinePipelineDiagnosticDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Name of the bucket where the object is to be uploaded in the object storage
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the bucket where the object is to be uploaded in the object storage
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param diagnosticState The state of the pipeline diagnostics collection.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticState(@Nullable Output<String> diagnosticState) {
            $.diagnosticState = diagnosticState;
            return this;
        }

        /**
         * @param diagnosticState The state of the pipeline diagnostics collection.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticState(String diagnosticState) {
            return diagnosticState(Output.of(diagnosticState));
        }

        /**
         * @param namespace Name of namespace that serves as a container for all of your buckets
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name of namespace that serves as a container for all of your buckets
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param object Name of the diagnostic collected and uploaded to object storage
         * 
         * @return builder
         * 
         */
        public Builder object(@Nullable Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object Name of the diagnostic collected and uploaded to object storage
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param timeLastCollected The date and time the diagnostic data was last collected for the pipeline. The format is defined by  [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeLastCollected(@Nullable Output<String> timeLastCollected) {
            $.timeLastCollected = timeLastCollected;
            return this;
        }

        /**
         * @param timeLastCollected The date and time the diagnostic data was last collected for the pipeline. The format is defined by  [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeLastCollected(String timeLastCollected) {
            return timeLastCollected(Output.of(timeLastCollected));
        }

        public PipelinePipelineDiagnosticDataArgs build() {
            return $;
        }
    }

}
