// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.inputs.PipelineProcessOptionsInitialDataLoadArgs;
import com.pulumi.oci.GoldenGate.inputs.PipelineProcessOptionsReplicateSchemaChangeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineProcessOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineProcessOptionsArgs Empty = new PipelineProcessOptionsArgs();

    /**
     * (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    @Import(name="initialDataLoad", required=true)
    private Output<PipelineProcessOptionsInitialDataLoadArgs> initialDataLoad;

    /**
     * @return (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public Output<PipelineProcessOptionsInitialDataLoadArgs> initialDataLoad() {
        return this.initialDataLoad;
    }

    /**
     * (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    @Import(name="replicateSchemaChange", required=true)
    private Output<PipelineProcessOptionsReplicateSchemaChangeArgs> replicateSchemaChange;

    /**
     * @return (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public Output<PipelineProcessOptionsReplicateSchemaChangeArgs> replicateSchemaChange() {
        return this.replicateSchemaChange;
    }

    /**
     * (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    @Import(name="shouldRestartOnFailure", required=true)
    private Output<String> shouldRestartOnFailure;

    /**
     * @return (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    public Output<String> shouldRestartOnFailure() {
        return this.shouldRestartOnFailure;
    }

    /**
     * (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
     * 
     */
    @Import(name="startUsingDefaultMapping")
    private @Nullable Output<String> startUsingDefaultMapping;

    /**
     * @return (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
     * 
     */
    public Optional<Output<String>> startUsingDefaultMapping() {
        return Optional.ofNullable(this.startUsingDefaultMapping);
    }

    private PipelineProcessOptionsArgs() {}

    private PipelineProcessOptionsArgs(PipelineProcessOptionsArgs $) {
        this.initialDataLoad = $.initialDataLoad;
        this.replicateSchemaChange = $.replicateSchemaChange;
        this.shouldRestartOnFailure = $.shouldRestartOnFailure;
        this.startUsingDefaultMapping = $.startUsingDefaultMapping;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineProcessOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineProcessOptionsArgs $;

        public Builder() {
            $ = new PipelineProcessOptionsArgs();
        }

        public Builder(PipelineProcessOptionsArgs defaults) {
            $ = new PipelineProcessOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param initialDataLoad (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
         * 
         * @return builder
         * 
         */
        public Builder initialDataLoad(Output<PipelineProcessOptionsInitialDataLoadArgs> initialDataLoad) {
            $.initialDataLoad = initialDataLoad;
            return this;
        }

        /**
         * @param initialDataLoad (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
         * 
         * @return builder
         * 
         */
        public Builder initialDataLoad(PipelineProcessOptionsInitialDataLoadArgs initialDataLoad) {
            return initialDataLoad(Output.of(initialDataLoad));
        }

        /**
         * @param replicateSchemaChange (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
         * 
         * @return builder
         * 
         */
        public Builder replicateSchemaChange(Output<PipelineProcessOptionsReplicateSchemaChangeArgs> replicateSchemaChange) {
            $.replicateSchemaChange = replicateSchemaChange;
            return this;
        }

        /**
         * @param replicateSchemaChange (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
         * 
         * @return builder
         * 
         */
        public Builder replicateSchemaChange(PipelineProcessOptionsReplicateSchemaChangeArgs replicateSchemaChange) {
            return replicateSchemaChange(Output.of(replicateSchemaChange));
        }

        /**
         * @param shouldRestartOnFailure (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder shouldRestartOnFailure(Output<String> shouldRestartOnFailure) {
            $.shouldRestartOnFailure = shouldRestartOnFailure;
            return this;
        }

        /**
         * @param shouldRestartOnFailure (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder shouldRestartOnFailure(String shouldRestartOnFailure) {
            return shouldRestartOnFailure(Output.of(shouldRestartOnFailure));
        }

        /**
         * @param startUsingDefaultMapping (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder startUsingDefaultMapping(@Nullable Output<String> startUsingDefaultMapping) {
            $.startUsingDefaultMapping = startUsingDefaultMapping;
            return this;
        }

        /**
         * @param startUsingDefaultMapping (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
         * 
         * @return builder
         * 
         */
        public Builder startUsingDefaultMapping(String startUsingDefaultMapping) {
            return startUsingDefaultMapping(Output.of(startUsingDefaultMapping));
        }

        public PipelineProcessOptionsArgs build() {
            if ($.initialDataLoad == null) {
                throw new MissingRequiredPropertyException("PipelineProcessOptionsArgs", "initialDataLoad");
            }
            if ($.replicateSchemaChange == null) {
                throw new MissingRequiredPropertyException("PipelineProcessOptionsArgs", "replicateSchemaChange");
            }
            if ($.shouldRestartOnFailure == null) {
                throw new MissingRequiredPropertyException("PipelineProcessOptionsArgs", "shouldRestartOnFailure");
            }
            return $;
        }
    }

}
