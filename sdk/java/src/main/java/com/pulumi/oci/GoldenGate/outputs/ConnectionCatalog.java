// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionCatalog {
    /**
     * @return (Updatable) The active branch of the Nessie catalog from which Iceberg reads and writes table metadata.
     * 
     */
    private @Nullable String branch;
    /**
     * @return (Updatable) The catalog type.
     * 
     */
    private String catalogType;
    /**
     * @return (Updatable) The OAuth client ID used for authentication.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password Oracle GoldenGate uses to connect to Snowflake platform.
     * 
     */
    private @Nullable String clientSecretSecretId;
    /**
     * @return (Updatable) The AWS Glue Catalog ID where Iceberg tables are registered.
     * 
     */
    private @Nullable String glueId;
    /**
     * @return (Updatable) The catalog name within Polaris where Iceberg tables are registered.
     * 
     */
    private @Nullable String name;
    /**
     * @return (Updatable) The Snowflake role used to access Polaris.
     * 
     */
    private @Nullable String principalRole;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the configuration file containing additional properties for the REST catalog. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    private @Nullable String propertiesSecretId;
    /**
     * @return (Updatable) The URL endpoint for the Polaris API. e.g.: &#39;https://&lt;your-snowflake-account&gt;.snowflakecomputing.com/polaris/api/catalog&#39;
     * 
     */
    private @Nullable String uri;

    private ConnectionCatalog() {}
    /**
     * @return (Updatable) The active branch of the Nessie catalog from which Iceberg reads and writes table metadata.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return (Updatable) The catalog type.
     * 
     */
    public String catalogType() {
        return this.catalogType;
    }
    /**
     * @return (Updatable) The OAuth client ID used for authentication.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password Oracle GoldenGate uses to connect to Snowflake platform.
     * 
     */
    public Optional<String> clientSecretSecretId() {
        return Optional.ofNullable(this.clientSecretSecretId);
    }
    /**
     * @return (Updatable) The AWS Glue Catalog ID where Iceberg tables are registered.
     * 
     */
    public Optional<String> glueId() {
        return Optional.ofNullable(this.glueId);
    }
    /**
     * @return (Updatable) The catalog name within Polaris where Iceberg tables are registered.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The Snowflake role used to access Polaris.
     * 
     */
    public Optional<String> principalRole() {
        return Optional.ofNullable(this.principalRole);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the configuration file containing additional properties for the REST catalog. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    public Optional<String> propertiesSecretId() {
        return Optional.ofNullable(this.propertiesSecretId);
    }
    /**
     * @return (Updatable) The URL endpoint for the Polaris API. e.g.: &#39;https://&lt;your-snowflake-account&gt;.snowflakecomputing.com/polaris/api/catalog&#39;
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionCatalog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String branch;
        private String catalogType;
        private @Nullable String clientId;
        private @Nullable String clientSecretSecretId;
        private @Nullable String glueId;
        private @Nullable String name;
        private @Nullable String principalRole;
        private @Nullable String propertiesSecretId;
        private @Nullable String uri;
        public Builder() {}
        public Builder(ConnectionCatalog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.catalogType = defaults.catalogType;
    	      this.clientId = defaults.clientId;
    	      this.clientSecretSecretId = defaults.clientSecretSecretId;
    	      this.glueId = defaults.glueId;
    	      this.name = defaults.name;
    	      this.principalRole = defaults.principalRole;
    	      this.propertiesSecretId = defaults.propertiesSecretId;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder catalogType(String catalogType) {
            if (catalogType == null) {
              throw new MissingRequiredPropertyException("ConnectionCatalog", "catalogType");
            }
            this.catalogType = catalogType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretSecretId(@Nullable String clientSecretSecretId) {

            this.clientSecretSecretId = clientSecretSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder glueId(@Nullable String glueId) {

            this.glueId = glueId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder principalRole(@Nullable String principalRole) {

            this.principalRole = principalRole;
            return this;
        }
        @CustomType.Setter
        public Builder propertiesSecretId(@Nullable String propertiesSecretId) {

            this.propertiesSecretId = propertiesSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        public ConnectionCatalog build() {
            final var _resultValue = new ConnectionCatalog();
            _resultValue.branch = branch;
            _resultValue.catalogType = catalogType;
            _resultValue.clientId = clientId;
            _resultValue.clientSecretSecretId = clientSecretSecretId;
            _resultValue.glueId = glueId;
            _resultValue.name = name;
            _resultValue.principalRole = principalRole;
            _resultValue.propertiesSecretId = propertiesSecretId;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
