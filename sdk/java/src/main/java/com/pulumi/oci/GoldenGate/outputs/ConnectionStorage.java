// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionStorage {
    /**
     * @return (Updatable) Access key ID to access the Amazon S3 bucket.
     * 
     */
    private @Nullable String accessKeyId;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
     * 
     */
    private @Nullable String accountKeySecretId;
    /**
     * @return (Updatable) Sets the Azure storage account name.
     * 
     */
    private @Nullable String accountName;
    /**
     * @return (Updatable) Google Cloud Storage bucket where Iceberg stores metadata and data files.
     * 
     */
    private @Nullable String bucket;
    /**
     * @return (Updatable) The Azure Blob Storage container where Iceberg tables are stored.
     * 
     */
    private @Nullable String container;
    /**
     * @return (Updatable) The Azure Blob Storage endpoint where Iceberg data is stored. e.g.: &#39;https://my-azure-storage-account.blob.core.windows.net&#39;
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return (Updatable) The Google Cloud Project where the bucket exists.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return (Updatable) The AMAZON region where the S3 bucket is hosted. e.g.: &#39;us-east-2&#39;
     * 
     */
    private @Nullable String region;
    /**
     * @return (Updatable) The scheme of the storage.
     * 
     */
    private @Nullable String schemeType;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
     * 
     */
    private @Nullable String secretAccessKeySecretId;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which contains the credentials required to use Google Cloud Storage.
     * 
     */
    private @Nullable String serviceAccountKeyFileSecretId;
    /**
     * @return (Updatable) The storage type used in the Iceberg connection.
     * 
     */
    private String storageType;

    private ConnectionStorage() {}
    /**
     * @return (Updatable) Access key ID to access the Amazon S3 bucket.
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
     * 
     */
    public Optional<String> accountKeySecretId() {
        return Optional.ofNullable(this.accountKeySecretId);
    }
    /**
     * @return (Updatable) Sets the Azure storage account name.
     * 
     */
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }
    /**
     * @return (Updatable) Google Cloud Storage bucket where Iceberg stores metadata and data files.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return (Updatable) The Azure Blob Storage container where Iceberg tables are stored.
     * 
     */
    public Optional<String> container() {
        return Optional.ofNullable(this.container);
    }
    /**
     * @return (Updatable) The Azure Blob Storage endpoint where Iceberg data is stored. e.g.: &#39;https://my-azure-storage-account.blob.core.windows.net&#39;
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return (Updatable) The Google Cloud Project where the bucket exists.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return (Updatable) The AMAZON region where the S3 bucket is hosted. e.g.: &#39;us-east-2&#39;
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return (Updatable) The scheme of the storage.
     * 
     */
    public Optional<String> schemeType() {
        return Optional.ofNullable(this.schemeType);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
     * 
     */
    public Optional<String> secretAccessKeySecretId() {
        return Optional.ofNullable(this.secretAccessKeySecretId);
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which contains the credentials required to use Google Cloud Storage.
     * 
     */
    public Optional<String> serviceAccountKeyFileSecretId() {
        return Optional.ofNullable(this.serviceAccountKeyFileSecretId);
    }
    /**
     * @return (Updatable) The storage type used in the Iceberg connection.
     * 
     */
    public String storageType() {
        return this.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String accountKeySecretId;
        private @Nullable String accountName;
        private @Nullable String bucket;
        private @Nullable String container;
        private @Nullable String endpoint;
        private @Nullable String projectId;
        private @Nullable String region;
        private @Nullable String schemeType;
        private @Nullable String secretAccessKeySecretId;
        private @Nullable String serviceAccountKeyFileSecretId;
        private String storageType;
        public Builder() {}
        public Builder(ConnectionStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.accountKeySecretId = defaults.accountKeySecretId;
    	      this.accountName = defaults.accountName;
    	      this.bucket = defaults.bucket;
    	      this.container = defaults.container;
    	      this.endpoint = defaults.endpoint;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.schemeType = defaults.schemeType;
    	      this.secretAccessKeySecretId = defaults.secretAccessKeySecretId;
    	      this.serviceAccountKeyFileSecretId = defaults.serviceAccountKeyFileSecretId;
    	      this.storageType = defaults.storageType;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {

            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder accountKeySecretId(@Nullable String accountKeySecretId) {

            this.accountKeySecretId = accountKeySecretId;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(@Nullable String accountName) {

            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {

            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder container(@Nullable String container) {

            this.container = container;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {

            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder schemeType(@Nullable String schemeType) {

            this.schemeType = schemeType;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKeySecretId(@Nullable String secretAccessKeySecretId) {

            this.secretAccessKeySecretId = secretAccessKeySecretId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountKeyFileSecretId(@Nullable String serviceAccountKeyFileSecretId) {

            this.serviceAccountKeyFileSecretId = serviceAccountKeyFileSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("ConnectionStorage", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        public ConnectionStorage build() {
            final var _resultValue = new ConnectionStorage();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.accountKeySecretId = accountKeySecretId;
            _resultValue.accountName = accountName;
            _resultValue.bucket = bucket;
            _resultValue.container = container;
            _resultValue.endpoint = endpoint;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.schemeType = schemeType;
            _resultValue.secretAccessKeySecretId = secretAccessKeySecretId;
            _resultValue.serviceAccountKeyFileSecretId = serviceAccountKeyFileSecretId;
            _resultValue.storageType = storageType;
            return _resultValue;
        }
    }
}
