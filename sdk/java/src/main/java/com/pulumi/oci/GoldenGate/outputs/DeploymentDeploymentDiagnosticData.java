// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentDeploymentDiagnosticData {
    /**
     * @return Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    private @Nullable String bucket;
    /**
     * @return The state of the deployment diagnostic collection.
     * 
     */
    private @Nullable String diagnosticState;
    /**
     * @return Name of namespace that serves as a container for all of your buckets
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Name of the diagnostic collected and uploaded to object storage
     * 
     */
    private @Nullable String object;
    /**
     * @return The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeDiagnosticEnd;
    /**
     * @return The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeDiagnosticStart;

    private DeploymentDeploymentDiagnosticData() {}
    /**
     * @return Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return The state of the deployment diagnostic collection.
     * 
     */
    public Optional<String> diagnosticState() {
        return Optional.ofNullable(this.diagnosticState);
    }
    /**
     * @return Name of namespace that serves as a container for all of your buckets
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Name of the diagnostic collected and uploaded to object storage
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeDiagnosticEnd() {
        return Optional.ofNullable(this.timeDiagnosticEnd);
    }
    /**
     * @return The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeDiagnosticStart() {
        return Optional.ofNullable(this.timeDiagnosticStart);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentDeploymentDiagnosticData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bucket;
        private @Nullable String diagnosticState;
        private @Nullable String namespace;
        private @Nullable String object;
        private @Nullable String timeDiagnosticEnd;
        private @Nullable String timeDiagnosticStart;
        public Builder() {}
        public Builder(DeploymentDeploymentDiagnosticData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.diagnosticState = defaults.diagnosticState;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.timeDiagnosticEnd = defaults.timeDiagnosticEnd;
    	      this.timeDiagnosticStart = defaults.timeDiagnosticStart;
        }

        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticState(@Nullable String diagnosticState) {
            this.diagnosticState = diagnosticState;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder timeDiagnosticEnd(@Nullable String timeDiagnosticEnd) {
            this.timeDiagnosticEnd = timeDiagnosticEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeDiagnosticStart(@Nullable String timeDiagnosticStart) {
            this.timeDiagnosticStart = timeDiagnosticStart;
            return this;
        }
        public DeploymentDeploymentDiagnosticData build() {
            final var o = new DeploymentDeploymentDiagnosticData();
            o.bucket = bucket;
            o.diagnosticState = diagnosticState;
            o.namespace = namespace;
            o.object = object;
            o.timeDiagnosticEnd = timeDiagnosticEnd;
            o.timeDiagnosticStart = timeDiagnosticStart;
            return o;
        }
    }
}
