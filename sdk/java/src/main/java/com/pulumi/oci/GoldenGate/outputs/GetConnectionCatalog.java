// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectionCatalog {
    /**
     * @return The active branch of the Nessie catalog from which Iceberg reads and writes table metadata.
     * 
     */
    private String branch;
    /**
     * @return The catalog type.
     * 
     */
    private String catalogType;
    /**
     * @return Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    private String clientId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Note: When provided, &#39;clientSecret&#39; field must not be provided.
     * 
     */
    private String clientSecretSecretId;
    /**
     * @return The AWS Glue Catalog ID where Iceberg tables are registered.
     * 
     */
    private String glueId;
    /**
     * @return The catalog name within Polaris where Iceberg tables are registered.
     * 
     */
    private String name;
    /**
     * @return The Snowflake role used to access Polaris.
     * 
     */
    private String principalRole;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the configuration file containing additional properties for the REST catalog. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    private String propertiesSecretId;
    /**
     * @return The URL endpoint for the Polaris API. e.g.: &#39;https://&lt;your-snowflake-account&gt;.snowflakecomputing.com/polaris/api/catalog&#39;
     * 
     */
    private String uri;

    private GetConnectionCatalog() {}
    /**
     * @return The active branch of the Nessie catalog from which Iceberg reads and writes table metadata.
     * 
     */
    public String branch() {
        return this.branch;
    }
    /**
     * @return The catalog type.
     * 
     */
    public String catalogType() {
        return this.catalogType;
    }
    /**
     * @return Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored. Note: When provided, &#39;clientSecret&#39; field must not be provided.
     * 
     */
    public String clientSecretSecretId() {
        return this.clientSecretSecretId;
    }
    /**
     * @return The AWS Glue Catalog ID where Iceberg tables are registered.
     * 
     */
    public String glueId() {
        return this.glueId;
    }
    /**
     * @return The catalog name within Polaris where Iceberg tables are registered.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Snowflake role used to access Polaris.
     * 
     */
    public String principalRole() {
        return this.principalRole;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the configuration file containing additional properties for the REST catalog. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
     * 
     */
    public String propertiesSecretId() {
        return this.propertiesSecretId;
    }
    /**
     * @return The URL endpoint for the Polaris API. e.g.: &#39;https://&lt;your-snowflake-account&gt;.snowflakecomputing.com/polaris/api/catalog&#39;
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionCatalog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private String catalogType;
        private String clientId;
        private String clientSecretSecretId;
        private String glueId;
        private String name;
        private String principalRole;
        private String propertiesSecretId;
        private String uri;
        public Builder() {}
        public Builder(GetConnectionCatalog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.catalogType = defaults.catalogType;
    	      this.clientId = defaults.clientId;
    	      this.clientSecretSecretId = defaults.clientSecretSecretId;
    	      this.glueId = defaults.glueId;
    	      this.name = defaults.name;
    	      this.principalRole = defaults.principalRole;
    	      this.propertiesSecretId = defaults.propertiesSecretId;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            if (branch == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "branch");
            }
            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder catalogType(String catalogType) {
            if (catalogType == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "catalogType");
            }
            this.catalogType = catalogType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretSecretId(String clientSecretSecretId) {
            if (clientSecretSecretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "clientSecretSecretId");
            }
            this.clientSecretSecretId = clientSecretSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder glueId(String glueId) {
            if (glueId == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "glueId");
            }
            this.glueId = glueId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder principalRole(String principalRole) {
            if (principalRole == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "principalRole");
            }
            this.principalRole = principalRole;
            return this;
        }
        @CustomType.Setter
        public Builder propertiesSecretId(String propertiesSecretId) {
            if (propertiesSecretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "propertiesSecretId");
            }
            this.propertiesSecretId = propertiesSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetConnectionCatalog", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetConnectionCatalog build() {
            final var _resultValue = new GetConnectionCatalog();
            _resultValue.branch = branch;
            _resultValue.catalogType = catalogType;
            _resultValue.clientId = clientId;
            _resultValue.clientSecretSecretId = clientSecretSecretId;
            _resultValue.glueId = glueId;
            _resultValue.name = name;
            _resultValue.principalRole = principalRole;
            _resultValue.propertiesSecretId = propertiesSecretId;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
