// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectionStorage {
    /**
     * @return Access key ID to access the Amazon S3 bucket.
     * 
     */
    private String accessKeyId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
     * 
     */
    private String accountKeySecretId;
    /**
     * @return Sets the Azure storage account name.
     * 
     */
    private String accountName;
    /**
     * @return Google Cloud Storage bucket where Iceberg stores metadata and data files.
     * 
     */
    private String bucket;
    /**
     * @return The Azure Blob Storage container where Iceberg tables are stored.
     * 
     */
    private String container;
    /**
     * @return The Azure Blob Storage endpoint where Iceberg data is stored. e.g.: &#39;https://my-azure-storage-account.blob.core.windows.net&#39;
     * 
     */
    private String endpoint;
    /**
     * @return The Google Cloud Project where the bucket exists.
     * 
     */
    private String projectId;
    /**
     * @return The AMAZON region where the S3 bucket is hosted. e.g.: &#39;us-east-2&#39;
     * 
     */
    private String region;
    /**
     * @return The scheme of the storage.
     * 
     */
    private String schemeType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
     * 
     */
    private String secretAccessKeySecretId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which contains the credentials required to use Google Cloud Storage.
     * 
     */
    private String serviceAccountKeyFileSecretId;
    /**
     * @return The storage type used in the Iceberg connection.
     * 
     */
    private String storageType;

    private GetConnectionStorage() {}
    /**
     * @return Access key ID to access the Amazon S3 bucket.
     * 
     */
    public String accessKeyId() {
        return this.accessKeyId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
     * 
     */
    public String accountKeySecretId() {
        return this.accountKeySecretId;
    }
    /**
     * @return Sets the Azure storage account name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Google Cloud Storage bucket where Iceberg stores metadata and data files.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The Azure Blob Storage container where Iceberg tables are stored.
     * 
     */
    public String container() {
        return this.container;
    }
    /**
     * @return The Azure Blob Storage endpoint where Iceberg data is stored. e.g.: &#39;https://my-azure-storage-account.blob.core.windows.net&#39;
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The Google Cloud Project where the bucket exists.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The AMAZON region where the S3 bucket is hosted. e.g.: &#39;us-east-2&#39;
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The scheme of the storage.
     * 
     */
    public String schemeType() {
        return this.schemeType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
     * 
     */
    public String secretAccessKeySecretId() {
        return this.secretAccessKeySecretId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the service account key file is stored, which contains the credentials required to use Google Cloud Storage.
     * 
     */
    public String serviceAccountKeyFileSecretId() {
        return this.serviceAccountKeyFileSecretId;
    }
    /**
     * @return The storage type used in the Iceberg connection.
     * 
     */
    public String storageType() {
        return this.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKeyId;
        private String accountKeySecretId;
        private String accountName;
        private String bucket;
        private String container;
        private String endpoint;
        private String projectId;
        private String region;
        private String schemeType;
        private String secretAccessKeySecretId;
        private String serviceAccountKeyFileSecretId;
        private String storageType;
        public Builder() {}
        public Builder(GetConnectionStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.accountKeySecretId = defaults.accountKeySecretId;
    	      this.accountName = defaults.accountName;
    	      this.bucket = defaults.bucket;
    	      this.container = defaults.container;
    	      this.endpoint = defaults.endpoint;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.schemeType = defaults.schemeType;
    	      this.secretAccessKeySecretId = defaults.secretAccessKeySecretId;
    	      this.serviceAccountKeyFileSecretId = defaults.serviceAccountKeyFileSecretId;
    	      this.storageType = defaults.storageType;
        }

        @CustomType.Setter
        public Builder accessKeyId(String accessKeyId) {
            if (accessKeyId == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "accessKeyId");
            }
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder accountKeySecretId(String accountKeySecretId) {
            if (accountKeySecretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "accountKeySecretId");
            }
            this.accountKeySecretId = accountKeySecretId;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder container(String container) {
            if (container == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "container");
            }
            this.container = container;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder schemeType(String schemeType) {
            if (schemeType == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "schemeType");
            }
            this.schemeType = schemeType;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKeySecretId(String secretAccessKeySecretId) {
            if (secretAccessKeySecretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "secretAccessKeySecretId");
            }
            this.secretAccessKeySecretId = secretAccessKeySecretId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountKeyFileSecretId(String serviceAccountKeyFileSecretId) {
            if (serviceAccountKeyFileSecretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "serviceAccountKeyFileSecretId");
            }
            this.serviceAccountKeyFileSecretId = serviceAccountKeyFileSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetConnectionStorage", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        public GetConnectionStorage build() {
            final var _resultValue = new GetConnectionStorage();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.accountKeySecretId = accountKeySecretId;
            _resultValue.accountName = accountName;
            _resultValue.bucket = bucket;
            _resultValue.container = container;
            _resultValue.endpoint = endpoint;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.schemeType = schemeType;
            _resultValue.secretAccessKeySecretId = secretAccessKeySecretId;
            _resultValue.serviceAccountKeyFileSecretId = serviceAccountKeyFileSecretId;
            _resultValue.storageType = storageType;
            return _resultValue;
        }
    }
}
