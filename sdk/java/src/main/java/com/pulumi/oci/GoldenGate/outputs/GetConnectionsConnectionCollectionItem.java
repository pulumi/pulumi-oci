// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.GoldenGate.outputs.GetConnectionsConnectionCollectionItemAdditionalAttribute;
import com.pulumi.oci.GoldenGate.outputs.GetConnectionsConnectionCollectionItemBootstrapServer;
import com.pulumi.oci.GoldenGate.outputs.GetConnectionsConnectionCollectionItemIngressIp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsConnectionCollectionItem {
    /**
     * @return Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    private @Nullable String accessKeyId;
    private @Nullable String accountKey;
    /**
     * @return Sets the Azure storage account name.
     * 
     */
    private @Nullable String accountName;
    /**
     * @return An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    private @Nullable List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes;
    /**
     * @return Used authentication mechanism to access Azure Data Lake Storage.
     * 
     */
    private @Nullable String authenticationType;
    /**
     * @return Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    private @Nullable String azureTenantId;
    /**
     * @return Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    private @Nullable List<GetConnectionsConnectionCollectionItemBootstrapServer> bootstrapServers;
    /**
     * @return Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    private @Nullable String clientId;
    private @Nullable String clientSecret;
    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    private @Nullable String connectionFactory;
    /**
     * @return JDBC connection string. e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;
     * 
     */
    private @Nullable String connectionString;
    /**
     * @return The array of connection types.
     * 
     */
    private @Nullable String connectionType;
    /**
     * @return JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
     * 
     */
    private @Nullable String connectionUrl;
    private @Nullable String consumerProperties;
    private @Nullable String coreSiteXml;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return The name of the database.
     * 
     */
    private @Nullable String databaseName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    private @Nullable String deploymentId;
    /**
     * @return Metadata about this specific object.
     * 
     */
    private @Nullable String description;
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The name or address of a host.
     * 
     */
    private @Nullable String host;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
     * 
     */
    private @Nullable String id;
    /**
     * @return List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
     * 
     */
    private @Nullable List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps;
    /**
     * @return The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    private @Nullable String jndiConnectionFactory;
    /**
     * @return The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    private @Nullable String jndiInitialContextFactory;
    /**
     * @return The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    private @Nullable String jndiProviderUrl;
    private @Nullable String jndiSecurityCredentials;
    /**
     * @return Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    private @Nullable String jndiSecurityPrincipal;
    /**
     * @return Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    private @Nullable String keyId;
    private @Nullable String keyStore;
    private @Nullable String keyStorePassword;
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    private @Nullable List<String> nsgIds;
    private @Nullable String password;
    /**
     * @return The port of an endpoint usually specified for a connection.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    private @Nullable String privateIp;
    private @Nullable String privateKeyFile;
    private @Nullable String privateKeyPassphrase;
    private @Nullable String producerProperties;
    private @Nullable String publicKeyFingerprint;
    /**
     * @return The name of the region. e.g.: us-ashburn-1
     * 
     */
    private @Nullable String region;
    private @Nullable String sasToken;
    private @Nullable String secretAccessKey;
    /**
     * @return Security protocol for PostgreSQL / Microsoft SQL Server..
     * 
     */
    private @Nullable String securityProtocol;
    /**
     * @return The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    private @Nullable String sessionMode;
    /**
     * @return If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    private @Nullable Boolean shouldUseJndi;
    /**
     * @return If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    private @Nullable Boolean shouldValidateServerCertificate;
    /**
     * @return Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
     * 
     */
    private @Nullable String sslCa;
    private @Nullable String sslCert;
    private @Nullable String sslCrl;
    private @Nullable String sslKey;
    private @Nullable String sslKeyPassword;
    /**
     * @return SSL mode for PostgreSQL.
     * 
     */
    private @Nullable String sslMode;
    /**
     * @return A filter to return only connections having the &#39;lifecycleState&#39; given.
     * 
     */
    private @Nullable String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    private @Nullable String streamPoolId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The array of technology types.
     * 
     */
    private @Nullable String technologyType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    private @Nullable String tenancyId;
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeUpdated;
    private @Nullable String trustStore;
    private @Nullable String trustStorePassword;
    /**
     * @return Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    private @Nullable String url;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database/Object Storage. The user must have write access to the table they want to connect to.
     * 
     */
    private @Nullable String userId;
    /**
     * @return The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivity requirements defined in it.
     * 
     */
    private @Nullable String username;
    /**
     * @return Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    private @Nullable String vaultId;
    private @Nullable String wallet;

    private GetConnectionsConnectionCollectionItem() {}
    /**
     * @return Access key ID to access the Amazon S3 bucket. e.g.: &#34;this-is-not-the-secret&#34;
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    public Optional<String> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }
    /**
     * @return Sets the Azure storage account name.
     * 
     */
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }
    /**
     * @return An array of name-value pair attribute entries. Used as additional parameters in connection string.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes() {
        return this.additionalAttributes == null ? List.of() : this.additionalAttributes;
    }
    /**
     * @return Used authentication mechanism to access Azure Data Lake Storage.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * @return Azure tenant ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
     * 
     */
    public Optional<String> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }
    /**
     * @return Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `&#34;server1.example.com:9092,server2.example.com:9092&#34;`
     * 
     */
    public List<GetConnectionsConnectionCollectionItemBootstrapServer> bootstrapServers() {
        return this.bootstrapServers == null ? List.of() : this.bootstrapServers;
    }
    /**
     * @return Azure client ID of the application. This property is required when &#39;authenticationType&#39; is set to &#39;AZURE_ACTIVE_DIRECTORY&#39;. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The of Java class implementing javax.jms.ConnectionFactory interface supplied by the Java Message Service provider. e.g.: &#39;com.stc.jmsjca.core.JConnectionFactoryXA&#39;
     * 
     */
    public Optional<String> connectionFactory() {
        return Optional.ofNullable(this.connectionFactory);
    }
    /**
     * @return JDBC connection string. e.g.: &#39;jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;&#39;
     * 
     */
    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    /**
     * @return The array of connection types.
     * 
     */
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    /**
     * @return JDBC connection URL. e.g.: &#39;jdbc:snowflake://&lt;account_name&gt;.snowflakecomputing.com/?warehouse=&lt;warehouse-name&gt;&amp;db=&lt;db-name&gt;&#39;
     * 
     */
    public Optional<String> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }
    public Optional<String> consumerProperties() {
        return Optional.ofNullable(this.consumerProperties);
    }
    public Optional<String> coreSiteXml() {
        return Optional.ofNullable(this.coreSiteXml);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Autonomous Json Database.
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return The name of the database.
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    public Optional<String> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }
    /**
     * @return Metadata about this specific object.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The name or address of a host.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connection being referenced.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return List of ingress IP addresses from where the GoldenGate deployment connects to this connection&#39;s privateIp.  Customers may optionally set up ingress security rules to restrict traffic from these IP addresses.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps() {
        return this.ingressIps == null ? List.of() : this.ingressIps;
    }
    /**
     * @return The Connection Factory can be looked up using this name. e.g.: &#39;ConnectionFactory&#39;
     * 
     */
    public Optional<String> jndiConnectionFactory() {
        return Optional.ofNullable(this.jndiConnectionFactory);
    }
    /**
     * @return The implementation of javax.naming.spi.InitialContextFactory interface that the client uses to obtain initial naming context. e.g.: &#39;org.apache.activemq.jndi.ActiveMQInitialContextFactory&#39;
     * 
     */
    public Optional<String> jndiInitialContextFactory() {
        return Optional.ofNullable(this.jndiInitialContextFactory);
    }
    /**
     * @return The URL that Java Message Service will use to contact the JNDI provider. e.g.: &#39;tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000&#39;
     * 
     */
    public Optional<String> jndiProviderUrl() {
        return Optional.ofNullable(this.jndiProviderUrl);
    }
    public Optional<String> jndiSecurityCredentials() {
        return Optional.ofNullable(this.jndiSecurityCredentials);
    }
    /**
     * @return Specifies the identity of the principal (user) to be authenticated. e.g.: &#39;admin2&#39;
     * 
     */
    public Optional<String> jndiSecurityPrincipal() {
        return Optional.ofNullable(this.jndiSecurityPrincipal);
    }
    /**
     * @return Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    public Optional<String> keyStore() {
        return Optional.ofNullable(this.keyStore);
    }
    public Optional<String> keyStorePassword() {
        return Optional.ofNullable(this.keyStorePassword);
    }
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds == null ? List.of() : this.nsgIds;
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The port of an endpoint usually specified for a connection.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The private IP address of the connection&#39;s endpoint in the customer&#39;s VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
     * 
     */
    public Optional<String> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }
    public Optional<String> privateKeyFile() {
        return Optional.ofNullable(this.privateKeyFile);
    }
    public Optional<String> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }
    public Optional<String> producerProperties() {
        return Optional.ofNullable(this.producerProperties);
    }
    public Optional<String> publicKeyFingerprint() {
        return Optional.ofNullable(this.publicKeyFingerprint);
    }
    /**
     * @return The name of the region. e.g.: us-ashburn-1
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<String> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }
    public Optional<String> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }
    /**
     * @return Security protocol for PostgreSQL / Microsoft SQL Server..
     * 
     */
    public Optional<String> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }
    /**
     * @return The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    public Optional<String> sessionMode() {
        return Optional.ofNullable(this.sessionMode);
    }
    /**
     * @return If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
     * 
     */
    public Optional<Boolean> shouldUseJndi() {
        return Optional.ofNullable(this.shouldUseJndi);
    }
    /**
     * @return If set to true, the driver validates the certificate that is sent by the database server.
     * 
     */
    public Optional<Boolean> shouldValidateServerCertificate() {
        return Optional.ofNullable(this.shouldValidateServerCertificate);
    }
    /**
     * @return Database Certificate - The base64 encoded content of pem file containing the server public key (for 1-way SSL).
     * 
     */
    public Optional<String> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }
    public Optional<String> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }
    public Optional<String> sslCrl() {
        return Optional.ofNullable(this.sslCrl);
    }
    public Optional<String> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }
    public Optional<String> sslKeyPassword() {
        return Optional.ofNullable(this.sslKeyPassword);
    }
    /**
     * @return SSL mode for PostgreSQL.
     * 
     */
    public Optional<String> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }
    /**
     * @return A filter to return only connections having the &#39;lifecycleState&#39; given.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
     * 
     */
    public Optional<String> streamPoolId() {
        return Optional.ofNullable(this.streamPoolId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The array of technology types.
     * 
     */
    public Optional<String> technologyType() {
        return Optional.ofNullable(this.technologyType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
     * 
     */
    public Optional<String> tenancyId() {
        return Optional.ofNullable(this.tenancyId);
    }
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    public Optional<String> trustStore() {
        return Optional.ofNullable(this.trustStore);
    }
    public Optional<String> trustStorePassword() {
        return Optional.ofNullable(this.trustStorePassword);
    }
    /**
     * @return Kafka Schema Registry URL. e.g.: &#39;https://server1.us.oracle.com:8081&#39;
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Oracle NoSQL database/Object Storage. The user must have write access to the table they want to connect to.
     * 
     */
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    /**
     * @return The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivity requirements defined in it.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }
    public Optional<String> wallet() {
        return Optional.ofNullable(this.wallet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String accountKey;
        private @Nullable String accountName;
        private @Nullable List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes;
        private @Nullable String authenticationType;
        private @Nullable String azureTenantId;
        private @Nullable List<GetConnectionsConnectionCollectionItemBootstrapServer> bootstrapServers;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String compartmentId;
        private @Nullable String connectionFactory;
        private @Nullable String connectionString;
        private @Nullable String connectionType;
        private @Nullable String connectionUrl;
        private @Nullable String consumerProperties;
        private @Nullable String coreSiteXml;
        private @Nullable String databaseId;
        private @Nullable String databaseName;
        private @Nullable String dbSystemId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String deploymentId;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String endpoint;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String host;
        private @Nullable String id;
        private @Nullable List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps;
        private @Nullable String jndiConnectionFactory;
        private @Nullable String jndiInitialContextFactory;
        private @Nullable String jndiProviderUrl;
        private @Nullable String jndiSecurityCredentials;
        private @Nullable String jndiSecurityPrincipal;
        private @Nullable String keyId;
        private @Nullable String keyStore;
        private @Nullable String keyStorePassword;
        private @Nullable String lifecycleDetails;
        private @Nullable List<String> nsgIds;
        private @Nullable String password;
        private @Nullable Integer port;
        private @Nullable String privateIp;
        private @Nullable String privateKeyFile;
        private @Nullable String privateKeyPassphrase;
        private @Nullable String producerProperties;
        private @Nullable String publicKeyFingerprint;
        private @Nullable String region;
        private @Nullable String sasToken;
        private @Nullable String secretAccessKey;
        private @Nullable String securityProtocol;
        private @Nullable String sessionMode;
        private @Nullable Boolean shouldUseJndi;
        private @Nullable Boolean shouldValidateServerCertificate;
        private @Nullable String sslCa;
        private @Nullable String sslCert;
        private @Nullable String sslCrl;
        private @Nullable String sslKey;
        private @Nullable String sslKeyPassword;
        private @Nullable String sslMode;
        private @Nullable String state;
        private @Nullable String streamPoolId;
        private @Nullable String subnetId;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String technologyType;
        private @Nullable String tenancyId;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String trustStore;
        private @Nullable String trustStorePassword;
        private @Nullable String url;
        private @Nullable String userId;
        private @Nullable String username;
        private @Nullable String vaultId;
        private @Nullable String wallet;
        public Builder() {}
        public Builder(GetConnectionsConnectionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.accountKey = defaults.accountKey;
    	      this.accountName = defaults.accountName;
    	      this.additionalAttributes = defaults.additionalAttributes;
    	      this.authenticationType = defaults.authenticationType;
    	      this.azureTenantId = defaults.azureTenantId;
    	      this.bootstrapServers = defaults.bootstrapServers;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionFactory = defaults.connectionFactory;
    	      this.connectionString = defaults.connectionString;
    	      this.connectionType = defaults.connectionType;
    	      this.connectionUrl = defaults.connectionUrl;
    	      this.consumerProperties = defaults.consumerProperties;
    	      this.coreSiteXml = defaults.coreSiteXml;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseName = defaults.databaseName;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.definedTags = defaults.definedTags;
    	      this.deploymentId = defaults.deploymentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpoint = defaults.endpoint;
    	      this.freeformTags = defaults.freeformTags;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.ingressIps = defaults.ingressIps;
    	      this.jndiConnectionFactory = defaults.jndiConnectionFactory;
    	      this.jndiInitialContextFactory = defaults.jndiInitialContextFactory;
    	      this.jndiProviderUrl = defaults.jndiProviderUrl;
    	      this.jndiSecurityCredentials = defaults.jndiSecurityCredentials;
    	      this.jndiSecurityPrincipal = defaults.jndiSecurityPrincipal;
    	      this.keyId = defaults.keyId;
    	      this.keyStore = defaults.keyStore;
    	      this.keyStorePassword = defaults.keyStorePassword;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.nsgIds = defaults.nsgIds;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateIp = defaults.privateIp;
    	      this.privateKeyFile = defaults.privateKeyFile;
    	      this.privateKeyPassphrase = defaults.privateKeyPassphrase;
    	      this.producerProperties = defaults.producerProperties;
    	      this.publicKeyFingerprint = defaults.publicKeyFingerprint;
    	      this.region = defaults.region;
    	      this.sasToken = defaults.sasToken;
    	      this.secretAccessKey = defaults.secretAccessKey;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.sessionMode = defaults.sessionMode;
    	      this.shouldUseJndi = defaults.shouldUseJndi;
    	      this.shouldValidateServerCertificate = defaults.shouldValidateServerCertificate;
    	      this.sslCa = defaults.sslCa;
    	      this.sslCert = defaults.sslCert;
    	      this.sslCrl = defaults.sslCrl;
    	      this.sslKey = defaults.sslKey;
    	      this.sslKeyPassword = defaults.sslKeyPassword;
    	      this.sslMode = defaults.sslMode;
    	      this.state = defaults.state;
    	      this.streamPoolId = defaults.streamPoolId;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.technologyType = defaults.technologyType;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.trustStore = defaults.trustStore;
    	      this.trustStorePassword = defaults.trustStorePassword;
    	      this.url = defaults.url;
    	      this.userId = defaults.userId;
    	      this.username = defaults.username;
    	      this.vaultId = defaults.vaultId;
    	      this.wallet = defaults.wallet;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder accountKey(@Nullable String accountKey) {
            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(@Nullable String accountName) {
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder additionalAttributes(@Nullable List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes) {
            this.additionalAttributes = additionalAttributes;
            return this;
        }
        public Builder additionalAttributes(GetConnectionsConnectionCollectionItemAdditionalAttribute... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }
        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder azureTenantId(@Nullable String azureTenantId) {
            this.azureTenantId = azureTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder bootstrapServers(@Nullable List<GetConnectionsConnectionCollectionItemBootstrapServer> bootstrapServers) {
            this.bootstrapServers = bootstrapServers;
            return this;
        }
        public Builder bootstrapServers(GetConnectionsConnectionCollectionItemBootstrapServer... bootstrapServers) {
            return bootstrapServers(List.of(bootstrapServers));
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionFactory(@Nullable String connectionFactory) {
            this.connectionFactory = connectionFactory;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable String connectionString) {
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(@Nullable String connectionType) {
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionUrl(@Nullable String connectionUrl) {
            this.connectionUrl = connectionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder consumerProperties(@Nullable String consumerProperties) {
            this.consumerProperties = consumerProperties;
            return this;
        }
        @CustomType.Setter
        public Builder coreSiteXml(@Nullable String coreSiteXml) {
            this.coreSiteXml = coreSiteXml;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentId(@Nullable String deploymentId) {
            this.deploymentId = deploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingressIps(@Nullable List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps) {
            this.ingressIps = ingressIps;
            return this;
        }
        public Builder ingressIps(GetConnectionsConnectionCollectionItemIngressIp... ingressIps) {
            return ingressIps(List.of(ingressIps));
        }
        @CustomType.Setter
        public Builder jndiConnectionFactory(@Nullable String jndiConnectionFactory) {
            this.jndiConnectionFactory = jndiConnectionFactory;
            return this;
        }
        @CustomType.Setter
        public Builder jndiInitialContextFactory(@Nullable String jndiInitialContextFactory) {
            this.jndiInitialContextFactory = jndiInitialContextFactory;
            return this;
        }
        @CustomType.Setter
        public Builder jndiProviderUrl(@Nullable String jndiProviderUrl) {
            this.jndiProviderUrl = jndiProviderUrl;
            return this;
        }
        @CustomType.Setter
        public Builder jndiSecurityCredentials(@Nullable String jndiSecurityCredentials) {
            this.jndiSecurityCredentials = jndiSecurityCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder jndiSecurityPrincipal(@Nullable String jndiSecurityPrincipal) {
            this.jndiSecurityPrincipal = jndiSecurityPrincipal;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyStore(@Nullable String keyStore) {
            this.keyStore = keyStore;
            return this;
        }
        @CustomType.Setter
        public Builder keyStorePassword(@Nullable String keyStorePassword) {
            this.keyStorePassword = keyStorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(@Nullable List<String> nsgIds) {
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(@Nullable String privateIp) {
            this.privateIp = privateIp;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyFile(@Nullable String privateKeyFile) {
            this.privateKeyFile = privateKeyFile;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyPassphrase(@Nullable String privateKeyPassphrase) {
            this.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder producerProperties(@Nullable String producerProperties) {
            this.producerProperties = producerProperties;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyFingerprint(@Nullable String publicKeyFingerprint) {
            this.publicKeyFingerprint = publicKeyFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder sasToken(@Nullable String sasToken) {
            this.sasToken = sasToken;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(@Nullable String secretAccessKey) {
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder securityProtocol(@Nullable String securityProtocol) {
            this.securityProtocol = securityProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder sessionMode(@Nullable String sessionMode) {
            this.sessionMode = sessionMode;
            return this;
        }
        @CustomType.Setter
        public Builder shouldUseJndi(@Nullable Boolean shouldUseJndi) {
            this.shouldUseJndi = shouldUseJndi;
            return this;
        }
        @CustomType.Setter
        public Builder shouldValidateServerCertificate(@Nullable Boolean shouldValidateServerCertificate) {
            this.shouldValidateServerCertificate = shouldValidateServerCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(@Nullable String sslCa) {
            this.sslCa = sslCa;
            return this;
        }
        @CustomType.Setter
        public Builder sslCert(@Nullable String sslCert) {
            this.sslCert = sslCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslCrl(@Nullable String sslCrl) {
            this.sslCrl = sslCrl;
            return this;
        }
        @CustomType.Setter
        public Builder sslKey(@Nullable String sslKey) {
            this.sslKey = sslKey;
            return this;
        }
        @CustomType.Setter
        public Builder sslKeyPassword(@Nullable String sslKeyPassword) {
            this.sslKeyPassword = sslKeyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(@Nullable String sslMode) {
            this.sslMode = sslMode;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamPoolId(@Nullable String streamPoolId) {
            this.streamPoolId = streamPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder technologyType(@Nullable String technologyType) {
            this.technologyType = technologyType;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(@Nullable String tenancyId) {
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder trustStore(@Nullable String trustStore) {
            this.trustStore = trustStore;
            return this;
        }
        @CustomType.Setter
        public Builder trustStorePassword(@Nullable String trustStorePassword) {
            this.trustStorePassword = trustStorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        @CustomType.Setter
        public Builder wallet(@Nullable String wallet) {
            this.wallet = wallet;
            return this;
        }
        public GetConnectionsConnectionCollectionItem build() {
            final var o = new GetConnectionsConnectionCollectionItem();
            o.accessKeyId = accessKeyId;
            o.accountKey = accountKey;
            o.accountName = accountName;
            o.additionalAttributes = additionalAttributes;
            o.authenticationType = authenticationType;
            o.azureTenantId = azureTenantId;
            o.bootstrapServers = bootstrapServers;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.compartmentId = compartmentId;
            o.connectionFactory = connectionFactory;
            o.connectionString = connectionString;
            o.connectionType = connectionType;
            o.connectionUrl = connectionUrl;
            o.consumerProperties = consumerProperties;
            o.coreSiteXml = coreSiteXml;
            o.databaseId = databaseId;
            o.databaseName = databaseName;
            o.dbSystemId = dbSystemId;
            o.definedTags = definedTags;
            o.deploymentId = deploymentId;
            o.description = description;
            o.displayName = displayName;
            o.endpoint = endpoint;
            o.freeformTags = freeformTags;
            o.host = host;
            o.id = id;
            o.ingressIps = ingressIps;
            o.jndiConnectionFactory = jndiConnectionFactory;
            o.jndiInitialContextFactory = jndiInitialContextFactory;
            o.jndiProviderUrl = jndiProviderUrl;
            o.jndiSecurityCredentials = jndiSecurityCredentials;
            o.jndiSecurityPrincipal = jndiSecurityPrincipal;
            o.keyId = keyId;
            o.keyStore = keyStore;
            o.keyStorePassword = keyStorePassword;
            o.lifecycleDetails = lifecycleDetails;
            o.nsgIds = nsgIds;
            o.password = password;
            o.port = port;
            o.privateIp = privateIp;
            o.privateKeyFile = privateKeyFile;
            o.privateKeyPassphrase = privateKeyPassphrase;
            o.producerProperties = producerProperties;
            o.publicKeyFingerprint = publicKeyFingerprint;
            o.region = region;
            o.sasToken = sasToken;
            o.secretAccessKey = secretAccessKey;
            o.securityProtocol = securityProtocol;
            o.sessionMode = sessionMode;
            o.shouldUseJndi = shouldUseJndi;
            o.shouldValidateServerCertificate = shouldValidateServerCertificate;
            o.sslCa = sslCa;
            o.sslCert = sslCert;
            o.sslCrl = sslCrl;
            o.sslKey = sslKey;
            o.sslKeyPassword = sslKeyPassword;
            o.sslMode = sslMode;
            o.state = state;
            o.streamPoolId = streamPoolId;
            o.subnetId = subnetId;
            o.systemTags = systemTags;
            o.technologyType = technologyType;
            o.tenancyId = tenancyId;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.trustStore = trustStore;
            o.trustStorePassword = trustStorePassword;
            o.url = url;
            o.userId = userId;
            o.username = username;
            o.vaultId = vaultId;
            o.wallet = wallet;
            return o;
        }
    }
}
