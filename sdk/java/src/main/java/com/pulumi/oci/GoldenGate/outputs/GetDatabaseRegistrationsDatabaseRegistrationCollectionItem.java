// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseRegistrationsDatabaseRegistrationCollectionItem {
    /**
     * @return Credential store alias.
     * 
     */
    private @Nullable String aliasName;
    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    private @Nullable String connectionString;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Metadata about this specific object.
     * 
     */
    private @Nullable String description;
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return A three-label Fully Qualified Domain Name (FQDN) for a resource.
     * 
     */
    private @Nullable String fqdn;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
     * 
     */
    private @Nullable String id;
    /**
     * @return The private IP address in the customer&#39;s VCN of the customer&#39;s endpoint, typically a database.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    private @Nullable String keyId;
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    private @Nullable String lifecycleDetails;
    private @Nullable String password;
    /**
     * @return A Private Endpoint IP address created in the customer&#39;s subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
     * 
     */
    private @Nullable String rcePrivateIp;
    /**
     * @return The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    private @Nullable String secretCompartmentId;
    /**
     * @return The OCID of the customer&#39;s GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
     * 
     */
    private @Nullable String secretId;
    /**
     * @return The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    private @Nullable String sessionMode;
    /**
     * @return A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    private @Nullable String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    private @Nullable String username;
    /**
     * @return Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    private @Nullable String vaultId;
    private @Nullable String wallet;

    private GetDatabaseRegistrationsDatabaseRegistrationCollectionItem() {}
    /**
     * @return Credential store alias.
     * 
     */
    public Optional<String> aliasName() {
        return Optional.ofNullable(this.aliasName);
    }
    /**
     * @return The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Metadata about this specific object.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return A three-label Fully Qualified Domain Name (FQDN) for a resource.
     * 
     */
    public Optional<String> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The private IP address in the customer&#39;s VCN of the customer&#39;s endpoint, typically a database.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return Refers to the customer&#39;s master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return A Private Endpoint IP address created in the customer&#39;s subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
     * 
     */
    public Optional<String> rcePrivateIp() {
        return Optional.ofNullable(this.rcePrivateIp);
    }
    /**
     * @return The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
     * 
     */
    public Optional<String> secretCompartmentId() {
        return Optional.ofNullable(this.secretCompartmentId);
    }
    /**
     * @return The OCID of the customer&#39;s GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
     * 
     */
    public Optional<String> secretId() {
        return Optional.ofNullable(this.secretId);
    }
    /**
     * @return The mode of the database connection session to be established by the data client. &#39;REDIRECT&#39; - for a RAC database, &#39;DIRECT&#39; - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
     * 
     */
    public Optional<String> sessionMode() {
        return Optional.ofNullable(this.sessionMode);
    }
    /**
     * @return A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return Refers to the customer&#39;s vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }
    public Optional<String> wallet() {
        return Optional.ofNullable(this.wallet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseRegistrationsDatabaseRegistrationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aliasName;
        private @Nullable String compartmentId;
        private @Nullable String connectionString;
        private @Nullable String databaseId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String fqdn;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String ipAddress;
        private @Nullable String keyId;
        private @Nullable String lifecycleDetails;
        private @Nullable String password;
        private @Nullable String rcePrivateIp;
        private @Nullable String secretCompartmentId;
        private @Nullable String secretId;
        private @Nullable String sessionMode;
        private @Nullable String state;
        private @Nullable String subnetId;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String username;
        private @Nullable String vaultId;
        private @Nullable String wallet;
        public Builder() {}
        public Builder(GetDatabaseRegistrationsDatabaseRegistrationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliasName = defaults.aliasName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.databaseId = defaults.databaseId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.fqdn = defaults.fqdn;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.password = defaults.password;
    	      this.rcePrivateIp = defaults.rcePrivateIp;
    	      this.secretCompartmentId = defaults.secretCompartmentId;
    	      this.secretId = defaults.secretId;
    	      this.sessionMode = defaults.sessionMode;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.username = defaults.username;
    	      this.vaultId = defaults.vaultId;
    	      this.wallet = defaults.wallet;
        }

        @CustomType.Setter
        public Builder aliasName(@Nullable String aliasName) {
            this.aliasName = aliasName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable String connectionString) {
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder fqdn(@Nullable String fqdn) {
            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder rcePrivateIp(@Nullable String rcePrivateIp) {
            this.rcePrivateIp = rcePrivateIp;
            return this;
        }
        @CustomType.Setter
        public Builder secretCompartmentId(@Nullable String secretCompartmentId) {
            this.secretCompartmentId = secretCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(@Nullable String secretId) {
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder sessionMode(@Nullable String sessionMode) {
            this.sessionMode = sessionMode;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        @CustomType.Setter
        public Builder wallet(@Nullable String wallet) {
            this.wallet = wallet;
            return this;
        }
        public GetDatabaseRegistrationsDatabaseRegistrationCollectionItem build() {
            final var o = new GetDatabaseRegistrationsDatabaseRegistrationCollectionItem();
            o.aliasName = aliasName;
            o.compartmentId = compartmentId;
            o.connectionString = connectionString;
            o.databaseId = databaseId;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.fqdn = fqdn;
            o.freeformTags = freeformTags;
            o.id = id;
            o.ipAddress = ipAddress;
            o.keyId = keyId;
            o.lifecycleDetails = lifecycleDetails;
            o.password = password;
            o.rcePrivateIp = rcePrivateIp;
            o.secretCompartmentId = secretCompartmentId;
            o.secretId = secretId;
            o.sessionMode = sessionMode;
            o.state = state;
            o.subnetId = subnetId;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.username = username;
            o.vaultId = vaultId;
            o.wallet = wallet;
            return o;
        }
    }
}
