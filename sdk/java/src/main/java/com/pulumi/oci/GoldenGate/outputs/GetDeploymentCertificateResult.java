// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDeploymentCertificateResult {
    /**
     * @return The Certificate authority key id.
     * 
     */
    private String authorityKeyId;
    /**
     * @return The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    private String certificateContent;
    private String certificateKey;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    private String deploymentId;
    private String id;
    /**
     * @return Indicates if the certificate is ca.
     * 
     */
    private Boolean isCa;
    private Boolean isLockOverride;
    /**
     * @return Indicates if the certificate is self signed.
     * 
     */
    private Boolean isSelfSigned;
    /**
     * @return The Certificate issuer.
     * 
     */
    private String issuer;
    /**
     * @return The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    private String key;
    /**
     * @return The Certificate md5Hash.
     * 
     */
    private String md5hash;
    /**
     * @return The Certificate public key.
     * 
     */
    private String publicKey;
    /**
     * @return The Certificate public key algorithm.
     * 
     */
    private String publicKeyAlgorithm;
    /**
     * @return The Certificate public key size.
     * 
     */
    private String publicKeySize;
    /**
     * @return The Certificate serial.
     * 
     */
    private String serial;
    /**
     * @return The Certificate sha1 hash.
     * 
     */
    private String sha1hash;
    /**
     * @return Possible certificate lifecycle states.
     * 
     */
    private String state;
    /**
     * @return The Certificate subject.
     * 
     */
    private String subject;
    /**
     * @return The Certificate subject key id.
     * 
     */
    private String subjectKeyId;
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeValidFrom;
    /**
     * @return The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeValidTo;
    /**
     * @return The Certificate version.
     * 
     */
    private String version;

    private GetDeploymentCertificateResult() {}
    /**
     * @return The Certificate authority key id.
     * 
     */
    public String authorityKeyId() {
        return this.authorityKeyId;
    }
    /**
     * @return The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    public String certificateContent() {
        return this.certificateContent;
    }
    public String certificateKey() {
        return this.certificateKey;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    public String deploymentId() {
        return this.deploymentId;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the certificate is ca.
     * 
     */
    public Boolean isCa() {
        return this.isCa;
    }
    public Boolean isLockOverride() {
        return this.isLockOverride;
    }
    /**
     * @return Indicates if the certificate is self signed.
     * 
     */
    public Boolean isSelfSigned() {
        return this.isSelfSigned;
    }
    /**
     * @return The Certificate issuer.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The Certificate md5Hash.
     * 
     */
    public String md5hash() {
        return this.md5hash;
    }
    /**
     * @return The Certificate public key.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The Certificate public key algorithm.
     * 
     */
    public String publicKeyAlgorithm() {
        return this.publicKeyAlgorithm;
    }
    /**
     * @return The Certificate public key size.
     * 
     */
    public String publicKeySize() {
        return this.publicKeySize;
    }
    /**
     * @return The Certificate serial.
     * 
     */
    public String serial() {
        return this.serial;
    }
    /**
     * @return The Certificate sha1 hash.
     * 
     */
    public String sha1hash() {
        return this.sha1hash;
    }
    /**
     * @return Possible certificate lifecycle states.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Certificate subject.
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return The Certificate subject key id.
     * 
     */
    public String subjectKeyId() {
        return this.subjectKeyId;
    }
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeValidFrom() {
        return this.timeValidFrom;
    }
    /**
     * @return The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeValidTo() {
        return this.timeValidTo;
    }
    /**
     * @return The Certificate version.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorityKeyId;
        private String certificateContent;
        private String certificateKey;
        private String deploymentId;
        private String id;
        private Boolean isCa;
        private Boolean isLockOverride;
        private Boolean isSelfSigned;
        private String issuer;
        private String key;
        private String md5hash;
        private String publicKey;
        private String publicKeyAlgorithm;
        private String publicKeySize;
        private String serial;
        private String sha1hash;
        private String state;
        private String subject;
        private String subjectKeyId;
        private String timeCreated;
        private String timeValidFrom;
        private String timeValidTo;
        private String version;
        public Builder() {}
        public Builder(GetDeploymentCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorityKeyId = defaults.authorityKeyId;
    	      this.certificateContent = defaults.certificateContent;
    	      this.certificateKey = defaults.certificateKey;
    	      this.deploymentId = defaults.deploymentId;
    	      this.id = defaults.id;
    	      this.isCa = defaults.isCa;
    	      this.isLockOverride = defaults.isLockOverride;
    	      this.isSelfSigned = defaults.isSelfSigned;
    	      this.issuer = defaults.issuer;
    	      this.key = defaults.key;
    	      this.md5hash = defaults.md5hash;
    	      this.publicKey = defaults.publicKey;
    	      this.publicKeyAlgorithm = defaults.publicKeyAlgorithm;
    	      this.publicKeySize = defaults.publicKeySize;
    	      this.serial = defaults.serial;
    	      this.sha1hash = defaults.sha1hash;
    	      this.state = defaults.state;
    	      this.subject = defaults.subject;
    	      this.subjectKeyId = defaults.subjectKeyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeValidFrom = defaults.timeValidFrom;
    	      this.timeValidTo = defaults.timeValidTo;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder authorityKeyId(String authorityKeyId) {
            if (authorityKeyId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "authorityKeyId");
            }
            this.authorityKeyId = authorityKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateContent(String certificateContent) {
            if (certificateContent == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "certificateContent");
            }
            this.certificateContent = certificateContent;
            return this;
        }
        @CustomType.Setter
        public Builder certificateKey(String certificateKey) {
            if (certificateKey == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "certificateKey");
            }
            this.certificateKey = certificateKey;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentId(String deploymentId) {
            if (deploymentId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "deploymentId");
            }
            this.deploymentId = deploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCa(Boolean isCa) {
            if (isCa == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "isCa");
            }
            this.isCa = isCa;
            return this;
        }
        @CustomType.Setter
        public Builder isLockOverride(Boolean isLockOverride) {
            if (isLockOverride == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "isLockOverride");
            }
            this.isLockOverride = isLockOverride;
            return this;
        }
        @CustomType.Setter
        public Builder isSelfSigned(Boolean isSelfSigned) {
            if (isSelfSigned == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "isSelfSigned");
            }
            this.isSelfSigned = isSelfSigned;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder md5hash(String md5hash) {
            if (md5hash == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "md5hash");
            }
            this.md5hash = md5hash;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyAlgorithm(String publicKeyAlgorithm) {
            if (publicKeyAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "publicKeyAlgorithm");
            }
            this.publicKeyAlgorithm = publicKeyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeySize(String publicKeySize) {
            if (publicKeySize == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "publicKeySize");
            }
            this.publicKeySize = publicKeySize;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder sha1hash(String sha1hash) {
            if (sha1hash == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "sha1hash");
            }
            this.sha1hash = sha1hash;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "subject");
            }
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder subjectKeyId(String subjectKeyId) {
            if (subjectKeyId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "subjectKeyId");
            }
            this.subjectKeyId = subjectKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeValidFrom(String timeValidFrom) {
            if (timeValidFrom == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "timeValidFrom");
            }
            this.timeValidFrom = timeValidFrom;
            return this;
        }
        @CustomType.Setter
        public Builder timeValidTo(String timeValidTo) {
            if (timeValidTo == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "timeValidTo");
            }
            this.timeValidTo = timeValidTo;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDeploymentCertificateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetDeploymentCertificateResult build() {
            final var _resultValue = new GetDeploymentCertificateResult();
            _resultValue.authorityKeyId = authorityKeyId;
            _resultValue.certificateContent = certificateContent;
            _resultValue.certificateKey = certificateKey;
            _resultValue.deploymentId = deploymentId;
            _resultValue.id = id;
            _resultValue.isCa = isCa;
            _resultValue.isLockOverride = isLockOverride;
            _resultValue.isSelfSigned = isSelfSigned;
            _resultValue.issuer = issuer;
            _resultValue.key = key;
            _resultValue.md5hash = md5hash;
            _resultValue.publicKey = publicKey;
            _resultValue.publicKeyAlgorithm = publicKeyAlgorithm;
            _resultValue.publicKeySize = publicKeySize;
            _resultValue.serial = serial;
            _resultValue.sha1hash = sha1hash;
            _resultValue.state = state;
            _resultValue.subject = subject;
            _resultValue.subjectKeyId = subjectKeyId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeValidFrom = timeValidFrom;
            _resultValue.timeValidTo = timeValidTo;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
