// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDeploymentOggDataGroupToRolesMapping {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
     * 
     */
    private String administratorGroupId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
     * 
     */
    private String operatorGroupId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
     * 
     */
    private String securityGroupId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
     * 
     */
    private String userGroupId;

    private GetDeploymentOggDataGroupToRolesMapping() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup. It grants full access to the user, including the ability to alter general, non-security related operational parameters and profiles of the server.
     * 
     */
    public String administratorGroupId() {
        return this.administratorGroupId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup. It allows users to perform only operational actions, like starting and stopping resources. Operators cannot alter the operational parameters or profiles of the MA server.
     * 
     */
    public String operatorGroupId() {
        return this.operatorGroupId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup. It grants administration of security related objects and invoke security related service requests. This role has full privileges.
     * 
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup. It allows information-only service requests, which do not alter or affect the operation of either the MA. Examples of query and read-only information include performance metric information and resource status and monitoring information
     * 
     */
    public String userGroupId() {
        return this.userGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentOggDataGroupToRolesMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String administratorGroupId;
        private String operatorGroupId;
        private String securityGroupId;
        private String userGroupId;
        public Builder() {}
        public Builder(GetDeploymentOggDataGroupToRolesMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorGroupId = defaults.administratorGroupId;
    	      this.operatorGroupId = defaults.operatorGroupId;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.userGroupId = defaults.userGroupId;
        }

        @CustomType.Setter
        public Builder administratorGroupId(String administratorGroupId) {
            if (administratorGroupId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentOggDataGroupToRolesMapping", "administratorGroupId");
            }
            this.administratorGroupId = administratorGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder operatorGroupId(String operatorGroupId) {
            if (operatorGroupId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentOggDataGroupToRolesMapping", "operatorGroupId");
            }
            this.operatorGroupId = operatorGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(String securityGroupId) {
            if (securityGroupId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentOggDataGroupToRolesMapping", "securityGroupId");
            }
            this.securityGroupId = securityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder userGroupId(String userGroupId) {
            if (userGroupId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentOggDataGroupToRolesMapping", "userGroupId");
            }
            this.userGroupId = userGroupId;
            return this;
        }
        public GetDeploymentOggDataGroupToRolesMapping build() {
            final var _resultValue = new GetDeploymentOggDataGroupToRolesMapping();
            _resultValue.administratorGroupId = administratorGroupId;
            _resultValue.operatorGroupId = operatorGroupId;
            _resultValue.securityGroupId = securityGroupId;
            _resultValue.userGroupId = userGroupId;
            return _resultValue;
        }
    }
}
