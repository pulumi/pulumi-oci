// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentTypesDeploymentTypeCollectionItem {
    /**
     * @return The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is &#39;DATA_REPLICATION&#39;, &#39;STREAM_ANALYTICS&#39; and &#39;DATA_TRANSFORMS&#39;.
     * 
     */
    private String category;
    /**
     * @return An array of connectionTypes.
     * 
     */
    private List<String> connectionTypes;
    /**
     * @return The default admin username used by deployment.
     * 
     */
    private String defaultUsername;
    /**
     * @return The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    private String deploymentType;
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    private String displayName;
    /**
     * @return Allows to query by a specific GoldenGate version.
     * 
     */
    private String oggVersion;
    /**
     * @return List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ &#34;Oracle Database 19c&#34;, &#34;Oracle Exadata&#34;, &#34;OCI Streaming&#34; ]
     * 
     */
    private List<String> sourceTechnologies;
    /**
     * @return The URL to the webpage listing the supported technologies.
     * 
     */
    private String supportedTechnologiesUrl;
    /**
     * @return List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ &#34;Oracle Database 19c&#34;, &#34;Oracle Exadata&#34;, &#34;OCI Streaming&#34; ]
     * 
     */
    private List<String> targetTechnologies;

    private GetDeploymentTypesDeploymentTypeCollectionItem() {}
    /**
     * @return The deployment category defines the broad separation of the deployment type into three categories. Currently the separation is &#39;DATA_REPLICATION&#39;, &#39;STREAM_ANALYTICS&#39; and &#39;DATA_TRANSFORMS&#39;.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return An array of connectionTypes.
     * 
     */
    public List<String> connectionTypes() {
        return this.connectionTypes;
    }
    /**
     * @return The default admin username used by deployment.
     * 
     */
    public String defaultUsername() {
        return this.defaultUsername;
    }
    /**
     * @return The type of deployment, the value determines the exact &#39;type&#39; of the service executed in the deployment. Default value is DATABASE_ORACLE.
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Allows to query by a specific GoldenGate version.
     * 
     */
    public String oggVersion() {
        return this.oggVersion;
    }
    /**
     * @return List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ &#34;Oracle Database 19c&#34;, &#34;Oracle Exadata&#34;, &#34;OCI Streaming&#34; ]
     * 
     */
    public List<String> sourceTechnologies() {
        return this.sourceTechnologies;
    }
    /**
     * @return The URL to the webpage listing the supported technologies.
     * 
     */
    public String supportedTechnologiesUrl() {
        return this.supportedTechnologiesUrl;
    }
    /**
     * @return List of the supported technologies generally.  The value is a freeform text string generally consisting of a description of the technology and optionally the speific version(s) support.  For example, [ &#34;Oracle Database 19c&#34;, &#34;Oracle Exadata&#34;, &#34;OCI Streaming&#34; ]
     * 
     */
    public List<String> targetTechnologies() {
        return this.targetTechnologies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentTypesDeploymentTypeCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private List<String> connectionTypes;
        private String defaultUsername;
        private String deploymentType;
        private String displayName;
        private String oggVersion;
        private List<String> sourceTechnologies;
        private String supportedTechnologiesUrl;
        private List<String> targetTechnologies;
        public Builder() {}
        public Builder(GetDeploymentTypesDeploymentTypeCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.connectionTypes = defaults.connectionTypes;
    	      this.defaultUsername = defaults.defaultUsername;
    	      this.deploymentType = defaults.deploymentType;
    	      this.displayName = defaults.displayName;
    	      this.oggVersion = defaults.oggVersion;
    	      this.sourceTechnologies = defaults.sourceTechnologies;
    	      this.supportedTechnologiesUrl = defaults.supportedTechnologiesUrl;
    	      this.targetTechnologies = defaults.targetTechnologies;
        }

        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder connectionTypes(List<String> connectionTypes) {
            this.connectionTypes = Objects.requireNonNull(connectionTypes);
            return this;
        }
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }
        @CustomType.Setter
        public Builder defaultUsername(String defaultUsername) {
            this.defaultUsername = Objects.requireNonNull(defaultUsername);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder oggVersion(String oggVersion) {
            this.oggVersion = Objects.requireNonNull(oggVersion);
            return this;
        }
        @CustomType.Setter
        public Builder sourceTechnologies(List<String> sourceTechnologies) {
            this.sourceTechnologies = Objects.requireNonNull(sourceTechnologies);
            return this;
        }
        public Builder sourceTechnologies(String... sourceTechnologies) {
            return sourceTechnologies(List.of(sourceTechnologies));
        }
        @CustomType.Setter
        public Builder supportedTechnologiesUrl(String supportedTechnologiesUrl) {
            this.supportedTechnologiesUrl = Objects.requireNonNull(supportedTechnologiesUrl);
            return this;
        }
        @CustomType.Setter
        public Builder targetTechnologies(List<String> targetTechnologies) {
            this.targetTechnologies = Objects.requireNonNull(targetTechnologies);
            return this;
        }
        public Builder targetTechnologies(String... targetTechnologies) {
            return targetTechnologies(List.of(targetTechnologies));
        }
        public GetDeploymentTypesDeploymentTypeCollectionItem build() {
            final var _resultValue = new GetDeploymentTypesDeploymentTypeCollectionItem();
            _resultValue.category = category;
            _resultValue.connectionTypes = connectionTypes;
            _resultValue.defaultUsername = defaultUsername;
            _resultValue.deploymentType = deploymentType;
            _resultValue.displayName = displayName;
            _resultValue.oggVersion = oggVersion;
            _resultValue.sourceTechnologies = sourceTechnologies;
            _resultValue.supportedTechnologiesUrl = supportedTechnologiesUrl;
            _resultValue.targetTechnologies = targetTechnologies;
            return _resultValue;
        }
    }
}
