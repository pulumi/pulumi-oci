// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeploymentUpgradeResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    private String compartmentId;
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    private String deploymentId;
    private String deploymentUpgradeId;
    /**
     * @return The type of the deployment upgrade: MANUAL or AUTOMATIC
     * 
     */
    private String deploymentUpgradeType;
    /**
     * @return Metadata about this specific object.
     * 
     */
    private String description;
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    private String displayName;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if cancel is allowed. Scheduled upgrade can be cancelled only if target version is not forced by service,  otherwise only reschedule allowed.
     * 
     */
    private Boolean isCancelAllowed;
    /**
     * @return Indicates if reschedule is allowed. Upgrade can be rescheduled postponed until the end of the service defined auto-upgrade period.
     * 
     */
    private Boolean isRescheduleAllowed;
    /**
     * @return Indicates if rollback is allowed. In practice only the last upgrade can be rolled back.
     * * Manual upgrade is allowed to rollback only until the old version isn&#39;t deprecated yet.
     * * Automatic upgrade by default is not allowed, unless a serious issue does not justify.
     * 
     */
    private Boolean isRollbackAllowed;
    /**
     * @return Indicates if OGG release contains security fix.
     * 
     */
    private Boolean isSecurityFix;
    /**
     * @return Indicates if upgrade notifications are snoozed or not.
     * 
     */
    private Boolean isSnoozed;
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Possible GGS lifecycle sub-states.
     * 
     */
    private String lifecycleSubState;
    /**
     * @return Version of OGG
     * 
     */
    private String oggVersion;
    /**
     * @return Version of OGG
     * 
     */
    private String previousOggVersion;
    /**
     * @return The type of release.
     * 
     */
    private String releaseType;
    /**
     * @return Possible lifecycle states.
     * 
     */
    private String state;
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the request was finished. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeFinished;
    /**
     * @return The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeOggVersionSupportedUntil;
    /**
     * @return The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeReleased;
    /**
     * @return The time of upgrade schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeSchedule;
    /**
     * @return Indicates the latest time until the deployment upgrade could be rescheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeScheduleMax;
    /**
     * @return The time the upgrade notifications are snoozed until. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeSnoozedUntil;
    /**
     * @return The date and time the request was started. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeStarted;
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeUpdated;

    private GetDeploymentUpgradeResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     * 
     */
    public String deploymentId() {
        return this.deploymentId;
    }
    public String deploymentUpgradeId() {
        return this.deploymentUpgradeId;
    }
    /**
     * @return The type of the deployment upgrade: MANUAL or AUTOMATIC
     * 
     */
    public String deploymentUpgradeType() {
        return this.deploymentUpgradeType;
    }
    /**
     * @return Metadata about this specific object.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if cancel is allowed. Scheduled upgrade can be cancelled only if target version is not forced by service,  otherwise only reschedule allowed.
     * 
     */
    public Boolean isCancelAllowed() {
        return this.isCancelAllowed;
    }
    /**
     * @return Indicates if reschedule is allowed. Upgrade can be rescheduled postponed until the end of the service defined auto-upgrade period.
     * 
     */
    public Boolean isRescheduleAllowed() {
        return this.isRescheduleAllowed;
    }
    /**
     * @return Indicates if rollback is allowed. In practice only the last upgrade can be rolled back.
     * * Manual upgrade is allowed to rollback only until the old version isn&#39;t deprecated yet.
     * * Automatic upgrade by default is not allowed, unless a serious issue does not justify.
     * 
     */
    public Boolean isRollbackAllowed() {
        return this.isRollbackAllowed;
    }
    /**
     * @return Indicates if OGG release contains security fix.
     * 
     */
    public Boolean isSecurityFix() {
        return this.isSecurityFix;
    }
    /**
     * @return Indicates if upgrade notifications are snoozed or not.
     * 
     */
    public Boolean isSnoozed() {
        return this.isSnoozed;
    }
    /**
     * @return Describes the object&#39;s current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Possible GGS lifecycle sub-states.
     * 
     */
    public String lifecycleSubState() {
        return this.lifecycleSubState;
    }
    /**
     * @return Version of OGG
     * 
     */
    public String oggVersion() {
        return this.oggVersion;
    }
    /**
     * @return Version of OGG
     * 
     */
    public String previousOggVersion() {
        return this.previousOggVersion;
    }
    /**
     * @return The type of release.
     * 
     */
    public String releaseType() {
        return this.releaseType;
    }
    /**
     * @return Possible lifecycle states.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the request was finished. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeFinished() {
        return this.timeFinished;
    }
    /**
     * @return The time until OGG version is supported. After this date has passed OGG version will not be available anymore. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeOggVersionSupportedUntil() {
        return this.timeOggVersionSupportedUntil;
    }
    /**
     * @return The time the resource was released. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeReleased() {
        return this.timeReleased;
    }
    /**
     * @return The time of upgrade schedule. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeSchedule() {
        return this.timeSchedule;
    }
    /**
     * @return Indicates the latest time until the deployment upgrade could be rescheduled. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeScheduleMax() {
        return this.timeScheduleMax;
    }
    /**
     * @return The time the upgrade notifications are snoozed until. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeSnoozedUntil() {
        return this.timeSnoozedUntil;
    }
    /**
     * @return The date and time the request was started. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentUpgradeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String deploymentId;
        private String deploymentUpgradeId;
        private String deploymentUpgradeType;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isCancelAllowed;
        private Boolean isRescheduleAllowed;
        private Boolean isRollbackAllowed;
        private Boolean isSecurityFix;
        private Boolean isSnoozed;
        private String lifecycleDetails;
        private String lifecycleSubState;
        private String oggVersion;
        private String previousOggVersion;
        private String releaseType;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeFinished;
        private String timeOggVersionSupportedUntil;
        private String timeReleased;
        private String timeSchedule;
        private String timeScheduleMax;
        private String timeSnoozedUntil;
        private String timeStarted;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDeploymentUpgradeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.deploymentId = defaults.deploymentId;
    	      this.deploymentUpgradeId = defaults.deploymentUpgradeId;
    	      this.deploymentUpgradeType = defaults.deploymentUpgradeType;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isCancelAllowed = defaults.isCancelAllowed;
    	      this.isRescheduleAllowed = defaults.isRescheduleAllowed;
    	      this.isRollbackAllowed = defaults.isRollbackAllowed;
    	      this.isSecurityFix = defaults.isSecurityFix;
    	      this.isSnoozed = defaults.isSnoozed;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleSubState = defaults.lifecycleSubState;
    	      this.oggVersion = defaults.oggVersion;
    	      this.previousOggVersion = defaults.previousOggVersion;
    	      this.releaseType = defaults.releaseType;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeFinished = defaults.timeFinished;
    	      this.timeOggVersionSupportedUntil = defaults.timeOggVersionSupportedUntil;
    	      this.timeReleased = defaults.timeReleased;
    	      this.timeSchedule = defaults.timeSchedule;
    	      this.timeScheduleMax = defaults.timeScheduleMax;
    	      this.timeSnoozedUntil = defaults.timeSnoozedUntil;
    	      this.timeStarted = defaults.timeStarted;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentId(String deploymentId) {
            if (deploymentId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "deploymentId");
            }
            this.deploymentId = deploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentUpgradeId(String deploymentUpgradeId) {
            if (deploymentUpgradeId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "deploymentUpgradeId");
            }
            this.deploymentUpgradeId = deploymentUpgradeId;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentUpgradeType(String deploymentUpgradeType) {
            if (deploymentUpgradeType == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "deploymentUpgradeType");
            }
            this.deploymentUpgradeType = deploymentUpgradeType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCancelAllowed(Boolean isCancelAllowed) {
            if (isCancelAllowed == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "isCancelAllowed");
            }
            this.isCancelAllowed = isCancelAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isRescheduleAllowed(Boolean isRescheduleAllowed) {
            if (isRescheduleAllowed == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "isRescheduleAllowed");
            }
            this.isRescheduleAllowed = isRescheduleAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isRollbackAllowed(Boolean isRollbackAllowed) {
            if (isRollbackAllowed == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "isRollbackAllowed");
            }
            this.isRollbackAllowed = isRollbackAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isSecurityFix(Boolean isSecurityFix) {
            if (isSecurityFix == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "isSecurityFix");
            }
            this.isSecurityFix = isSecurityFix;
            return this;
        }
        @CustomType.Setter
        public Builder isSnoozed(Boolean isSnoozed) {
            if (isSnoozed == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "isSnoozed");
            }
            this.isSnoozed = isSnoozed;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleSubState(String lifecycleSubState) {
            if (lifecycleSubState == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "lifecycleSubState");
            }
            this.lifecycleSubState = lifecycleSubState;
            return this;
        }
        @CustomType.Setter
        public Builder oggVersion(String oggVersion) {
            if (oggVersion == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "oggVersion");
            }
            this.oggVersion = oggVersion;
            return this;
        }
        @CustomType.Setter
        public Builder previousOggVersion(String previousOggVersion) {
            if (previousOggVersion == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "previousOggVersion");
            }
            this.previousOggVersion = previousOggVersion;
            return this;
        }
        @CustomType.Setter
        public Builder releaseType(String releaseType) {
            if (releaseType == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "releaseType");
            }
            this.releaseType = releaseType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeFinished(String timeFinished) {
            if (timeFinished == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeFinished");
            }
            this.timeFinished = timeFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeOggVersionSupportedUntil(String timeOggVersionSupportedUntil) {
            if (timeOggVersionSupportedUntil == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeOggVersionSupportedUntil");
            }
            this.timeOggVersionSupportedUntil = timeOggVersionSupportedUntil;
            return this;
        }
        @CustomType.Setter
        public Builder timeReleased(String timeReleased) {
            if (timeReleased == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeReleased");
            }
            this.timeReleased = timeReleased;
            return this;
        }
        @CustomType.Setter
        public Builder timeSchedule(String timeSchedule) {
            if (timeSchedule == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeSchedule");
            }
            this.timeSchedule = timeSchedule;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduleMax(String timeScheduleMax) {
            if (timeScheduleMax == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeScheduleMax");
            }
            this.timeScheduleMax = timeScheduleMax;
            return this;
        }
        @CustomType.Setter
        public Builder timeSnoozedUntil(String timeSnoozedUntil) {
            if (timeSnoozedUntil == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeSnoozedUntil");
            }
            this.timeSnoozedUntil = timeSnoozedUntil;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDeploymentUpgradeResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDeploymentUpgradeResult build() {
            final var _resultValue = new GetDeploymentUpgradeResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.deploymentId = deploymentId;
            _resultValue.deploymentUpgradeId = deploymentUpgradeId;
            _resultValue.deploymentUpgradeType = deploymentUpgradeType;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isCancelAllowed = isCancelAllowed;
            _resultValue.isRescheduleAllowed = isRescheduleAllowed;
            _resultValue.isRollbackAllowed = isRollbackAllowed;
            _resultValue.isSecurityFix = isSecurityFix;
            _resultValue.isSnoozed = isSnoozed;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleSubState = lifecycleSubState;
            _resultValue.oggVersion = oggVersion;
            _resultValue.previousOggVersion = previousOggVersion;
            _resultValue.releaseType = releaseType;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeFinished = timeFinished;
            _resultValue.timeOggVersionSupportedUntil = timeOggVersionSupportedUntil;
            _resultValue.timeReleased = timeReleased;
            _resultValue.timeSchedule = timeSchedule;
            _resultValue.timeScheduleMax = timeScheduleMax;
            _resultValue.timeSnoozedUntil = timeSnoozedUntil;
            _resultValue.timeStarted = timeStarted;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
