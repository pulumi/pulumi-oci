// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData {
    /**
     * @return Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    private String bucket;
    /**
     * @return The state of the deployment diagnostic collection.
     * 
     */
    private String diagnosticState;
    /**
     * @return Name of namespace that serves as a container for all of your buckets
     * 
     */
    private String namespace;
    /**
     * @return Name of the diagnostic collected and uploaded to object storage
     * 
     */
    private String object;
    /**
     * @return The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeDiagnosticEnd;
    /**
     * @return The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeDiagnosticStart;

    private GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData() {}
    /**
     * @return Name of the bucket where the object is to be uploaded in the object storage
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The state of the deployment diagnostic collection.
     * 
     */
    public String diagnosticState() {
        return this.diagnosticState;
    }
    /**
     * @return Name of namespace that serves as a container for all of your buckets
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Name of the diagnostic collected and uploaded to object storage
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeDiagnosticEnd() {
        return this.timeDiagnosticEnd;
    }
    /**
     * @return The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeDiagnosticStart() {
        return this.timeDiagnosticStart;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String diagnosticState;
        private String namespace;
        private String object;
        private String timeDiagnosticEnd;
        private String timeDiagnosticStart;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.diagnosticState = defaults.diagnosticState;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.timeDiagnosticEnd = defaults.timeDiagnosticEnd;
    	      this.timeDiagnosticStart = defaults.timeDiagnosticStart;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticState(String diagnosticState) {
            this.diagnosticState = Objects.requireNonNull(diagnosticState);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        @CustomType.Setter
        public Builder timeDiagnosticEnd(String timeDiagnosticEnd) {
            this.timeDiagnosticEnd = Objects.requireNonNull(timeDiagnosticEnd);
            return this;
        }
        @CustomType.Setter
        public Builder timeDiagnosticStart(String timeDiagnosticStart) {
            this.timeDiagnosticStart = Objects.requireNonNull(timeDiagnosticStart);
            return this;
        }
        public GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData build() {
            final var _resultValue = new GetDeploymentsDeploymentCollectionItemDeploymentDiagnosticData();
            _resultValue.bucket = bucket;
            _resultValue.diagnosticState = diagnosticState;
            _resultValue.namespace = namespace;
            _resultValue.object = object;
            _resultValue.timeDiagnosticEnd = timeDiagnosticEnd;
            _resultValue.timeDiagnosticStart = timeDiagnosticStart;
            return _resultValue;
        }
    }
}
