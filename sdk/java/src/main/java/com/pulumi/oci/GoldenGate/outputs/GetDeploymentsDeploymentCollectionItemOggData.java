// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.outputs.GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionItemOggData {
    private String adminPassword;
    /**
     * @return The GoldenGate deployment console username.
     * 
     */
    private String adminUsername;
    /**
     * @return The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    private String certificate;
    /**
     * @return The type of credential store for OGG.
     * 
     */
    private String credentialStore;
    /**
     * @return The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    private String deploymentName;
    /**
     * @return Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping> groupToRolesMappings;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
     * 
     */
    private String identityDomainId;
    private String key;
    /**
     * @return Version of OGG
     * 
     */
    private String oggVersion;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
     * 
     */
    private String passwordSecretId;

    private GetDeploymentsDeploymentCollectionItemOggData() {}
    public String adminPassword() {
        return this.adminPassword;
    }
    /**
     * @return The GoldenGate deployment console username.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return The base64 encoded content of the PEM file containing the SSL certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return The type of credential store for OGG.
     * 
     */
    public String credentialStore() {
        return this.credentialStore;
    }
    /**
     * @return The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     * 
     */
    public String deploymentName() {
        return this.deploymentName;
    }
    /**
     * @return Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping> groupToRolesMappings() {
        return this.groupToRolesMappings;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
     * 
     */
    public String identityDomainId() {
        return this.identityDomainId;
    }
    public String key() {
        return this.key;
    }
    /**
     * @return Version of OGG
     * 
     */
    public String oggVersion() {
        return this.oggVersion;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionItemOggData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminPassword;
        private String adminUsername;
        private String certificate;
        private String credentialStore;
        private String deploymentName;
        private List<GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping> groupToRolesMappings;
        private String identityDomainId;
        private String key;
        private String oggVersion;
        private String passwordSecretId;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionItemOggData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.certificate = defaults.certificate;
    	      this.credentialStore = defaults.credentialStore;
    	      this.deploymentName = defaults.deploymentName;
    	      this.groupToRolesMappings = defaults.groupToRolesMappings;
    	      this.identityDomainId = defaults.identityDomainId;
    	      this.key = defaults.key;
    	      this.oggVersion = defaults.oggVersion;
    	      this.passwordSecretId = defaults.passwordSecretId;
        }

        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            if (adminPassword == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "adminPassword");
            }
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            if (adminUsername == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "adminUsername");
            }
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder credentialStore(String credentialStore) {
            if (credentialStore == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "credentialStore");
            }
            this.credentialStore = credentialStore;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentName(String deploymentName) {
            if (deploymentName == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "deploymentName");
            }
            this.deploymentName = deploymentName;
            return this;
        }
        @CustomType.Setter
        public Builder groupToRolesMappings(List<GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping> groupToRolesMappings) {
            if (groupToRolesMappings == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "groupToRolesMappings");
            }
            this.groupToRolesMappings = groupToRolesMappings;
            return this;
        }
        public Builder groupToRolesMappings(GetDeploymentsDeploymentCollectionItemOggDataGroupToRolesMapping... groupToRolesMappings) {
            return groupToRolesMappings(List.of(groupToRolesMappings));
        }
        @CustomType.Setter
        public Builder identityDomainId(String identityDomainId) {
            if (identityDomainId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "identityDomainId");
            }
            this.identityDomainId = identityDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder oggVersion(String oggVersion) {
            if (oggVersion == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "oggVersion");
            }
            this.oggVersion = oggVersion;
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretId(String passwordSecretId) {
            if (passwordSecretId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionItemOggData", "passwordSecretId");
            }
            this.passwordSecretId = passwordSecretId;
            return this;
        }
        public GetDeploymentsDeploymentCollectionItemOggData build() {
            final var _resultValue = new GetDeploymentsDeploymentCollectionItemOggData();
            _resultValue.adminPassword = adminPassword;
            _resultValue.adminUsername = adminUsername;
            _resultValue.certificate = certificate;
            _resultValue.credentialStore = credentialStore;
            _resultValue.deploymentName = deploymentName;
            _resultValue.groupToRolesMappings = groupToRolesMappings;
            _resultValue.identityDomainId = identityDomainId;
            _resultValue.key = key;
            _resultValue.oggVersion = oggVersion;
            _resultValue.passwordSecretId = passwordSecretId;
            return _resultValue;
        }
    }
}
