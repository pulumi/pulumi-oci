// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPipelineRunningProcessesPipelineRunningProcessCollectionItem {
    /**
     * @return The latency, in seconds, of a process running in a replication. This option applies when retrieving running processes.
     * 
     */
    private Double lastRecordLagInSeconds;
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    private String name;
    /**
     * @return The type of process running in a replication. For example, Extract or Replicat. This option applies when retrieving running processes.
     * 
     */
    private String processType;
    /**
     * @return The status of the Extract or Replicat process. This option applies when retrieving running processes.
     * 
     */
    private String status;
    /**
     * @return The date and time the last record was processed by an Extract or Replicat. This option applies when retrieving running processes. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
     * 
     */
    private String timeLastProcessed;

    private GetPipelineRunningProcessesPipelineRunningProcessCollectionItem() {}
    /**
     * @return The latency, in seconds, of a process running in a replication. This option applies when retrieving running processes.
     * 
     */
    public Double lastRecordLagInSeconds() {
        return this.lastRecordLagInSeconds;
    }
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of process running in a replication. For example, Extract or Replicat. This option applies when retrieving running processes.
     * 
     */
    public String processType() {
        return this.processType;
    }
    /**
     * @return The status of the Extract or Replicat process. This option applies when retrieving running processes.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time the last record was processed by an Extract or Replicat. This option applies when retrieving running processes. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
     * 
     */
    public String timeLastProcessed() {
        return this.timeLastProcessed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineRunningProcessesPipelineRunningProcessCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double lastRecordLagInSeconds;
        private String name;
        private String processType;
        private String status;
        private String timeLastProcessed;
        public Builder() {}
        public Builder(GetPipelineRunningProcessesPipelineRunningProcessCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lastRecordLagInSeconds = defaults.lastRecordLagInSeconds;
    	      this.name = defaults.name;
    	      this.processType = defaults.processType;
    	      this.status = defaults.status;
    	      this.timeLastProcessed = defaults.timeLastProcessed;
        }

        @CustomType.Setter
        public Builder lastRecordLagInSeconds(Double lastRecordLagInSeconds) {
            if (lastRecordLagInSeconds == null) {
              throw new MissingRequiredPropertyException("GetPipelineRunningProcessesPipelineRunningProcessCollectionItem", "lastRecordLagInSeconds");
            }
            this.lastRecordLagInSeconds = lastRecordLagInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPipelineRunningProcessesPipelineRunningProcessCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder processType(String processType) {
            if (processType == null) {
              throw new MissingRequiredPropertyException("GetPipelineRunningProcessesPipelineRunningProcessCollectionItem", "processType");
            }
            this.processType = processType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPipelineRunningProcessesPipelineRunningProcessCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastProcessed(String timeLastProcessed) {
            if (timeLastProcessed == null) {
              throw new MissingRequiredPropertyException("GetPipelineRunningProcessesPipelineRunningProcessCollectionItem", "timeLastProcessed");
            }
            this.timeLastProcessed = timeLastProcessed;
            return this;
        }
        public GetPipelineRunningProcessesPipelineRunningProcessCollectionItem build() {
            final var _resultValue = new GetPipelineRunningProcessesPipelineRunningProcessCollectionItem();
            _resultValue.lastRecordLagInSeconds = lastRecordLagInSeconds;
            _resultValue.name = name;
            _resultValue.processType = processType;
            _resultValue.status = status;
            _resultValue.timeLastProcessed = timeLastProcessed;
            return _resultValue;
        }
    }
}
