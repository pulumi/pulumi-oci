// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.outputs.GetPipelineSchemaTablesFilter;
import com.pulumi.oci.GoldenGate.outputs.GetPipelineSchemaTablesPipelineSchemaTableCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPipelineSchemaTablesResult {
    private @Nullable String displayName;
    private @Nullable List<GetPipelineSchemaTablesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String pipelineId;
    /**
     * @return The list of pipeline_schema_table_collection.
     * 
     */
    private List<GetPipelineSchemaTablesPipelineSchemaTableCollection> pipelineSchemaTableCollections;
    /**
     * @return The schema name from the database connection.
     * 
     */
    private String sourceSchemaName;
    /**
     * @return The schema name from the database connection.
     * 
     */
    private String targetSchemaName;

    private GetPipelineSchemaTablesResult() {}
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetPipelineSchemaTablesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String pipelineId() {
        return this.pipelineId;
    }
    /**
     * @return The list of pipeline_schema_table_collection.
     * 
     */
    public List<GetPipelineSchemaTablesPipelineSchemaTableCollection> pipelineSchemaTableCollections() {
        return this.pipelineSchemaTableCollections;
    }
    /**
     * @return The schema name from the database connection.
     * 
     */
    public String sourceSchemaName() {
        return this.sourceSchemaName;
    }
    /**
     * @return The schema name from the database connection.
     * 
     */
    public String targetSchemaName() {
        return this.targetSchemaName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineSchemaTablesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable List<GetPipelineSchemaTablesFilter> filters;
        private String id;
        private String pipelineId;
        private List<GetPipelineSchemaTablesPipelineSchemaTableCollection> pipelineSchemaTableCollections;
        private String sourceSchemaName;
        private String targetSchemaName;
        public Builder() {}
        public Builder(GetPipelineSchemaTablesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.pipelineId = defaults.pipelineId;
    	      this.pipelineSchemaTableCollections = defaults.pipelineSchemaTableCollections;
    	      this.sourceSchemaName = defaults.sourceSchemaName;
    	      this.targetSchemaName = defaults.targetSchemaName;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetPipelineSchemaTablesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetPipelineSchemaTablesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPipelineSchemaTablesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineId(String pipelineId) {
            if (pipelineId == null) {
              throw new MissingRequiredPropertyException("GetPipelineSchemaTablesResult", "pipelineId");
            }
            this.pipelineId = pipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineSchemaTableCollections(List<GetPipelineSchemaTablesPipelineSchemaTableCollection> pipelineSchemaTableCollections) {
            if (pipelineSchemaTableCollections == null) {
              throw new MissingRequiredPropertyException("GetPipelineSchemaTablesResult", "pipelineSchemaTableCollections");
            }
            this.pipelineSchemaTableCollections = pipelineSchemaTableCollections;
            return this;
        }
        public Builder pipelineSchemaTableCollections(GetPipelineSchemaTablesPipelineSchemaTableCollection... pipelineSchemaTableCollections) {
            return pipelineSchemaTableCollections(List.of(pipelineSchemaTableCollections));
        }
        @CustomType.Setter
        public Builder sourceSchemaName(String sourceSchemaName) {
            if (sourceSchemaName == null) {
              throw new MissingRequiredPropertyException("GetPipelineSchemaTablesResult", "sourceSchemaName");
            }
            this.sourceSchemaName = sourceSchemaName;
            return this;
        }
        @CustomType.Setter
        public Builder targetSchemaName(String targetSchemaName) {
            if (targetSchemaName == null) {
              throw new MissingRequiredPropertyException("GetPipelineSchemaTablesResult", "targetSchemaName");
            }
            this.targetSchemaName = targetSchemaName;
            return this;
        }
        public GetPipelineSchemaTablesResult build() {
            final var _resultValue = new GetPipelineSchemaTablesResult();
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.pipelineId = pipelineId;
            _resultValue.pipelineSchemaTableCollections = pipelineSchemaTableCollections;
            _resultValue.sourceSchemaName = sourceSchemaName;
            _resultValue.targetSchemaName = targetSchemaName;
            return _resultValue;
        }
    }
}
