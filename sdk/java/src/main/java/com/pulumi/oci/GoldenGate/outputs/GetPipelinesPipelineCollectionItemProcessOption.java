// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.outputs.GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad;
import com.pulumi.oci.GoldenGate.outputs.GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPipelinesPipelineCollectionItemProcessOption {
    /**
     * @return Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    private List<GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad> initialDataLoads;
    /**
     * @return Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    private List<GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange> replicateSchemaChanges;
    /**
     * @return If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    private String shouldRestartOnFailure;
    /**
     * @return If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
     * 
     */
    private String startUsingDefaultMapping;

    private GetPipelinesPipelineCollectionItemProcessOption() {}
    /**
     * @return Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public List<GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad> initialDataLoads() {
        return this.initialDataLoads;
    }
    /**
     * @return Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public List<GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange> replicateSchemaChanges() {
        return this.replicateSchemaChanges;
    }
    /**
     * @return If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    public String shouldRestartOnFailure() {
        return this.shouldRestartOnFailure;
    }
    /**
     * @return If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option only applies when creating a pipeline and is not applicable while updating a pipeline.
     * 
     */
    public String startUsingDefaultMapping() {
        return this.startUsingDefaultMapping;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelinesPipelineCollectionItemProcessOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad> initialDataLoads;
        private List<GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange> replicateSchemaChanges;
        private String shouldRestartOnFailure;
        private String startUsingDefaultMapping;
        public Builder() {}
        public Builder(GetPipelinesPipelineCollectionItemProcessOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialDataLoads = defaults.initialDataLoads;
    	      this.replicateSchemaChanges = defaults.replicateSchemaChanges;
    	      this.shouldRestartOnFailure = defaults.shouldRestartOnFailure;
    	      this.startUsingDefaultMapping = defaults.startUsingDefaultMapping;
        }

        @CustomType.Setter
        public Builder initialDataLoads(List<GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad> initialDataLoads) {
            if (initialDataLoads == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineCollectionItemProcessOption", "initialDataLoads");
            }
            this.initialDataLoads = initialDataLoads;
            return this;
        }
        public Builder initialDataLoads(GetPipelinesPipelineCollectionItemProcessOptionInitialDataLoad... initialDataLoads) {
            return initialDataLoads(List.of(initialDataLoads));
        }
        @CustomType.Setter
        public Builder replicateSchemaChanges(List<GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange> replicateSchemaChanges) {
            if (replicateSchemaChanges == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineCollectionItemProcessOption", "replicateSchemaChanges");
            }
            this.replicateSchemaChanges = replicateSchemaChanges;
            return this;
        }
        public Builder replicateSchemaChanges(GetPipelinesPipelineCollectionItemProcessOptionReplicateSchemaChange... replicateSchemaChanges) {
            return replicateSchemaChanges(List.of(replicateSchemaChanges));
        }
        @CustomType.Setter
        public Builder shouldRestartOnFailure(String shouldRestartOnFailure) {
            if (shouldRestartOnFailure == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineCollectionItemProcessOption", "shouldRestartOnFailure");
            }
            this.shouldRestartOnFailure = shouldRestartOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder startUsingDefaultMapping(String startUsingDefaultMapping) {
            if (startUsingDefaultMapping == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineCollectionItemProcessOption", "startUsingDefaultMapping");
            }
            this.startUsingDefaultMapping = startUsingDefaultMapping;
            return this;
        }
        public GetPipelinesPipelineCollectionItemProcessOption build() {
            final var _resultValue = new GetPipelinesPipelineCollectionItemProcessOption();
            _resultValue.initialDataLoads = initialDataLoads;
            _resultValue.replicateSchemaChanges = replicateSchemaChanges;
            _resultValue.shouldRestartOnFailure = shouldRestartOnFailure;
            _resultValue.startUsingDefaultMapping = startUsingDefaultMapping;
            return _resultValue;
        }
    }
}
