// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.outputs.GetRecipesFilter;
import com.pulumi.oci.GoldenGate.outputs.GetRecipesRecipeSummaryCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRecipesResult {
    private String compartmentId;
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetRecipesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of recipe_summary_collection.
     * 
     */
    private List<GetRecipesRecipeSummaryCollection> recipeSummaryCollections;
    /**
     * @return The type of the recipe
     * 
     */
    private @Nullable String recipeType;

    private GetRecipesResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return An object&#39;s Display Name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetRecipesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of recipe_summary_collection.
     * 
     */
    public List<GetRecipesRecipeSummaryCollection> recipeSummaryCollections() {
        return this.recipeSummaryCollections;
    }
    /**
     * @return The type of the recipe
     * 
     */
    public Optional<String> recipeType() {
        return Optional.ofNullable(this.recipeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecipesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetRecipesFilter> filters;
        private String id;
        private List<GetRecipesRecipeSummaryCollection> recipeSummaryCollections;
        private @Nullable String recipeType;
        public Builder() {}
        public Builder(GetRecipesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.recipeSummaryCollections = defaults.recipeSummaryCollections;
    	      this.recipeType = defaults.recipeType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetRecipesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRecipesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRecipesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecipesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder recipeSummaryCollections(List<GetRecipesRecipeSummaryCollection> recipeSummaryCollections) {
            if (recipeSummaryCollections == null) {
              throw new MissingRequiredPropertyException("GetRecipesResult", "recipeSummaryCollections");
            }
            this.recipeSummaryCollections = recipeSummaryCollections;
            return this;
        }
        public Builder recipeSummaryCollections(GetRecipesRecipeSummaryCollection... recipeSummaryCollections) {
            return recipeSummaryCollections(List.of(recipeSummaryCollections));
        }
        @CustomType.Setter
        public Builder recipeType(@Nullable String recipeType) {

            this.recipeType = recipeType;
            return this;
        }
        public GetRecipesResult build() {
            final var _resultValue = new GetRecipesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.recipeSummaryCollections = recipeSummaryCollections;
            _resultValue.recipeType = recipeType;
            return _resultValue;
        }
    }
}
