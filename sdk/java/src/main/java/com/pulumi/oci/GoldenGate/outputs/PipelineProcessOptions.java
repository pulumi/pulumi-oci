// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.GoldenGate.outputs.PipelineProcessOptionsInitialDataLoad;
import com.pulumi.oci.GoldenGate.outputs.PipelineProcessOptionsReplicateSchemaChange;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineProcessOptions {
    /**
     * @return (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    private PipelineProcessOptionsInitialDataLoad initialDataLoad;
    /**
     * @return (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    private PipelineProcessOptionsReplicateSchemaChange replicateSchemaChange;
    /**
     * @return (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    private String shouldRestartOnFailure;
    /**
     * @return (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option applies when creating or updating a pipeline.
     * 
     */
    private @Nullable String startUsingDefaultMapping;

    private PipelineProcessOptions() {}
    /**
     * @return (Updatable) Options required for the pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public PipelineProcessOptionsInitialDataLoad initialDataLoad() {
        return this.initialDataLoad;
    }
    /**
     * @return (Updatable) Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
     * 
     */
    public PipelineProcessOptionsReplicateSchemaChange replicateSchemaChange() {
        return this.replicateSchemaChange;
    }
    /**
     * @return (Updatable) If ENABLED, then the replication process restarts itself upon failure. This option applies when creating or updating a pipeline.
     * 
     */
    public String shouldRestartOnFailure() {
        return this.shouldRestartOnFailure;
    }
    /**
     * @return (Updatable) If ENABLED, then the pipeline is started as part of pipeline creation. It uses default mapping. This option applies when creating or updating a pipeline.
     * 
     */
    public Optional<String> startUsingDefaultMapping() {
        return Optional.ofNullable(this.startUsingDefaultMapping);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineProcessOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private PipelineProcessOptionsInitialDataLoad initialDataLoad;
        private PipelineProcessOptionsReplicateSchemaChange replicateSchemaChange;
        private String shouldRestartOnFailure;
        private @Nullable String startUsingDefaultMapping;
        public Builder() {}
        public Builder(PipelineProcessOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialDataLoad = defaults.initialDataLoad;
    	      this.replicateSchemaChange = defaults.replicateSchemaChange;
    	      this.shouldRestartOnFailure = defaults.shouldRestartOnFailure;
    	      this.startUsingDefaultMapping = defaults.startUsingDefaultMapping;
        }

        @CustomType.Setter
        public Builder initialDataLoad(PipelineProcessOptionsInitialDataLoad initialDataLoad) {
            if (initialDataLoad == null) {
              throw new MissingRequiredPropertyException("PipelineProcessOptions", "initialDataLoad");
            }
            this.initialDataLoad = initialDataLoad;
            return this;
        }
        @CustomType.Setter
        public Builder replicateSchemaChange(PipelineProcessOptionsReplicateSchemaChange replicateSchemaChange) {
            if (replicateSchemaChange == null) {
              throw new MissingRequiredPropertyException("PipelineProcessOptions", "replicateSchemaChange");
            }
            this.replicateSchemaChange = replicateSchemaChange;
            return this;
        }
        @CustomType.Setter
        public Builder shouldRestartOnFailure(String shouldRestartOnFailure) {
            if (shouldRestartOnFailure == null) {
              throw new MissingRequiredPropertyException("PipelineProcessOptions", "shouldRestartOnFailure");
            }
            this.shouldRestartOnFailure = shouldRestartOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder startUsingDefaultMapping(@Nullable String startUsingDefaultMapping) {

            this.startUsingDefaultMapping = startUsingDefaultMapping;
            return this;
        }
        public PipelineProcessOptions build() {
            final var _resultValue = new PipelineProcessOptions();
            _resultValue.initialDataLoad = initialDataLoad;
            _resultValue.replicateSchemaChange = replicateSchemaChange;
            _resultValue.shouldRestartOnFailure = shouldRestartOnFailure;
            _resultValue.startUsingDefaultMapping = startUsingDefaultMapping;
            return _resultValue;
        }
    }
}
