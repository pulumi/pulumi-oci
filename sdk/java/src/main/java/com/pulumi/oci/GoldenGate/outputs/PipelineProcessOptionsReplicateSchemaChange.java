// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineProcessOptionsReplicateSchemaChange {
    /**
     * @return (Updatable) Action upon DDL Error (active only if &#39;Replicate schema changes (DDL)&#39; is selected) i.e canReplicateSchemaChange=true
     * 
     */
    private @Nullable String actionOnDdlError;
    /**
     * @return (Updatable) Action upon DML Error (active only if &#39;Replicate schema changes (DDL)&#39; is selected) i.e canReplicateSchemaChange=true
     * 
     */
    private @Nullable String actionOnDmlError;
    /**
     * @return (Updatable) If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
     * 
     */
    private String canReplicateSchemaChange;

    private PipelineProcessOptionsReplicateSchemaChange() {}
    /**
     * @return (Updatable) Action upon DDL Error (active only if &#39;Replicate schema changes (DDL)&#39; is selected) i.e canReplicateSchemaChange=true
     * 
     */
    public Optional<String> actionOnDdlError() {
        return Optional.ofNullable(this.actionOnDdlError);
    }
    /**
     * @return (Updatable) Action upon DML Error (active only if &#39;Replicate schema changes (DDL)&#39; is selected) i.e canReplicateSchemaChange=true
     * 
     */
    public Optional<String> actionOnDmlError() {
        return Optional.ofNullable(this.actionOnDmlError);
    }
    /**
     * @return (Updatable) If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
     * 
     */
    public String canReplicateSchemaChange() {
        return this.canReplicateSchemaChange;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineProcessOptionsReplicateSchemaChange defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String actionOnDdlError;
        private @Nullable String actionOnDmlError;
        private String canReplicateSchemaChange;
        public Builder() {}
        public Builder(PipelineProcessOptionsReplicateSchemaChange defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionOnDdlError = defaults.actionOnDdlError;
    	      this.actionOnDmlError = defaults.actionOnDmlError;
    	      this.canReplicateSchemaChange = defaults.canReplicateSchemaChange;
        }

        @CustomType.Setter
        public Builder actionOnDdlError(@Nullable String actionOnDdlError) {

            this.actionOnDdlError = actionOnDdlError;
            return this;
        }
        @CustomType.Setter
        public Builder actionOnDmlError(@Nullable String actionOnDmlError) {

            this.actionOnDmlError = actionOnDmlError;
            return this;
        }
        @CustomType.Setter
        public Builder canReplicateSchemaChange(String canReplicateSchemaChange) {
            if (canReplicateSchemaChange == null) {
              throw new MissingRequiredPropertyException("PipelineProcessOptionsReplicateSchemaChange", "canReplicateSchemaChange");
            }
            this.canReplicateSchemaChange = canReplicateSchemaChange;
            return this;
        }
        public PipelineProcessOptionsReplicateSchemaChange build() {
            final var _resultValue = new PipelineProcessOptionsReplicateSchemaChange();
            _resultValue.actionOnDdlError = actionOnDdlError;
            _resultValue.actionOnDmlError = actionOnDmlError;
            _resultValue.canReplicateSchemaChange = canReplicateSchemaChange;
            return _resultValue;
        }
    }
}
