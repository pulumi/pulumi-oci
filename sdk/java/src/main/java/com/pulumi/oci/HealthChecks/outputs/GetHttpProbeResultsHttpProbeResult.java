// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.HealthChecks.outputs.GetHttpProbeResultsHttpProbeResultConnection;
import com.pulumi.oci.HealthChecks.outputs.GetHttpProbeResultsHttpProbeResultDn;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHttpProbeResultsHttpProbeResult {
    /**
     * @return The time immediately after the vantage point finishes establishing the connection to the server to retrieve the resource.
     * 
     */
    private @Nullable Double connectEnd;
    /**
     * @return The time immediately before the vantage point starts establishing the connection to the server to retrieve the resource.
     * 
     */
    private @Nullable Double connectStart;
    /**
     * @return TCP connection results.  All durations are in milliseconds.
     * 
     */
    private @Nullable List<GetHttpProbeResultsHttpProbeResultConnection> connections;
    /**
     * @return The DNS resolution results.
     * 
     */
    private @Nullable List<GetHttpProbeResultsHttpProbeResultDn> dns;
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    private @Nullable Double domainLookupEnd;
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    private @Nullable Double domainLookupStart;
    /**
     * @return The total duration from start of request until response is fully consumed or the connection is closed.
     * 
     */
    private @Nullable Double duration;
    /**
     * @return The size, in octets, of the payload body prior to removing any applied content-codings.
     * 
     */
    private @Nullable Integer encodedBodySize;
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    private @Nullable String errorCategory;
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    private @Nullable String errorMessage;
    /**
     * @return The time immediately before the vantage point starts to fetch the resource.
     * 
     */
    private @Nullable Double fetchStart;
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    private @Nullable Boolean isHealthy;
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    private @Nullable Boolean isTimedOut;
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    private @Nullable String key;
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    private @Nullable String probeConfigurationId;
    /**
     * @return The supported protocols available for HTTP probes.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The time immediately before the vantage point starts requesting the resource from the server.
     * 
     */
    private @Nullable Double requestStart;
    /**
     * @return The time immediately after the vantage point receives the last byte of the response or immediately before the transport connection is closed, whichever comes first.
     * 
     */
    private @Nullable Double responseEnd;
    /**
     * @return The time immediately after the vantage point&#39;s HTTP parser receives the first byte of the response.
     * 
     */
    private @Nullable Double responseStart;
    /**
     * @return The time immediately before the vantage point starts the handshake process to secure the current connection.
     * 
     */
    private @Nullable Double secureConnectionStart;
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    private @Nullable Double startTime;
    /**
     * @return The HTTP response status code.
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return Filters results that match the `target`.
     * 
     */
    private @Nullable String target;
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    private @Nullable String vantagePointName;

    private GetHttpProbeResultsHttpProbeResult() {}
    /**
     * @return The time immediately after the vantage point finishes establishing the connection to the server to retrieve the resource.
     * 
     */
    public Optional<Double> connectEnd() {
        return Optional.ofNullable(this.connectEnd);
    }
    /**
     * @return The time immediately before the vantage point starts establishing the connection to the server to retrieve the resource.
     * 
     */
    public Optional<Double> connectStart() {
        return Optional.ofNullable(this.connectStart);
    }
    /**
     * @return TCP connection results.  All durations are in milliseconds.
     * 
     */
    public List<GetHttpProbeResultsHttpProbeResultConnection> connections() {
        return this.connections == null ? List.of() : this.connections;
    }
    /**
     * @return The DNS resolution results.
     * 
     */
    public List<GetHttpProbeResultsHttpProbeResultDn> dns() {
        return this.dns == null ? List.of() : this.dns;
    }
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    public Optional<Double> domainLookupEnd() {
        return Optional.ofNullable(this.domainLookupEnd);
    }
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    public Optional<Double> domainLookupStart() {
        return Optional.ofNullable(this.domainLookupStart);
    }
    /**
     * @return The total duration from start of request until response is fully consumed or the connection is closed.
     * 
     */
    public Optional<Double> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return The size, in octets, of the payload body prior to removing any applied content-codings.
     * 
     */
    public Optional<Integer> encodedBodySize() {
        return Optional.ofNullable(this.encodedBodySize);
    }
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    public Optional<String> errorCategory() {
        return Optional.ofNullable(this.errorCategory);
    }
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    public Optional<String> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }
    /**
     * @return The time immediately before the vantage point starts to fetch the resource.
     * 
     */
    public Optional<Double> fetchStart() {
        return Optional.ofNullable(this.fetchStart);
    }
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    public Optional<Boolean> isHealthy() {
        return Optional.ofNullable(this.isHealthy);
    }
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    public Optional<Boolean> isTimedOut() {
        return Optional.ofNullable(this.isTimedOut);
    }
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    public Optional<String> probeConfigurationId() {
        return Optional.ofNullable(this.probeConfigurationId);
    }
    /**
     * @return The supported protocols available for HTTP probes.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The time immediately before the vantage point starts requesting the resource from the server.
     * 
     */
    public Optional<Double> requestStart() {
        return Optional.ofNullable(this.requestStart);
    }
    /**
     * @return The time immediately after the vantage point receives the last byte of the response or immediately before the transport connection is closed, whichever comes first.
     * 
     */
    public Optional<Double> responseEnd() {
        return Optional.ofNullable(this.responseEnd);
    }
    /**
     * @return The time immediately after the vantage point&#39;s HTTP parser receives the first byte of the response.
     * 
     */
    public Optional<Double> responseStart() {
        return Optional.ofNullable(this.responseStart);
    }
    /**
     * @return The time immediately before the vantage point starts the handshake process to secure the current connection.
     * 
     */
    public Optional<Double> secureConnectionStart() {
        return Optional.ofNullable(this.secureConnectionStart);
    }
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    public Optional<Double> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return The HTTP response status code.
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return Filters results that match the `target`.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    public Optional<String> vantagePointName() {
        return Optional.ofNullable(this.vantagePointName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHttpProbeResultsHttpProbeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double connectEnd;
        private @Nullable Double connectStart;
        private @Nullable List<GetHttpProbeResultsHttpProbeResultConnection> connections;
        private @Nullable List<GetHttpProbeResultsHttpProbeResultDn> dns;
        private @Nullable Double domainLookupEnd;
        private @Nullable Double domainLookupStart;
        private @Nullable Double duration;
        private @Nullable Integer encodedBodySize;
        private @Nullable String errorCategory;
        private @Nullable String errorMessage;
        private @Nullable Double fetchStart;
        private @Nullable Boolean isHealthy;
        private @Nullable Boolean isTimedOut;
        private @Nullable String key;
        private @Nullable String probeConfigurationId;
        private @Nullable String protocol;
        private @Nullable Double requestStart;
        private @Nullable Double responseEnd;
        private @Nullable Double responseStart;
        private @Nullable Double secureConnectionStart;
        private @Nullable Double startTime;
        private @Nullable Integer statusCode;
        private @Nullable String target;
        private @Nullable String vantagePointName;
        public Builder() {}
        public Builder(GetHttpProbeResultsHttpProbeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectEnd = defaults.connectEnd;
    	      this.connectStart = defaults.connectStart;
    	      this.connections = defaults.connections;
    	      this.dns = defaults.dns;
    	      this.domainLookupEnd = defaults.domainLookupEnd;
    	      this.domainLookupStart = defaults.domainLookupStart;
    	      this.duration = defaults.duration;
    	      this.encodedBodySize = defaults.encodedBodySize;
    	      this.errorCategory = defaults.errorCategory;
    	      this.errorMessage = defaults.errorMessage;
    	      this.fetchStart = defaults.fetchStart;
    	      this.isHealthy = defaults.isHealthy;
    	      this.isTimedOut = defaults.isTimedOut;
    	      this.key = defaults.key;
    	      this.probeConfigurationId = defaults.probeConfigurationId;
    	      this.protocol = defaults.protocol;
    	      this.requestStart = defaults.requestStart;
    	      this.responseEnd = defaults.responseEnd;
    	      this.responseStart = defaults.responseStart;
    	      this.secureConnectionStart = defaults.secureConnectionStart;
    	      this.startTime = defaults.startTime;
    	      this.statusCode = defaults.statusCode;
    	      this.target = defaults.target;
    	      this.vantagePointName = defaults.vantagePointName;
        }

        @CustomType.Setter
        public Builder connectEnd(@Nullable Double connectEnd) {
            this.connectEnd = connectEnd;
            return this;
        }
        @CustomType.Setter
        public Builder connectStart(@Nullable Double connectStart) {
            this.connectStart = connectStart;
            return this;
        }
        @CustomType.Setter
        public Builder connections(@Nullable List<GetHttpProbeResultsHttpProbeResultConnection> connections) {
            this.connections = connections;
            return this;
        }
        public Builder connections(GetHttpProbeResultsHttpProbeResultConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder dns(@Nullable List<GetHttpProbeResultsHttpProbeResultDn> dns) {
            this.dns = dns;
            return this;
        }
        public Builder dns(GetHttpProbeResultsHttpProbeResultDn... dns) {
            return dns(List.of(dns));
        }
        @CustomType.Setter
        public Builder domainLookupEnd(@Nullable Double domainLookupEnd) {
            this.domainLookupEnd = domainLookupEnd;
            return this;
        }
        @CustomType.Setter
        public Builder domainLookupStart(@Nullable Double domainLookupStart) {
            this.domainLookupStart = domainLookupStart;
            return this;
        }
        @CustomType.Setter
        public Builder duration(@Nullable Double duration) {
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder encodedBodySize(@Nullable Integer encodedBodySize) {
            this.encodedBodySize = encodedBodySize;
            return this;
        }
        @CustomType.Setter
        public Builder errorCategory(@Nullable String errorCategory) {
            this.errorCategory = errorCategory;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(@Nullable String errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder fetchStart(@Nullable Double fetchStart) {
            this.fetchStart = fetchStart;
            return this;
        }
        @CustomType.Setter
        public Builder isHealthy(@Nullable Boolean isHealthy) {
            this.isHealthy = isHealthy;
            return this;
        }
        @CustomType.Setter
        public Builder isTimedOut(@Nullable Boolean isTimedOut) {
            this.isTimedOut = isTimedOut;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder probeConfigurationId(@Nullable String probeConfigurationId) {
            this.probeConfigurationId = probeConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder requestStart(@Nullable Double requestStart) {
            this.requestStart = requestStart;
            return this;
        }
        @CustomType.Setter
        public Builder responseEnd(@Nullable Double responseEnd) {
            this.responseEnd = responseEnd;
            return this;
        }
        @CustomType.Setter
        public Builder responseStart(@Nullable Double responseStart) {
            this.responseStart = responseStart;
            return this;
        }
        @CustomType.Setter
        public Builder secureConnectionStart(@Nullable Double secureConnectionStart) {
            this.secureConnectionStart = secureConnectionStart;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable Double startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder vantagePointName(@Nullable String vantagePointName) {
            this.vantagePointName = vantagePointName;
            return this;
        }
        public GetHttpProbeResultsHttpProbeResult build() {
            final var o = new GetHttpProbeResultsHttpProbeResult();
            o.connectEnd = connectEnd;
            o.connectStart = connectStart;
            o.connections = connections;
            o.dns = dns;
            o.domainLookupEnd = domainLookupEnd;
            o.domainLookupStart = domainLookupStart;
            o.duration = duration;
            o.encodedBodySize = encodedBodySize;
            o.errorCategory = errorCategory;
            o.errorMessage = errorMessage;
            o.fetchStart = fetchStart;
            o.isHealthy = isHealthy;
            o.isTimedOut = isTimedOut;
            o.key = key;
            o.probeConfigurationId = probeConfigurationId;
            o.protocol = protocol;
            o.requestStart = requestStart;
            o.responseEnd = responseEnd;
            o.responseStart = responseStart;
            o.secureConnectionStart = secureConnectionStart;
            o.startTime = startTime;
            o.statusCode = statusCode;
            o.target = target;
            o.vantagePointName = vantagePointName;
            return o;
        }
    }
}
