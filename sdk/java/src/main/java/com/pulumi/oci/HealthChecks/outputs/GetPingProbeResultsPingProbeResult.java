// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.HealthChecks.outputs.GetPingProbeResultsPingProbeResultConnection;
import com.pulumi.oci.HealthChecks.outputs.GetPingProbeResultsPingProbeResultDn;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPingProbeResultsPingProbeResult {
    /**
     * @return The network connection results.
     * 
     */
    private @Nullable List<GetPingProbeResultsPingProbeResultConnection> connections;
    /**
     * @return The DNS resolution results.
     * 
     */
    private @Nullable List<GetPingProbeResultsPingProbeResultDn> dns;
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    private @Nullable Double domainLookupEnd;
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    private @Nullable Double domainLookupStart;
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    private @Nullable String errorCategory;
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    private @Nullable String errorMessage;
    /**
     * @return The ICMP code of the response message.  This field is not used when the protocol is set to TCP.  For more information on ICMP codes, see [Internet Control Message Protocol (ICMP) Parameters](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).
     * 
     */
    private @Nullable Integer icmpCode;
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    private @Nullable Boolean isHealthy;
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    private @Nullable Boolean isTimedOut;
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    private @Nullable String key;
    /**
     * @return The latency of the probe execution, in milliseconds.
     * 
     */
    private @Nullable Double latencyInMs;
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    private @Nullable String probeConfigurationId;
    /**
     * @return The protocols for ping probes.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    private @Nullable Double startTime;
    /**
     * @return Filters results that match the `target`.
     * 
     */
    private @Nullable String target;
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    private @Nullable String vantagePointName;

    private GetPingProbeResultsPingProbeResult() {}
    /**
     * @return The network connection results.
     * 
     */
    public List<GetPingProbeResultsPingProbeResultConnection> connections() {
        return this.connections == null ? List.of() : this.connections;
    }
    /**
     * @return The DNS resolution results.
     * 
     */
    public List<GetPingProbeResultsPingProbeResultDn> dns() {
        return this.dns == null ? List.of() : this.dns;
    }
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    public Optional<Double> domainLookupEnd() {
        return Optional.ofNullable(this.domainLookupEnd);
    }
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    public Optional<Double> domainLookupStart() {
        return Optional.ofNullable(this.domainLookupStart);
    }
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    public Optional<String> errorCategory() {
        return Optional.ofNullable(this.errorCategory);
    }
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    public Optional<String> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }
    /**
     * @return The ICMP code of the response message.  This field is not used when the protocol is set to TCP.  For more information on ICMP codes, see [Internet Control Message Protocol (ICMP) Parameters](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).
     * 
     */
    public Optional<Integer> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    public Optional<Boolean> isHealthy() {
        return Optional.ofNullable(this.isHealthy);
    }
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    public Optional<Boolean> isTimedOut() {
        return Optional.ofNullable(this.isTimedOut);
    }
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The latency of the probe execution, in milliseconds.
     * 
     */
    public Optional<Double> latencyInMs() {
        return Optional.ofNullable(this.latencyInMs);
    }
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    public Optional<String> probeConfigurationId() {
        return Optional.ofNullable(this.probeConfigurationId);
    }
    /**
     * @return The protocols for ping probes.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    public Optional<Double> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Filters results that match the `target`.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    public Optional<String> vantagePointName() {
        return Optional.ofNullable(this.vantagePointName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPingProbeResultsPingProbeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetPingProbeResultsPingProbeResultConnection> connections;
        private @Nullable List<GetPingProbeResultsPingProbeResultDn> dns;
        private @Nullable Double domainLookupEnd;
        private @Nullable Double domainLookupStart;
        private @Nullable String errorCategory;
        private @Nullable String errorMessage;
        private @Nullable Integer icmpCode;
        private @Nullable Boolean isHealthy;
        private @Nullable Boolean isTimedOut;
        private @Nullable String key;
        private @Nullable Double latencyInMs;
        private @Nullable String probeConfigurationId;
        private @Nullable String protocol;
        private @Nullable Double startTime;
        private @Nullable String target;
        private @Nullable String vantagePointName;
        public Builder() {}
        public Builder(GetPingProbeResultsPingProbeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.dns = defaults.dns;
    	      this.domainLookupEnd = defaults.domainLookupEnd;
    	      this.domainLookupStart = defaults.domainLookupStart;
    	      this.errorCategory = defaults.errorCategory;
    	      this.errorMessage = defaults.errorMessage;
    	      this.icmpCode = defaults.icmpCode;
    	      this.isHealthy = defaults.isHealthy;
    	      this.isTimedOut = defaults.isTimedOut;
    	      this.key = defaults.key;
    	      this.latencyInMs = defaults.latencyInMs;
    	      this.probeConfigurationId = defaults.probeConfigurationId;
    	      this.protocol = defaults.protocol;
    	      this.startTime = defaults.startTime;
    	      this.target = defaults.target;
    	      this.vantagePointName = defaults.vantagePointName;
        }

        @CustomType.Setter
        public Builder connections(@Nullable List<GetPingProbeResultsPingProbeResultConnection> connections) {
            this.connections = connections;
            return this;
        }
        public Builder connections(GetPingProbeResultsPingProbeResultConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder dns(@Nullable List<GetPingProbeResultsPingProbeResultDn> dns) {
            this.dns = dns;
            return this;
        }
        public Builder dns(GetPingProbeResultsPingProbeResultDn... dns) {
            return dns(List.of(dns));
        }
        @CustomType.Setter
        public Builder domainLookupEnd(@Nullable Double domainLookupEnd) {
            this.domainLookupEnd = domainLookupEnd;
            return this;
        }
        @CustomType.Setter
        public Builder domainLookupStart(@Nullable Double domainLookupStart) {
            this.domainLookupStart = domainLookupStart;
            return this;
        }
        @CustomType.Setter
        public Builder errorCategory(@Nullable String errorCategory) {
            this.errorCategory = errorCategory;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(@Nullable String errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder icmpCode(@Nullable Integer icmpCode) {
            this.icmpCode = icmpCode;
            return this;
        }
        @CustomType.Setter
        public Builder isHealthy(@Nullable Boolean isHealthy) {
            this.isHealthy = isHealthy;
            return this;
        }
        @CustomType.Setter
        public Builder isTimedOut(@Nullable Boolean isTimedOut) {
            this.isTimedOut = isTimedOut;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder latencyInMs(@Nullable Double latencyInMs) {
            this.latencyInMs = latencyInMs;
            return this;
        }
        @CustomType.Setter
        public Builder probeConfigurationId(@Nullable String probeConfigurationId) {
            this.probeConfigurationId = probeConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable Double startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder vantagePointName(@Nullable String vantagePointName) {
            this.vantagePointName = vantagePointName;
            return this;
        }
        public GetPingProbeResultsPingProbeResult build() {
            final var o = new GetPingProbeResultsPingProbeResult();
            o.connections = connections;
            o.dns = dns;
            o.domainLookupEnd = domainLookupEnd;
            o.domainLookupStart = domainLookupStart;
            o.errorCategory = errorCategory;
            o.errorMessage = errorMessage;
            o.icmpCode = icmpCode;
            o.isHealthy = isHealthy;
            o.isTimedOut = isTimedOut;
            o.key = key;
            o.latencyInMs = latencyInMs;
            o.probeConfigurationId = probeConfigurationId;
            o.protocol = protocol;
            o.startTime = startTime;
            o.target = target;
            o.vantagePointName = vantagePointName;
            return o;
        }
    }
}
