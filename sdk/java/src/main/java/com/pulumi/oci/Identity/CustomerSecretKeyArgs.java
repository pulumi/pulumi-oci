// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CustomerSecretKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomerSecretKeyArgs Empty = new CustomerSecretKeyArgs();

    /**
     * (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The OCID of the user.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The OCID of the user.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private CustomerSecretKeyArgs() {}

    private CustomerSecretKeyArgs(CustomerSecretKeyArgs $) {
        this.displayName = $.displayName;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomerSecretKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomerSecretKeyArgs $;

        public Builder() {
            $ = new CustomerSecretKeyArgs();
        }

        public Builder(CustomerSecretKeyArgs defaults) {
            $ = new CustomerSecretKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param userId The OCID of the user.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The OCID of the user.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public CustomerSecretKeyArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("CustomerSecretKeyArgs", "displayName");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("CustomerSecretKeyArgs", "userId");
            }
            return $;
        }
    }

}
