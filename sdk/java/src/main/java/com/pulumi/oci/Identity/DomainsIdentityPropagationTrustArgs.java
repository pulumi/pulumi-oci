// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.inputs.DomainsIdentityPropagationTrustImpersonationServiceUserArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentityPropagationTrustKeytabArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentityPropagationTrustTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsIdentityPropagationTrustArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsIdentityPropagationTrustArgs Empty = new DomainsIdentityPropagationTrustArgs();

    /**
     * (Updatable) The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * caseExact: true
     * * idcsSearchable: true
     * * uniqueness: none
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return (Updatable) The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * caseExact: true
     * * idcsSearchable: true
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * (Updatable) If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
     * 
     * **SCIM++ Properties:**
     * * type: boolean
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return (Updatable) If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
     * 
     * **SCIM++ Properties:**
     * * type: boolean
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * (Updatable) Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
     * 
     * **SCIM++ Properties:**
     * * type: boolean
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    @Import(name="allowImpersonation")
    private @Nullable Output<Boolean> allowImpersonation;

    /**
     * @return (Updatable) Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
     * 
     * **SCIM++ Properties:**
     * * type: boolean
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<Boolean>> allowImpersonation() {
        return Optional.ofNullable(this.allowImpersonation);
    }

    /**
     * (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    @Import(name="attributeSets")
    private @Nullable Output<List<String>> attributeSets;

    /**
     * @return (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> attributeSets() {
        return Optional.ofNullable(this.attributeSets);
    }

    /**
     * (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<String> attributes;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Optional<Output<String>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * (Updatable) The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    @Import(name="clientClaimName")
    private @Nullable Output<String> clientClaimName;

    /**
     * @return (Updatable) The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<String>> clientClaimName() {
        return Optional.ofNullable(this.clientClaimName);
    }

    /**
     * (Updatable) The value that corresponds to the client claim name used to identify to whom the token is issued.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: true
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: true
     * * idcsSearchable: false
     * 
     */
    @Import(name="clientClaimValues")
    private @Nullable Output<List<String>> clientClaimValues;

    /**
     * @return (Updatable) The value that corresponds to the client claim name used to identify to whom the token is issued.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: true
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: true
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<List<String>>> clientClaimValues() {
        return Optional.ofNullable(this.clientClaimValues);
    }

    /**
     * (Updatable) The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
     * 
     * **Added In:** 2308181911
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="clockSkewSeconds")
    private @Nullable Output<Integer> clockSkewSeconds;

    /**
     * @return (Updatable) The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
     * 
     * **Added In:** 2308181911
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> clockSkewSeconds() {
        return Optional.ofNullable(this.clockSkewSeconds);
    }

    /**
     * (Updatable) The description of the Identity Propagation Trust.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: false
     * * idcsSearchable: false
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the Identity Propagation Trust.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: false
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint", required=true)
    private Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Output<String> idcsEndpoint() {
        return this.idcsEndpoint;
    }

    /**
     * (Updatable) The Impersonating Principal.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [rule, value]
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="impersonationServiceUsers")
    private @Nullable Output<List<DomainsIdentityPropagationTrustImpersonationServiceUserArgs>> impersonationServiceUsers;

    /**
     * @return (Updatable) The Impersonating Principal.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [rule, value]
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsIdentityPropagationTrustImpersonationServiceUserArgs>>> impersonationServiceUsers() {
        return Optional.ofNullable(this.impersonationServiceUsers);
    }

    /**
     * (Updatable) The issuer claim of the Identity provider.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: true
     * * mutability: readWrite
     * * returned: always
     * * caseExact: true
     * * idcsSearchable: true
     * * uniqueness: server
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return (Updatable) The issuer claim of the Identity provider.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: true
     * * mutability: readWrite
     * * returned: always
     * * caseExact: true
     * * idcsSearchable: true
     * * uniqueness: server
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * (Updatable) The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [secretOcid]
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="keytab")
    private @Nullable Output<DomainsIdentityPropagationTrustKeytabArgs> keytab;

    /**
     * @return (Updatable) The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [secretOcid]
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsIdentityPropagationTrustKeytabArgs>> keytab() {
        return Optional.ofNullable(this.keytab);
    }

    /**
     * The name of the the Identity Propagation Trust.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * required: true
     * * mutability: immutable
     * * returned: default
     * * uniqueness: none
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the the Identity Propagation Trust.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * required: true
     * * mutability: immutable
     * * returned: default
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The value of all the authorized OAuth Clients.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="oauthClients")
    private @Nullable Output<List<String>> oauthClients;

    /**
     * @return (Updatable) The value of all the authorized OAuth Clients.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> oauthClients() {
        return Optional.ofNullable(this.oauthClients);
    }

    /**
     * (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * (Updatable) Store the public key if public key cert.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    @Import(name="publicCertificate")
    private @Nullable Output<String> publicCertificate;

    /**
     * @return (Updatable) Store the public key if public key cert.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<String>> publicCertificate() {
        return Optional.ofNullable(this.publicCertificate);
    }

    /**
     * (Updatable) The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: false
     * * idcsSearchable: false
     * 
     */
    @Import(name="publicKeyEndpoint")
    private @Nullable Output<String> publicKeyEndpoint;

    /**
     * @return (Updatable) The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: false
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<String>> publicKeyEndpoint() {
        return Optional.ofNullable(this.publicKeyEndpoint);
    }

    /**
     * (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="schemas", required=true)
    private Output<List<String>> schemas;

    /**
     * @return (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> schemas() {
        return this.schemas;
    }

    /**
     * (Updatable) Used for locating the subject claim from the incoming token.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: true
     * * idcsSearchable: false
     * 
     */
    @Import(name="subjectClaimName")
    private @Nullable Output<String> subjectClaimName;

    /**
     * @return (Updatable) Used for locating the subject claim from the incoming token.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * * caseExact: true
     * * idcsSearchable: false
     * 
     */
    public Optional<Output<String>> subjectClaimName() {
        return Optional.ofNullable(this.subjectClaimName);
    }

    /**
     * (Updatable) Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * idcsSearchable: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * 
     */
    @Import(name="subjectMappingAttribute")
    private @Nullable Output<String> subjectMappingAttribute;

    /**
     * @return (Updatable) Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * idcsSearchable: false
     * * required: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> subjectMappingAttribute() {
        return Optional.ofNullable(this.subjectMappingAttribute);
    }

    /**
     * (Updatable) The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="subjectType")
    private @Nullable Output<String> subjectType;

    /**
     * @return (Updatable) The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> subjectType() {
        return Optional.ofNullable(this.subjectType);
    }

    /**
     * (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsIdentityPropagationTrustTagArgs>> tags;

    /**
     * @return (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsIdentityPropagationTrustTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (Updatable) The type of the inbound token from the Identity cloud provider.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * required: true
     * * mutability: readWrite
     * * returned: default
     * * type: string
     * * multiValued: false
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of the inbound token from the Identity cloud provider.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * required: true
     * * mutability: readWrite
     * * returned: default
     * * type: string
     * * multiValued: false
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DomainsIdentityPropagationTrustArgs() {}

    private DomainsIdentityPropagationTrustArgs(DomainsIdentityPropagationTrustArgs $) {
        this.accountId = $.accountId;
        this.active = $.active;
        this.allowImpersonation = $.allowImpersonation;
        this.attributeSets = $.attributeSets;
        this.attributes = $.attributes;
        this.authorization = $.authorization;
        this.clientClaimName = $.clientClaimName;
        this.clientClaimValues = $.clientClaimValues;
        this.clockSkewSeconds = $.clockSkewSeconds;
        this.description = $.description;
        this.idcsEndpoint = $.idcsEndpoint;
        this.impersonationServiceUsers = $.impersonationServiceUsers;
        this.issuer = $.issuer;
        this.keytab = $.keytab;
        this.name = $.name;
        this.oauthClients = $.oauthClients;
        this.ocid = $.ocid;
        this.publicCertificate = $.publicCertificate;
        this.publicKeyEndpoint = $.publicKeyEndpoint;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.schemas = $.schemas;
        this.subjectClaimName = $.subjectClaimName;
        this.subjectMappingAttribute = $.subjectMappingAttribute;
        this.subjectType = $.subjectType;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsIdentityPropagationTrustArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsIdentityPropagationTrustArgs $;

        public Builder() {
            $ = new DomainsIdentityPropagationTrustArgs();
        }

        public Builder(DomainsIdentityPropagationTrustArgs defaults) {
            $ = new DomainsIdentityPropagationTrustArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId (Updatable) The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * caseExact: true
         * * idcsSearchable: true
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId (Updatable) The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * caseExact: true
         * * idcsSearchable: true
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param active (Updatable) If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
         * 
         * **SCIM++ Properties:**
         * * type: boolean
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active (Updatable) If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
         * 
         * **SCIM++ Properties:**
         * * type: boolean
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param allowImpersonation (Updatable) Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
         * 
         * **SCIM++ Properties:**
         * * type: boolean
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder allowImpersonation(@Nullable Output<Boolean> allowImpersonation) {
            $.allowImpersonation = allowImpersonation;
            return this;
        }

        /**
         * @param allowImpersonation (Updatable) Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
         * 
         * **SCIM++ Properties:**
         * * type: boolean
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder allowImpersonation(Boolean allowImpersonation) {
            return allowImpersonation(Output.of(allowImpersonation));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(@Nullable Output<List<String>> attributeSets) {
            $.attributeSets = attributeSets;
            return this;
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(List<String> attributeSets) {
            return attributeSets(Output.of(attributeSets));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<String> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param clientClaimName (Updatable) The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder clientClaimName(@Nullable Output<String> clientClaimName) {
            $.clientClaimName = clientClaimName;
            return this;
        }

        /**
         * @param clientClaimName (Updatable) The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder clientClaimName(String clientClaimName) {
            return clientClaimName(Output.of(clientClaimName));
        }

        /**
         * @param clientClaimValues (Updatable) The value that corresponds to the client claim name used to identify to whom the token is issued.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: true
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: true
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder clientClaimValues(@Nullable Output<List<String>> clientClaimValues) {
            $.clientClaimValues = clientClaimValues;
            return this;
        }

        /**
         * @param clientClaimValues (Updatable) The value that corresponds to the client claim name used to identify to whom the token is issued.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: true
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: true
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder clientClaimValues(List<String> clientClaimValues) {
            return clientClaimValues(Output.of(clientClaimValues));
        }

        /**
         * @param clientClaimValues (Updatable) The value that corresponds to the client claim name used to identify to whom the token is issued.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: true
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: true
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder clientClaimValues(String... clientClaimValues) {
            return clientClaimValues(List.of(clientClaimValues));
        }

        /**
         * @param clockSkewSeconds (Updatable) The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
         * 
         * **Added In:** 2308181911
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder clockSkewSeconds(@Nullable Output<Integer> clockSkewSeconds) {
            $.clockSkewSeconds = clockSkewSeconds;
            return this;
        }

        /**
         * @param clockSkewSeconds (Updatable) The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
         * 
         * **Added In:** 2308181911
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder clockSkewSeconds(Integer clockSkewSeconds) {
            return clockSkewSeconds(Output.of(clockSkewSeconds));
        }

        /**
         * @param description (Updatable) The description of the Identity Propagation Trust.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: false
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the Identity Propagation Trust.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: false
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param impersonationServiceUsers (Updatable) The Impersonating Principal.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [rule, value]
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder impersonationServiceUsers(@Nullable Output<List<DomainsIdentityPropagationTrustImpersonationServiceUserArgs>> impersonationServiceUsers) {
            $.impersonationServiceUsers = impersonationServiceUsers;
            return this;
        }

        /**
         * @param impersonationServiceUsers (Updatable) The Impersonating Principal.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [rule, value]
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder impersonationServiceUsers(List<DomainsIdentityPropagationTrustImpersonationServiceUserArgs> impersonationServiceUsers) {
            return impersonationServiceUsers(Output.of(impersonationServiceUsers));
        }

        /**
         * @param impersonationServiceUsers (Updatable) The Impersonating Principal.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [rule, value]
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder impersonationServiceUsers(DomainsIdentityPropagationTrustImpersonationServiceUserArgs... impersonationServiceUsers) {
            return impersonationServiceUsers(List.of(impersonationServiceUsers));
        }

        /**
         * @param issuer (Updatable) The issuer claim of the Identity provider.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: true
         * * mutability: readWrite
         * * returned: always
         * * caseExact: true
         * * idcsSearchable: true
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer (Updatable) The issuer claim of the Identity provider.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: true
         * * mutability: readWrite
         * * returned: always
         * * caseExact: true
         * * idcsSearchable: true
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param keytab (Updatable) The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [secretOcid]
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keytab(@Nullable Output<DomainsIdentityPropagationTrustKeytabArgs> keytab) {
            $.keytab = keytab;
            return this;
        }

        /**
         * @param keytab (Updatable) The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [secretOcid]
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keytab(DomainsIdentityPropagationTrustKeytabArgs keytab) {
            return keytab(Output.of(keytab));
        }

        /**
         * @param name The name of the the Identity Propagation Trust.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * required: true
         * * mutability: immutable
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the the Identity Propagation Trust.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * required: true
         * * mutability: immutable
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oauthClients (Updatable) The value of all the authorized OAuth Clients.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oauthClients(@Nullable Output<List<String>> oauthClients) {
            $.oauthClients = oauthClients;
            return this;
        }

        /**
         * @param oauthClients (Updatable) The value of all the authorized OAuth Clients.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oauthClients(List<String> oauthClients) {
            return oauthClients(Output.of(oauthClients));
        }

        /**
         * @param oauthClients (Updatable) The value of all the authorized OAuth Clients.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oauthClients(String... oauthClients) {
            return oauthClients(List.of(oauthClients));
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param publicCertificate (Updatable) Store the public key if public key cert.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(@Nullable Output<String> publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        /**
         * @param publicCertificate (Updatable) Store the public key if public key cert.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            return publicCertificate(Output.of(publicCertificate));
        }

        /**
         * @param publicKeyEndpoint (Updatable) The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: false
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder publicKeyEndpoint(@Nullable Output<String> publicKeyEndpoint) {
            $.publicKeyEndpoint = publicKeyEndpoint;
            return this;
        }

        /**
         * @param publicKeyEndpoint (Updatable) The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: false
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder publicKeyEndpoint(String publicKeyEndpoint) {
            return publicKeyEndpoint(Output.of(publicKeyEndpoint));
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param subjectClaimName (Updatable) Used for locating the subject claim from the incoming token.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: true
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder subjectClaimName(@Nullable Output<String> subjectClaimName) {
            $.subjectClaimName = subjectClaimName;
            return this;
        }

        /**
         * @param subjectClaimName (Updatable) Used for locating the subject claim from the incoming token.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * * caseExact: true
         * * idcsSearchable: false
         * 
         * @return builder
         * 
         */
        public Builder subjectClaimName(String subjectClaimName) {
            return subjectClaimName(Output.of(subjectClaimName));
        }

        /**
         * @param subjectMappingAttribute (Updatable) Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * idcsSearchable: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder subjectMappingAttribute(@Nullable Output<String> subjectMappingAttribute) {
            $.subjectMappingAttribute = subjectMappingAttribute;
            return this;
        }

        /**
         * @param subjectMappingAttribute (Updatable) Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * idcsSearchable: false
         * * required: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder subjectMappingAttribute(String subjectMappingAttribute) {
            return subjectMappingAttribute(Output.of(subjectMappingAttribute));
        }

        /**
         * @param subjectType (Updatable) The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder subjectType(@Nullable Output<String> subjectType) {
            $.subjectType = subjectType;
            return this;
        }

        /**
         * @param subjectType (Updatable) The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder subjectType(String subjectType) {
            return subjectType(Output.of(subjectType));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsIdentityPropagationTrustTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsIdentityPropagationTrustTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsIdentityPropagationTrustTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type (Updatable) The type of the inbound token from the Identity cloud provider.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * required: true
         * * mutability: readWrite
         * * returned: default
         * * type: string
         * * multiValued: false
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of the inbound token from the Identity cloud provider.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * required: true
         * * mutability: readWrite
         * * returned: default
         * * type: string
         * * multiValued: false
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainsIdentityPropagationTrustArgs build() {
            if ($.idcsEndpoint == null) {
                throw new MissingRequiredPropertyException("DomainsIdentityPropagationTrustArgs", "idcsEndpoint");
            }
            if ($.issuer == null) {
                throw new MissingRequiredPropertyException("DomainsIdentityPropagationTrustArgs", "issuer");
            }
            if ($.schemas == null) {
                throw new MissingRequiredPropertyException("DomainsIdentityPropagationTrustArgs", "schemas");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DomainsIdentityPropagationTrustArgs", "type");
            }
            return $;
        }
    }

}
