// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.inputs.DomainsIdentitySettingMyProfileArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentitySettingPosixGidArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentitySettingPosixUidArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentitySettingTagArgs;
import com.pulumi.oci.Identity.inputs.DomainsIdentitySettingTokenArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsIdentitySettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsIdentitySettingArgs Empty = new DomainsIdentitySettingArgs();

    /**
     * (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    @Import(name="attributeSets")
    private @Nullable Output<List<String>> attributeSets;

    /**
     * @return (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> attributeSets() {
        return Optional.ofNullable(this.attributeSets);
    }

    /**
     * (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<String> attributes;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Optional<Output<String>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * (Updatable) Indicates whether to show the &#39;user-is-locked&#39; message during authentication if the user is already locked. The default value is false, which tells the system to show a generic &#39;authentication-failure&#39; message. This is the most secure behavior. If the option is set to true, the system shows a more detailed &#39;error-message&#39; that says the user is locked. This is more helpful but is less secure, for example, because the difference in error-messages could be used to determine which usernames exist and which do not.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="emitLockedMessageWhenUserIsLocked")
    private @Nullable Output<Boolean> emitLockedMessageWhenUserIsLocked;

    /**
     * @return (Updatable) Indicates whether to show the &#39;user-is-locked&#39; message during authentication if the user is already locked. The default value is false, which tells the system to show a generic &#39;authentication-failure&#39; message. This is the most secure behavior. If the option is set to true, the system shows a more detailed &#39;error-message&#39; that says the user is locked. This is more helpful but is less secure, for example, because the difference in error-messages could be used to determine which usernames exist and which do not.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> emitLockedMessageWhenUserIsLocked() {
        return Optional.ofNullable(this.emitLockedMessageWhenUserIsLocked);
    }

    /**
     * (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint", required=true)
    private Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Output<String> idcsEndpoint() {
        return this.idcsEndpoint;
    }

    /**
     * ID of the resource
     * 
     */
    @Import(name="identitySettingId", required=true)
    private Output<String> identitySettingId;

    /**
     * @return ID of the resource
     * 
     */
    public Output<String> identitySettingId() {
        return this.identitySettingId;
    }

    /**
     * (Updatable) Whether to allow users to update their own profile.
     * 
     * **Added In:** 2207040824
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="myProfile")
    private @Nullable Output<DomainsIdentitySettingMyProfileArgs> myProfile;

    /**
     * @return (Updatable) Whether to allow users to update their own profile.
     * 
     * **Added In:** 2207040824
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsIdentitySettingMyProfileArgs>> myProfile() {
        return Optional.ofNullable(this.myProfile);
    }

    /**
     * (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * (Updatable) A list of Posix Gid settings.
     * 
     * **Added In:** 17.4.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="posixGid")
    private @Nullable Output<DomainsIdentitySettingPosixGidArgs> posixGid;

    /**
     * @return (Updatable) A list of Posix Gid settings.
     * 
     * **Added In:** 17.4.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsIdentitySettingPosixGidArgs>> posixGid() {
        return Optional.ofNullable(this.posixGid);
    }

    /**
     * (Updatable) A list of Posix Uid settings.
     * 
     * **Added In:** 17.4.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="posixUid")
    private @Nullable Output<DomainsIdentitySettingPosixUidArgs> posixUid;

    /**
     * @return (Updatable) A list of Posix Uid settings.
     * 
     * **Added In:** 17.4.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsIdentitySettingPosixUidArgs>> posixUid() {
        return Optional.ofNullable(this.posixUid);
    }

    /**
     * (Updatable) Indicates whether the primary email is required.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="primaryEmailRequired")
    private @Nullable Output<Boolean> primaryEmailRequired;

    /**
     * @return (Updatable) Indicates whether the primary email is required.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> primaryEmailRequired() {
        return Optional.ofNullable(this.primaryEmailRequired);
    }

    /**
     * (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * (Updatable) **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none Determines the PasswordAuthenticator API response when a user is both &#39;locked&#39; and &#39;inactive.&#39; If false (default), a &#39;locked&#39; message is shown. If true, an &#39;inactive&#39; message is shown.
     * 
     */
    @Import(name="returnInactiveOverLockedMessage")
    private @Nullable Output<Boolean> returnInactiveOverLockedMessage;

    /**
     * @return (Updatable) **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none Determines the PasswordAuthenticator API response when a user is both &#39;locked&#39; and &#39;inactive.&#39; If false (default), a &#39;locked&#39; message is shown. If true, an &#39;inactive&#39; message is shown.
     * 
     */
    public Optional<Output<Boolean>> returnInactiveOverLockedMessage() {
        return Optional.ofNullable(this.returnInactiveOverLockedMessage);
    }

    /**
     * (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="schemas", required=true)
    private Output<List<String>> schemas;

    /**
     * @return (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> schemas() {
        return this.schemas;
    }

    /**
     * (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsIdentitySettingTagArgs>> tags;

    /**
     * @return (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsIdentitySettingTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (Updatable) A list of tokens and their expiry length.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [type]
     * * multiValued: true
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="tokens")
    private @Nullable Output<List<DomainsIdentitySettingTokenArgs>> tokens;

    /**
     * @return (Updatable) A list of tokens and their expiry length.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [type]
     * * multiValued: true
     * * required: false
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsIdentitySettingTokenArgs>>> tokens() {
        return Optional.ofNullable(this.tokens);
    }

    /**
     * (Updatable) Indicates whether a user is allowed to change their own recovery email.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="userAllowedToSetRecoveryEmail")
    private @Nullable Output<Boolean> userAllowedToSetRecoveryEmail;

    /**
     * @return (Updatable) Indicates whether a user is allowed to change their own recovery email.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> userAllowedToSetRecoveryEmail() {
        return Optional.ofNullable(this.userAllowedToSetRecoveryEmail);
    }

    private DomainsIdentitySettingArgs() {}

    private DomainsIdentitySettingArgs(DomainsIdentitySettingArgs $) {
        this.attributeSets = $.attributeSets;
        this.attributes = $.attributes;
        this.authorization = $.authorization;
        this.emitLockedMessageWhenUserIsLocked = $.emitLockedMessageWhenUserIsLocked;
        this.externalId = $.externalId;
        this.idcsEndpoint = $.idcsEndpoint;
        this.identitySettingId = $.identitySettingId;
        this.myProfile = $.myProfile;
        this.ocid = $.ocid;
        this.posixGid = $.posixGid;
        this.posixUid = $.posixUid;
        this.primaryEmailRequired = $.primaryEmailRequired;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.returnInactiveOverLockedMessage = $.returnInactiveOverLockedMessage;
        this.schemas = $.schemas;
        this.tags = $.tags;
        this.tokens = $.tokens;
        this.userAllowedToSetRecoveryEmail = $.userAllowedToSetRecoveryEmail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsIdentitySettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsIdentitySettingArgs $;

        public Builder() {
            $ = new DomainsIdentitySettingArgs();
        }

        public Builder(DomainsIdentitySettingArgs defaults) {
            $ = new DomainsIdentitySettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(@Nullable Output<List<String>> attributeSets) {
            $.attributeSets = attributeSets;
            return this;
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(List<String> attributeSets) {
            return attributeSets(Output.of(attributeSets));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<String> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param emitLockedMessageWhenUserIsLocked (Updatable) Indicates whether to show the &#39;user-is-locked&#39; message during authentication if the user is already locked. The default value is false, which tells the system to show a generic &#39;authentication-failure&#39; message. This is the most secure behavior. If the option is set to true, the system shows a more detailed &#39;error-message&#39; that says the user is locked. This is more helpful but is less secure, for example, because the difference in error-messages could be used to determine which usernames exist and which do not.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder emitLockedMessageWhenUserIsLocked(@Nullable Output<Boolean> emitLockedMessageWhenUserIsLocked) {
            $.emitLockedMessageWhenUserIsLocked = emitLockedMessageWhenUserIsLocked;
            return this;
        }

        /**
         * @param emitLockedMessageWhenUserIsLocked (Updatable) Indicates whether to show the &#39;user-is-locked&#39; message during authentication if the user is already locked. The default value is false, which tells the system to show a generic &#39;authentication-failure&#39; message. This is the most secure behavior. If the option is set to true, the system shows a more detailed &#39;error-message&#39; that says the user is locked. This is more helpful but is less secure, for example, because the difference in error-messages could be used to determine which usernames exist and which do not.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder emitLockedMessageWhenUserIsLocked(Boolean emitLockedMessageWhenUserIsLocked) {
            return emitLockedMessageWhenUserIsLocked(Output.of(emitLockedMessageWhenUserIsLocked));
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param identitySettingId ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder identitySettingId(Output<String> identitySettingId) {
            $.identitySettingId = identitySettingId;
            return this;
        }

        /**
         * @param identitySettingId ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder identitySettingId(String identitySettingId) {
            return identitySettingId(Output.of(identitySettingId));
        }

        /**
         * @param myProfile (Updatable) Whether to allow users to update their own profile.
         * 
         * **Added In:** 2207040824
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder myProfile(@Nullable Output<DomainsIdentitySettingMyProfileArgs> myProfile) {
            $.myProfile = myProfile;
            return this;
        }

        /**
         * @param myProfile (Updatable) Whether to allow users to update their own profile.
         * 
         * **Added In:** 2207040824
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder myProfile(DomainsIdentitySettingMyProfileArgs myProfile) {
            return myProfile(Output.of(myProfile));
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param posixGid (Updatable) A list of Posix Gid settings.
         * 
         * **Added In:** 17.4.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder posixGid(@Nullable Output<DomainsIdentitySettingPosixGidArgs> posixGid) {
            $.posixGid = posixGid;
            return this;
        }

        /**
         * @param posixGid (Updatable) A list of Posix Gid settings.
         * 
         * **Added In:** 17.4.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder posixGid(DomainsIdentitySettingPosixGidArgs posixGid) {
            return posixGid(Output.of(posixGid));
        }

        /**
         * @param posixUid (Updatable) A list of Posix Uid settings.
         * 
         * **Added In:** 17.4.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder posixUid(@Nullable Output<DomainsIdentitySettingPosixUidArgs> posixUid) {
            $.posixUid = posixUid;
            return this;
        }

        /**
         * @param posixUid (Updatable) A list of Posix Uid settings.
         * 
         * **Added In:** 17.4.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder posixUid(DomainsIdentitySettingPosixUidArgs posixUid) {
            return posixUid(Output.of(posixUid));
        }

        /**
         * @param primaryEmailRequired (Updatable) Indicates whether the primary email is required.
         * 
         * **Added In:** 19.1.4
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder primaryEmailRequired(@Nullable Output<Boolean> primaryEmailRequired) {
            $.primaryEmailRequired = primaryEmailRequired;
            return this;
        }

        /**
         * @param primaryEmailRequired (Updatable) Indicates whether the primary email is required.
         * 
         * **Added In:** 19.1.4
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder primaryEmailRequired(Boolean primaryEmailRequired) {
            return primaryEmailRequired(Output.of(primaryEmailRequired));
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param returnInactiveOverLockedMessage (Updatable) **Added In:** 2302092332
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none Determines the PasswordAuthenticator API response when a user is both &#39;locked&#39; and &#39;inactive.&#39; If false (default), a &#39;locked&#39; message is shown. If true, an &#39;inactive&#39; message is shown.
         * 
         * @return builder
         * 
         */
        public Builder returnInactiveOverLockedMessage(@Nullable Output<Boolean> returnInactiveOverLockedMessage) {
            $.returnInactiveOverLockedMessage = returnInactiveOverLockedMessage;
            return this;
        }

        /**
         * @param returnInactiveOverLockedMessage (Updatable) **Added In:** 2302092332
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none Determines the PasswordAuthenticator API response when a user is both &#39;locked&#39; and &#39;inactive.&#39; If false (default), a &#39;locked&#39; message is shown. If true, an &#39;inactive&#39; message is shown.
         * 
         * @return builder
         * 
         */
        public Builder returnInactiveOverLockedMessage(Boolean returnInactiveOverLockedMessage) {
            return returnInactiveOverLockedMessage(Output.of(returnInactiveOverLockedMessage));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsIdentitySettingTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsIdentitySettingTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsIdentitySettingTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tokens (Updatable) A list of tokens and their expiry length.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [type]
         * * multiValued: true
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tokens(@Nullable Output<List<DomainsIdentitySettingTokenArgs>> tokens) {
            $.tokens = tokens;
            return this;
        }

        /**
         * @param tokens (Updatable) A list of tokens and their expiry length.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [type]
         * * multiValued: true
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tokens(List<DomainsIdentitySettingTokenArgs> tokens) {
            return tokens(Output.of(tokens));
        }

        /**
         * @param tokens (Updatable) A list of tokens and their expiry length.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [type]
         * * multiValued: true
         * * required: false
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tokens(DomainsIdentitySettingTokenArgs... tokens) {
            return tokens(List.of(tokens));
        }

        /**
         * @param userAllowedToSetRecoveryEmail (Updatable) Indicates whether a user is allowed to change their own recovery email.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userAllowedToSetRecoveryEmail(@Nullable Output<Boolean> userAllowedToSetRecoveryEmail) {
            $.userAllowedToSetRecoveryEmail = userAllowedToSetRecoveryEmail;
            return this;
        }

        /**
         * @param userAllowedToSetRecoveryEmail (Updatable) Indicates whether a user is allowed to change their own recovery email.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userAllowedToSetRecoveryEmail(Boolean userAllowedToSetRecoveryEmail) {
            return userAllowedToSetRecoveryEmail(Output.of(userAllowedToSetRecoveryEmail));
        }

        public DomainsIdentitySettingArgs build() {
            if ($.idcsEndpoint == null) {
                throw new MissingRequiredPropertyException("DomainsIdentitySettingArgs", "idcsEndpoint");
            }
            if ($.identitySettingId == null) {
                throw new MissingRequiredPropertyException("DomainsIdentitySettingArgs", "identitySettingId");
            }
            if ($.schemas == null) {
                throw new MissingRequiredPropertyException("DomainsIdentitySettingArgs", "schemas");
            }
            return $;
        }
    }

}
