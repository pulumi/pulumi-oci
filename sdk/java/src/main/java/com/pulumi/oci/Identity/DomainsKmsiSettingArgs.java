// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsKmsiSettingTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsKmsiSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsKmsiSettingArgs Empty = new DomainsKmsiSettingArgs();

    /**
     * (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    @Import(name="attributeSets")
    private @Nullable Output<List<String>> attributeSets;

    /**
     * @return (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> attributeSets() {
        return Optional.ofNullable(this.attributeSets);
    }

    /**
     * (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<String> attributes;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Optional<Output<String>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint", required=true)
    private Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Output<String> idcsEndpoint() {
        return this.idcsEndpoint;
    }

    /**
     * (Updatable) Identifier represents KMSI feature is enabled or not.
     * 
     */
    @Import(name="kmsiFeatureEnabled")
    private @Nullable Output<Boolean> kmsiFeatureEnabled;

    /**
     * @return (Updatable) Identifier represents KMSI feature is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> kmsiFeatureEnabled() {
        return Optional.ofNullable(this.kmsiFeatureEnabled);
    }

    /**
     * (Updatable) Identifier represents KMSI to be prompted to user or not.
     * 
     */
    @Import(name="kmsiPromptEnabled")
    private @Nullable Output<Boolean> kmsiPromptEnabled;

    /**
     * @return (Updatable) Identifier represents KMSI to be prompted to user or not.
     * 
     */
    public Optional<Output<Boolean>> kmsiPromptEnabled() {
        return Optional.ofNullable(this.kmsiPromptEnabled);
    }

    /**
     * ID of the resource
     * 
     */
    @Import(name="kmsiSettingId", required=true)
    private Output<String> kmsiSettingId;

    /**
     * @return ID of the resource
     * 
     */
    public Output<String> kmsiSettingId() {
        return this.kmsiSettingId;
    }

    /**
     * (Updatable) Timestamp of when the KmsiSettings was enabled last time.
     * 
     */
    @Import(name="lastEnabledOn")
    private @Nullable Output<String> lastEnabledOn;

    /**
     * @return (Updatable) Timestamp of when the KmsiSettings was enabled last time.
     * 
     */
    public Optional<Output<String>> lastEnabledOn() {
        return Optional.ofNullable(this.lastEnabledOn);
    }

    /**
     * (Updatable) Identifier represents duration in days within which kmsi token must be used.
     * 
     */
    @Import(name="lastUsedValidityInDays")
    private @Nullable Output<Integer> lastUsedValidityInDays;

    /**
     * @return (Updatable) Identifier represents duration in days within which kmsi token must be used.
     * 
     */
    public Optional<Output<Integer>> lastUsedValidityInDays() {
        return Optional.ofNullable(this.lastUsedValidityInDays);
    }

    /**
     * (Updatable) Identifier represents maximum KMSI sessions allowed in the system.
     * 
     */
    @Import(name="maxAllowedSessions")
    private @Nullable Output<Integer> maxAllowedSessions;

    /**
     * @return (Updatable) Identifier represents maximum KMSI sessions allowed in the system.
     * 
     */
    public Optional<Output<Integer>> maxAllowedSessions() {
        return Optional.ofNullable(this.maxAllowedSessions);
    }

    /**
     * (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    @Import(name="schemas", required=true)
    private Output<List<String>> schemas;

    /**
     * @return (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public Output<List<String>> schemas() {
        return this.schemas;
    }

    /**
     * (Updatable) A list of tags on this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsKmsiSettingTagArgs>> tags;

    /**
     * @return (Updatable) A list of tags on this resource.
     * 
     */
    public Optional<Output<List<DomainsKmsiSettingTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (Updatable) Identifier represents validity duration in days.
     * 
     */
    @Import(name="tokenValidityInDays")
    private @Nullable Output<Integer> tokenValidityInDays;

    /**
     * @return (Updatable) Identifier represents validity duration in days.
     * 
     */
    public Optional<Output<Integer>> tokenValidityInDays() {
        return Optional.ofNullable(this.tokenValidityInDays);
    }

    /**
     * (Updatable) Identifier represents whether user is prompted for ToU or not.
     * 
     */
    @Import(name="touPromptDisabled")
    private @Nullable Output<Boolean> touPromptDisabled;

    /**
     * @return (Updatable) Identifier represents whether user is prompted for ToU or not.
     * 
     */
    public Optional<Output<Boolean>> touPromptDisabled() {
        return Optional.ofNullable(this.touPromptDisabled);
    }

    private DomainsKmsiSettingArgs() {}

    private DomainsKmsiSettingArgs(DomainsKmsiSettingArgs $) {
        this.attributeSets = $.attributeSets;
        this.attributes = $.attributes;
        this.authorization = $.authorization;
        this.externalId = $.externalId;
        this.idcsEndpoint = $.idcsEndpoint;
        this.kmsiFeatureEnabled = $.kmsiFeatureEnabled;
        this.kmsiPromptEnabled = $.kmsiPromptEnabled;
        this.kmsiSettingId = $.kmsiSettingId;
        this.lastEnabledOn = $.lastEnabledOn;
        this.lastUsedValidityInDays = $.lastUsedValidityInDays;
        this.maxAllowedSessions = $.maxAllowedSessions;
        this.ocid = $.ocid;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.schemas = $.schemas;
        this.tags = $.tags;
        this.tokenValidityInDays = $.tokenValidityInDays;
        this.touPromptDisabled = $.touPromptDisabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsKmsiSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsKmsiSettingArgs $;

        public Builder() {
            $ = new DomainsKmsiSettingArgs();
        }

        public Builder(DomainsKmsiSettingArgs defaults) {
            $ = new DomainsKmsiSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(@Nullable Output<List<String>> attributeSets) {
            $.attributeSets = attributeSets;
            return this;
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(List<String> attributeSets) {
            return attributeSets(Output.of(attributeSets));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<String> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param kmsiFeatureEnabled (Updatable) Identifier represents KMSI feature is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder kmsiFeatureEnabled(@Nullable Output<Boolean> kmsiFeatureEnabled) {
            $.kmsiFeatureEnabled = kmsiFeatureEnabled;
            return this;
        }

        /**
         * @param kmsiFeatureEnabled (Updatable) Identifier represents KMSI feature is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder kmsiFeatureEnabled(Boolean kmsiFeatureEnabled) {
            return kmsiFeatureEnabled(Output.of(kmsiFeatureEnabled));
        }

        /**
         * @param kmsiPromptEnabled (Updatable) Identifier represents KMSI to be prompted to user or not.
         * 
         * @return builder
         * 
         */
        public Builder kmsiPromptEnabled(@Nullable Output<Boolean> kmsiPromptEnabled) {
            $.kmsiPromptEnabled = kmsiPromptEnabled;
            return this;
        }

        /**
         * @param kmsiPromptEnabled (Updatable) Identifier represents KMSI to be prompted to user or not.
         * 
         * @return builder
         * 
         */
        public Builder kmsiPromptEnabled(Boolean kmsiPromptEnabled) {
            return kmsiPromptEnabled(Output.of(kmsiPromptEnabled));
        }

        /**
         * @param kmsiSettingId ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder kmsiSettingId(Output<String> kmsiSettingId) {
            $.kmsiSettingId = kmsiSettingId;
            return this;
        }

        /**
         * @param kmsiSettingId ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder kmsiSettingId(String kmsiSettingId) {
            return kmsiSettingId(Output.of(kmsiSettingId));
        }

        /**
         * @param lastEnabledOn (Updatable) Timestamp of when the KmsiSettings was enabled last time.
         * 
         * @return builder
         * 
         */
        public Builder lastEnabledOn(@Nullable Output<String> lastEnabledOn) {
            $.lastEnabledOn = lastEnabledOn;
            return this;
        }

        /**
         * @param lastEnabledOn (Updatable) Timestamp of when the KmsiSettings was enabled last time.
         * 
         * @return builder
         * 
         */
        public Builder lastEnabledOn(String lastEnabledOn) {
            return lastEnabledOn(Output.of(lastEnabledOn));
        }

        /**
         * @param lastUsedValidityInDays (Updatable) Identifier represents duration in days within which kmsi token must be used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedValidityInDays(@Nullable Output<Integer> lastUsedValidityInDays) {
            $.lastUsedValidityInDays = lastUsedValidityInDays;
            return this;
        }

        /**
         * @param lastUsedValidityInDays (Updatable) Identifier represents duration in days within which kmsi token must be used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedValidityInDays(Integer lastUsedValidityInDays) {
            return lastUsedValidityInDays(Output.of(lastUsedValidityInDays));
        }

        /**
         * @param maxAllowedSessions (Updatable) Identifier represents maximum KMSI sessions allowed in the system.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedSessions(@Nullable Output<Integer> maxAllowedSessions) {
            $.maxAllowedSessions = maxAllowedSessions;
            return this;
        }

        /**
         * @param maxAllowedSessions (Updatable) Identifier represents maximum KMSI sessions allowed in the system.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedSessions(Integer maxAllowedSessions) {
            return maxAllowedSessions(Output.of(maxAllowedSessions));
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsKmsiSettingTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsKmsiSettingTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsKmsiSettingTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tokenValidityInDays (Updatable) Identifier represents validity duration in days.
         * 
         * @return builder
         * 
         */
        public Builder tokenValidityInDays(@Nullable Output<Integer> tokenValidityInDays) {
            $.tokenValidityInDays = tokenValidityInDays;
            return this;
        }

        /**
         * @param tokenValidityInDays (Updatable) Identifier represents validity duration in days.
         * 
         * @return builder
         * 
         */
        public Builder tokenValidityInDays(Integer tokenValidityInDays) {
            return tokenValidityInDays(Output.of(tokenValidityInDays));
        }

        /**
         * @param touPromptDisabled (Updatable) Identifier represents whether user is prompted for ToU or not.
         * 
         * @return builder
         * 
         */
        public Builder touPromptDisabled(@Nullable Output<Boolean> touPromptDisabled) {
            $.touPromptDisabled = touPromptDisabled;
            return this;
        }

        /**
         * @param touPromptDisabled (Updatable) Identifier represents whether user is prompted for ToU or not.
         * 
         * @return builder
         * 
         */
        public Builder touPromptDisabled(Boolean touPromptDisabled) {
            return touPromptDisabled(Output.of(touPromptDisabled));
        }

        public DomainsKmsiSettingArgs build() {
            $.idcsEndpoint = Objects.requireNonNull($.idcsEndpoint, "expected parameter 'idcsEndpoint' to be non-null");
            $.kmsiSettingId = Objects.requireNonNull($.kmsiSettingId, "expected parameter 'kmsiSettingId' to be non-null");
            $.schemas = Objects.requireNonNull($.schemas, "expected parameter 'schemas' to be non-null");
            return $;
        }
    }

}
