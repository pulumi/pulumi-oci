// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.inputs.DomainsOauthClientCertificateTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsOauthClientCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsOauthClientCertificateArgs Empty = new DomainsOauthClientCertificateArgs();

    /**
     * The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Certificate alias
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: true
     * * caseExact: false
     * * mutability: readWrite
     * * returned: always
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    @Import(name="certificateAlias", required=true)
    private Output<String> certificateAlias;

    /**
     * @return Certificate alias
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: true
     * * caseExact: false
     * * mutability: readWrite
     * * returned: always
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    public Output<String> certificateAlias() {
        return this.certificateAlias;
    }

    /**
     * An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * mutability: readWrite
     * * returned: default
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint", required=true)
    private Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Output<String> idcsEndpoint() {
        return this.idcsEndpoint;
    }

    /**
     * Key store ID
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: true
     * * returned: never
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    @Import(name="keyStoreId")
    private @Nullable Output<String> keyStoreId;

    /**
     * @return Key store ID
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: true
     * * returned: never
     * * uniqueness: none
     * * idcsSearchable: true
     * 
     */
    public Optional<Output<String>> keyStoreId() {
        return Optional.ofNullable(this.keyStoreId);
    }

    /**
     * Key store name
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * returned: always
     * * uniqueness: none
     * 
     */
    @Import(name="keyStoreName")
    private @Nullable Output<String> keyStoreName;

    /**
     * @return Key store name
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * returned: always
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> keyStoreName() {
        return Optional.ofNullable(this.keyStoreName);
    }

    /**
     * Key store password
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * idcsSensitive: none
     * * required: false
     * * caseExact: true
     * * returned: never
     * * uniqueness: none
     * 
     */
    @Import(name="keyStorePassword")
    private @Nullable Output<String> keyStorePassword;

    /**
     * @return Key store password
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * idcsSensitive: none
     * * required: false
     * * caseExact: true
     * * returned: never
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> keyStorePassword() {
        return Optional.ofNullable(this.keyStorePassword);
    }

    /**
     * Map
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * returned: always
     * * uniqueness: none
     * 
     */
    @Import(name="map")
    private @Nullable Output<String> map;

    /**
     * @return Map
     * 
     * **SCIM++ Properties:**
     * * type: string
     * * multiValued: false
     * * required: false
     * * caseExact: false
     * * returned: always
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> map() {
        return Optional.ofNullable(this.map);
    }

    /**
     * Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="schemas", required=true)
    private Output<List<String>> schemas;

    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> schemas() {
        return this.schemas;
    }

    /**
     * A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsOauthClientCertificateTagArgs>> tags;

    /**
     * @return A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsOauthClientCertificateTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Base 64Key data attribute
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="x509base64certificate", required=true)
    private Output<String> x509base64certificate;

    /**
     * @return Base 64Key data attribute
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> x509base64certificate() {
        return this.x509base64certificate;
    }

    private DomainsOauthClientCertificateArgs() {}

    private DomainsOauthClientCertificateArgs(DomainsOauthClientCertificateArgs $) {
        this.authorization = $.authorization;
        this.certificateAlias = $.certificateAlias;
        this.externalId = $.externalId;
        this.idcsEndpoint = $.idcsEndpoint;
        this.keyStoreId = $.keyStoreId;
        this.keyStoreName = $.keyStoreName;
        this.keyStorePassword = $.keyStorePassword;
        this.map = $.map;
        this.ocid = $.ocid;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.schemas = $.schemas;
        this.tags = $.tags;
        this.x509base64certificate = $.x509base64certificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsOauthClientCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsOauthClientCertificateArgs $;

        public Builder() {
            $ = new DomainsOauthClientCertificateArgs();
        }

        public Builder(DomainsOauthClientCertificateArgs defaults) {
            $ = new DomainsOauthClientCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param certificateAlias Certificate alias
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: true
         * * caseExact: false
         * * mutability: readWrite
         * * returned: always
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder certificateAlias(Output<String> certificateAlias) {
            $.certificateAlias = certificateAlias;
            return this;
        }

        /**
         * @param certificateAlias Certificate alias
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: true
         * * caseExact: false
         * * mutability: readWrite
         * * returned: always
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder certificateAlias(String certificateAlias) {
            return certificateAlias(Output.of(certificateAlias));
        }

        /**
         * @param externalId An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * mutability: readWrite
         * * returned: default
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param keyStoreId Key store ID
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: true
         * * returned: never
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder keyStoreId(@Nullable Output<String> keyStoreId) {
            $.keyStoreId = keyStoreId;
            return this;
        }

        /**
         * @param keyStoreId Key store ID
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: true
         * * returned: never
         * * uniqueness: none
         * * idcsSearchable: true
         * 
         * @return builder
         * 
         */
        public Builder keyStoreId(String keyStoreId) {
            return keyStoreId(Output.of(keyStoreId));
        }

        /**
         * @param keyStoreName Key store name
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * returned: always
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyStoreName(@Nullable Output<String> keyStoreName) {
            $.keyStoreName = keyStoreName;
            return this;
        }

        /**
         * @param keyStoreName Key store name
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * returned: always
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyStoreName(String keyStoreName) {
            return keyStoreName(Output.of(keyStoreName));
        }

        /**
         * @param keyStorePassword Key store password
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * idcsSensitive: none
         * * required: false
         * * caseExact: true
         * * returned: never
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(@Nullable Output<String> keyStorePassword) {
            $.keyStorePassword = keyStorePassword;
            return this;
        }

        /**
         * @param keyStorePassword Key store password
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * idcsSensitive: none
         * * required: false
         * * caseExact: true
         * * returned: never
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyStorePassword(String keyStorePassword) {
            return keyStorePassword(Output.of(keyStorePassword));
        }

        /**
         * @param map Map
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * returned: always
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder map(@Nullable Output<String> map) {
            $.map = map;
            return this;
        }

        /**
         * @param map Map
         * 
         * **SCIM++ Properties:**
         * * type: string
         * * multiValued: false
         * * required: false
         * * caseExact: false
         * * returned: always
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder map(String map) {
            return map(Output.of(map));
        }

        /**
         * @param ocid Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param resourceTypeSchemaVersion An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsOauthClientCertificateTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsOauthClientCertificateTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsOauthClientCertificateTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param x509base64certificate Base 64Key data attribute
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder x509base64certificate(Output<String> x509base64certificate) {
            $.x509base64certificate = x509base64certificate;
            return this;
        }

        /**
         * @param x509base64certificate Base 64Key data attribute
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder x509base64certificate(String x509base64certificate) {
            return x509base64certificate(Output.of(x509base64certificate));
        }

        public DomainsOauthClientCertificateArgs build() {
            if ($.certificateAlias == null) {
                throw new MissingRequiredPropertyException("DomainsOauthClientCertificateArgs", "certificateAlias");
            }
            if ($.idcsEndpoint == null) {
                throw new MissingRequiredPropertyException("DomainsOauthClientCertificateArgs", "idcsEndpoint");
            }
            if ($.schemas == null) {
                throw new MissingRequiredPropertyException("DomainsOauthClientCertificateArgs", "schemas");
            }
            if ($.x509base64certificate == null) {
                throw new MissingRequiredPropertyException("DomainsOauthClientCertificateArgs", "x509base64certificate");
            }
            return $;
        }
    }

}
