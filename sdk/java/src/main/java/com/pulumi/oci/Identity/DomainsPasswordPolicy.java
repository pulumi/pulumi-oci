// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Identity.DomainsPasswordPolicyArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyState;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyConfiguredPasswordPolicyRule;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyGroup;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyMeta;
import com.pulumi.oci.Identity.outputs.DomainsPasswordPolicyTag;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Password Policy resource in Oracle Cloud Infrastructure Identity Domains service.
 * 
 * Create a password policy.
 * 
 * ## Import
 * 
 * PasswordPolicies can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:Identity/domainsPasswordPolicy:DomainsPasswordPolicy test_password_policy &#34;idcsEndpoint/{idcsEndpoint}/passwordPolicies/{passwordPolicyId}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Identity/domainsPasswordPolicy:DomainsPasswordPolicy")
public class DomainsPasswordPolicy extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="allowedChars", refs={String.class}, tree="[0]")
    private Output<String> allowedChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> allowedChars() {
        return this.allowedChars;
    }
    /**
     * (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    @Export(name="attributeSets", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> attributeSets;

    /**
     * @return (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public Output<Optional<List<String>>> attributeSets() {
        return Codegen.optional(this.attributeSets);
    }
    /**
     * (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    @Export(name="attributes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> attributes;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Output<Optional<String>> attributes() {
        return Codegen.optional(this.attributes);
    }
    /**
     * (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Export(name="authorization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authorization;

    /**
     * @return (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Output<Optional<String>> authorization() {
        return Codegen.optional(this.authorization);
    }
    /**
     * (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="compartmentOcid", refs={String.class}, tree="[0]")
    private Output<String> compartmentOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [key]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Export(name="configuredPasswordPolicyRules", refs={List.class,DomainsPasswordPolicyConfiguredPasswordPolicyRule.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyConfiguredPasswordPolicyRule>> configuredPasswordPolicyRules;

    /**
     * @return (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [key]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Output<List<DomainsPasswordPolicyConfiguredPasswordPolicyRule>> configuredPasswordPolicyRules() {
        return this.configuredPasswordPolicyRules;
    }
    /**
     * (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="deleteInProgress", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteInProgress;

    /**
     * @return (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * (Updatable) A String that describes the password policy
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return (Updatable) A String that describes the password policy
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Updatable) A delimiter used to separate characters in the dictionary file
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="dictionaryDelimiter", refs={String.class}, tree="[0]")
    private Output<String> dictionaryDelimiter;

    /**
     * @return (Updatable) A delimiter used to separate characters in the dictionary file
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> dictionaryDelimiter() {
        return this.dictionaryDelimiter;
    }
    /**
     * (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="dictionaryLocation", refs={String.class}, tree="[0]")
    private Output<String> dictionaryLocation;

    /**
     * @return (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> dictionaryLocation() {
        return this.dictionaryLocation;
    }
    /**
     * (Updatable) Indicates whether the password can match a dictionary word
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="dictionaryWordDisallowed", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dictionaryWordDisallowed;

    /**
     * @return (Updatable) Indicates whether the password can match a dictionary word
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> dictionaryWordDisallowed() {
        return this.dictionaryWordDisallowed;
    }
    /**
     * (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="disallowedChars", refs={String.class}, tree="[0]")
    private Output<String> disallowedChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> disallowedChars() {
        return this.disallowedChars;
    }
    /**
     * (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="disallowedSubstrings", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> disallowedSubstrings;

    /**
     * @return (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> disallowedSubstrings() {
        return this.disallowedSubstrings;
    }
    /**
     * (Updatable) List of User attributes whose values are not allowed in the password.
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="disallowedUserAttributeValues", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> disallowedUserAttributeValues;

    /**
     * @return (Updatable) List of User attributes whose values are not allowed in the password.
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> disallowedUserAttributeValues() {
        return this.disallowedUserAttributeValues;
    }
    /**
     * (Updatable) The number of distinct characters between old password and new password
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="distinctCharacters", refs={Integer.class}, tree="[0]")
    private Output<Integer> distinctCharacters;

    /**
     * @return (Updatable) The number of distinct characters between old password and new password
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> distinctCharacters() {
        return this.distinctCharacters;
    }
    /**
     * (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="domainOcid", refs={String.class}, tree="[0]")
    private Output<String> domainOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> domainOcid() {
        return this.domainOcid;
    }
    /**
     * (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="externalId", refs={String.class}, tree="[0]")
    private Output<String> externalId;

    /**
     * @return (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }
    /**
     * (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="firstNameDisallowed", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> firstNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> firstNameDisallowed() {
        return this.firstNameDisallowed;
    }
    /**
     * (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: writeOnly
     * * required: false
     * * returned: never
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="forcePasswordReset", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> forcePasswordReset;

    /**
     * @return (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: writeOnly
     * * required: false
     * * returned: never
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> forcePasswordReset() {
        return this.forcePasswordReset;
    }
    /**
     * (Updatable) A list of groups that the password policy belongs to.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Export(name="groups", refs={List.class,DomainsPasswordPolicyGroup.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyGroup>> groups;

    /**
     * @return (Updatable) A list of groups that the password policy belongs to.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Output<List<DomainsPasswordPolicyGroup>> groups() {
        return this.groups;
    }
    /**
     * (Updatable) The User or App who created the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: default
     * * type: complex
     * 
     */
    @Export(name="idcsCreatedBies", refs={List.class,DomainsPasswordPolicyIdcsCreatedBy.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyIdcsCreatedBy>> idcsCreatedBies;

    /**
     * @return (Updatable) The User or App who created the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: default
     * * type: complex
     * 
     */
    public Output<List<DomainsPasswordPolicyIdcsCreatedBy>> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Export(name="idcsEndpoint", refs={String.class}, tree="[0]")
    private Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Output<String> idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * (Updatable) The User or App who modified the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * 
     */
    @Export(name="idcsLastModifiedBies", refs={List.class,DomainsPasswordPolicyIdcsLastModifiedBy.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyIdcsLastModifiedBy>> idcsLastModifiedBies;

    /**
     * @return (Updatable) The User or App who modified the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * 
     */
    public Output<List<DomainsPasswordPolicyIdcsLastModifiedBy>> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * (Updatable) The release number when the resource was upgraded.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="idcsLastUpgradedInRelease", refs={String.class}, tree="[0]")
    private Output<String> idcsLastUpgradedInRelease;

    /**
     * @return (Updatable) The release number when the resource was upgraded.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="idcsPreventedOperations", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> idcsPreventedOperations;

    /**
     * @return (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="lastNameDisallowed", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> lastNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> lastNameDisallowed() {
        return this.lastNameDisallowed;
    }
    /**
     * (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="lockoutDuration", refs={Integer.class}, tree="[0]")
    private Output<Integer> lockoutDuration;

    /**
     * @return (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> lockoutDuration() {
        return this.lockoutDuration;
    }
    /**
     * (Updatable) An integer that represents the maximum number of failed logins before an account is locked
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="maxIncorrectAttempts", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxIncorrectAttempts;

    /**
     * @return (Updatable) An integer that represents the maximum number of failed logins before an account is locked
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxIncorrectAttempts() {
        return this.maxIncorrectAttempts;
    }
    /**
     * (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="maxLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxLength;

    /**
     * @return (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxLength() {
        return this.maxLength;
    }
    /**
     * (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="maxRepeatedChars", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxRepeatedChars;

    /**
     * @return (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxRepeatedChars() {
        return this.maxRepeatedChars;
    }
    /**
     * (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="maxSpecialChars", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxSpecialChars;

    /**
     * @return (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxSpecialChars() {
        return this.maxSpecialChars;
    }
    /**
     * (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
     * * type: complex
     * 
     */
    @Export(name="metas", refs={List.class,DomainsPasswordPolicyMeta.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyMeta>> metas;

    /**
     * @return (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
     * * type: complex
     * 
     */
    public Output<List<DomainsPasswordPolicyMeta>> metas() {
        return this.metas;
    }
    /**
     * (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minAlphaNumerals", refs={Integer.class}, tree="[0]")
    private Output<Integer> minAlphaNumerals;

    /**
     * @return (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minAlphaNumerals() {
        return this.minAlphaNumerals;
    }
    /**
     * (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minAlphas", refs={Integer.class}, tree="[0]")
    private Output<Integer> minAlphas;

    /**
     * @return (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minAlphas() {
        return this.minAlphas;
    }
    /**
     * (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> minLength;

    /**
     * @return (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minLength() {
        return this.minLength;
    }
    /**
     * (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minLowerCase", refs={Integer.class}, tree="[0]")
    private Output<Integer> minLowerCase;

    /**
     * @return (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minLowerCase() {
        return this.minLowerCase;
    }
    /**
     * (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minNumerals", refs={Integer.class}, tree="[0]")
    private Output<Integer> minNumerals;

    /**
     * @return (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minNumerals() {
        return this.minNumerals;
    }
    /**
     * (Updatable) Minimum time after which the user can resubmit the reset password request
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minPasswordAge", refs={Integer.class}, tree="[0]")
    private Output<Integer> minPasswordAge;

    /**
     * @return (Updatable) Minimum time after which the user can resubmit the reset password request
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minPasswordAge() {
        return this.minPasswordAge;
    }
    /**
     * (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minSpecialChars", refs={Integer.class}, tree="[0]")
    private Output<Integer> minSpecialChars;

    /**
     * @return (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minSpecialChars() {
        return this.minSpecialChars;
    }
    /**
     * (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minUniqueChars", refs={Integer.class}, tree="[0]")
    private Output<Integer> minUniqueChars;

    /**
     * @return (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minUniqueChars() {
        return this.minUniqueChars;
    }
    /**
     * (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="minUpperCase", refs={Integer.class}, tree="[0]")
    private Output<Integer> minUpperCase;

    /**
     * @return (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minUpperCase() {
        return this.minUpperCase;
    }
    /**
     * (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: server
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: server
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * (Updatable) The number of passwords that will be kept in history that may not be used as a password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="numPasswordsInHistory", refs={Integer.class}, tree="[0]")
    private Output<Integer> numPasswordsInHistory;

    /**
     * @return (Updatable) The number of passwords that will be kept in history that may not be used as a password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> numPasswordsInHistory() {
        return this.numPasswordsInHistory;
    }
    /**
     * (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    @Export(name="ocid", refs={String.class}, tree="[0]")
    private Output<String> ocid;

    /**
     * @return (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    public Output<String> ocid() {
        return this.ocid;
    }
    /**
     * (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="passwordExpireWarning", refs={Integer.class}, tree="[0]")
    private Output<Integer> passwordExpireWarning;

    /**
     * @return (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> passwordExpireWarning() {
        return this.passwordExpireWarning;
    }
    /**
     * (Updatable) The number of days after which the password expires automatically
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Export(name="passwordExpiresAfter", refs={Integer.class}, tree="[0]")
    private Output<Integer> passwordExpiresAfter;

    /**
     * @return (Updatable) The number of days after which the password expires automatically
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> passwordExpiresAfter() {
        return this.passwordExpiresAfter;
    }
    /**
     * (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="passwordStrength", refs={String.class}, tree="[0]")
    private Output<String> passwordStrength;

    /**
     * @return (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> passwordStrength() {
        return this.passwordStrength;
    }
    /**
     * (Updatable) Password policy priority
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * idcsMinValue: 1
     * * uniqueness: server
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output<Integer> priority;

    /**
     * @return (Updatable) Password policy priority
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * idcsMinValue: 1
     * * uniqueness: server
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }
    /**
     * (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="requiredChars", refs={String.class}, tree="[0]")
    private Output<String> requiredChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> requiredChars() {
        return this.requiredChars;
    }
    /**
     * (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Export(name="resourceTypeSchemaVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceTypeSchemaVersion;

    /**
     * @return (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Output<Optional<String>> resourceTypeSchemaVersion() {
        return Codegen.optional(this.resourceTypeSchemaVersion);
    }
    /**
     * (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="schemas", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> schemas;

    /**
     * @return (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<List<String>> schemas() {
        return this.schemas;
    }
    /**
     * (Updatable) Indicates that the password must begin with an alphabetic character
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Export(name="startsWithAlphabet", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> startsWithAlphabet;

    /**
     * @return (Updatable) Indicates that the password must begin with an alphabetic character
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> startsWithAlphabet() {
        return this.startsWithAlphabet;
    }
    /**
     * (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Export(name="tags", refs={List.class,DomainsPasswordPolicyTag.class}, tree="[0,1]")
    private Output<List<DomainsPasswordPolicyTag>> tags;

    /**
     * @return (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Output<List<DomainsPasswordPolicyTag>> tags() {
        return this.tags;
    }
    /**
     * (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Export(name="tenancyOcid", refs={String.class}, tree="[0]")
    private Output<String> tenancyOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="userNameDisallowed", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> userNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Boolean> userNameDisallowed() {
        return this.userNameDisallowed;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DomainsPasswordPolicy(java.lang.String name) {
        this(name, DomainsPasswordPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DomainsPasswordPolicy(java.lang.String name, DomainsPasswordPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DomainsPasswordPolicy(java.lang.String name, DomainsPasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/domainsPasswordPolicy:DomainsPasswordPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DomainsPasswordPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable DomainsPasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/domainsPasswordPolicy:DomainsPasswordPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static DomainsPasswordPolicyArgs makeArgs(DomainsPasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DomainsPasswordPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "passwordStrength"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DomainsPasswordPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable DomainsPasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DomainsPasswordPolicy(name, id, state, options);
    }
}
