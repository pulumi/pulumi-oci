// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs Empty = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs();

    /**
     * (Updatable) The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="defaultEncryptionSaltType")
    private @Nullable Output<String> defaultEncryptionSaltType;

    /**
     * @return (Updatable) The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> defaultEncryptionSaltType() {
        return Optional.ofNullable(this.defaultEncryptionSaltType);
    }

    /**
     * (Updatable) The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsSensitive: none
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="masterKey")
    private @Nullable Output<String> masterKey;

    /**
     * @return (Updatable) The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsSensitive: none
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> masterKey() {
        return Optional.ofNullable(this.masterKey);
    }

    /**
     * (Updatable) Max Renewable Age in seconds
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxRenewableAge")
    private @Nullable Output<Integer> maxRenewableAge;

    /**
     * @return (Updatable) Max Renewable Age in seconds
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxRenewableAge() {
        return Optional.ofNullable(this.maxRenewableAge);
    }

    /**
     * (Updatable) Max Ticket Life in seconds
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxTicketLife")
    private @Nullable Output<Integer> maxTicketLife;

    /**
     * @return (Updatable) Max Ticket Life in seconds
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxTicketLife() {
        return Optional.ofNullable(this.maxTicketLife);
    }

    /**
     * (Updatable) The name of the Kerberos Realm that this App uses for authentication.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="realmName")
    private @Nullable Output<String> realmName;

    /**
     * @return (Updatable) The name of the Kerberos Realm that this App uses for authentication.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> realmName() {
        return Optional.ofNullable(this.realmName);
    }

    /**
     * (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="supportedEncryptionSaltTypes")
    private @Nullable Output<List<String>> supportedEncryptionSaltTypes;

    /**
     * @return (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> supportedEncryptionSaltTypes() {
        return Optional.ofNullable(this.supportedEncryptionSaltTypes);
    }

    /**
     * (Updatable) Ticket Flags
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="ticketFlags")
    private @Nullable Output<Integer> ticketFlags;

    /**
     * @return (Updatable) Ticket Flags
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> ticketFlags() {
        return Optional.ofNullable(this.ticketFlags);
    }

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs() {}

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs(DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs $) {
        this.defaultEncryptionSaltType = $.defaultEncryptionSaltType;
        this.masterKey = $.masterKey;
        this.maxRenewableAge = $.maxRenewableAge;
        this.maxTicketLife = $.maxTicketLife;
        this.realmName = $.realmName;
        this.supportedEncryptionSaltTypes = $.supportedEncryptionSaltTypes;
        this.ticketFlags = $.ticketFlags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs $;

        public Builder() {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs();
        }

        public Builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs defaults) {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultEncryptionSaltType (Updatable) The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionSaltType(@Nullable Output<String> defaultEncryptionSaltType) {
            $.defaultEncryptionSaltType = defaultEncryptionSaltType;
            return this;
        }

        /**
         * @param defaultEncryptionSaltType (Updatable) The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder defaultEncryptionSaltType(String defaultEncryptionSaltType) {
            return defaultEncryptionSaltType(Output.of(defaultEncryptionSaltType));
        }

        /**
         * @param masterKey (Updatable) The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * idcsSensitive: none
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder masterKey(@Nullable Output<String> masterKey) {
            $.masterKey = masterKey;
            return this;
        }

        /**
         * @param masterKey (Updatable) The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * idcsSensitive: none
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder masterKey(String masterKey) {
            return masterKey(Output.of(masterKey));
        }

        /**
         * @param maxRenewableAge (Updatable) Max Renewable Age in seconds
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxRenewableAge(@Nullable Output<Integer> maxRenewableAge) {
            $.maxRenewableAge = maxRenewableAge;
            return this;
        }

        /**
         * @param maxRenewableAge (Updatable) Max Renewable Age in seconds
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxRenewableAge(Integer maxRenewableAge) {
            return maxRenewableAge(Output.of(maxRenewableAge));
        }

        /**
         * @param maxTicketLife (Updatable) Max Ticket Life in seconds
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxTicketLife(@Nullable Output<Integer> maxTicketLife) {
            $.maxTicketLife = maxTicketLife;
            return this;
        }

        /**
         * @param maxTicketLife (Updatable) Max Ticket Life in seconds
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxTicketLife(Integer maxTicketLife) {
            return maxTicketLife(Output.of(maxTicketLife));
        }

        /**
         * @param realmName (Updatable) The name of the Kerberos Realm that this App uses for authentication.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder realmName(@Nullable Output<String> realmName) {
            $.realmName = realmName;
            return this;
        }

        /**
         * @param realmName (Updatable) The name of the Kerberos Realm that this App uses for authentication.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder realmName(String realmName) {
            return realmName(Output.of(realmName));
        }

        /**
         * @param supportedEncryptionSaltTypes (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder supportedEncryptionSaltTypes(@Nullable Output<List<String>> supportedEncryptionSaltTypes) {
            $.supportedEncryptionSaltTypes = supportedEncryptionSaltTypes;
            return this;
        }

        /**
         * @param supportedEncryptionSaltTypes (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder supportedEncryptionSaltTypes(List<String> supportedEncryptionSaltTypes) {
            return supportedEncryptionSaltTypes(Output.of(supportedEncryptionSaltTypes));
        }

        /**
         * @param supportedEncryptionSaltTypes (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder supportedEncryptionSaltTypes(String... supportedEncryptionSaltTypes) {
            return supportedEncryptionSaltTypes(List.of(supportedEncryptionSaltTypes));
        }

        /**
         * @param ticketFlags (Updatable) Ticket Flags
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ticketFlags(@Nullable Output<Integer> ticketFlags) {
            $.ticketFlags = ticketFlags;
            return this;
        }

        /**
         * @param ticketFlags (Updatable) Ticket Flags
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ticketFlags(Integer ticketFlags) {
            return ticketFlags(Output.of(ticketFlags));
        }

        public DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmAppArgs build() {
            return $;
        }
    }

}
