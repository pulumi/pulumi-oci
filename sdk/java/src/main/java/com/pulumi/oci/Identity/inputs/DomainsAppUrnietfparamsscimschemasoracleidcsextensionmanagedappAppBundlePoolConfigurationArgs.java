// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs Empty = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs();

    /**
     * (Updatable) Maximum number of connector instances in the pool that are idle and active.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxIdle")
    private @Nullable Output<Integer> maxIdle;

    /**
     * @return (Updatable) Maximum number of connector instances in the pool that are idle and active.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxIdle() {
        return Optional.ofNullable(this.maxIdle);
    }

    /**
     * (Updatable) Maximum number of connector instances in the pool that are idle and active.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxObjects")
    private @Nullable Output<Integer> maxObjects;

    /**
     * @return (Updatable) Maximum number of connector instances in the pool that are idle and active.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxObjects() {
        return Optional.ofNullable(this.maxObjects);
    }

    /**
     * (Updatable) Maximum time (in milliseconds) to wait for a free connector instance to become available before failing.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxWait")
    private @Nullable Output<Integer> maxWait;

    /**
     * @return (Updatable) Maximum time (in milliseconds) to wait for a free connector instance to become available before failing.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxWait() {
        return Optional.ofNullable(this.maxWait);
    }

    /**
     * (Updatable) Minimum time (in milliseconds) to wait before evicting an idle conenctor instance from the pool.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minEvictableIdleTimeMillis")
    private @Nullable Output<Integer> minEvictableIdleTimeMillis;

    /**
     * @return (Updatable) Minimum time (in milliseconds) to wait before evicting an idle conenctor instance from the pool.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minEvictableIdleTimeMillis() {
        return Optional.ofNullable(this.minEvictableIdleTimeMillis);
    }

    /**
     * (Updatable) Minimum number of idle connector instances in the pool.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minIdle")
    private @Nullable Output<Integer> minIdle;

    /**
     * @return (Updatable) Minimum number of idle connector instances in the pool.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minIdle() {
        return Optional.ofNullable(this.minIdle);
    }

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs() {}

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs(DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs $) {
        this.maxIdle = $.maxIdle;
        this.maxObjects = $.maxObjects;
        this.maxWait = $.maxWait;
        this.minEvictableIdleTimeMillis = $.minEvictableIdleTimeMillis;
        this.minIdle = $.minIdle;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs $;

        public Builder() {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs();
        }

        public Builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs defaults) {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxIdle (Updatable) Maximum number of connector instances in the pool that are idle and active.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxIdle(@Nullable Output<Integer> maxIdle) {
            $.maxIdle = maxIdle;
            return this;
        }

        /**
         * @param maxIdle (Updatable) Maximum number of connector instances in the pool that are idle and active.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxIdle(Integer maxIdle) {
            return maxIdle(Output.of(maxIdle));
        }

        /**
         * @param maxObjects (Updatable) Maximum number of connector instances in the pool that are idle and active.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxObjects(@Nullable Output<Integer> maxObjects) {
            $.maxObjects = maxObjects;
            return this;
        }

        /**
         * @param maxObjects (Updatable) Maximum number of connector instances in the pool that are idle and active.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxObjects(Integer maxObjects) {
            return maxObjects(Output.of(maxObjects));
        }

        /**
         * @param maxWait (Updatable) Maximum time (in milliseconds) to wait for a free connector instance to become available before failing.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxWait(@Nullable Output<Integer> maxWait) {
            $.maxWait = maxWait;
            return this;
        }

        /**
         * @param maxWait (Updatable) Maximum time (in milliseconds) to wait for a free connector instance to become available before failing.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxWait(Integer maxWait) {
            return maxWait(Output.of(maxWait));
        }

        /**
         * @param minEvictableIdleTimeMillis (Updatable) Minimum time (in milliseconds) to wait before evicting an idle conenctor instance from the pool.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minEvictableIdleTimeMillis(@Nullable Output<Integer> minEvictableIdleTimeMillis) {
            $.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
            return this;
        }

        /**
         * @param minEvictableIdleTimeMillis (Updatable) Minimum time (in milliseconds) to wait before evicting an idle conenctor instance from the pool.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minEvictableIdleTimeMillis(Integer minEvictableIdleTimeMillis) {
            return minEvictableIdleTimeMillis(Output.of(minEvictableIdleTimeMillis));
        }

        /**
         * @param minIdle (Updatable) Minimum number of idle connector instances in the pool.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minIdle(@Nullable Output<Integer> minIdle) {
            $.minIdle = minIdle;
            return this;
        }

        /**
         * @param minIdle (Updatable) Minimum number of idle connector instances in the pool.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minIdle(Integer minIdle) {
            return minIdle(Output.of(minIdle));
        }

        public DomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfigurationArgs build() {
            return $;
        }
    }

}
