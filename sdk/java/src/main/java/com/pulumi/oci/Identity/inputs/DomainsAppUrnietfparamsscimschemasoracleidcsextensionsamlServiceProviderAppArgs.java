// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs;
import com.pulumi.oci.Identity.inputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs;
import com.pulumi.oci.Identity.inputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs Empty = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs();

    /**
     * (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="assertionConsumerUrl")
    private @Nullable Output<String> assertionConsumerUrl;

    /**
     * @return (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> assertionConsumerUrl() {
        return Optional.ofNullable(this.assertionConsumerUrl);
    }

    /**
     * (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="encryptAssertion")
    private @Nullable Output<Boolean> encryptAssertion;

    /**
     * @return (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> encryptAssertion() {
        return Optional.ofNullable(this.encryptAssertion);
    }

    /**
     * (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="encryptionAlgorithm")
    private @Nullable Output<String> encryptionAlgorithm;

    /**
     * @return (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> encryptionAlgorithm() {
        return Optional.ofNullable(this.encryptionAlgorithm);
    }

    /**
     * (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="encryptionCertificate")
    private @Nullable Output<String> encryptionCertificate;

    /**
     * @return (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> encryptionCertificate() {
        return Optional.ofNullable(this.encryptionCertificate);
    }

    /**
     * (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsDefaultValue: SAML2.0
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="federationProtocol")
    private @Nullable Output<String> federationProtocol;

    /**
     * @return (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsDefaultValue: SAML2.0
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> federationProtocol() {
        return Optional.ofNullable(this.federationProtocol);
    }

    /**
     * (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="groupAssertionAttributes")
    private @Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs>> groupAssertionAttributes;

    /**
     * @return (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs>>> groupAssertionAttributes() {
        return Optional.ofNullable(this.groupAssertionAttributes);
    }

    /**
     * (Updatable) Hok Assertion Consumer Service Url
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="hokAcsUrl")
    private @Nullable Output<String> hokAcsUrl;

    /**
     * @return (Updatable) Hok Assertion Consumer Service Url
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> hokAcsUrl() {
        return Optional.ofNullable(this.hokAcsUrl);
    }

    /**
     * (Updatable) If enabled, then the SAML Service supports Hok for this App.
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="hokRequired")
    private @Nullable Output<Boolean> hokRequired;

    /**
     * @return (Updatable) If enabled, then the SAML Service supports Hok for this App.
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> hokRequired() {
        return Optional.ofNullable(this.hokRequired);
    }

    /**
     * (Updatable) If true, then the signing certificate is included in the signature.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="includeSigningCertInSignature")
    private @Nullable Output<Boolean> includeSigningCertInSignature;

    /**
     * @return (Updatable) If true, then the signing certificate is included in the signature.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> includeSigningCertInSignature() {
        return Optional.ofNullable(this.includeSigningCertInSignature);
    }

    /**
     * (Updatable) This attribute indicates the key encryption algorithm.
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="keyEncryptionAlgorithm")
    private @Nullable Output<String> keyEncryptionAlgorithm;

    /**
     * @return (Updatable) This attribute indicates the key encryption algorithm.
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> keyEncryptionAlgorithm() {
        return Optional.ofNullable(this.keyEncryptionAlgorithm);
    }

    /**
     * (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     * **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    @Import(name="lastNotificationSentTime")
    private @Nullable Output<String> lastNotificationSentTime;

    /**
     * @return (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     * **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> lastNotificationSentTime() {
        return Optional.ofNullable(this.lastNotificationSentTime);
    }

    /**
     * (Updatable) This attribute represents the HTTP binding that would be used while logout.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="logoutBinding")
    private @Nullable Output<String> logoutBinding;

    /**
     * @return (Updatable) This attribute represents the HTTP binding that would be used while logout.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> logoutBinding() {
        return Optional.ofNullable(this.logoutBinding);
    }

    /**
     * (Updatable) If true, then the SAML Service supports logout for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="logoutEnabled")
    private @Nullable Output<Boolean> logoutEnabled;

    /**
     * @return (Updatable) If true, then the SAML Service supports logout for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> logoutEnabled() {
        return Optional.ofNullable(this.logoutEnabled);
    }

    /**
     * (Updatable) The URL to which the partner sends the logout request.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="logoutRequestUrl")
    private @Nullable Output<String> logoutRequestUrl;

    /**
     * @return (Updatable) The URL to which the partner sends the logout request.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> logoutRequestUrl() {
        return Optional.ofNullable(this.logoutRequestUrl);
    }

    /**
     * (Updatable) The URL to which the partner sends the logout response.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="logoutResponseUrl")
    private @Nullable Output<String> logoutResponseUrl;

    /**
     * @return (Updatable) The URL to which the partner sends the logout response.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> logoutResponseUrl() {
        return Optional.ofNullable(this.logoutResponseUrl);
    }

    /**
     * (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="nameIdFormat")
    private @Nullable Output<String> nameIdFormat;

    /**
     * @return (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> nameIdFormat() {
        return Optional.ofNullable(this.nameIdFormat);
    }

    /**
     * (Updatable) **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
     * 
     */
    @Import(name="nameIdUserstoreAttribute")
    private @Nullable Output<String> nameIdUserstoreAttribute;

    /**
     * @return (Updatable) **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
     * 
     */
    public Optional<Output<String>> nameIdUserstoreAttribute() {
        return Optional.ofNullable(this.nameIdUserstoreAttribute);
    }

    /**
     * (Updatable) Use to construct the outgoing SAML attributes
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="outboundAssertionAttributes")
    private @Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs>> outboundAssertionAttributes;

    /**
     * @return (Updatable) Use to construct the outgoing SAML attributes
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs>>> outboundAssertionAttributes() {
        return Optional.ofNullable(this.outboundAssertionAttributes);
    }

    /**
     * (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="partnerProviderId")
    private @Nullable Output<String> partnerProviderId;

    /**
     * @return (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> partnerProviderId() {
        return Optional.ofNullable(this.partnerProviderId);
    }

    /**
     * (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **Added In:** 2202230830
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="partnerProviderPattern")
    private @Nullable Output<String> partnerProviderPattern;

    /**
     * @return (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **Added In:** 2202230830
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> partnerProviderPattern() {
        return Optional.ofNullable(this.partnerProviderPattern);
    }

    /**
     * (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="signResponseOrAssertion")
    private @Nullable Output<String> signResponseOrAssertion;

    /**
     * @return (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> signResponseOrAssertion() {
        return Optional.ofNullable(this.signResponseOrAssertion);
    }

    /**
     * (Updatable) This attribute represents the algorithm used to hash the signature.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="signatureHashAlgorithm")
    private @Nullable Output<String> signatureHashAlgorithm;

    /**
     * @return (Updatable) This attribute represents the algorithm used to hash the signature.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> signatureHashAlgorithm() {
        return Optional.ofNullable(this.signatureHashAlgorithm);
    }

    /**
     * (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="signingCertificate")
    private @Nullable Output<String> signingCertificate;

    /**
     * @return (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> signingCertificate() {
        return Optional.ofNullable(this.signingCertificate);
    }

    /**
     * (Updatable) This attribute represents the Succinct ID.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    @Import(name="succinctId")
    private @Nullable Output<String> succinctId;

    /**
     * @return (Updatable) This attribute represents the Succinct ID.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    public Optional<Output<String>> succinctId() {
        return Optional.ofNullable(this.succinctId);
    }

    /**
     * (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="tenantProviderId")
    private @Nullable Output<String> tenantProviderId;

    /**
     * @return (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> tenantProviderId() {
        return Optional.ofNullable(this.tenantProviderId);
    }

    /**
     * (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="userAssertionAttributes")
    private @Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs>> userAssertionAttributes;

    /**
     * @return (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs>>> userAssertionAttributes() {
        return Optional.ofNullable(this.userAssertionAttributes);
    }

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs() {}

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs $) {
        this.assertionConsumerUrl = $.assertionConsumerUrl;
        this.encryptAssertion = $.encryptAssertion;
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.encryptionCertificate = $.encryptionCertificate;
        this.federationProtocol = $.federationProtocol;
        this.groupAssertionAttributes = $.groupAssertionAttributes;
        this.hokAcsUrl = $.hokAcsUrl;
        this.hokRequired = $.hokRequired;
        this.includeSigningCertInSignature = $.includeSigningCertInSignature;
        this.keyEncryptionAlgorithm = $.keyEncryptionAlgorithm;
        this.lastNotificationSentTime = $.lastNotificationSentTime;
        this.logoutBinding = $.logoutBinding;
        this.logoutEnabled = $.logoutEnabled;
        this.logoutRequestUrl = $.logoutRequestUrl;
        this.logoutResponseUrl = $.logoutResponseUrl;
        this.metadata = $.metadata;
        this.nameIdFormat = $.nameIdFormat;
        this.nameIdUserstoreAttribute = $.nameIdUserstoreAttribute;
        this.outboundAssertionAttributes = $.outboundAssertionAttributes;
        this.partnerProviderId = $.partnerProviderId;
        this.partnerProviderPattern = $.partnerProviderPattern;
        this.signResponseOrAssertion = $.signResponseOrAssertion;
        this.signatureHashAlgorithm = $.signatureHashAlgorithm;
        this.signingCertificate = $.signingCertificate;
        this.succinctId = $.succinctId;
        this.tenantProviderId = $.tenantProviderId;
        this.userAssertionAttributes = $.userAssertionAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs $;

        public Builder() {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs();
        }

        public Builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs defaults) {
            $ = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assertionConsumerUrl (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder assertionConsumerUrl(@Nullable Output<String> assertionConsumerUrl) {
            $.assertionConsumerUrl = assertionConsumerUrl;
            return this;
        }

        /**
         * @param assertionConsumerUrl (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder assertionConsumerUrl(String assertionConsumerUrl) {
            return assertionConsumerUrl(Output.of(assertionConsumerUrl));
        }

        /**
         * @param encryptAssertion (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptAssertion(@Nullable Output<Boolean> encryptAssertion) {
            $.encryptAssertion = encryptAssertion;
            return this;
        }

        /**
         * @param encryptAssertion (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptAssertion(Boolean encryptAssertion) {
            return encryptAssertion(Output.of(encryptAssertion));
        }

        /**
         * @param encryptionAlgorithm (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(@Nullable Output<String> encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        /**
         * @param encryptionAlgorithm (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            return encryptionAlgorithm(Output.of(encryptionAlgorithm));
        }

        /**
         * @param encryptionCertificate (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptionCertificate(@Nullable Output<String> encryptionCertificate) {
            $.encryptionCertificate = encryptionCertificate;
            return this;
        }

        /**
         * @param encryptionCertificate (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder encryptionCertificate(String encryptionCertificate) {
            return encryptionCertificate(Output.of(encryptionCertificate));
        }

        /**
         * @param federationProtocol (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
         * 
         * **Added In:** 18.2.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsDefaultValue: SAML2.0
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder federationProtocol(@Nullable Output<String> federationProtocol) {
            $.federationProtocol = federationProtocol;
            return this;
        }

        /**
         * @param federationProtocol (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
         * 
         * **Added In:** 18.2.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsDefaultValue: SAML2.0
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder federationProtocol(String federationProtocol) {
            return federationProtocol(Output.of(federationProtocol));
        }

        /**
         * @param groupAssertionAttributes (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groupAssertionAttributes(@Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs>> groupAssertionAttributes) {
            $.groupAssertionAttributes = groupAssertionAttributes;
            return this;
        }

        /**
         * @param groupAssertionAttributes (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groupAssertionAttributes(List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs> groupAssertionAttributes) {
            return groupAssertionAttributes(Output.of(groupAssertionAttributes));
        }

        /**
         * @param groupAssertionAttributes (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groupAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeArgs... groupAssertionAttributes) {
            return groupAssertionAttributes(List.of(groupAssertionAttributes));
        }

        /**
         * @param hokAcsUrl (Updatable) Hok Assertion Consumer Service Url
         * 
         * **Added In:** 2101262133
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hokAcsUrl(@Nullable Output<String> hokAcsUrl) {
            $.hokAcsUrl = hokAcsUrl;
            return this;
        }

        /**
         * @param hokAcsUrl (Updatable) Hok Assertion Consumer Service Url
         * 
         * **Added In:** 2101262133
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hokAcsUrl(String hokAcsUrl) {
            return hokAcsUrl(Output.of(hokAcsUrl));
        }

        /**
         * @param hokRequired (Updatable) If enabled, then the SAML Service supports Hok for this App.
         * 
         * **Added In:** 2101262133
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hokRequired(@Nullable Output<Boolean> hokRequired) {
            $.hokRequired = hokRequired;
            return this;
        }

        /**
         * @param hokRequired (Updatable) If enabled, then the SAML Service supports Hok for this App.
         * 
         * **Added In:** 2101262133
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hokRequired(Boolean hokRequired) {
            return hokRequired(Output.of(hokRequired));
        }

        /**
         * @param includeSigningCertInSignature (Updatable) If true, then the signing certificate is included in the signature.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder includeSigningCertInSignature(@Nullable Output<Boolean> includeSigningCertInSignature) {
            $.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }

        /**
         * @param includeSigningCertInSignature (Updatable) If true, then the signing certificate is included in the signature.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder includeSigningCertInSignature(Boolean includeSigningCertInSignature) {
            return includeSigningCertInSignature(Output.of(includeSigningCertInSignature));
        }

        /**
         * @param keyEncryptionAlgorithm (Updatable) This attribute indicates the key encryption algorithm.
         * 
         * **Added In:** 18.4.2
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionAlgorithm(@Nullable Output<String> keyEncryptionAlgorithm) {
            $.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            return this;
        }

        /**
         * @param keyEncryptionAlgorithm (Updatable) This attribute indicates the key encryption algorithm.
         * 
         * **Added In:** 18.4.2
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionAlgorithm(String keyEncryptionAlgorithm) {
            return keyEncryptionAlgorithm(Output.of(keyEncryptionAlgorithm));
        }

        /**
         * @param lastNotificationSentTime (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
         * 
         * **Added In:** 2302092332
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lastNotificationSentTime(@Nullable Output<String> lastNotificationSentTime) {
            $.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }

        /**
         * @param lastNotificationSentTime (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
         * 
         * **Added In:** 2302092332
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lastNotificationSentTime(String lastNotificationSentTime) {
            return lastNotificationSentTime(Output.of(lastNotificationSentTime));
        }

        /**
         * @param logoutBinding (Updatable) This attribute represents the HTTP binding that would be used while logout.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutBinding(@Nullable Output<String> logoutBinding) {
            $.logoutBinding = logoutBinding;
            return this;
        }

        /**
         * @param logoutBinding (Updatable) This attribute represents the HTTP binding that would be used while logout.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutBinding(String logoutBinding) {
            return logoutBinding(Output.of(logoutBinding));
        }

        /**
         * @param logoutEnabled (Updatable) If true, then the SAML Service supports logout for this App.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutEnabled(@Nullable Output<Boolean> logoutEnabled) {
            $.logoutEnabled = logoutEnabled;
            return this;
        }

        /**
         * @param logoutEnabled (Updatable) If true, then the SAML Service supports logout for this App.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutEnabled(Boolean logoutEnabled) {
            return logoutEnabled(Output.of(logoutEnabled));
        }

        /**
         * @param logoutRequestUrl (Updatable) The URL to which the partner sends the logout request.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutRequestUrl(@Nullable Output<String> logoutRequestUrl) {
            $.logoutRequestUrl = logoutRequestUrl;
            return this;
        }

        /**
         * @param logoutRequestUrl (Updatable) The URL to which the partner sends the logout request.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutRequestUrl(String logoutRequestUrl) {
            return logoutRequestUrl(Output.of(logoutRequestUrl));
        }

        /**
         * @param logoutResponseUrl (Updatable) The URL to which the partner sends the logout response.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutResponseUrl(@Nullable Output<String> logoutResponseUrl) {
            $.logoutResponseUrl = logoutResponseUrl;
            return this;
        }

        /**
         * @param logoutResponseUrl (Updatable) The URL to which the partner sends the logout response.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder logoutResponseUrl(String logoutResponseUrl) {
            return logoutResponseUrl(Output.of(logoutResponseUrl));
        }

        /**
         * @param metadata (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param nameIdFormat (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder nameIdFormat(@Nullable Output<String> nameIdFormat) {
            $.nameIdFormat = nameIdFormat;
            return this;
        }

        /**
         * @param nameIdFormat (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder nameIdFormat(String nameIdFormat) {
            return nameIdFormat(Output.of(nameIdFormat));
        }

        /**
         * @param nameIdUserstoreAttribute (Updatable) **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
         * 
         * @return builder
         * 
         */
        public Builder nameIdUserstoreAttribute(@Nullable Output<String> nameIdUserstoreAttribute) {
            $.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            return this;
        }

        /**
         * @param nameIdUserstoreAttribute (Updatable) **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
         * 
         * @return builder
         * 
         */
        public Builder nameIdUserstoreAttribute(String nameIdUserstoreAttribute) {
            return nameIdUserstoreAttribute(Output.of(nameIdUserstoreAttribute));
        }

        /**
         * @param outboundAssertionAttributes (Updatable) Use to construct the outgoing SAML attributes
         * 
         * **Added In:** 18.2.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder outboundAssertionAttributes(@Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs>> outboundAssertionAttributes) {
            $.outboundAssertionAttributes = outboundAssertionAttributes;
            return this;
        }

        /**
         * @param outboundAssertionAttributes (Updatable) Use to construct the outgoing SAML attributes
         * 
         * **Added In:** 18.2.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder outboundAssertionAttributes(List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs> outboundAssertionAttributes) {
            return outboundAssertionAttributes(Output.of(outboundAssertionAttributes));
        }

        /**
         * @param outboundAssertionAttributes (Updatable) Use to construct the outgoing SAML attributes
         * 
         * **Added In:** 18.2.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder outboundAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeArgs... outboundAssertionAttributes) {
            return outboundAssertionAttributes(List.of(outboundAssertionAttributes));
        }

        /**
         * @param partnerProviderId (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder partnerProviderId(@Nullable Output<String> partnerProviderId) {
            $.partnerProviderId = partnerProviderId;
            return this;
        }

        /**
         * @param partnerProviderId (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder partnerProviderId(String partnerProviderId) {
            return partnerProviderId(Output.of(partnerProviderId));
        }

        /**
         * @param partnerProviderPattern (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
         * 
         * **Added In:** 2202230830
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder partnerProviderPattern(@Nullable Output<String> partnerProviderPattern) {
            $.partnerProviderPattern = partnerProviderPattern;
            return this;
        }

        /**
         * @param partnerProviderPattern (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
         * 
         * **Added In:** 2202230830
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder partnerProviderPattern(String partnerProviderPattern) {
            return partnerProviderPattern(Output.of(partnerProviderPattern));
        }

        /**
         * @param signResponseOrAssertion (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signResponseOrAssertion(@Nullable Output<String> signResponseOrAssertion) {
            $.signResponseOrAssertion = signResponseOrAssertion;
            return this;
        }

        /**
         * @param signResponseOrAssertion (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signResponseOrAssertion(String signResponseOrAssertion) {
            return signResponseOrAssertion(Output.of(signResponseOrAssertion));
        }

        /**
         * @param signatureHashAlgorithm (Updatable) This attribute represents the algorithm used to hash the signature.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signatureHashAlgorithm(@Nullable Output<String> signatureHashAlgorithm) {
            $.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }

        /**
         * @param signatureHashAlgorithm (Updatable) This attribute represents the algorithm used to hash the signature.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signatureHashAlgorithm(String signatureHashAlgorithm) {
            return signatureHashAlgorithm(Output.of(signatureHashAlgorithm));
        }

        /**
         * @param signingCertificate (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signingCertificate(@Nullable Output<String> signingCertificate) {
            $.signingCertificate = signingCertificate;
            return this;
        }

        /**
         * @param signingCertificate (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder signingCertificate(String signingCertificate) {
            return signingCertificate(Output.of(signingCertificate));
        }

        /**
         * @param succinctId (Updatable) This attribute represents the Succinct ID.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder succinctId(@Nullable Output<String> succinctId) {
            $.succinctId = succinctId;
            return this;
        }

        /**
         * @param succinctId (Updatable) This attribute represents the Succinct ID.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder succinctId(String succinctId) {
            return succinctId(Output.of(succinctId));
        }

        /**
         * @param tenantProviderId (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tenantProviderId(@Nullable Output<String> tenantProviderId) {
            $.tenantProviderId = tenantProviderId;
            return this;
        }

        /**
         * @param tenantProviderId (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tenantProviderId(String tenantProviderId) {
            return tenantProviderId(Output.of(tenantProviderId));
        }

        /**
         * @param userAssertionAttributes (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder userAssertionAttributes(@Nullable Output<List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs>> userAssertionAttributes) {
            $.userAssertionAttributes = userAssertionAttributes;
            return this;
        }

        /**
         * @param userAssertionAttributes (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder userAssertionAttributes(List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs> userAssertionAttributes) {
            return userAssertionAttributes(Output.of(userAssertionAttributes));
        }

        /**
         * @param userAssertionAttributes (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
         * 
         * **Deprecated Since: 18.2.2**
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [name]
         * * idcsSearchable: false
         * * idcsValuePersistedInOtherAttribute: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder userAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeArgs... userAssertionAttributes) {
            return userAssertionAttributes(List.of(userAssertionAttributes));
        }

        public DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppArgs build() {
            return $;
        }
    }

}
