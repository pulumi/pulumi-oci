// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class DomainsAuthenticationFactorSettingClientAppSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAuthenticationFactorSettingClientAppSettingsArgs Empty = new DomainsAuthenticationFactorSettingClientAppSettingsArgs();

    /**
     * (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
     * 
     * **SCIM++ Properties:**
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;deviceProtectionPolicy&#34; and attrValues.value eq &#34;$(deviceProtectionPolicy)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="deviceProtectionPolicy", required=true)
    private Output<String> deviceProtectionPolicy;

    /**
     * @return (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
     * 
     * **SCIM++ Properties:**
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;deviceProtectionPolicy&#34; and attrValues.value eq &#34;$(deviceProtectionPolicy)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> deviceProtectionPolicy() {
        return this.deviceProtectionPolicy;
    }

    /**
     * (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 86400
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="initialLockoutPeriodInSecs", required=true)
    private Output<Integer> initialLockoutPeriodInSecs;

    /**
     * @return (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 86400
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> initialLockoutPeriodInSecs() {
        return this.initialLockoutPeriodInSecs;
    }

    /**
     * (Updatable) The size of the key that the system uses to generate the public-private key pair
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 4000
     * * idcsMinValue: 32
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="keyPairLength", required=true)
    private Output<Integer> keyPairLength;

    /**
     * @return (Updatable) The size of the key that the system uses to generate the public-private key pair
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 4000
     * * idcsMinValue: 32
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> keyPairLength() {
        return this.keyPairLength;
    }

    /**
     * (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
     * 
     * **SCIM++ Properties:**
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;lockoutEscalationPattern&#34; and attrValues.value eq &#34;$(lockoutEscalationPattern)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="lockoutEscalationPattern", required=true)
    private Output<String> lockoutEscalationPattern;

    /**
     * @return (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
     * 
     * **SCIM++ Properties:**
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;lockoutEscalationPattern&#34; and attrValues.value eq &#34;$(lockoutEscalationPattern)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> lockoutEscalationPattern() {
        return this.lockoutEscalationPattern;
    }

    /**
     * (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 5
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxFailuresBeforeLockout", required=true)
    private Output<Integer> maxFailuresBeforeLockout;

    /**
     * @return (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 5
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxFailuresBeforeLockout() {
        return this.maxFailuresBeforeLockout;
    }

    /**
     * (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 0
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxFailuresBeforeWarning", required=true)
    private Output<Integer> maxFailuresBeforeWarning;

    /**
     * @return (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 0
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxFailuresBeforeWarning() {
        return this.maxFailuresBeforeWarning;
    }

    /**
     * (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 86400
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxLockoutIntervalInSecs", required=true)
    private Output<Integer> maxLockoutIntervalInSecs;

    /**
     * @return (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 86400
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> maxLockoutIntervalInSecs() {
        return this.maxLockoutIntervalInSecs;
    }

    /**
     * (Updatable) Minimum length of the Personal Identification Number (PIN)
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 6
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minPinLength", required=true)
    private Output<Integer> minPinLength;

    /**
     * @return (Updatable) Minimum length of the Personal Identification Number (PIN)
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 6
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> minPinLength() {
        return this.minPinLength;
    }

    /**
     * (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 999
     * * idcsMinValue: 1
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="policyUpdateFreqInDays", required=true)
    private Output<Integer> policyUpdateFreqInDays;

    /**
     * @return (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 999
     * * idcsMinValue: 1
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> policyUpdateFreqInDays() {
        return this.policyUpdateFreqInDays;
    }

    /**
     * (Updatable) Indicates which algorithm the system will use to sign requests
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="requestSigningAlgo", required=true)
    private Output<String> requestSigningAlgo;

    /**
     * @return (Updatable) Indicates which algorithm the system will use to sign requests
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> requestSigningAlgo() {
        return this.requestSigningAlgo;
    }

    /**
     * (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="sharedSecretEncoding", required=true)
    private Output<String> sharedSecretEncoding;

    /**
     * @return (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> sharedSecretEncoding() {
        return this.sharedSecretEncoding;
    }

    /**
     * (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="unlockAppForEachRequestEnabled", required=true)
    private Output<Boolean> unlockAppForEachRequestEnabled;

    /**
     * @return (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> unlockAppForEachRequestEnabled() {
        return this.unlockAppForEachRequestEnabled;
    }

    /**
     * (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 9999999
     * * idcsMinValue: 0
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="unlockAppIntervalInSecs", required=true)
    private Output<Integer> unlockAppIntervalInSecs;

    /**
     * @return (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 9999999
     * * idcsMinValue: 0
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> unlockAppIntervalInSecs() {
        return this.unlockAppIntervalInSecs;
    }

    /**
     * (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="unlockOnAppForegroundEnabled", required=true)
    private Output<Boolean> unlockOnAppForegroundEnabled;

    /**
     * @return (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> unlockOnAppForegroundEnabled() {
        return this.unlockOnAppForegroundEnabled;
    }

    /**
     * (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="unlockOnAppStartEnabled", required=true)
    private Output<Boolean> unlockOnAppStartEnabled;

    /**
     * @return (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> unlockOnAppStartEnabled() {
        return this.unlockOnAppStartEnabled;
    }

    private DomainsAuthenticationFactorSettingClientAppSettingsArgs() {}

    private DomainsAuthenticationFactorSettingClientAppSettingsArgs(DomainsAuthenticationFactorSettingClientAppSettingsArgs $) {
        this.deviceProtectionPolicy = $.deviceProtectionPolicy;
        this.initialLockoutPeriodInSecs = $.initialLockoutPeriodInSecs;
        this.keyPairLength = $.keyPairLength;
        this.lockoutEscalationPattern = $.lockoutEscalationPattern;
        this.maxFailuresBeforeLockout = $.maxFailuresBeforeLockout;
        this.maxFailuresBeforeWarning = $.maxFailuresBeforeWarning;
        this.maxLockoutIntervalInSecs = $.maxLockoutIntervalInSecs;
        this.minPinLength = $.minPinLength;
        this.policyUpdateFreqInDays = $.policyUpdateFreqInDays;
        this.requestSigningAlgo = $.requestSigningAlgo;
        this.sharedSecretEncoding = $.sharedSecretEncoding;
        this.unlockAppForEachRequestEnabled = $.unlockAppForEachRequestEnabled;
        this.unlockAppIntervalInSecs = $.unlockAppIntervalInSecs;
        this.unlockOnAppForegroundEnabled = $.unlockOnAppForegroundEnabled;
        this.unlockOnAppStartEnabled = $.unlockOnAppStartEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAuthenticationFactorSettingClientAppSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAuthenticationFactorSettingClientAppSettingsArgs $;

        public Builder() {
            $ = new DomainsAuthenticationFactorSettingClientAppSettingsArgs();
        }

        public Builder(DomainsAuthenticationFactorSettingClientAppSettingsArgs defaults) {
            $ = new DomainsAuthenticationFactorSettingClientAppSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceProtectionPolicy (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
         * 
         * **SCIM++ Properties:**
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;deviceProtectionPolicy&#34; and attrValues.value eq &#34;$(deviceProtectionPolicy)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder deviceProtectionPolicy(Output<String> deviceProtectionPolicy) {
            $.deviceProtectionPolicy = deviceProtectionPolicy;
            return this;
        }

        /**
         * @param deviceProtectionPolicy (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
         * 
         * **SCIM++ Properties:**
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;deviceProtectionPolicy&#34; and attrValues.value eq &#34;$(deviceProtectionPolicy)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder deviceProtectionPolicy(String deviceProtectionPolicy) {
            return deviceProtectionPolicy(Output.of(deviceProtectionPolicy));
        }

        /**
         * @param initialLockoutPeriodInSecs (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 86400
         * * idcsMinValue: 30
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder initialLockoutPeriodInSecs(Output<Integer> initialLockoutPeriodInSecs) {
            $.initialLockoutPeriodInSecs = initialLockoutPeriodInSecs;
            return this;
        }

        /**
         * @param initialLockoutPeriodInSecs (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 86400
         * * idcsMinValue: 30
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder initialLockoutPeriodInSecs(Integer initialLockoutPeriodInSecs) {
            return initialLockoutPeriodInSecs(Output.of(initialLockoutPeriodInSecs));
        }

        /**
         * @param keyPairLength (Updatable) The size of the key that the system uses to generate the public-private key pair
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 4000
         * * idcsMinValue: 32
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyPairLength(Output<Integer> keyPairLength) {
            $.keyPairLength = keyPairLength;
            return this;
        }

        /**
         * @param keyPairLength (Updatable) The size of the key that the system uses to generate the public-private key pair
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 4000
         * * idcsMinValue: 32
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder keyPairLength(Integer keyPairLength) {
            return keyPairLength(Output.of(keyPairLength));
        }

        /**
         * @param lockoutEscalationPattern (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
         * 
         * **SCIM++ Properties:**
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;lockoutEscalationPattern&#34; and attrValues.value eq &#34;$(lockoutEscalationPattern)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockoutEscalationPattern(Output<String> lockoutEscalationPattern) {
            $.lockoutEscalationPattern = lockoutEscalationPattern;
            return this;
        }

        /**
         * @param lockoutEscalationPattern (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
         * 
         * **SCIM++ Properties:**
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;lockoutEscalationPattern&#34; and attrValues.value eq &#34;$(lockoutEscalationPattern)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockoutEscalationPattern(String lockoutEscalationPattern) {
            return lockoutEscalationPattern(Output.of(lockoutEscalationPattern));
        }

        /**
         * @param maxFailuresBeforeLockout (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 5
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxFailuresBeforeLockout(Output<Integer> maxFailuresBeforeLockout) {
            $.maxFailuresBeforeLockout = maxFailuresBeforeLockout;
            return this;
        }

        /**
         * @param maxFailuresBeforeLockout (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 5
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxFailuresBeforeLockout(Integer maxFailuresBeforeLockout) {
            return maxFailuresBeforeLockout(Output.of(maxFailuresBeforeLockout));
        }

        /**
         * @param maxFailuresBeforeWarning (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 0
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxFailuresBeforeWarning(Output<Integer> maxFailuresBeforeWarning) {
            $.maxFailuresBeforeWarning = maxFailuresBeforeWarning;
            return this;
        }

        /**
         * @param maxFailuresBeforeWarning (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 0
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxFailuresBeforeWarning(Integer maxFailuresBeforeWarning) {
            return maxFailuresBeforeWarning(Output.of(maxFailuresBeforeWarning));
        }

        /**
         * @param maxLockoutIntervalInSecs (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 86400
         * * idcsMinValue: 30
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxLockoutIntervalInSecs(Output<Integer> maxLockoutIntervalInSecs) {
            $.maxLockoutIntervalInSecs = maxLockoutIntervalInSecs;
            return this;
        }

        /**
         * @param maxLockoutIntervalInSecs (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 86400
         * * idcsMinValue: 30
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxLockoutIntervalInSecs(Integer maxLockoutIntervalInSecs) {
            return maxLockoutIntervalInSecs(Output.of(maxLockoutIntervalInSecs));
        }

        /**
         * @param minPinLength (Updatable) Minimum length of the Personal Identification Number (PIN)
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 6
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minPinLength(Output<Integer> minPinLength) {
            $.minPinLength = minPinLength;
            return this;
        }

        /**
         * @param minPinLength (Updatable) Minimum length of the Personal Identification Number (PIN)
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 10
         * * idcsMinValue: 6
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minPinLength(Integer minPinLength) {
            return minPinLength(Output.of(minPinLength));
        }

        /**
         * @param policyUpdateFreqInDays (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 999
         * * idcsMinValue: 1
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder policyUpdateFreqInDays(Output<Integer> policyUpdateFreqInDays) {
            $.policyUpdateFreqInDays = policyUpdateFreqInDays;
            return this;
        }

        /**
         * @param policyUpdateFreqInDays (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 999
         * * idcsMinValue: 1
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder policyUpdateFreqInDays(Integer policyUpdateFreqInDays) {
            return policyUpdateFreqInDays(Output.of(policyUpdateFreqInDays));
        }

        /**
         * @param requestSigningAlgo (Updatable) Indicates which algorithm the system will use to sign requests
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder requestSigningAlgo(Output<String> requestSigningAlgo) {
            $.requestSigningAlgo = requestSigningAlgo;
            return this;
        }

        /**
         * @param requestSigningAlgo (Updatable) Indicates which algorithm the system will use to sign requests
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder requestSigningAlgo(String requestSigningAlgo) {
            return requestSigningAlgo(Output.of(requestSigningAlgo));
        }

        /**
         * @param sharedSecretEncoding (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder sharedSecretEncoding(Output<String> sharedSecretEncoding) {
            $.sharedSecretEncoding = sharedSecretEncoding;
            return this;
        }

        /**
         * @param sharedSecretEncoding (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder sharedSecretEncoding(String sharedSecretEncoding) {
            return sharedSecretEncoding(Output.of(sharedSecretEncoding));
        }

        /**
         * @param unlockAppForEachRequestEnabled (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockAppForEachRequestEnabled(Output<Boolean> unlockAppForEachRequestEnabled) {
            $.unlockAppForEachRequestEnabled = unlockAppForEachRequestEnabled;
            return this;
        }

        /**
         * @param unlockAppForEachRequestEnabled (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockAppForEachRequestEnabled(Boolean unlockAppForEachRequestEnabled) {
            return unlockAppForEachRequestEnabled(Output.of(unlockAppForEachRequestEnabled));
        }

        /**
         * @param unlockAppIntervalInSecs (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 9999999
         * * idcsMinValue: 0
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockAppIntervalInSecs(Output<Integer> unlockAppIntervalInSecs) {
            $.unlockAppIntervalInSecs = unlockAppIntervalInSecs;
            return this;
        }

        /**
         * @param unlockAppIntervalInSecs (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
         * 
         * **SCIM++ Properties:**
         * * idcsMaxValue: 9999999
         * * idcsMinValue: 0
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockAppIntervalInSecs(Integer unlockAppIntervalInSecs) {
            return unlockAppIntervalInSecs(Output.of(unlockAppIntervalInSecs));
        }

        /**
         * @param unlockOnAppForegroundEnabled (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockOnAppForegroundEnabled(Output<Boolean> unlockOnAppForegroundEnabled) {
            $.unlockOnAppForegroundEnabled = unlockOnAppForegroundEnabled;
            return this;
        }

        /**
         * @param unlockOnAppForegroundEnabled (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockOnAppForegroundEnabled(Boolean unlockOnAppForegroundEnabled) {
            return unlockOnAppForegroundEnabled(Output.of(unlockOnAppForegroundEnabled));
        }

        /**
         * @param unlockOnAppStartEnabled (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockOnAppStartEnabled(Output<Boolean> unlockOnAppStartEnabled) {
            $.unlockOnAppStartEnabled = unlockOnAppStartEnabled;
            return this;
        }

        /**
         * @param unlockOnAppStartEnabled (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder unlockOnAppStartEnabled(Boolean unlockOnAppStartEnabled) {
            return unlockOnAppStartEnabled(Output.of(unlockOnAppStartEnabled));
        }

        public DomainsAuthenticationFactorSettingClientAppSettingsArgs build() {
            if ($.deviceProtectionPolicy == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "deviceProtectionPolicy");
            }
            if ($.initialLockoutPeriodInSecs == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "initialLockoutPeriodInSecs");
            }
            if ($.keyPairLength == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "keyPairLength");
            }
            if ($.lockoutEscalationPattern == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "lockoutEscalationPattern");
            }
            if ($.maxFailuresBeforeLockout == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "maxFailuresBeforeLockout");
            }
            if ($.maxFailuresBeforeWarning == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "maxFailuresBeforeWarning");
            }
            if ($.maxLockoutIntervalInSecs == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "maxLockoutIntervalInSecs");
            }
            if ($.minPinLength == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "minPinLength");
            }
            if ($.policyUpdateFreqInDays == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "policyUpdateFreqInDays");
            }
            if ($.requestSigningAlgo == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "requestSigningAlgo");
            }
            if ($.sharedSecretEncoding == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "sharedSecretEncoding");
            }
            if ($.unlockAppForEachRequestEnabled == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "unlockAppForEachRequestEnabled");
            }
            if ($.unlockAppIntervalInSecs == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "unlockAppIntervalInSecs");
            }
            if ($.unlockOnAppForegroundEnabled == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "unlockOnAppForegroundEnabled");
            }
            if ($.unlockOnAppStartEnabled == null) {
                throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingClientAppSettingsArgs", "unlockOnAppStartEnabled");
            }
            return $;
        }
    }

}
