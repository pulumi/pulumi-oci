// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs Empty = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs();

    /**
     * (Updatable) Attribute used to define the type of attestation required.
     * 
     */
    @Import(name="attestation", required=true)
    private Output<String> attestation;

    /**
     * @return (Updatable) Attribute used to define the type of attestation required.
     * 
     */
    public Output<String> attestation() {
        return this.attestation;
    }

    /**
     * (Updatable) Attribute used to define authenticator selection attachment.
     * 
     */
    @Import(name="authenticatorSelectionAttachment", required=true)
    private Output<String> authenticatorSelectionAttachment;

    /**
     * @return (Updatable) Attribute used to define authenticator selection attachment.
     * 
     */
    public Output<String> authenticatorSelectionAttachment() {
        return this.authenticatorSelectionAttachment;
    }

    /**
     * (Updatable) Flag used to indicate authenticator selection is required or not
     * 
     */
    @Import(name="authenticatorSelectionRequireResidentKey", required=true)
    private Output<Boolean> authenticatorSelectionRequireResidentKey;

    /**
     * @return (Updatable) Flag used to indicate authenticator selection is required or not
     * 
     */
    public Output<Boolean> authenticatorSelectionRequireResidentKey() {
        return this.authenticatorSelectionRequireResidentKey;
    }

    /**
     * (Updatable) Attribute used to define authenticator selection resident key requirement.
     * 
     */
    @Import(name="authenticatorSelectionResidentKey", required=true)
    private Output<String> authenticatorSelectionResidentKey;

    /**
     * @return (Updatable) Attribute used to define authenticator selection resident key requirement.
     * 
     */
    public Output<String> authenticatorSelectionResidentKey() {
        return this.authenticatorSelectionResidentKey;
    }

    /**
     * (Updatable) Attribute used to define authenticator selection verification.
     * 
     */
    @Import(name="authenticatorSelectionUserVerification", required=true)
    private Output<String> authenticatorSelectionUserVerification;

    /**
     * @return (Updatable) Attribute used to define authenticator selection verification.
     * 
     */
    public Output<String> authenticatorSelectionUserVerification() {
        return this.authenticatorSelectionUserVerification;
    }

    /**
     * (Updatable) Number of domain levels IDCS should use for origin comparision
     * 
     */
    @Import(name="domainValidationLevel")
    private @Nullable Output<Integer> domainValidationLevel;

    /**
     * @return (Updatable) Number of domain levels IDCS should use for origin comparision
     * 
     */
    public Optional<Output<Integer>> domainValidationLevel() {
        return Optional.ofNullable(this.domainValidationLevel);
    }

    /**
     * (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     */
    @Import(name="excludeCredentials", required=true)
    private Output<Boolean> excludeCredentials;

    /**
     * @return (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     */
    public Output<Boolean> excludeCredentials() {
        return this.excludeCredentials;
    }

    /**
     * (Updatable) List of server supported public key algorithms
     * 
     */
    @Import(name="publicKeyTypes", required=true)
    private Output<List<String>> publicKeyTypes;

    /**
     * @return (Updatable) List of server supported public key algorithms
     * 
     */
    public Output<List<String>> publicKeyTypes() {
        return this.publicKeyTypes;
    }

    /**
     * (Updatable) Timeout for the fido authentication to complete
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return (Updatable) Timeout for the fido authentication to complete
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs() {}

    private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs $) {
        this.attestation = $.attestation;
        this.authenticatorSelectionAttachment = $.authenticatorSelectionAttachment;
        this.authenticatorSelectionRequireResidentKey = $.authenticatorSelectionRequireResidentKey;
        this.authenticatorSelectionResidentKey = $.authenticatorSelectionResidentKey;
        this.authenticatorSelectionUserVerification = $.authenticatorSelectionUserVerification;
        this.domainValidationLevel = $.domainValidationLevel;
        this.excludeCredentials = $.excludeCredentials;
        this.publicKeyTypes = $.publicKeyTypes;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs $;

        public Builder() {
            $ = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs();
        }

        public Builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs defaults) {
            $ = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attestation (Updatable) Attribute used to define the type of attestation required.
         * 
         * @return builder
         * 
         */
        public Builder attestation(Output<String> attestation) {
            $.attestation = attestation;
            return this;
        }

        /**
         * @param attestation (Updatable) Attribute used to define the type of attestation required.
         * 
         * @return builder
         * 
         */
        public Builder attestation(String attestation) {
            return attestation(Output.of(attestation));
        }

        /**
         * @param authenticatorSelectionAttachment (Updatable) Attribute used to define authenticator selection attachment.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionAttachment(Output<String> authenticatorSelectionAttachment) {
            $.authenticatorSelectionAttachment = authenticatorSelectionAttachment;
            return this;
        }

        /**
         * @param authenticatorSelectionAttachment (Updatable) Attribute used to define authenticator selection attachment.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionAttachment(String authenticatorSelectionAttachment) {
            return authenticatorSelectionAttachment(Output.of(authenticatorSelectionAttachment));
        }

        /**
         * @param authenticatorSelectionRequireResidentKey (Updatable) Flag used to indicate authenticator selection is required or not
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionRequireResidentKey(Output<Boolean> authenticatorSelectionRequireResidentKey) {
            $.authenticatorSelectionRequireResidentKey = authenticatorSelectionRequireResidentKey;
            return this;
        }

        /**
         * @param authenticatorSelectionRequireResidentKey (Updatable) Flag used to indicate authenticator selection is required or not
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionRequireResidentKey(Boolean authenticatorSelectionRequireResidentKey) {
            return authenticatorSelectionRequireResidentKey(Output.of(authenticatorSelectionRequireResidentKey));
        }

        /**
         * @param authenticatorSelectionResidentKey (Updatable) Attribute used to define authenticator selection resident key requirement.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionResidentKey(Output<String> authenticatorSelectionResidentKey) {
            $.authenticatorSelectionResidentKey = authenticatorSelectionResidentKey;
            return this;
        }

        /**
         * @param authenticatorSelectionResidentKey (Updatable) Attribute used to define authenticator selection resident key requirement.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionResidentKey(String authenticatorSelectionResidentKey) {
            return authenticatorSelectionResidentKey(Output.of(authenticatorSelectionResidentKey));
        }

        /**
         * @param authenticatorSelectionUserVerification (Updatable) Attribute used to define authenticator selection verification.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionUserVerification(Output<String> authenticatorSelectionUserVerification) {
            $.authenticatorSelectionUserVerification = authenticatorSelectionUserVerification;
            return this;
        }

        /**
         * @param authenticatorSelectionUserVerification (Updatable) Attribute used to define authenticator selection verification.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorSelectionUserVerification(String authenticatorSelectionUserVerification) {
            return authenticatorSelectionUserVerification(Output.of(authenticatorSelectionUserVerification));
        }

        /**
         * @param domainValidationLevel (Updatable) Number of domain levels IDCS should use for origin comparision
         * 
         * @return builder
         * 
         */
        public Builder domainValidationLevel(@Nullable Output<Integer> domainValidationLevel) {
            $.domainValidationLevel = domainValidationLevel;
            return this;
        }

        /**
         * @param domainValidationLevel (Updatable) Number of domain levels IDCS should use for origin comparision
         * 
         * @return builder
         * 
         */
        public Builder domainValidationLevel(Integer domainValidationLevel) {
            return domainValidationLevel(Output.of(domainValidationLevel));
        }

        /**
         * @param excludeCredentials (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
         * 
         * @return builder
         * 
         */
        public Builder excludeCredentials(Output<Boolean> excludeCredentials) {
            $.excludeCredentials = excludeCredentials;
            return this;
        }

        /**
         * @param excludeCredentials (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
         * 
         * @return builder
         * 
         */
        public Builder excludeCredentials(Boolean excludeCredentials) {
            return excludeCredentials(Output.of(excludeCredentials));
        }

        /**
         * @param publicKeyTypes (Updatable) List of server supported public key algorithms
         * 
         * @return builder
         * 
         */
        public Builder publicKeyTypes(Output<List<String>> publicKeyTypes) {
            $.publicKeyTypes = publicKeyTypes;
            return this;
        }

        /**
         * @param publicKeyTypes (Updatable) List of server supported public key algorithms
         * 
         * @return builder
         * 
         */
        public Builder publicKeyTypes(List<String> publicKeyTypes) {
            return publicKeyTypes(Output.of(publicKeyTypes));
        }

        /**
         * @param publicKeyTypes (Updatable) List of server supported public key algorithms
         * 
         * @return builder
         * 
         */
        public Builder publicKeyTypes(String... publicKeyTypes) {
            return publicKeyTypes(List.of(publicKeyTypes));
        }

        /**
         * @param timeout (Updatable) Timeout for the fido authentication to complete
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout (Updatable) Timeout for the fido authentication to complete
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettingsArgs build() {
            $.attestation = Objects.requireNonNull($.attestation, "expected parameter 'attestation' to be non-null");
            $.authenticatorSelectionAttachment = Objects.requireNonNull($.authenticatorSelectionAttachment, "expected parameter 'authenticatorSelectionAttachment' to be non-null");
            $.authenticatorSelectionRequireResidentKey = Objects.requireNonNull($.authenticatorSelectionRequireResidentKey, "expected parameter 'authenticatorSelectionRequireResidentKey' to be non-null");
            $.authenticatorSelectionResidentKey = Objects.requireNonNull($.authenticatorSelectionResidentKey, "expected parameter 'authenticatorSelectionResidentKey' to be non-null");
            $.authenticatorSelectionUserVerification = Objects.requireNonNull($.authenticatorSelectionUserVerification, "expected parameter 'authenticatorSelectionUserVerification' to be non-null");
            $.excludeCredentials = Objects.requireNonNull($.excludeCredentials, "expected parameter 'excludeCredentials' to be non-null");
            $.publicKeyTypes = Objects.requireNonNull($.publicKeyTypes, "expected parameter 'publicKeyTypes' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            return $;
        }
    }

}
