// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs Empty = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs();

    /**
     * (Updatable) Hostname to access the Duo security account
     * 
     */
    @Import(name="apiHostname", required=true)
    private Output<String> apiHostname;

    /**
     * @return (Updatable) Hostname to access the Duo security account
     * 
     */
    public Output<String> apiHostname() {
        return this.apiHostname;
    }

    /**
     * (Updatable) Attestation key to attest the request and response between Duo Security
     * 
     */
    @Import(name="attestationKey")
    private @Nullable Output<String> attestationKey;

    /**
     * @return (Updatable) Attestation key to attest the request and response between Duo Security
     * 
     */
    public Optional<Output<String>> attestationKey() {
        return Optional.ofNullable(this.attestationKey);
    }

    /**
     * (Updatable) Integration key from Duo Security authenticator
     * 
     */
    @Import(name="integrationKey", required=true)
    private Output<String> integrationKey;

    /**
     * @return (Updatable) Integration key from Duo Security authenticator
     * 
     */
    public Output<String> integrationKey() {
        return this.integrationKey;
    }

    /**
     * (Updatable) Secret key from Duo Security authenticator
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return (Updatable) Secret key from Duo Security authenticator
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * (Updatable) User attribute mapping value
     * 
     */
    @Import(name="userMappingAttribute", required=true)
    private Output<String> userMappingAttribute;

    /**
     * @return (Updatable) User attribute mapping value
     * 
     */
    public Output<String> userMappingAttribute() {
        return this.userMappingAttribute;
    }

    private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs() {}

    private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs $) {
        this.apiHostname = $.apiHostname;
        this.attestationKey = $.attestationKey;
        this.integrationKey = $.integrationKey;
        this.secretKey = $.secretKey;
        this.userMappingAttribute = $.userMappingAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs $;

        public Builder() {
            $ = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs();
        }

        public Builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs defaults) {
            $ = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiHostname (Updatable) Hostname to access the Duo security account
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(Output<String> apiHostname) {
            $.apiHostname = apiHostname;
            return this;
        }

        /**
         * @param apiHostname (Updatable) Hostname to access the Duo security account
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(String apiHostname) {
            return apiHostname(Output.of(apiHostname));
        }

        /**
         * @param attestationKey (Updatable) Attestation key to attest the request and response between Duo Security
         * 
         * @return builder
         * 
         */
        public Builder attestationKey(@Nullable Output<String> attestationKey) {
            $.attestationKey = attestationKey;
            return this;
        }

        /**
         * @param attestationKey (Updatable) Attestation key to attest the request and response between Duo Security
         * 
         * @return builder
         * 
         */
        public Builder attestationKey(String attestationKey) {
            return attestationKey(Output.of(attestationKey));
        }

        /**
         * @param integrationKey (Updatable) Integration key from Duo Security authenticator
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey (Updatable) Integration key from Duo Security authenticator
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param secretKey (Updatable) Secret key from Duo Security authenticator
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey (Updatable) Secret key from Duo Security authenticator
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param userMappingAttribute (Updatable) User attribute mapping value
         * 
         * @return builder
         * 
         */
        public Builder userMappingAttribute(Output<String> userMappingAttribute) {
            $.userMappingAttribute = userMappingAttribute;
            return this;
        }

        /**
         * @param userMappingAttribute (Updatable) User attribute mapping value
         * 
         * @return builder
         * 
         */
        public Builder userMappingAttribute(String userMappingAttribute) {
            return userMappingAttribute(Output.of(userMappingAttribute));
        }

        public DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettingsArgs build() {
            $.apiHostname = Objects.requireNonNull($.apiHostname, "expected parameter 'apiHostname' to be non-null");
            $.integrationKey = Objects.requireNonNull($.integrationKey, "expected parameter 'integrationKey' to be non-null");
            $.secretKey = Objects.requireNonNull($.secretKey, "expected parameter 'secretKey' to be non-null");
            $.userMappingAttribute = Objects.requireNonNull($.userMappingAttribute, "expected parameter 'userMappingAttribute' to be non-null");
            return $;
        }
    }

}
