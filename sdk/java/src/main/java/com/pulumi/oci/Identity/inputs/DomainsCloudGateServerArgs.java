// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsCloudGateServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsCloudGateServerArgs Empty = new DomainsCloudGateServerArgs();

    /**
     * (Updatable) Any incoming request to cloud gate is finally sent to this host, if selected during load balancing
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return (Updatable) Any incoming request to cloud gate is finally sent to this host, if selected during load balancing
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * (Updatable) Any additional settings for this upstream server in nginx configuration form
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="nginxSettings")
    private @Nullable Output<String> nginxSettings;

    /**
     * @return (Updatable) Any additional settings for this upstream server in nginx configuration form
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> nginxSettings() {
        return Optional.ofNullable(this.nginxSettings);
    }

    /**
     * (Updatable) Port for the Upstream Server
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return (Updatable) Port for the Upstream Server
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * (Updatable) Server Name for the Server Block
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return (Updatable) Server Name for the Server Block
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * (Updatable) SSL flag for the Upstream Block
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="ssl", required=true)
    private Output<Boolean> ssl;

    /**
     * @return (Updatable) SSL flag for the Upstream Block
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Output<Boolean> ssl() {
        return this.ssl;
    }

    private DomainsCloudGateServerArgs() {}

    private DomainsCloudGateServerArgs(DomainsCloudGateServerArgs $) {
        this.hostName = $.hostName;
        this.nginxSettings = $.nginxSettings;
        this.port = $.port;
        this.serverId = $.serverId;
        this.ssl = $.ssl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsCloudGateServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsCloudGateServerArgs $;

        public Builder() {
            $ = new DomainsCloudGateServerArgs();
        }

        public Builder(DomainsCloudGateServerArgs defaults) {
            $ = new DomainsCloudGateServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostName (Updatable) Any incoming request to cloud gate is finally sent to this host, if selected during load balancing
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName (Updatable) Any incoming request to cloud gate is finally sent to this host, if selected during load balancing
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param nginxSettings (Updatable) Any additional settings for this upstream server in nginx configuration form
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder nginxSettings(@Nullable Output<String> nginxSettings) {
            $.nginxSettings = nginxSettings;
            return this;
        }

        /**
         * @param nginxSettings (Updatable) Any additional settings for this upstream server in nginx configuration form
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder nginxSettings(String nginxSettings) {
            return nginxSettings(Output.of(nginxSettings));
        }

        /**
         * @param port (Updatable) Port for the Upstream Server
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Port for the Upstream Server
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param serverId (Updatable) Server Name for the Server Block
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId (Updatable) Server Name for the Server Block
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param ssl (Updatable) SSL flag for the Upstream Block
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ssl(Output<Boolean> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl (Updatable) SSL flag for the Upstream Block
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ssl(Boolean ssl) {
            return ssl(Output.of(ssl));
        }

        public DomainsCloudGateServerArgs build() {
            if ($.hostName == null) {
                throw new MissingRequiredPropertyException("DomainsCloudGateServerArgs", "hostName");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("DomainsCloudGateServerArgs", "port");
            }
            if ($.ssl == null) {
                throw new MissingRequiredPropertyException("DomainsCloudGateServerArgs", "ssl");
            }
            return $;
        }
    }

}
