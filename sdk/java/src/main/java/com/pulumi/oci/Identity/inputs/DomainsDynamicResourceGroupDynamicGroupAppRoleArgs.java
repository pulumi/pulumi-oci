// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsDynamicResourceGroupDynamicGroupAppRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsDynamicResourceGroupDynamicGroupAppRoleArgs Empty = new DomainsDynamicResourceGroupDynamicGroupAppRoleArgs();

    /**
     * (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="adminRole")
    private @Nullable Output<Boolean> adminRole;

    /**
     * @return (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> adminRole() {
        return Optional.ofNullable(this.adminRole);
    }

    /**
     * (Updatable) ID of parent App. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return (Updatable) ID of parent App. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * (Updatable) Name of parent App. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="appName")
    private @Nullable Output<String> appName;

    /**
     * @return (Updatable) Name of parent App. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> appName() {
        return Optional.ofNullable(this.appName);
    }

    /**
     * (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="display")
    private @Nullable Output<String> display;

    /**
     * @return (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> display() {
        return Optional.ofNullable(this.display);
    }

    /**
     * (Updatable) The name of the legacy group associated with this AppRole.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="legacyGroupName")
    private @Nullable Output<String> legacyGroupName;

    /**
     * @return (Updatable) The name of the legacy group associated with this AppRole.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> legacyGroupName() {
        return Optional.ofNullable(this.legacyGroupName);
    }

    /**
     * (Updatable) The URI of the corresponding appRole resource to which the user belongs
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: reference
     * * uniqueness: none
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return (Updatable) The URI of the corresponding appRole resource to which the user belongs
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: reference
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * (Updatable) The identifier of the appRole
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return (Updatable) The identifier of the appRole
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private DomainsDynamicResourceGroupDynamicGroupAppRoleArgs() {}

    private DomainsDynamicResourceGroupDynamicGroupAppRoleArgs(DomainsDynamicResourceGroupDynamicGroupAppRoleArgs $) {
        this.adminRole = $.adminRole;
        this.appId = $.appId;
        this.appName = $.appName;
        this.display = $.display;
        this.legacyGroupName = $.legacyGroupName;
        this.ref = $.ref;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsDynamicResourceGroupDynamicGroupAppRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsDynamicResourceGroupDynamicGroupAppRoleArgs $;

        public Builder() {
            $ = new DomainsDynamicResourceGroupDynamicGroupAppRoleArgs();
        }

        public Builder(DomainsDynamicResourceGroupDynamicGroupAppRoleArgs defaults) {
            $ = new DomainsDynamicResourceGroupDynamicGroupAppRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminRole (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder adminRole(@Nullable Output<Boolean> adminRole) {
            $.adminRole = adminRole;
            return this;
        }

        /**
         * @param adminRole (Updatable) If true, then the role provides administrative access privileges. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder adminRole(Boolean adminRole) {
            return adminRole(Output.of(adminRole));
        }

        /**
         * @param appId (Updatable) ID of parent App. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId (Updatable) ID of parent App. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appName (Updatable) Name of parent App. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder appName(@Nullable Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName (Updatable) Name of parent App. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param display (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder display(@Nullable Output<String> display) {
            $.display = display;
            return this;
        }

        /**
         * @param display (Updatable) A human readable name, primarily used for display purposes. READ-ONLY.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder display(String display) {
            return display(Output.of(display));
        }

        /**
         * @param legacyGroupName (Updatable) The name of the legacy group associated with this AppRole.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder legacyGroupName(@Nullable Output<String> legacyGroupName) {
            $.legacyGroupName = legacyGroupName;
            return this;
        }

        /**
         * @param legacyGroupName (Updatable) The name of the legacy group associated with this AppRole.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder legacyGroupName(String legacyGroupName) {
            return legacyGroupName(Output.of(legacyGroupName));
        }

        /**
         * @param ref (Updatable) The URI of the corresponding appRole resource to which the user belongs
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: reference
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref (Updatable) The URI of the corresponding appRole resource to which the user belongs
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: reference
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param value (Updatable) The identifier of the appRole
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value (Updatable) The identifier of the appRole
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DomainsDynamicResourceGroupDynamicGroupAppRoleArgs build() {
            if ($.value == null) {
                throw new MissingRequiredPropertyException("DomainsDynamicResourceGroupDynamicGroupAppRoleArgs", "value");
            }
            return $;
        }
    }

}
