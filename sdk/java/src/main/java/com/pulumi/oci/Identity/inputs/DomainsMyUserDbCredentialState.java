// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsMyUserDbCredentialIdcsCreatedByArgs;
import com.pulumi.oci.Identity.inputs.DomainsMyUserDbCredentialIdcsLastModifiedByArgs;
import com.pulumi.oci.Identity.inputs.DomainsMyUserDbCredentialMetaArgs;
import com.pulumi.oci.Identity.inputs.DomainsMyUserDbCredentialTagArgs;
import com.pulumi.oci.Identity.inputs.DomainsMyUserDbCredentialUserArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsMyUserDbCredentialState extends com.pulumi.resources.ResourceArgs {

    public static final DomainsMyUserDbCredentialState Empty = new DomainsMyUserDbCredentialState();

    /**
     * The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    @Import(name="compartmentOcid")
    private @Nullable Output<String> compartmentOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public Optional<Output<String>> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }

    /**
     * The db password of the user
     * 
     */
    @Import(name="dbPassword")
    private @Nullable Output<String> dbPassword;

    /**
     * @return The db password of the user
     * 
     */
    public Optional<Output<String>> dbPassword() {
        return Optional.ofNullable(this.dbPassword);
    }

    /**
     * (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    @Import(name="deleteInProgress")
    private @Nullable Output<Boolean> deleteInProgress;

    /**
     * @return (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Optional<Output<Boolean>> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    @Import(name="domainOcid")
    private @Nullable Output<String> domainOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public Optional<Output<String>> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }

    /**
     * (Updatable) Indicates that the db password has expired
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return (Updatable) Indicates that the db password has expired
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * User credential expires on
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    /**
     * @return User credential expires on
     * 
     */
    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * (Updatable) The User or App who created the Resource
     * 
     */
    @Import(name="idcsCreatedBies")
    private @Nullable Output<List<DomainsMyUserDbCredentialIdcsCreatedByArgs>> idcsCreatedBies;

    /**
     * @return (Updatable) The User or App who created the Resource
     * 
     */
    public Optional<Output<List<DomainsMyUserDbCredentialIdcsCreatedByArgs>>> idcsCreatedBies() {
        return Optional.ofNullable(this.idcsCreatedBies);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint")
    private @Nullable Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Optional<Output<String>> idcsEndpoint() {
        return Optional.ofNullable(this.idcsEndpoint);
    }

    /**
     * (Updatable) The User or App who modified the Resource
     * 
     */
    @Import(name="idcsLastModifiedBies")
    private @Nullable Output<List<DomainsMyUserDbCredentialIdcsLastModifiedByArgs>> idcsLastModifiedBies;

    /**
     * @return (Updatable) The User or App who modified the Resource
     * 
     */
    public Optional<Output<List<DomainsMyUserDbCredentialIdcsLastModifiedByArgs>>> idcsLastModifiedBies() {
        return Optional.ofNullable(this.idcsLastModifiedBies);
    }

    /**
     * (Updatable) The release number when the resource was upgraded.
     * 
     */
    @Import(name="idcsLastUpgradedInRelease")
    private @Nullable Output<String> idcsLastUpgradedInRelease;

    /**
     * @return (Updatable) The release number when the resource was upgraded.
     * 
     */
    public Optional<Output<String>> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }

    /**
     * (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    @Import(name="idcsPreventedOperations")
    private @Nullable Output<List<String>> idcsPreventedOperations;

    /**
     * @return (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public Optional<Output<List<String>>> idcsPreventedOperations() {
        return Optional.ofNullable(this.idcsPreventedOperations);
    }

    /**
     * (Updatable) A DateTime that specifies the date and time when the current db password was set
     * 
     */
    @Import(name="lastSetDate")
    private @Nullable Output<String> lastSetDate;

    /**
     * @return (Updatable) A DateTime that specifies the date and time when the current db password was set
     * 
     */
    public Optional<Output<String>> lastSetDate() {
        return Optional.ofNullable(this.lastSetDate);
    }

    /**
     * (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    @Import(name="metas")
    private @Nullable Output<List<DomainsMyUserDbCredentialMetaArgs>> metas;

    /**
     * @return (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public Optional<Output<List<DomainsMyUserDbCredentialMetaArgs>>> metas() {
        return Optional.ofNullable(this.metas);
    }

    /**
     * (Updatable) The db password of the user with mixed salt
     * 
     */
    @Import(name="mixedDbPassword")
    private @Nullable Output<String> mixedDbPassword;

    /**
     * @return (Updatable) The db password of the user with mixed salt
     * 
     */
    public Optional<Output<String>> mixedDbPassword() {
        return Optional.ofNullable(this.mixedDbPassword);
    }

    /**
     * (Updatable) The mixed salt of the password
     * 
     */
    @Import(name="mixedSalt")
    private @Nullable Output<String> mixedSalt;

    /**
     * @return (Updatable) The mixed salt of the password
     * 
     */
    public Optional<Output<String>> mixedSalt() {
        return Optional.ofNullable(this.mixedSalt);
    }

    /**
     * (Updatable) User name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) User name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * User&#39;s ocid
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return User&#39;s ocid
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * (Updatable) The salt of the password
     * 
     */
    @Import(name="salt")
    private @Nullable Output<String> salt;

    /**
     * @return (Updatable) The salt of the password
     * 
     */
    public Optional<Output<String>> salt() {
        return Optional.ofNullable(this.salt);
    }

    /**
     * REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    @Import(name="schemas")
    private @Nullable Output<List<String>> schemas;

    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public Optional<Output<List<String>>> schemas() {
        return Optional.ofNullable(this.schemas);
    }

    /**
     * User credential status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return User credential status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A list of tags on this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsMyUserDbCredentialTagArgs>> tags;

    /**
     * @return A list of tags on this resource.
     * 
     */
    public Optional<Output<List<DomainsMyUserDbCredentialTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    @Import(name="tenancyOcid")
    private @Nullable Output<String> tenancyOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public Optional<Output<String>> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }

    /**
     * User linked to db credential
     * 
     */
    @Import(name="user")
    private @Nullable Output<DomainsMyUserDbCredentialUserArgs> user;

    /**
     * @return User linked to db credential
     * 
     */
    public Optional<Output<DomainsMyUserDbCredentialUserArgs>> user() {
        return Optional.ofNullable(this.user);
    }

    private DomainsMyUserDbCredentialState() {}

    private DomainsMyUserDbCredentialState(DomainsMyUserDbCredentialState $) {
        this.authorization = $.authorization;
        this.compartmentOcid = $.compartmentOcid;
        this.dbPassword = $.dbPassword;
        this.deleteInProgress = $.deleteInProgress;
        this.description = $.description;
        this.domainOcid = $.domainOcid;
        this.expired = $.expired;
        this.expiresOn = $.expiresOn;
        this.idcsCreatedBies = $.idcsCreatedBies;
        this.idcsEndpoint = $.idcsEndpoint;
        this.idcsLastModifiedBies = $.idcsLastModifiedBies;
        this.idcsLastUpgradedInRelease = $.idcsLastUpgradedInRelease;
        this.idcsPreventedOperations = $.idcsPreventedOperations;
        this.lastSetDate = $.lastSetDate;
        this.metas = $.metas;
        this.mixedDbPassword = $.mixedDbPassword;
        this.mixedSalt = $.mixedSalt;
        this.name = $.name;
        this.ocid = $.ocid;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.salt = $.salt;
        this.schemas = $.schemas;
        this.status = $.status;
        this.tags = $.tags;
        this.tenancyOcid = $.tenancyOcid;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsMyUserDbCredentialState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsMyUserDbCredentialState $;

        public Builder() {
            $ = new DomainsMyUserDbCredentialState();
        }

        public Builder(DomainsMyUserDbCredentialState defaults) {
            $ = new DomainsMyUserDbCredentialState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param compartmentOcid (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(@Nullable Output<String> compartmentOcid) {
            $.compartmentOcid = compartmentOcid;
            return this;
        }

        /**
         * @param compartmentOcid (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(String compartmentOcid) {
            return compartmentOcid(Output.of(compartmentOcid));
        }

        /**
         * @param dbPassword The db password of the user
         * 
         * @return builder
         * 
         */
        public Builder dbPassword(@Nullable Output<String> dbPassword) {
            $.dbPassword = dbPassword;
            return this;
        }

        /**
         * @param dbPassword The db password of the user
         * 
         * @return builder
         * 
         */
        public Builder dbPassword(String dbPassword) {
            return dbPassword(Output.of(dbPassword));
        }

        /**
         * @param deleteInProgress (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
         * 
         * @return builder
         * 
         */
        public Builder deleteInProgress(@Nullable Output<Boolean> deleteInProgress) {
            $.deleteInProgress = deleteInProgress;
            return this;
        }

        /**
         * @param deleteInProgress (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
         * 
         * @return builder
         * 
         */
        public Builder deleteInProgress(Boolean deleteInProgress) {
            return deleteInProgress(Output.of(deleteInProgress));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainOcid (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder domainOcid(@Nullable Output<String> domainOcid) {
            $.domainOcid = domainOcid;
            return this;
        }

        /**
         * @param domainOcid (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder domainOcid(String domainOcid) {
            return domainOcid(Output.of(domainOcid));
        }

        /**
         * @param expired (Updatable) Indicates that the db password has expired
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired (Updatable) Indicates that the db password has expired
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param expiresOn User credential expires on
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        /**
         * @param expiresOn User credential expires on
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(@Nullable Output<List<DomainsMyUserDbCredentialIdcsCreatedByArgs>> idcsCreatedBies) {
            $.idcsCreatedBies = idcsCreatedBies;
            return this;
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(List<DomainsMyUserDbCredentialIdcsCreatedByArgs> idcsCreatedBies) {
            return idcsCreatedBies(Output.of(idcsCreatedBies));
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(DomainsMyUserDbCredentialIdcsCreatedByArgs... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(@Nullable Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(@Nullable Output<List<DomainsMyUserDbCredentialIdcsLastModifiedByArgs>> idcsLastModifiedBies) {
            $.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(List<DomainsMyUserDbCredentialIdcsLastModifiedByArgs> idcsLastModifiedBies) {
            return idcsLastModifiedBies(Output.of(idcsLastModifiedBies));
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(DomainsMyUserDbCredentialIdcsLastModifiedByArgs... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }

        /**
         * @param idcsLastUpgradedInRelease (Updatable) The release number when the resource was upgraded.
         * 
         * @return builder
         * 
         */
        public Builder idcsLastUpgradedInRelease(@Nullable Output<String> idcsLastUpgradedInRelease) {
            $.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }

        /**
         * @param idcsLastUpgradedInRelease (Updatable) The release number when the resource was upgraded.
         * 
         * @return builder
         * 
         */
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            return idcsLastUpgradedInRelease(Output.of(idcsLastUpgradedInRelease));
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(@Nullable Output<List<String>> idcsPreventedOperations) {
            $.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            return idcsPreventedOperations(Output.of(idcsPreventedOperations));
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }

        /**
         * @param lastSetDate (Updatable) A DateTime that specifies the date and time when the current db password was set
         * 
         * @return builder
         * 
         */
        public Builder lastSetDate(@Nullable Output<String> lastSetDate) {
            $.lastSetDate = lastSetDate;
            return this;
        }

        /**
         * @param lastSetDate (Updatable) A DateTime that specifies the date and time when the current db password was set
         * 
         * @return builder
         * 
         */
        public Builder lastSetDate(String lastSetDate) {
            return lastSetDate(Output.of(lastSetDate));
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * @return builder
         * 
         */
        public Builder metas(@Nullable Output<List<DomainsMyUserDbCredentialMetaArgs>> metas) {
            $.metas = metas;
            return this;
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * @return builder
         * 
         */
        public Builder metas(List<DomainsMyUserDbCredentialMetaArgs> metas) {
            return metas(Output.of(metas));
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * @return builder
         * 
         */
        public Builder metas(DomainsMyUserDbCredentialMetaArgs... metas) {
            return metas(List.of(metas));
        }

        /**
         * @param mixedDbPassword (Updatable) The db password of the user with mixed salt
         * 
         * @return builder
         * 
         */
        public Builder mixedDbPassword(@Nullable Output<String> mixedDbPassword) {
            $.mixedDbPassword = mixedDbPassword;
            return this;
        }

        /**
         * @param mixedDbPassword (Updatable) The db password of the user with mixed salt
         * 
         * @return builder
         * 
         */
        public Builder mixedDbPassword(String mixedDbPassword) {
            return mixedDbPassword(Output.of(mixedDbPassword));
        }

        /**
         * @param mixedSalt (Updatable) The mixed salt of the password
         * 
         * @return builder
         * 
         */
        public Builder mixedSalt(@Nullable Output<String> mixedSalt) {
            $.mixedSalt = mixedSalt;
            return this;
        }

        /**
         * @param mixedSalt (Updatable) The mixed salt of the password
         * 
         * @return builder
         * 
         */
        public Builder mixedSalt(String mixedSalt) {
            return mixedSalt(Output.of(mixedSalt));
        }

        /**
         * @param name (Updatable) User name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) User name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ocid User&#39;s ocid
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid User&#39;s ocid
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param resourceTypeSchemaVersion An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param salt (Updatable) The salt of the password
         * 
         * @return builder
         * 
         */
        public Builder salt(@Nullable Output<String> salt) {
            $.salt = salt;
            return this;
        }

        /**
         * @param salt (Updatable) The salt of the password
         * 
         * @return builder
         * 
         */
        public Builder salt(String salt) {
            return salt(Output.of(salt));
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(@Nullable Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param status User credential status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status User credential status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsMyUserDbCredentialTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsMyUserDbCredentialTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags on this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsMyUserDbCredentialTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenancyOcid (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(@Nullable Output<String> tenancyOcid) {
            $.tenancyOcid = tenancyOcid;
            return this;
        }

        /**
         * @param tenancyOcid (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(String tenancyOcid) {
            return tenancyOcid(Output.of(tenancyOcid));
        }

        /**
         * @param user User linked to db credential
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<DomainsMyUserDbCredentialUserArgs> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user User linked to db credential
         * 
         * @return builder
         * 
         */
        public Builder user(DomainsMyUserDbCredentialUserArgs user) {
            return user(Output.of(user));
        }

        public DomainsMyUserDbCredentialState build() {
            return $;
        }
    }

}
