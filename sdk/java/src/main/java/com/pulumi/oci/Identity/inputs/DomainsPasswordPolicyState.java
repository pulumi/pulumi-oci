// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyGroupArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyIdcsCreatedByArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyIdcsLastModifiedByArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyMetaArgs;
import com.pulumi.oci.Identity.inputs.DomainsPasswordPolicyTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsPasswordPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final DomainsPasswordPolicyState Empty = new DomainsPasswordPolicyState();

    /**
     * (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="allowedChars")
    private @Nullable Output<String> allowedChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> allowedChars() {
        return Optional.ofNullable(this.allowedChars);
    }

    /**
     * (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    @Import(name="attributeSets")
    private @Nullable Output<List<String>> attributeSets;

    /**
     * @return (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> attributeSets() {
        return Optional.ofNullable(this.attributeSets);
    }

    /**
     * (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<String> attributes;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Optional<Output<String>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<String> authorization;

    /**
     * @return (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<Output<String>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="compartmentOcid")
    private @Nullable Output<String> compartmentOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }

    /**
     * (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [key]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="configuredPasswordPolicyRules")
    private @Nullable Output<List<DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs>> configuredPasswordPolicyRules;

    /**
     * @return (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [key]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs>>> configuredPasswordPolicyRules() {
        return Optional.ofNullable(this.configuredPasswordPolicyRules);
    }

    /**
     * (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="deleteInProgress")
    private @Nullable Output<Boolean> deleteInProgress;

    /**
     * @return (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }

    /**
     * (Updatable) A String that describes the password policy
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A String that describes the password policy
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A delimiter used to separate characters in the dictionary file
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="dictionaryDelimiter")
    private @Nullable Output<String> dictionaryDelimiter;

    /**
     * @return (Updatable) A delimiter used to separate characters in the dictionary file
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> dictionaryDelimiter() {
        return Optional.ofNullable(this.dictionaryDelimiter);
    }

    /**
     * (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="dictionaryLocation")
    private @Nullable Output<String> dictionaryLocation;

    /**
     * @return (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> dictionaryLocation() {
        return Optional.ofNullable(this.dictionaryLocation);
    }

    /**
     * (Updatable) Indicates whether the password can match a dictionary word
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="dictionaryWordDisallowed")
    private @Nullable Output<Boolean> dictionaryWordDisallowed;

    /**
     * @return (Updatable) Indicates whether the password can match a dictionary word
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> dictionaryWordDisallowed() {
        return Optional.ofNullable(this.dictionaryWordDisallowed);
    }

    /**
     * (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="disallowedChars")
    private @Nullable Output<String> disallowedChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> disallowedChars() {
        return Optional.ofNullable(this.disallowedChars);
    }

    /**
     * (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="disallowedSubstrings")
    private @Nullable Output<List<String>> disallowedSubstrings;

    /**
     * @return (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> disallowedSubstrings() {
        return Optional.ofNullable(this.disallowedSubstrings);
    }

    /**
     * (Updatable) List of User attributes whose values are not allowed in the password.
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="disallowedUserAttributeValues")
    private @Nullable Output<List<String>> disallowedUserAttributeValues;

    /**
     * @return (Updatable) List of User attributes whose values are not allowed in the password.
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> disallowedUserAttributeValues() {
        return Optional.ofNullable(this.disallowedUserAttributeValues);
    }

    /**
     * (Updatable) The number of distinct characters between old password and new password
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="distinctCharacters")
    private @Nullable Output<Integer> distinctCharacters;

    /**
     * @return (Updatable) The number of distinct characters between old password and new password
     * 
     * **Added In:** 2303212224
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> distinctCharacters() {
        return Optional.ofNullable(this.distinctCharacters);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="domainOcid")
    private @Nullable Output<String> domainOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }

    /**
     * (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="firstNameDisallowed")
    private @Nullable Output<Boolean> firstNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> firstNameDisallowed() {
        return Optional.ofNullable(this.firstNameDisallowed);
    }

    /**
     * (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: writeOnly
     * * required: false
     * * returned: never
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="forcePasswordReset")
    private @Nullable Output<Boolean> forcePasswordReset;

    /**
     * @return (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: writeOnly
     * * required: false
     * * returned: never
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> forcePasswordReset() {
        return Optional.ofNullable(this.forcePasswordReset);
    }

    /**
     * (Updatable) A list of groups that the password policy belongs to.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<DomainsPasswordPolicyGroupArgs>> groups;

    /**
     * @return (Updatable) A list of groups that the password policy belongs to.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * (Updatable) The User or App who created the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: default
     * * type: complex
     * 
     */
    @Import(name="idcsCreatedBies")
    private @Nullable Output<List<DomainsPasswordPolicyIdcsCreatedByArgs>> idcsCreatedBies;

    /**
     * @return (Updatable) The User or App who created the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: true
     * * returned: default
     * * type: complex
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyIdcsCreatedByArgs>>> idcsCreatedBies() {
        return Optional.ofNullable(this.idcsCreatedBies);
    }

    /**
     * The basic endpoint for the identity domain
     * 
     */
    @Import(name="idcsEndpoint")
    private @Nullable Output<String> idcsEndpoint;

    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Optional<Output<String>> idcsEndpoint() {
        return Optional.ofNullable(this.idcsEndpoint);
    }

    /**
     * (Updatable) The User or App who modified the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * 
     */
    @Import(name="idcsLastModifiedBies")
    private @Nullable Output<List<DomainsPasswordPolicyIdcsLastModifiedByArgs>> idcsLastModifiedBies;

    /**
     * @return (Updatable) The User or App who modified the Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyIdcsLastModifiedByArgs>>> idcsLastModifiedBies() {
        return Optional.ofNullable(this.idcsLastModifiedBies);
    }

    /**
     * (Updatable) The release number when the resource was upgraded.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="idcsLastUpgradedInRelease")
    private @Nullable Output<String> idcsLastUpgradedInRelease;

    /**
     * @return (Updatable) The release number when the resource was upgraded.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }

    /**
     * (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="idcsPreventedOperations")
    private @Nullable Output<List<String>> idcsPreventedOperations;

    /**
     * @return (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> idcsPreventedOperations() {
        return Optional.ofNullable(this.idcsPreventedOperations);
    }

    /**
     * (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="lastNameDisallowed")
    private @Nullable Output<Boolean> lastNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> lastNameDisallowed() {
        return Optional.ofNullable(this.lastNameDisallowed);
    }

    /**
     * (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="lockoutDuration")
    private @Nullable Output<Integer> lockoutDuration;

    /**
     * @return (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> lockoutDuration() {
        return Optional.ofNullable(this.lockoutDuration);
    }

    /**
     * (Updatable) An integer that represents the maximum number of failed logins before an account is locked
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxIncorrectAttempts")
    private @Nullable Output<Integer> maxIncorrectAttempts;

    /**
     * @return (Updatable) An integer that represents the maximum number of failed logins before an account is locked
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxIncorrectAttempts() {
        return Optional.ofNullable(this.maxIncorrectAttempts);
    }

    /**
     * (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxRepeatedChars")
    private @Nullable Output<Integer> maxRepeatedChars;

    /**
     * @return (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxRepeatedChars() {
        return Optional.ofNullable(this.maxRepeatedChars);
    }

    /**
     * (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="maxSpecialChars")
    private @Nullable Output<Integer> maxSpecialChars;

    /**
     * @return (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> maxSpecialChars() {
        return Optional.ofNullable(this.maxSpecialChars);
    }

    /**
     * (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
     * * type: complex
     * 
     */
    @Import(name="metas")
    private @Nullable Output<List<DomainsPasswordPolicyMetaArgs>> metas;

    /**
     * @return (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
     * * type: complex
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyMetaArgs>>> metas() {
        return Optional.ofNullable(this.metas);
    }

    /**
     * (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minAlphaNumerals")
    private @Nullable Output<Integer> minAlphaNumerals;

    /**
     * @return (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minAlphaNumerals() {
        return Optional.ofNullable(this.minAlphaNumerals);
    }

    /**
     * (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minAlphas")
    private @Nullable Output<Integer> minAlphas;

    /**
     * @return (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minAlphas() {
        return Optional.ofNullable(this.minAlphas);
    }

    /**
     * (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minLength")
    private @Nullable Output<Integer> minLength;

    /**
     * @return (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minLength() {
        return Optional.ofNullable(this.minLength);
    }

    /**
     * (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minLowerCase")
    private @Nullable Output<Integer> minLowerCase;

    /**
     * @return (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minLowerCase() {
        return Optional.ofNullable(this.minLowerCase);
    }

    /**
     * (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minNumerals")
    private @Nullable Output<Integer> minNumerals;

    /**
     * @return (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minNumerals() {
        return Optional.ofNullable(this.minNumerals);
    }

    /**
     * (Updatable) Minimum time after which the user can resubmit the reset password request
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minPasswordAge")
    private @Nullable Output<Integer> minPasswordAge;

    /**
     * @return (Updatable) Minimum time after which the user can resubmit the reset password request
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minPasswordAge() {
        return Optional.ofNullable(this.minPasswordAge);
    }

    /**
     * (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minSpecialChars")
    private @Nullable Output<Integer> minSpecialChars;

    /**
     * @return (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minSpecialChars() {
        return Optional.ofNullable(this.minSpecialChars);
    }

    /**
     * (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minUniqueChars")
    private @Nullable Output<Integer> minUniqueChars;

    /**
     * @return (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minUniqueChars() {
        return Optional.ofNullable(this.minUniqueChars);
    }

    /**
     * (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="minUpperCase")
    private @Nullable Output<Integer> minUpperCase;

    /**
     * @return (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> minUpperCase() {
        return Optional.ofNullable(this.minUpperCase);
    }

    /**
     * (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: server
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: server
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The number of passwords that will be kept in history that may not be used as a password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="numPasswordsInHistory")
    private @Nullable Output<Integer> numPasswordsInHistory;

    /**
     * @return (Updatable) The number of passwords that will be kept in history that may not be used as a password
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> numPasswordsInHistory() {
        return Optional.ofNullable(this.numPasswordsInHistory);
    }

    /**
     * (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: immutable
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: global
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="passwordExpireWarning")
    private @Nullable Output<Integer> passwordExpireWarning;

    /**
     * @return (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> passwordExpireWarning() {
        return Optional.ofNullable(this.passwordExpireWarning);
    }

    /**
     * (Updatable) The number of days after which the password expires automatically
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="passwordExpiresAfter")
    private @Nullable Output<Integer> passwordExpiresAfter;

    /**
     * @return (Updatable) The number of days after which the password expires automatically
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> passwordExpiresAfter() {
        return Optional.ofNullable(this.passwordExpiresAfter);
    }

    /**
     * (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="passwordStrength")
    private @Nullable Output<String> passwordStrength;

    /**
     * @return (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> passwordStrength() {
        return Optional.ofNullable(this.passwordStrength);
    }

    /**
     * (Updatable) Password policy priority
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * idcsMinValue: 1
     * * uniqueness: server
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return (Updatable) Password policy priority
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * idcsMinValue: 1
     * * uniqueness: server
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="requiredChars")
    private @Nullable Output<String> requiredChars;

    /**
     * @return (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> requiredChars() {
        return Optional.ofNullable(this.requiredChars);
    }

    /**
     * (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    @Import(name="resourceTypeSchemaVersion")
    private @Nullable Output<String> resourceTypeSchemaVersion;

    /**
     * @return (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<Output<String>> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }

    /**
     * (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="schemas")
    private @Nullable Output<List<String>> schemas;

    /**
     * @return (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> schemas() {
        return Optional.ofNullable(this.schemas);
    }

    /**
     * (Updatable) Indicates that the password must begin with an alphabetic character
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="startsWithAlphabet")
    private @Nullable Output<Boolean> startsWithAlphabet;

    /**
     * @return (Updatable) Indicates that the password must begin with an alphabetic character
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> startsWithAlphabet() {
        return Optional.ofNullable(this.startsWithAlphabet);
    }

    /**
     * (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainsPasswordPolicyTagArgs>> tags;

    /**
     * @return (Updatable) A list of tags on this resource.
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [key, value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsPasswordPolicyTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="tenancyOcid")
    private @Nullable Output<String> tenancyOcid;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }

    /**
     * (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="userNameDisallowed")
    private @Nullable Output<Boolean> userNameDisallowed;

    /**
     * @return (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> userNameDisallowed() {
        return Optional.ofNullable(this.userNameDisallowed);
    }

    private DomainsPasswordPolicyState() {}

    private DomainsPasswordPolicyState(DomainsPasswordPolicyState $) {
        this.allowedChars = $.allowedChars;
        this.attributeSets = $.attributeSets;
        this.attributes = $.attributes;
        this.authorization = $.authorization;
        this.compartmentOcid = $.compartmentOcid;
        this.configuredPasswordPolicyRules = $.configuredPasswordPolicyRules;
        this.deleteInProgress = $.deleteInProgress;
        this.description = $.description;
        this.dictionaryDelimiter = $.dictionaryDelimiter;
        this.dictionaryLocation = $.dictionaryLocation;
        this.dictionaryWordDisallowed = $.dictionaryWordDisallowed;
        this.disallowedChars = $.disallowedChars;
        this.disallowedSubstrings = $.disallowedSubstrings;
        this.disallowedUserAttributeValues = $.disallowedUserAttributeValues;
        this.distinctCharacters = $.distinctCharacters;
        this.domainOcid = $.domainOcid;
        this.externalId = $.externalId;
        this.firstNameDisallowed = $.firstNameDisallowed;
        this.forcePasswordReset = $.forcePasswordReset;
        this.groups = $.groups;
        this.idcsCreatedBies = $.idcsCreatedBies;
        this.idcsEndpoint = $.idcsEndpoint;
        this.idcsLastModifiedBies = $.idcsLastModifiedBies;
        this.idcsLastUpgradedInRelease = $.idcsLastUpgradedInRelease;
        this.idcsPreventedOperations = $.idcsPreventedOperations;
        this.lastNameDisallowed = $.lastNameDisallowed;
        this.lockoutDuration = $.lockoutDuration;
        this.maxIncorrectAttempts = $.maxIncorrectAttempts;
        this.maxLength = $.maxLength;
        this.maxRepeatedChars = $.maxRepeatedChars;
        this.maxSpecialChars = $.maxSpecialChars;
        this.metas = $.metas;
        this.minAlphaNumerals = $.minAlphaNumerals;
        this.minAlphas = $.minAlphas;
        this.minLength = $.minLength;
        this.minLowerCase = $.minLowerCase;
        this.minNumerals = $.minNumerals;
        this.minPasswordAge = $.minPasswordAge;
        this.minSpecialChars = $.minSpecialChars;
        this.minUniqueChars = $.minUniqueChars;
        this.minUpperCase = $.minUpperCase;
        this.name = $.name;
        this.numPasswordsInHistory = $.numPasswordsInHistory;
        this.ocid = $.ocid;
        this.passwordExpireWarning = $.passwordExpireWarning;
        this.passwordExpiresAfter = $.passwordExpiresAfter;
        this.passwordStrength = $.passwordStrength;
        this.priority = $.priority;
        this.requiredChars = $.requiredChars;
        this.resourceTypeSchemaVersion = $.resourceTypeSchemaVersion;
        this.schemas = $.schemas;
        this.startsWithAlphabet = $.startsWithAlphabet;
        this.tags = $.tags;
        this.tenancyOcid = $.tenancyOcid;
        this.userNameDisallowed = $.userNameDisallowed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsPasswordPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsPasswordPolicyState $;

        public Builder() {
            $ = new DomainsPasswordPolicyState();
        }

        public Builder(DomainsPasswordPolicyState defaults) {
            $ = new DomainsPasswordPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedChars (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder allowedChars(@Nullable Output<String> allowedChars) {
            $.allowedChars = allowedChars;
            return this;
        }

        /**
         * @param allowedChars (Updatable) A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder allowedChars(String allowedChars) {
            return allowedChars(Output.of(allowedChars));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(@Nullable Output<List<String>> attributeSets) {
            $.attributeSets = attributeSets;
            return this;
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(List<String> attributeSets) {
            return attributeSets(Output.of(attributeSets));
        }

        /**
         * @param attributeSets (Updatable) A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<String> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes (Updatable) A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<String> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization (Updatable) The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
         * 
         * @return builder
         * 
         */
        public Builder authorization(String authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param compartmentOcid (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(@Nullable Output<String> compartmentOcid) {
            $.compartmentOcid = compartmentOcid;
            return this;
        }

        /**
         * @param compartmentOcid (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder compartmentOcid(String compartmentOcid) {
            return compartmentOcid(Output.of(compartmentOcid));
        }

        /**
         * @param configuredPasswordPolicyRules (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [key]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder configuredPasswordPolicyRules(@Nullable Output<List<DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs>> configuredPasswordPolicyRules) {
            $.configuredPasswordPolicyRules = configuredPasswordPolicyRules;
            return this;
        }

        /**
         * @param configuredPasswordPolicyRules (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [key]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder configuredPasswordPolicyRules(List<DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs> configuredPasswordPolicyRules) {
            return configuredPasswordPolicyRules(Output.of(configuredPasswordPolicyRules));
        }

        /**
         * @param configuredPasswordPolicyRules (Updatable) List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [key]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder configuredPasswordPolicyRules(DomainsPasswordPolicyConfiguredPasswordPolicyRuleArgs... configuredPasswordPolicyRules) {
            return configuredPasswordPolicyRules(List.of(configuredPasswordPolicyRules));
        }

        /**
         * @param deleteInProgress (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder deleteInProgress(@Nullable Output<Boolean> deleteInProgress) {
            $.deleteInProgress = deleteInProgress;
            return this;
        }

        /**
         * @param deleteInProgress (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder deleteInProgress(Boolean deleteInProgress) {
            return deleteInProgress(Output.of(deleteInProgress));
        }

        /**
         * @param description (Updatable) A String that describes the password policy
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A String that describes the password policy
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dictionaryDelimiter (Updatable) A delimiter used to separate characters in the dictionary file
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryDelimiter(@Nullable Output<String> dictionaryDelimiter) {
            $.dictionaryDelimiter = dictionaryDelimiter;
            return this;
        }

        /**
         * @param dictionaryDelimiter (Updatable) A delimiter used to separate characters in the dictionary file
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryDelimiter(String dictionaryDelimiter) {
            return dictionaryDelimiter(Output.of(dictionaryDelimiter));
        }

        /**
         * @param dictionaryLocation (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryLocation(@Nullable Output<String> dictionaryLocation) {
            $.dictionaryLocation = dictionaryLocation;
            return this;
        }

        /**
         * @param dictionaryLocation (Updatable) A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryLocation(String dictionaryLocation) {
            return dictionaryLocation(Output.of(dictionaryLocation));
        }

        /**
         * @param dictionaryWordDisallowed (Updatable) Indicates whether the password can match a dictionary word
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryWordDisallowed(@Nullable Output<Boolean> dictionaryWordDisallowed) {
            $.dictionaryWordDisallowed = dictionaryWordDisallowed;
            return this;
        }

        /**
         * @param dictionaryWordDisallowed (Updatable) Indicates whether the password can match a dictionary word
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dictionaryWordDisallowed(Boolean dictionaryWordDisallowed) {
            return dictionaryWordDisallowed(Output.of(dictionaryWordDisallowed));
        }

        /**
         * @param disallowedChars (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedChars(@Nullable Output<String> disallowedChars) {
            $.disallowedChars = disallowedChars;
            return this;
        }

        /**
         * @param disallowedChars (Updatable) A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedChars(String disallowedChars) {
            return disallowedChars(Output.of(disallowedChars));
        }

        /**
         * @param disallowedSubstrings (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedSubstrings(@Nullable Output<List<String>> disallowedSubstrings) {
            $.disallowedSubstrings = disallowedSubstrings;
            return this;
        }

        /**
         * @param disallowedSubstrings (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedSubstrings(List<String> disallowedSubstrings) {
            return disallowedSubstrings(Output.of(disallowedSubstrings));
        }

        /**
         * @param disallowedSubstrings (Updatable) A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedSubstrings(String... disallowedSubstrings) {
            return disallowedSubstrings(List.of(disallowedSubstrings));
        }

        /**
         * @param disallowedUserAttributeValues (Updatable) List of User attributes whose values are not allowed in the password.
         * 
         * **Added In:** 2303212224
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedUserAttributeValues(@Nullable Output<List<String>> disallowedUserAttributeValues) {
            $.disallowedUserAttributeValues = disallowedUserAttributeValues;
            return this;
        }

        /**
         * @param disallowedUserAttributeValues (Updatable) List of User attributes whose values are not allowed in the password.
         * 
         * **Added In:** 2303212224
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedUserAttributeValues(List<String> disallowedUserAttributeValues) {
            return disallowedUserAttributeValues(Output.of(disallowedUserAttributeValues));
        }

        /**
         * @param disallowedUserAttributeValues (Updatable) List of User attributes whose values are not allowed in the password.
         * 
         * **Added In:** 2303212224
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder disallowedUserAttributeValues(String... disallowedUserAttributeValues) {
            return disallowedUserAttributeValues(List.of(disallowedUserAttributeValues));
        }

        /**
         * @param distinctCharacters (Updatable) The number of distinct characters between old password and new password
         * 
         * **Added In:** 2303212224
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder distinctCharacters(@Nullable Output<Integer> distinctCharacters) {
            $.distinctCharacters = distinctCharacters;
            return this;
        }

        /**
         * @param distinctCharacters (Updatable) The number of distinct characters between old password and new password
         * 
         * **Added In:** 2303212224
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder distinctCharacters(Integer distinctCharacters) {
            return distinctCharacters(Output.of(distinctCharacters));
        }

        /**
         * @param domainOcid (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder domainOcid(@Nullable Output<String> domainOcid) {
            $.domainOcid = domainOcid;
            return this;
        }

        /**
         * @param domainOcid (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder domainOcid(String domainOcid) {
            return domainOcid(Output.of(domainOcid));
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId (Updatable) An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param firstNameDisallowed (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder firstNameDisallowed(@Nullable Output<Boolean> firstNameDisallowed) {
            $.firstNameDisallowed = firstNameDisallowed;
            return this;
        }

        /**
         * @param firstNameDisallowed (Updatable) Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder firstNameDisallowed(Boolean firstNameDisallowed) {
            return firstNameDisallowed(Output.of(firstNameDisallowed));
        }

        /**
         * @param forcePasswordReset (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: writeOnly
         * * required: false
         * * returned: never
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder forcePasswordReset(@Nullable Output<Boolean> forcePasswordReset) {
            $.forcePasswordReset = forcePasswordReset;
            return this;
        }

        /**
         * @param forcePasswordReset (Updatable) Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: writeOnly
         * * required: false
         * * returned: never
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder forcePasswordReset(Boolean forcePasswordReset) {
            return forcePasswordReset(Output.of(forcePasswordReset));
        }

        /**
         * @param groups (Updatable) A list of groups that the password policy belongs to.
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<DomainsPasswordPolicyGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups (Updatable) A list of groups that the password policy belongs to.
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groups(List<DomainsPasswordPolicyGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups (Updatable) A list of groups that the password policy belongs to.
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder groups(DomainsPasswordPolicyGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: true
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(@Nullable Output<List<DomainsPasswordPolicyIdcsCreatedByArgs>> idcsCreatedBies) {
            $.idcsCreatedBies = idcsCreatedBies;
            return this;
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: true
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(List<DomainsPasswordPolicyIdcsCreatedByArgs> idcsCreatedBies) {
            return idcsCreatedBies(Output.of(idcsCreatedBies));
        }

        /**
         * @param idcsCreatedBies (Updatable) The User or App who created the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: true
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsCreatedBies(DomainsPasswordPolicyIdcsCreatedByArgs... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(@Nullable Output<String> idcsEndpoint) {
            $.idcsEndpoint = idcsEndpoint;
            return this;
        }

        /**
         * @param idcsEndpoint The basic endpoint for the identity domain
         * 
         * @return builder
         * 
         */
        public Builder idcsEndpoint(String idcsEndpoint) {
            return idcsEndpoint(Output.of(idcsEndpoint));
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(@Nullable Output<List<DomainsPasswordPolicyIdcsLastModifiedByArgs>> idcsLastModifiedBies) {
            $.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(List<DomainsPasswordPolicyIdcsLastModifiedByArgs> idcsLastModifiedBies) {
            return idcsLastModifiedBies(Output.of(idcsLastModifiedBies));
        }

        /**
         * @param idcsLastModifiedBies (Updatable) The User or App who modified the Resource
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder idcsLastModifiedBies(DomainsPasswordPolicyIdcsLastModifiedByArgs... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }

        /**
         * @param idcsLastUpgradedInRelease (Updatable) The release number when the resource was upgraded.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder idcsLastUpgradedInRelease(@Nullable Output<String> idcsLastUpgradedInRelease) {
            $.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }

        /**
         * @param idcsLastUpgradedInRelease (Updatable) The release number when the resource was upgraded.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            return idcsLastUpgradedInRelease(Output.of(idcsLastUpgradedInRelease));
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(@Nullable Output<List<String>> idcsPreventedOperations) {
            $.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            return idcsPreventedOperations(Output.of(idcsPreventedOperations));
        }

        /**
         * @param idcsPreventedOperations (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }

        /**
         * @param lastNameDisallowed (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lastNameDisallowed(@Nullable Output<Boolean> lastNameDisallowed) {
            $.lastNameDisallowed = lastNameDisallowed;
            return this;
        }

        /**
         * @param lastNameDisallowed (Updatable) Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lastNameDisallowed(Boolean lastNameDisallowed) {
            return lastNameDisallowed(Output.of(lastNameDisallowed));
        }

        /**
         * @param lockoutDuration (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockoutDuration(@Nullable Output<Integer> lockoutDuration) {
            $.lockoutDuration = lockoutDuration;
            return this;
        }

        /**
         * @param lockoutDuration (Updatable) The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockoutDuration(Integer lockoutDuration) {
            return lockoutDuration(Output.of(lockoutDuration));
        }

        /**
         * @param maxIncorrectAttempts (Updatable) An integer that represents the maximum number of failed logins before an account is locked
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxIncorrectAttempts(@Nullable Output<Integer> maxIncorrectAttempts) {
            $.maxIncorrectAttempts = maxIncorrectAttempts;
            return this;
        }

        /**
         * @param maxIncorrectAttempts (Updatable) An integer that represents the maximum number of failed logins before an account is locked
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxIncorrectAttempts(Integer maxIncorrectAttempts) {
            return maxIncorrectAttempts(Output.of(maxIncorrectAttempts));
        }

        /**
         * @param maxLength (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength (Updatable) The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param maxRepeatedChars (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxRepeatedChars(@Nullable Output<Integer> maxRepeatedChars) {
            $.maxRepeatedChars = maxRepeatedChars;
            return this;
        }

        /**
         * @param maxRepeatedChars (Updatable) The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxRepeatedChars(Integer maxRepeatedChars) {
            return maxRepeatedChars(Output.of(maxRepeatedChars));
        }

        /**
         * @param maxSpecialChars (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxSpecialChars(@Nullable Output<Integer> maxSpecialChars) {
            $.maxSpecialChars = maxSpecialChars;
            return this;
        }

        /**
         * @param maxSpecialChars (Updatable) The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder maxSpecialChars(Integer maxSpecialChars) {
            return maxSpecialChars(Output.of(maxSpecialChars));
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder metas(@Nullable Output<List<DomainsPasswordPolicyMetaArgs>> metas) {
            $.metas = metas;
            return this;
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder metas(List<DomainsPasswordPolicyMetaArgs> metas) {
            return metas(Output.of(metas));
        }

        /**
         * @param metas (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
         * * type: complex
         * 
         * @return builder
         * 
         */
        public Builder metas(DomainsPasswordPolicyMetaArgs... metas) {
            return metas(List.of(metas));
        }

        /**
         * @param minAlphaNumerals (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minAlphaNumerals(@Nullable Output<Integer> minAlphaNumerals) {
            $.minAlphaNumerals = minAlphaNumerals;
            return this;
        }

        /**
         * @param minAlphaNumerals (Updatable) The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minAlphaNumerals(Integer minAlphaNumerals) {
            return minAlphaNumerals(Output.of(minAlphaNumerals));
        }

        /**
         * @param minAlphas (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minAlphas(@Nullable Output<Integer> minAlphas) {
            $.minAlphas = minAlphas;
            return this;
        }

        /**
         * @param minAlphas (Updatable) The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minAlphas(Integer minAlphas) {
            return minAlphas(Output.of(minAlphas));
        }

        /**
         * @param minLength (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minLength(@Nullable Output<Integer> minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param minLength (Updatable) The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            return minLength(Output.of(minLength));
        }

        /**
         * @param minLowerCase (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minLowerCase(@Nullable Output<Integer> minLowerCase) {
            $.minLowerCase = minLowerCase;
            return this;
        }

        /**
         * @param minLowerCase (Updatable) The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minLowerCase(Integer minLowerCase) {
            return minLowerCase(Output.of(minLowerCase));
        }

        /**
         * @param minNumerals (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minNumerals(@Nullable Output<Integer> minNumerals) {
            $.minNumerals = minNumerals;
            return this;
        }

        /**
         * @param minNumerals (Updatable) The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minNumerals(Integer minNumerals) {
            return minNumerals(Output.of(minNumerals));
        }

        /**
         * @param minPasswordAge (Updatable) Minimum time after which the user can resubmit the reset password request
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minPasswordAge(@Nullable Output<Integer> minPasswordAge) {
            $.minPasswordAge = minPasswordAge;
            return this;
        }

        /**
         * @param minPasswordAge (Updatable) Minimum time after which the user can resubmit the reset password request
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minPasswordAge(Integer minPasswordAge) {
            return minPasswordAge(Output.of(minPasswordAge));
        }

        /**
         * @param minSpecialChars (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minSpecialChars(@Nullable Output<Integer> minSpecialChars) {
            $.minSpecialChars = minSpecialChars;
            return this;
        }

        /**
         * @param minSpecialChars (Updatable) The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minSpecialChars(Integer minSpecialChars) {
            return minSpecialChars(Output.of(minSpecialChars));
        }

        /**
         * @param minUniqueChars (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minUniqueChars(@Nullable Output<Integer> minUniqueChars) {
            $.minUniqueChars = minUniqueChars;
            return this;
        }

        /**
         * @param minUniqueChars (Updatable) The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minUniqueChars(Integer minUniqueChars) {
            return minUniqueChars(Output.of(minUniqueChars));
        }

        /**
         * @param minUpperCase (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minUpperCase(@Nullable Output<Integer> minUpperCase) {
            $.minUpperCase = minUpperCase;
            return this;
        }

        /**
         * @param minUpperCase (Updatable) The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder minUpperCase(Integer minUpperCase) {
            return minUpperCase(Output.of(minUpperCase));
        }

        /**
         * @param name (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numPasswordsInHistory (Updatable) The number of passwords that will be kept in history that may not be used as a password
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder numPasswordsInHistory(@Nullable Output<Integer> numPasswordsInHistory) {
            $.numPasswordsInHistory = numPasswordsInHistory;
            return this;
        }

        /**
         * @param numPasswordsInHistory (Updatable) The number of passwords that will be kept in history that may not be used as a password
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder numPasswordsInHistory(Integer numPasswordsInHistory) {
            return numPasswordsInHistory(Output.of(numPasswordsInHistory));
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Updatable) Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: immutable
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: global
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param passwordExpireWarning (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireWarning(@Nullable Output<Integer> passwordExpireWarning) {
            $.passwordExpireWarning = passwordExpireWarning;
            return this;
        }

        /**
         * @param passwordExpireWarning (Updatable) An integer indicating the number of days before which the user should be warned about password expiry.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireWarning(Integer passwordExpireWarning) {
            return passwordExpireWarning(Output.of(passwordExpireWarning));
        }

        /**
         * @param passwordExpiresAfter (Updatable) The number of days after which the password expires automatically
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordExpiresAfter(@Nullable Output<Integer> passwordExpiresAfter) {
            $.passwordExpiresAfter = passwordExpiresAfter;
            return this;
        }

        /**
         * @param passwordExpiresAfter (Updatable) The number of days after which the password expires automatically
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordExpiresAfter(Integer passwordExpiresAfter) {
            return passwordExpiresAfter(Output.of(passwordExpiresAfter));
        }

        /**
         * @param passwordStrength (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordStrength(@Nullable Output<String> passwordStrength) {
            $.passwordStrength = passwordStrength;
            return this;
        }

        /**
         * @param passwordStrength (Updatable) Indicates whether the password policy is configured as Simple, Standard, or Custom.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder passwordStrength(String passwordStrength) {
            return passwordStrength(Output.of(passwordStrength));
        }

        /**
         * @param priority (Updatable) Password policy priority
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * idcsMinValue: 1
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority (Updatable) Password policy priority
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: integer
         * * idcsMinValue: 1
         * * uniqueness: server
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param requiredChars (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder requiredChars(@Nullable Output<String> requiredChars) {
            $.requiredChars = requiredChars;
            return this;
        }

        /**
         * @param requiredChars (Updatable) A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder requiredChars(String requiredChars) {
            return requiredChars(Output.of(requiredChars));
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(@Nullable Output<String> resourceTypeSchemaVersion) {
            $.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }

        /**
         * @param resourceTypeSchemaVersion (Updatable) An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            return resourceTypeSchemaVersion(Output.of(resourceTypeSchemaVersion));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(@Nullable Output<List<String>> schemas) {
            $.schemas = schemas;
            return this;
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(List<String> schemas) {
            return schemas(Output.of(schemas));
        }

        /**
         * @param schemas (Updatable) REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: true
         * * mutability: readWrite
         * * required: true
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }

        /**
         * @param startsWithAlphabet (Updatable) Indicates that the password must begin with an alphabetic character
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder startsWithAlphabet(@Nullable Output<Boolean> startsWithAlphabet) {
            $.startsWithAlphabet = startsWithAlphabet;
            return this;
        }

        /**
         * @param startsWithAlphabet (Updatable) Indicates that the password must begin with an alphabetic character
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder startsWithAlphabet(Boolean startsWithAlphabet) {
            return startsWithAlphabet(Output.of(startsWithAlphabet));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DomainsPasswordPolicyTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DomainsPasswordPolicyTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags (Updatable) A list of tags on this resource.
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [key, value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tags(DomainsPasswordPolicyTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenancyOcid (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(@Nullable Output<String> tenancyOcid) {
            $.tenancyOcid = tenancyOcid;
            return this;
        }

        /**
         * @param tenancyOcid (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(String tenancyOcid) {
            return tenancyOcid(Output.of(tenancyOcid));
        }

        /**
         * @param userNameDisallowed (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userNameDisallowed(@Nullable Output<Boolean> userNameDisallowed) {
            $.userNameDisallowed = userNameDisallowed;
            return this;
        }

        /**
         * @param userNameDisallowed (Updatable) Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder userNameDisallowed(Boolean userNameDisallowed) {
            return userNameDisallowed(Output.of(userNameDisallowed));
        }

        public DomainsPasswordPolicyState build() {
            return $;
        }
    }

}
