// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsSecurityQuestionQuestionTextArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsSecurityQuestionQuestionTextArgs Empty = new DomainsSecurityQuestionQuestionTextArgs();

    /**
     * If true, specifies that the localized attribute instance value is the default and will be returned if no localized value found for requesting user&#39;s preferred locale. One and only one instance should have this attribute set to true.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return If true, specifies that the localized attribute instance value is the default and will be returned if no localized value found for requesting user&#39;s preferred locale. One and only one instance should have this attribute set to true.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * The locale
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;locales&#34; and attrValues.value eq &#34;$(locale)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="locale", required=true)
    private Output<String> locale;

    /**
     * @return The locale
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;locales&#34; and attrValues.value eq &#34;$(locale)&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> locale() {
        return this.locale;
    }

    /**
     * The question text
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The question text
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: always
     * * type: string
     * * uniqueness: none
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private DomainsSecurityQuestionQuestionTextArgs() {}

    private DomainsSecurityQuestionQuestionTextArgs(DomainsSecurityQuestionQuestionTextArgs $) {
        this.default_ = $.default_;
        this.locale = $.locale;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsSecurityQuestionQuestionTextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsSecurityQuestionQuestionTextArgs $;

        public Builder() {
            $ = new DomainsSecurityQuestionQuestionTextArgs();
        }

        public Builder(DomainsSecurityQuestionQuestionTextArgs defaults) {
            $ = new DomainsSecurityQuestionQuestionTextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ If true, specifies that the localized attribute instance value is the default and will be returned if no localized value found for requesting user&#39;s preferred locale. One and only one instance should have this attribute set to true.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ If true, specifies that the localized attribute instance value is the default and will be returned if no localized value found for requesting user&#39;s preferred locale. One and only one instance should have this attribute set to true.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param locale The locale
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;locales&#34; and attrValues.value eq &#34;$(locale)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder locale(Output<String> locale) {
            $.locale = locale;
            return this;
        }

        /**
         * @param locale The locale
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCanonicalValueSourceFilter: attrName eq &#34;locales&#34; and attrValues.value eq &#34;$(locale)&#34;
         * * idcsCanonicalValueSourceResourceType: AllowedValue
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        /**
         * @param value The question text
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The question text
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: true
         * * returned: always
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DomainsSecurityQuestionQuestionTextArgs build() {
            if ($.locale == null) {
                throw new MissingRequiredPropertyException("DomainsSecurityQuestionQuestionTextArgs", "locale");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("DomainsSecurityQuestionQuestionTextArgs", "value");
            }
            return $;
        }
    }

}
