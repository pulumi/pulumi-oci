// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserAddressArgs Empty = new DomainsUserAddressArgs();

    /**
     * (Updatable) The country name component.
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return (Updatable) The country name component.
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * (Updatable) Full name
     * 
     */
    @Import(name="formatted")
    private @Nullable Output<String> formatted;

    /**
     * @return (Updatable) Full name
     * 
     */
    public Optional<Output<String>> formatted() {
        return Optional.ofNullable(this.formatted);
    }

    /**
     * (Updatable) The city or locality component.
     * 
     */
    @Import(name="locality")
    private @Nullable Output<String> locality;

    /**
     * @return (Updatable) The city or locality component.
     * 
     */
    public Optional<Output<String>> locality() {
        return Optional.ofNullable(this.locality);
    }

    /**
     * (Updatable) The zipcode or postal code component.
     * 
     */
    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    /**
     * @return (Updatable) The zipcode or postal code component.
     * 
     */
    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     */
    @Import(name="primary")
    private @Nullable Output<Boolean> primary;

    /**
     * @return (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     */
    public Optional<Output<Boolean>> primary() {
        return Optional.ofNullable(this.primary);
    }

    /**
     * (Updatable) The state or region component.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Updatable) The state or region component.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     */
    @Import(name="streetAddress")
    private @Nullable Output<String> streetAddress;

    /**
     * @return (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     */
    public Optional<Output<String>> streetAddress() {
        return Optional.ofNullable(this.streetAddress);
    }

    /**
     * (Updatable) A label indicating the attribute&#39;s function.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) A label indicating the attribute&#39;s function.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DomainsUserAddressArgs() {}

    private DomainsUserAddressArgs(DomainsUserAddressArgs $) {
        this.country = $.country;
        this.formatted = $.formatted;
        this.locality = $.locality;
        this.postalCode = $.postalCode;
        this.primary = $.primary;
        this.region = $.region;
        this.streetAddress = $.streetAddress;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserAddressArgs $;

        public Builder() {
            $ = new DomainsUserAddressArgs();
        }

        public Builder(DomainsUserAddressArgs defaults) {
            $ = new DomainsUserAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param country (Updatable) The country name component.
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country (Updatable) The country name component.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param formatted (Updatable) Full name
         * 
         * @return builder
         * 
         */
        public Builder formatted(@Nullable Output<String> formatted) {
            $.formatted = formatted;
            return this;
        }

        /**
         * @param formatted (Updatable) Full name
         * 
         * @return builder
         * 
         */
        public Builder formatted(String formatted) {
            return formatted(Output.of(formatted));
        }

        /**
         * @param locality (Updatable) The city or locality component.
         * 
         * @return builder
         * 
         */
        public Builder locality(@Nullable Output<String> locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param locality (Updatable) The city or locality component.
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            return locality(Output.of(locality));
        }

        /**
         * @param postalCode (Updatable) The zipcode or postal code component.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode (Updatable) The zipcode or postal code component.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param primary (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
         * 
         * @return builder
         * 
         */
        public Builder primary(@Nullable Output<Boolean> primary) {
            $.primary = primary;
            return this;
        }

        /**
         * @param primary (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
         * 
         * @return builder
         * 
         */
        public Builder primary(Boolean primary) {
            return primary(Output.of(primary));
        }

        /**
         * @param region (Updatable) The state or region component.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Updatable) The state or region component.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param streetAddress (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(@Nullable Output<String> streetAddress) {
            $.streetAddress = streetAddress;
            return this;
        }

        /**
         * @param streetAddress (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress(String streetAddress) {
            return streetAddress(Output.of(streetAddress));
        }

        /**
         * @param type (Updatable) A label indicating the attribute&#39;s function.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) A label indicating the attribute&#39;s function.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainsUserAddressArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
