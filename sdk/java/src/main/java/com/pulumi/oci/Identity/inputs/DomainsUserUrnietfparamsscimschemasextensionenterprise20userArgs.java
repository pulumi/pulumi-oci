// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs Empty = new DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs();

    /**
     * (Updatable) Identifies the name of a cost center.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Cost Center
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="costCenter")
    private @Nullable Output<String> costCenter;

    /**
     * @return (Updatable) Identifies the name of a cost center.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Cost Center
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> costCenter() {
        return Optional.ofNullable(this.costCenter);
    }

    /**
     * (Updatable) Identifies the name of a department.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Department
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="department")
    private @Nullable Output<String> department;

    /**
     * @return (Updatable) Identifies the name of a department.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Department
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> department() {
        return Optional.ofNullable(this.department);
    }

    /**
     * (Updatable) Identifies the name of a division.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Division
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="division")
    private @Nullable Output<String> division;

    /**
     * @return (Updatable) Identifies the name of a division.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Division
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> division() {
        return Optional.ofNullable(this.division);
    }

    /**
     * (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Employee Number
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="employeeNumber")
    private @Nullable Output<String> employeeNumber;

    /**
     * @return (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Employee Number
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> employeeNumber() {
        return Optional.ofNullable(this.employeeNumber);
    }

    /**
     * (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
     * 
     * **SCIM++ Properties:**
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
     * * idcsPii: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="manager")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs> manager;

    /**
     * @return (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
     * 
     * **SCIM++ Properties:**
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
     * * idcsPii: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs>> manager() {
        return Optional.ofNullable(this.manager);
    }

    /**
     * (Updatable) Identifies the name of an organization.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Organization
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return (Updatable) Identifies the name of an organization.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCsvAttributeName: Organization
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
     * * idcsPii: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    private DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs() {}

    private DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs(DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs $) {
        this.costCenter = $.costCenter;
        this.department = $.department;
        this.division = $.division;
        this.employeeNumber = $.employeeNumber;
        this.manager = $.manager;
        this.organization = $.organization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param costCenter (Updatable) Identifies the name of a cost center.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Cost Center
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder costCenter(@Nullable Output<String> costCenter) {
            $.costCenter = costCenter;
            return this;
        }

        /**
         * @param costCenter (Updatable) Identifies the name of a cost center.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Cost Center
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Cost Center]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder costCenter(String costCenter) {
            return costCenter(Output.of(costCenter));
        }

        /**
         * @param department (Updatable) Identifies the name of a department.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Department
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder department(@Nullable Output<String> department) {
            $.department = department;
            return this;
        }

        /**
         * @param department (Updatable) Identifies the name of a department.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Department
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Department]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder department(String department) {
            return department(Output.of(department));
        }

        /**
         * @param division (Updatable) Identifies the name of a division.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Division
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder division(@Nullable Output<String> division) {
            $.division = division;
            return this;
        }

        /**
         * @param division (Updatable) Identifies the name of a division.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Division
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Division]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder division(String division) {
            return division(Output.of(division));
        }

        /**
         * @param employeeNumber (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Employee Number
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder employeeNumber(@Nullable Output<String> employeeNumber) {
            $.employeeNumber = employeeNumber;
            return this;
        }

        /**
         * @param employeeNumber (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Employee Number
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Employee Number]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder employeeNumber(String employeeNumber) {
            return employeeNumber(Output.of(employeeNumber));
        }

        /**
         * @param manager (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
         * 
         * **SCIM++ Properties:**
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
         * * idcsPii: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder manager(@Nullable Output<DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs> manager) {
            $.manager = manager;
            return this;
        }

        /**
         * @param manager (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
         * 
         * **SCIM++ Properties:**
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Manager, deprecatedColumnHeaderName:Manager Name, mapsTo:manager.value]]
         * * idcsPii: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder manager(DomainsUserUrnietfparamsscimschemasextensionenterprise20userManagerArgs manager) {
            return manager(Output.of(manager));
        }

        /**
         * @param organization (Updatable) Identifies the name of an organization.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Organization
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization (Updatable) Identifies the name of an organization.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsCsvAttributeName: Organization
         * * idcsCsvAttributeNameMappings: [[columnHeaderName:Organization Name, deprecatedColumnHeaderName:Organization]]
         * * idcsPii: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public DomainsUserUrnietfparamsscimschemasextensionenterprise20userArgs build() {
            return $;
        }
    }

}
