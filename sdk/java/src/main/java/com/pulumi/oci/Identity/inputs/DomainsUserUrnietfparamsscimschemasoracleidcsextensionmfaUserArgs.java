// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs();

    /**
     * (Updatable) A list of bypass codes belongs to user
     * 
     */
    @Import(name="bypassCodes")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>> bypassCodes;

    /**
     * @return (Updatable) A list of bypass codes belongs to user
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>>> bypassCodes() {
        return Optional.ofNullable(this.bypassCodes);
    }

    /**
     * (Updatable) A list of devices enrolled by the user.
     * 
     */
    @Import(name="devices")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>> devices;

    /**
     * @return (Updatable) A list of devices enrolled by the user.
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>>> devices() {
        return Optional.ofNullable(this.devices);
    }

    /**
     * (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    @Import(name="loginAttempts")
    private @Nullable Output<Integer> loginAttempts;

    /**
     * @return (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Optional<Output<Integer>> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }

    /**
     * (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
     * 
     */
    @Import(name="mfaEnabledOn")
    private @Nullable Output<String> mfaEnabledOn;

    /**
     * @return (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
     * 
     */
    public Optional<Output<String>> mfaEnabledOn() {
        return Optional.ofNullable(this.mfaEnabledOn);
    }

    /**
     * (Updatable) User MFA Ignored Apps Identifiers
     * 
     */
    @Import(name="mfaIgnoredApps")
    private @Nullable Output<List<String>> mfaIgnoredApps;

    /**
     * @return (Updatable) User MFA Ignored Apps Identifiers
     * 
     */
    public Optional<Output<List<String>>> mfaIgnoredApps() {
        return Optional.ofNullable(this.mfaIgnoredApps);
    }

    /**
     * (Updatable) User Opted for MFA
     * 
     */
    @Import(name="mfaStatus")
    private @Nullable Output<String> mfaStatus;

    /**
     * @return (Updatable) User Opted for MFA
     * 
     */
    public Optional<Output<String>> mfaStatus() {
        return Optional.ofNullable(this.mfaStatus);
    }

    /**
     * (Updatable) Preferred Authentication Factor Type
     * 
     */
    @Import(name="preferredAuthenticationFactor")
    private @Nullable Output<String> preferredAuthenticationFactor;

    /**
     * @return (Updatable) Preferred Authentication Factor Type
     * 
     */
    public Optional<Output<String>> preferredAuthenticationFactor() {
        return Optional.ofNullable(this.preferredAuthenticationFactor);
    }

    /**
     * (Updatable) Preferred Authentication method
     * 
     */
    @Import(name="preferredAuthenticationMethod")
    private @Nullable Output<String> preferredAuthenticationMethod;

    /**
     * @return (Updatable) Preferred Authentication method
     * 
     */
    public Optional<Output<String>> preferredAuthenticationMethod() {
        return Optional.ofNullable(this.preferredAuthenticationMethod);
    }

    /**
     * (Updatable) User preferred device
     * 
     */
    @Import(name="preferredDevice")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs> preferredDevice;

    /**
     * @return (Updatable) User preferred device
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs>> preferredDevice() {
        return Optional.ofNullable(this.preferredDevice);
    }

    /**
     * (Updatable) Preferred Third party vendor name
     * 
     */
    @Import(name="preferredThirdPartyVendor")
    private @Nullable Output<String> preferredThirdPartyVendor;

    /**
     * @return (Updatable) Preferred Third party vendor name
     * 
     */
    public Optional<Output<String>> preferredThirdPartyVendor() {
        return Optional.ofNullable(this.preferredThirdPartyVendor);
    }

    /**
     * (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     */
    @Import(name="trustedUserAgents")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>> trustedUserAgents;

    /**
     * @return (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>>> trustedUserAgents() {
        return Optional.ofNullable(this.trustedUserAgents);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs $) {
        this.bypassCodes = $.bypassCodes;
        this.devices = $.devices;
        this.loginAttempts = $.loginAttempts;
        this.mfaEnabledOn = $.mfaEnabledOn;
        this.mfaIgnoredApps = $.mfaIgnoredApps;
        this.mfaStatus = $.mfaStatus;
        this.preferredAuthenticationFactor = $.preferredAuthenticationFactor;
        this.preferredAuthenticationMethod = $.preferredAuthenticationMethod;
        this.preferredDevice = $.preferredDevice;
        this.preferredThirdPartyVendor = $.preferredThirdPartyVendor;
        this.trustedUserAgents = $.trustedUserAgents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes belongs to user
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>> bypassCodes) {
            $.bypassCodes = bypassCodes;
            return this;
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes belongs to user
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs> bypassCodes) {
            return bypassCodes(Output.of(bypassCodes));
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes belongs to user
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs... bypassCodes) {
            return bypassCodes(List.of(bypassCodes));
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * @return builder
         * 
         */
        public Builder devices(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>> devices) {
            $.devices = devices;
            return this;
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * @return builder
         * 
         */
        public Builder devices(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs> devices) {
            return devices(Output.of(devices));
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * @return builder
         * 
         */
        public Builder devices(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs... devices) {
            return devices(List.of(devices));
        }

        /**
         * @param loginAttempts (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(@Nullable Output<Integer> loginAttempts) {
            $.loginAttempts = loginAttempts;
            return this;
        }

        /**
         * @param loginAttempts (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Integer loginAttempts) {
            return loginAttempts(Output.of(loginAttempts));
        }

        /**
         * @param mfaEnabledOn (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
         * 
         * @return builder
         * 
         */
        public Builder mfaEnabledOn(@Nullable Output<String> mfaEnabledOn) {
            $.mfaEnabledOn = mfaEnabledOn;
            return this;
        }

        /**
         * @param mfaEnabledOn (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
         * 
         * @return builder
         * 
         */
        public Builder mfaEnabledOn(String mfaEnabledOn) {
            return mfaEnabledOn(Output.of(mfaEnabledOn));
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(@Nullable Output<List<String>> mfaIgnoredApps) {
            $.mfaIgnoredApps = mfaIgnoredApps;
            return this;
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(List<String> mfaIgnoredApps) {
            return mfaIgnoredApps(Output.of(mfaIgnoredApps));
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(String... mfaIgnoredApps) {
            return mfaIgnoredApps(List.of(mfaIgnoredApps));
        }

        /**
         * @param mfaStatus (Updatable) User Opted for MFA
         * 
         * @return builder
         * 
         */
        public Builder mfaStatus(@Nullable Output<String> mfaStatus) {
            $.mfaStatus = mfaStatus;
            return this;
        }

        /**
         * @param mfaStatus (Updatable) User Opted for MFA
         * 
         * @return builder
         * 
         */
        public Builder mfaStatus(String mfaStatus) {
            return mfaStatus(Output.of(mfaStatus));
        }

        /**
         * @param preferredAuthenticationFactor (Updatable) Preferred Authentication Factor Type
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationFactor(@Nullable Output<String> preferredAuthenticationFactor) {
            $.preferredAuthenticationFactor = preferredAuthenticationFactor;
            return this;
        }

        /**
         * @param preferredAuthenticationFactor (Updatable) Preferred Authentication Factor Type
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationFactor(String preferredAuthenticationFactor) {
            return preferredAuthenticationFactor(Output.of(preferredAuthenticationFactor));
        }

        /**
         * @param preferredAuthenticationMethod (Updatable) Preferred Authentication method
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationMethod(@Nullable Output<String> preferredAuthenticationMethod) {
            $.preferredAuthenticationMethod = preferredAuthenticationMethod;
            return this;
        }

        /**
         * @param preferredAuthenticationMethod (Updatable) Preferred Authentication method
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationMethod(String preferredAuthenticationMethod) {
            return preferredAuthenticationMethod(Output.of(preferredAuthenticationMethod));
        }

        /**
         * @param preferredDevice (Updatable) User preferred device
         * 
         * @return builder
         * 
         */
        public Builder preferredDevice(@Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs> preferredDevice) {
            $.preferredDevice = preferredDevice;
            return this;
        }

        /**
         * @param preferredDevice (Updatable) User preferred device
         * 
         * @return builder
         * 
         */
        public Builder preferredDevice(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs preferredDevice) {
            return preferredDevice(Output.of(preferredDevice));
        }

        /**
         * @param preferredThirdPartyVendor (Updatable) Preferred Third party vendor name
         * 
         * @return builder
         * 
         */
        public Builder preferredThirdPartyVendor(@Nullable Output<String> preferredThirdPartyVendor) {
            $.preferredThirdPartyVendor = preferredThirdPartyVendor;
            return this;
        }

        /**
         * @param preferredThirdPartyVendor (Updatable) Preferred Third party vendor name
         * 
         * @return builder
         * 
         */
        public Builder preferredThirdPartyVendor(String preferredThirdPartyVendor) {
            return preferredThirdPartyVendor(Output.of(preferredThirdPartyVendor));
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>> trustedUserAgents) {
            $.trustedUserAgents = trustedUserAgents;
            return this;
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs> trustedUserAgents) {
            return trustedUserAgents(Output.of(trustedUserAgents));
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs... trustedUserAgents) {
            return trustedUserAgents(List.of(trustedUserAgents));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs build() {
            return $;
        }
    }

}
