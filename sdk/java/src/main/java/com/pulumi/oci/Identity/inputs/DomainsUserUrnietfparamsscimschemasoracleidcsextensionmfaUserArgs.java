// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs();

    /**
     * (Updatable) A list of bypass codes that belongs to the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="bypassCodes")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>> bypassCodes;

    /**
     * @return (Updatable) A list of bypass codes that belongs to the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>>> bypassCodes() {
        return Optional.ofNullable(this.bypassCodes);
    }

    /**
     * (Updatable) A list of devices enrolled by the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="devices")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>> devices;

    /**
     * @return (Updatable) A list of devices enrolled by the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>>> devices() {
        return Optional.ofNullable(this.devices);
    }

    /**
     * (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="loginAttempts")
    private @Nullable Output<Integer> loginAttempts;

    /**
     * @return (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }

    /**
     * (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    @Import(name="mfaEnabledOn")
    private @Nullable Output<String> mfaEnabledOn;

    /**
     * @return (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> mfaEnabledOn() {
        return Optional.ofNullable(this.mfaEnabledOn);
    }

    /**
     * (Updatable) User MFA Ignored Apps Identifiers
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="mfaIgnoredApps")
    private @Nullable Output<List<String>> mfaIgnoredApps;

    /**
     * @return (Updatable) User MFA Ignored Apps Identifiers
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<String>>> mfaIgnoredApps() {
        return Optional.ofNullable(this.mfaIgnoredApps);
    }

    /**
     * (Updatable) The user opted for MFA.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="mfaStatus")
    private @Nullable Output<String> mfaStatus;

    /**
     * @return (Updatable) The user opted for MFA.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> mfaStatus() {
        return Optional.ofNullable(this.mfaStatus);
    }

    /**
     * (Updatable) The preferred authentication factor type.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="preferredAuthenticationFactor")
    private @Nullable Output<String> preferredAuthenticationFactor;

    /**
     * @return (Updatable) The preferred authentication factor type.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> preferredAuthenticationFactor() {
        return Optional.ofNullable(this.preferredAuthenticationFactor);
    }

    /**
     * (Updatable) The preferred authentication method.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="preferredAuthenticationMethod")
    private @Nullable Output<String> preferredAuthenticationMethod;

    /**
     * @return (Updatable) The preferred authentication method.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> preferredAuthenticationMethod() {
        return Optional.ofNullable(this.preferredAuthenticationMethod);
    }

    /**
     * (Updatable) The user&#39;s preferred device.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="preferredDevice")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs> preferredDevice;

    /**
     * @return (Updatable) The user&#39;s preferred device.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs>> preferredDevice() {
        return Optional.ofNullable(this.preferredDevice);
    }

    /**
     * (Updatable) The preferred third-party vendor name.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    @Import(name="preferredThirdPartyVendor")
    private @Nullable Output<String> preferredThirdPartyVendor;

    /**
     * @return (Updatable) The preferred third-party vendor name.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> preferredThirdPartyVendor() {
        return Optional.ofNullable(this.preferredThirdPartyVendor);
    }

    /**
     * (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="trustedUserAgents")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>> trustedUserAgents;

    /**
     * @return (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>>> trustedUserAgents() {
        return Optional.ofNullable(this.trustedUserAgents);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs $) {
        this.bypassCodes = $.bypassCodes;
        this.devices = $.devices;
        this.loginAttempts = $.loginAttempts;
        this.mfaEnabledOn = $.mfaEnabledOn;
        this.mfaIgnoredApps = $.mfaIgnoredApps;
        this.mfaStatus = $.mfaStatus;
        this.preferredAuthenticationFactor = $.preferredAuthenticationFactor;
        this.preferredAuthenticationMethod = $.preferredAuthenticationMethod;
        this.preferredDevice = $.preferredDevice;
        this.preferredThirdPartyVendor = $.preferredThirdPartyVendor;
        this.trustedUserAgents = $.trustedUserAgents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes that belongs to the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>> bypassCodes) {
            $.bypassCodes = bypassCodes;
            return this;
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes that belongs to the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs> bypassCodes) {
            return bypassCodes(Output.of(bypassCodes));
        }

        /**
         * @param bypassCodes (Updatable) A list of bypass codes that belongs to the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder bypassCodes(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs... bypassCodes) {
            return bypassCodes(List.of(bypassCodes));
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder devices(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>> devices) {
            $.devices = devices;
            return this;
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder devices(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs> devices) {
            return devices(Output.of(devices));
        }

        /**
         * @param devices (Updatable) A list of devices enrolled by the user.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder devices(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs... devices) {
            return devices(List.of(devices));
        }

        /**
         * @param loginAttempts (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(@Nullable Output<Integer> loginAttempts) {
            $.loginAttempts = loginAttempts;
            return this;
        }

        /**
         * @param loginAttempts (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readOnly
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Integer loginAttempts) {
            return loginAttempts(Output.of(loginAttempts));
        }

        /**
         * @param mfaEnabledOn (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaEnabledOn(@Nullable Output<String> mfaEnabledOn) {
            $.mfaEnabledOn = mfaEnabledOn;
            return this;
        }

        /**
         * @param mfaEnabledOn (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaEnabledOn(String mfaEnabledOn) {
            return mfaEnabledOn(Output.of(mfaEnabledOn));
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(@Nullable Output<List<String>> mfaIgnoredApps) {
            $.mfaIgnoredApps = mfaIgnoredApps;
            return this;
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(List<String> mfaIgnoredApps) {
            return mfaIgnoredApps(Output.of(mfaIgnoredApps));
        }

        /**
         * @param mfaIgnoredApps (Updatable) User MFA Ignored Apps Identifiers
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaIgnoredApps(String... mfaIgnoredApps) {
            return mfaIgnoredApps(List.of(mfaIgnoredApps));
        }

        /**
         * @param mfaStatus (Updatable) The user opted for MFA.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * idcsRequiresWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaStatus(@Nullable Output<String> mfaStatus) {
            $.mfaStatus = mfaStatus;
            return this;
        }

        /**
         * @param mfaStatus (Updatable) The user opted for MFA.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readOnly
         * * idcsRequiresWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder mfaStatus(String mfaStatus) {
            return mfaStatus(Output.of(mfaStatus));
        }

        /**
         * @param preferredAuthenticationFactor (Updatable) The preferred authentication factor type.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationFactor(@Nullable Output<String> preferredAuthenticationFactor) {
            $.preferredAuthenticationFactor = preferredAuthenticationFactor;
            return this;
        }

        /**
         * @param preferredAuthenticationFactor (Updatable) The preferred authentication factor type.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationFactor(String preferredAuthenticationFactor) {
            return preferredAuthenticationFactor(Output.of(preferredAuthenticationFactor));
        }

        /**
         * @param preferredAuthenticationMethod (Updatable) The preferred authentication method.
         * 
         * **Added In:** 2009232244
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationMethod(@Nullable Output<String> preferredAuthenticationMethod) {
            $.preferredAuthenticationMethod = preferredAuthenticationMethod;
            return this;
        }

        /**
         * @param preferredAuthenticationMethod (Updatable) The preferred authentication method.
         * 
         * **Added In:** 2009232244
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredAuthenticationMethod(String preferredAuthenticationMethod) {
            return preferredAuthenticationMethod(Output.of(preferredAuthenticationMethod));
        }

        /**
         * @param preferredDevice (Updatable) The user&#39;s preferred device.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredDevice(@Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs> preferredDevice) {
            $.preferredDevice = preferredDevice;
            return this;
        }

        /**
         * @param preferredDevice (Updatable) The user&#39;s preferred device.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredDevice(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs preferredDevice) {
            return preferredDevice(Output.of(preferredDevice));
        }

        /**
         * @param preferredThirdPartyVendor (Updatable) The preferred third-party vendor name.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredThirdPartyVendor(@Nullable Output<String> preferredThirdPartyVendor) {
            $.preferredThirdPartyVendor = preferredThirdPartyVendor;
            return this;
        }

        /**
         * @param preferredThirdPartyVendor (Updatable) The preferred third-party vendor name.
         * 
         * **Added In:** 19.2.1
         * 
         * **SCIM++ Properties:**
         * * caseExact: true
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: default
         * * type: string
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder preferredThirdPartyVendor(String preferredThirdPartyVendor) {
            return preferredThirdPartyVendor(Output.of(preferredThirdPartyVendor));
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>> trustedUserAgents) {
            $.trustedUserAgents = trustedUserAgents;
            return this;
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs> trustedUserAgents) {
            return trustedUserAgents(Output.of(trustedUserAgents));
        }

        /**
         * @param trustedUserAgents (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
         * 
         * **Added In:** 18.3.6
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * multiValued: true
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder trustedUserAgents(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs... trustedUserAgents) {
            return trustedUserAgents(List.of(trustedUserAgents));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs build() {
            return $;
        }
    }

}
