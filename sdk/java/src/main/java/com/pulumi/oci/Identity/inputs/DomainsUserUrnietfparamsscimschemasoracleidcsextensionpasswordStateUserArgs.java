// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs();

    /**
     * (Updatable) Applicable Password Policy
     * 
     */
    @Import(name="applicablePasswordPolicy")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs> applicablePasswordPolicy;

    /**
     * @return (Updatable) Applicable Password Policy
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs>> applicablePasswordPolicy() {
        return Optional.ofNullable(this.applicablePasswordPolicy);
    }

    /**
     * (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
     * 
     */
    @Import(name="cantChange")
    private @Nullable Output<Boolean> cantChange;

    /**
     * @return (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
     * 
     */
    public Optional<Output<Boolean>> cantChange() {
        return Optional.ofNullable(this.cantChange);
    }

    /**
     * (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
     * 
     */
    @Import(name="cantExpire")
    private @Nullable Output<Boolean> cantExpire;

    /**
     * @return (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
     * 
     */
    public Optional<Output<Boolean>> cantExpire() {
        return Optional.ofNullable(this.cantExpire);
    }

    /**
     * (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * (Updatable) A DateTime that specifies the date and time when last failed password validation was set
     * 
     */
    @Import(name="lastFailedValidationDate")
    private @Nullable Output<String> lastFailedValidationDate;

    /**
     * @return (Updatable) A DateTime that specifies the date and time when last failed password validation was set
     * 
     */
    public Optional<Output<String>> lastFailedValidationDate() {
        return Optional.ofNullable(this.lastFailedValidationDate);
    }

    /**
     * (Updatable) A DateTime that specifies the date and time when the current password was set
     * 
     */
    @Import(name="lastSuccessfulSetDate")
    private @Nullable Output<String> lastSuccessfulSetDate;

    /**
     * @return (Updatable) A DateTime that specifies the date and time when the current password was set
     * 
     */
    public Optional<Output<String>> lastSuccessfulSetDate() {
        return Optional.ofNullable(this.lastSuccessfulSetDate);
    }

    /**
     * (Updatable) A DateTime that specifies the date and time when last successful password validation was set
     * 
     */
    @Import(name="lastSuccessfulValidationDate")
    private @Nullable Output<String> lastSuccessfulValidationDate;

    /**
     * @return (Updatable) A DateTime that specifies the date and time when last successful password validation was set
     * 
     */
    public Optional<Output<String>> lastSuccessfulValidationDate() {
        return Optional.ofNullable(this.lastSuccessfulValidationDate);
    }

    /**
     * (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
     * 
     */
    @Import(name="mustChange")
    private @Nullable Output<Boolean> mustChange;

    /**
     * @return (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
     * 
     */
    public Optional<Output<Boolean>> mustChange() {
        return Optional.ofNullable(this.mustChange);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs $) {
        this.applicablePasswordPolicy = $.applicablePasswordPolicy;
        this.cantChange = $.cantChange;
        this.cantExpire = $.cantExpire;
        this.expired = $.expired;
        this.lastFailedValidationDate = $.lastFailedValidationDate;
        this.lastSuccessfulSetDate = $.lastSuccessfulSetDate;
        this.lastSuccessfulValidationDate = $.lastSuccessfulValidationDate;
        this.mustChange = $.mustChange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicablePasswordPolicy (Updatable) Applicable Password Policy
         * 
         * @return builder
         * 
         */
        public Builder applicablePasswordPolicy(@Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs> applicablePasswordPolicy) {
            $.applicablePasswordPolicy = applicablePasswordPolicy;
            return this;
        }

        /**
         * @param applicablePasswordPolicy (Updatable) Applicable Password Policy
         * 
         * @return builder
         * 
         */
        public Builder applicablePasswordPolicy(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicyArgs applicablePasswordPolicy) {
            return applicablePasswordPolicy(Output.of(applicablePasswordPolicy));
        }

        /**
         * @param cantChange (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
         * 
         * @return builder
         * 
         */
        public Builder cantChange(@Nullable Output<Boolean> cantChange) {
            $.cantChange = cantChange;
            return this;
        }

        /**
         * @param cantChange (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
         * 
         * @return builder
         * 
         */
        public Builder cantChange(Boolean cantChange) {
            return cantChange(Output.of(cantChange));
        }

        /**
         * @param cantExpire (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
         * 
         * @return builder
         * 
         */
        public Builder cantExpire(@Nullable Output<Boolean> cantExpire) {
            $.cantExpire = cantExpire;
            return this;
        }

        /**
         * @param cantExpire (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
         * 
         * @return builder
         * 
         */
        public Builder cantExpire(Boolean cantExpire) {
            return cantExpire(Output.of(cantExpire));
        }

        /**
         * @param expired (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired (Updatable) Indicates whether user password is expired. If this value is false, password expiry will still be evaluated during user login.
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param lastFailedValidationDate (Updatable) A DateTime that specifies the date and time when last failed password validation was set
         * 
         * @return builder
         * 
         */
        public Builder lastFailedValidationDate(@Nullable Output<String> lastFailedValidationDate) {
            $.lastFailedValidationDate = lastFailedValidationDate;
            return this;
        }

        /**
         * @param lastFailedValidationDate (Updatable) A DateTime that specifies the date and time when last failed password validation was set
         * 
         * @return builder
         * 
         */
        public Builder lastFailedValidationDate(String lastFailedValidationDate) {
            return lastFailedValidationDate(Output.of(lastFailedValidationDate));
        }

        /**
         * @param lastSuccessfulSetDate (Updatable) A DateTime that specifies the date and time when the current password was set
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulSetDate(@Nullable Output<String> lastSuccessfulSetDate) {
            $.lastSuccessfulSetDate = lastSuccessfulSetDate;
            return this;
        }

        /**
         * @param lastSuccessfulSetDate (Updatable) A DateTime that specifies the date and time when the current password was set
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulSetDate(String lastSuccessfulSetDate) {
            return lastSuccessfulSetDate(Output.of(lastSuccessfulSetDate));
        }

        /**
         * @param lastSuccessfulValidationDate (Updatable) A DateTime that specifies the date and time when last successful password validation was set
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulValidationDate(@Nullable Output<String> lastSuccessfulValidationDate) {
            $.lastSuccessfulValidationDate = lastSuccessfulValidationDate;
            return this;
        }

        /**
         * @param lastSuccessfulValidationDate (Updatable) A DateTime that specifies the date and time when last successful password validation was set
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulValidationDate(String lastSuccessfulValidationDate) {
            return lastSuccessfulValidationDate(Output.of(lastSuccessfulValidationDate));
        }

        /**
         * @param mustChange (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder mustChange(@Nullable Output<Boolean> mustChange) {
            $.mustChange = mustChange;
            return this;
        }

        /**
         * @param mustChange (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
         * 
         * @return builder
         * 
         */
        public Builder mustChange(Boolean mustChange) {
            return mustChange(Output.of(mustChange));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserArgs build() {
            return $;
        }
    }

}
