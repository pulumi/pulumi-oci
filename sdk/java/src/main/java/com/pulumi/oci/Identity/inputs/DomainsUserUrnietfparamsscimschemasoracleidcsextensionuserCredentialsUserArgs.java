// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs();

    /**
     * (Updatable) A list of API keys corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="apiKeys")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs>> apiKeys;

    /**
     * @return (Updatable) A list of API keys corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs>>> apiKeys() {
        return Optional.ofNullable(this.apiKeys);
    }

    /**
     * (Updatable) A list of Auth tokens corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="authTokens")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs>> authTokens;

    /**
     * @return (Updatable) A list of Auth tokens corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs>>> authTokens() {
        return Optional.ofNullable(this.authTokens);
    }

    /**
     * (Updatable) A list of customer secret keys corresponding to user.
     * 
     * **Added In:** 2102181953
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="customerSecretKeys")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs>> customerSecretKeys;

    /**
     * @return (Updatable) A list of customer secret keys corresponding to user.
     * 
     * **Added In:** 2102181953
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs>>> customerSecretKeys() {
        return Optional.ofNullable(this.customerSecretKeys);
    }

    /**
     * (Updatable) A list of database credentials corresponding to user.
     * 
     * **Added In:** 2102181953
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="dbCredentials")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs>> dbCredentials;

    /**
     * @return (Updatable) A list of database credentials corresponding to user.
     * 
     * **Added In:** 2102181953
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs>>> dbCredentials() {
        return Optional.ofNullable(this.dbCredentials);
    }

    /**
     * (Updatable) A list of OAuth2 client credentials corresponding to a user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="oAuth2clientCredentials")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs>> oAuth2clientCredentials;

    /**
     * @return (Updatable) A list of OAuth2 client credentials corresponding to a user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs>>> oAuth2clientCredentials() {
        return Optional.ofNullable(this.oAuth2clientCredentials);
    }

    /**
     * (Updatable) A list of SMTP credentials corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    @Import(name="smtpCredentials")
    private @Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs>> smtpCredentials;

    /**
     * @return (Updatable) A list of SMTP credentials corresponding to user.
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs>>> smtpCredentials() {
        return Optional.ofNullable(this.smtpCredentials);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs $) {
        this.apiKeys = $.apiKeys;
        this.authTokens = $.authTokens;
        this.customerSecretKeys = $.customerSecretKeys;
        this.dbCredentials = $.dbCredentials;
        this.oAuth2clientCredentials = $.oAuth2clientCredentials;
        this.smtpCredentials = $.smtpCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeys (Updatable) A list of API keys corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs>> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        /**
         * @param apiKeys (Updatable) A list of API keys corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs> apiKeys) {
            return apiKeys(Output.of(apiKeys));
        }

        /**
         * @param apiKeys (Updatable) A list of API keys corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKeyArgs... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        /**
         * @param authTokens (Updatable) A list of Auth tokens corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder authTokens(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs>> authTokens) {
            $.authTokens = authTokens;
            return this;
        }

        /**
         * @param authTokens (Updatable) A list of Auth tokens corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder authTokens(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs> authTokens) {
            return authTokens(Output.of(authTokens));
        }

        /**
         * @param authTokens (Updatable) A list of Auth tokens corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder authTokens(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthTokenArgs... authTokens) {
            return authTokens(List.of(authTokens));
        }

        /**
         * @param customerSecretKeys (Updatable) A list of customer secret keys corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder customerSecretKeys(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs>> customerSecretKeys) {
            $.customerSecretKeys = customerSecretKeys;
            return this;
        }

        /**
         * @param customerSecretKeys (Updatable) A list of customer secret keys corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder customerSecretKeys(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs> customerSecretKeys) {
            return customerSecretKeys(Output.of(customerSecretKeys));
        }

        /**
         * @param customerSecretKeys (Updatable) A list of customer secret keys corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder customerSecretKeys(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKeyArgs... customerSecretKeys) {
            return customerSecretKeys(List.of(customerSecretKeys));
        }

        /**
         * @param dbCredentials (Updatable) A list of database credentials corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dbCredentials(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs>> dbCredentials) {
            $.dbCredentials = dbCredentials;
            return this;
        }

        /**
         * @param dbCredentials (Updatable) A list of database credentials corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dbCredentials(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs> dbCredentials) {
            return dbCredentials(Output.of(dbCredentials));
        }

        /**
         * @param dbCredentials (Updatable) A list of database credentials corresponding to user.
         * 
         * **Added In:** 2102181953
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder dbCredentials(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredentialArgs... dbCredentials) {
            return dbCredentials(List.of(dbCredentials));
        }

        /**
         * @param oAuth2clientCredentials (Updatable) A list of OAuth2 client credentials corresponding to a user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oAuth2clientCredentials(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs>> oAuth2clientCredentials) {
            $.oAuth2clientCredentials = oAuth2clientCredentials;
            return this;
        }

        /**
         * @param oAuth2clientCredentials (Updatable) A list of OAuth2 client credentials corresponding to a user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oAuth2clientCredentials(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs> oAuth2clientCredentials) {
            return oAuth2clientCredentials(Output.of(oAuth2clientCredentials));
        }

        /**
         * @param oAuth2clientCredentials (Updatable) A list of OAuth2 client credentials corresponding to a user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder oAuth2clientCredentials(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredentialArgs... oAuth2clientCredentials) {
            return oAuth2clientCredentials(List.of(oAuth2clientCredentials));
        }

        /**
         * @param smtpCredentials (Updatable) A list of SMTP credentials corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder smtpCredentials(@Nullable Output<List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs>> smtpCredentials) {
            $.smtpCredentials = smtpCredentials;
            return this;
        }

        /**
         * @param smtpCredentials (Updatable) A list of SMTP credentials corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder smtpCredentials(List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs> smtpCredentials) {
            return smtpCredentials(Output.of(smtpCredentials));
        }

        /**
         * @param smtpCredentials (Updatable) A list of SMTP credentials corresponding to user.
         * 
         * **Added In:** 2012271618
         * 
         * **SCIM++ Properties:**
         * * idcsCompositeKey: [value]
         * * idcsSearchable: true
         * * multiValued: true
         * * mutability: readOnly
         * * required: false
         * * returned: request
         * * type: complex
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder smtpCredentials(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredentialArgs... smtpCredentials) {
            return smtpCredentials(List.of(smtpCredentials));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserArgs build() {
            return $;
        }
    }

}
