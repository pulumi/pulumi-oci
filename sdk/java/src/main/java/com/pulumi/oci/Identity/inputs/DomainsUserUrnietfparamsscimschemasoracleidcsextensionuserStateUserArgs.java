// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs;
import com.pulumi.oci.Identity.inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs();

    /**
     * (Updatable) The last failed login date
     * 
     */
    @Import(name="lastFailedLoginDate")
    private @Nullable Output<String> lastFailedLoginDate;

    /**
     * @return (Updatable) The last failed login date
     * 
     */
    public Optional<Output<String>> lastFailedLoginDate() {
        return Optional.ofNullable(this.lastFailedLoginDate);
    }

    /**
     * (Updatable) The last successful login date
     * 
     */
    @Import(name="lastSuccessfulLoginDate")
    private @Nullable Output<String> lastSuccessfulLoginDate;

    /**
     * @return (Updatable) The last successful login date
     * 
     */
    public Optional<Output<String>> lastSuccessfulLoginDate() {
        return Optional.ofNullable(this.lastSuccessfulLoginDate);
    }

    /**
     * (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
     * 
     */
    @Import(name="locked")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs> locked;

    /**
     * @return (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    @Import(name="loginAttempts")
    private @Nullable Output<Integer> loginAttempts;

    /**
     * @return (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Optional<Output<Integer>> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }

    /**
     * (Updatable) Maximum number of concurrent sessions for a User
     * 
     */
    @Import(name="maxConcurrentSessions")
    private @Nullable Output<Integer> maxConcurrentSessions;

    /**
     * @return (Updatable) Maximum number of concurrent sessions for a User
     * 
     */
    public Optional<Output<Integer>> maxConcurrentSessions() {
        return Optional.ofNullable(this.maxConcurrentSessions);
    }

    /**
     * (Updatable) The previous successful login date
     * 
     */
    @Import(name="previousSuccessfulLoginDate")
    private @Nullable Output<String> previousSuccessfulLoginDate;

    /**
     * @return (Updatable) The previous successful login date
     * 
     */
    public Optional<Output<String>> previousSuccessfulLoginDate() {
        return Optional.ofNullable(this.previousSuccessfulLoginDate);
    }

    /**
     * (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     */
    @Import(name="recoveryAttempts")
    private @Nullable Output<Integer> recoveryAttempts;

    /**
     * @return (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Optional<Output<Integer>> recoveryAttempts() {
        return Optional.ofNullable(this.recoveryAttempts);
    }

    /**
     * (Updatable) The number of failed account recovery enrollment attempts.
     * 
     */
    @Import(name="recoveryEnrollAttempts")
    private @Nullable Output<Integer> recoveryEnrollAttempts;

    /**
     * @return (Updatable) The number of failed account recovery enrollment attempts.
     * 
     */
    public Optional<Output<Integer>> recoveryEnrollAttempts() {
        return Optional.ofNullable(this.recoveryEnrollAttempts);
    }

    /**
     * (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
     * 
     */
    @Import(name="recoveryLocked")
    private @Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs> recoveryLocked;

    /**
     * @return (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
     * 
     */
    public Optional<Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs>> recoveryLocked() {
        return Optional.ofNullable(this.recoveryLocked);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs $) {
        this.lastFailedLoginDate = $.lastFailedLoginDate;
        this.lastSuccessfulLoginDate = $.lastSuccessfulLoginDate;
        this.locked = $.locked;
        this.loginAttempts = $.loginAttempts;
        this.maxConcurrentSessions = $.maxConcurrentSessions;
        this.previousSuccessfulLoginDate = $.previousSuccessfulLoginDate;
        this.recoveryAttempts = $.recoveryAttempts;
        this.recoveryEnrollAttempts = $.recoveryEnrollAttempts;
        this.recoveryLocked = $.recoveryLocked;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lastFailedLoginDate (Updatable) The last failed login date
         * 
         * @return builder
         * 
         */
        public Builder lastFailedLoginDate(@Nullable Output<String> lastFailedLoginDate) {
            $.lastFailedLoginDate = lastFailedLoginDate;
            return this;
        }

        /**
         * @param lastFailedLoginDate (Updatable) The last failed login date
         * 
         * @return builder
         * 
         */
        public Builder lastFailedLoginDate(String lastFailedLoginDate) {
            return lastFailedLoginDate(Output.of(lastFailedLoginDate));
        }

        /**
         * @param lastSuccessfulLoginDate (Updatable) The last successful login date
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulLoginDate(@Nullable Output<String> lastSuccessfulLoginDate) {
            $.lastSuccessfulLoginDate = lastSuccessfulLoginDate;
            return this;
        }

        /**
         * @param lastSuccessfulLoginDate (Updatable) The last successful login date
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulLoginDate(String lastSuccessfulLoginDate) {
            return lastSuccessfulLoginDate(Output.of(lastSuccessfulLoginDate));
        }

        /**
         * @param locked (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
         * 
         * @return builder
         * 
         */
        public Builder locked(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param loginAttempts (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(@Nullable Output<Integer> loginAttempts) {
            $.loginAttempts = loginAttempts;
            return this;
        }

        /**
         * @param loginAttempts (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder loginAttempts(Integer loginAttempts) {
            return loginAttempts(Output.of(loginAttempts));
        }

        /**
         * @param maxConcurrentSessions (Updatable) Maximum number of concurrent sessions for a User
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentSessions(@Nullable Output<Integer> maxConcurrentSessions) {
            $.maxConcurrentSessions = maxConcurrentSessions;
            return this;
        }

        /**
         * @param maxConcurrentSessions (Updatable) Maximum number of concurrent sessions for a User
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentSessions(Integer maxConcurrentSessions) {
            return maxConcurrentSessions(Output.of(maxConcurrentSessions));
        }

        /**
         * @param previousSuccessfulLoginDate (Updatable) The previous successful login date
         * 
         * @return builder
         * 
         */
        public Builder previousSuccessfulLoginDate(@Nullable Output<String> previousSuccessfulLoginDate) {
            $.previousSuccessfulLoginDate = previousSuccessfulLoginDate;
            return this;
        }

        /**
         * @param previousSuccessfulLoginDate (Updatable) The previous successful login date
         * 
         * @return builder
         * 
         */
        public Builder previousSuccessfulLoginDate(String previousSuccessfulLoginDate) {
            return previousSuccessfulLoginDate(Output.of(previousSuccessfulLoginDate));
        }

        /**
         * @param recoveryAttempts (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAttempts(@Nullable Output<Integer> recoveryAttempts) {
            $.recoveryAttempts = recoveryAttempts;
            return this;
        }

        /**
         * @param recoveryAttempts (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAttempts(Integer recoveryAttempts) {
            return recoveryAttempts(Output.of(recoveryAttempts));
        }

        /**
         * @param recoveryEnrollAttempts (Updatable) The number of failed account recovery enrollment attempts.
         * 
         * @return builder
         * 
         */
        public Builder recoveryEnrollAttempts(@Nullable Output<Integer> recoveryEnrollAttempts) {
            $.recoveryEnrollAttempts = recoveryEnrollAttempts;
            return this;
        }

        /**
         * @param recoveryEnrollAttempts (Updatable) The number of failed account recovery enrollment attempts.
         * 
         * @return builder
         * 
         */
        public Builder recoveryEnrollAttempts(Integer recoveryEnrollAttempts) {
            return recoveryEnrollAttempts(Output.of(recoveryEnrollAttempts));
        }

        /**
         * @param recoveryLocked (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
         * 
         * @return builder
         * 
         */
        public Builder recoveryLocked(@Nullable Output<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs> recoveryLocked) {
            $.recoveryLocked = recoveryLocked;
            return this;
        }

        /**
         * @param recoveryLocked (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
         * 
         * @return builder
         * 
         */
        public Builder recoveryLocked(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLockedArgs recoveryLocked) {
            return recoveryLocked(Output.of(recoveryLocked));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserArgs build() {
            return $;
        }
    }

}
