// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs Empty = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs();

    /**
     * (Updatable) Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return (Updatable) Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * (Updatable) The date and time that the current resource was locked.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    @Import(name="lockDate")
    private @Nullable Output<String> lockDate;

    /**
     * @return (Updatable) The date and time that the current resource was locked.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<Output<String>> lockDate() {
        return Optional.ofNullable(this.lockDate);
    }

    /**
     * (Updatable) Indicates that the account is locked.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    @Import(name="on")
    private @Nullable Output<Boolean> on;

    /**
     * @return (Updatable) Indicates that the account is locked.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Output<Boolean>> on() {
        return Optional.ofNullable(this.on);
    }

    /**
     * (Updatable) Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    @Import(name="reason")
    private @Nullable Output<Integer> reason;

    /**
     * @return (Updatable) Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Output<Integer>> reason() {
        return Optional.ofNullable(this.reason);
    }

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs() {}

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs $) {
        this.expired = $.expired;
        this.lockDate = $.lockDate;
        this.on = $.on;
        this.reason = $.reason;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs $;

        public Builder() {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs();
        }

        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs defaults) {
            $ = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expired (Updatable) Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired (Updatable) Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
         * 
         * **Added In:** 20.1.3
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * required: false
         * * returned: request
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param lockDate (Updatable) The date and time that the current resource was locked.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockDate(@Nullable Output<String> lockDate) {
            $.lockDate = lockDate;
            return this;
        }

        /**
         * @param lockDate (Updatable) The date and time that the current resource was locked.
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: dateTime
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder lockDate(String lockDate) {
            return lockDate(Output.of(lockDate));
        }

        /**
         * @param on (Updatable) Indicates that the account is locked.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder on(@Nullable Output<Boolean> on) {
            $.on = on;
            return this;
        }

        /**
         * @param on (Updatable) Indicates that the account is locked.
         * 
         * **SCIM++ Properties:**
         * * caseExact: false
         * * idcsSearchable: true
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: boolean
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder on(Boolean on) {
            return on(Output.of(on));
        }

        /**
         * @param reason (Updatable) Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<Integer> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason (Updatable) Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
         * 
         * **SCIM++ Properties:**
         * * idcsSearchable: false
         * * multiValued: false
         * * mutability: readWrite
         * * idcsRequiresWriteForAccessFlows: true
         * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
         * * required: false
         * * returned: default
         * * type: integer
         * * uniqueness: none
         * 
         * @return builder
         * 
         */
        public Builder reason(Integer reason) {
            return reason(Output.of(reason));
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLockedArgs build() {
            return $;
        }
    }

}
