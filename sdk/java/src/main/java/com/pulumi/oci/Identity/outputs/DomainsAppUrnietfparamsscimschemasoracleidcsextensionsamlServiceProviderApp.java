// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute;
import com.pulumi.oci.Identity.outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute;
import com.pulumi.oci.Identity.outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    /**
     * @return (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String assertionConsumerUrl;
    /**
     * @return (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean encryptAssertion;
    /**
     * @return (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String encryptionAlgorithm;
    /**
     * @return (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String encryptionCertificate;
    /**
     * @return (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsDefaultValue: SAML2.0
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String federationProtocol;
    /**
     * @return (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
    /**
     * @return (Updatable) Hok Assertion Consumer Service Url
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String hokAcsUrl;
    /**
     * @return (Updatable) If enabled, then the SAML Service supports Hok for this App.
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean hokRequired;
    /**
     * @return (Updatable) If true, then the signing certificate is included in the signature.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean includeSigningCertInSignature;
    /**
     * @return (Updatable) This attribute indicates the key encryption algorithm.
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String keyEncryptionAlgorithm;
    /**
     * @return (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     * **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastNotificationSentTime;
    /**
     * @return (Updatable) This attribute represents the HTTP binding that would be used while logout.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String logoutBinding;
    /**
     * @return (Updatable) If true, then the SAML Service supports logout for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean logoutEnabled;
    /**
     * @return (Updatable) The URL to which the partner sends the logout request.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String logoutRequestUrl;
    /**
     * @return (Updatable) The URL to which the partner sends the logout response.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String logoutResponseUrl;
    /**
     * @return (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String metadata;
    /**
     * @return (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String nameIdFormat;
    /**
     * @return (Updatable) **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
     * 
     */
    private @Nullable String nameIdUserstoreAttribute;
    /**
     * @return (Updatable) Use to construct the outgoing SAML attributes
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
    /**
     * @return (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String partnerProviderId;
    /**
     * @return (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **Added In:** 2202230830
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String partnerProviderPattern;
    /**
     * @return (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String signResponseOrAssertion;
    /**
     * @return (Updatable) This attribute represents the algorithm used to hash the signature.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String signatureHashAlgorithm;
    /**
     * @return (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String signingCertificate;
    /**
     * @return (Updatable) This attribute represents the Succinct ID.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    private @Nullable String succinctId;
    /**
     * @return (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String tenantProviderId;
    /**
     * @return (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;

    private DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp() {}
    /**
     * @return (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> assertionConsumerUrl() {
        return Optional.ofNullable(this.assertionConsumerUrl);
    }
    /**
     * @return (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> encryptAssertion() {
        return Optional.ofNullable(this.encryptAssertion);
    }
    /**
     * @return (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> encryptionAlgorithm() {
        return Optional.ofNullable(this.encryptionAlgorithm);
    }
    /**
     * @return (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> encryptionCertificate() {
        return Optional.ofNullable(this.encryptionCertificate);
    }
    /**
     * @return (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsDefaultValue: SAML2.0
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> federationProtocol() {
        return Optional.ofNullable(this.federationProtocol);
    }
    /**
     * @return (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes() {
        return this.groupAssertionAttributes == null ? List.of() : this.groupAssertionAttributes;
    }
    /**
     * @return (Updatable) Hok Assertion Consumer Service Url
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> hokAcsUrl() {
        return Optional.ofNullable(this.hokAcsUrl);
    }
    /**
     * @return (Updatable) If enabled, then the SAML Service supports Hok for this App.
     * 
     * **Added In:** 2101262133
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> hokRequired() {
        return Optional.ofNullable(this.hokRequired);
    }
    /**
     * @return (Updatable) If true, then the signing certificate is included in the signature.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> includeSigningCertInSignature() {
        return Optional.ofNullable(this.includeSigningCertInSignature);
    }
    /**
     * @return (Updatable) This attribute indicates the key encryption algorithm.
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> keyEncryptionAlgorithm() {
        return Optional.ofNullable(this.keyEncryptionAlgorithm);
    }
    /**
     * @return (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     * **Added In:** 2302092332
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastNotificationSentTime() {
        return Optional.ofNullable(this.lastNotificationSentTime);
    }
    /**
     * @return (Updatable) This attribute represents the HTTP binding that would be used while logout.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> logoutBinding() {
        return Optional.ofNullable(this.logoutBinding);
    }
    /**
     * @return (Updatable) If true, then the SAML Service supports logout for this App.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> logoutEnabled() {
        return Optional.ofNullable(this.logoutEnabled);
    }
    /**
     * @return (Updatable) The URL to which the partner sends the logout request.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> logoutRequestUrl() {
        return Optional.ofNullable(this.logoutRequestUrl);
    }
    /**
     * @return (Updatable) The URL to which the partner sends the logout response.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> logoutResponseUrl() {
        return Optional.ofNullable(this.logoutResponseUrl);
    }
    /**
     * @return (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> nameIdFormat() {
        return Optional.ofNullable(this.nameIdFormat);
    }
    /**
     * @return (Updatable) **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
     * 
     */
    public Optional<String> nameIdUserstoreAttribute() {
        return Optional.ofNullable(this.nameIdUserstoreAttribute);
    }
    /**
     * @return (Updatable) Use to construct the outgoing SAML attributes
     * 
     * **Added In:** 18.2.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes() {
        return this.outboundAssertionAttributes == null ? List.of() : this.outboundAssertionAttributes;
    }
    /**
     * @return (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> partnerProviderId() {
        return Optional.ofNullable(this.partnerProviderId);
    }
    /**
     * @return (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     * **Added In:** 2202230830
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> partnerProviderPattern() {
        return Optional.ofNullable(this.partnerProviderPattern);
    }
    /**
     * @return (Updatable) Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> signResponseOrAssertion() {
        return Optional.ofNullable(this.signResponseOrAssertion);
    }
    /**
     * @return (Updatable) This attribute represents the algorithm used to hash the signature.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> signatureHashAlgorithm() {
        return Optional.ofNullable(this.signatureHashAlgorithm);
    }
    /**
     * @return (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> signingCertificate() {
        return Optional.ofNullable(this.signingCertificate);
    }
    /**
     * @return (Updatable) This attribute represents the Succinct ID.
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    public Optional<String> succinctId() {
        return Optional.ofNullable(this.succinctId);
    }
    /**
     * @return (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> tenantProviderId() {
        return Optional.ofNullable(this.tenantProviderId);
    }
    /**
     * @return (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     * **Deprecated Since: 18.2.2**
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [name]
     * * idcsSearchable: false
     * * idcsValuePersistedInOtherAttribute: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes() {
        return this.userAssertionAttributes == null ? List.of() : this.userAssertionAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assertionConsumerUrl;
        private @Nullable Boolean encryptAssertion;
        private @Nullable String encryptionAlgorithm;
        private @Nullable String encryptionCertificate;
        private @Nullable String federationProtocol;
        private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
        private @Nullable String hokAcsUrl;
        private @Nullable Boolean hokRequired;
        private @Nullable Boolean includeSigningCertInSignature;
        private @Nullable String keyEncryptionAlgorithm;
        private @Nullable String lastNotificationSentTime;
        private @Nullable String logoutBinding;
        private @Nullable Boolean logoutEnabled;
        private @Nullable String logoutRequestUrl;
        private @Nullable String logoutResponseUrl;
        private @Nullable String metadata;
        private @Nullable String nameIdFormat;
        private @Nullable String nameIdUserstoreAttribute;
        private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
        private @Nullable String partnerProviderId;
        private @Nullable String partnerProviderPattern;
        private @Nullable String signResponseOrAssertion;
        private @Nullable String signatureHashAlgorithm;
        private @Nullable String signingCertificate;
        private @Nullable String succinctId;
        private @Nullable String tenantProviderId;
        private @Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;
        public Builder() {}
        public Builder(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionConsumerUrl = defaults.assertionConsumerUrl;
    	      this.encryptAssertion = defaults.encryptAssertion;
    	      this.encryptionAlgorithm = defaults.encryptionAlgorithm;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.federationProtocol = defaults.federationProtocol;
    	      this.groupAssertionAttributes = defaults.groupAssertionAttributes;
    	      this.hokAcsUrl = defaults.hokAcsUrl;
    	      this.hokRequired = defaults.hokRequired;
    	      this.includeSigningCertInSignature = defaults.includeSigningCertInSignature;
    	      this.keyEncryptionAlgorithm = defaults.keyEncryptionAlgorithm;
    	      this.lastNotificationSentTime = defaults.lastNotificationSentTime;
    	      this.logoutBinding = defaults.logoutBinding;
    	      this.logoutEnabled = defaults.logoutEnabled;
    	      this.logoutRequestUrl = defaults.logoutRequestUrl;
    	      this.logoutResponseUrl = defaults.logoutResponseUrl;
    	      this.metadata = defaults.metadata;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.nameIdUserstoreAttribute = defaults.nameIdUserstoreAttribute;
    	      this.outboundAssertionAttributes = defaults.outboundAssertionAttributes;
    	      this.partnerProviderId = defaults.partnerProviderId;
    	      this.partnerProviderPattern = defaults.partnerProviderPattern;
    	      this.signResponseOrAssertion = defaults.signResponseOrAssertion;
    	      this.signatureHashAlgorithm = defaults.signatureHashAlgorithm;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.succinctId = defaults.succinctId;
    	      this.tenantProviderId = defaults.tenantProviderId;
    	      this.userAssertionAttributes = defaults.userAssertionAttributes;
        }

        @CustomType.Setter
        public Builder assertionConsumerUrl(@Nullable String assertionConsumerUrl) {
            this.assertionConsumerUrl = assertionConsumerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder encryptAssertion(@Nullable Boolean encryptAssertion) {
            this.encryptAssertion = encryptAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionAlgorithm(@Nullable String encryptionAlgorithm) {
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(@Nullable String encryptionCertificate) {
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder federationProtocol(@Nullable String federationProtocol) {
            this.federationProtocol = federationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder groupAssertionAttributes(@Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes) {
            this.groupAssertionAttributes = groupAssertionAttributes;
            return this;
        }
        public Builder groupAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute... groupAssertionAttributes) {
            return groupAssertionAttributes(List.of(groupAssertionAttributes));
        }
        @CustomType.Setter
        public Builder hokAcsUrl(@Nullable String hokAcsUrl) {
            this.hokAcsUrl = hokAcsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder hokRequired(@Nullable Boolean hokRequired) {
            this.hokRequired = hokRequired;
            return this;
        }
        @CustomType.Setter
        public Builder includeSigningCertInSignature(@Nullable Boolean includeSigningCertInSignature) {
            this.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }
        @CustomType.Setter
        public Builder keyEncryptionAlgorithm(@Nullable String keyEncryptionAlgorithm) {
            this.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder lastNotificationSentTime(@Nullable String lastNotificationSentTime) {
            this.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutBinding(@Nullable String logoutBinding) {
            this.logoutBinding = logoutBinding;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEnabled(@Nullable Boolean logoutEnabled) {
            this.logoutEnabled = logoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logoutRequestUrl(@Nullable String logoutRequestUrl) {
            this.logoutRequestUrl = logoutRequestUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logoutResponseUrl(@Nullable String logoutResponseUrl) {
            this.logoutResponseUrl = logoutResponseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable String metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdFormat(@Nullable String nameIdFormat) {
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdUserstoreAttribute(@Nullable String nameIdUserstoreAttribute) {
            this.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder outboundAssertionAttributes(@Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes) {
            this.outboundAssertionAttributes = outboundAssertionAttributes;
            return this;
        }
        public Builder outboundAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute... outboundAssertionAttributes) {
            return outboundAssertionAttributes(List.of(outboundAssertionAttributes));
        }
        @CustomType.Setter
        public Builder partnerProviderId(@Nullable String partnerProviderId) {
            this.partnerProviderId = partnerProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder partnerProviderPattern(@Nullable String partnerProviderPattern) {
            this.partnerProviderPattern = partnerProviderPattern;
            return this;
        }
        @CustomType.Setter
        public Builder signResponseOrAssertion(@Nullable String signResponseOrAssertion) {
            this.signResponseOrAssertion = signResponseOrAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder signatureHashAlgorithm(@Nullable String signatureHashAlgorithm) {
            this.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(@Nullable String signingCertificate) {
            this.signingCertificate = signingCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder succinctId(@Nullable String succinctId) {
            this.succinctId = succinctId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantProviderId(@Nullable String tenantProviderId) {
            this.tenantProviderId = tenantProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssertionAttributes(@Nullable List<DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes) {
            this.userAssertionAttributes = userAssertionAttributes;
            return this;
        }
        public Builder userAssertionAttributes(DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute... userAssertionAttributes) {
            return userAssertionAttributes(List.of(userAssertionAttributes));
        }
        public DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp build() {
            final var _resultValue = new DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp();
            _resultValue.assertionConsumerUrl = assertionConsumerUrl;
            _resultValue.encryptAssertion = encryptAssertion;
            _resultValue.encryptionAlgorithm = encryptionAlgorithm;
            _resultValue.encryptionCertificate = encryptionCertificate;
            _resultValue.federationProtocol = federationProtocol;
            _resultValue.groupAssertionAttributes = groupAssertionAttributes;
            _resultValue.hokAcsUrl = hokAcsUrl;
            _resultValue.hokRequired = hokRequired;
            _resultValue.includeSigningCertInSignature = includeSigningCertInSignature;
            _resultValue.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            _resultValue.lastNotificationSentTime = lastNotificationSentTime;
            _resultValue.logoutBinding = logoutBinding;
            _resultValue.logoutEnabled = logoutEnabled;
            _resultValue.logoutRequestUrl = logoutRequestUrl;
            _resultValue.logoutResponseUrl = logoutResponseUrl;
            _resultValue.metadata = metadata;
            _resultValue.nameIdFormat = nameIdFormat;
            _resultValue.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            _resultValue.outboundAssertionAttributes = outboundAssertionAttributes;
            _resultValue.partnerProviderId = partnerProviderId;
            _resultValue.partnerProviderPattern = partnerProviderPattern;
            _resultValue.signResponseOrAssertion = signResponseOrAssertion;
            _resultValue.signatureHashAlgorithm = signatureHashAlgorithm;
            _resultValue.signingCertificate = signingCertificate;
            _resultValue.succinctId = succinctId;
            _resultValue.tenantProviderId = tenantProviderId;
            _resultValue.userAssertionAttributes = userAssertionAttributes;
            return _resultValue;
        }
    }
}
