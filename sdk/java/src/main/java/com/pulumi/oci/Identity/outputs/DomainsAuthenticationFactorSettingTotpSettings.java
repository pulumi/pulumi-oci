// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DomainsAuthenticationFactorSettingTotpSettings {
    /**
     * @return (Updatable) The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
     * 
     * **Added In:** 18.1.2
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 60
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer emailOtpValidityDurationInMins;
    /**
     * @return (Updatable) Exact length of the email one-time passcode.
     * 
     * **Added In:** 18.1.2
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer emailPasscodeLength;
    /**
     * @return (Updatable) The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String hashingAlgorithm;
    /**
     * @return (Updatable) The period of time (in seconds) that a JSON Web Token (JWT) is valid
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 99999
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer jwtValidityDurationInSecs;
    /**
     * @return (Updatable) The duration of time (in days) after which the shared secret has to be refreshed
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 999
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer keyRefreshIntervalInDays;
    /**
     * @return (Updatable) Exact length of the One-Time Passcode that the system should generate
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer passcodeLength;
    /**
     * @return (Updatable) The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 60
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer smsOtpValidityDurationInMins;
    /**
     * @return (Updatable) Exact length of the Short Message Service (SMS) One-Time Passcode
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer smsPasscodeLength;
    /**
     * @return (Updatable) Time (in secs) to be used as the time step
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 300
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer timeStepInSecs;
    /**
     * @return (Updatable) The tolerance/step-size that the system should use when validating a One-Time Passcode
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 3
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer timeStepTolerance;

    private DomainsAuthenticationFactorSettingTotpSettings() {}
    /**
     * @return (Updatable) The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
     * 
     * **Added In:** 18.1.2
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 60
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer emailOtpValidityDurationInMins() {
        return this.emailOtpValidityDurationInMins;
    }
    /**
     * @return (Updatable) Exact length of the email one-time passcode.
     * 
     * **Added In:** 18.1.2
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer emailPasscodeLength() {
        return this.emailPasscodeLength;
    }
    /**
     * @return (Updatable) The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String hashingAlgorithm() {
        return this.hashingAlgorithm;
    }
    /**
     * @return (Updatable) The period of time (in seconds) that a JSON Web Token (JWT) is valid
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 99999
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer jwtValidityDurationInSecs() {
        return this.jwtValidityDurationInSecs;
    }
    /**
     * @return (Updatable) The duration of time (in days) after which the shared secret has to be refreshed
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 999
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer keyRefreshIntervalInDays() {
        return this.keyRefreshIntervalInDays;
    }
    /**
     * @return (Updatable) Exact length of the One-Time Passcode that the system should generate
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer passcodeLength() {
        return this.passcodeLength;
    }
    /**
     * @return (Updatable) The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 60
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer smsOtpValidityDurationInMins() {
        return this.smsOtpValidityDurationInMins;
    }
    /**
     * @return (Updatable) Exact length of the Short Message Service (SMS) One-Time Passcode
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 10
     * * idcsMinValue: 4
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer smsPasscodeLength() {
        return this.smsPasscodeLength;
    }
    /**
     * @return (Updatable) Time (in secs) to be used as the time step
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 300
     * * idcsMinValue: 30
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer timeStepInSecs() {
        return this.timeStepInSecs;
    }
    /**
     * @return (Updatable) The tolerance/step-size that the system should use when validating a One-Time Passcode
     * 
     * **SCIM++ Properties:**
     * * idcsMaxValue: 3
     * * idcsMinValue: 2
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer timeStepTolerance() {
        return this.timeStepTolerance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsAuthenticationFactorSettingTotpSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer emailOtpValidityDurationInMins;
        private Integer emailPasscodeLength;
        private String hashingAlgorithm;
        private Integer jwtValidityDurationInSecs;
        private Integer keyRefreshIntervalInDays;
        private Integer passcodeLength;
        private Integer smsOtpValidityDurationInMins;
        private Integer smsPasscodeLength;
        private Integer timeStepInSecs;
        private Integer timeStepTolerance;
        public Builder() {}
        public Builder(DomainsAuthenticationFactorSettingTotpSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emailOtpValidityDurationInMins = defaults.emailOtpValidityDurationInMins;
    	      this.emailPasscodeLength = defaults.emailPasscodeLength;
    	      this.hashingAlgorithm = defaults.hashingAlgorithm;
    	      this.jwtValidityDurationInSecs = defaults.jwtValidityDurationInSecs;
    	      this.keyRefreshIntervalInDays = defaults.keyRefreshIntervalInDays;
    	      this.passcodeLength = defaults.passcodeLength;
    	      this.smsOtpValidityDurationInMins = defaults.smsOtpValidityDurationInMins;
    	      this.smsPasscodeLength = defaults.smsPasscodeLength;
    	      this.timeStepInSecs = defaults.timeStepInSecs;
    	      this.timeStepTolerance = defaults.timeStepTolerance;
        }

        @CustomType.Setter
        public Builder emailOtpValidityDurationInMins(Integer emailOtpValidityDurationInMins) {
            this.emailOtpValidityDurationInMins = Objects.requireNonNull(emailOtpValidityDurationInMins);
            return this;
        }
        @CustomType.Setter
        public Builder emailPasscodeLength(Integer emailPasscodeLength) {
            this.emailPasscodeLength = Objects.requireNonNull(emailPasscodeLength);
            return this;
        }
        @CustomType.Setter
        public Builder hashingAlgorithm(String hashingAlgorithm) {
            this.hashingAlgorithm = Objects.requireNonNull(hashingAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder jwtValidityDurationInSecs(Integer jwtValidityDurationInSecs) {
            this.jwtValidityDurationInSecs = Objects.requireNonNull(jwtValidityDurationInSecs);
            return this;
        }
        @CustomType.Setter
        public Builder keyRefreshIntervalInDays(Integer keyRefreshIntervalInDays) {
            this.keyRefreshIntervalInDays = Objects.requireNonNull(keyRefreshIntervalInDays);
            return this;
        }
        @CustomType.Setter
        public Builder passcodeLength(Integer passcodeLength) {
            this.passcodeLength = Objects.requireNonNull(passcodeLength);
            return this;
        }
        @CustomType.Setter
        public Builder smsOtpValidityDurationInMins(Integer smsOtpValidityDurationInMins) {
            this.smsOtpValidityDurationInMins = Objects.requireNonNull(smsOtpValidityDurationInMins);
            return this;
        }
        @CustomType.Setter
        public Builder smsPasscodeLength(Integer smsPasscodeLength) {
            this.smsPasscodeLength = Objects.requireNonNull(smsPasscodeLength);
            return this;
        }
        @CustomType.Setter
        public Builder timeStepInSecs(Integer timeStepInSecs) {
            this.timeStepInSecs = Objects.requireNonNull(timeStepInSecs);
            return this;
        }
        @CustomType.Setter
        public Builder timeStepTolerance(Integer timeStepTolerance) {
            this.timeStepTolerance = Objects.requireNonNull(timeStepTolerance);
            return this;
        }
        public DomainsAuthenticationFactorSettingTotpSettings build() {
            final var o = new DomainsAuthenticationFactorSettingTotpSettings();
            o.emailOtpValidityDurationInMins = emailOtpValidityDurationInMins;
            o.emailPasscodeLength = emailPasscodeLength;
            o.hashingAlgorithm = hashingAlgorithm;
            o.jwtValidityDurationInSecs = jwtValidityDurationInSecs;
            o.keyRefreshIntervalInDays = keyRefreshIntervalInDays;
            o.passcodeLength = passcodeLength;
            o.smsOtpValidityDurationInMins = smsOtpValidityDurationInMins;
            o.smsPasscodeLength = smsPasscodeLength;
            o.timeStepInSecs = timeStepInSecs;
            o.timeStepTolerance = timeStepTolerance;
            return o;
        }
    }
}
