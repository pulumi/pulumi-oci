// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings {
    /**
     * @return (Updatable) Attribute used to define the type of attestation required.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String attestation;
    /**
     * @return (Updatable) Attribute used to define authenticator selection attachment.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String authenticatorSelectionAttachment;
    /**
     * @return (Updatable) Flag used to indicate authenticator selection is required or not
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private Boolean authenticatorSelectionRequireResidentKey;
    /**
     * @return (Updatable) Attribute used to define authenticator selection resident key requirement.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String authenticatorSelectionResidentKey;
    /**
     * @return (Updatable) Attribute used to define authenticator selection verification.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String authenticatorSelectionUserVerification;
    /**
     * @return (Updatable) Number of domain levels Oracle Identity Cloud Service should use for origin comparision
     * 
     * **Added In:** 2109020413
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsMaxValue: 2
     * * idcsMinValue: 0
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer domainValidationLevel;
    /**
     * @return (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private Boolean excludeCredentials;
    /**
     * @return (Updatable) List of server supported public key algorithms
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private List<String> publicKeyTypes;
    /**
     * @return (Updatable) Timeout for the fido authentication to complete
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsMaxValue: 600000
     * * idcsMinValue: 10000
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private Integer timeout;

    private DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings() {}
    /**
     * @return (Updatable) Attribute used to define the type of attestation required.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String attestation() {
        return this.attestation;
    }
    /**
     * @return (Updatable) Attribute used to define authenticator selection attachment.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String authenticatorSelectionAttachment() {
        return this.authenticatorSelectionAttachment;
    }
    /**
     * @return (Updatable) Flag used to indicate authenticator selection is required or not
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Boolean authenticatorSelectionRequireResidentKey() {
        return this.authenticatorSelectionRequireResidentKey;
    }
    /**
     * @return (Updatable) Attribute used to define authenticator selection resident key requirement.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String authenticatorSelectionResidentKey() {
        return this.authenticatorSelectionResidentKey;
    }
    /**
     * @return (Updatable) Attribute used to define authenticator selection verification.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String authenticatorSelectionUserVerification() {
        return this.authenticatorSelectionUserVerification;
    }
    /**
     * @return (Updatable) Number of domain levels Oracle Identity Cloud Service should use for origin comparision
     * 
     * **Added In:** 2109020413
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsMaxValue: 2
     * * idcsMinValue: 0
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> domainValidationLevel() {
        return Optional.ofNullable(this.domainValidationLevel);
    }
    /**
     * @return (Updatable) Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Boolean excludeCredentials() {
        return this.excludeCredentials;
    }
    /**
     * @return (Updatable) List of server supported public key algorithms
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: true
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public List<String> publicKeyTypes() {
        return this.publicKeyTypes;
    }
    /**
     * @return (Updatable) Timeout for the fido authentication to complete
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * idcsMaxValue: 600000
     * * idcsMinValue: 10000
     * * required: true
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attestation;
        private String authenticatorSelectionAttachment;
        private Boolean authenticatorSelectionRequireResidentKey;
        private String authenticatorSelectionResidentKey;
        private String authenticatorSelectionUserVerification;
        private @Nullable Integer domainValidationLevel;
        private Boolean excludeCredentials;
        private List<String> publicKeyTypes;
        private Integer timeout;
        public Builder() {}
        public Builder(DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.authenticatorSelectionAttachment = defaults.authenticatorSelectionAttachment;
    	      this.authenticatorSelectionRequireResidentKey = defaults.authenticatorSelectionRequireResidentKey;
    	      this.authenticatorSelectionResidentKey = defaults.authenticatorSelectionResidentKey;
    	      this.authenticatorSelectionUserVerification = defaults.authenticatorSelectionUserVerification;
    	      this.domainValidationLevel = defaults.domainValidationLevel;
    	      this.excludeCredentials = defaults.excludeCredentials;
    	      this.publicKeyTypes = defaults.publicKeyTypes;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder attestation(String attestation) {
            if (attestation == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "attestation");
            }
            this.attestation = attestation;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionAttachment(String authenticatorSelectionAttachment) {
            if (authenticatorSelectionAttachment == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "authenticatorSelectionAttachment");
            }
            this.authenticatorSelectionAttachment = authenticatorSelectionAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionRequireResidentKey(Boolean authenticatorSelectionRequireResidentKey) {
            if (authenticatorSelectionRequireResidentKey == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "authenticatorSelectionRequireResidentKey");
            }
            this.authenticatorSelectionRequireResidentKey = authenticatorSelectionRequireResidentKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionResidentKey(String authenticatorSelectionResidentKey) {
            if (authenticatorSelectionResidentKey == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "authenticatorSelectionResidentKey");
            }
            this.authenticatorSelectionResidentKey = authenticatorSelectionResidentKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionUserVerification(String authenticatorSelectionUserVerification) {
            if (authenticatorSelectionUserVerification == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "authenticatorSelectionUserVerification");
            }
            this.authenticatorSelectionUserVerification = authenticatorSelectionUserVerification;
            return this;
        }
        @CustomType.Setter
        public Builder domainValidationLevel(@Nullable Integer domainValidationLevel) {

            this.domainValidationLevel = domainValidationLevel;
            return this;
        }
        @CustomType.Setter
        public Builder excludeCredentials(Boolean excludeCredentials) {
            if (excludeCredentials == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "excludeCredentials");
            }
            this.excludeCredentials = excludeCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyTypes(List<String> publicKeyTypes) {
            if (publicKeyTypes == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "publicKeyTypes");
            }
            this.publicKeyTypes = publicKeyTypes;
            return this;
        }
        public Builder publicKeyTypes(String... publicKeyTypes) {
            return publicKeyTypes(List.of(publicKeyTypes));
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        public DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings build() {
            final var _resultValue = new DomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings();
            _resultValue.attestation = attestation;
            _resultValue.authenticatorSelectionAttachment = authenticatorSelectionAttachment;
            _resultValue.authenticatorSelectionRequireResidentKey = authenticatorSelectionRequireResidentKey;
            _resultValue.authenticatorSelectionResidentKey = authenticatorSelectionResidentKey;
            _resultValue.authenticatorSelectionUserVerification = authenticatorSelectionUserVerification;
            _resultValue.domainValidationLevel = domainValidationLevel;
            _resultValue.excludeCredentials = excludeCredentials;
            _resultValue.publicKeyTypes = publicKeyTypes;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
