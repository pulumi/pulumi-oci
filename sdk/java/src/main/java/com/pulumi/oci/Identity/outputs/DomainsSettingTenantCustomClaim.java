// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DomainsSettingTenantCustomClaim {
    /**
     * @return (Updatable) Indicates if the custom claim is associated with all scopes
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private Boolean allScopes;
    /**
     * @return (Updatable) Indicates if the custom claim is an expression
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private Boolean expression;
    /**
     * @return (Updatable) Indicates under what scenario the custom claim will be return
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String mode;
    /**
     * @return (Updatable) Custom claim name
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    private String name;
    /**
     * @return (Updatable) Scopes associated with a specific custom claim
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return (Updatable) Indicates what type of token the custom claim will be embedded
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String tokenType;
    /**
     * @return (Updatable) Custom claim value
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String value;

    private DomainsSettingTenantCustomClaim() {}
    /**
     * @return (Updatable) Indicates if the custom claim is associated with all scopes
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Boolean allScopes() {
        return this.allScopes;
    }
    /**
     * @return (Updatable) Indicates if the custom claim is an expression
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Boolean expression() {
        return this.expression;
    }
    /**
     * @return (Updatable) Indicates under what scenario the custom claim will be return
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return (Updatable) Custom claim name
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: server
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) Scopes associated with a specific custom claim
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return (Updatable) Indicates what type of token the custom claim will be embedded
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String tokenType() {
        return this.tokenType;
    }
    /**
     * @return (Updatable) Custom claim value
     * 
     * **Added In:** 18.4.2
     * 
     * **SCIM++ Properties:**
     * * multiValued: false
     * * mutability: readWrite
     * * required: true
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsSettingTenantCustomClaim defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allScopes;
        private Boolean expression;
        private String mode;
        private String name;
        private @Nullable List<String> scopes;
        private String tokenType;
        private String value;
        public Builder() {}
        public Builder(DomainsSettingTenantCustomClaim defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allScopes = defaults.allScopes;
    	      this.expression = defaults.expression;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.scopes = defaults.scopes;
    	      this.tokenType = defaults.tokenType;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder allScopes(Boolean allScopes) {
            this.allScopes = Objects.requireNonNull(allScopes);
            return this;
        }
        @CustomType.Setter
        public Builder expression(Boolean expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder tokenType(String tokenType) {
            this.tokenType = Objects.requireNonNull(tokenType);
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public DomainsSettingTenantCustomClaim build() {
            final var o = new DomainsSettingTenantCustomClaim();
            o.allScopes = allScopes;
            o.expression = expression;
            o.mode = mode;
            o.name = name;
            o.scopes = scopes;
            o.tokenType = tokenType;
            o.value = value;
            return o;
        }
    }
}
