// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserAddress {
    /**
     * @return (Updatable) The country name component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;countries&#34; and attrValues.value eq &#34;upper($(country))&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String country;
    /**
     * @return (Updatable) Full name
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String formatted;
    /**
     * @return (Updatable) The city or locality component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String locality;
    /**
     * @return (Updatable) The zipcode or postal code component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String postalCode;
    /**
     * @return (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean primary;
    /**
     * @return (Updatable) The state or region component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String region;
    /**
     * @return (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String streetAddress;
    /**
     * @return (Updatable) A label indicating the attribute&#39;s function.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private String type;

    private DomainsUserAddress() {}
    /**
     * @return (Updatable) The country name component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCanonicalValueSourceFilter: attrName eq &#34;countries&#34; and attrValues.value eq &#34;upper($(country))&#34;
     * * idcsCanonicalValueSourceResourceType: AllowedValue
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> country() {
        return Optional.ofNullable(this.country);
    }
    /**
     * @return (Updatable) Full name
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> formatted() {
        return Optional.ofNullable(this.formatted);
    }
    /**
     * @return (Updatable) The city or locality component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> locality() {
        return Optional.ofNullable(this.locality);
    }
    /**
     * @return (Updatable) The zipcode or postal code component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }
    /**
     * @return (Updatable) A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> primary() {
        return Optional.ofNullable(this.primary);
    }
    /**
     * @return (Updatable) The state or region component.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return (Updatable) The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> streetAddress() {
        return Optional.ofNullable(this.streetAddress);
    }
    /**
     * @return (Updatable) A label indicating the attribute&#39;s function.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String country;
        private @Nullable String formatted;
        private @Nullable String locality;
        private @Nullable String postalCode;
        private @Nullable Boolean primary;
        private @Nullable String region;
        private @Nullable String streetAddress;
        private String type;
        public Builder() {}
        public Builder(DomainsUserAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.country = defaults.country;
    	      this.formatted = defaults.formatted;
    	      this.locality = defaults.locality;
    	      this.postalCode = defaults.postalCode;
    	      this.primary = defaults.primary;
    	      this.region = defaults.region;
    	      this.streetAddress = defaults.streetAddress;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder country(@Nullable String country) {

            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder formatted(@Nullable String formatted) {

            this.formatted = formatted;
            return this;
        }
        @CustomType.Setter
        public Builder locality(@Nullable String locality) {

            this.locality = locality;
            return this;
        }
        @CustomType.Setter
        public Builder postalCode(@Nullable String postalCode) {

            this.postalCode = postalCode;
            return this;
        }
        @CustomType.Setter
        public Builder primary(@Nullable Boolean primary) {

            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder streetAddress(@Nullable String streetAddress) {

            this.streetAddress = streetAddress;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("DomainsUserAddress", "type");
            }
            this.type = type;
            return this;
        }
        public DomainsUserAddress build() {
            final var _resultValue = new DomainsUserAddress();
            _resultValue.country = country;
            _resultValue.formatted = formatted;
            _resultValue.locality = locality;
            _resultValue.postalCode = postalCode;
            _resultValue.primary = primary;
            _resultValue.region = region;
            _resultValue.streetAddress = streetAddress;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
