// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserUrnietfparamsscimschemasextensionenterprise20user {
    /**
     * @return (Updatable) Identifies the name of a cost center.
     * 
     */
    private @Nullable String costCenter;
    /**
     * @return (Updatable) Identifies the name of a department.
     * 
     */
    private @Nullable String department;
    /**
     * @return (Updatable) Identifies the name of a division.
     * 
     */
    private @Nullable String division;
    /**
     * @return (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
     * 
     */
    private @Nullable String employeeNumber;
    /**
     * @return (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
     * 
     */
    private @Nullable DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager manager;
    /**
     * @return (Updatable) Identifies the name of an organization.
     * 
     */
    private @Nullable String organization;

    private DomainsUserUrnietfparamsscimschemasextensionenterprise20user() {}
    /**
     * @return (Updatable) Identifies the name of a cost center.
     * 
     */
    public Optional<String> costCenter() {
        return Optional.ofNullable(this.costCenter);
    }
    /**
     * @return (Updatable) Identifies the name of a department.
     * 
     */
    public Optional<String> department() {
        return Optional.ofNullable(this.department);
    }
    /**
     * @return (Updatable) Identifies the name of a division.
     * 
     */
    public Optional<String> division() {
        return Optional.ofNullable(this.division);
    }
    /**
     * @return (Updatable) Numeric or alphanumeric identifier assigned to  a person, typically based on order of hire or association with an organization.
     * 
     */
    public Optional<String> employeeNumber() {
        return Optional.ofNullable(this.employeeNumber);
    }
    /**
     * @return (Updatable) The User&#39;s manager. A complex type that optionally allows Service Providers to represent organizational hierarchy by referencing the &#39;id&#39; attribute of another User.
     * 
     */
    public Optional<DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager> manager() {
        return Optional.ofNullable(this.manager);
    }
    /**
     * @return (Updatable) Identifies the name of an organization.
     * 
     */
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserUrnietfparamsscimschemasextensionenterprise20user defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String costCenter;
        private @Nullable String department;
        private @Nullable String division;
        private @Nullable String employeeNumber;
        private @Nullable DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager manager;
        private @Nullable String organization;
        public Builder() {}
        public Builder(DomainsUserUrnietfparamsscimschemasextensionenterprise20user defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.costCenter = defaults.costCenter;
    	      this.department = defaults.department;
    	      this.division = defaults.division;
    	      this.employeeNumber = defaults.employeeNumber;
    	      this.manager = defaults.manager;
    	      this.organization = defaults.organization;
        }

        @CustomType.Setter
        public Builder costCenter(@Nullable String costCenter) {
            this.costCenter = costCenter;
            return this;
        }
        @CustomType.Setter
        public Builder department(@Nullable String department) {
            this.department = department;
            return this;
        }
        @CustomType.Setter
        public Builder division(@Nullable String division) {
            this.division = division;
            return this;
        }
        @CustomType.Setter
        public Builder employeeNumber(@Nullable String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        @CustomType.Setter
        public Builder manager(@Nullable DomainsUserUrnietfparamsscimschemasextensionenterprise20userManager manager) {
            this.manager = manager;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }
        public DomainsUserUrnietfparamsscimschemasextensionenterprise20user build() {
            final var o = new DomainsUserUrnietfparamsscimschemasextensionenterprise20user();
            o.costCenter = costCenter;
            o.department = department;
            o.division = division;
            o.employeeNumber = employeeNumber;
            o.manager = manager;
            o.organization = organization;
            return o;
        }
    }
}
