// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser {
    /**
     * @return (Updatable) Indicates weather a user can use api keys
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseApiKeys;
    /**
     * @return (Updatable) Indicates weather a user can use auth tokens
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseAuthTokens;
    /**
     * @return (Updatable) Indicates weather a user can use console password
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseConsolePassword;
    /**
     * @return (Updatable) Indicates weather a user can use customer secret keys
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseCustomerSecretKeys;
    /**
     * @return (Updatable) Indicates weather a user can use db credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseDbCredentials;
    /**
     * @return (Updatable) Indicates weather a user can use oauth2 client credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseOauth2clientCredentials;
    /**
     * @return (Updatable) Indicates weather a user can use smtp credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean canUseSmtpCredentials;

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser() {}
    /**
     * @return (Updatable) Indicates weather a user can use api keys
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseApiKeys() {
        return Optional.ofNullable(this.canUseApiKeys);
    }
    /**
     * @return (Updatable) Indicates weather a user can use auth tokens
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseAuthTokens() {
        return Optional.ofNullable(this.canUseAuthTokens);
    }
    /**
     * @return (Updatable) Indicates weather a user can use console password
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseConsolePassword() {
        return Optional.ofNullable(this.canUseConsolePassword);
    }
    /**
     * @return (Updatable) Indicates weather a user can use customer secret keys
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseCustomerSecretKeys() {
        return Optional.ofNullable(this.canUseCustomerSecretKeys);
    }
    /**
     * @return (Updatable) Indicates weather a user can use db credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseDbCredentials() {
        return Optional.ofNullable(this.canUseDbCredentials);
    }
    /**
     * @return (Updatable) Indicates weather a user can use oauth2 client credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseOauth2clientCredentials() {
        return Optional.ofNullable(this.canUseOauth2clientCredentials);
    }
    /**
     * @return (Updatable) Indicates weather a user can use smtp credentials
     * 
     * **Added In:** 2012271618
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> canUseSmtpCredentials() {
        return Optional.ofNullable(this.canUseSmtpCredentials);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean canUseApiKeys;
        private @Nullable Boolean canUseAuthTokens;
        private @Nullable Boolean canUseConsolePassword;
        private @Nullable Boolean canUseCustomerSecretKeys;
        private @Nullable Boolean canUseDbCredentials;
        private @Nullable Boolean canUseOauth2clientCredentials;
        private @Nullable Boolean canUseSmtpCredentials;
        public Builder() {}
        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canUseApiKeys = defaults.canUseApiKeys;
    	      this.canUseAuthTokens = defaults.canUseAuthTokens;
    	      this.canUseConsolePassword = defaults.canUseConsolePassword;
    	      this.canUseCustomerSecretKeys = defaults.canUseCustomerSecretKeys;
    	      this.canUseDbCredentials = defaults.canUseDbCredentials;
    	      this.canUseOauth2clientCredentials = defaults.canUseOauth2clientCredentials;
    	      this.canUseSmtpCredentials = defaults.canUseSmtpCredentials;
        }

        @CustomType.Setter
        public Builder canUseApiKeys(@Nullable Boolean canUseApiKeys) {
            this.canUseApiKeys = canUseApiKeys;
            return this;
        }
        @CustomType.Setter
        public Builder canUseAuthTokens(@Nullable Boolean canUseAuthTokens) {
            this.canUseAuthTokens = canUseAuthTokens;
            return this;
        }
        @CustomType.Setter
        public Builder canUseConsolePassword(@Nullable Boolean canUseConsolePassword) {
            this.canUseConsolePassword = canUseConsolePassword;
            return this;
        }
        @CustomType.Setter
        public Builder canUseCustomerSecretKeys(@Nullable Boolean canUseCustomerSecretKeys) {
            this.canUseCustomerSecretKeys = canUseCustomerSecretKeys;
            return this;
        }
        @CustomType.Setter
        public Builder canUseDbCredentials(@Nullable Boolean canUseDbCredentials) {
            this.canUseDbCredentials = canUseDbCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder canUseOauth2clientCredentials(@Nullable Boolean canUseOauth2clientCredentials) {
            this.canUseOauth2clientCredentials = canUseOauth2clientCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder canUseSmtpCredentials(@Nullable Boolean canUseSmtpCredentials) {
            this.canUseSmtpCredentials = canUseSmtpCredentials;
            return this;
        }
        public DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser build() {
            final var o = new DomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser();
            o.canUseApiKeys = canUseApiKeys;
            o.canUseAuthTokens = canUseAuthTokens;
            o.canUseConsolePassword = canUseConsolePassword;
            o.canUseCustomerSecretKeys = canUseCustomerSecretKeys;
            o.canUseDbCredentials = canUseDbCredentials;
            o.canUseOauth2clientCredentials = canUseOauth2clientCredentials;
            o.canUseSmtpCredentials = canUseSmtpCredentials;
            return o;
        }
    }
}
