// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser {
    /**
     * @return (Updatable) A list of bypass codes that belongs to the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes;
    /**
     * @return (Updatable) A list of devices enrolled by the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices;
    /**
     * @return (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer loginAttempts;
    /**
     * @return (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String mfaEnabledOn;
    /**
     * @return (Updatable) User MFA Ignored Apps Identifiers
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable List<String> mfaIgnoredApps;
    /**
     * @return (Updatable) The user opted for MFA.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String mfaStatus;
    /**
     * @return (Updatable) The preferred authentication factor type.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String preferredAuthenticationFactor;
    /**
     * @return (Updatable) The preferred authentication method.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String preferredAuthenticationMethod;
    /**
     * @return (Updatable) The user&#39;s preferred device.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice preferredDevice;
    /**
     * @return (Updatable) The preferred third-party vendor name.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    private @Nullable String preferredThirdPartyVendor;
    /**
     * @return (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents;

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser() {}
    /**
     * @return (Updatable) A list of bypass codes that belongs to the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes() {
        return this.bypassCodes == null ? List.of() : this.bypassCodes;
    }
    /**
     * @return (Updatable) A list of devices enrolled by the user.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices() {
        return this.devices == null ? List.of() : this.devices;
    }
    /**
     * @return (Updatable) The number of incorrect multi factor authentication sign in attempts made by this user. The user is  locked if this reaches the threshold specified in the maxIncorrectAttempts attribute in AuthenticationFactorSettings.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * idcsRequiresImmediateReadAfterWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }
    /**
     * @return (Updatable) The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> mfaEnabledOn() {
        return Optional.ofNullable(this.mfaEnabledOn);
    }
    /**
     * @return (Updatable) User MFA Ignored Apps Identifiers
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public List<String> mfaIgnoredApps() {
        return this.mfaIgnoredApps == null ? List.of() : this.mfaIgnoredApps;
    }
    /**
     * @return (Updatable) The user opted for MFA.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * idcsRequiresWriteForAccessFlows: true
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> mfaStatus() {
        return Optional.ofNullable(this.mfaStatus);
    }
    /**
     * @return (Updatable) The preferred authentication factor type.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> preferredAuthenticationFactor() {
        return Optional.ofNullable(this.preferredAuthenticationFactor);
    }
    /**
     * @return (Updatable) The preferred authentication method.
     * 
     * **Added In:** 2009232244
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> preferredAuthenticationMethod() {
        return Optional.ofNullable(this.preferredAuthenticationMethod);
    }
    /**
     * @return (Updatable) The user&#39;s preferred device.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice> preferredDevice() {
        return Optional.ofNullable(this.preferredDevice);
    }
    /**
     * @return (Updatable) The preferred third-party vendor name.
     * 
     * **Added In:** 19.2.1
     * 
     * **SCIM++ Properties:**
     * * caseExact: true
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: string
     * * uniqueness: none
     * 
     */
    public Optional<String> preferredThirdPartyVendor() {
        return Optional.ofNullable(this.preferredThirdPartyVendor);
    }
    /**
     * @return (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     * **Added In:** 18.3.6
     * 
     * **SCIM++ Properties:**
     * * idcsCompositeKey: [value]
     * * multiValued: true
     * * mutability: readWrite
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents() {
        return this.trustedUserAgents == null ? List.of() : this.trustedUserAgents;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes;
        private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices;
        private @Nullable Integer loginAttempts;
        private @Nullable String mfaEnabledOn;
        private @Nullable List<String> mfaIgnoredApps;
        private @Nullable String mfaStatus;
        private @Nullable String preferredAuthenticationFactor;
        private @Nullable String preferredAuthenticationMethod;
        private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice preferredDevice;
        private @Nullable String preferredThirdPartyVendor;
        private @Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents;
        public Builder() {}
        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypassCodes = defaults.bypassCodes;
    	      this.devices = defaults.devices;
    	      this.loginAttempts = defaults.loginAttempts;
    	      this.mfaEnabledOn = defaults.mfaEnabledOn;
    	      this.mfaIgnoredApps = defaults.mfaIgnoredApps;
    	      this.mfaStatus = defaults.mfaStatus;
    	      this.preferredAuthenticationFactor = defaults.preferredAuthenticationFactor;
    	      this.preferredAuthenticationMethod = defaults.preferredAuthenticationMethod;
    	      this.preferredDevice = defaults.preferredDevice;
    	      this.preferredThirdPartyVendor = defaults.preferredThirdPartyVendor;
    	      this.trustedUserAgents = defaults.trustedUserAgents;
        }

        @CustomType.Setter
        public Builder bypassCodes(@Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes) {

            this.bypassCodes = bypassCodes;
            return this;
        }
        public Builder bypassCodes(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode... bypassCodes) {
            return bypassCodes(List.of(bypassCodes));
        }
        @CustomType.Setter
        public Builder devices(@Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices) {

            this.devices = devices;
            return this;
        }
        public Builder devices(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice... devices) {
            return devices(List.of(devices));
        }
        @CustomType.Setter
        public Builder loginAttempts(@Nullable Integer loginAttempts) {

            this.loginAttempts = loginAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder mfaEnabledOn(@Nullable String mfaEnabledOn) {

            this.mfaEnabledOn = mfaEnabledOn;
            return this;
        }
        @CustomType.Setter
        public Builder mfaIgnoredApps(@Nullable List<String> mfaIgnoredApps) {

            this.mfaIgnoredApps = mfaIgnoredApps;
            return this;
        }
        public Builder mfaIgnoredApps(String... mfaIgnoredApps) {
            return mfaIgnoredApps(List.of(mfaIgnoredApps));
        }
        @CustomType.Setter
        public Builder mfaStatus(@Nullable String mfaStatus) {

            this.mfaStatus = mfaStatus;
            return this;
        }
        @CustomType.Setter
        public Builder preferredAuthenticationFactor(@Nullable String preferredAuthenticationFactor) {

            this.preferredAuthenticationFactor = preferredAuthenticationFactor;
            return this;
        }
        @CustomType.Setter
        public Builder preferredAuthenticationMethod(@Nullable String preferredAuthenticationMethod) {

            this.preferredAuthenticationMethod = preferredAuthenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder preferredDevice(@Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice preferredDevice) {

            this.preferredDevice = preferredDevice;
            return this;
        }
        @CustomType.Setter
        public Builder preferredThirdPartyVendor(@Nullable String preferredThirdPartyVendor) {

            this.preferredThirdPartyVendor = preferredThirdPartyVendor;
            return this;
        }
        @CustomType.Setter
        public Builder trustedUserAgents(@Nullable List<DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents) {

            this.trustedUserAgents = trustedUserAgents;
            return this;
        }
        public Builder trustedUserAgents(DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent... trustedUserAgents) {
            return trustedUserAgents(List.of(trustedUserAgents));
        }
        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser build() {
            final var _resultValue = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser();
            _resultValue.bypassCodes = bypassCodes;
            _resultValue.devices = devices;
            _resultValue.loginAttempts = loginAttempts;
            _resultValue.mfaEnabledOn = mfaEnabledOn;
            _resultValue.mfaIgnoredApps = mfaIgnoredApps;
            _resultValue.mfaStatus = mfaStatus;
            _resultValue.preferredAuthenticationFactor = preferredAuthenticationFactor;
            _resultValue.preferredAuthenticationMethod = preferredAuthenticationMethod;
            _resultValue.preferredDevice = preferredDevice;
            _resultValue.preferredThirdPartyVendor = preferredThirdPartyVendor;
            _resultValue.trustedUserAgents = trustedUserAgents;
            return _resultValue;
        }
    }
}
