// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser {
    /**
     * @return (Updatable) Applicable Password Policy
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy applicablePasswordPolicy;
    /**
     * @return (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean cantChange;
    /**
     * @return (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean cantExpire;
    /**
     * @return (Updatable) Indicates that the password has expired
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean expired;
    /**
     * @return (Updatable) A DateTime that specifies the date and time when last failed password validation was set
     * 
     * **Added In:** 2011192329
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastFailedValidationDate;
    /**
     * @return (Updatable) A DateTime that specifies the date and time when the current password was set
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastSuccessfulSetDate;
    /**
     * @return (Updatable) A DateTime that specifies the date and time when last successful password validation was set
     * 
     * **Added In:** 2011192329
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastSuccessfulValidationDate;
    /**
     * @return (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    private @Nullable Boolean mustChange;

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser() {}
    /**
     * @return (Updatable) Applicable Password Policy
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsCompositeKey: [value]
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy> applicablePasswordPolicy() {
        return Optional.ofNullable(this.applicablePasswordPolicy);
    }
    /**
     * @return (Updatable) Indicates that the current password MAY NOT be changed and all other password expiry settings SHALL be ignored
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> cantChange() {
        return Optional.ofNullable(this.cantChange);
    }
    /**
     * @return (Updatable) Indicates that the password expiry policy will not be applied for the current Resource
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> cantExpire() {
        return Optional.ofNullable(this.cantExpire);
    }
    /**
     * @return (Updatable) Indicates that the password has expired
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }
    /**
     * @return (Updatable) A DateTime that specifies the date and time when last failed password validation was set
     * 
     * **Added In:** 2011192329
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastFailedValidationDate() {
        return Optional.ofNullable(this.lastFailedValidationDate);
    }
    /**
     * @return (Updatable) A DateTime that specifies the date and time when the current password was set
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastSuccessfulSetDate() {
        return Optional.ofNullable(this.lastSuccessfulSetDate);
    }
    /**
     * @return (Updatable) A DateTime that specifies the date and time when last successful password validation was set
     * 
     * **Added In:** 2011192329
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastSuccessfulValidationDate() {
        return Optional.ofNullable(this.lastSuccessfulValidationDate);
    }
    /**
     * @return (Updatable) Indicates that the subject password value MUST change on next login. If not changed, typically the account is locked. The value may be set indirectly when the subject&#39;s current password expires or directly set by an administrator.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: boolean
     * * uniqueness: none
     * 
     */
    public Optional<Boolean> mustChange() {
        return Optional.ofNullable(this.mustChange);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy applicablePasswordPolicy;
        private @Nullable Boolean cantChange;
        private @Nullable Boolean cantExpire;
        private @Nullable Boolean expired;
        private @Nullable String lastFailedValidationDate;
        private @Nullable String lastSuccessfulSetDate;
        private @Nullable String lastSuccessfulValidationDate;
        private @Nullable Boolean mustChange;
        public Builder() {}
        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicablePasswordPolicy = defaults.applicablePasswordPolicy;
    	      this.cantChange = defaults.cantChange;
    	      this.cantExpire = defaults.cantExpire;
    	      this.expired = defaults.expired;
    	      this.lastFailedValidationDate = defaults.lastFailedValidationDate;
    	      this.lastSuccessfulSetDate = defaults.lastSuccessfulSetDate;
    	      this.lastSuccessfulValidationDate = defaults.lastSuccessfulValidationDate;
    	      this.mustChange = defaults.mustChange;
        }

        @CustomType.Setter
        public Builder applicablePasswordPolicy(@Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy applicablePasswordPolicy) {

            this.applicablePasswordPolicy = applicablePasswordPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder cantChange(@Nullable Boolean cantChange) {

            this.cantChange = cantChange;
            return this;
        }
        @CustomType.Setter
        public Builder cantExpire(@Nullable Boolean cantExpire) {

            this.cantExpire = cantExpire;
            return this;
        }
        @CustomType.Setter
        public Builder expired(@Nullable Boolean expired) {

            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder lastFailedValidationDate(@Nullable String lastFailedValidationDate) {

            this.lastFailedValidationDate = lastFailedValidationDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulSetDate(@Nullable String lastSuccessfulSetDate) {

            this.lastSuccessfulSetDate = lastSuccessfulSetDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulValidationDate(@Nullable String lastSuccessfulValidationDate) {

            this.lastSuccessfulValidationDate = lastSuccessfulValidationDate;
            return this;
        }
        @CustomType.Setter
        public Builder mustChange(@Nullable Boolean mustChange) {

            this.mustChange = mustChange;
            return this;
        }
        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser build() {
            final var _resultValue = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser();
            _resultValue.applicablePasswordPolicy = applicablePasswordPolicy;
            _resultValue.cantChange = cantChange;
            _resultValue.cantExpire = cantExpire;
            _resultValue.expired = expired;
            _resultValue.lastFailedValidationDate = lastFailedValidationDate;
            _resultValue.lastSuccessfulSetDate = lastSuccessfulSetDate;
            _resultValue.lastSuccessfulValidationDate = lastSuccessfulValidationDate;
            _resultValue.mustChange = mustChange;
            return _resultValue;
        }
    }
}
