// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked;
import com.pulumi.oci.Identity.outputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser {
    /**
     * @return (Updatable) The last failed login date
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastFailedLoginDate;
    /**
     * @return (Updatable) The last successful login date
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String lastSuccessfulLoginDate;
    /**
     * @return (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
     * 
     * **SCIM++ Properties:**
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Locked, mapsTo:locked.on], [columnHeaderName:Locked Reason, mapsTo:locked.reason], [columnHeaderName:Locked Date, mapsTo:locked.lockDate]]
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked locked;
    /**
     * @return (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer loginAttempts;
    /**
     * @return (Updatable) Maximum number of concurrent sessions for a User
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsMaxValue: 999
     * * idcsMinValue: 1
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer maxConcurrentSessions;
    /**
     * @return (Updatable) The previous successful login date
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    private @Nullable String previousSuccessfulLoginDate;
    /**
     * @return (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer recoveryAttempts;
    /**
     * @return (Updatable) The number of failed account recovery enrollment attempts.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    private @Nullable Integer recoveryEnrollAttempts;
    /**
     * @return (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked recoveryLocked;

    private DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser() {}
    /**
     * @return (Updatable) The last failed login date
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastFailedLoginDate() {
        return Optional.ofNullable(this.lastFailedLoginDate);
    }
    /**
     * @return (Updatable) The last successful login date
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: true
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> lastSuccessfulLoginDate() {
        return Optional.ofNullable(this.lastSuccessfulLoginDate);
    }
    /**
     * @return (Updatable) A complex attribute that indicates an account is locked (blocking new sessions)
     * 
     * **SCIM++ Properties:**
     * * idcsCsvAttributeNameMappings: [[columnHeaderName:Locked, mapsTo:locked.on], [columnHeaderName:Locked Reason, mapsTo:locked.reason], [columnHeaderName:Locked Date, mapsTo:locked.lockDate]]
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * idcsAllowUpdatesInReadOnlyMode: true
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }
    /**
     * @return (Updatable) Maximum number of concurrent sessions for a User
     * 
     * **Added In:** 20.1.3
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsMaxValue: 999
     * * idcsMinValue: 1
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> maxConcurrentSessions() {
        return Optional.ofNullable(this.maxConcurrentSessions);
    }
    /**
     * @return (Updatable) The previous successful login date
     * 
     * **SCIM++ Properties:**
     * * caseExact: false
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: dateTime
     * * uniqueness: none
     * 
     */
    public Optional<String> previousSuccessfulLoginDate() {
        return Optional.ofNullable(this.previousSuccessfulLoginDate);
    }
    /**
     * @return (Updatable) The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> recoveryAttempts() {
        return Optional.ofNullable(this.recoveryAttempts);
    }
    /**
     * @return (Updatable) The number of failed account recovery enrollment attempts.
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * returned: request
     * * type: integer
     * * uniqueness: none
     * 
     */
    public Optional<Integer> recoveryEnrollAttempts() {
        return Optional.ofNullable(this.recoveryEnrollAttempts);
    }
    /**
     * @return (Updatable) A complex attribute that indicates an password recovery is locked (blocking new sessions)
     * 
     * **Added In:** 19.1.4
     * 
     * **SCIM++ Properties:**
     * * idcsSearchable: false
     * * multiValued: false
     * * mutability: readWrite
     * * required: false
     * * returned: default
     * * type: complex
     * * uniqueness: none
     * 
     */
    public Optional<DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked> recoveryLocked() {
        return Optional.ofNullable(this.recoveryLocked);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String lastFailedLoginDate;
        private @Nullable String lastSuccessfulLoginDate;
        private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked locked;
        private @Nullable Integer loginAttempts;
        private @Nullable Integer maxConcurrentSessions;
        private @Nullable String previousSuccessfulLoginDate;
        private @Nullable Integer recoveryAttempts;
        private @Nullable Integer recoveryEnrollAttempts;
        private @Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked recoveryLocked;
        public Builder() {}
        public Builder(DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lastFailedLoginDate = defaults.lastFailedLoginDate;
    	      this.lastSuccessfulLoginDate = defaults.lastSuccessfulLoginDate;
    	      this.locked = defaults.locked;
    	      this.loginAttempts = defaults.loginAttempts;
    	      this.maxConcurrentSessions = defaults.maxConcurrentSessions;
    	      this.previousSuccessfulLoginDate = defaults.previousSuccessfulLoginDate;
    	      this.recoveryAttempts = defaults.recoveryAttempts;
    	      this.recoveryEnrollAttempts = defaults.recoveryEnrollAttempts;
    	      this.recoveryLocked = defaults.recoveryLocked;
        }

        @CustomType.Setter
        public Builder lastFailedLoginDate(@Nullable String lastFailedLoginDate) {
            this.lastFailedLoginDate = lastFailedLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulLoginDate(@Nullable String lastSuccessfulLoginDate) {
            this.lastSuccessfulLoginDate = lastSuccessfulLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked locked) {
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder loginAttempts(@Nullable Integer loginAttempts) {
            this.loginAttempts = loginAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentSessions(@Nullable Integer maxConcurrentSessions) {
            this.maxConcurrentSessions = maxConcurrentSessions;
            return this;
        }
        @CustomType.Setter
        public Builder previousSuccessfulLoginDate(@Nullable String previousSuccessfulLoginDate) {
            this.previousSuccessfulLoginDate = previousSuccessfulLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryAttempts(@Nullable Integer recoveryAttempts) {
            this.recoveryAttempts = recoveryAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryEnrollAttempts(@Nullable Integer recoveryEnrollAttempts) {
            this.recoveryEnrollAttempts = recoveryEnrollAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryLocked(@Nullable DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked recoveryLocked) {
            this.recoveryLocked = recoveryLocked;
            return this;
        }
        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser build() {
            final var o = new DomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser();
            o.lastFailedLoginDate = lastFailedLoginDate;
            o.lastSuccessfulLoginDate = lastSuccessfulLoginDate;
            o.locked = locked;
            o.loginAttempts = loginAttempts;
            o.maxConcurrentSessions = maxConcurrentSessions;
            o.previousSuccessfulLoginDate = previousSuccessfulLoginDate;
            o.recoveryAttempts = recoveryAttempts;
            o.recoveryEnrollAttempts = recoveryEnrollAttempts;
            o.recoveryLocked = recoveryLocked;
            return o;
        }
    }
}
