// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthTokensToken {
    /**
     * @return The description you assign to the auth token. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    private @Nullable String description;
    /**
     * @return The OCID of the auth token.
     * 
     */
    private @Nullable String id;
    /**
     * @return The detailed status of INACTIVE lifecycleState.
     * 
     */
    private @Nullable String inactiveState;
    /**
     * @return The token&#39;s current state.
     * 
     */
    private @Nullable String state;
    /**
     * @return Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeExpires;
    /**
     * @return The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
     * 
     */
    private @Nullable String token;
    /**
     * @return The OCID of the user.
     * 
     */
    private @Nullable String userId;

    private GetAuthTokensToken() {}
    /**
     * @return The description you assign to the auth token. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The OCID of the auth token.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The detailed status of INACTIVE lifecycleState.
     * 
     */
    public Optional<String> inactiveState() {
        return Optional.ofNullable(this.inactiveState);
    }
    /**
     * @return The token&#39;s current state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeExpires() {
        return Optional.ofNullable(this.timeExpires);
    }
    /**
     * @return The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return The OCID of the user.
     * 
     */
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthTokensToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable String inactiveState;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeExpires;
        private @Nullable String token;
        private @Nullable String userId;
        public Builder() {}
        public Builder(GetAuthTokensToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.inactiveState = defaults.inactiveState;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpires = defaults.timeExpires;
    	      this.token = defaults.token;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveState(@Nullable String inactiveState) {
            this.inactiveState = inactiveState;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(@Nullable String timeExpires) {
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {
            this.userId = userId;
            return this;
        }
        public GetAuthTokensToken build() {
            final var o = new GetAuthTokensToken();
            o.description = description;
            o.id = id;
            o.inactiveState = inactiveState;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeExpires = timeExpires;
            o.token = token;
            o.userId = userId;
            return o;
        }
    }
}
