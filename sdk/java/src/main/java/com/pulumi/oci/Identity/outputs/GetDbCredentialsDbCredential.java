// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbCredentialsDbCredential {
    /**
     * @return The description you assign to the DB credential. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    private String description;
    /**
     * @return The OCID of the DB credential.
     * 
     */
    private String id;
    private String lifecycleDetails;
    private String password;
    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    private String state;
    /**
     * @return Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeExpires;
    /**
     * @return The OCID of the user.
     * 
     */
    private String userId;

    private GetDbCredentialsDbCredential() {}
    /**
     * @return The description you assign to the DB credential. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The OCID of the DB credential.
     * 
     */
    public String id() {
        return this.id;
    }
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String password() {
        return this.password;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }
    /**
     * @return The OCID of the user.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbCredentialsDbCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private String lifecycleDetails;
        private String password;
        private String state;
        private String timeCreated;
        private String timeExpires;
        private String userId;
        public Builder() {}
        public Builder(GetDbCredentialsDbCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.password = defaults.password;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpires = defaults.timeExpires;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(String timeExpires) {
            if (timeExpires == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "timeExpires");
            }
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetDbCredentialsDbCredential", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetDbCredentialsDbCredential build() {
            final var _resultValue = new GetDbCredentialsDbCredential();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.password = password;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpires = timeExpires;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
