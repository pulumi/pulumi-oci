// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainReplicaRegion;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDomainResult {
    private String adminEmail;
    private String adminFirstName;
    private String adminLastName;
    private String adminUserName;
    /**
     * @return The OCID of the compartment containing the domain.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The domain descripition
     * 
     */
    private String description;
    /**
     * @return The mutable display name of the domain
     * 
     */
    private String displayName;
    private String domainId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
     * 
     */
    private String homeRegion;
    /**
     * @return Region specific domain URL.
     * 
     */
    private String homeRegionUrl;
    /**
     * @return The OCID of the domain
     * 
     */
    private String id;
    /**
     * @return Indicates whether domain is hidden on login screen or not.
     * 
     */
    private Boolean isHiddenOnLogin;
    private Boolean isNotificationBypassed;
    private Boolean isPrimaryEmailRequired;
    /**
     * @return The License type of Domain
     * 
     */
    private String licenseType;
    /**
     * @return Any additional details about the current state of the Domain.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The regions domain is replication to.
     * 
     */
    private List<GetDomainReplicaRegion> replicaRegions;
    /**
     * @return The current state.
     * 
     */
    private String state;
    /**
     * @return Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The type of the domain.
     * 
     */
    private String type;
    /**
     * @return Region agnostic domain URL.
     * 
     */
    private String url;

    private GetDomainResult() {}
    public String adminEmail() {
        return this.adminEmail;
    }
    public String adminFirstName() {
        return this.adminFirstName;
    }
    public String adminLastName() {
        return this.adminLastName;
    }
    public String adminUserName() {
        return this.adminUserName;
    }
    /**
     * @return The OCID of the compartment containing the domain.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The domain descripition
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The mutable display name of the domain
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String domainId() {
        return this.domainId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The home region for the domain. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
     * 
     */
    public String homeRegion() {
        return this.homeRegion;
    }
    /**
     * @return Region specific domain URL.
     * 
     */
    public String homeRegionUrl() {
        return this.homeRegionUrl;
    }
    /**
     * @return The OCID of the domain
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether domain is hidden on login screen or not.
     * 
     */
    public Boolean isHiddenOnLogin() {
        return this.isHiddenOnLogin;
    }
    public Boolean isNotificationBypassed() {
        return this.isNotificationBypassed;
    }
    public Boolean isPrimaryEmailRequired() {
        return this.isPrimaryEmailRequired;
    }
    /**
     * @return The License type of Domain
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Any additional details about the current state of the Domain.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The regions domain is replication to.
     * 
     */
    public List<GetDomainReplicaRegion> replicaRegions() {
        return this.replicaRegions;
    }
    /**
     * @return The current state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The type of the domain.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Region agnostic domain URL.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminEmail;
        private String adminFirstName;
        private String adminLastName;
        private String adminUserName;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private String domainId;
        private Map<String,Object> freeformTags;
        private String homeRegion;
        private String homeRegionUrl;
        private String id;
        private Boolean isHiddenOnLogin;
        private Boolean isNotificationBypassed;
        private Boolean isPrimaryEmailRequired;
        private String licenseType;
        private String lifecycleDetails;
        private List<GetDomainReplicaRegion> replicaRegions;
        private String state;
        private String timeCreated;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEmail = defaults.adminEmail;
    	      this.adminFirstName = defaults.adminFirstName;
    	      this.adminLastName = defaults.adminLastName;
    	      this.adminUserName = defaults.adminUserName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.domainId = defaults.domainId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.homeRegion = defaults.homeRegion;
    	      this.homeRegionUrl = defaults.homeRegionUrl;
    	      this.id = defaults.id;
    	      this.isHiddenOnLogin = defaults.isHiddenOnLogin;
    	      this.isNotificationBypassed = defaults.isNotificationBypassed;
    	      this.isPrimaryEmailRequired = defaults.isPrimaryEmailRequired;
    	      this.licenseType = defaults.licenseType;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.replicaRegions = defaults.replicaRegions;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder adminEmail(String adminEmail) {
            if (adminEmail == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "adminEmail");
            }
            this.adminEmail = adminEmail;
            return this;
        }
        @CustomType.Setter
        public Builder adminFirstName(String adminFirstName) {
            if (adminFirstName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "adminFirstName");
            }
            this.adminFirstName = adminFirstName;
            return this;
        }
        @CustomType.Setter
        public Builder adminLastName(String adminLastName) {
            if (adminLastName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "adminLastName");
            }
            this.adminLastName = adminLastName;
            return this;
        }
        @CustomType.Setter
        public Builder adminUserName(String adminUserName) {
            if (adminUserName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "adminUserName");
            }
            this.adminUserName = adminUserName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder homeRegion(String homeRegion) {
            if (homeRegion == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "homeRegion");
            }
            this.homeRegion = homeRegion;
            return this;
        }
        @CustomType.Setter
        public Builder homeRegionUrl(String homeRegionUrl) {
            if (homeRegionUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "homeRegionUrl");
            }
            this.homeRegionUrl = homeRegionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isHiddenOnLogin(Boolean isHiddenOnLogin) {
            if (isHiddenOnLogin == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "isHiddenOnLogin");
            }
            this.isHiddenOnLogin = isHiddenOnLogin;
            return this;
        }
        @CustomType.Setter
        public Builder isNotificationBypassed(Boolean isNotificationBypassed) {
            if (isNotificationBypassed == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "isNotificationBypassed");
            }
            this.isNotificationBypassed = isNotificationBypassed;
            return this;
        }
        @CustomType.Setter
        public Builder isPrimaryEmailRequired(Boolean isPrimaryEmailRequired) {
            if (isPrimaryEmailRequired == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "isPrimaryEmailRequired");
            }
            this.isPrimaryEmailRequired = isPrimaryEmailRequired;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder replicaRegions(List<GetDomainReplicaRegion> replicaRegions) {
            if (replicaRegions == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "replicaRegions");
            }
            this.replicaRegions = replicaRegions;
            return this;
        }
        public Builder replicaRegions(GetDomainReplicaRegion... replicaRegions) {
            return replicaRegions(List.of(replicaRegions));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetDomainResult build() {
            final var _resultValue = new GetDomainResult();
            _resultValue.adminEmail = adminEmail;
            _resultValue.adminFirstName = adminFirstName;
            _resultValue.adminLastName = adminLastName;
            _resultValue.adminUserName = adminUserName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.domainId = domainId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.homeRegion = homeRegion;
            _resultValue.homeRegionUrl = homeRegionUrl;
            _resultValue.id = id;
            _resultValue.isHiddenOnLogin = isHiddenOnLogin;
            _resultValue.isNotificationBypassed = isNotificationBypassed;
            _resultValue.isPrimaryEmailRequired = isPrimaryEmailRequired;
            _resultValue.licenseType = licenseType;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.replicaRegions = replicaRegions;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.type = type;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
