// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAccountMgmtInfoApp {
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    private @Nullable Boolean active;
    /**
     * @return Application icon.
     * 
     */
    private @Nullable String appIcon;
    /**
     * @return Application thumbnail.
     * 
     */
    private @Nullable String appThumbnail;
    /**
     * @return The base URI for all of the scopes defined in this App. The value of &#39;audience&#39; is combined with the &#39;value&#39; of each scope to form an &#39;fqs&#39; or fully qualified scope.
     * 
     */
    private @Nullable String audience;
    /**
     * @return Application description
     * 
     */
    private @Nullable String description;
    /**
     * @return Resource Type display name
     * 
     */
    private @Nullable String display;
    /**
     * @return If true, this App is an AliasApp and it cannot be granted to an end user directly
     * 
     */
    private @Nullable Boolean isAliasApp;
    /**
     * @return If true, sync from the managed app will be performed as authoritative sync.
     * 
     */
    private @Nullable Boolean isAuthoritative;
    /**
     * @return If true, this App allows runtime services to log end users in to this App automatically
     * 
     */
    private @Nullable Boolean isLoginTarget;
    /**
     * @return If true, indicates that access to this App requires an account. That is, in order to log in to the App, a User must use an application-specific identity that is maintained in the remote identity-repository of that App.
     * 
     */
    private @Nullable Boolean isManagedApp;
    /**
     * @return If true, indicates that this application acts as an OAuth Resource.
     * 
     */
    private @Nullable Boolean isOauthResource;
    /**
     * @return If true, this application is an Oracle Public Cloud service-instance.
     * 
     */
    private @Nullable Boolean isOpcService;
    /**
     * @return If true, indicates that this application accepts an Oracle Identity Cloud Service user as a login-identity (does not require an account) and relies on authorization of the user&#39;s memberships in AppRoles
     * 
     */
    private @Nullable Boolean isUnmanagedApp;
    /**
     * @return The protocol that runtime services will use to log end users in to this App automatically. If &#39;OIDC&#39;, then runtime services use the OpenID Connect protocol. If &#39;SAML&#39;, then runtime services use the Security Assertion Markup Language protocol.
     * 
     */
    private @Nullable String loginMechanism;
    /**
     * @return If true, customer is not billed for runtime operations of the app.
     * 
     */
    private @Nullable Boolean meterAsOpcService;
    /**
     * @return UserWalletArtifact URI
     * 
     */
    private @Nullable String ref;
    /**
     * @return This Uniform Resource Name (URN) value identifies the type of Oracle Public Cloud service of which this app is an instance.
     * 
     */
    private @Nullable String serviceTypeUrn;
    /**
     * @return If true, this App will be displayed in the MyApps page of each end-user who has access to the App.
     * 
     */
    private @Nullable Boolean showInMyApps;
    /**
     * @return UserWalletArtifact identifier
     * 
     */
    private @Nullable String value;

    private GetDomainsAccountMgmtInfoApp() {}
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }
    /**
     * @return Application icon.
     * 
     */
    public Optional<String> appIcon() {
        return Optional.ofNullable(this.appIcon);
    }
    /**
     * @return Application thumbnail.
     * 
     */
    public Optional<String> appThumbnail() {
        return Optional.ofNullable(this.appThumbnail);
    }
    /**
     * @return The base URI for all of the scopes defined in this App. The value of &#39;audience&#39; is combined with the &#39;value&#39; of each scope to form an &#39;fqs&#39; or fully qualified scope.
     * 
     */
    public Optional<String> audience() {
        return Optional.ofNullable(this.audience);
    }
    /**
     * @return Application description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Resource Type display name
     * 
     */
    public Optional<String> display() {
        return Optional.ofNullable(this.display);
    }
    /**
     * @return If true, this App is an AliasApp and it cannot be granted to an end user directly
     * 
     */
    public Optional<Boolean> isAliasApp() {
        return Optional.ofNullable(this.isAliasApp);
    }
    /**
     * @return If true, sync from the managed app will be performed as authoritative sync.
     * 
     */
    public Optional<Boolean> isAuthoritative() {
        return Optional.ofNullable(this.isAuthoritative);
    }
    /**
     * @return If true, this App allows runtime services to log end users in to this App automatically
     * 
     */
    public Optional<Boolean> isLoginTarget() {
        return Optional.ofNullable(this.isLoginTarget);
    }
    /**
     * @return If true, indicates that access to this App requires an account. That is, in order to log in to the App, a User must use an application-specific identity that is maintained in the remote identity-repository of that App.
     * 
     */
    public Optional<Boolean> isManagedApp() {
        return Optional.ofNullable(this.isManagedApp);
    }
    /**
     * @return If true, indicates that this application acts as an OAuth Resource.
     * 
     */
    public Optional<Boolean> isOauthResource() {
        return Optional.ofNullable(this.isOauthResource);
    }
    /**
     * @return If true, this application is an Oracle Public Cloud service-instance.
     * 
     */
    public Optional<Boolean> isOpcService() {
        return Optional.ofNullable(this.isOpcService);
    }
    /**
     * @return If true, indicates that this application accepts an Oracle Identity Cloud Service user as a login-identity (does not require an account) and relies on authorization of the user&#39;s memberships in AppRoles
     * 
     */
    public Optional<Boolean> isUnmanagedApp() {
        return Optional.ofNullable(this.isUnmanagedApp);
    }
    /**
     * @return The protocol that runtime services will use to log end users in to this App automatically. If &#39;OIDC&#39;, then runtime services use the OpenID Connect protocol. If &#39;SAML&#39;, then runtime services use the Security Assertion Markup Language protocol.
     * 
     */
    public Optional<String> loginMechanism() {
        return Optional.ofNullable(this.loginMechanism);
    }
    /**
     * @return If true, customer is not billed for runtime operations of the app.
     * 
     */
    public Optional<Boolean> meterAsOpcService() {
        return Optional.ofNullable(this.meterAsOpcService);
    }
    /**
     * @return UserWalletArtifact URI
     * 
     */
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }
    /**
     * @return This Uniform Resource Name (URN) value identifies the type of Oracle Public Cloud service of which this app is an instance.
     * 
     */
    public Optional<String> serviceTypeUrn() {
        return Optional.ofNullable(this.serviceTypeUrn);
    }
    /**
     * @return If true, this App will be displayed in the MyApps page of each end-user who has access to the App.
     * 
     */
    public Optional<Boolean> showInMyApps() {
        return Optional.ofNullable(this.showInMyApps);
    }
    /**
     * @return UserWalletArtifact identifier
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAccountMgmtInfoApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean active;
        private @Nullable String appIcon;
        private @Nullable String appThumbnail;
        private @Nullable String audience;
        private @Nullable String description;
        private @Nullable String display;
        private @Nullable Boolean isAliasApp;
        private @Nullable Boolean isAuthoritative;
        private @Nullable Boolean isLoginTarget;
        private @Nullable Boolean isManagedApp;
        private @Nullable Boolean isOauthResource;
        private @Nullable Boolean isOpcService;
        private @Nullable Boolean isUnmanagedApp;
        private @Nullable String loginMechanism;
        private @Nullable Boolean meterAsOpcService;
        private @Nullable String ref;
        private @Nullable String serviceTypeUrn;
        private @Nullable Boolean showInMyApps;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetDomainsAccountMgmtInfoApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.appIcon = defaults.appIcon;
    	      this.appThumbnail = defaults.appThumbnail;
    	      this.audience = defaults.audience;
    	      this.description = defaults.description;
    	      this.display = defaults.display;
    	      this.isAliasApp = defaults.isAliasApp;
    	      this.isAuthoritative = defaults.isAuthoritative;
    	      this.isLoginTarget = defaults.isLoginTarget;
    	      this.isManagedApp = defaults.isManagedApp;
    	      this.isOauthResource = defaults.isOauthResource;
    	      this.isOpcService = defaults.isOpcService;
    	      this.isUnmanagedApp = defaults.isUnmanagedApp;
    	      this.loginMechanism = defaults.loginMechanism;
    	      this.meterAsOpcService = defaults.meterAsOpcService;
    	      this.ref = defaults.ref;
    	      this.serviceTypeUrn = defaults.serviceTypeUrn;
    	      this.showInMyApps = defaults.showInMyApps;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder active(@Nullable Boolean active) {
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder appIcon(@Nullable String appIcon) {
            this.appIcon = appIcon;
            return this;
        }
        @CustomType.Setter
        public Builder appThumbnail(@Nullable String appThumbnail) {
            this.appThumbnail = appThumbnail;
            return this;
        }
        @CustomType.Setter
        public Builder audience(@Nullable String audience) {
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder display(@Nullable String display) {
            this.display = display;
            return this;
        }
        @CustomType.Setter
        public Builder isAliasApp(@Nullable Boolean isAliasApp) {
            this.isAliasApp = isAliasApp;
            return this;
        }
        @CustomType.Setter
        public Builder isAuthoritative(@Nullable Boolean isAuthoritative) {
            this.isAuthoritative = isAuthoritative;
            return this;
        }
        @CustomType.Setter
        public Builder isLoginTarget(@Nullable Boolean isLoginTarget) {
            this.isLoginTarget = isLoginTarget;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedApp(@Nullable Boolean isManagedApp) {
            this.isManagedApp = isManagedApp;
            return this;
        }
        @CustomType.Setter
        public Builder isOauthResource(@Nullable Boolean isOauthResource) {
            this.isOauthResource = isOauthResource;
            return this;
        }
        @CustomType.Setter
        public Builder isOpcService(@Nullable Boolean isOpcService) {
            this.isOpcService = isOpcService;
            return this;
        }
        @CustomType.Setter
        public Builder isUnmanagedApp(@Nullable Boolean isUnmanagedApp) {
            this.isUnmanagedApp = isUnmanagedApp;
            return this;
        }
        @CustomType.Setter
        public Builder loginMechanism(@Nullable String loginMechanism) {
            this.loginMechanism = loginMechanism;
            return this;
        }
        @CustomType.Setter
        public Builder meterAsOpcService(@Nullable Boolean meterAsOpcService) {
            this.meterAsOpcService = meterAsOpcService;
            return this;
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTypeUrn(@Nullable String serviceTypeUrn) {
            this.serviceTypeUrn = serviceTypeUrn;
            return this;
        }
        @CustomType.Setter
        public Builder showInMyApps(@Nullable Boolean showInMyApps) {
            this.showInMyApps = showInMyApps;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        public GetDomainsAccountMgmtInfoApp build() {
            final var o = new GetDomainsAccountMgmtInfoApp();
            o.active = active;
            o.appIcon = appIcon;
            o.appThumbnail = appThumbnail;
            o.audience = audience;
            o.description = description;
            o.display = display;
            o.isAliasApp = isAliasApp;
            o.isAuthoritative = isAuthoritative;
            o.isLoginTarget = isLoginTarget;
            o.isManagedApp = isManagedApp;
            o.isOauthResource = isOauthResource;
            o.isOpcService = isOpcService;
            o.isUnmanagedApp = isUnmanagedApp;
            o.loginMechanism = loginMechanism;
            o.meterAsOpcService = meterAsOpcService;
            o.ref = ref;
            o.serviceTypeUrn = serviceTypeUrn;
            o.showInMyApps = showInMyApps;
            o.value = value;
            return o;
        }
    }
}
