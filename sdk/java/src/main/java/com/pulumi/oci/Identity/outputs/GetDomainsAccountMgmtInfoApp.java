// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsAccountMgmtInfoApp {
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    private Boolean active;
    /**
     * @return Application icon.
     * 
     */
    private String appIcon;
    /**
     * @return Application thumbnail.
     * 
     */
    private String appThumbnail;
    /**
     * @return The base URI for all of the scopes defined in this App. The value of &#39;audience&#39; is combined with the &#39;value&#39; of each scope to form an &#39;fqs&#39; or fully qualified scope.
     * 
     */
    private String audience;
    /**
     * @return Application description
     * 
     */
    private String description;
    /**
     * @return Resource Type display name
     * 
     */
    private String display;
    /**
     * @return If true, this App is an AliasApp and it cannot be granted to an end user directly
     * 
     */
    private Boolean isAliasApp;
    /**
     * @return If true, sync from the managed app will be performed as authoritative sync.
     * 
     */
    private Boolean isAuthoritative;
    /**
     * @return If true, this App allows runtime services to log end users in to this App automatically
     * 
     */
    private Boolean isLoginTarget;
    /**
     * @return If true, indicates that access to this App requires an account. That is, in order to log in to the App, a User must use an application-specific identity that is maintained in the remote identity-repository of that App.
     * 
     */
    private Boolean isManagedApp;
    /**
     * @return If true, indicates that this application acts as an OAuth Resource.
     * 
     */
    private Boolean isOauthResource;
    /**
     * @return If true, this application is an Oracle Public Cloud service-instance.
     * 
     */
    private Boolean isOpcService;
    /**
     * @return If true, indicates that this application accepts an Oracle Identity Cloud Service user as a login-identity (does not require an account) and relies on authorization of the user&#39;s memberships in AppRoles
     * 
     */
    private Boolean isUnmanagedApp;
    /**
     * @return The protocol that runtime services will use to log end users in to this App automatically. If &#39;OIDC&#39;, then runtime services use the OpenID Connect protocol. If &#39;SAML&#39;, then runtime services use the Security Assertion Markup Language protocol.
     * 
     */
    private String loginMechanism;
    /**
     * @return If true, customer is not billed for runtime operations of the app.
     * 
     */
    private Boolean meterAsOpcService;
    /**
     * @return UserWalletArtifact URI
     * 
     */
    private String ref;
    /**
     * @return This Uniform Resource Name (URN) value identifies the type of Oracle Public Cloud service of which this app is an instance.
     * 
     */
    private String serviceTypeUrn;
    /**
     * @return If true, this App will be displayed in the MyApps page of each end-user who has access to the App.
     * 
     */
    private Boolean showInMyApps;
    /**
     * @return UserWalletArtifact identifier
     * 
     */
    private String value;

    private GetDomainsAccountMgmtInfoApp() {}
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return Application icon.
     * 
     */
    public String appIcon() {
        return this.appIcon;
    }
    /**
     * @return Application thumbnail.
     * 
     */
    public String appThumbnail() {
        return this.appThumbnail;
    }
    /**
     * @return The base URI for all of the scopes defined in this App. The value of &#39;audience&#39; is combined with the &#39;value&#39; of each scope to form an &#39;fqs&#39; or fully qualified scope.
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return Application description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Resource Type display name
     * 
     */
    public String display() {
        return this.display;
    }
    /**
     * @return If true, this App is an AliasApp and it cannot be granted to an end user directly
     * 
     */
    public Boolean isAliasApp() {
        return this.isAliasApp;
    }
    /**
     * @return If true, sync from the managed app will be performed as authoritative sync.
     * 
     */
    public Boolean isAuthoritative() {
        return this.isAuthoritative;
    }
    /**
     * @return If true, this App allows runtime services to log end users in to this App automatically
     * 
     */
    public Boolean isLoginTarget() {
        return this.isLoginTarget;
    }
    /**
     * @return If true, indicates that access to this App requires an account. That is, in order to log in to the App, a User must use an application-specific identity that is maintained in the remote identity-repository of that App.
     * 
     */
    public Boolean isManagedApp() {
        return this.isManagedApp;
    }
    /**
     * @return If true, indicates that this application acts as an OAuth Resource.
     * 
     */
    public Boolean isOauthResource() {
        return this.isOauthResource;
    }
    /**
     * @return If true, this application is an Oracle Public Cloud service-instance.
     * 
     */
    public Boolean isOpcService() {
        return this.isOpcService;
    }
    /**
     * @return If true, indicates that this application accepts an Oracle Identity Cloud Service user as a login-identity (does not require an account) and relies on authorization of the user&#39;s memberships in AppRoles
     * 
     */
    public Boolean isUnmanagedApp() {
        return this.isUnmanagedApp;
    }
    /**
     * @return The protocol that runtime services will use to log end users in to this App automatically. If &#39;OIDC&#39;, then runtime services use the OpenID Connect protocol. If &#39;SAML&#39;, then runtime services use the Security Assertion Markup Language protocol.
     * 
     */
    public String loginMechanism() {
        return this.loginMechanism;
    }
    /**
     * @return If true, customer is not billed for runtime operations of the app.
     * 
     */
    public Boolean meterAsOpcService() {
        return this.meterAsOpcService;
    }
    /**
     * @return UserWalletArtifact URI
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return This Uniform Resource Name (URN) value identifies the type of Oracle Public Cloud service of which this app is an instance.
     * 
     */
    public String serviceTypeUrn() {
        return this.serviceTypeUrn;
    }
    /**
     * @return If true, this App will be displayed in the MyApps page of each end-user who has access to the App.
     * 
     */
    public Boolean showInMyApps() {
        return this.showInMyApps;
    }
    /**
     * @return UserWalletArtifact identifier
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAccountMgmtInfoApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String appIcon;
        private String appThumbnail;
        private String audience;
        private String description;
        private String display;
        private Boolean isAliasApp;
        private Boolean isAuthoritative;
        private Boolean isLoginTarget;
        private Boolean isManagedApp;
        private Boolean isOauthResource;
        private Boolean isOpcService;
        private Boolean isUnmanagedApp;
        private String loginMechanism;
        private Boolean meterAsOpcService;
        private String ref;
        private String serviceTypeUrn;
        private Boolean showInMyApps;
        private String value;
        public Builder() {}
        public Builder(GetDomainsAccountMgmtInfoApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.appIcon = defaults.appIcon;
    	      this.appThumbnail = defaults.appThumbnail;
    	      this.audience = defaults.audience;
    	      this.description = defaults.description;
    	      this.display = defaults.display;
    	      this.isAliasApp = defaults.isAliasApp;
    	      this.isAuthoritative = defaults.isAuthoritative;
    	      this.isLoginTarget = defaults.isLoginTarget;
    	      this.isManagedApp = defaults.isManagedApp;
    	      this.isOauthResource = defaults.isOauthResource;
    	      this.isOpcService = defaults.isOpcService;
    	      this.isUnmanagedApp = defaults.isUnmanagedApp;
    	      this.loginMechanism = defaults.loginMechanism;
    	      this.meterAsOpcService = defaults.meterAsOpcService;
    	      this.ref = defaults.ref;
    	      this.serviceTypeUrn = defaults.serviceTypeUrn;
    	      this.showInMyApps = defaults.showInMyApps;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder appIcon(String appIcon) {
            if (appIcon == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "appIcon");
            }
            this.appIcon = appIcon;
            return this;
        }
        @CustomType.Setter
        public Builder appThumbnail(String appThumbnail) {
            if (appThumbnail == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "appThumbnail");
            }
            this.appThumbnail = appThumbnail;
            return this;
        }
        @CustomType.Setter
        public Builder audience(String audience) {
            if (audience == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "audience");
            }
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder display(String display) {
            if (display == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "display");
            }
            this.display = display;
            return this;
        }
        @CustomType.Setter
        public Builder isAliasApp(Boolean isAliasApp) {
            if (isAliasApp == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isAliasApp");
            }
            this.isAliasApp = isAliasApp;
            return this;
        }
        @CustomType.Setter
        public Builder isAuthoritative(Boolean isAuthoritative) {
            if (isAuthoritative == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isAuthoritative");
            }
            this.isAuthoritative = isAuthoritative;
            return this;
        }
        @CustomType.Setter
        public Builder isLoginTarget(Boolean isLoginTarget) {
            if (isLoginTarget == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isLoginTarget");
            }
            this.isLoginTarget = isLoginTarget;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedApp(Boolean isManagedApp) {
            if (isManagedApp == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isManagedApp");
            }
            this.isManagedApp = isManagedApp;
            return this;
        }
        @CustomType.Setter
        public Builder isOauthResource(Boolean isOauthResource) {
            if (isOauthResource == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isOauthResource");
            }
            this.isOauthResource = isOauthResource;
            return this;
        }
        @CustomType.Setter
        public Builder isOpcService(Boolean isOpcService) {
            if (isOpcService == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isOpcService");
            }
            this.isOpcService = isOpcService;
            return this;
        }
        @CustomType.Setter
        public Builder isUnmanagedApp(Boolean isUnmanagedApp) {
            if (isUnmanagedApp == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "isUnmanagedApp");
            }
            this.isUnmanagedApp = isUnmanagedApp;
            return this;
        }
        @CustomType.Setter
        public Builder loginMechanism(String loginMechanism) {
            if (loginMechanism == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "loginMechanism");
            }
            this.loginMechanism = loginMechanism;
            return this;
        }
        @CustomType.Setter
        public Builder meterAsOpcService(Boolean meterAsOpcService) {
            if (meterAsOpcService == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "meterAsOpcService");
            }
            this.meterAsOpcService = meterAsOpcService;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTypeUrn(String serviceTypeUrn) {
            if (serviceTypeUrn == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "serviceTypeUrn");
            }
            this.serviceTypeUrn = serviceTypeUrn;
            return this;
        }
        @CustomType.Setter
        public Builder showInMyApps(Boolean showInMyApps) {
            if (showInMyApps == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "showInMyApps");
            }
            this.showInMyApps = showInMyApps;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfoApp", "value");
            }
            this.value = value;
            return this;
        }
        public GetDomainsAccountMgmtInfoApp build() {
            final var _resultValue = new GetDomainsAccountMgmtInfoApp();
            _resultValue.active = active;
            _resultValue.appIcon = appIcon;
            _resultValue.appThumbnail = appThumbnail;
            _resultValue.audience = audience;
            _resultValue.description = description;
            _resultValue.display = display;
            _resultValue.isAliasApp = isAliasApp;
            _resultValue.isAuthoritative = isAuthoritative;
            _resultValue.isLoginTarget = isLoginTarget;
            _resultValue.isManagedApp = isManagedApp;
            _resultValue.isOauthResource = isOauthResource;
            _resultValue.isOpcService = isOpcService;
            _resultValue.isUnmanagedApp = isUnmanagedApp;
            _resultValue.loginMechanism = loginMechanism;
            _resultValue.meterAsOpcService = meterAsOpcService;
            _resultValue.ref = ref;
            _resultValue.serviceTypeUrn = serviceTypeUrn;
            _resultValue.showInMyApps = showInMyApps;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
