// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoApp;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoOwner;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoTag;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsAccountMgmtInfosAccountMgmtInfo {
    private String accountMgmtInfoId;
    /**
     * @return Type of Account
     * 
     */
    private String accountType;
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    private Boolean active;
    /**
     * @return Application on which the account is based
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoApp> apps;
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    private List<String> attributeSets;
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    private String attributes;
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    private String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return Unique key for this AccountMgmtInfo, which is used to prevent duplicate AccountMgmtInfo resources. Key is composed of a subset of app, owner and accountType.
     * 
     */
    private String compositeKey;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return If true, a back-fill grant will not be created for a connected managed app as part of account creation.
     * 
     */
    private Boolean doNotBackFillGrants;
    /**
     * @return If true, the operation will not be performed on the target
     * 
     */
    private Boolean doNotPerformActionOnTarget;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return If true, this account has been marked as a favorite of the User who owns it
     * 
     */
    private Boolean favorite;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return If true, indicates that this managed object is an account, which is an identity that represents a user in the context of a specific application
     * 
     */
    private Boolean isAccount;
    /**
     * @return Last accessed timestamp of an application
     * 
     */
    private String lastAccessed;
    /**
     * @return Matching owning users of the account
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner> matchingOwners;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoMeta> metas;
    /**
     * @return Name of the Account
     * 
     */
    private String name;
    /**
     * @return Object-class of the Account
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass> objectClasses;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return The context in which the operation is performed on the account.
     * 
     */
    private String operationContext;
    /**
     * @return Owning user of the account
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoOwner> owners;
    /**
     * @return If true, then the response to the account creation operation on a connected managed app returns a preview of the account data that is evaluated by the attribute value generation policy. Note that an account will not be created on the target application when this attribute is set to true.
     * 
     */
    private Boolean previewOnly;
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    private String resourceTypeSchemaVersion;
    /**
     * @return Resource Type of the Account
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType> resourceTypes;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return Last recorded sync response for the account
     * 
     */
    private String syncResponse;
    /**
     * @return Last recorded sync situation for the account
     * 
     */
    private String syncSituation;
    /**
     * @return Last sync timestamp of the account
     * 
     */
    private String syncTimestamp;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return Unique identifier of the Account
     * 
     */
    private String uid;
    /**
     * @return The UserWalletArtifact that contains the credentials that the system will use when performing Secure Form-Fill to log the user in to this application
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact> userWalletArtifacts;

    private GetDomainsAccountMgmtInfosAccountMgmtInfo() {}
    public String accountMgmtInfoId() {
        return this.accountMgmtInfoId;
    }
    /**
     * @return Type of Account
     * 
     */
    public String accountType() {
        return this.accountType;
    }
    /**
     * @return If true, this App is able to participate in runtime services, such as automatic-login, OAuth, and SAML. If false, all runtime services are disabled for this App and only administrative operations can be performed.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return Application on which the account is based
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoApp> apps() {
        return this.apps;
    }
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public List<String> attributeSets() {
        return this.attributeSets;
    }
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public String attributes() {
        return this.attributes;
    }
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public String authorization() {
        return this.authorization;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return Unique key for this AccountMgmtInfo, which is used to prevent duplicate AccountMgmtInfo resources. Key is composed of a subset of app, owner and accountType.
     * 
     */
    public String compositeKey() {
        return this.compositeKey;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return If true, a back-fill grant will not be created for a connected managed app as part of account creation.
     * 
     */
    public Boolean doNotBackFillGrants() {
        return this.doNotBackFillGrants;
    }
    /**
     * @return If true, the operation will not be performed on the target
     * 
     */
    public Boolean doNotPerformActionOnTarget() {
        return this.doNotPerformActionOnTarget;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return If true, this account has been marked as a favorite of the User who owns it
     * 
     */
    public Boolean favorite() {
        return this.favorite;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return If true, indicates that this managed object is an account, which is an identity that represents a user in the context of a specific application
     * 
     */
    public Boolean isAccount() {
        return this.isAccount;
    }
    /**
     * @return Last accessed timestamp of an application
     * 
     */
    public String lastAccessed() {
        return this.lastAccessed;
    }
    /**
     * @return Matching owning users of the account
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner> matchingOwners() {
        return this.matchingOwners;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoMeta> metas() {
        return this.metas;
    }
    /**
     * @return Name of the Account
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object-class of the Account
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass> objectClasses() {
        return this.objectClasses;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The context in which the operation is performed on the account.
     * 
     */
    public String operationContext() {
        return this.operationContext;
    }
    /**
     * @return Owning user of the account
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoOwner> owners() {
        return this.owners;
    }
    /**
     * @return If true, then the response to the account creation operation on a connected managed app returns a preview of the account data that is evaluated by the attribute value generation policy. Note that an account will not be created on the target application when this attribute is set to true.
     * 
     */
    public Boolean previewOnly() {
        return this.previewOnly;
    }
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public String resourceTypeSchemaVersion() {
        return this.resourceTypeSchemaVersion;
    }
    /**
     * @return Resource Type of the Account
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType> resourceTypes() {
        return this.resourceTypes;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return Last recorded sync response for the account
     * 
     */
    public String syncResponse() {
        return this.syncResponse;
    }
    /**
     * @return Last recorded sync situation for the account
     * 
     */
    public String syncSituation() {
        return this.syncSituation;
    }
    /**
     * @return Last sync timestamp of the account
     * 
     */
    public String syncTimestamp() {
        return this.syncTimestamp;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return Unique identifier of the Account
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return The UserWalletArtifact that contains the credentials that the system will use when performing Secure Form-Fill to log the user in to this application
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact> userWalletArtifacts() {
        return this.userWalletArtifacts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAccountMgmtInfosAccountMgmtInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountMgmtInfoId;
        private String accountType;
        private Boolean active;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoApp> apps;
        private List<String> attributeSets;
        private String attributes;
        private String authorization;
        private String compartmentOcid;
        private String compositeKey;
        private Boolean deleteInProgress;
        private Boolean doNotBackFillGrants;
        private Boolean doNotPerformActionOnTarget;
        private String domainOcid;
        private Boolean favorite;
        private String id;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private Boolean isAccount;
        private String lastAccessed;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner> matchingOwners;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoMeta> metas;
        private String name;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass> objectClasses;
        private String ocid;
        private String operationContext;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoOwner> owners;
        private Boolean previewOnly;
        private String resourceTypeSchemaVersion;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType> resourceTypes;
        private List<String> schemas;
        private String syncResponse;
        private String syncSituation;
        private String syncTimestamp;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoTag> tags;
        private String tenancyOcid;
        private String uid;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact> userWalletArtifacts;
        public Builder() {}
        public Builder(GetDomainsAccountMgmtInfosAccountMgmtInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountMgmtInfoId = defaults.accountMgmtInfoId;
    	      this.accountType = defaults.accountType;
    	      this.active = defaults.active;
    	      this.apps = defaults.apps;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.compositeKey = defaults.compositeKey;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.doNotBackFillGrants = defaults.doNotBackFillGrants;
    	      this.doNotPerformActionOnTarget = defaults.doNotPerformActionOnTarget;
    	      this.domainOcid = defaults.domainOcid;
    	      this.favorite = defaults.favorite;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.isAccount = defaults.isAccount;
    	      this.lastAccessed = defaults.lastAccessed;
    	      this.matchingOwners = defaults.matchingOwners;
    	      this.metas = defaults.metas;
    	      this.name = defaults.name;
    	      this.objectClasses = defaults.objectClasses;
    	      this.ocid = defaults.ocid;
    	      this.operationContext = defaults.operationContext;
    	      this.owners = defaults.owners;
    	      this.previewOnly = defaults.previewOnly;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.resourceTypes = defaults.resourceTypes;
    	      this.schemas = defaults.schemas;
    	      this.syncResponse = defaults.syncResponse;
    	      this.syncSituation = defaults.syncSituation;
    	      this.syncTimestamp = defaults.syncTimestamp;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.uid = defaults.uid;
    	      this.userWalletArtifacts = defaults.userWalletArtifacts;
        }

        @CustomType.Setter
        public Builder accountMgmtInfoId(String accountMgmtInfoId) {
            this.accountMgmtInfoId = Objects.requireNonNull(accountMgmtInfoId);
            return this;
        }
        @CustomType.Setter
        public Builder accountType(String accountType) {
            this.accountType = Objects.requireNonNull(accountType);
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder apps(List<GetDomainsAccountMgmtInfosAccountMgmtInfoApp> apps) {
            this.apps = Objects.requireNonNull(apps);
            return this;
        }
        public Builder apps(GetDomainsAccountMgmtInfosAccountMgmtInfoApp... apps) {
            return apps(List.of(apps));
        }
        @CustomType.Setter
        public Builder attributeSets(List<String> attributeSets) {
            this.attributeSets = Objects.requireNonNull(attributeSets);
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(String attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }
        @CustomType.Setter
        public Builder authorization(String authorization) {
            this.authorization = Objects.requireNonNull(authorization);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            this.compartmentOcid = Objects.requireNonNull(compartmentOcid);
            return this;
        }
        @CustomType.Setter
        public Builder compositeKey(String compositeKey) {
            this.compositeKey = Objects.requireNonNull(compositeKey);
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            this.deleteInProgress = Objects.requireNonNull(deleteInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder doNotBackFillGrants(Boolean doNotBackFillGrants) {
            this.doNotBackFillGrants = Objects.requireNonNull(doNotBackFillGrants);
            return this;
        }
        @CustomType.Setter
        public Builder doNotPerformActionOnTarget(Boolean doNotPerformActionOnTarget) {
            this.doNotPerformActionOnTarget = Objects.requireNonNull(doNotPerformActionOnTarget);
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            this.domainOcid = Objects.requireNonNull(domainOcid);
            return this;
        }
        @CustomType.Setter
        public Builder favorite(Boolean favorite) {
            this.favorite = Objects.requireNonNull(favorite);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = Objects.requireNonNull(idcsCreatedBies);
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = Objects.requireNonNull(idcsLastModifiedBies);
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = Objects.requireNonNull(idcsLastUpgradedInRelease);
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = Objects.requireNonNull(idcsPreventedOperations);
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder isAccount(Boolean isAccount) {
            this.isAccount = Objects.requireNonNull(isAccount);
            return this;
        }
        @CustomType.Setter
        public Builder lastAccessed(String lastAccessed) {
            this.lastAccessed = Objects.requireNonNull(lastAccessed);
            return this;
        }
        @CustomType.Setter
        public Builder matchingOwners(List<GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner> matchingOwners) {
            this.matchingOwners = Objects.requireNonNull(matchingOwners);
            return this;
        }
        public Builder matchingOwners(GetDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner... matchingOwners) {
            return matchingOwners(List.of(matchingOwners));
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsAccountMgmtInfosAccountMgmtInfoMeta> metas) {
            this.metas = Objects.requireNonNull(metas);
            return this;
        }
        public Builder metas(GetDomainsAccountMgmtInfosAccountMgmtInfoMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectClasses(List<GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass> objectClasses) {
            this.objectClasses = Objects.requireNonNull(objectClasses);
            return this;
        }
        public Builder objectClasses(GetDomainsAccountMgmtInfosAccountMgmtInfoObjectClass... objectClasses) {
            return objectClasses(List.of(objectClasses));
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            this.ocid = Objects.requireNonNull(ocid);
            return this;
        }
        @CustomType.Setter
        public Builder operationContext(String operationContext) {
            this.operationContext = Objects.requireNonNull(operationContext);
            return this;
        }
        @CustomType.Setter
        public Builder owners(List<GetDomainsAccountMgmtInfosAccountMgmtInfoOwner> owners) {
            this.owners = Objects.requireNonNull(owners);
            return this;
        }
        public Builder owners(GetDomainsAccountMgmtInfosAccountMgmtInfoOwner... owners) {
            return owners(List.of(owners));
        }
        @CustomType.Setter
        public Builder previewOnly(Boolean previewOnly) {
            this.previewOnly = Objects.requireNonNull(previewOnly);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = Objects.requireNonNull(resourceTypeSchemaVersion);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypes(List<GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType> resourceTypes) {
            this.resourceTypes = Objects.requireNonNull(resourceTypes);
            return this;
        }
        public Builder resourceTypes(GetDomainsAccountMgmtInfosAccountMgmtInfoResourceType... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder syncResponse(String syncResponse) {
            this.syncResponse = Objects.requireNonNull(syncResponse);
            return this;
        }
        @CustomType.Setter
        public Builder syncSituation(String syncSituation) {
            this.syncSituation = Objects.requireNonNull(syncSituation);
            return this;
        }
        @CustomType.Setter
        public Builder syncTimestamp(String syncTimestamp) {
            this.syncTimestamp = Objects.requireNonNull(syncTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsAccountMgmtInfosAccountMgmtInfoTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDomainsAccountMgmtInfosAccountMgmtInfoTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            this.tenancyOcid = Objects.requireNonNull(tenancyOcid);
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        @CustomType.Setter
        public Builder userWalletArtifacts(List<GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact> userWalletArtifacts) {
            this.userWalletArtifacts = Objects.requireNonNull(userWalletArtifacts);
            return this;
        }
        public Builder userWalletArtifacts(GetDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact... userWalletArtifacts) {
            return userWalletArtifacts(List.of(userWalletArtifacts));
        }
        public GetDomainsAccountMgmtInfosAccountMgmtInfo build() {
            final var _resultValue = new GetDomainsAccountMgmtInfosAccountMgmtInfo();
            _resultValue.accountMgmtInfoId = accountMgmtInfoId;
            _resultValue.accountType = accountType;
            _resultValue.active = active;
            _resultValue.apps = apps;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authorization = authorization;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.compositeKey = compositeKey;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.doNotBackFillGrants = doNotBackFillGrants;
            _resultValue.doNotPerformActionOnTarget = doNotPerformActionOnTarget;
            _resultValue.domainOcid = domainOcid;
            _resultValue.favorite = favorite;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.isAccount = isAccount;
            _resultValue.lastAccessed = lastAccessed;
            _resultValue.matchingOwners = matchingOwners;
            _resultValue.metas = metas;
            _resultValue.name = name;
            _resultValue.objectClasses = objectClasses;
            _resultValue.ocid = ocid;
            _resultValue.operationContext = operationContext;
            _resultValue.owners = owners;
            _resultValue.previewOnly = previewOnly;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.resourceTypes = resourceTypes;
            _resultValue.schemas = schemas;
            _resultValue.syncResponse = syncResponse;
            _resultValue.syncSituation = syncSituation;
            _resultValue.syncTimestamp = syncTimestamp;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.uid = uid;
            _resultValue.userWalletArtifacts = userWalletArtifacts;
            return _resultValue;
        }
    }
}
