// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsAccountMgmtInfosAccountMgmtInfo;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAccountMgmtInfosResult {
    private @Nullable Integer accountMgmtInfoCount;
    private @Nullable String accountMgmtInfoFilter;
    /**
     * @return The list of account_mgmt_infos.
     * 
     */
    private List<GetDomainsAccountMgmtInfosAccountMgmtInfo> accountMgmtInfos;
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    private @Nullable String compartmentId;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    private String idcsEndpoint;
    private Integer itemsPerPage;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    private @Nullable String sortBy;
    private @Nullable String sortOrder;
    private @Nullable Integer startIndex;
    private Integer totalResults;

    private GetDomainsAccountMgmtInfosResult() {}
    public Optional<Integer> accountMgmtInfoCount() {
        return Optional.ofNullable(this.accountMgmtInfoCount);
    }
    public Optional<String> accountMgmtInfoFilter() {
        return Optional.ofNullable(this.accountMgmtInfoFilter);
    }
    /**
     * @return The list of account_mgmt_infos.
     * 
     */
    public List<GetDomainsAccountMgmtInfosAccountMgmtInfo> accountMgmtInfos() {
        return this.accountMgmtInfos;
    }
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    public Integer itemsPerPage() {
        return this.itemsPerPage;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }
    public Optional<Integer> startIndex() {
        return Optional.ofNullable(this.startIndex);
    }
    public Integer totalResults() {
        return this.totalResults;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAccountMgmtInfosResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer accountMgmtInfoCount;
        private @Nullable String accountMgmtInfoFilter;
        private List<GetDomainsAccountMgmtInfosAccountMgmtInfo> accountMgmtInfos;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private @Nullable String compartmentId;
        private String id;
        private String idcsEndpoint;
        private Integer itemsPerPage;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private @Nullable String sortBy;
        private @Nullable String sortOrder;
        private @Nullable Integer startIndex;
        private Integer totalResults;
        public Builder() {}
        public Builder(GetDomainsAccountMgmtInfosResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountMgmtInfoCount = defaults.accountMgmtInfoCount;
    	      this.accountMgmtInfoFilter = defaults.accountMgmtInfoFilter;
    	      this.accountMgmtInfos = defaults.accountMgmtInfos;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.itemsPerPage = defaults.itemsPerPage;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.sortBy = defaults.sortBy;
    	      this.sortOrder = defaults.sortOrder;
    	      this.startIndex = defaults.startIndex;
    	      this.totalResults = defaults.totalResults;
        }

        @CustomType.Setter
        public Builder accountMgmtInfoCount(@Nullable Integer accountMgmtInfoCount) {

            this.accountMgmtInfoCount = accountMgmtInfoCount;
            return this;
        }
        @CustomType.Setter
        public Builder accountMgmtInfoFilter(@Nullable String accountMgmtInfoFilter) {

            this.accountMgmtInfoFilter = accountMgmtInfoFilter;
            return this;
        }
        @CustomType.Setter
        public Builder accountMgmtInfos(List<GetDomainsAccountMgmtInfosAccountMgmtInfo> accountMgmtInfos) {
            if (accountMgmtInfos == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "accountMgmtInfos");
            }
            this.accountMgmtInfos = accountMgmtInfos;
            return this;
        }
        public Builder accountMgmtInfos(GetDomainsAccountMgmtInfosAccountMgmtInfo... accountMgmtInfos) {
            return accountMgmtInfos(List.of(accountMgmtInfos));
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {

            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {

            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {

            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder itemsPerPage(Integer itemsPerPage) {
            if (itemsPerPage == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "itemsPerPage");
            }
            this.itemsPerPage = itemsPerPage;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {

            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder sortBy(@Nullable String sortBy) {

            this.sortBy = sortBy;
            return this;
        }
        @CustomType.Setter
        public Builder sortOrder(@Nullable String sortOrder) {

            this.sortOrder = sortOrder;
            return this;
        }
        @CustomType.Setter
        public Builder startIndex(@Nullable Integer startIndex) {

            this.startIndex = startIndex;
            return this;
        }
        @CustomType.Setter
        public Builder totalResults(Integer totalResults) {
            if (totalResults == null) {
              throw new MissingRequiredPropertyException("GetDomainsAccountMgmtInfosResult", "totalResults");
            }
            this.totalResults = totalResults;
            return this;
        }
        public GetDomainsAccountMgmtInfosResult build() {
            final var _resultValue = new GetDomainsAccountMgmtInfosResult();
            _resultValue.accountMgmtInfoCount = accountMgmtInfoCount;
            _resultValue.accountMgmtInfoFilter = accountMgmtInfoFilter;
            _resultValue.accountMgmtInfos = accountMgmtInfos;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authorization = authorization;
            _resultValue.compartmentId = compartmentId;
            _resultValue.id = id;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.itemsPerPage = itemsPerPage;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.sortBy = sortBy;
            _resultValue.sortOrder = sortOrder;
            _resultValue.startIndex = startIndex;
            _resultValue.totalResults = totalResults;
            return _resultValue;
        }
    }
}
