// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsAppGrantedAppRole {
    /**
     * @return If true, then this granted AppRole confers administrative privileges within the App that defines it. Otherwise, the granted AppRole confers only functional privileges.
     * 
     */
    private Boolean adminRole;
    /**
     * @return ID of the resource
     * 
     */
    private String appId;
    /**
     * @return The name of the App that defines this AppRole, which is granted to this App. The App that defines the AppRole acts as the producer; the App to which the AppRole is granted acts as a consumer.
     * 
     */
    private String appName;
    /**
     * @return Display-name of the AppRole.
     * 
     */
    private String display;
    /**
     * @return The name of the legacy group associated with this AppRole.
     * 
     */
    private String legacyGroupName;
    /**
     * @return If true, indicates that this value must be protected.
     * 
     */
    private Boolean readOnly;
    /**
     * @return URI of the AppRole.
     * 
     */
    private String ref;
    /**
     * @return Object Class type. Allowed values are AccountObjectClass, ManagedObjectClass.
     * 
     */
    private String type;
    /**
     * @return ID of the AppRole.
     * 
     */
    private String value;

    private GetDomainsAppGrantedAppRole() {}
    /**
     * @return If true, then this granted AppRole confers administrative privileges within the App that defines it. Otherwise, the granted AppRole confers only functional privileges.
     * 
     */
    public Boolean adminRole() {
        return this.adminRole;
    }
    /**
     * @return ID of the resource
     * 
     */
    public String appId() {
        return this.appId;
    }
    /**
     * @return The name of the App that defines this AppRole, which is granted to this App. The App that defines the AppRole acts as the producer; the App to which the AppRole is granted acts as a consumer.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return Display-name of the AppRole.
     * 
     */
    public String display() {
        return this.display;
    }
    /**
     * @return The name of the legacy group associated with this AppRole.
     * 
     */
    public String legacyGroupName() {
        return this.legacyGroupName;
    }
    /**
     * @return If true, indicates that this value must be protected.
     * 
     */
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return URI of the AppRole.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return Object Class type. Allowed values are AccountObjectClass, ManagedObjectClass.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return ID of the AppRole.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppGrantedAppRole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean adminRole;
        private String appId;
        private String appName;
        private String display;
        private String legacyGroupName;
        private Boolean readOnly;
        private String ref;
        private String type;
        private String value;
        public Builder() {}
        public Builder(GetDomainsAppGrantedAppRole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminRole = defaults.adminRole;
    	      this.appId = defaults.appId;
    	      this.appName = defaults.appName;
    	      this.display = defaults.display;
    	      this.legacyGroupName = defaults.legacyGroupName;
    	      this.readOnly = defaults.readOnly;
    	      this.ref = defaults.ref;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder adminRole(Boolean adminRole) {
            this.adminRole = Objects.requireNonNull(adminRole);
            return this;
        }
        @CustomType.Setter
        public Builder appId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        @CustomType.Setter
        public Builder appName(String appName) {
            this.appName = Objects.requireNonNull(appName);
            return this;
        }
        @CustomType.Setter
        public Builder display(String display) {
            this.display = Objects.requireNonNull(display);
            return this;
        }
        @CustomType.Setter
        public Builder legacyGroupName(String legacyGroupName) {
            this.legacyGroupName = Objects.requireNonNull(legacyGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Objects.requireNonNull(readOnly);
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            this.ref = Objects.requireNonNull(ref);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public GetDomainsAppGrantedAppRole build() {
            final var o = new GetDomainsAppGrantedAppRole();
            o.adminRole = adminRole;
            o.appId = appId;
            o.appName = appName;
            o.display = display;
            o.legacyGroupName = legacyGroupName;
            o.readOnly = readOnly;
            o.ref = ref;
            o.type = type;
            o.value = value;
            return o;
        }
    }
}
