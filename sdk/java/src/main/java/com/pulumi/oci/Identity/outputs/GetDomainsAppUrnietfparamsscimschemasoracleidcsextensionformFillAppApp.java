// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp {
    /**
     * @return FormFill Application Configuration CLOB which has to be maintained in Form-Fill APP for legacy code to do Form-Fill injection
     * 
     */
    private @Nullable String configuration;
    /**
     * @return Indicates how FormFill obtains the username and password of the account that FormFill will use to sign into the target App.
     * 
     */
    private @Nullable String formCredMethod;
    /**
     * @return Credential Sharing Group to which this form-fill application belongs.
     * 
     */
    private @Nullable String formCredentialSharingGroupId;
    /**
     * @return A list of application-formURLs that FormFill should match against any formUrl that the user-specifies when signing in to the target service.  Each item in the list also indicates how FormFill should interpret that formUrl.
     * 
     */
    private @Nullable List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches;
    /**
     * @return Type of the FormFill application like WebApplication, MainFrameApplication, WindowsApplication. Initially, we will support only WebApplication.
     * 
     */
    private @Nullable String formType;
    /**
     * @return If true, indicates that system is allowed to show the password in plain-text for this account after re-authentication.
     * 
     */
    private @Nullable Boolean revealPasswordOnForm;
    /**
     * @return If true, indicates that each of the Form-Fill-related attributes that can be inherited from the template actually will be inherited from the template. If false, indicates that the AppTemplate disabled inheritance for these Form-Fill-related attributes.
     * 
     */
    private @Nullable Boolean syncFromTemplate;
    /**
     * @return Indicates the custom expression, which can combine concat and substring operations with literals and with any attribute of the Oracle Identity Cloud Service User
     * 
     */
    private @Nullable String userNameFormExpression;
    /**
     * @return Format for generating a username.  This value can be Username or Email Address; any other value will be treated as a custom expression.  A custom expression may combine &#39;concat&#39; and &#39;substring&#39; operations with literals and with any attribute of the Oracle Identity Cloud Service user.
     * 
     */
    private @Nullable String userNameFormTemplate;

    private GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp() {}
    /**
     * @return FormFill Application Configuration CLOB which has to be maintained in Form-Fill APP for legacy code to do Form-Fill injection
     * 
     */
    public Optional<String> configuration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * @return Indicates how FormFill obtains the username and password of the account that FormFill will use to sign into the target App.
     * 
     */
    public Optional<String> formCredMethod() {
        return Optional.ofNullable(this.formCredMethod);
    }
    /**
     * @return Credential Sharing Group to which this form-fill application belongs.
     * 
     */
    public Optional<String> formCredentialSharingGroupId() {
        return Optional.ofNullable(this.formCredentialSharingGroupId);
    }
    /**
     * @return A list of application-formURLs that FormFill should match against any formUrl that the user-specifies when signing in to the target service.  Each item in the list also indicates how FormFill should interpret that formUrl.
     * 
     */
    public List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches() {
        return this.formFillUrlMatches == null ? List.of() : this.formFillUrlMatches;
    }
    /**
     * @return Type of the FormFill application like WebApplication, MainFrameApplication, WindowsApplication. Initially, we will support only WebApplication.
     * 
     */
    public Optional<String> formType() {
        return Optional.ofNullable(this.formType);
    }
    /**
     * @return If true, indicates that system is allowed to show the password in plain-text for this account after re-authentication.
     * 
     */
    public Optional<Boolean> revealPasswordOnForm() {
        return Optional.ofNullable(this.revealPasswordOnForm);
    }
    /**
     * @return If true, indicates that each of the Form-Fill-related attributes that can be inherited from the template actually will be inherited from the template. If false, indicates that the AppTemplate disabled inheritance for these Form-Fill-related attributes.
     * 
     */
    public Optional<Boolean> syncFromTemplate() {
        return Optional.ofNullable(this.syncFromTemplate);
    }
    /**
     * @return Indicates the custom expression, which can combine concat and substring operations with literals and with any attribute of the Oracle Identity Cloud Service User
     * 
     */
    public Optional<String> userNameFormExpression() {
        return Optional.ofNullable(this.userNameFormExpression);
    }
    /**
     * @return Format for generating a username.  This value can be Username or Email Address; any other value will be treated as a custom expression.  A custom expression may combine &#39;concat&#39; and &#39;substring&#39; operations with literals and with any attribute of the Oracle Identity Cloud Service user.
     * 
     */
    public Optional<String> userNameFormTemplate() {
        return Optional.ofNullable(this.userNameFormTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configuration;
        private @Nullable String formCredMethod;
        private @Nullable String formCredentialSharingGroupId;
        private @Nullable List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches;
        private @Nullable String formType;
        private @Nullable Boolean revealPasswordOnForm;
        private @Nullable Boolean syncFromTemplate;
        private @Nullable String userNameFormExpression;
        private @Nullable String userNameFormTemplate;
        public Builder() {}
        public Builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.formCredMethod = defaults.formCredMethod;
    	      this.formCredentialSharingGroupId = defaults.formCredentialSharingGroupId;
    	      this.formFillUrlMatches = defaults.formFillUrlMatches;
    	      this.formType = defaults.formType;
    	      this.revealPasswordOnForm = defaults.revealPasswordOnForm;
    	      this.syncFromTemplate = defaults.syncFromTemplate;
    	      this.userNameFormExpression = defaults.userNameFormExpression;
    	      this.userNameFormTemplate = defaults.userNameFormTemplate;
        }

        @CustomType.Setter
        public Builder configuration(@Nullable String configuration) {
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder formCredMethod(@Nullable String formCredMethod) {
            this.formCredMethod = formCredMethod;
            return this;
        }
        @CustomType.Setter
        public Builder formCredentialSharingGroupId(@Nullable String formCredentialSharingGroupId) {
            this.formCredentialSharingGroupId = formCredentialSharingGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder formFillUrlMatches(@Nullable List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches) {
            this.formFillUrlMatches = formFillUrlMatches;
            return this;
        }
        public Builder formFillUrlMatches(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch... formFillUrlMatches) {
            return formFillUrlMatches(List.of(formFillUrlMatches));
        }
        @CustomType.Setter
        public Builder formType(@Nullable String formType) {
            this.formType = formType;
            return this;
        }
        @CustomType.Setter
        public Builder revealPasswordOnForm(@Nullable Boolean revealPasswordOnForm) {
            this.revealPasswordOnForm = revealPasswordOnForm;
            return this;
        }
        @CustomType.Setter
        public Builder syncFromTemplate(@Nullable Boolean syncFromTemplate) {
            this.syncFromTemplate = syncFromTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder userNameFormExpression(@Nullable String userNameFormExpression) {
            this.userNameFormExpression = userNameFormExpression;
            return this;
        }
        @CustomType.Setter
        public Builder userNameFormTemplate(@Nullable String userNameFormTemplate) {
            this.userNameFormTemplate = userNameFormTemplate;
            return this;
        }
        public GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp build() {
            final var o = new GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp();
            o.configuration = configuration;
            o.formCredMethod = formCredMethod;
            o.formCredentialSharingGroupId = formCredentialSharingGroupId;
            o.formFillUrlMatches = formFillUrlMatches;
            o.formType = formType;
            o.revealPasswordOnForm = revealPasswordOnForm;
            o.syncFromTemplate = syncFromTemplate;
            o.userNameFormExpression = userNameFormExpression;
            o.userNameFormTemplate = userNameFormTemplate;
            return o;
        }
    }
}
