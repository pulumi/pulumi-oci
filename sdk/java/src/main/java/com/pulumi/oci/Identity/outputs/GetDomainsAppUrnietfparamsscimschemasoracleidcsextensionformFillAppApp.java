// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp {
    /**
     * @return FormFill Application Configuration CLOB which has to be maintained in Form-Fill APP for legacy code to do Form-Fill injection
     * 
     */
    private String configuration;
    /**
     * @return Indicates how FormFill obtains the username and password of the account that FormFill will use to sign into the target App.
     * 
     */
    private String formCredMethod;
    /**
     * @return Credential Sharing Group to which this form-fill application belongs.
     * 
     */
    private String formCredentialSharingGroupId;
    /**
     * @return A list of application-formURLs that FormFill should match against any formUrl that the user-specifies when signing in to the target service.  Each item in the list also indicates how FormFill should interpret that formUrl.
     * 
     */
    private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches;
    /**
     * @return Type of the FormFill application like WebApplication, MainFrameApplication, WindowsApplication. Initially, we will support only WebApplication.
     * 
     */
    private String formType;
    /**
     * @return If true, indicates that system is allowed to show the password in plain-text for this account after re-authentication.
     * 
     */
    private Boolean revealPasswordOnForm;
    /**
     * @return If true, indicates that each of the Form-Fill-related attributes that can be inherited from the template actually will be inherited from the template. If false, indicates that the AppTemplate disabled inheritance for these Form-Fill-related attributes.
     * 
     */
    private Boolean syncFromTemplate;
    /**
     * @return Indicates the custom expression, which can combine concat and substring operations with literals and with any attribute of the Oracle Identity Cloud Service User
     * 
     */
    private String userNameFormExpression;
    /**
     * @return Format for generating a username.  This value can be Username or Email Address; any other value will be treated as a custom expression.  A custom expression may combine &#39;concat&#39; and &#39;substring&#39; operations with literals and with any attribute of the Oracle Identity Cloud Service user.
     * 
     */
    private String userNameFormTemplate;

    private GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp() {}
    /**
     * @return FormFill Application Configuration CLOB which has to be maintained in Form-Fill APP for legacy code to do Form-Fill injection
     * 
     */
    public String configuration() {
        return this.configuration;
    }
    /**
     * @return Indicates how FormFill obtains the username and password of the account that FormFill will use to sign into the target App.
     * 
     */
    public String formCredMethod() {
        return this.formCredMethod;
    }
    /**
     * @return Credential Sharing Group to which this form-fill application belongs.
     * 
     */
    public String formCredentialSharingGroupId() {
        return this.formCredentialSharingGroupId;
    }
    /**
     * @return A list of application-formURLs that FormFill should match against any formUrl that the user-specifies when signing in to the target service.  Each item in the list also indicates how FormFill should interpret that formUrl.
     * 
     */
    public List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches() {
        return this.formFillUrlMatches;
    }
    /**
     * @return Type of the FormFill application like WebApplication, MainFrameApplication, WindowsApplication. Initially, we will support only WebApplication.
     * 
     */
    public String formType() {
        return this.formType;
    }
    /**
     * @return If true, indicates that system is allowed to show the password in plain-text for this account after re-authentication.
     * 
     */
    public Boolean revealPasswordOnForm() {
        return this.revealPasswordOnForm;
    }
    /**
     * @return If true, indicates that each of the Form-Fill-related attributes that can be inherited from the template actually will be inherited from the template. If false, indicates that the AppTemplate disabled inheritance for these Form-Fill-related attributes.
     * 
     */
    public Boolean syncFromTemplate() {
        return this.syncFromTemplate;
    }
    /**
     * @return Indicates the custom expression, which can combine concat and substring operations with literals and with any attribute of the Oracle Identity Cloud Service User
     * 
     */
    public String userNameFormExpression() {
        return this.userNameFormExpression;
    }
    /**
     * @return Format for generating a username.  This value can be Username or Email Address; any other value will be treated as a custom expression.  A custom expression may combine &#39;concat&#39; and &#39;substring&#39; operations with literals and with any attribute of the Oracle Identity Cloud Service user.
     * 
     */
    public String userNameFormTemplate() {
        return this.userNameFormTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configuration;
        private String formCredMethod;
        private String formCredentialSharingGroupId;
        private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches;
        private String formType;
        private Boolean revealPasswordOnForm;
        private Boolean syncFromTemplate;
        private String userNameFormExpression;
        private String userNameFormTemplate;
        public Builder() {}
        public Builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.formCredMethod = defaults.formCredMethod;
    	      this.formCredentialSharingGroupId = defaults.formCredentialSharingGroupId;
    	      this.formFillUrlMatches = defaults.formFillUrlMatches;
    	      this.formType = defaults.formType;
    	      this.revealPasswordOnForm = defaults.revealPasswordOnForm;
    	      this.syncFromTemplate = defaults.syncFromTemplate;
    	      this.userNameFormExpression = defaults.userNameFormExpression;
    	      this.userNameFormTemplate = defaults.userNameFormTemplate;
        }

        @CustomType.Setter
        public Builder configuration(String configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder formCredMethod(String formCredMethod) {
            if (formCredMethod == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "formCredMethod");
            }
            this.formCredMethod = formCredMethod;
            return this;
        }
        @CustomType.Setter
        public Builder formCredentialSharingGroupId(String formCredentialSharingGroupId) {
            if (formCredentialSharingGroupId == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "formCredentialSharingGroupId");
            }
            this.formCredentialSharingGroupId = formCredentialSharingGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder formFillUrlMatches(List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch> formFillUrlMatches) {
            if (formFillUrlMatches == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "formFillUrlMatches");
            }
            this.formFillUrlMatches = formFillUrlMatches;
            return this;
        }
        public Builder formFillUrlMatches(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch... formFillUrlMatches) {
            return formFillUrlMatches(List.of(formFillUrlMatches));
        }
        @CustomType.Setter
        public Builder formType(String formType) {
            if (formType == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "formType");
            }
            this.formType = formType;
            return this;
        }
        @CustomType.Setter
        public Builder revealPasswordOnForm(Boolean revealPasswordOnForm) {
            if (revealPasswordOnForm == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "revealPasswordOnForm");
            }
            this.revealPasswordOnForm = revealPasswordOnForm;
            return this;
        }
        @CustomType.Setter
        public Builder syncFromTemplate(Boolean syncFromTemplate) {
            if (syncFromTemplate == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "syncFromTemplate");
            }
            this.syncFromTemplate = syncFromTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder userNameFormExpression(String userNameFormExpression) {
            if (userNameFormExpression == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "userNameFormExpression");
            }
            this.userNameFormExpression = userNameFormExpression;
            return this;
        }
        @CustomType.Setter
        public Builder userNameFormTemplate(String userNameFormTemplate) {
            if (userNameFormTemplate == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp", "userNameFormTemplate");
            }
            this.userNameFormTemplate = userNameFormTemplate;
            return this;
        }
        public GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp build() {
            final var _resultValue = new GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp();
            _resultValue.configuration = configuration;
            _resultValue.formCredMethod = formCredMethod;
            _resultValue.formCredentialSharingGroupId = formCredentialSharingGroupId;
            _resultValue.formFillUrlMatches = formFillUrlMatches;
            _resultValue.formType = formType;
            _resultValue.revealPasswordOnForm = revealPasswordOnForm;
            _resultValue.syncFromTemplate = syncFromTemplate;
            _resultValue.userNameFormExpression = userNameFormExpression;
            _resultValue.userNameFormTemplate = userNameFormTemplate;
            return _resultValue;
        }
    }
}
