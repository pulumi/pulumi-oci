// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    /**
     * @return The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     */
    private String assertionConsumerUrl;
    /**
     * @return If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private Boolean encryptAssertion;
    /**
     * @return This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     */
    private String encryptionAlgorithm;
    /**
     * @return This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private String encryptionCertificate;
    /**
     * @return Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     */
    private String federationProtocol;
    /**
     * @return Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
    /**
     * @return Hok Assertion Consumer Service Url
     * 
     */
    private String hokAcsUrl;
    /**
     * @return If enabled, then the SAML Service supports Hok for this App.
     * 
     */
    private Boolean hokRequired;
    /**
     * @return If true, then the signing certificate is included in the signature.
     * 
     */
    private Boolean includeSigningCertInSignature;
    /**
     * @return This attribute indicates the key encryption algorithm.
     * 
     */
    private String keyEncryptionAlgorithm;
    /**
     * @return Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     */
    private String lastNotificationSentTime;
    /**
     * @return This attribute represents the HTTP binding that would be used while logout.
     * 
     */
    private String logoutBinding;
    /**
     * @return If true, then the SAML Service supports logout for this App.
     * 
     */
    private Boolean logoutEnabled;
    /**
     * @return The URL to which the partner sends the logout request.
     * 
     */
    private String logoutRequestUrl;
    /**
     * @return The URL to which the partner sends the logout response.
     * 
     */
    private String logoutResponseUrl;
    /**
     * @return This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     */
    private String metadata;
    /**
     * @return This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     */
    private String nameIdFormat;
    /**
     * @return **Deprecated Since: 18.2.2**
     * 
     */
    private String nameIdUserstoreAttribute;
    /**
     * @return Use to construct the outgoing SAML attributes
     * 
     */
    private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
    /**
     * @return The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    private String partnerProviderId;
    /**
     * @return The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    private String partnerProviderPattern;
    /**
     * @return Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     */
    private String signResponseOrAssertion;
    /**
     * @return This attribute represents the algorithm used to hash the signature.
     * 
     */
    private String signatureHashAlgorithm;
    /**
     * @return This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     */
    private String signingCertificate;
    /**
     * @return This attribute represents the Succinct ID.
     * 
     */
    private String succinctId;
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     */
    private String tenantProviderId;
    /**
     * @return Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;

    private GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp() {}
    /**
     * @return The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     */
    public String assertionConsumerUrl() {
        return this.assertionConsumerUrl;
    }
    /**
     * @return If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public Boolean encryptAssertion() {
        return this.encryptAssertion;
    }
    /**
     * @return This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     */
    public String encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }
    /**
     * @return This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public String encryptionCertificate() {
        return this.encryptionCertificate;
    }
    /**
     * @return Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     */
    public String federationProtocol() {
        return this.federationProtocol;
    }
    /**
     * @return Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes() {
        return this.groupAssertionAttributes;
    }
    /**
     * @return Hok Assertion Consumer Service Url
     * 
     */
    public String hokAcsUrl() {
        return this.hokAcsUrl;
    }
    /**
     * @return If enabled, then the SAML Service supports Hok for this App.
     * 
     */
    public Boolean hokRequired() {
        return this.hokRequired;
    }
    /**
     * @return If true, then the signing certificate is included in the signature.
     * 
     */
    public Boolean includeSigningCertInSignature() {
        return this.includeSigningCertInSignature;
    }
    /**
     * @return This attribute indicates the key encryption algorithm.
     * 
     */
    public String keyEncryptionAlgorithm() {
        return this.keyEncryptionAlgorithm;
    }
    /**
     * @return Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     */
    public String lastNotificationSentTime() {
        return this.lastNotificationSentTime;
    }
    /**
     * @return This attribute represents the HTTP binding that would be used while logout.
     * 
     */
    public String logoutBinding() {
        return this.logoutBinding;
    }
    /**
     * @return If true, then the SAML Service supports logout for this App.
     * 
     */
    public Boolean logoutEnabled() {
        return this.logoutEnabled;
    }
    /**
     * @return The URL to which the partner sends the logout request.
     * 
     */
    public String logoutRequestUrl() {
        return this.logoutRequestUrl;
    }
    /**
     * @return The URL to which the partner sends the logout response.
     * 
     */
    public String logoutResponseUrl() {
        return this.logoutResponseUrl;
    }
    /**
     * @return This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     */
    public String nameIdFormat() {
        return this.nameIdFormat;
    }
    /**
     * @return **Deprecated Since: 18.2.2**
     * 
     */
    public String nameIdUserstoreAttribute() {
        return this.nameIdUserstoreAttribute;
    }
    /**
     * @return Use to construct the outgoing SAML attributes
     * 
     */
    public List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes() {
        return this.outboundAssertionAttributes;
    }
    /**
     * @return The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    public String partnerProviderId() {
        return this.partnerProviderId;
    }
    /**
     * @return The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    public String partnerProviderPattern() {
        return this.partnerProviderPattern;
    }
    /**
     * @return Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     */
    public String signResponseOrAssertion() {
        return this.signResponseOrAssertion;
    }
    /**
     * @return This attribute represents the algorithm used to hash the signature.
     * 
     */
    public String signatureHashAlgorithm() {
        return this.signatureHashAlgorithm;
    }
    /**
     * @return This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     */
    public String signingCertificate() {
        return this.signingCertificate;
    }
    /**
     * @return This attribute represents the Succinct ID.
     * 
     */
    public String succinctId() {
        return this.succinctId;
    }
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     */
    public String tenantProviderId() {
        return this.tenantProviderId;
    }
    /**
     * @return Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes() {
        return this.userAssertionAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assertionConsumerUrl;
        private Boolean encryptAssertion;
        private String encryptionAlgorithm;
        private String encryptionCertificate;
        private String federationProtocol;
        private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
        private String hokAcsUrl;
        private Boolean hokRequired;
        private Boolean includeSigningCertInSignature;
        private String keyEncryptionAlgorithm;
        private String lastNotificationSentTime;
        private String logoutBinding;
        private Boolean logoutEnabled;
        private String logoutRequestUrl;
        private String logoutResponseUrl;
        private String metadata;
        private String nameIdFormat;
        private String nameIdUserstoreAttribute;
        private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
        private String partnerProviderId;
        private String partnerProviderPattern;
        private String signResponseOrAssertion;
        private String signatureHashAlgorithm;
        private String signingCertificate;
        private String succinctId;
        private String tenantProviderId;
        private List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;
        public Builder() {}
        public Builder(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionConsumerUrl = defaults.assertionConsumerUrl;
    	      this.encryptAssertion = defaults.encryptAssertion;
    	      this.encryptionAlgorithm = defaults.encryptionAlgorithm;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.federationProtocol = defaults.federationProtocol;
    	      this.groupAssertionAttributes = defaults.groupAssertionAttributes;
    	      this.hokAcsUrl = defaults.hokAcsUrl;
    	      this.hokRequired = defaults.hokRequired;
    	      this.includeSigningCertInSignature = defaults.includeSigningCertInSignature;
    	      this.keyEncryptionAlgorithm = defaults.keyEncryptionAlgorithm;
    	      this.lastNotificationSentTime = defaults.lastNotificationSentTime;
    	      this.logoutBinding = defaults.logoutBinding;
    	      this.logoutEnabled = defaults.logoutEnabled;
    	      this.logoutRequestUrl = defaults.logoutRequestUrl;
    	      this.logoutResponseUrl = defaults.logoutResponseUrl;
    	      this.metadata = defaults.metadata;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.nameIdUserstoreAttribute = defaults.nameIdUserstoreAttribute;
    	      this.outboundAssertionAttributes = defaults.outboundAssertionAttributes;
    	      this.partnerProviderId = defaults.partnerProviderId;
    	      this.partnerProviderPattern = defaults.partnerProviderPattern;
    	      this.signResponseOrAssertion = defaults.signResponseOrAssertion;
    	      this.signatureHashAlgorithm = defaults.signatureHashAlgorithm;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.succinctId = defaults.succinctId;
    	      this.tenantProviderId = defaults.tenantProviderId;
    	      this.userAssertionAttributes = defaults.userAssertionAttributes;
        }

        @CustomType.Setter
        public Builder assertionConsumerUrl(String assertionConsumerUrl) {
            if (assertionConsumerUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "assertionConsumerUrl");
            }
            this.assertionConsumerUrl = assertionConsumerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder encryptAssertion(Boolean encryptAssertion) {
            if (encryptAssertion == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "encryptAssertion");
            }
            this.encryptAssertion = encryptAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            if (encryptionAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "encryptionAlgorithm");
            }
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(String encryptionCertificate) {
            if (encryptionCertificate == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "encryptionCertificate");
            }
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder federationProtocol(String federationProtocol) {
            if (federationProtocol == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "federationProtocol");
            }
            this.federationProtocol = federationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder groupAssertionAttributes(List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes) {
            if (groupAssertionAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "groupAssertionAttributes");
            }
            this.groupAssertionAttributes = groupAssertionAttributes;
            return this;
        }
        public Builder groupAssertionAttributes(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute... groupAssertionAttributes) {
            return groupAssertionAttributes(List.of(groupAssertionAttributes));
        }
        @CustomType.Setter
        public Builder hokAcsUrl(String hokAcsUrl) {
            if (hokAcsUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "hokAcsUrl");
            }
            this.hokAcsUrl = hokAcsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder hokRequired(Boolean hokRequired) {
            if (hokRequired == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "hokRequired");
            }
            this.hokRequired = hokRequired;
            return this;
        }
        @CustomType.Setter
        public Builder includeSigningCertInSignature(Boolean includeSigningCertInSignature) {
            if (includeSigningCertInSignature == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "includeSigningCertInSignature");
            }
            this.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }
        @CustomType.Setter
        public Builder keyEncryptionAlgorithm(String keyEncryptionAlgorithm) {
            if (keyEncryptionAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "keyEncryptionAlgorithm");
            }
            this.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder lastNotificationSentTime(String lastNotificationSentTime) {
            if (lastNotificationSentTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "lastNotificationSentTime");
            }
            this.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutBinding(String logoutBinding) {
            if (logoutBinding == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "logoutBinding");
            }
            this.logoutBinding = logoutBinding;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEnabled(Boolean logoutEnabled) {
            if (logoutEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "logoutEnabled");
            }
            this.logoutEnabled = logoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logoutRequestUrl(String logoutRequestUrl) {
            if (logoutRequestUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "logoutRequestUrl");
            }
            this.logoutRequestUrl = logoutRequestUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logoutResponseUrl(String logoutResponseUrl) {
            if (logoutResponseUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "logoutResponseUrl");
            }
            this.logoutResponseUrl = logoutResponseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdFormat(String nameIdFormat) {
            if (nameIdFormat == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "nameIdFormat");
            }
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdUserstoreAttribute(String nameIdUserstoreAttribute) {
            if (nameIdUserstoreAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "nameIdUserstoreAttribute");
            }
            this.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder outboundAssertionAttributes(List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes) {
            if (outboundAssertionAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "outboundAssertionAttributes");
            }
            this.outboundAssertionAttributes = outboundAssertionAttributes;
            return this;
        }
        public Builder outboundAssertionAttributes(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute... outboundAssertionAttributes) {
            return outboundAssertionAttributes(List.of(outboundAssertionAttributes));
        }
        @CustomType.Setter
        public Builder partnerProviderId(String partnerProviderId) {
            if (partnerProviderId == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "partnerProviderId");
            }
            this.partnerProviderId = partnerProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder partnerProviderPattern(String partnerProviderPattern) {
            if (partnerProviderPattern == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "partnerProviderPattern");
            }
            this.partnerProviderPattern = partnerProviderPattern;
            return this;
        }
        @CustomType.Setter
        public Builder signResponseOrAssertion(String signResponseOrAssertion) {
            if (signResponseOrAssertion == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "signResponseOrAssertion");
            }
            this.signResponseOrAssertion = signResponseOrAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder signatureHashAlgorithm(String signatureHashAlgorithm) {
            if (signatureHashAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "signatureHashAlgorithm");
            }
            this.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(String signingCertificate) {
            if (signingCertificate == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "signingCertificate");
            }
            this.signingCertificate = signingCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder succinctId(String succinctId) {
            if (succinctId == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "succinctId");
            }
            this.succinctId = succinctId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantProviderId(String tenantProviderId) {
            if (tenantProviderId == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "tenantProviderId");
            }
            this.tenantProviderId = tenantProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssertionAttributes(List<GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes) {
            if (userAssertionAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp", "userAssertionAttributes");
            }
            this.userAssertionAttributes = userAssertionAttributes;
            return this;
        }
        public Builder userAssertionAttributes(GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute... userAssertionAttributes) {
            return userAssertionAttributes(List.of(userAssertionAttributes));
        }
        public GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp build() {
            final var _resultValue = new GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp();
            _resultValue.assertionConsumerUrl = assertionConsumerUrl;
            _resultValue.encryptAssertion = encryptAssertion;
            _resultValue.encryptionAlgorithm = encryptionAlgorithm;
            _resultValue.encryptionCertificate = encryptionCertificate;
            _resultValue.federationProtocol = federationProtocol;
            _resultValue.groupAssertionAttributes = groupAssertionAttributes;
            _resultValue.hokAcsUrl = hokAcsUrl;
            _resultValue.hokRequired = hokRequired;
            _resultValue.includeSigningCertInSignature = includeSigningCertInSignature;
            _resultValue.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            _resultValue.lastNotificationSentTime = lastNotificationSentTime;
            _resultValue.logoutBinding = logoutBinding;
            _resultValue.logoutEnabled = logoutEnabled;
            _resultValue.logoutRequestUrl = logoutRequestUrl;
            _resultValue.logoutResponseUrl = logoutResponseUrl;
            _resultValue.metadata = metadata;
            _resultValue.nameIdFormat = nameIdFormat;
            _resultValue.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            _resultValue.outboundAssertionAttributes = outboundAssertionAttributes;
            _resultValue.partnerProviderId = partnerProviderId;
            _resultValue.partnerProviderPattern = partnerProviderPattern;
            _resultValue.signResponseOrAssertion = signResponseOrAssertion;
            _resultValue.signatureHashAlgorithm = signatureHashAlgorithm;
            _resultValue.signingCertificate = signingCertificate;
            _resultValue.succinctId = succinctId;
            _resultValue.tenantProviderId = tenantProviderId;
            _resultValue.userAssertionAttributes = userAssertionAttributes;
            return _resultValue;
        }
    }
}
