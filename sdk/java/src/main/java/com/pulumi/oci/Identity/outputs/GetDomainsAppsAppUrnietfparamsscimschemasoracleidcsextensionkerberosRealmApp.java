// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp {
    /**
     * @return The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
     * 
     */
    private String defaultEncryptionSaltType;
    /**
     * @return The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
     * 
     */
    private String masterKey;
    /**
     * @return Max Renewable Age in seconds
     * 
     */
    private Integer maxRenewableAge;
    /**
     * @return Max Ticket Life in seconds
     * 
     */
    private Integer maxTicketLife;
    /**
     * @return The name of the Kerberos Realm that this App uses for authentication.
     * 
     */
    private String realmName;
    /**
     * @return The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
     * 
     */
    private List<String> supportedEncryptionSaltTypes;
    /**
     * @return Ticket Flags
     * 
     */
    private Integer ticketFlags;

    private GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp() {}
    /**
     * @return The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
     * 
     */
    public String defaultEncryptionSaltType() {
        return this.defaultEncryptionSaltType;
    }
    /**
     * @return The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
     * 
     */
    public String masterKey() {
        return this.masterKey;
    }
    /**
     * @return Max Renewable Age in seconds
     * 
     */
    public Integer maxRenewableAge() {
        return this.maxRenewableAge;
    }
    /**
     * @return Max Ticket Life in seconds
     * 
     */
    public Integer maxTicketLife() {
        return this.maxTicketLife;
    }
    /**
     * @return The name of the Kerberos Realm that this App uses for authentication.
     * 
     */
    public String realmName() {
        return this.realmName;
    }
    /**
     * @return The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
     * 
     */
    public List<String> supportedEncryptionSaltTypes() {
        return this.supportedEncryptionSaltTypes;
    }
    /**
     * @return Ticket Flags
     * 
     */
    public Integer ticketFlags() {
        return this.ticketFlags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultEncryptionSaltType;
        private String masterKey;
        private Integer maxRenewableAge;
        private Integer maxTicketLife;
        private String realmName;
        private List<String> supportedEncryptionSaltTypes;
        private Integer ticketFlags;
        public Builder() {}
        public Builder(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultEncryptionSaltType = defaults.defaultEncryptionSaltType;
    	      this.masterKey = defaults.masterKey;
    	      this.maxRenewableAge = defaults.maxRenewableAge;
    	      this.maxTicketLife = defaults.maxTicketLife;
    	      this.realmName = defaults.realmName;
    	      this.supportedEncryptionSaltTypes = defaults.supportedEncryptionSaltTypes;
    	      this.ticketFlags = defaults.ticketFlags;
        }

        @CustomType.Setter
        public Builder defaultEncryptionSaltType(String defaultEncryptionSaltType) {
            if (defaultEncryptionSaltType == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "defaultEncryptionSaltType");
            }
            this.defaultEncryptionSaltType = defaultEncryptionSaltType;
            return this;
        }
        @CustomType.Setter
        public Builder masterKey(String masterKey) {
            if (masterKey == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "masterKey");
            }
            this.masterKey = masterKey;
            return this;
        }
        @CustomType.Setter
        public Builder maxRenewableAge(Integer maxRenewableAge) {
            if (maxRenewableAge == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "maxRenewableAge");
            }
            this.maxRenewableAge = maxRenewableAge;
            return this;
        }
        @CustomType.Setter
        public Builder maxTicketLife(Integer maxTicketLife) {
            if (maxTicketLife == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "maxTicketLife");
            }
            this.maxTicketLife = maxTicketLife;
            return this;
        }
        @CustomType.Setter
        public Builder realmName(String realmName) {
            if (realmName == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "realmName");
            }
            this.realmName = realmName;
            return this;
        }
        @CustomType.Setter
        public Builder supportedEncryptionSaltTypes(List<String> supportedEncryptionSaltTypes) {
            if (supportedEncryptionSaltTypes == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "supportedEncryptionSaltTypes");
            }
            this.supportedEncryptionSaltTypes = supportedEncryptionSaltTypes;
            return this;
        }
        public Builder supportedEncryptionSaltTypes(String... supportedEncryptionSaltTypes) {
            return supportedEncryptionSaltTypes(List.of(supportedEncryptionSaltTypes));
        }
        @CustomType.Setter
        public Builder ticketFlags(Integer ticketFlags) {
            if (ticketFlags == null) {
              throw new MissingRequiredPropertyException("GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp", "ticketFlags");
            }
            this.ticketFlags = ticketFlags;
            return this;
        }
        public GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp build() {
            final var _resultValue = new GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp();
            _resultValue.defaultEncryptionSaltType = defaultEncryptionSaltType;
            _resultValue.masterKey = masterKey;
            _resultValue.maxRenewableAge = maxRenewableAge;
            _resultValue.maxTicketLife = maxTicketLife;
            _resultValue.realmName = realmName;
            _resultValue.supportedEncryptionSaltTypes = supportedEncryptionSaltTypes;
            _resultValue.ticketFlags = ticketFlags;
            return _resultValue;
        }
    }
}
