// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    /**
     * @return The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     */
    private @Nullable String assertionConsumerUrl;
    /**
     * @return If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private @Nullable Boolean encryptAssertion;
    /**
     * @return This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     */
    private @Nullable String encryptionAlgorithm;
    /**
     * @return This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private @Nullable String encryptionCertificate;
    /**
     * @return Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     */
    private @Nullable String federationProtocol;
    /**
     * @return Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
    /**
     * @return Hok Assertion Consumer Service Url
     * 
     */
    private @Nullable String hokAcsUrl;
    /**
     * @return If enabled, then the SAML Service supports Hok for this App.
     * 
     */
    private @Nullable Boolean hokRequired;
    /**
     * @return If true, then the signing certificate is included in the signature.
     * 
     */
    private @Nullable Boolean includeSigningCertInSignature;
    /**
     * @return This attribute indicates the key encryption algorithm.
     * 
     */
    private @Nullable String keyEncryptionAlgorithm;
    /**
     * @return Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     */
    private @Nullable String lastNotificationSentTime;
    /**
     * @return This attribute represents the HTTP binding that would be used while logout.
     * 
     */
    private @Nullable String logoutBinding;
    /**
     * @return If true, then the SAML Service supports logout for this App.
     * 
     */
    private @Nullable Boolean logoutEnabled;
    /**
     * @return The URL to which the partner sends the logout request.
     * 
     */
    private @Nullable String logoutRequestUrl;
    /**
     * @return The URL to which the partner sends the logout response.
     * 
     */
    private @Nullable String logoutResponseUrl;
    /**
     * @return This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     */
    private @Nullable String metadata;
    /**
     * @return This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     */
    private @Nullable String nameIdFormat;
    /**
     * @return **Deprecated Since: 18.2.2**
     * 
     */
    private @Nullable String nameIdUserstoreAttribute;
    /**
     * @return Use to construct the outgoing SAML attributes
     * 
     */
    private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
    /**
     * @return The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    private @Nullable String partnerProviderId;
    /**
     * @return The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    private @Nullable String partnerProviderPattern;
    /**
     * @return Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     */
    private @Nullable String signResponseOrAssertion;
    /**
     * @return This attribute represents the algorithm used to hash the signature.
     * 
     */
    private @Nullable String signatureHashAlgorithm;
    /**
     * @return This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     */
    private @Nullable String signingCertificate;
    /**
     * @return This attribute represents the Succinct ID.
     * 
     */
    private @Nullable String succinctId;
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     */
    private @Nullable String tenantProviderId;
    /**
     * @return Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;

    private GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp() {}
    /**
     * @return The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
     * 
     */
    public Optional<String> assertionConsumerUrl() {
        return Optional.ofNullable(this.assertionConsumerUrl);
    }
    /**
     * @return If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public Optional<Boolean> encryptAssertion() {
        return Optional.ofNullable(this.encryptAssertion);
    }
    /**
     * @return This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
     * 
     */
    public Optional<String> encryptionAlgorithm() {
        return Optional.ofNullable(this.encryptionAlgorithm);
    }
    /**
     * @return This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public Optional<String> encryptionCertificate() {
        return Optional.ofNullable(this.encryptionCertificate);
    }
    /**
     * @return Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
     * 
     */
    public Optional<String> federationProtocol() {
        return Optional.ofNullable(this.federationProtocol);
    }
    /**
     * @return Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes() {
        return this.groupAssertionAttributes == null ? List.of() : this.groupAssertionAttributes;
    }
    /**
     * @return Hok Assertion Consumer Service Url
     * 
     */
    public Optional<String> hokAcsUrl() {
        return Optional.ofNullable(this.hokAcsUrl);
    }
    /**
     * @return If enabled, then the SAML Service supports Hok for this App.
     * 
     */
    public Optional<Boolean> hokRequired() {
        return Optional.ofNullable(this.hokRequired);
    }
    /**
     * @return If true, then the signing certificate is included in the signature.
     * 
     */
    public Optional<Boolean> includeSigningCertInSignature() {
        return Optional.ofNullable(this.includeSigningCertInSignature);
    }
    /**
     * @return This attribute indicates the key encryption algorithm.
     * 
     */
    public Optional<String> keyEncryptionAlgorithm() {
        return Optional.ofNullable(this.keyEncryptionAlgorithm);
    }
    /**
     * @return Records the notification timestamp for the SP whose signing certificate is about to expire.
     * 
     */
    public Optional<String> lastNotificationSentTime() {
        return Optional.ofNullable(this.lastNotificationSentTime);
    }
    /**
     * @return This attribute represents the HTTP binding that would be used while logout.
     * 
     */
    public Optional<String> logoutBinding() {
        return Optional.ofNullable(this.logoutBinding);
    }
    /**
     * @return If true, then the SAML Service supports logout for this App.
     * 
     */
    public Optional<Boolean> logoutEnabled() {
        return Optional.ofNullable(this.logoutEnabled);
    }
    /**
     * @return The URL to which the partner sends the logout request.
     * 
     */
    public Optional<String> logoutRequestUrl() {
        return Optional.ofNullable(this.logoutRequestUrl);
    }
    /**
     * @return The URL to which the partner sends the logout response.
     * 
     */
    public Optional<String> logoutResponseUrl() {
        return Optional.ofNullable(this.logoutResponseUrl);
    }
    /**
     * @return This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
     * 
     */
    public Optional<String> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
     * 
     */
    public Optional<String> nameIdFormat() {
        return Optional.ofNullable(this.nameIdFormat);
    }
    /**
     * @return **Deprecated Since: 18.2.2**
     * 
     */
    public Optional<String> nameIdUserstoreAttribute() {
        return Optional.ofNullable(this.nameIdUserstoreAttribute);
    }
    /**
     * @return Use to construct the outgoing SAML attributes
     * 
     */
    public List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes() {
        return this.outboundAssertionAttributes == null ? List.of() : this.outboundAssertionAttributes;
    }
    /**
     * @return The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    public Optional<String> partnerProviderId() {
        return Optional.ofNullable(this.partnerProviderId);
    }
    /**
     * @return The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
     * 
     */
    public Optional<String> partnerProviderPattern() {
        return Optional.ofNullable(this.partnerProviderPattern);
    }
    /**
     * @return Indicates which part of the response should be signed.  A value of \&#34;Assertion\&#34; indicates that the Assertion should be signed.  A value of \&#34;Response\&#34; indicates that the SSO Response should be signed. A value of \&#34;AssertionAndResponse\&#34; indicates that both the Assertion and the SSO Response should be signed.
     * 
     */
    public Optional<String> signResponseOrAssertion() {
        return Optional.ofNullable(this.signResponseOrAssertion);
    }
    /**
     * @return This attribute represents the algorithm used to hash the signature.
     * 
     */
    public Optional<String> signatureHashAlgorithm() {
        return Optional.ofNullable(this.signatureHashAlgorithm);
    }
    /**
     * @return This attribute represents the signing certificate that an App uses to verify the signed authentication request.
     * 
     */
    public Optional<String> signingCertificate() {
        return Optional.ofNullable(this.signingCertificate);
    }
    /**
     * @return This attribute represents the Succinct ID.
     * 
     */
    public Optional<String> succinctId() {
        return Optional.ofNullable(this.succinctId);
    }
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
     * 
     */
    public Optional<String> tenantProviderId() {
        return Optional.ofNullable(this.tenantProviderId);
    }
    /**
     * @return Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
     * 
     */
    public List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes() {
        return this.userAssertionAttributes == null ? List.of() : this.userAssertionAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assertionConsumerUrl;
        private @Nullable Boolean encryptAssertion;
        private @Nullable String encryptionAlgorithm;
        private @Nullable String encryptionCertificate;
        private @Nullable String federationProtocol;
        private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes;
        private @Nullable String hokAcsUrl;
        private @Nullable Boolean hokRequired;
        private @Nullable Boolean includeSigningCertInSignature;
        private @Nullable String keyEncryptionAlgorithm;
        private @Nullable String lastNotificationSentTime;
        private @Nullable String logoutBinding;
        private @Nullable Boolean logoutEnabled;
        private @Nullable String logoutRequestUrl;
        private @Nullable String logoutResponseUrl;
        private @Nullable String metadata;
        private @Nullable String nameIdFormat;
        private @Nullable String nameIdUserstoreAttribute;
        private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes;
        private @Nullable String partnerProviderId;
        private @Nullable String partnerProviderPattern;
        private @Nullable String signResponseOrAssertion;
        private @Nullable String signatureHashAlgorithm;
        private @Nullable String signingCertificate;
        private @Nullable String succinctId;
        private @Nullable String tenantProviderId;
        private @Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes;
        public Builder() {}
        public Builder(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionConsumerUrl = defaults.assertionConsumerUrl;
    	      this.encryptAssertion = defaults.encryptAssertion;
    	      this.encryptionAlgorithm = defaults.encryptionAlgorithm;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.federationProtocol = defaults.federationProtocol;
    	      this.groupAssertionAttributes = defaults.groupAssertionAttributes;
    	      this.hokAcsUrl = defaults.hokAcsUrl;
    	      this.hokRequired = defaults.hokRequired;
    	      this.includeSigningCertInSignature = defaults.includeSigningCertInSignature;
    	      this.keyEncryptionAlgorithm = defaults.keyEncryptionAlgorithm;
    	      this.lastNotificationSentTime = defaults.lastNotificationSentTime;
    	      this.logoutBinding = defaults.logoutBinding;
    	      this.logoutEnabled = defaults.logoutEnabled;
    	      this.logoutRequestUrl = defaults.logoutRequestUrl;
    	      this.logoutResponseUrl = defaults.logoutResponseUrl;
    	      this.metadata = defaults.metadata;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.nameIdUserstoreAttribute = defaults.nameIdUserstoreAttribute;
    	      this.outboundAssertionAttributes = defaults.outboundAssertionAttributes;
    	      this.partnerProviderId = defaults.partnerProviderId;
    	      this.partnerProviderPattern = defaults.partnerProviderPattern;
    	      this.signResponseOrAssertion = defaults.signResponseOrAssertion;
    	      this.signatureHashAlgorithm = defaults.signatureHashAlgorithm;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.succinctId = defaults.succinctId;
    	      this.tenantProviderId = defaults.tenantProviderId;
    	      this.userAssertionAttributes = defaults.userAssertionAttributes;
        }

        @CustomType.Setter
        public Builder assertionConsumerUrl(@Nullable String assertionConsumerUrl) {
            this.assertionConsumerUrl = assertionConsumerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder encryptAssertion(@Nullable Boolean encryptAssertion) {
            this.encryptAssertion = encryptAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionAlgorithm(@Nullable String encryptionAlgorithm) {
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(@Nullable String encryptionCertificate) {
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder federationProtocol(@Nullable String federationProtocol) {
            this.federationProtocol = federationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder groupAssertionAttributes(@Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes) {
            this.groupAssertionAttributes = groupAssertionAttributes;
            return this;
        }
        public Builder groupAssertionAttributes(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute... groupAssertionAttributes) {
            return groupAssertionAttributes(List.of(groupAssertionAttributes));
        }
        @CustomType.Setter
        public Builder hokAcsUrl(@Nullable String hokAcsUrl) {
            this.hokAcsUrl = hokAcsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder hokRequired(@Nullable Boolean hokRequired) {
            this.hokRequired = hokRequired;
            return this;
        }
        @CustomType.Setter
        public Builder includeSigningCertInSignature(@Nullable Boolean includeSigningCertInSignature) {
            this.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }
        @CustomType.Setter
        public Builder keyEncryptionAlgorithm(@Nullable String keyEncryptionAlgorithm) {
            this.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder lastNotificationSentTime(@Nullable String lastNotificationSentTime) {
            this.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutBinding(@Nullable String logoutBinding) {
            this.logoutBinding = logoutBinding;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEnabled(@Nullable Boolean logoutEnabled) {
            this.logoutEnabled = logoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logoutRequestUrl(@Nullable String logoutRequestUrl) {
            this.logoutRequestUrl = logoutRequestUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logoutResponseUrl(@Nullable String logoutResponseUrl) {
            this.logoutResponseUrl = logoutResponseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable String metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdFormat(@Nullable String nameIdFormat) {
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdUserstoreAttribute(@Nullable String nameIdUserstoreAttribute) {
            this.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder outboundAssertionAttributes(@Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes) {
            this.outboundAssertionAttributes = outboundAssertionAttributes;
            return this;
        }
        public Builder outboundAssertionAttributes(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute... outboundAssertionAttributes) {
            return outboundAssertionAttributes(List.of(outboundAssertionAttributes));
        }
        @CustomType.Setter
        public Builder partnerProviderId(@Nullable String partnerProviderId) {
            this.partnerProviderId = partnerProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder partnerProviderPattern(@Nullable String partnerProviderPattern) {
            this.partnerProviderPattern = partnerProviderPattern;
            return this;
        }
        @CustomType.Setter
        public Builder signResponseOrAssertion(@Nullable String signResponseOrAssertion) {
            this.signResponseOrAssertion = signResponseOrAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder signatureHashAlgorithm(@Nullable String signatureHashAlgorithm) {
            this.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(@Nullable String signingCertificate) {
            this.signingCertificate = signingCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder succinctId(@Nullable String succinctId) {
            this.succinctId = succinctId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantProviderId(@Nullable String tenantProviderId) {
            this.tenantProviderId = tenantProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssertionAttributes(@Nullable List<GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes) {
            this.userAssertionAttributes = userAssertionAttributes;
            return this;
        }
        public Builder userAssertionAttributes(GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute... userAssertionAttributes) {
            return userAssertionAttributes(List.of(userAssertionAttributes));
        }
        public GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp build() {
            final var o = new GetDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp();
            o.assertionConsumerUrl = assertionConsumerUrl;
            o.encryptAssertion = encryptAssertion;
            o.encryptionAlgorithm = encryptionAlgorithm;
            o.encryptionCertificate = encryptionCertificate;
            o.federationProtocol = federationProtocol;
            o.groupAssertionAttributes = groupAssertionAttributes;
            o.hokAcsUrl = hokAcsUrl;
            o.hokRequired = hokRequired;
            o.includeSigningCertInSignature = includeSigningCertInSignature;
            o.keyEncryptionAlgorithm = keyEncryptionAlgorithm;
            o.lastNotificationSentTime = lastNotificationSentTime;
            o.logoutBinding = logoutBinding;
            o.logoutEnabled = logoutEnabled;
            o.logoutRequestUrl = logoutRequestUrl;
            o.logoutResponseUrl = logoutResponseUrl;
            o.metadata = metadata;
            o.nameIdFormat = nameIdFormat;
            o.nameIdUserstoreAttribute = nameIdUserstoreAttribute;
            o.outboundAssertionAttributes = outboundAssertionAttributes;
            o.partnerProviderId = partnerProviderId;
            o.partnerProviderPattern = partnerProviderPattern;
            o.signResponseOrAssertion = signResponseOrAssertion;
            o.signatureHashAlgorithm = signatureHashAlgorithm;
            o.signingCertificate = signingCertificate;
            o.succinctId = succinctId;
            o.tenantProviderId = tenantProviderId;
            o.userAssertionAttributes = userAssertionAttributes;
            return o;
        }
    }
}
