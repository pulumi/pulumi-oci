// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting {
    /**
     * @return The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
     * 
     */
    private @Nullable Integer emailOtpValidityDurationInMins;
    /**
     * @return Exact length of the email one-time passcode.
     * 
     */
    private @Nullable Integer emailPasscodeLength;
    /**
     * @return The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
     * 
     */
    private @Nullable String hashingAlgorithm;
    /**
     * @return The period of time (in seconds) that a JSON Web Token (JWT) is valid
     * 
     */
    private @Nullable Integer jwtValidityDurationInSecs;
    /**
     * @return The duration of time (in days) after which the shared secret has to be refreshed
     * 
     */
    private @Nullable Integer keyRefreshIntervalInDays;
    /**
     * @return Exact length of the One-Time Passcode that the system should generate
     * 
     */
    private @Nullable Integer passcodeLength;
    /**
     * @return The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
     * 
     */
    private @Nullable Integer smsOtpValidityDurationInMins;
    /**
     * @return Exact length of the Short Message Service (SMS) One-Time Passcode
     * 
     */
    private @Nullable Integer smsPasscodeLength;
    /**
     * @return Time (in secs) to be used as the time step
     * 
     */
    private @Nullable Integer timeStepInSecs;
    /**
     * @return The tolerance/step-size that the system should use when validating a One-Time Passcode
     * 
     */
    private @Nullable Integer timeStepTolerance;

    private GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting() {}
    /**
     * @return The period of time (in minutes) that a one-time passcode remains valid that the system sends by email.
     * 
     */
    public Optional<Integer> emailOtpValidityDurationInMins() {
        return Optional.ofNullable(this.emailOtpValidityDurationInMins);
    }
    /**
     * @return Exact length of the email one-time passcode.
     * 
     */
    public Optional<Integer> emailPasscodeLength() {
        return Optional.ofNullable(this.emailPasscodeLength);
    }
    /**
     * @return The hashing algorithm to be used to calculate a One-Time Passcode. By default, the system uses SHA1.
     * 
     */
    public Optional<String> hashingAlgorithm() {
        return Optional.ofNullable(this.hashingAlgorithm);
    }
    /**
     * @return The period of time (in seconds) that a JSON Web Token (JWT) is valid
     * 
     */
    public Optional<Integer> jwtValidityDurationInSecs() {
        return Optional.ofNullable(this.jwtValidityDurationInSecs);
    }
    /**
     * @return The duration of time (in days) after which the shared secret has to be refreshed
     * 
     */
    public Optional<Integer> keyRefreshIntervalInDays() {
        return Optional.ofNullable(this.keyRefreshIntervalInDays);
    }
    /**
     * @return Exact length of the One-Time Passcode that the system should generate
     * 
     */
    public Optional<Integer> passcodeLength() {
        return Optional.ofNullable(this.passcodeLength);
    }
    /**
     * @return The period of time (in minutes) for which a One-Time Passcode that the system sends by Short Message Service (SMS) or by voice remains valid
     * 
     */
    public Optional<Integer> smsOtpValidityDurationInMins() {
        return Optional.ofNullable(this.smsOtpValidityDurationInMins);
    }
    /**
     * @return Exact length of the Short Message Service (SMS) One-Time Passcode
     * 
     */
    public Optional<Integer> smsPasscodeLength() {
        return Optional.ofNullable(this.smsPasscodeLength);
    }
    /**
     * @return Time (in secs) to be used as the time step
     * 
     */
    public Optional<Integer> timeStepInSecs() {
        return Optional.ofNullable(this.timeStepInSecs);
    }
    /**
     * @return The tolerance/step-size that the system should use when validating a One-Time Passcode
     * 
     */
    public Optional<Integer> timeStepTolerance() {
        return Optional.ofNullable(this.timeStepTolerance);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer emailOtpValidityDurationInMins;
        private @Nullable Integer emailPasscodeLength;
        private @Nullable String hashingAlgorithm;
        private @Nullable Integer jwtValidityDurationInSecs;
        private @Nullable Integer keyRefreshIntervalInDays;
        private @Nullable Integer passcodeLength;
        private @Nullable Integer smsOtpValidityDurationInMins;
        private @Nullable Integer smsPasscodeLength;
        private @Nullable Integer timeStepInSecs;
        private @Nullable Integer timeStepTolerance;
        public Builder() {}
        public Builder(GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emailOtpValidityDurationInMins = defaults.emailOtpValidityDurationInMins;
    	      this.emailPasscodeLength = defaults.emailPasscodeLength;
    	      this.hashingAlgorithm = defaults.hashingAlgorithm;
    	      this.jwtValidityDurationInSecs = defaults.jwtValidityDurationInSecs;
    	      this.keyRefreshIntervalInDays = defaults.keyRefreshIntervalInDays;
    	      this.passcodeLength = defaults.passcodeLength;
    	      this.smsOtpValidityDurationInMins = defaults.smsOtpValidityDurationInMins;
    	      this.smsPasscodeLength = defaults.smsPasscodeLength;
    	      this.timeStepInSecs = defaults.timeStepInSecs;
    	      this.timeStepTolerance = defaults.timeStepTolerance;
        }

        @CustomType.Setter
        public Builder emailOtpValidityDurationInMins(@Nullable Integer emailOtpValidityDurationInMins) {
            this.emailOtpValidityDurationInMins = emailOtpValidityDurationInMins;
            return this;
        }
        @CustomType.Setter
        public Builder emailPasscodeLength(@Nullable Integer emailPasscodeLength) {
            this.emailPasscodeLength = emailPasscodeLength;
            return this;
        }
        @CustomType.Setter
        public Builder hashingAlgorithm(@Nullable String hashingAlgorithm) {
            this.hashingAlgorithm = hashingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder jwtValidityDurationInSecs(@Nullable Integer jwtValidityDurationInSecs) {
            this.jwtValidityDurationInSecs = jwtValidityDurationInSecs;
            return this;
        }
        @CustomType.Setter
        public Builder keyRefreshIntervalInDays(@Nullable Integer keyRefreshIntervalInDays) {
            this.keyRefreshIntervalInDays = keyRefreshIntervalInDays;
            return this;
        }
        @CustomType.Setter
        public Builder passcodeLength(@Nullable Integer passcodeLength) {
            this.passcodeLength = passcodeLength;
            return this;
        }
        @CustomType.Setter
        public Builder smsOtpValidityDurationInMins(@Nullable Integer smsOtpValidityDurationInMins) {
            this.smsOtpValidityDurationInMins = smsOtpValidityDurationInMins;
            return this;
        }
        @CustomType.Setter
        public Builder smsPasscodeLength(@Nullable Integer smsPasscodeLength) {
            this.smsPasscodeLength = smsPasscodeLength;
            return this;
        }
        @CustomType.Setter
        public Builder timeStepInSecs(@Nullable Integer timeStepInSecs) {
            this.timeStepInSecs = timeStepInSecs;
            return this;
        }
        @CustomType.Setter
        public Builder timeStepTolerance(@Nullable Integer timeStepTolerance) {
            this.timeStepTolerance = timeStepTolerance;
            return this;
        }
        public GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting build() {
            final var o = new GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting();
            o.emailOtpValidityDurationInMins = emailOtpValidityDurationInMins;
            o.emailPasscodeLength = emailPasscodeLength;
            o.hashingAlgorithm = hashingAlgorithm;
            o.jwtValidityDurationInSecs = jwtValidityDurationInSecs;
            o.keyRefreshIntervalInDays = keyRefreshIntervalInDays;
            o.passcodeLength = passcodeLength;
            o.smsOtpValidityDurationInMins = smsOtpValidityDurationInMins;
            o.smsPasscodeLength = smsPasscodeLength;
            o.timeStepInSecs = timeStepInSecs;
            o.timeStepTolerance = timeStepTolerance;
            return o;
        }
    }
}
