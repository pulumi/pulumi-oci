// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting {
    /**
     * @return Attribute used to define the type of attestation required.
     * 
     */
    private @Nullable String attestation;
    /**
     * @return Attribute used to define authenticator selection attachment.
     * 
     */
    private @Nullable String authenticatorSelectionAttachment;
    /**
     * @return Flag used to indicate authenticator selection is required or not
     * 
     */
    private @Nullable Boolean authenticatorSelectionRequireResidentKey;
    /**
     * @return Attribute used to define authenticator selection resident key requirement.
     * 
     */
    private @Nullable String authenticatorSelectionResidentKey;
    /**
     * @return Attribute used to define authenticator selection verification.
     * 
     */
    private @Nullable String authenticatorSelectionUserVerification;
    /**
     * @return Number of domain levels Oracle Identity Cloud Service should use for origin comparision
     * 
     */
    private @Nullable Integer domainValidationLevel;
    /**
     * @return Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     */
    private @Nullable Boolean excludeCredentials;
    /**
     * @return List of server supported public key algorithms
     * 
     */
    private @Nullable List<String> publicKeyTypes;
    /**
     * @return Timeout for the fido authentication to complete
     * 
     */
    private @Nullable Integer timeout;

    private GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting() {}
    /**
     * @return Attribute used to define the type of attestation required.
     * 
     */
    public Optional<String> attestation() {
        return Optional.ofNullable(this.attestation);
    }
    /**
     * @return Attribute used to define authenticator selection attachment.
     * 
     */
    public Optional<String> authenticatorSelectionAttachment() {
        return Optional.ofNullable(this.authenticatorSelectionAttachment);
    }
    /**
     * @return Flag used to indicate authenticator selection is required or not
     * 
     */
    public Optional<Boolean> authenticatorSelectionRequireResidentKey() {
        return Optional.ofNullable(this.authenticatorSelectionRequireResidentKey);
    }
    /**
     * @return Attribute used to define authenticator selection resident key requirement.
     * 
     */
    public Optional<String> authenticatorSelectionResidentKey() {
        return Optional.ofNullable(this.authenticatorSelectionResidentKey);
    }
    /**
     * @return Attribute used to define authenticator selection verification.
     * 
     */
    public Optional<String> authenticatorSelectionUserVerification() {
        return Optional.ofNullable(this.authenticatorSelectionUserVerification);
    }
    /**
     * @return Number of domain levels Oracle Identity Cloud Service should use for origin comparision
     * 
     */
    public Optional<Integer> domainValidationLevel() {
        return Optional.ofNullable(this.domainValidationLevel);
    }
    /**
     * @return Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
     * 
     */
    public Optional<Boolean> excludeCredentials() {
        return Optional.ofNullable(this.excludeCredentials);
    }
    /**
     * @return List of server supported public key algorithms
     * 
     */
    public List<String> publicKeyTypes() {
        return this.publicKeyTypes == null ? List.of() : this.publicKeyTypes;
    }
    /**
     * @return Timeout for the fido authentication to complete
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String attestation;
        private @Nullable String authenticatorSelectionAttachment;
        private @Nullable Boolean authenticatorSelectionRequireResidentKey;
        private @Nullable String authenticatorSelectionResidentKey;
        private @Nullable String authenticatorSelectionUserVerification;
        private @Nullable Integer domainValidationLevel;
        private @Nullable Boolean excludeCredentials;
        private @Nullable List<String> publicKeyTypes;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.authenticatorSelectionAttachment = defaults.authenticatorSelectionAttachment;
    	      this.authenticatorSelectionRequireResidentKey = defaults.authenticatorSelectionRequireResidentKey;
    	      this.authenticatorSelectionResidentKey = defaults.authenticatorSelectionResidentKey;
    	      this.authenticatorSelectionUserVerification = defaults.authenticatorSelectionUserVerification;
    	      this.domainValidationLevel = defaults.domainValidationLevel;
    	      this.excludeCredentials = defaults.excludeCredentials;
    	      this.publicKeyTypes = defaults.publicKeyTypes;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder attestation(@Nullable String attestation) {
            this.attestation = attestation;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionAttachment(@Nullable String authenticatorSelectionAttachment) {
            this.authenticatorSelectionAttachment = authenticatorSelectionAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionRequireResidentKey(@Nullable Boolean authenticatorSelectionRequireResidentKey) {
            this.authenticatorSelectionRequireResidentKey = authenticatorSelectionRequireResidentKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionResidentKey(@Nullable String authenticatorSelectionResidentKey) {
            this.authenticatorSelectionResidentKey = authenticatorSelectionResidentKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticatorSelectionUserVerification(@Nullable String authenticatorSelectionUserVerification) {
            this.authenticatorSelectionUserVerification = authenticatorSelectionUserVerification;
            return this;
        }
        @CustomType.Setter
        public Builder domainValidationLevel(@Nullable Integer domainValidationLevel) {
            this.domainValidationLevel = domainValidationLevel;
            return this;
        }
        @CustomType.Setter
        public Builder excludeCredentials(@Nullable Boolean excludeCredentials) {
            this.excludeCredentials = excludeCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyTypes(@Nullable List<String> publicKeyTypes) {
            this.publicKeyTypes = publicKeyTypes;
            return this;
        }
        public Builder publicKeyTypes(String... publicKeyTypes) {
            return publicKeyTypes(List.of(publicKeyTypes));
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        public GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting build() {
            final var o = new GetDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting();
            o.attestation = attestation;
            o.authenticatorSelectionAttachment = authenticatorSelectionAttachment;
            o.authenticatorSelectionRequireResidentKey = authenticatorSelectionRequireResidentKey;
            o.authenticatorSelectionResidentKey = authenticatorSelectionResidentKey;
            o.authenticatorSelectionUserVerification = authenticatorSelectionUserVerification;
            o.domainValidationLevel = domainValidationLevel;
            o.excludeCredentials = excludeCredentials;
            o.publicKeyTypes = publicKeyTypes;
            o.timeout = timeout;
            return o;
        }
    }
}
