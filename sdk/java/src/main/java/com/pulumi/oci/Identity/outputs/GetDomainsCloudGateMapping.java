// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsCloudGateMapping {
    /**
     * @return The ID of the App being mapped to
     * 
     */
    private String appId;
    /**
     * @return The id of the Cloud Gate Mapping
     * 
     */
    private String mappingId;
    /**
     * @return The name (Client ID) of the App being mapped to
     * 
     */
    private String name;
    /**
     * @return Any additional settings for this upstream server in nginx configuration form
     * 
     */
    private String nginxSettings;
    /**
     * @return The Web Tier policy name used for the App that is mapped to this Cloud Gate
     * 
     */
    private String policyName;
    /**
     * @return NGINX ProxyPass entry for this Mapping
     * 
     */
    private String proxyPass;
    /**
     * @return URI of the upstream server
     * 
     */
    private String ref;
    /**
     * @return Resource prefix for this mapping.  This will be used to define the location block
     * 
     */
    private String resourcePrefix;
    /**
     * @return Server Name for the Server Block
     * 
     */
    private String serverId;
    /**
     * @return Upstream server group instance for the Mapping. This is one of the upstream server group IDs(upstream blocks) from the associated Cloud Gate list
     * 
     */
    private String upstreamServerGroupId;
    /**
     * @return ID of the upstream server
     * 
     */
    private String value;

    private GetDomainsCloudGateMapping() {}
    /**
     * @return The ID of the App being mapped to
     * 
     */
    public String appId() {
        return this.appId;
    }
    /**
     * @return The id of the Cloud Gate Mapping
     * 
     */
    public String mappingId() {
        return this.mappingId;
    }
    /**
     * @return The name (Client ID) of the App being mapped to
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Any additional settings for this upstream server in nginx configuration form
     * 
     */
    public String nginxSettings() {
        return this.nginxSettings;
    }
    /**
     * @return The Web Tier policy name used for the App that is mapped to this Cloud Gate
     * 
     */
    public String policyName() {
        return this.policyName;
    }
    /**
     * @return NGINX ProxyPass entry for this Mapping
     * 
     */
    public String proxyPass() {
        return this.proxyPass;
    }
    /**
     * @return URI of the upstream server
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return Resource prefix for this mapping.  This will be used to define the location block
     * 
     */
    public String resourcePrefix() {
        return this.resourcePrefix;
    }
    /**
     * @return Server Name for the Server Block
     * 
     */
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return Upstream server group instance for the Mapping. This is one of the upstream server group IDs(upstream blocks) from the associated Cloud Gate list
     * 
     */
    public String upstreamServerGroupId() {
        return this.upstreamServerGroupId;
    }
    /**
     * @return ID of the upstream server
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsCloudGateMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appId;
        private String mappingId;
        private String name;
        private String nginxSettings;
        private String policyName;
        private String proxyPass;
        private String ref;
        private String resourcePrefix;
        private String serverId;
        private String upstreamServerGroupId;
        private String value;
        public Builder() {}
        public Builder(GetDomainsCloudGateMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.mappingId = defaults.mappingId;
    	      this.name = defaults.name;
    	      this.nginxSettings = defaults.nginxSettings;
    	      this.policyName = defaults.policyName;
    	      this.proxyPass = defaults.proxyPass;
    	      this.ref = defaults.ref;
    	      this.resourcePrefix = defaults.resourcePrefix;
    	      this.serverId = defaults.serverId;
    	      this.upstreamServerGroupId = defaults.upstreamServerGroupId;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder appId(String appId) {
            if (appId == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "appId");
            }
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder mappingId(String mappingId) {
            if (mappingId == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "mappingId");
            }
            this.mappingId = mappingId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nginxSettings(String nginxSettings) {
            if (nginxSettings == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "nginxSettings");
            }
            this.nginxSettings = nginxSettings;
            return this;
        }
        @CustomType.Setter
        public Builder policyName(String policyName) {
            if (policyName == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "policyName");
            }
            this.policyName = policyName;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPass(String proxyPass) {
            if (proxyPass == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "proxyPass");
            }
            this.proxyPass = proxyPass;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder resourcePrefix(String resourcePrefix) {
            if (resourcePrefix == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "resourcePrefix");
            }
            this.resourcePrefix = resourcePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamServerGroupId(String upstreamServerGroupId) {
            if (upstreamServerGroupId == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "upstreamServerGroupId");
            }
            this.upstreamServerGroupId = upstreamServerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetDomainsCloudGateMapping", "value");
            }
            this.value = value;
            return this;
        }
        public GetDomainsCloudGateMapping build() {
            final var _resultValue = new GetDomainsCloudGateMapping();
            _resultValue.appId = appId;
            _resultValue.mappingId = mappingId;
            _resultValue.name = name;
            _resultValue.nginxSettings = nginxSettings;
            _resultValue.policyName = policyName;
            _resultValue.proxyPass = proxyPass;
            _resultValue.ref = ref;
            _resultValue.resourcePrefix = resourcePrefix;
            _resultValue.serverId = serverId;
            _resultValue.upstreamServerGroupId = upstreamServerGroupId;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
