// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustImpersonationServiceUser;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustKeytab;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityPropagationTrustTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsIdentityPropagationTrustResult {
    /**
     * @return The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
     * 
     */
    private String accountId;
    /**
     * @return If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
     * 
     */
    private Boolean active;
    /**
     * @return Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
     * 
     */
    private Boolean allowImpersonation;
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    /**
     * @return The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
     * 
     */
    private String clientClaimName;
    /**
     * @return The value that corresponds to the client claim name used to identify to whom the token is issued.
     * 
     */
    private List<String> clientClaimValues;
    /**
     * @return The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
     * 
     */
    private Integer clockSkewSeconds;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return The description of the Identity Propagation Trust.
     * 
     */
    private String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsIdentityPropagationTrustIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsIdentityPropagationTrustIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    private String identityPropagationTrustId;
    /**
     * @return The Impersonating Principal.
     * 
     */
    private List<GetDomainsIdentityPropagationTrustImpersonationServiceUser> impersonationServiceUsers;
    /**
     * @return The issuer claim of the Identity provider.
     * 
     */
    private String issuer;
    /**
     * @return The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
     * 
     */
    private List<GetDomainsIdentityPropagationTrustKeytab> keytabs;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsIdentityPropagationTrustMeta> metas;
    /**
     * @return The name of the the Identity Propagation Trust.
     * 
     */
    private String name;
    /**
     * @return The value of all the authorized OAuth Clients.
     * 
     */
    private List<String> oauthClients;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return Store the public key if public key cert.
     * 
     */
    private String publicCertificate;
    /**
     * @return The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
     * 
     */
    private String publicKeyEndpoint;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return Used for locating the subject claim from the incoming token.
     * 
     */
    private String subjectClaimName;
    /**
     * @return Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
     * 
     */
    private String subjectMappingAttribute;
    /**
     * @return The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
     * 
     */
    private String subjectType;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsIdentityPropagationTrustTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return The type of the inbound token from the Identity cloud provider.
     * 
     */
    private String type;

    private GetDomainsIdentityPropagationTrustResult() {}
    /**
     * @return The Identity cloud provider service identifier, for example, the Azure Tenancy ID, AWS Account ID, or GCP Project ID.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return If true, specifies that this Identity Propagation Trust is in an enabled state. The default value is false.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return Allow customers to define whether the resulting token should contain the authenticated user as the subject or whether the token should impersonate another Application Principal in IAM.
     * 
     */
    public Boolean allowImpersonation() {
        return this.allowImpersonation;
    }
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return The claim name that identifies to whom the JWT/SAML token is issued. If AWS, then \&#34;aud\&#34; or \&#34;client_id\&#34;. If Azure, then \&#34;appid\&#34;. If GCP, then \&#34;aud\&#34;.
     * 
     */
    public String clientClaimName() {
        return this.clientClaimName;
    }
    /**
     * @return The value that corresponds to the client claim name used to identify to whom the token is issued.
     * 
     */
    public List<String> clientClaimValues() {
        return this.clientClaimValues;
    }
    /**
     * @return The clock skew (in secs) that&#39;s allowed for the token issue and expiry time.
     * 
     */
    public Integer clockSkewSeconds() {
        return this.clockSkewSeconds;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return The description of the Identity Propagation Trust.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsIdentityPropagationTrustIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsIdentityPropagationTrustIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    public String identityPropagationTrustId() {
        return this.identityPropagationTrustId;
    }
    /**
     * @return The Impersonating Principal.
     * 
     */
    public List<GetDomainsIdentityPropagationTrustImpersonationServiceUser> impersonationServiceUsers() {
        return this.impersonationServiceUsers;
    }
    /**
     * @return The issuer claim of the Identity provider.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The keytab stored in the tenancy&#39;s Vault. This is required if the identity propagation type is &#39;SPNEGO&#39;.
     * 
     */
    public List<GetDomainsIdentityPropagationTrustKeytab> keytabs() {
        return this.keytabs;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsIdentityPropagationTrustMeta> metas() {
        return this.metas;
    }
    /**
     * @return The name of the the Identity Propagation Trust.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The value of all the authorized OAuth Clients.
     * 
     */
    public List<String> oauthClients() {
        return this.oauthClients;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Store the public key if public key cert.
     * 
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }
    /**
     * @return The cloud provider&#39;s public key API of SAML and OIDC providers for signature validation.
     * 
     */
    public String publicKeyEndpoint() {
        return this.publicKeyEndpoint;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return Used for locating the subject claim from the incoming token.
     * 
     */
    public String subjectClaimName() {
        return this.subjectClaimName;
    }
    /**
     * @return Subject Mapping Attribute to which the value from subject claim name value would be used for identity lookup.
     * 
     */
    public String subjectMappingAttribute() {
        return this.subjectMappingAttribute;
    }
    /**
     * @return The type of the resource against which lookup will be made in the identity domain in IAM for the incoming subject claim value.
     * 
     */
    public String subjectType() {
        return this.subjectType;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsIdentityPropagationTrustTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return The type of the inbound token from the Identity cloud provider.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsIdentityPropagationTrustResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean active;
        private Boolean allowImpersonation;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private String clientClaimName;
        private List<String> clientClaimValues;
        private Integer clockSkewSeconds;
        private String compartmentOcid;
        private Boolean deleteInProgress;
        private String description;
        private String domainOcid;
        private String id;
        private List<GetDomainsIdentityPropagationTrustIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsIdentityPropagationTrustIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private String identityPropagationTrustId;
        private List<GetDomainsIdentityPropagationTrustImpersonationServiceUser> impersonationServiceUsers;
        private String issuer;
        private List<GetDomainsIdentityPropagationTrustKeytab> keytabs;
        private List<GetDomainsIdentityPropagationTrustMeta> metas;
        private String name;
        private List<String> oauthClients;
        private String ocid;
        private String publicCertificate;
        private String publicKeyEndpoint;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private String subjectClaimName;
        private String subjectMappingAttribute;
        private String subjectType;
        private List<GetDomainsIdentityPropagationTrustTag> tags;
        private String tenancyOcid;
        private String type;
        public Builder() {}
        public Builder(GetDomainsIdentityPropagationTrustResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.active = defaults.active;
    	      this.allowImpersonation = defaults.allowImpersonation;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.clientClaimName = defaults.clientClaimName;
    	      this.clientClaimValues = defaults.clientClaimValues;
    	      this.clockSkewSeconds = defaults.clockSkewSeconds;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.identityPropagationTrustId = defaults.identityPropagationTrustId;
    	      this.impersonationServiceUsers = defaults.impersonationServiceUsers;
    	      this.issuer = defaults.issuer;
    	      this.keytabs = defaults.keytabs;
    	      this.metas = defaults.metas;
    	      this.name = defaults.name;
    	      this.oauthClients = defaults.oauthClients;
    	      this.ocid = defaults.ocid;
    	      this.publicCertificate = defaults.publicCertificate;
    	      this.publicKeyEndpoint = defaults.publicKeyEndpoint;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.subjectClaimName = defaults.subjectClaimName;
    	      this.subjectMappingAttribute = defaults.subjectMappingAttribute;
    	      this.subjectType = defaults.subjectType;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder allowImpersonation(Boolean allowImpersonation) {
            this.allowImpersonation = Objects.requireNonNull(allowImpersonation);
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder clientClaimName(String clientClaimName) {
            this.clientClaimName = Objects.requireNonNull(clientClaimName);
            return this;
        }
        @CustomType.Setter
        public Builder clientClaimValues(List<String> clientClaimValues) {
            this.clientClaimValues = Objects.requireNonNull(clientClaimValues);
            return this;
        }
        public Builder clientClaimValues(String... clientClaimValues) {
            return clientClaimValues(List.of(clientClaimValues));
        }
        @CustomType.Setter
        public Builder clockSkewSeconds(Integer clockSkewSeconds) {
            this.clockSkewSeconds = Objects.requireNonNull(clockSkewSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            this.compartmentOcid = Objects.requireNonNull(compartmentOcid);
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            this.deleteInProgress = Objects.requireNonNull(deleteInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            this.domainOcid = Objects.requireNonNull(domainOcid);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsIdentityPropagationTrustIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = Objects.requireNonNull(idcsCreatedBies);
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsIdentityPropagationTrustIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsIdentityPropagationTrustIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = Objects.requireNonNull(idcsLastModifiedBies);
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsIdentityPropagationTrustIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = Objects.requireNonNull(idcsLastUpgradedInRelease);
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = Objects.requireNonNull(idcsPreventedOperations);
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder identityPropagationTrustId(String identityPropagationTrustId) {
            this.identityPropagationTrustId = Objects.requireNonNull(identityPropagationTrustId);
            return this;
        }
        @CustomType.Setter
        public Builder impersonationServiceUsers(List<GetDomainsIdentityPropagationTrustImpersonationServiceUser> impersonationServiceUsers) {
            this.impersonationServiceUsers = Objects.requireNonNull(impersonationServiceUsers);
            return this;
        }
        public Builder impersonationServiceUsers(GetDomainsIdentityPropagationTrustImpersonationServiceUser... impersonationServiceUsers) {
            return impersonationServiceUsers(List.of(impersonationServiceUsers));
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder keytabs(List<GetDomainsIdentityPropagationTrustKeytab> keytabs) {
            this.keytabs = Objects.requireNonNull(keytabs);
            return this;
        }
        public Builder keytabs(GetDomainsIdentityPropagationTrustKeytab... keytabs) {
            return keytabs(List.of(keytabs));
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsIdentityPropagationTrustMeta> metas) {
            this.metas = Objects.requireNonNull(metas);
            return this;
        }
        public Builder metas(GetDomainsIdentityPropagationTrustMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder oauthClients(List<String> oauthClients) {
            this.oauthClients = Objects.requireNonNull(oauthClients);
            return this;
        }
        public Builder oauthClients(String... oauthClients) {
            return oauthClients(List.of(oauthClients));
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            this.ocid = Objects.requireNonNull(ocid);
            return this;
        }
        @CustomType.Setter
        public Builder publicCertificate(String publicCertificate) {
            this.publicCertificate = Objects.requireNonNull(publicCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyEndpoint(String publicKeyEndpoint) {
            this.publicKeyEndpoint = Objects.requireNonNull(publicKeyEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder subjectClaimName(String subjectClaimName) {
            this.subjectClaimName = Objects.requireNonNull(subjectClaimName);
            return this;
        }
        @CustomType.Setter
        public Builder subjectMappingAttribute(String subjectMappingAttribute) {
            this.subjectMappingAttribute = Objects.requireNonNull(subjectMappingAttribute);
            return this;
        }
        @CustomType.Setter
        public Builder subjectType(String subjectType) {
            this.subjectType = Objects.requireNonNull(subjectType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsIdentityPropagationTrustTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDomainsIdentityPropagationTrustTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            this.tenancyOcid = Objects.requireNonNull(tenancyOcid);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDomainsIdentityPropagationTrustResult build() {
            final var _resultValue = new GetDomainsIdentityPropagationTrustResult();
            _resultValue.accountId = accountId;
            _resultValue.active = active;
            _resultValue.allowImpersonation = allowImpersonation;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authorization = authorization;
            _resultValue.clientClaimName = clientClaimName;
            _resultValue.clientClaimValues = clientClaimValues;
            _resultValue.clockSkewSeconds = clockSkewSeconds;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.description = description;
            _resultValue.domainOcid = domainOcid;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.identityPropagationTrustId = identityPropagationTrustId;
            _resultValue.impersonationServiceUsers = impersonationServiceUsers;
            _resultValue.issuer = issuer;
            _resultValue.keytabs = keytabs;
            _resultValue.metas = metas;
            _resultValue.name = name;
            _resultValue.oauthClients = oauthClients;
            _resultValue.ocid = ocid;
            _resultValue.publicCertificate = publicCertificate;
            _resultValue.publicKeyEndpoint = publicKeyEndpoint;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.subjectClaimName = subjectClaimName;
            _resultValue.subjectMappingAttribute = subjectMappingAttribute;
            _resultValue.subjectType = subjectType;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
