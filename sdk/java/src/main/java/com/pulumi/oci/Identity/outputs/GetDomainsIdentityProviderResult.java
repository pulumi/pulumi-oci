// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderCorrelationPolicy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderJitUserProvAssignedGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderJitUserProvAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderJitUserProvGroupMapping;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderTag;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsIdentityProviderResult {
    /**
     * @return Assertion attribute name.
     * 
     */
    private String assertionAttribute;
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    /**
     * @return HTTP binding to use for authentication requests.
     * 
     */
    private String authnRequestBinding;
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return Correlation policy
     * 
     */
    private List<GetDomainsIdentityProviderCorrelationPolicy> correlationPolicies;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Set to true to indicate Partner enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Encryption certificate
     * 
     */
    private String encryptionCertificate;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return Identity Provider Icon URL.
     * 
     */
    private String iconUrl;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsIdentityProviderIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    private String identityProviderId;
    /**
     * @return Identity Provider SSO URL
     * 
     */
    private String idpSsoUrl;
    /**
     * @return Set to true to include the signing certificate in the signature.
     * 
     */
    private Boolean includeSigningCertInSignature;
    /**
     * @return Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
     * 
     */
    private List<GetDomainsIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups;
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    private Boolean jitUserProvAttributeUpdateEnabled;
    /**
     * @return Assertion To User Mapping
     * 
     */
    private List<GetDomainsIdentityProviderJitUserProvAttribute> jitUserProvAttributes;
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    private Boolean jitUserProvCreateUserEnabled;
    /**
     * @return Set to true to indicate JIT User Provisioning is enabled
     * 
     */
    private Boolean jitUserProvEnabled;
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
     * 
     */
    private Boolean jitUserProvGroupAssertionAttributeEnabled;
    /**
     * @return The default value is &#39;Overwrite&#39;, which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify &#39;Merge&#39; if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
     * 
     */
    private String jitUserProvGroupAssignmentMethod;
    /**
     * @return Property to indicate the mode of group mapping
     * 
     */
    private String jitUserProvGroupMappingMode;
    /**
     * @return The list of mappings between the Identity Domain Group and the IDP group.
     * 
     */
    private List<GetDomainsIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings;
    /**
     * @return Name of the assertion attribute containing the users groups
     * 
     */
    private String jitUserProvGroupSamlAttributeName;
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    private Boolean jitUserProvGroupStaticListEnabled;
    /**
     * @return Set to true to indicate ignoring absence of group while provisioning
     * 
     */
    private Boolean jitUserProvIgnoreErrorOnAbsentGroups;
    /**
     * @return Records the notification timestamp for the IdP whose signing certificate is about to expire
     * 
     */
    private String lastNotificationSentTime;
    /**
     * @return HTTP binding to use for logout.
     * 
     */
    private String logoutBinding;
    /**
     * @return Set to true to enable logout.
     * 
     */
    private Boolean logoutEnabled;
    /**
     * @return Logout request URL
     * 
     */
    private String logoutRequestUrl;
    /**
     * @return Logout response URL
     * 
     */
    private String logoutResponseUrl;
    /**
     * @return Metadata
     * 
     */
    private String metadata;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsIdentityProviderMeta> metas;
    /**
     * @return Default authentication request name ID format.
     * 
     */
    private String nameIdFormat;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return Unique name of the trusted Identity Provider.
     * 
     */
    private String partnerName;
    /**
     * @return Provider ID
     * 
     */
    private String partnerProviderId;
    /**
     * @return SAML SP authentication type.
     * 
     */
    private List<String> requestedAuthenticationContexts;
    /**
     * @return This SP requires requests SAML IdP to enforce re-authentication.
     * 
     */
    private Boolean requireForceAuthn;
    /**
     * @return SAML SP must accept encrypted assertion only.
     * 
     */
    private Boolean requiresEncryptedAssertion;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return SAML SP HoK Enabled.
     * 
     */
    private Boolean samlHoKrequired;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
     * 
     */
    private String serviceInstanceIdentifier;
    /**
     * @return Set to true to indicate whether to show IdP in login page or not.
     * 
     */
    private Boolean shownOnLoginPage;
    /**
     * @return Signature hash algorithm.
     * 
     */
    private String signatureHashAlgorithm;
    /**
     * @return Signing certificate
     * 
     */
    private String signingCertificate;
    /**
     * @return Succinct ID
     * 
     */
    private String succinctId;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsIdentityProviderTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
     * 
     */
    private String tenantProviderId;
    /**
     * @return Identity Provider Type
     * 
     */
    private String type;
    /**
     * @return Social Identity Provider Extension Schema
     * 
     */
    private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    /**
     * @return X509 Identity Provider Extension Schema
     * 
     */
    private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    /**
     * @return User mapping method.
     * 
     */
    private String userMappingMethod;
    /**
     * @return This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.&lt;br&gt;You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the &lt;b&gt;Example of a Request Body&lt;/b&gt; section of the Examples tab for the &lt;a href=&#39;./op-admin-v1-identityproviders-post.html&#39;&gt;POST&lt;/a&gt; and &lt;a href=&#39;./op-admin-v1-identityproviders-id-put.html&#39;&gt;PUT&lt;/a&gt; methods of the /IdentityProviders endpoint.
     * 
     */
    private String userMappingStoreAttribute;

    private GetDomainsIdentityProviderResult() {}
    /**
     * @return Assertion attribute name.
     * 
     */
    public String assertionAttribute() {
        return this.assertionAttribute;
    }
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    /**
     * @return HTTP binding to use for authentication requests.
     * 
     */
    public String authnRequestBinding() {
        return this.authnRequestBinding;
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return Correlation policy
     * 
     */
    public List<GetDomainsIdentityProviderCorrelationPolicy> correlationPolicies() {
        return this.correlationPolicies;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Set to true to indicate Partner enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Encryption certificate
     * 
     */
    public String encryptionCertificate() {
        return this.encryptionCertificate;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Identity Provider Icon URL.
     * 
     */
    public String iconUrl() {
        return this.iconUrl;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsIdentityProviderIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Identity Provider SSO URL
     * 
     */
    public String idpSsoUrl() {
        return this.idpSsoUrl;
    }
    /**
     * @return Set to true to include the signing certificate in the signature.
     * 
     */
    public Boolean includeSigningCertInSignature() {
        return this.includeSigningCertInSignature;
    }
    /**
     * @return Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
     * 
     */
    public List<GetDomainsIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups() {
        return this.jitUserProvAssignedGroups;
    }
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    public Boolean jitUserProvAttributeUpdateEnabled() {
        return this.jitUserProvAttributeUpdateEnabled;
    }
    /**
     * @return Assertion To User Mapping
     * 
     */
    public List<GetDomainsIdentityProviderJitUserProvAttribute> jitUserProvAttributes() {
        return this.jitUserProvAttributes;
    }
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    public Boolean jitUserProvCreateUserEnabled() {
        return this.jitUserProvCreateUserEnabled;
    }
    /**
     * @return Set to true to indicate JIT User Provisioning is enabled
     * 
     */
    public Boolean jitUserProvEnabled() {
        return this.jitUserProvEnabled;
    }
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
     * 
     */
    public Boolean jitUserProvGroupAssertionAttributeEnabled() {
        return this.jitUserProvGroupAssertionAttributeEnabled;
    }
    /**
     * @return The default value is &#39;Overwrite&#39;, which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify &#39;Merge&#39; if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
     * 
     */
    public String jitUserProvGroupAssignmentMethod() {
        return this.jitUserProvGroupAssignmentMethod;
    }
    /**
     * @return Property to indicate the mode of group mapping
     * 
     */
    public String jitUserProvGroupMappingMode() {
        return this.jitUserProvGroupMappingMode;
    }
    /**
     * @return The list of mappings between the Identity Domain Group and the IDP group.
     * 
     */
    public List<GetDomainsIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings() {
        return this.jitUserProvGroupMappings;
    }
    /**
     * @return Name of the assertion attribute containing the users groups
     * 
     */
    public String jitUserProvGroupSamlAttributeName() {
        return this.jitUserProvGroupSamlAttributeName;
    }
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    public Boolean jitUserProvGroupStaticListEnabled() {
        return this.jitUserProvGroupStaticListEnabled;
    }
    /**
     * @return Set to true to indicate ignoring absence of group while provisioning
     * 
     */
    public Boolean jitUserProvIgnoreErrorOnAbsentGroups() {
        return this.jitUserProvIgnoreErrorOnAbsentGroups;
    }
    /**
     * @return Records the notification timestamp for the IdP whose signing certificate is about to expire
     * 
     */
    public String lastNotificationSentTime() {
        return this.lastNotificationSentTime;
    }
    /**
     * @return HTTP binding to use for logout.
     * 
     */
    public String logoutBinding() {
        return this.logoutBinding;
    }
    /**
     * @return Set to true to enable logout.
     * 
     */
    public Boolean logoutEnabled() {
        return this.logoutEnabled;
    }
    /**
     * @return Logout request URL
     * 
     */
    public String logoutRequestUrl() {
        return this.logoutRequestUrl;
    }
    /**
     * @return Logout response URL
     * 
     */
    public String logoutResponseUrl() {
        return this.logoutResponseUrl;
    }
    /**
     * @return Metadata
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsIdentityProviderMeta> metas() {
        return this.metas;
    }
    /**
     * @return Default authentication request name ID format.
     * 
     */
    public String nameIdFormat() {
        return this.nameIdFormat;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Unique name of the trusted Identity Provider.
     * 
     */
    public String partnerName() {
        return this.partnerName;
    }
    /**
     * @return Provider ID
     * 
     */
    public String partnerProviderId() {
        return this.partnerProviderId;
    }
    /**
     * @return SAML SP authentication type.
     * 
     */
    public List<String> requestedAuthenticationContexts() {
        return this.requestedAuthenticationContexts;
    }
    /**
     * @return This SP requires requests SAML IdP to enforce re-authentication.
     * 
     */
    public Boolean requireForceAuthn() {
        return this.requireForceAuthn;
    }
    /**
     * @return SAML SP must accept encrypted assertion only.
     * 
     */
    public Boolean requiresEncryptedAssertion() {
        return this.requiresEncryptedAssertion;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return SAML SP HoK Enabled.
     * 
     */
    public Boolean samlHoKrequired() {
        return this.samlHoKrequired;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
     * 
     */
    public String serviceInstanceIdentifier() {
        return this.serviceInstanceIdentifier;
    }
    /**
     * @return Set to true to indicate whether to show IdP in login page or not.
     * 
     */
    public Boolean shownOnLoginPage() {
        return this.shownOnLoginPage;
    }
    /**
     * @return Signature hash algorithm.
     * 
     */
    public String signatureHashAlgorithm() {
        return this.signatureHashAlgorithm;
    }
    /**
     * @return Signing certificate
     * 
     */
    public String signingCertificate() {
        return this.signingCertificate;
    }
    /**
     * @return Succinct ID
     * 
     */
    public String succinctId() {
        return this.succinctId;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsIdentityProviderTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
     * 
     */
    public String tenantProviderId() {
        return this.tenantProviderId;
    }
    /**
     * @return Identity Provider Type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Social Identity Provider Extension Schema
     * 
     */
    public List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders() {
        return this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    }
    /**
     * @return X509 Identity Provider Extension Schema
     * 
     */
    public List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders() {
        return this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    }
    /**
     * @return User mapping method.
     * 
     */
    public String userMappingMethod() {
        return this.userMappingMethod;
    }
    /**
     * @return This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.&lt;br&gt;You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the &lt;b&gt;Example of a Request Body&lt;/b&gt; section of the Examples tab for the &lt;a href=&#39;./op-admin-v1-identityproviders-post.html&#39;&gt;POST&lt;/a&gt; and &lt;a href=&#39;./op-admin-v1-identityproviders-id-put.html&#39;&gt;PUT&lt;/a&gt; methods of the /IdentityProviders endpoint.
     * 
     */
    public String userMappingStoreAttribute() {
        return this.userMappingStoreAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsIdentityProviderResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assertionAttribute;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private String authnRequestBinding;
        private @Nullable String authorization;
        private String compartmentOcid;
        private List<GetDomainsIdentityProviderCorrelationPolicy> correlationPolicies;
        private Boolean deleteInProgress;
        private String description;
        private String domainOcid;
        private Boolean enabled;
        private String encryptionCertificate;
        private String externalId;
        private String iconUrl;
        private String id;
        private List<GetDomainsIdentityProviderIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private String identityProviderId;
        private String idpSsoUrl;
        private Boolean includeSigningCertInSignature;
        private List<GetDomainsIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups;
        private Boolean jitUserProvAttributeUpdateEnabled;
        private List<GetDomainsIdentityProviderJitUserProvAttribute> jitUserProvAttributes;
        private Boolean jitUserProvCreateUserEnabled;
        private Boolean jitUserProvEnabled;
        private Boolean jitUserProvGroupAssertionAttributeEnabled;
        private String jitUserProvGroupAssignmentMethod;
        private String jitUserProvGroupMappingMode;
        private List<GetDomainsIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings;
        private String jitUserProvGroupSamlAttributeName;
        private Boolean jitUserProvGroupStaticListEnabled;
        private Boolean jitUserProvIgnoreErrorOnAbsentGroups;
        private String lastNotificationSentTime;
        private String logoutBinding;
        private Boolean logoutEnabled;
        private String logoutRequestUrl;
        private String logoutResponseUrl;
        private String metadata;
        private List<GetDomainsIdentityProviderMeta> metas;
        private String nameIdFormat;
        private String ocid;
        private String partnerName;
        private String partnerProviderId;
        private List<String> requestedAuthenticationContexts;
        private Boolean requireForceAuthn;
        private Boolean requiresEncryptedAssertion;
        private @Nullable String resourceTypeSchemaVersion;
        private Boolean samlHoKrequired;
        private List<String> schemas;
        private String serviceInstanceIdentifier;
        private Boolean shownOnLoginPage;
        private String signatureHashAlgorithm;
        private String signingCertificate;
        private String succinctId;
        private List<GetDomainsIdentityProviderTag> tags;
        private String tenancyOcid;
        private String tenantProviderId;
        private String type;
        private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
        private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
        private String userMappingMethod;
        private String userMappingStoreAttribute;
        public Builder() {}
        public Builder(GetDomainsIdentityProviderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionAttribute = defaults.assertionAttribute;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authnRequestBinding = defaults.authnRequestBinding;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.correlationPolicies = defaults.correlationPolicies;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.enabled = defaults.enabled;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.externalId = defaults.externalId;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.idpSsoUrl = defaults.idpSsoUrl;
    	      this.includeSigningCertInSignature = defaults.includeSigningCertInSignature;
    	      this.jitUserProvAssignedGroups = defaults.jitUserProvAssignedGroups;
    	      this.jitUserProvAttributeUpdateEnabled = defaults.jitUserProvAttributeUpdateEnabled;
    	      this.jitUserProvAttributes = defaults.jitUserProvAttributes;
    	      this.jitUserProvCreateUserEnabled = defaults.jitUserProvCreateUserEnabled;
    	      this.jitUserProvEnabled = defaults.jitUserProvEnabled;
    	      this.jitUserProvGroupAssertionAttributeEnabled = defaults.jitUserProvGroupAssertionAttributeEnabled;
    	      this.jitUserProvGroupAssignmentMethod = defaults.jitUserProvGroupAssignmentMethod;
    	      this.jitUserProvGroupMappingMode = defaults.jitUserProvGroupMappingMode;
    	      this.jitUserProvGroupMappings = defaults.jitUserProvGroupMappings;
    	      this.jitUserProvGroupSamlAttributeName = defaults.jitUserProvGroupSamlAttributeName;
    	      this.jitUserProvGroupStaticListEnabled = defaults.jitUserProvGroupStaticListEnabled;
    	      this.jitUserProvIgnoreErrorOnAbsentGroups = defaults.jitUserProvIgnoreErrorOnAbsentGroups;
    	      this.lastNotificationSentTime = defaults.lastNotificationSentTime;
    	      this.logoutBinding = defaults.logoutBinding;
    	      this.logoutEnabled = defaults.logoutEnabled;
    	      this.logoutRequestUrl = defaults.logoutRequestUrl;
    	      this.logoutResponseUrl = defaults.logoutResponseUrl;
    	      this.metadata = defaults.metadata;
    	      this.metas = defaults.metas;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.ocid = defaults.ocid;
    	      this.partnerName = defaults.partnerName;
    	      this.partnerProviderId = defaults.partnerProviderId;
    	      this.requestedAuthenticationContexts = defaults.requestedAuthenticationContexts;
    	      this.requireForceAuthn = defaults.requireForceAuthn;
    	      this.requiresEncryptedAssertion = defaults.requiresEncryptedAssertion;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.samlHoKrequired = defaults.samlHoKrequired;
    	      this.schemas = defaults.schemas;
    	      this.serviceInstanceIdentifier = defaults.serviceInstanceIdentifier;
    	      this.shownOnLoginPage = defaults.shownOnLoginPage;
    	      this.signatureHashAlgorithm = defaults.signatureHashAlgorithm;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.succinctId = defaults.succinctId;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.tenantProviderId = defaults.tenantProviderId;
    	      this.type = defaults.type;
    	      this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = defaults.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    	      this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = defaults.urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    	      this.userMappingMethod = defaults.userMappingMethod;
    	      this.userMappingStoreAttribute = defaults.userMappingStoreAttribute;
        }

        @CustomType.Setter
        public Builder assertionAttribute(String assertionAttribute) {
            if (assertionAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "assertionAttribute");
            }
            this.assertionAttribute = assertionAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {

            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {

            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authnRequestBinding(String authnRequestBinding) {
            if (authnRequestBinding == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "authnRequestBinding");
            }
            this.authnRequestBinding = authnRequestBinding;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {

            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder correlationPolicies(List<GetDomainsIdentityProviderCorrelationPolicy> correlationPolicies) {
            if (correlationPolicies == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "correlationPolicies");
            }
            this.correlationPolicies = correlationPolicies;
            return this;
        }
        public Builder correlationPolicies(GetDomainsIdentityProviderCorrelationPolicy... correlationPolicies) {
            return correlationPolicies(List.of(correlationPolicies));
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(String encryptionCertificate) {
            if (encryptionCertificate == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "encryptionCertificate");
            }
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            if (iconUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "iconUrl");
            }
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsIdentityProviderIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsIdentityProviderIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsIdentityProviderIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            if (identityProviderId == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "identityProviderId");
            }
            this.identityProviderId = identityProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder idpSsoUrl(String idpSsoUrl) {
            if (idpSsoUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "idpSsoUrl");
            }
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder includeSigningCertInSignature(Boolean includeSigningCertInSignature) {
            if (includeSigningCertInSignature == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "includeSigningCertInSignature");
            }
            this.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvAssignedGroups(List<GetDomainsIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups) {
            if (jitUserProvAssignedGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvAssignedGroups");
            }
            this.jitUserProvAssignedGroups = jitUserProvAssignedGroups;
            return this;
        }
        public Builder jitUserProvAssignedGroups(GetDomainsIdentityProviderJitUserProvAssignedGroup... jitUserProvAssignedGroups) {
            return jitUserProvAssignedGroups(List.of(jitUserProvAssignedGroups));
        }
        @CustomType.Setter
        public Builder jitUserProvAttributeUpdateEnabled(Boolean jitUserProvAttributeUpdateEnabled) {
            if (jitUserProvAttributeUpdateEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvAttributeUpdateEnabled");
            }
            this.jitUserProvAttributeUpdateEnabled = jitUserProvAttributeUpdateEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvAttributes(List<GetDomainsIdentityProviderJitUserProvAttribute> jitUserProvAttributes) {
            if (jitUserProvAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvAttributes");
            }
            this.jitUserProvAttributes = jitUserProvAttributes;
            return this;
        }
        public Builder jitUserProvAttributes(GetDomainsIdentityProviderJitUserProvAttribute... jitUserProvAttributes) {
            return jitUserProvAttributes(List.of(jitUserProvAttributes));
        }
        @CustomType.Setter
        public Builder jitUserProvCreateUserEnabled(Boolean jitUserProvCreateUserEnabled) {
            if (jitUserProvCreateUserEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvCreateUserEnabled");
            }
            this.jitUserProvCreateUserEnabled = jitUserProvCreateUserEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvEnabled(Boolean jitUserProvEnabled) {
            if (jitUserProvEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvEnabled");
            }
            this.jitUserProvEnabled = jitUserProvEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupAssertionAttributeEnabled(Boolean jitUserProvGroupAssertionAttributeEnabled) {
            if (jitUserProvGroupAssertionAttributeEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupAssertionAttributeEnabled");
            }
            this.jitUserProvGroupAssertionAttributeEnabled = jitUserProvGroupAssertionAttributeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupAssignmentMethod(String jitUserProvGroupAssignmentMethod) {
            if (jitUserProvGroupAssignmentMethod == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupAssignmentMethod");
            }
            this.jitUserProvGroupAssignmentMethod = jitUserProvGroupAssignmentMethod;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupMappingMode(String jitUserProvGroupMappingMode) {
            if (jitUserProvGroupMappingMode == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupMappingMode");
            }
            this.jitUserProvGroupMappingMode = jitUserProvGroupMappingMode;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupMappings(List<GetDomainsIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings) {
            if (jitUserProvGroupMappings == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupMappings");
            }
            this.jitUserProvGroupMappings = jitUserProvGroupMappings;
            return this;
        }
        public Builder jitUserProvGroupMappings(GetDomainsIdentityProviderJitUserProvGroupMapping... jitUserProvGroupMappings) {
            return jitUserProvGroupMappings(List.of(jitUserProvGroupMappings));
        }
        @CustomType.Setter
        public Builder jitUserProvGroupSamlAttributeName(String jitUserProvGroupSamlAttributeName) {
            if (jitUserProvGroupSamlAttributeName == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupSamlAttributeName");
            }
            this.jitUserProvGroupSamlAttributeName = jitUserProvGroupSamlAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupStaticListEnabled(Boolean jitUserProvGroupStaticListEnabled) {
            if (jitUserProvGroupStaticListEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvGroupStaticListEnabled");
            }
            this.jitUserProvGroupStaticListEnabled = jitUserProvGroupStaticListEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvIgnoreErrorOnAbsentGroups(Boolean jitUserProvIgnoreErrorOnAbsentGroups) {
            if (jitUserProvIgnoreErrorOnAbsentGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "jitUserProvIgnoreErrorOnAbsentGroups");
            }
            this.jitUserProvIgnoreErrorOnAbsentGroups = jitUserProvIgnoreErrorOnAbsentGroups;
            return this;
        }
        @CustomType.Setter
        public Builder lastNotificationSentTime(String lastNotificationSentTime) {
            if (lastNotificationSentTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "lastNotificationSentTime");
            }
            this.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutBinding(String logoutBinding) {
            if (logoutBinding == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "logoutBinding");
            }
            this.logoutBinding = logoutBinding;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEnabled(Boolean logoutEnabled) {
            if (logoutEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "logoutEnabled");
            }
            this.logoutEnabled = logoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logoutRequestUrl(String logoutRequestUrl) {
            if (logoutRequestUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "logoutRequestUrl");
            }
            this.logoutRequestUrl = logoutRequestUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logoutResponseUrl(String logoutResponseUrl) {
            if (logoutResponseUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "logoutResponseUrl");
            }
            this.logoutResponseUrl = logoutResponseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsIdentityProviderMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsIdentityProviderMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder nameIdFormat(String nameIdFormat) {
            if (nameIdFormat == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "nameIdFormat");
            }
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder partnerName(String partnerName) {
            if (partnerName == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "partnerName");
            }
            this.partnerName = partnerName;
            return this;
        }
        @CustomType.Setter
        public Builder partnerProviderId(String partnerProviderId) {
            if (partnerProviderId == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "partnerProviderId");
            }
            this.partnerProviderId = partnerProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder requestedAuthenticationContexts(List<String> requestedAuthenticationContexts) {
            if (requestedAuthenticationContexts == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "requestedAuthenticationContexts");
            }
            this.requestedAuthenticationContexts = requestedAuthenticationContexts;
            return this;
        }
        public Builder requestedAuthenticationContexts(String... requestedAuthenticationContexts) {
            return requestedAuthenticationContexts(List.of(requestedAuthenticationContexts));
        }
        @CustomType.Setter
        public Builder requireForceAuthn(Boolean requireForceAuthn) {
            if (requireForceAuthn == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "requireForceAuthn");
            }
            this.requireForceAuthn = requireForceAuthn;
            return this;
        }
        @CustomType.Setter
        public Builder requiresEncryptedAssertion(Boolean requiresEncryptedAssertion) {
            if (requiresEncryptedAssertion == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "requiresEncryptedAssertion");
            }
            this.requiresEncryptedAssertion = requiresEncryptedAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {

            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder samlHoKrequired(Boolean samlHoKrequired) {
            if (samlHoKrequired == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "samlHoKrequired");
            }
            this.samlHoKrequired = samlHoKrequired;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder serviceInstanceIdentifier(String serviceInstanceIdentifier) {
            if (serviceInstanceIdentifier == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "serviceInstanceIdentifier");
            }
            this.serviceInstanceIdentifier = serviceInstanceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder shownOnLoginPage(Boolean shownOnLoginPage) {
            if (shownOnLoginPage == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "shownOnLoginPage");
            }
            this.shownOnLoginPage = shownOnLoginPage;
            return this;
        }
        @CustomType.Setter
        public Builder signatureHashAlgorithm(String signatureHashAlgorithm) {
            if (signatureHashAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "signatureHashAlgorithm");
            }
            this.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(String signingCertificate) {
            if (signingCertificate == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "signingCertificate");
            }
            this.signingCertificate = signingCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder succinctId(String succinctId) {
            if (succinctId == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "succinctId");
            }
            this.succinctId = succinctId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsIdentityProviderTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsIdentityProviderTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder tenantProviderId(String tenantProviderId) {
            if (tenantProviderId == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "tenantProviderId");
            }
            this.tenantProviderId = tenantProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders) {
            if (urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders");
            }
            this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
            return this;
        }
        public Builder urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider... urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders) {
            return urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(List.of(urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders));
        }
        @CustomType.Setter
        public Builder urnietfparamsscimschemasoracleidcsextensionx509identityProviders(List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders) {
            if (urnietfparamsscimschemasoracleidcsextensionx509identityProviders == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "urnietfparamsscimschemasoracleidcsextensionx509identityProviders");
            }
            this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
            return this;
        }
        public Builder urnietfparamsscimschemasoracleidcsextensionx509identityProviders(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider... urnietfparamsscimschemasoracleidcsextensionx509identityProviders) {
            return urnietfparamsscimschemasoracleidcsextensionx509identityProviders(List.of(urnietfparamsscimschemasoracleidcsextensionx509identityProviders));
        }
        @CustomType.Setter
        public Builder userMappingMethod(String userMappingMethod) {
            if (userMappingMethod == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "userMappingMethod");
            }
            this.userMappingMethod = userMappingMethod;
            return this;
        }
        @CustomType.Setter
        public Builder userMappingStoreAttribute(String userMappingStoreAttribute) {
            if (userMappingStoreAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderResult", "userMappingStoreAttribute");
            }
            this.userMappingStoreAttribute = userMappingStoreAttribute;
            return this;
        }
        public GetDomainsIdentityProviderResult build() {
            final var _resultValue = new GetDomainsIdentityProviderResult();
            _resultValue.assertionAttribute = assertionAttribute;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authnRequestBinding = authnRequestBinding;
            _resultValue.authorization = authorization;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.correlationPolicies = correlationPolicies;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.description = description;
            _resultValue.domainOcid = domainOcid;
            _resultValue.enabled = enabled;
            _resultValue.encryptionCertificate = encryptionCertificate;
            _resultValue.externalId = externalId;
            _resultValue.iconUrl = iconUrl;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.idpSsoUrl = idpSsoUrl;
            _resultValue.includeSigningCertInSignature = includeSigningCertInSignature;
            _resultValue.jitUserProvAssignedGroups = jitUserProvAssignedGroups;
            _resultValue.jitUserProvAttributeUpdateEnabled = jitUserProvAttributeUpdateEnabled;
            _resultValue.jitUserProvAttributes = jitUserProvAttributes;
            _resultValue.jitUserProvCreateUserEnabled = jitUserProvCreateUserEnabled;
            _resultValue.jitUserProvEnabled = jitUserProvEnabled;
            _resultValue.jitUserProvGroupAssertionAttributeEnabled = jitUserProvGroupAssertionAttributeEnabled;
            _resultValue.jitUserProvGroupAssignmentMethod = jitUserProvGroupAssignmentMethod;
            _resultValue.jitUserProvGroupMappingMode = jitUserProvGroupMappingMode;
            _resultValue.jitUserProvGroupMappings = jitUserProvGroupMappings;
            _resultValue.jitUserProvGroupSamlAttributeName = jitUserProvGroupSamlAttributeName;
            _resultValue.jitUserProvGroupStaticListEnabled = jitUserProvGroupStaticListEnabled;
            _resultValue.jitUserProvIgnoreErrorOnAbsentGroups = jitUserProvIgnoreErrorOnAbsentGroups;
            _resultValue.lastNotificationSentTime = lastNotificationSentTime;
            _resultValue.logoutBinding = logoutBinding;
            _resultValue.logoutEnabled = logoutEnabled;
            _resultValue.logoutRequestUrl = logoutRequestUrl;
            _resultValue.logoutResponseUrl = logoutResponseUrl;
            _resultValue.metadata = metadata;
            _resultValue.metas = metas;
            _resultValue.nameIdFormat = nameIdFormat;
            _resultValue.ocid = ocid;
            _resultValue.partnerName = partnerName;
            _resultValue.partnerProviderId = partnerProviderId;
            _resultValue.requestedAuthenticationContexts = requestedAuthenticationContexts;
            _resultValue.requireForceAuthn = requireForceAuthn;
            _resultValue.requiresEncryptedAssertion = requiresEncryptedAssertion;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.samlHoKrequired = samlHoKrequired;
            _resultValue.schemas = schemas;
            _resultValue.serviceInstanceIdentifier = serviceInstanceIdentifier;
            _resultValue.shownOnLoginPage = shownOnLoginPage;
            _resultValue.signatureHashAlgorithm = signatureHashAlgorithm;
            _resultValue.signingCertificate = signingCertificate;
            _resultValue.succinctId = succinctId;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.tenantProviderId = tenantProviderId;
            _resultValue.type = type;
            _resultValue.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
            _resultValue.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
            _resultValue.userMappingMethod = userMappingMethod;
            _resultValue.userMappingStoreAttribute = userMappingStoreAttribute;
            return _resultValue;
        }
    }
}
