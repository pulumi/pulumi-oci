// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider {
    /**
     * @return Social IDP Access token URL
     * 
     */
    private String accessTokenUrl;
    /**
     * @return Whether account linking is enabled
     * 
     */
    private Boolean accountLinkingEnabled;
    /**
     * @return Admin scope to request
     * 
     */
    private List<String> adminScopes;
    /**
     * @return Social IDP Authorization URL
     * 
     */
    private String authzUrl;
    /**
     * @return Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
     * 
     */
    private Boolean autoRedirectEnabled;
    /**
     * @return Whether the client credential is contained in payload
     * 
     */
    private Boolean clientCredentialInPayload;
    /**
     * @return Social IDP allowed clock skew time
     * 
     */
    private Integer clockSkewInSeconds;
    /**
     * @return Social IDP Client Application Client ID
     * 
     */
    private String consumerKey;
    /**
     * @return Social IDP Client Application Client Secret
     * 
     */
    private String consumerSecret;
    /**
     * @return Discovery URL
     * 
     */
    private String discoveryUrl;
    /**
     * @return Id attribute used for account linking
     * 
     */
    private String idAttribute;
    /**
     * @return Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
     * 
     */
    private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups;
    /**
     * @return Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    private Boolean jitProvGroupStaticListEnabled;
    /**
     * @return Social IDP User profile URL
     * 
     */
    private String profileUrl;
    /**
     * @return redirect URL for social idp
     * 
     */
    private String redirectUrl;
    /**
     * @return Whether registration is enabled
     * 
     */
    private Boolean registrationEnabled;
    /**
     * @return Scope to request
     * 
     */
    private List<String> scopes;
    /**
     * @return Service Provider Name
     * 
     */
    private String serviceProviderName;
    /**
     * @return Whether Social JIT Provisioning is enabled
     * 
     */
    private Boolean socialJitProvisioningEnabled;
    /**
     * @return Status
     * 
     */
    private String status;

    private GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider() {}
    /**
     * @return Social IDP Access token URL
     * 
     */
    public String accessTokenUrl() {
        return this.accessTokenUrl;
    }
    /**
     * @return Whether account linking is enabled
     * 
     */
    public Boolean accountLinkingEnabled() {
        return this.accountLinkingEnabled;
    }
    /**
     * @return Admin scope to request
     * 
     */
    public List<String> adminScopes() {
        return this.adminScopes;
    }
    /**
     * @return Social IDP Authorization URL
     * 
     */
    public String authzUrl() {
        return this.authzUrl;
    }
    /**
     * @return Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
     * 
     */
    public Boolean autoRedirectEnabled() {
        return this.autoRedirectEnabled;
    }
    /**
     * @return Whether the client credential is contained in payload
     * 
     */
    public Boolean clientCredentialInPayload() {
        return this.clientCredentialInPayload;
    }
    /**
     * @return Social IDP allowed clock skew time
     * 
     */
    public Integer clockSkewInSeconds() {
        return this.clockSkewInSeconds;
    }
    /**
     * @return Social IDP Client Application Client ID
     * 
     */
    public String consumerKey() {
        return this.consumerKey;
    }
    /**
     * @return Social IDP Client Application Client Secret
     * 
     */
    public String consumerSecret() {
        return this.consumerSecret;
    }
    /**
     * @return Discovery URL
     * 
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }
    /**
     * @return Id attribute used for account linking
     * 
     */
    public String idAttribute() {
        return this.idAttribute;
    }
    /**
     * @return Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
     * 
     */
    public List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups() {
        return this.jitProvAssignedGroups;
    }
    /**
     * @return Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    public Boolean jitProvGroupStaticListEnabled() {
        return this.jitProvGroupStaticListEnabled;
    }
    /**
     * @return Social IDP User profile URL
     * 
     */
    public String profileUrl() {
        return this.profileUrl;
    }
    /**
     * @return redirect URL for social idp
     * 
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * @return Whether registration is enabled
     * 
     */
    public Boolean registrationEnabled() {
        return this.registrationEnabled;
    }
    /**
     * @return Scope to request
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Service Provider Name
     * 
     */
    public String serviceProviderName() {
        return this.serviceProviderName;
    }
    /**
     * @return Whether Social JIT Provisioning is enabled
     * 
     */
    public Boolean socialJitProvisioningEnabled() {
        return this.socialJitProvisioningEnabled;
    }
    /**
     * @return Status
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTokenUrl;
        private Boolean accountLinkingEnabled;
        private List<String> adminScopes;
        private String authzUrl;
        private Boolean autoRedirectEnabled;
        private Boolean clientCredentialInPayload;
        private Integer clockSkewInSeconds;
        private String consumerKey;
        private String consumerSecret;
        private String discoveryUrl;
        private String idAttribute;
        private List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups;
        private Boolean jitProvGroupStaticListEnabled;
        private String profileUrl;
        private String redirectUrl;
        private Boolean registrationEnabled;
        private List<String> scopes;
        private String serviceProviderName;
        private Boolean socialJitProvisioningEnabled;
        private String status;
        public Builder() {}
        public Builder(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenUrl = defaults.accessTokenUrl;
    	      this.accountLinkingEnabled = defaults.accountLinkingEnabled;
    	      this.adminScopes = defaults.adminScopes;
    	      this.authzUrl = defaults.authzUrl;
    	      this.autoRedirectEnabled = defaults.autoRedirectEnabled;
    	      this.clientCredentialInPayload = defaults.clientCredentialInPayload;
    	      this.clockSkewInSeconds = defaults.clockSkewInSeconds;
    	      this.consumerKey = defaults.consumerKey;
    	      this.consumerSecret = defaults.consumerSecret;
    	      this.discoveryUrl = defaults.discoveryUrl;
    	      this.idAttribute = defaults.idAttribute;
    	      this.jitProvAssignedGroups = defaults.jitProvAssignedGroups;
    	      this.jitProvGroupStaticListEnabled = defaults.jitProvGroupStaticListEnabled;
    	      this.profileUrl = defaults.profileUrl;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.registrationEnabled = defaults.registrationEnabled;
    	      this.scopes = defaults.scopes;
    	      this.serviceProviderName = defaults.serviceProviderName;
    	      this.socialJitProvisioningEnabled = defaults.socialJitProvisioningEnabled;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder accessTokenUrl(String accessTokenUrl) {
            if (accessTokenUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "accessTokenUrl");
            }
            this.accessTokenUrl = accessTokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder accountLinkingEnabled(Boolean accountLinkingEnabled) {
            if (accountLinkingEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "accountLinkingEnabled");
            }
            this.accountLinkingEnabled = accountLinkingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder adminScopes(List<String> adminScopes) {
            if (adminScopes == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "adminScopes");
            }
            this.adminScopes = adminScopes;
            return this;
        }
        public Builder adminScopes(String... adminScopes) {
            return adminScopes(List.of(adminScopes));
        }
        @CustomType.Setter
        public Builder authzUrl(String authzUrl) {
            if (authzUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "authzUrl");
            }
            this.authzUrl = authzUrl;
            return this;
        }
        @CustomType.Setter
        public Builder autoRedirectEnabled(Boolean autoRedirectEnabled) {
            if (autoRedirectEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "autoRedirectEnabled");
            }
            this.autoRedirectEnabled = autoRedirectEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientCredentialInPayload(Boolean clientCredentialInPayload) {
            if (clientCredentialInPayload == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "clientCredentialInPayload");
            }
            this.clientCredentialInPayload = clientCredentialInPayload;
            return this;
        }
        @CustomType.Setter
        public Builder clockSkewInSeconds(Integer clockSkewInSeconds) {
            if (clockSkewInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "clockSkewInSeconds");
            }
            this.clockSkewInSeconds = clockSkewInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder consumerKey(String consumerKey) {
            if (consumerKey == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "consumerKey");
            }
            this.consumerKey = consumerKey;
            return this;
        }
        @CustomType.Setter
        public Builder consumerSecret(String consumerSecret) {
            if (consumerSecret == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "consumerSecret");
            }
            this.consumerSecret = consumerSecret;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryUrl(String discoveryUrl) {
            if (discoveryUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "discoveryUrl");
            }
            this.discoveryUrl = discoveryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder idAttribute(String idAttribute) {
            if (idAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "idAttribute");
            }
            this.idAttribute = idAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder jitProvAssignedGroups(List<GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups) {
            if (jitProvAssignedGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "jitProvAssignedGroups");
            }
            this.jitProvAssignedGroups = jitProvAssignedGroups;
            return this;
        }
        public Builder jitProvAssignedGroups(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup... jitProvAssignedGroups) {
            return jitProvAssignedGroups(List.of(jitProvAssignedGroups));
        }
        @CustomType.Setter
        public Builder jitProvGroupStaticListEnabled(Boolean jitProvGroupStaticListEnabled) {
            if (jitProvGroupStaticListEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "jitProvGroupStaticListEnabled");
            }
            this.jitProvGroupStaticListEnabled = jitProvGroupStaticListEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder profileUrl(String profileUrl) {
            if (profileUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "profileUrl");
            }
            this.profileUrl = profileUrl;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            if (redirectUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "redirectUrl");
            }
            this.redirectUrl = redirectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder registrationEnabled(Boolean registrationEnabled) {
            if (registrationEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "registrationEnabled");
            }
            this.registrationEnabled = registrationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder serviceProviderName(String serviceProviderName) {
            if (serviceProviderName == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "serviceProviderName");
            }
            this.serviceProviderName = serviceProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder socialJitProvisioningEnabled(Boolean socialJitProvisioningEnabled) {
            if (socialJitProvisioningEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "socialJitProvisioningEnabled");
            }
            this.socialJitProvisioningEnabled = socialJitProvisioningEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider", "status");
            }
            this.status = status;
            return this;
        }
        public GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider build() {
            final var _resultValue = new GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider();
            _resultValue.accessTokenUrl = accessTokenUrl;
            _resultValue.accountLinkingEnabled = accountLinkingEnabled;
            _resultValue.adminScopes = adminScopes;
            _resultValue.authzUrl = authzUrl;
            _resultValue.autoRedirectEnabled = autoRedirectEnabled;
            _resultValue.clientCredentialInPayload = clientCredentialInPayload;
            _resultValue.clockSkewInSeconds = clockSkewInSeconds;
            _resultValue.consumerKey = consumerKey;
            _resultValue.consumerSecret = consumerSecret;
            _resultValue.discoveryUrl = discoveryUrl;
            _resultValue.idAttribute = idAttribute;
            _resultValue.jitProvAssignedGroups = jitProvAssignedGroups;
            _resultValue.jitProvGroupStaticListEnabled = jitProvGroupStaticListEnabled;
            _resultValue.profileUrl = profileUrl;
            _resultValue.redirectUrl = redirectUrl;
            _resultValue.registrationEnabled = registrationEnabled;
            _resultValue.scopes = scopes;
            _resultValue.serviceProviderName = serviceProviderName;
            _resultValue.socialJitProvisioningEnabled = socialJitProvisioningEnabled;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
