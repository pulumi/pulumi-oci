// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderTag;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider;
import com.pulumi.oci.Identity.outputs.GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsIdentityProvidersIdentityProvider {
    /**
     * @return Assertion attribute name.
     * 
     */
    private @Nullable String assertionAttribute;
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    private @Nullable List<String> attributeSets;
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    private @Nullable String attributes;
    /**
     * @return HTTP binding to use for authentication requests.
     * 
     */
    private @Nullable String authnRequestBinding;
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String compartmentOcid;
    /**
     * @return Correlation policy
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy> correlationPolicies;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private @Nullable Boolean deleteInProgress;
    /**
     * @return Description
     * 
     */
    private @Nullable String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String domainOcid;
    /**
     * @return Set to true to indicate Partner enabled.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Encryption certificate
     * 
     */
    private @Nullable String encryptionCertificate;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private @Nullable String externalId;
    /**
     * @return Identity Provider Icon URL.
     * 
     */
    private @Nullable String iconUrl;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private @Nullable String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    private @Nullable String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private @Nullable String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private @Nullable List<String> idcsPreventedOperations;
    /**
     * @return Identity Provider SSO URL
     * 
     */
    private @Nullable String idpSsoUrl;
    /**
     * @return Set to true to include the signing certificate in the signature.
     * 
     */
    private @Nullable Boolean includeSigningCertInSignature;
    /**
     * @return Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups;
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    private @Nullable Boolean jitUserProvAttributeUpdateEnabled;
    /**
     * @return Assertion To User Mapping
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute> jitUserProvAttributes;
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    private @Nullable Boolean jitUserProvCreateUserEnabled;
    /**
     * @return Set to true to indicate JIT User Provisioning is enabled
     * 
     */
    private @Nullable Boolean jitUserProvEnabled;
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
     * 
     */
    private @Nullable Boolean jitUserProvGroupAssertionAttributeEnabled;
    /**
     * @return The default value is &#39;Overwrite&#39;, which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify &#39;Merge&#39; if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
     * 
     */
    private @Nullable String jitUserProvGroupAssignmentMethod;
    /**
     * @return Property to indicate the mode of group mapping
     * 
     */
    private @Nullable String jitUserProvGroupMappingMode;
    /**
     * @return The list of mappings between the Identity Domain Group and the IDP group.
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings;
    /**
     * @return Name of the assertion attribute containing the users groups
     * 
     */
    private @Nullable String jitUserProvGroupSamlAttributeName;
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    private @Nullable Boolean jitUserProvGroupStaticListEnabled;
    /**
     * @return Set to true to indicate ignoring absence of group while provisioning
     * 
     */
    private @Nullable Boolean jitUserProvIgnoreErrorOnAbsentGroups;
    /**
     * @return Records the notification timestamp for the IdP whose signing certificate is about to expire
     * 
     */
    private @Nullable String lastNotificationSentTime;
    /**
     * @return HTTP binding to use for logout.
     * 
     */
    private @Nullable String logoutBinding;
    /**
     * @return Set to true to enable logout.
     * 
     */
    private @Nullable Boolean logoutEnabled;
    /**
     * @return Logout request URL
     * 
     */
    private @Nullable String logoutRequestUrl;
    /**
     * @return Logout response URL
     * 
     */
    private @Nullable String logoutResponseUrl;
    /**
     * @return Metadata
     * 
     */
    private @Nullable String metadata;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderMeta> metas;
    /**
     * @return Default authentication request name ID format.
     * 
     */
    private @Nullable String nameIdFormat;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private @Nullable String ocid;
    /**
     * @return Unique name of the trusted Identity Provider.
     * 
     */
    private @Nullable String partnerName;
    /**
     * @return Provider ID
     * 
     */
    private @Nullable String partnerProviderId;
    /**
     * @return SAML SP authentication type.
     * 
     */
    private @Nullable List<String> requestedAuthenticationContexts;
    /**
     * @return This SP requires requests SAML IdP to enforce re-authentication.
     * 
     */
    private @Nullable Boolean requireForceAuthn;
    /**
     * @return SAML SP must accept encrypted assertion only.
     * 
     */
    private @Nullable Boolean requiresEncryptedAssertion;
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return SAML SP HoK Enabled.
     * 
     */
    private @Nullable Boolean samlHoKrequired;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private @Nullable List<String> schemas;
    /**
     * @return The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
     * 
     */
    private @Nullable String serviceInstanceIdentifier;
    /**
     * @return Set to true to indicate whether to show IdP in login page or not.
     * 
     */
    private @Nullable Boolean shownOnLoginPage;
    /**
     * @return Signature hash algorithm.
     * 
     */
    private @Nullable String signatureHashAlgorithm;
    /**
     * @return Signing certificate
     * 
     */
    private @Nullable String signingCertificate;
    /**
     * @return Succinct ID
     * 
     */
    private @Nullable String succinctId;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String tenancyOcid;
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
     * 
     */
    private @Nullable String tenantProviderId;
    /**
     * @return Identity Provider Type
     * 
     */
    private @Nullable String type;
    /**
     * @return Social Identity Provider Extension Schema
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    /**
     * @return X509 Identity Provider Extension Schema
     * 
     */
    private @Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    /**
     * @return User mapping method.
     * 
     */
    private @Nullable String userMappingMethod;
    /**
     * @return This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.&lt;br&gt;You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the &lt;b&gt;Example of a Request Body&lt;/b&gt; section of the Examples tab for the &lt;a href=&#39;./op-admin-v1-identityproviders-post.html&#39;&gt;POST&lt;/a&gt; and &lt;a href=&#39;./op-admin-v1-identityproviders-id-put.html&#39;&gt;PUT&lt;/a&gt; methods of the /IdentityProviders endpoint.
     * 
     */
    private @Nullable String userMappingStoreAttribute;

    private GetDomainsIdentityProvidersIdentityProvider() {}
    /**
     * @return Assertion attribute name.
     * 
     */
    public Optional<String> assertionAttribute() {
        return Optional.ofNullable(this.assertionAttribute);
    }
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    /**
     * @return HTTP binding to use for authentication requests.
     * 
     */
    public Optional<String> authnRequestBinding() {
        return Optional.ofNullable(this.authnRequestBinding);
    }
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }
    /**
     * @return Correlation policy
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy> correlationPolicies() {
        return this.correlationPolicies == null ? List.of() : this.correlationPolicies;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Optional<Boolean> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }
    /**
     * @return Description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }
    /**
     * @return Set to true to indicate Partner enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Encryption certificate
     * 
     */
    public Optional<String> encryptionCertificate() {
        return Optional.ofNullable(this.encryptionCertificate);
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    /**
     * @return Identity Provider Icon URL.
     * 
     */
    public Optional<String> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies == null ? List.of() : this.idcsCreatedBies;
    }
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public Optional<String> idcsEndpoint() {
        return Optional.ofNullable(this.idcsEndpoint);
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies == null ? List.of() : this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public Optional<String> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations == null ? List.of() : this.idcsPreventedOperations;
    }
    /**
     * @return Identity Provider SSO URL
     * 
     */
    public Optional<String> idpSsoUrl() {
        return Optional.ofNullable(this.idpSsoUrl);
    }
    /**
     * @return Set to true to include the signing certificate in the signature.
     * 
     */
    public Optional<Boolean> includeSigningCertInSignature() {
        return Optional.ofNullable(this.includeSigningCertInSignature);
    }
    /**
     * @return Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups() {
        return this.jitUserProvAssignedGroups == null ? List.of() : this.jitUserProvAssignedGroups;
    }
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    public Optional<Boolean> jitUserProvAttributeUpdateEnabled() {
        return Optional.ofNullable(this.jitUserProvAttributeUpdateEnabled);
    }
    /**
     * @return Assertion To User Mapping
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute> jitUserProvAttributes() {
        return this.jitUserProvAttributes == null ? List.of() : this.jitUserProvAttributes;
    }
    /**
     * @return Set to true to indicate JIT User Creation is enabled
     * 
     */
    public Optional<Boolean> jitUserProvCreateUserEnabled() {
        return Optional.ofNullable(this.jitUserProvCreateUserEnabled);
    }
    /**
     * @return Set to true to indicate JIT User Provisioning is enabled
     * 
     */
    public Optional<Boolean> jitUserProvEnabled() {
        return Optional.ofNullable(this.jitUserProvEnabled);
    }
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
     * 
     */
    public Optional<Boolean> jitUserProvGroupAssertionAttributeEnabled() {
        return Optional.ofNullable(this.jitUserProvGroupAssertionAttributeEnabled);
    }
    /**
     * @return The default value is &#39;Overwrite&#39;, which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify &#39;Merge&#39; if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
     * 
     */
    public Optional<String> jitUserProvGroupAssignmentMethod() {
        return Optional.ofNullable(this.jitUserProvGroupAssignmentMethod);
    }
    /**
     * @return Property to indicate the mode of group mapping
     * 
     */
    public Optional<String> jitUserProvGroupMappingMode() {
        return Optional.ofNullable(this.jitUserProvGroupMappingMode);
    }
    /**
     * @return The list of mappings between the Identity Domain Group and the IDP group.
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings() {
        return this.jitUserProvGroupMappings == null ? List.of() : this.jitUserProvGroupMappings;
    }
    /**
     * @return Name of the assertion attribute containing the users groups
     * 
     */
    public Optional<String> jitUserProvGroupSamlAttributeName() {
        return Optional.ofNullable(this.jitUserProvGroupSamlAttributeName);
    }
    /**
     * @return Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    public Optional<Boolean> jitUserProvGroupStaticListEnabled() {
        return Optional.ofNullable(this.jitUserProvGroupStaticListEnabled);
    }
    /**
     * @return Set to true to indicate ignoring absence of group while provisioning
     * 
     */
    public Optional<Boolean> jitUserProvIgnoreErrorOnAbsentGroups() {
        return Optional.ofNullable(this.jitUserProvIgnoreErrorOnAbsentGroups);
    }
    /**
     * @return Records the notification timestamp for the IdP whose signing certificate is about to expire
     * 
     */
    public Optional<String> lastNotificationSentTime() {
        return Optional.ofNullable(this.lastNotificationSentTime);
    }
    /**
     * @return HTTP binding to use for logout.
     * 
     */
    public Optional<String> logoutBinding() {
        return Optional.ofNullable(this.logoutBinding);
    }
    /**
     * @return Set to true to enable logout.
     * 
     */
    public Optional<Boolean> logoutEnabled() {
        return Optional.ofNullable(this.logoutEnabled);
    }
    /**
     * @return Logout request URL
     * 
     */
    public Optional<String> logoutRequestUrl() {
        return Optional.ofNullable(this.logoutRequestUrl);
    }
    /**
     * @return Logout response URL
     * 
     */
    public Optional<String> logoutResponseUrl() {
        return Optional.ofNullable(this.logoutResponseUrl);
    }
    /**
     * @return Metadata
     * 
     */
    public Optional<String> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderMeta> metas() {
        return this.metas == null ? List.of() : this.metas;
    }
    /**
     * @return Default authentication request name ID format.
     * 
     */
    public Optional<String> nameIdFormat() {
        return Optional.ofNullable(this.nameIdFormat);
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    /**
     * @return Unique name of the trusted Identity Provider.
     * 
     */
    public Optional<String> partnerName() {
        return Optional.ofNullable(this.partnerName);
    }
    /**
     * @return Provider ID
     * 
     */
    public Optional<String> partnerProviderId() {
        return Optional.ofNullable(this.partnerProviderId);
    }
    /**
     * @return SAML SP authentication type.
     * 
     */
    public List<String> requestedAuthenticationContexts() {
        return this.requestedAuthenticationContexts == null ? List.of() : this.requestedAuthenticationContexts;
    }
    /**
     * @return This SP requires requests SAML IdP to enforce re-authentication.
     * 
     */
    public Optional<Boolean> requireForceAuthn() {
        return Optional.ofNullable(this.requireForceAuthn);
    }
    /**
     * @return SAML SP must accept encrypted assertion only.
     * 
     */
    public Optional<Boolean> requiresEncryptedAssertion() {
        return Optional.ofNullable(this.requiresEncryptedAssertion);
    }
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return SAML SP HoK Enabled.
     * 
     */
    public Optional<Boolean> samlHoKrequired() {
        return Optional.ofNullable(this.samlHoKrequired);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    /**
     * @return The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
     * 
     */
    public Optional<String> serviceInstanceIdentifier() {
        return Optional.ofNullable(this.serviceInstanceIdentifier);
    }
    /**
     * @return Set to true to indicate whether to show IdP in login page or not.
     * 
     */
    public Optional<Boolean> shownOnLoginPage() {
        return Optional.ofNullable(this.shownOnLoginPage);
    }
    /**
     * @return Signature hash algorithm.
     * 
     */
    public Optional<String> signatureHashAlgorithm() {
        return Optional.ofNullable(this.signatureHashAlgorithm);
    }
    /**
     * @return Signing certificate
     * 
     */
    public Optional<String> signingCertificate() {
        return Optional.ofNullable(this.signingCertificate);
    }
    /**
     * @return Succinct ID
     * 
     */
    public Optional<String> succinctId() {
        return Optional.ofNullable(this.succinctId);
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }
    /**
     * @return The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
     * 
     */
    public Optional<String> tenantProviderId() {
        return Optional.ofNullable(this.tenantProviderId);
    }
    /**
     * @return Identity Provider Type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Social Identity Provider Extension Schema
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders() {
        return this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders == null ? List.of() : this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    }
    /**
     * @return X509 Identity Provider Extension Schema
     * 
     */
    public List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders() {
        return this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders == null ? List.of() : this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    }
    /**
     * @return User mapping method.
     * 
     */
    public Optional<String> userMappingMethod() {
        return Optional.ofNullable(this.userMappingMethod);
    }
    /**
     * @return This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.&lt;br&gt;You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the &lt;b&gt;Example of a Request Body&lt;/b&gt; section of the Examples tab for the &lt;a href=&#39;./op-admin-v1-identityproviders-post.html&#39;&gt;POST&lt;/a&gt; and &lt;a href=&#39;./op-admin-v1-identityproviders-id-put.html&#39;&gt;PUT&lt;/a&gt; methods of the /IdentityProviders endpoint.
     * 
     */
    public Optional<String> userMappingStoreAttribute() {
        return Optional.ofNullable(this.userMappingStoreAttribute);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsIdentityProvidersIdentityProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assertionAttribute;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authnRequestBinding;
        private @Nullable String authorization;
        private @Nullable String compartmentOcid;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy> correlationPolicies;
        private @Nullable Boolean deleteInProgress;
        private @Nullable String description;
        private @Nullable String domainOcid;
        private @Nullable Boolean enabled;
        private @Nullable String encryptionCertificate;
        private @Nullable String externalId;
        private @Nullable String iconUrl;
        private @Nullable String id;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy> idcsCreatedBies;
        private @Nullable String idcsEndpoint;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
        private @Nullable String idcsLastUpgradedInRelease;
        private @Nullable List<String> idcsPreventedOperations;
        private @Nullable String idpSsoUrl;
        private @Nullable Boolean includeSigningCertInSignature;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups;
        private @Nullable Boolean jitUserProvAttributeUpdateEnabled;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute> jitUserProvAttributes;
        private @Nullable Boolean jitUserProvCreateUserEnabled;
        private @Nullable Boolean jitUserProvEnabled;
        private @Nullable Boolean jitUserProvGroupAssertionAttributeEnabled;
        private @Nullable String jitUserProvGroupAssignmentMethod;
        private @Nullable String jitUserProvGroupMappingMode;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings;
        private @Nullable String jitUserProvGroupSamlAttributeName;
        private @Nullable Boolean jitUserProvGroupStaticListEnabled;
        private @Nullable Boolean jitUserProvIgnoreErrorOnAbsentGroups;
        private @Nullable String lastNotificationSentTime;
        private @Nullable String logoutBinding;
        private @Nullable Boolean logoutEnabled;
        private @Nullable String logoutRequestUrl;
        private @Nullable String logoutResponseUrl;
        private @Nullable String metadata;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderMeta> metas;
        private @Nullable String nameIdFormat;
        private @Nullable String ocid;
        private @Nullable String partnerName;
        private @Nullable String partnerProviderId;
        private @Nullable List<String> requestedAuthenticationContexts;
        private @Nullable Boolean requireForceAuthn;
        private @Nullable Boolean requiresEncryptedAssertion;
        private @Nullable String resourceTypeSchemaVersion;
        private @Nullable Boolean samlHoKrequired;
        private @Nullable List<String> schemas;
        private @Nullable String serviceInstanceIdentifier;
        private @Nullable Boolean shownOnLoginPage;
        private @Nullable String signatureHashAlgorithm;
        private @Nullable String signingCertificate;
        private @Nullable String succinctId;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderTag> tags;
        private @Nullable String tenancyOcid;
        private @Nullable String tenantProviderId;
        private @Nullable String type;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
        private @Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
        private @Nullable String userMappingMethod;
        private @Nullable String userMappingStoreAttribute;
        public Builder() {}
        public Builder(GetDomainsIdentityProvidersIdentityProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionAttribute = defaults.assertionAttribute;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authnRequestBinding = defaults.authnRequestBinding;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.correlationPolicies = defaults.correlationPolicies;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.enabled = defaults.enabled;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.externalId = defaults.externalId;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.idpSsoUrl = defaults.idpSsoUrl;
    	      this.includeSigningCertInSignature = defaults.includeSigningCertInSignature;
    	      this.jitUserProvAssignedGroups = defaults.jitUserProvAssignedGroups;
    	      this.jitUserProvAttributeUpdateEnabled = defaults.jitUserProvAttributeUpdateEnabled;
    	      this.jitUserProvAttributes = defaults.jitUserProvAttributes;
    	      this.jitUserProvCreateUserEnabled = defaults.jitUserProvCreateUserEnabled;
    	      this.jitUserProvEnabled = defaults.jitUserProvEnabled;
    	      this.jitUserProvGroupAssertionAttributeEnabled = defaults.jitUserProvGroupAssertionAttributeEnabled;
    	      this.jitUserProvGroupAssignmentMethod = defaults.jitUserProvGroupAssignmentMethod;
    	      this.jitUserProvGroupMappingMode = defaults.jitUserProvGroupMappingMode;
    	      this.jitUserProvGroupMappings = defaults.jitUserProvGroupMappings;
    	      this.jitUserProvGroupSamlAttributeName = defaults.jitUserProvGroupSamlAttributeName;
    	      this.jitUserProvGroupStaticListEnabled = defaults.jitUserProvGroupStaticListEnabled;
    	      this.jitUserProvIgnoreErrorOnAbsentGroups = defaults.jitUserProvIgnoreErrorOnAbsentGroups;
    	      this.lastNotificationSentTime = defaults.lastNotificationSentTime;
    	      this.logoutBinding = defaults.logoutBinding;
    	      this.logoutEnabled = defaults.logoutEnabled;
    	      this.logoutRequestUrl = defaults.logoutRequestUrl;
    	      this.logoutResponseUrl = defaults.logoutResponseUrl;
    	      this.metadata = defaults.metadata;
    	      this.metas = defaults.metas;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.ocid = defaults.ocid;
    	      this.partnerName = defaults.partnerName;
    	      this.partnerProviderId = defaults.partnerProviderId;
    	      this.requestedAuthenticationContexts = defaults.requestedAuthenticationContexts;
    	      this.requireForceAuthn = defaults.requireForceAuthn;
    	      this.requiresEncryptedAssertion = defaults.requiresEncryptedAssertion;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.samlHoKrequired = defaults.samlHoKrequired;
    	      this.schemas = defaults.schemas;
    	      this.serviceInstanceIdentifier = defaults.serviceInstanceIdentifier;
    	      this.shownOnLoginPage = defaults.shownOnLoginPage;
    	      this.signatureHashAlgorithm = defaults.signatureHashAlgorithm;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.succinctId = defaults.succinctId;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.tenantProviderId = defaults.tenantProviderId;
    	      this.type = defaults.type;
    	      this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = defaults.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
    	      this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = defaults.urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
    	      this.userMappingMethod = defaults.userMappingMethod;
    	      this.userMappingStoreAttribute = defaults.userMappingStoreAttribute;
        }

        @CustomType.Setter
        public Builder assertionAttribute(@Nullable String assertionAttribute) {
            this.assertionAttribute = assertionAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authnRequestBinding(@Nullable String authnRequestBinding) {
            this.authnRequestBinding = authnRequestBinding;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(@Nullable String compartmentOcid) {
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder correlationPolicies(@Nullable List<GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy> correlationPolicies) {
            this.correlationPolicies = correlationPolicies;
            return this;
        }
        public Builder correlationPolicies(GetDomainsIdentityProvidersIdentityProviderCorrelationPolicy... correlationPolicies) {
            return correlationPolicies(List.of(correlationPolicies));
        }
        @CustomType.Setter
        public Builder deleteInProgress(@Nullable Boolean deleteInProgress) {
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(@Nullable String domainOcid) {
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(@Nullable String encryptionCertificate) {
            this.encryptionCertificate = encryptionCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable String externalId) {
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(@Nullable String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(@Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsIdentityProvidersIdentityProviderIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(@Nullable String idcsEndpoint) {
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(@Nullable List<GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(@Nullable String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(@Nullable List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder idpSsoUrl(@Nullable String idpSsoUrl) {
            this.idpSsoUrl = idpSsoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder includeSigningCertInSignature(@Nullable Boolean includeSigningCertInSignature) {
            this.includeSigningCertInSignature = includeSigningCertInSignature;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvAssignedGroups(@Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup> jitUserProvAssignedGroups) {
            this.jitUserProvAssignedGroups = jitUserProvAssignedGroups;
            return this;
        }
        public Builder jitUserProvAssignedGroups(GetDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup... jitUserProvAssignedGroups) {
            return jitUserProvAssignedGroups(List.of(jitUserProvAssignedGroups));
        }
        @CustomType.Setter
        public Builder jitUserProvAttributeUpdateEnabled(@Nullable Boolean jitUserProvAttributeUpdateEnabled) {
            this.jitUserProvAttributeUpdateEnabled = jitUserProvAttributeUpdateEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvAttributes(@Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute> jitUserProvAttributes) {
            this.jitUserProvAttributes = jitUserProvAttributes;
            return this;
        }
        public Builder jitUserProvAttributes(GetDomainsIdentityProvidersIdentityProviderJitUserProvAttribute... jitUserProvAttributes) {
            return jitUserProvAttributes(List.of(jitUserProvAttributes));
        }
        @CustomType.Setter
        public Builder jitUserProvCreateUserEnabled(@Nullable Boolean jitUserProvCreateUserEnabled) {
            this.jitUserProvCreateUserEnabled = jitUserProvCreateUserEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvEnabled(@Nullable Boolean jitUserProvEnabled) {
            this.jitUserProvEnabled = jitUserProvEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupAssertionAttributeEnabled(@Nullable Boolean jitUserProvGroupAssertionAttributeEnabled) {
            this.jitUserProvGroupAssertionAttributeEnabled = jitUserProvGroupAssertionAttributeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupAssignmentMethod(@Nullable String jitUserProvGroupAssignmentMethod) {
            this.jitUserProvGroupAssignmentMethod = jitUserProvGroupAssignmentMethod;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupMappingMode(@Nullable String jitUserProvGroupMappingMode) {
            this.jitUserProvGroupMappingMode = jitUserProvGroupMappingMode;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupMappings(@Nullable List<GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping> jitUserProvGroupMappings) {
            this.jitUserProvGroupMappings = jitUserProvGroupMappings;
            return this;
        }
        public Builder jitUserProvGroupMappings(GetDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping... jitUserProvGroupMappings) {
            return jitUserProvGroupMappings(List.of(jitUserProvGroupMappings));
        }
        @CustomType.Setter
        public Builder jitUserProvGroupSamlAttributeName(@Nullable String jitUserProvGroupSamlAttributeName) {
            this.jitUserProvGroupSamlAttributeName = jitUserProvGroupSamlAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvGroupStaticListEnabled(@Nullable Boolean jitUserProvGroupStaticListEnabled) {
            this.jitUserProvGroupStaticListEnabled = jitUserProvGroupStaticListEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jitUserProvIgnoreErrorOnAbsentGroups(@Nullable Boolean jitUserProvIgnoreErrorOnAbsentGroups) {
            this.jitUserProvIgnoreErrorOnAbsentGroups = jitUserProvIgnoreErrorOnAbsentGroups;
            return this;
        }
        @CustomType.Setter
        public Builder lastNotificationSentTime(@Nullable String lastNotificationSentTime) {
            this.lastNotificationSentTime = lastNotificationSentTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutBinding(@Nullable String logoutBinding) {
            this.logoutBinding = logoutBinding;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEnabled(@Nullable Boolean logoutEnabled) {
            this.logoutEnabled = logoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logoutRequestUrl(@Nullable String logoutRequestUrl) {
            this.logoutRequestUrl = logoutRequestUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logoutResponseUrl(@Nullable String logoutResponseUrl) {
            this.logoutResponseUrl = logoutResponseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable String metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder metas(@Nullable List<GetDomainsIdentityProvidersIdentityProviderMeta> metas) {
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsIdentityProvidersIdentityProviderMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder nameIdFormat(@Nullable String nameIdFormat) {
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder partnerName(@Nullable String partnerName) {
            this.partnerName = partnerName;
            return this;
        }
        @CustomType.Setter
        public Builder partnerProviderId(@Nullable String partnerProviderId) {
            this.partnerProviderId = partnerProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder requestedAuthenticationContexts(@Nullable List<String> requestedAuthenticationContexts) {
            this.requestedAuthenticationContexts = requestedAuthenticationContexts;
            return this;
        }
        public Builder requestedAuthenticationContexts(String... requestedAuthenticationContexts) {
            return requestedAuthenticationContexts(List.of(requestedAuthenticationContexts));
        }
        @CustomType.Setter
        public Builder requireForceAuthn(@Nullable Boolean requireForceAuthn) {
            this.requireForceAuthn = requireForceAuthn;
            return this;
        }
        @CustomType.Setter
        public Builder requiresEncryptedAssertion(@Nullable Boolean requiresEncryptedAssertion) {
            this.requiresEncryptedAssertion = requiresEncryptedAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder samlHoKrequired(@Nullable Boolean samlHoKrequired) {
            this.samlHoKrequired = samlHoKrequired;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder serviceInstanceIdentifier(@Nullable String serviceInstanceIdentifier) {
            this.serviceInstanceIdentifier = serviceInstanceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder shownOnLoginPage(@Nullable Boolean shownOnLoginPage) {
            this.shownOnLoginPage = shownOnLoginPage;
            return this;
        }
        @CustomType.Setter
        public Builder signatureHashAlgorithm(@Nullable String signatureHashAlgorithm) {
            this.signatureHashAlgorithm = signatureHashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(@Nullable String signingCertificate) {
            this.signingCertificate = signingCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder succinctId(@Nullable String succinctId) {
            this.succinctId = succinctId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<GetDomainsIdentityProvidersIdentityProviderTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsIdentityProvidersIdentityProviderTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(@Nullable String tenancyOcid) {
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder tenantProviderId(@Nullable String tenantProviderId) {
            this.tenantProviderId = tenantProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(@Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider> urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders) {
            this.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
            return this;
        }
        public Builder urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider... urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders) {
            return urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders(List.of(urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders));
        }
        @CustomType.Setter
        public Builder urnietfparamsscimschemasoracleidcsextensionx509identityProviders(@Nullable List<GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider> urnietfparamsscimschemasoracleidcsextensionx509identityProviders) {
            this.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
            return this;
        }
        public Builder urnietfparamsscimschemasoracleidcsextensionx509identityProviders(GetDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider... urnietfparamsscimschemasoracleidcsextensionx509identityProviders) {
            return urnietfparamsscimschemasoracleidcsextensionx509identityProviders(List.of(urnietfparamsscimschemasoracleidcsextensionx509identityProviders));
        }
        @CustomType.Setter
        public Builder userMappingMethod(@Nullable String userMappingMethod) {
            this.userMappingMethod = userMappingMethod;
            return this;
        }
        @CustomType.Setter
        public Builder userMappingStoreAttribute(@Nullable String userMappingStoreAttribute) {
            this.userMappingStoreAttribute = userMappingStoreAttribute;
            return this;
        }
        public GetDomainsIdentityProvidersIdentityProvider build() {
            final var o = new GetDomainsIdentityProvidersIdentityProvider();
            o.assertionAttribute = assertionAttribute;
            o.attributeSets = attributeSets;
            o.attributes = attributes;
            o.authnRequestBinding = authnRequestBinding;
            o.authorization = authorization;
            o.compartmentOcid = compartmentOcid;
            o.correlationPolicies = correlationPolicies;
            o.deleteInProgress = deleteInProgress;
            o.description = description;
            o.domainOcid = domainOcid;
            o.enabled = enabled;
            o.encryptionCertificate = encryptionCertificate;
            o.externalId = externalId;
            o.iconUrl = iconUrl;
            o.id = id;
            o.idcsCreatedBies = idcsCreatedBies;
            o.idcsEndpoint = idcsEndpoint;
            o.idcsLastModifiedBies = idcsLastModifiedBies;
            o.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            o.idcsPreventedOperations = idcsPreventedOperations;
            o.idpSsoUrl = idpSsoUrl;
            o.includeSigningCertInSignature = includeSigningCertInSignature;
            o.jitUserProvAssignedGroups = jitUserProvAssignedGroups;
            o.jitUserProvAttributeUpdateEnabled = jitUserProvAttributeUpdateEnabled;
            o.jitUserProvAttributes = jitUserProvAttributes;
            o.jitUserProvCreateUserEnabled = jitUserProvCreateUserEnabled;
            o.jitUserProvEnabled = jitUserProvEnabled;
            o.jitUserProvGroupAssertionAttributeEnabled = jitUserProvGroupAssertionAttributeEnabled;
            o.jitUserProvGroupAssignmentMethod = jitUserProvGroupAssignmentMethod;
            o.jitUserProvGroupMappingMode = jitUserProvGroupMappingMode;
            o.jitUserProvGroupMappings = jitUserProvGroupMappings;
            o.jitUserProvGroupSamlAttributeName = jitUserProvGroupSamlAttributeName;
            o.jitUserProvGroupStaticListEnabled = jitUserProvGroupStaticListEnabled;
            o.jitUserProvIgnoreErrorOnAbsentGroups = jitUserProvIgnoreErrorOnAbsentGroups;
            o.lastNotificationSentTime = lastNotificationSentTime;
            o.logoutBinding = logoutBinding;
            o.logoutEnabled = logoutEnabled;
            o.logoutRequestUrl = logoutRequestUrl;
            o.logoutResponseUrl = logoutResponseUrl;
            o.metadata = metadata;
            o.metas = metas;
            o.nameIdFormat = nameIdFormat;
            o.ocid = ocid;
            o.partnerName = partnerName;
            o.partnerProviderId = partnerProviderId;
            o.requestedAuthenticationContexts = requestedAuthenticationContexts;
            o.requireForceAuthn = requireForceAuthn;
            o.requiresEncryptedAssertion = requiresEncryptedAssertion;
            o.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            o.samlHoKrequired = samlHoKrequired;
            o.schemas = schemas;
            o.serviceInstanceIdentifier = serviceInstanceIdentifier;
            o.shownOnLoginPage = shownOnLoginPage;
            o.signatureHashAlgorithm = signatureHashAlgorithm;
            o.signingCertificate = signingCertificate;
            o.succinctId = succinctId;
            o.tags = tags;
            o.tenancyOcid = tenancyOcid;
            o.tenantProviderId = tenantProviderId;
            o.type = type;
            o.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders = urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders;
            o.urnietfparamsscimschemasoracleidcsextensionx509identityProviders = urnietfparamsscimschemasoracleidcsextensionx509identityProviders;
            o.userMappingMethod = userMappingMethod;
            o.userMappingStoreAttribute = userMappingStoreAttribute;
            return o;
        }
    }
}
