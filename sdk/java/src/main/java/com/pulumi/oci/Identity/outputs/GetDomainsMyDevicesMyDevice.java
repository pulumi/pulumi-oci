// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceAdditionalAttribute;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceAuthenticationFactor;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceNonCompliance;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDevicePushNotificationTarget;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceTag;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceThirdPartyFactor;
import com.pulumi.oci.Identity.outputs.GetDomainsMyDevicesMyDeviceUser;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsMyDevicesMyDevice {
    /**
     * @return Device additional attributes
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceAdditionalAttribute> additionalAttributes;
    /**
     * @return Mobile Authenticator App Version
     * 
     */
    private String appVersion;
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    private List<String> attributeSets;
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    private String attributes;
    /**
     * @return Authentication Factors
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceAuthenticationFactor> authenticationFactors;
    /**
     * @return Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
     * 
     */
    private String authenticationMethod;
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    private String authorization;
    /**
     * @return Device base public Key
     * 
     */
    private String basePublicKey;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return Country code of user&#39;s Phone Number
     * 
     */
    private String countryCode;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Device hardware name/model
     * 
     */
    private String deviceType;
    /**
     * @return Unique id sent from device
     * 
     */
    private String deviceUuid;
    /**
     * @return Device friendly display name
     * 
     */
    private String displayName;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Attribute added for replication log, it is not used by IDCS, just added as place holder
     * 
     */
    private Integer expiresOn;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return Flag that indicates whether the device is enrolled for account recovery
     * 
     */
    private Boolean isAccRecEnabled;
    /**
     * @return Device Compliance Status
     * 
     */
    private Boolean isCompliant;
    /**
     * @return Last Sync time for device
     * 
     */
    private String lastSyncTime;
    /**
     * @return The most recent timestamp when the device was successfully validated using one time passcode
     * 
     */
    private String lastValidatedTime;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceMeta> metas;
    private String myDeviceId;
    /**
     * @return Device Non Compliances
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceNonCompliance> nonCompliances;
    /**
     * @return The OCID of the user
     * 
     */
    private String ocid;
    /**
     * @return Mobile Authenticator App Package Id
     * 
     */
    private String packageId;
    /**
     * @return User&#39;s Phone Number
     * 
     */
    private String phoneNumber;
    /**
     * @return Device Platform
     * 
     */
    private String platform;
    /**
     * @return Push Notification target. Reference to Device notification related resource
     * 
     */
    private List<GetDomainsMyDevicesMyDevicePushNotificationTarget> pushNotificationTargets;
    /**
     * @return Additional comments/reasons for the change in device status
     * 
     */
    private String reason;
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    private String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
     * 
     */
    private String seed;
    /**
     * @return Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
     * 
     */
    private String seedDekId;
    /**
     * @return Device Status
     * 
     */
    private String status;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return User&#39;s third-party authentication factor details
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceThirdPartyFactor> thirdPartyFactors;
    /**
     * @return Device member
     * 
     */
    private List<GetDomainsMyDevicesMyDeviceUser> users;

    private GetDomainsMyDevicesMyDevice() {}
    /**
     * @return Device additional attributes
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceAdditionalAttribute> additionalAttributes() {
        return this.additionalAttributes;
    }
    /**
     * @return Mobile Authenticator App Version
     * 
     */
    public String appVersion() {
        return this.appVersion;
    }
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public List<String> attributeSets() {
        return this.attributeSets;
    }
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public String attributes() {
        return this.attributes;
    }
    /**
     * @return Authentication Factors
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceAuthenticationFactor> authenticationFactors() {
        return this.authenticationFactors;
    }
    /**
     * @return Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
     * 
     */
    public String authenticationMethod() {
        return this.authenticationMethod;
    }
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public String authorization() {
        return this.authorization;
    }
    /**
     * @return Device base public Key
     * 
     */
    public String basePublicKey() {
        return this.basePublicKey;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return Country code of user&#39;s Phone Number
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Device hardware name/model
     * 
     */
    public String deviceType() {
        return this.deviceType;
    }
    /**
     * @return Unique id sent from device
     * 
     */
    public String deviceUuid() {
        return this.deviceUuid;
    }
    /**
     * @return Device friendly display name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Attribute added for replication log, it is not used by IDCS, just added as place holder
     * 
     */
    public Integer expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return Flag that indicates whether the device is enrolled for account recovery
     * 
     */
    public Boolean isAccRecEnabled() {
        return this.isAccRecEnabled;
    }
    /**
     * @return Device Compliance Status
     * 
     */
    public Boolean isCompliant() {
        return this.isCompliant;
    }
    /**
     * @return Last Sync time for device
     * 
     */
    public String lastSyncTime() {
        return this.lastSyncTime;
    }
    /**
     * @return The most recent timestamp when the device was successfully validated using one time passcode
     * 
     */
    public String lastValidatedTime() {
        return this.lastValidatedTime;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceMeta> metas() {
        return this.metas;
    }
    public String myDeviceId() {
        return this.myDeviceId;
    }
    /**
     * @return Device Non Compliances
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceNonCompliance> nonCompliances() {
        return this.nonCompliances;
    }
    /**
     * @return The OCID of the user
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Mobile Authenticator App Package Id
     * 
     */
    public String packageId() {
        return this.packageId;
    }
    /**
     * @return User&#39;s Phone Number
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }
    /**
     * @return Device Platform
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return Push Notification target. Reference to Device notification related resource
     * 
     */
    public List<GetDomainsMyDevicesMyDevicePushNotificationTarget> pushNotificationTargets() {
        return this.pushNotificationTargets;
    }
    /**
     * @return Additional comments/reasons for the change in device status
     * 
     */
    public String reason() {
        return this.reason;
    }
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public String resourceTypeSchemaVersion() {
        return this.resourceTypeSchemaVersion;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
     * 
     */
    public String seed() {
        return this.seed;
    }
    /**
     * @return Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
     * 
     */
    public String seedDekId() {
        return this.seedDekId;
    }
    /**
     * @return Device Status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return User&#39;s third-party authentication factor details
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceThirdPartyFactor> thirdPartyFactors() {
        return this.thirdPartyFactors;
    }
    /**
     * @return Device member
     * 
     */
    public List<GetDomainsMyDevicesMyDeviceUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsMyDevicesMyDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDomainsMyDevicesMyDeviceAdditionalAttribute> additionalAttributes;
        private String appVersion;
        private List<String> attributeSets;
        private String attributes;
        private List<GetDomainsMyDevicesMyDeviceAuthenticationFactor> authenticationFactors;
        private String authenticationMethod;
        private String authorization;
        private String basePublicKey;
        private String compartmentOcid;
        private String countryCode;
        private Boolean deleteInProgress;
        private String deviceType;
        private String deviceUuid;
        private String displayName;
        private String domainOcid;
        private Integer expiresOn;
        private String externalId;
        private String id;
        private List<GetDomainsMyDevicesMyDeviceIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private Boolean isAccRecEnabled;
        private Boolean isCompliant;
        private String lastSyncTime;
        private String lastValidatedTime;
        private List<GetDomainsMyDevicesMyDeviceMeta> metas;
        private String myDeviceId;
        private List<GetDomainsMyDevicesMyDeviceNonCompliance> nonCompliances;
        private String ocid;
        private String packageId;
        private String phoneNumber;
        private String platform;
        private List<GetDomainsMyDevicesMyDevicePushNotificationTarget> pushNotificationTargets;
        private String reason;
        private String resourceTypeSchemaVersion;
        private List<String> schemas;
        private String seed;
        private String seedDekId;
        private String status;
        private List<GetDomainsMyDevicesMyDeviceTag> tags;
        private String tenancyOcid;
        private List<GetDomainsMyDevicesMyDeviceThirdPartyFactor> thirdPartyFactors;
        private List<GetDomainsMyDevicesMyDeviceUser> users;
        public Builder() {}
        public Builder(GetDomainsMyDevicesMyDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalAttributes = defaults.additionalAttributes;
    	      this.appVersion = defaults.appVersion;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authenticationFactors = defaults.authenticationFactors;
    	      this.authenticationMethod = defaults.authenticationMethod;
    	      this.authorization = defaults.authorization;
    	      this.basePublicKey = defaults.basePublicKey;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.countryCode = defaults.countryCode;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.deviceType = defaults.deviceType;
    	      this.deviceUuid = defaults.deviceUuid;
    	      this.displayName = defaults.displayName;
    	      this.domainOcid = defaults.domainOcid;
    	      this.expiresOn = defaults.expiresOn;
    	      this.externalId = defaults.externalId;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.isAccRecEnabled = defaults.isAccRecEnabled;
    	      this.isCompliant = defaults.isCompliant;
    	      this.lastSyncTime = defaults.lastSyncTime;
    	      this.lastValidatedTime = defaults.lastValidatedTime;
    	      this.metas = defaults.metas;
    	      this.myDeviceId = defaults.myDeviceId;
    	      this.nonCompliances = defaults.nonCompliances;
    	      this.ocid = defaults.ocid;
    	      this.packageId = defaults.packageId;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.platform = defaults.platform;
    	      this.pushNotificationTargets = defaults.pushNotificationTargets;
    	      this.reason = defaults.reason;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.seed = defaults.seed;
    	      this.seedDekId = defaults.seedDekId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.thirdPartyFactors = defaults.thirdPartyFactors;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder additionalAttributes(List<GetDomainsMyDevicesMyDeviceAdditionalAttribute> additionalAttributes) {
            if (additionalAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "additionalAttributes");
            }
            this.additionalAttributes = additionalAttributes;
            return this;
        }
        public Builder additionalAttributes(GetDomainsMyDevicesMyDeviceAdditionalAttribute... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }
        @CustomType.Setter
        public Builder appVersion(String appVersion) {
            if (appVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "appVersion");
            }
            this.appVersion = appVersion;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(List<String> attributeSets) {
            if (attributeSets == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "attributeSets");
            }
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(String attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationFactors(List<GetDomainsMyDevicesMyDeviceAuthenticationFactor> authenticationFactors) {
            if (authenticationFactors == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "authenticationFactors");
            }
            this.authenticationFactors = authenticationFactors;
            return this;
        }
        public Builder authenticationFactors(GetDomainsMyDevicesMyDeviceAuthenticationFactor... authenticationFactors) {
            return authenticationFactors(List.of(authenticationFactors));
        }
        @CustomType.Setter
        public Builder authenticationMethod(String authenticationMethod) {
            if (authenticationMethod == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "authenticationMethod");
            }
            this.authenticationMethod = authenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(String authorization) {
            if (authorization == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "authorization");
            }
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder basePublicKey(String basePublicKey) {
            if (basePublicKey == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "basePublicKey");
            }
            this.basePublicKey = basePublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(String countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder deviceType(String deviceType) {
            if (deviceType == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "deviceType");
            }
            this.deviceType = deviceType;
            return this;
        }
        @CustomType.Setter
        public Builder deviceUuid(String deviceUuid) {
            if (deviceUuid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "deviceUuid");
            }
            this.deviceUuid = deviceUuid;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(Integer expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsMyDevicesMyDeviceIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsMyDevicesMyDeviceIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsMyDevicesMyDeviceIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder isAccRecEnabled(Boolean isAccRecEnabled) {
            if (isAccRecEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "isAccRecEnabled");
            }
            this.isAccRecEnabled = isAccRecEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isCompliant(Boolean isCompliant) {
            if (isCompliant == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "isCompliant");
            }
            this.isCompliant = isCompliant;
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncTime(String lastSyncTime) {
            if (lastSyncTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "lastSyncTime");
            }
            this.lastSyncTime = lastSyncTime;
            return this;
        }
        @CustomType.Setter
        public Builder lastValidatedTime(String lastValidatedTime) {
            if (lastValidatedTime == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "lastValidatedTime");
            }
            this.lastValidatedTime = lastValidatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsMyDevicesMyDeviceMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsMyDevicesMyDeviceMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder myDeviceId(String myDeviceId) {
            if (myDeviceId == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "myDeviceId");
            }
            this.myDeviceId = myDeviceId;
            return this;
        }
        @CustomType.Setter
        public Builder nonCompliances(List<GetDomainsMyDevicesMyDeviceNonCompliance> nonCompliances) {
            if (nonCompliances == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "nonCompliances");
            }
            this.nonCompliances = nonCompliances;
            return this;
        }
        public Builder nonCompliances(GetDomainsMyDevicesMyDeviceNonCompliance... nonCompliances) {
            return nonCompliances(List.of(nonCompliances));
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder packageId(String packageId) {
            if (packageId == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "packageId");
            }
            this.packageId = packageId;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder pushNotificationTargets(List<GetDomainsMyDevicesMyDevicePushNotificationTarget> pushNotificationTargets) {
            if (pushNotificationTargets == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "pushNotificationTargets");
            }
            this.pushNotificationTargets = pushNotificationTargets;
            return this;
        }
        public Builder pushNotificationTargets(GetDomainsMyDevicesMyDevicePushNotificationTarget... pushNotificationTargets) {
            return pushNotificationTargets(List.of(pushNotificationTargets));
        }
        @CustomType.Setter
        public Builder reason(String reason) {
            if (reason == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "reason");
            }
            this.reason = reason;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            if (resourceTypeSchemaVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "resourceTypeSchemaVersion");
            }
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder seed(String seed) {
            if (seed == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "seed");
            }
            this.seed = seed;
            return this;
        }
        @CustomType.Setter
        public Builder seedDekId(String seedDekId) {
            if (seedDekId == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "seedDekId");
            }
            this.seedDekId = seedDekId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsMyDevicesMyDeviceTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsMyDevicesMyDeviceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder thirdPartyFactors(List<GetDomainsMyDevicesMyDeviceThirdPartyFactor> thirdPartyFactors) {
            if (thirdPartyFactors == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "thirdPartyFactors");
            }
            this.thirdPartyFactors = thirdPartyFactors;
            return this;
        }
        public Builder thirdPartyFactors(GetDomainsMyDevicesMyDeviceThirdPartyFactor... thirdPartyFactors) {
            return thirdPartyFactors(List.of(thirdPartyFactors));
        }
        @CustomType.Setter
        public Builder users(List<GetDomainsMyDevicesMyDeviceUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyDevicesMyDevice", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetDomainsMyDevicesMyDeviceUser... users) {
            return users(List.of(users));
        }
        public GetDomainsMyDevicesMyDevice build() {
            final var _resultValue = new GetDomainsMyDevicesMyDevice();
            _resultValue.additionalAttributes = additionalAttributes;
            _resultValue.appVersion = appVersion;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authenticationFactors = authenticationFactors;
            _resultValue.authenticationMethod = authenticationMethod;
            _resultValue.authorization = authorization;
            _resultValue.basePublicKey = basePublicKey;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.countryCode = countryCode;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.deviceType = deviceType;
            _resultValue.deviceUuid = deviceUuid;
            _resultValue.displayName = displayName;
            _resultValue.domainOcid = domainOcid;
            _resultValue.expiresOn = expiresOn;
            _resultValue.externalId = externalId;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.isAccRecEnabled = isAccRecEnabled;
            _resultValue.isCompliant = isCompliant;
            _resultValue.lastSyncTime = lastSyncTime;
            _resultValue.lastValidatedTime = lastValidatedTime;
            _resultValue.metas = metas;
            _resultValue.myDeviceId = myDeviceId;
            _resultValue.nonCompliances = nonCompliances;
            _resultValue.ocid = ocid;
            _resultValue.packageId = packageId;
            _resultValue.phoneNumber = phoneNumber;
            _resultValue.platform = platform;
            _resultValue.pushNotificationTargets = pushNotificationTargets;
            _resultValue.reason = reason;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.seed = seed;
            _resultValue.seedDekId = seedDekId;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.thirdPartyFactors = thirdPartyFactors;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
