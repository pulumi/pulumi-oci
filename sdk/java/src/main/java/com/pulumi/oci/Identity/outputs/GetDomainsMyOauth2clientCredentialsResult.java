// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsMyOauth2clientCredentialsResult {
    private @Nullable String authorization;
    private @Nullable String compartmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String idcsEndpoint;
    private @Nullable Integer itemsPerPage;
    private @Nullable Integer myOauth2clientCredentialCount;
    private @Nullable String myOauth2clientCredentialFilter;
    /**
     * @return The list of my_oauth2client_credentials.
     * 
     */
    private @Nullable List<GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential> myOauth2clientCredentials;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private @Nullable List<String> schemas;
    private @Nullable String sortBy;
    private @Nullable String sortOrder;
    private @Nullable Integer startIndex;
    private @Nullable Integer totalResults;

    private GetDomainsMyOauth2clientCredentialsResult() {}
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    public Optional<Integer> itemsPerPage() {
        return Optional.ofNullable(this.itemsPerPage);
    }
    public Optional<Integer> myOauth2clientCredentialCount() {
        return Optional.ofNullable(this.myOauth2clientCredentialCount);
    }
    public Optional<String> myOauth2clientCredentialFilter() {
        return Optional.ofNullable(this.myOauth2clientCredentialFilter);
    }
    /**
     * @return The list of my_oauth2client_credentials.
     * 
     */
    public List<GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential> myOauth2clientCredentials() {
        return this.myOauth2clientCredentials == null ? List.of() : this.myOauth2clientCredentials;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }
    public Optional<Integer> startIndex() {
        return Optional.ofNullable(this.startIndex);
    }
    public Optional<Integer> totalResults() {
        return Optional.ofNullable(this.totalResults);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsMyOauth2clientCredentialsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorization;
        private @Nullable String compartmentId;
        private @Nullable String id;
        private String idcsEndpoint;
        private @Nullable Integer itemsPerPage;
        private @Nullable Integer myOauth2clientCredentialCount;
        private @Nullable String myOauth2clientCredentialFilter;
        private @Nullable List<GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential> myOauth2clientCredentials;
        private @Nullable String resourceTypeSchemaVersion;
        private @Nullable List<String> schemas;
        private @Nullable String sortBy;
        private @Nullable String sortOrder;
        private @Nullable Integer startIndex;
        private @Nullable Integer totalResults;
        public Builder() {}
        public Builder(GetDomainsMyOauth2clientCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorization = defaults.authorization;
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.itemsPerPage = defaults.itemsPerPage;
    	      this.myOauth2clientCredentialCount = defaults.myOauth2clientCredentialCount;
    	      this.myOauth2clientCredentialFilter = defaults.myOauth2clientCredentialFilter;
    	      this.myOauth2clientCredentials = defaults.myOauth2clientCredentials;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.sortBy = defaults.sortBy;
    	      this.sortOrder = defaults.sortOrder;
    	      this.startIndex = defaults.startIndex;
    	      this.totalResults = defaults.totalResults;
        }

        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder itemsPerPage(@Nullable Integer itemsPerPage) {
            this.itemsPerPage = itemsPerPage;
            return this;
        }
        @CustomType.Setter
        public Builder myOauth2clientCredentialCount(@Nullable Integer myOauth2clientCredentialCount) {
            this.myOauth2clientCredentialCount = myOauth2clientCredentialCount;
            return this;
        }
        @CustomType.Setter
        public Builder myOauth2clientCredentialFilter(@Nullable String myOauth2clientCredentialFilter) {
            this.myOauth2clientCredentialFilter = myOauth2clientCredentialFilter;
            return this;
        }
        @CustomType.Setter
        public Builder myOauth2clientCredentials(@Nullable List<GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential> myOauth2clientCredentials) {
            this.myOauth2clientCredentials = myOauth2clientCredentials;
            return this;
        }
        public Builder myOauth2clientCredentials(GetDomainsMyOauth2clientCredentialsMyOauth2clientCredential... myOauth2clientCredentials) {
            return myOauth2clientCredentials(List.of(myOauth2clientCredentials));
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder sortBy(@Nullable String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        @CustomType.Setter
        public Builder sortOrder(@Nullable String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        @CustomType.Setter
        public Builder startIndex(@Nullable Integer startIndex) {
            this.startIndex = startIndex;
            return this;
        }
        @CustomType.Setter
        public Builder totalResults(@Nullable Integer totalResults) {
            this.totalResults = totalResults;
            return this;
        }
        public GetDomainsMyOauth2clientCredentialsResult build() {
            final var o = new GetDomainsMyOauth2clientCredentialsResult();
            o.authorization = authorization;
            o.compartmentId = compartmentId;
            o.id = id;
            o.idcsEndpoint = idcsEndpoint;
            o.itemsPerPage = itemsPerPage;
            o.myOauth2clientCredentialCount = myOauth2clientCredentialCount;
            o.myOauth2clientCredentialFilter = myOauth2clientCredentialFilter;
            o.myOauth2clientCredentials = myOauth2clientCredentials;
            o.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            o.schemas = schemas;
            o.sortBy = sortBy;
            o.sortOrder = sortOrder;
            o.startIndex = startIndex;
            o.totalResults = totalResults;
            return o;
        }
    }
}
