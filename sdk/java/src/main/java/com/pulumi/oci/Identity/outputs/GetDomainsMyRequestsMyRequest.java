// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestApprovalDetail;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestRequesting;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestRequestor;
import com.pulumi.oci.Identity.outputs.GetDomainsMyRequestsMyRequestTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsMyRequestsMyRequest {
    /**
     * @return Requestor can set action to CANCEL to cancel the request or to ESCALATE to escalate the request while the request status is IN_PROGRESS. Requestor can&#39;t escalate the request if canceling or escalation is in progress.
     * 
     */
    private String action;
    /**
     * @return Approvals created for this request.
     * 
     */
    private List<GetDomainsMyRequestsMyRequestApprovalDetail> approvalDetails;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Time by when Request expires
     * 
     */
    private String expires;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsMyRequestsMyRequestIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsMyRequestsMyRequestIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return justification
     * 
     */
    private String justification;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsMyRequestsMyRequestMeta> metas;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return Requestable resource reference.
     * 
     */
    private List<GetDomainsMyRequestsMyRequestRequesting> requestings;
    /**
     * @return Requesting User
     * 
     */
    private List<GetDomainsMyRequestsMyRequestRequestor> requestors;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return status
     * 
     */
    private String status;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsMyRequestsMyRequestTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;

    private GetDomainsMyRequestsMyRequest() {}
    /**
     * @return Requestor can set action to CANCEL to cancel the request or to ESCALATE to escalate the request while the request status is IN_PROGRESS. Requestor can&#39;t escalate the request if canceling or escalation is in progress.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Approvals created for this request.
     * 
     */
    public List<GetDomainsMyRequestsMyRequestApprovalDetail> approvalDetails() {
        return this.approvalDetails;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Time by when Request expires
     * 
     */
    public String expires() {
        return this.expires;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsMyRequestsMyRequestIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsMyRequestsMyRequestIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return justification
     * 
     */
    public String justification() {
        return this.justification;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsMyRequestsMyRequestMeta> metas() {
        return this.metas;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Requestable resource reference.
     * 
     */
    public List<GetDomainsMyRequestsMyRequestRequesting> requestings() {
        return this.requestings;
    }
    /**
     * @return Requesting User
     * 
     */
    public List<GetDomainsMyRequestsMyRequestRequestor> requestors() {
        return this.requestors;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsMyRequestsMyRequestTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsMyRequestsMyRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<GetDomainsMyRequestsMyRequestApprovalDetail> approvalDetails;
        private String compartmentOcid;
        private Boolean deleteInProgress;
        private String domainOcid;
        private String expires;
        private String id;
        private List<GetDomainsMyRequestsMyRequestIdcsCreatedBy> idcsCreatedBies;
        private List<GetDomainsMyRequestsMyRequestIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private String justification;
        private List<GetDomainsMyRequestsMyRequestMeta> metas;
        private String ocid;
        private List<GetDomainsMyRequestsMyRequestRequesting> requestings;
        private List<GetDomainsMyRequestsMyRequestRequestor> requestors;
        private List<String> schemas;
        private String status;
        private List<GetDomainsMyRequestsMyRequestTag> tags;
        private String tenancyOcid;
        public Builder() {}
        public Builder(GetDomainsMyRequestsMyRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.approvalDetails = defaults.approvalDetails;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.domainOcid = defaults.domainOcid;
    	      this.expires = defaults.expires;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.justification = defaults.justification;
    	      this.metas = defaults.metas;
    	      this.ocid = defaults.ocid;
    	      this.requestings = defaults.requestings;
    	      this.requestors = defaults.requestors;
    	      this.schemas = defaults.schemas;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder approvalDetails(List<GetDomainsMyRequestsMyRequestApprovalDetail> approvalDetails) {
            if (approvalDetails == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "approvalDetails");
            }
            this.approvalDetails = approvalDetails;
            return this;
        }
        public Builder approvalDetails(GetDomainsMyRequestsMyRequestApprovalDetail... approvalDetails) {
            return approvalDetails(List.of(approvalDetails));
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder expires(String expires) {
            if (expires == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "expires");
            }
            this.expires = expires;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsMyRequestsMyRequestIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsMyRequestsMyRequestIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsMyRequestsMyRequestIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsMyRequestsMyRequestIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder justification(String justification) {
            if (justification == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "justification");
            }
            this.justification = justification;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsMyRequestsMyRequestMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsMyRequestsMyRequestMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder requestings(List<GetDomainsMyRequestsMyRequestRequesting> requestings) {
            if (requestings == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "requestings");
            }
            this.requestings = requestings;
            return this;
        }
        public Builder requestings(GetDomainsMyRequestsMyRequestRequesting... requestings) {
            return requestings(List.of(requestings));
        }
        @CustomType.Setter
        public Builder requestors(List<GetDomainsMyRequestsMyRequestRequestor> requestors) {
            if (requestors == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "requestors");
            }
            this.requestors = requestors;
            return this;
        }
        public Builder requestors(GetDomainsMyRequestsMyRequestRequestor... requestors) {
            return requestors(List.of(requestors));
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsMyRequestsMyRequestTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsMyRequestsMyRequestTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsMyRequestsMyRequest", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        public GetDomainsMyRequestsMyRequest build() {
            final var _resultValue = new GetDomainsMyRequestsMyRequest();
            _resultValue.action = action;
            _resultValue.approvalDetails = approvalDetails;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.domainOcid = domainOcid;
            _resultValue.expires = expires;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.justification = justification;
            _resultValue.metas = metas;
            _resultValue.ocid = ocid;
            _resultValue.requestings = requestings;
            _resultValue.requestors = requestors;
            _resultValue.schemas = schemas;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            return _resultValue;
        }
    }
}
