// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingEventSetting;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingFromEmailAddress;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsNotificationSettingTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsNotificationSettingResult {
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Event settings
     * 
     */
    private List<GetDomainsNotificationSettingEventSetting> eventSettings;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return From email address to be used in the notification emails
     * 
     */
    private List<GetDomainsNotificationSettingFromEmailAddress> fromEmailAddresses;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsNotificationSettingIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsNotificationSettingIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsNotificationSettingMeta> metas;
    /**
     * @return Tenant level settings for the notification service
     * 
     */
    private Boolean notificationEnabled;
    private String notificationSettingId;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return If true and admin changed user&#39;s primary email, send user&#39;s profile changed email to old and new primary email address.
     * 
     */
    private Boolean sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail;
    /**
     * @return Indicates whether to allow notifications on a secondary email.
     * 
     */
    private Boolean sendNotificationsToSecondaryEmail;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsNotificationSettingTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return Specify if the notification service is in test mode
     * 
     */
    private Boolean testModeEnabled;
    /**
     * @return List of the test recipient email addresses
     * 
     */
    private List<String> testRecipients;

    private GetDomainsNotificationSettingResult() {}
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Event settings
     * 
     */
    public List<GetDomainsNotificationSettingEventSetting> eventSettings() {
        return this.eventSettings;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return From email address to be used in the notification emails
     * 
     */
    public List<GetDomainsNotificationSettingFromEmailAddress> fromEmailAddresses() {
        return this.fromEmailAddresses;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsNotificationSettingIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsNotificationSettingIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsNotificationSettingMeta> metas() {
        return this.metas;
    }
    /**
     * @return Tenant level settings for the notification service
     * 
     */
    public Boolean notificationEnabled() {
        return this.notificationEnabled;
    }
    public String notificationSettingId() {
        return this.notificationSettingId;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return If true and admin changed user&#39;s primary email, send user&#39;s profile changed email to old and new primary email address.
     * 
     */
    public Boolean sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail() {
        return this.sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail;
    }
    /**
     * @return Indicates whether to allow notifications on a secondary email.
     * 
     */
    public Boolean sendNotificationsToSecondaryEmail() {
        return this.sendNotificationsToSecondaryEmail;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsNotificationSettingTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return Specify if the notification service is in test mode
     * 
     */
    public Boolean testModeEnabled() {
        return this.testModeEnabled;
    }
    /**
     * @return List of the test recipient email addresses
     * 
     */
    public List<String> testRecipients() {
        return this.testRecipients;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsNotificationSettingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private String compartmentOcid;
        private Boolean deleteInProgress;
        private String domainOcid;
        private List<GetDomainsNotificationSettingEventSetting> eventSettings;
        private String externalId;
        private List<GetDomainsNotificationSettingFromEmailAddress> fromEmailAddresses;
        private String id;
        private List<GetDomainsNotificationSettingIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsNotificationSettingIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private List<GetDomainsNotificationSettingMeta> metas;
        private Boolean notificationEnabled;
        private String notificationSettingId;
        private String ocid;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private Boolean sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail;
        private Boolean sendNotificationsToSecondaryEmail;
        private List<GetDomainsNotificationSettingTag> tags;
        private String tenancyOcid;
        private Boolean testModeEnabled;
        private List<String> testRecipients;
        public Builder() {}
        public Builder(GetDomainsNotificationSettingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.domainOcid = defaults.domainOcid;
    	      this.eventSettings = defaults.eventSettings;
    	      this.externalId = defaults.externalId;
    	      this.fromEmailAddresses = defaults.fromEmailAddresses;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.metas = defaults.metas;
    	      this.notificationEnabled = defaults.notificationEnabled;
    	      this.notificationSettingId = defaults.notificationSettingId;
    	      this.ocid = defaults.ocid;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail = defaults.sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail;
    	      this.sendNotificationsToSecondaryEmail = defaults.sendNotificationsToSecondaryEmail;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.testModeEnabled = defaults.testModeEnabled;
    	      this.testRecipients = defaults.testRecipients;
        }

        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            this.compartmentOcid = Objects.requireNonNull(compartmentOcid);
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            this.deleteInProgress = Objects.requireNonNull(deleteInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            this.domainOcid = Objects.requireNonNull(domainOcid);
            return this;
        }
        @CustomType.Setter
        public Builder eventSettings(List<GetDomainsNotificationSettingEventSetting> eventSettings) {
            this.eventSettings = Objects.requireNonNull(eventSettings);
            return this;
        }
        public Builder eventSettings(GetDomainsNotificationSettingEventSetting... eventSettings) {
            return eventSettings(List.of(eventSettings));
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder fromEmailAddresses(List<GetDomainsNotificationSettingFromEmailAddress> fromEmailAddresses) {
            this.fromEmailAddresses = Objects.requireNonNull(fromEmailAddresses);
            return this;
        }
        public Builder fromEmailAddresses(GetDomainsNotificationSettingFromEmailAddress... fromEmailAddresses) {
            return fromEmailAddresses(List.of(fromEmailAddresses));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsNotificationSettingIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = Objects.requireNonNull(idcsCreatedBies);
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsNotificationSettingIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsNotificationSettingIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = Objects.requireNonNull(idcsLastModifiedBies);
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsNotificationSettingIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = Objects.requireNonNull(idcsLastUpgradedInRelease);
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = Objects.requireNonNull(idcsPreventedOperations);
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsNotificationSettingMeta> metas) {
            this.metas = Objects.requireNonNull(metas);
            return this;
        }
        public Builder metas(GetDomainsNotificationSettingMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder notificationEnabled(Boolean notificationEnabled) {
            this.notificationEnabled = Objects.requireNonNull(notificationEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder notificationSettingId(String notificationSettingId) {
            this.notificationSettingId = Objects.requireNonNull(notificationSettingId);
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            this.ocid = Objects.requireNonNull(ocid);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail(Boolean sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail) {
            this.sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail = Objects.requireNonNull(sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail);
            return this;
        }
        @CustomType.Setter
        public Builder sendNotificationsToSecondaryEmail(Boolean sendNotificationsToSecondaryEmail) {
            this.sendNotificationsToSecondaryEmail = Objects.requireNonNull(sendNotificationsToSecondaryEmail);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsNotificationSettingTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDomainsNotificationSettingTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            this.tenancyOcid = Objects.requireNonNull(tenancyOcid);
            return this;
        }
        @CustomType.Setter
        public Builder testModeEnabled(Boolean testModeEnabled) {
            this.testModeEnabled = Objects.requireNonNull(testModeEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder testRecipients(List<String> testRecipients) {
            this.testRecipients = Objects.requireNonNull(testRecipients);
            return this;
        }
        public Builder testRecipients(String... testRecipients) {
            return testRecipients(List.of(testRecipients));
        }
        public GetDomainsNotificationSettingResult build() {
            final var _resultValue = new GetDomainsNotificationSettingResult();
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.authorization = authorization;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.domainOcid = domainOcid;
            _resultValue.eventSettings = eventSettings;
            _resultValue.externalId = externalId;
            _resultValue.fromEmailAddresses = fromEmailAddresses;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.metas = metas;
            _resultValue.notificationEnabled = notificationEnabled;
            _resultValue.notificationSettingId = notificationSettingId;
            _resultValue.ocid = ocid;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail = sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail;
            _resultValue.sendNotificationsToSecondaryEmail = sendNotificationsToSecondaryEmail;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.testModeEnabled = testModeEnabled;
            _resultValue.testRecipients = testRecipients;
            return _resultValue;
        }
    }
}
