// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsOauthClientCertificateIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsOauthClientCertificateIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsOauthClientCertificateMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsOauthClientCertificateTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsOauthClientCertificateResult {
    private @Nullable String authorization;
    /**
     * @return Certificate end date
     * 
     */
    private String certEndDate;
    /**
     * @return Certificate start date
     * 
     */
    private String certStartDate;
    /**
     * @return Certificate alias
     * 
     */
    private String certificateAlias;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsOauthClientCertificateIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsOauthClientCertificateIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return Key store ID
     * 
     */
    private String keyStoreId;
    /**
     * @return Key store name
     * 
     */
    private String keyStoreName;
    /**
     * @return Key store password
     * 
     */
    private String keyStorePassword;
    /**
     * @return Map
     * 
     */
    private String map;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsOauthClientCertificateMeta> metas;
    private String oAuthClientCertificateId;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return SHA-1 Thumbprint
     * 
     */
    private String sha1thumbprint;
    /**
     * @return SHA-256 Thumbprint
     * 
     */
    private String sha256thumbprint;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsOauthClientCertificateTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return Base 64Key data attribute
     * 
     */
    private String x509base64certificate;

    private GetDomainsOauthClientCertificateResult() {}
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Certificate end date
     * 
     */
    public String certEndDate() {
        return this.certEndDate;
    }
    /**
     * @return Certificate start date
     * 
     */
    public String certStartDate() {
        return this.certStartDate;
    }
    /**
     * @return Certificate alias
     * 
     */
    public String certificateAlias() {
        return this.certificateAlias;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsOauthClientCertificateIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsOauthClientCertificateIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return Key store ID
     * 
     */
    public String keyStoreId() {
        return this.keyStoreId;
    }
    /**
     * @return Key store name
     * 
     */
    public String keyStoreName() {
        return this.keyStoreName;
    }
    /**
     * @return Key store password
     * 
     */
    public String keyStorePassword() {
        return this.keyStorePassword;
    }
    /**
     * @return Map
     * 
     */
    public String map() {
        return this.map;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsOauthClientCertificateMeta> metas() {
        return this.metas;
    }
    public String oAuthClientCertificateId() {
        return this.oAuthClientCertificateId;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return SHA-1 Thumbprint
     * 
     */
    public String sha1thumbprint() {
        return this.sha1thumbprint;
    }
    /**
     * @return SHA-256 Thumbprint
     * 
     */
    public String sha256thumbprint() {
        return this.sha256thumbprint;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsOauthClientCertificateTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return Base 64Key data attribute
     * 
     */
    public String x509base64certificate() {
        return this.x509base64certificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsOauthClientCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorization;
        private String certEndDate;
        private String certStartDate;
        private String certificateAlias;
        private String compartmentOcid;
        private Boolean deleteInProgress;
        private String domainOcid;
        private String externalId;
        private String id;
        private List<GetDomainsOauthClientCertificateIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsOauthClientCertificateIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private String keyStoreId;
        private String keyStoreName;
        private String keyStorePassword;
        private String map;
        private List<GetDomainsOauthClientCertificateMeta> metas;
        private String oAuthClientCertificateId;
        private String ocid;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private String sha1thumbprint;
        private String sha256thumbprint;
        private List<GetDomainsOauthClientCertificateTag> tags;
        private String tenancyOcid;
        private String x509base64certificate;
        public Builder() {}
        public Builder(GetDomainsOauthClientCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorization = defaults.authorization;
    	      this.certEndDate = defaults.certEndDate;
    	      this.certStartDate = defaults.certStartDate;
    	      this.certificateAlias = defaults.certificateAlias;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.domainOcid = defaults.domainOcid;
    	      this.externalId = defaults.externalId;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.keyStoreId = defaults.keyStoreId;
    	      this.keyStoreName = defaults.keyStoreName;
    	      this.keyStorePassword = defaults.keyStorePassword;
    	      this.map = defaults.map;
    	      this.metas = defaults.metas;
    	      this.oAuthClientCertificateId = defaults.oAuthClientCertificateId;
    	      this.ocid = defaults.ocid;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.sha1thumbprint = defaults.sha1thumbprint;
    	      this.sha256thumbprint = defaults.sha256thumbprint;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.x509base64certificate = defaults.x509base64certificate;
        }

        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {

            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder certEndDate(String certEndDate) {
            if (certEndDate == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "certEndDate");
            }
            this.certEndDate = certEndDate;
            return this;
        }
        @CustomType.Setter
        public Builder certStartDate(String certStartDate) {
            if (certStartDate == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "certStartDate");
            }
            this.certStartDate = certStartDate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateAlias(String certificateAlias) {
            if (certificateAlias == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "certificateAlias");
            }
            this.certificateAlias = certificateAlias;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsOauthClientCertificateIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsOauthClientCertificateIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsOauthClientCertificateIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsOauthClientCertificateIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder keyStoreId(String keyStoreId) {
            if (keyStoreId == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "keyStoreId");
            }
            this.keyStoreId = keyStoreId;
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreName(String keyStoreName) {
            if (keyStoreName == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "keyStoreName");
            }
            this.keyStoreName = keyStoreName;
            return this;
        }
        @CustomType.Setter
        public Builder keyStorePassword(String keyStorePassword) {
            if (keyStorePassword == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "keyStorePassword");
            }
            this.keyStorePassword = keyStorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder map(String map) {
            if (map == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "map");
            }
            this.map = map;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsOauthClientCertificateMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsOauthClientCertificateMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder oAuthClientCertificateId(String oAuthClientCertificateId) {
            if (oAuthClientCertificateId == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "oAuthClientCertificateId");
            }
            this.oAuthClientCertificateId = oAuthClientCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {

            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder sha1thumbprint(String sha1thumbprint) {
            if (sha1thumbprint == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "sha1thumbprint");
            }
            this.sha1thumbprint = sha1thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder sha256thumbprint(String sha256thumbprint) {
            if (sha256thumbprint == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "sha256thumbprint");
            }
            this.sha256thumbprint = sha256thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsOauthClientCertificateTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsOauthClientCertificateTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder x509base64certificate(String x509base64certificate) {
            if (x509base64certificate == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthClientCertificateResult", "x509base64certificate");
            }
            this.x509base64certificate = x509base64certificate;
            return this;
        }
        public GetDomainsOauthClientCertificateResult build() {
            final var _resultValue = new GetDomainsOauthClientCertificateResult();
            _resultValue.authorization = authorization;
            _resultValue.certEndDate = certEndDate;
            _resultValue.certStartDate = certStartDate;
            _resultValue.certificateAlias = certificateAlias;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.domainOcid = domainOcid;
            _resultValue.externalId = externalId;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.keyStoreId = keyStoreId;
            _resultValue.keyStoreName = keyStoreName;
            _resultValue.keyStorePassword = keyStorePassword;
            _resultValue.map = map;
            _resultValue.metas = metas;
            _resultValue.oAuthClientCertificateId = oAuthClientCertificateId;
            _resultValue.ocid = ocid;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.sha1thumbprint = sha1thumbprint;
            _resultValue.sha256thumbprint = sha256thumbprint;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.x509base64certificate = x509base64certificate;
            return _resultValue;
        }
    }
}
