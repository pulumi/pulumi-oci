// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsOauthPartnerCertificatesOauthPartnerCertificate;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsOauthPartnerCertificatesResult {
    private @Nullable String authorization;
    private @Nullable String compartmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String idcsEndpoint;
    private Integer itemsPerPage;
    private @Nullable Integer oauthPartnerCertificateCount;
    private @Nullable String oauthPartnerCertificateFilter;
    /**
     * @return The list of oauth_partner_certificates.
     * 
     */
    private List<GetDomainsOauthPartnerCertificatesOauthPartnerCertificate> oauthPartnerCertificates;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    private @Nullable String sortBy;
    private @Nullable String sortOrder;
    private @Nullable Integer startIndex;
    private Integer totalResults;

    private GetDomainsOauthPartnerCertificatesResult() {}
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    public Integer itemsPerPage() {
        return this.itemsPerPage;
    }
    public Optional<Integer> oauthPartnerCertificateCount() {
        return Optional.ofNullable(this.oauthPartnerCertificateCount);
    }
    public Optional<String> oauthPartnerCertificateFilter() {
        return Optional.ofNullable(this.oauthPartnerCertificateFilter);
    }
    /**
     * @return The list of oauth_partner_certificates.
     * 
     */
    public List<GetDomainsOauthPartnerCertificatesOauthPartnerCertificate> oauthPartnerCertificates() {
        return this.oauthPartnerCertificates;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }
    public Optional<Integer> startIndex() {
        return Optional.ofNullable(this.startIndex);
    }
    public Integer totalResults() {
        return this.totalResults;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsOauthPartnerCertificatesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorization;
        private @Nullable String compartmentId;
        private String id;
        private String idcsEndpoint;
        private Integer itemsPerPage;
        private @Nullable Integer oauthPartnerCertificateCount;
        private @Nullable String oauthPartnerCertificateFilter;
        private List<GetDomainsOauthPartnerCertificatesOauthPartnerCertificate> oauthPartnerCertificates;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private @Nullable String sortBy;
        private @Nullable String sortOrder;
        private @Nullable Integer startIndex;
        private Integer totalResults;
        public Builder() {}
        public Builder(GetDomainsOauthPartnerCertificatesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorization = defaults.authorization;
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.itemsPerPage = defaults.itemsPerPage;
    	      this.oauthPartnerCertificateCount = defaults.oauthPartnerCertificateCount;
    	      this.oauthPartnerCertificateFilter = defaults.oauthPartnerCertificateFilter;
    	      this.oauthPartnerCertificates = defaults.oauthPartnerCertificates;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.sortBy = defaults.sortBy;
    	      this.sortOrder = defaults.sortOrder;
    	      this.startIndex = defaults.startIndex;
    	      this.totalResults = defaults.totalResults;
        }

        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {

            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder itemsPerPage(Integer itemsPerPage) {
            if (itemsPerPage == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "itemsPerPage");
            }
            this.itemsPerPage = itemsPerPage;
            return this;
        }
        @CustomType.Setter
        public Builder oauthPartnerCertificateCount(@Nullable Integer oauthPartnerCertificateCount) {

            this.oauthPartnerCertificateCount = oauthPartnerCertificateCount;
            return this;
        }
        @CustomType.Setter
        public Builder oauthPartnerCertificateFilter(@Nullable String oauthPartnerCertificateFilter) {

            this.oauthPartnerCertificateFilter = oauthPartnerCertificateFilter;
            return this;
        }
        @CustomType.Setter
        public Builder oauthPartnerCertificates(List<GetDomainsOauthPartnerCertificatesOauthPartnerCertificate> oauthPartnerCertificates) {
            if (oauthPartnerCertificates == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "oauthPartnerCertificates");
            }
            this.oauthPartnerCertificates = oauthPartnerCertificates;
            return this;
        }
        public Builder oauthPartnerCertificates(GetDomainsOauthPartnerCertificatesOauthPartnerCertificate... oauthPartnerCertificates) {
            return oauthPartnerCertificates(List.of(oauthPartnerCertificates));
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {

            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder sortBy(@Nullable String sortBy) {

            this.sortBy = sortBy;
            return this;
        }
        @CustomType.Setter
        public Builder sortOrder(@Nullable String sortOrder) {

            this.sortOrder = sortOrder;
            return this;
        }
        @CustomType.Setter
        public Builder startIndex(@Nullable Integer startIndex) {

            this.startIndex = startIndex;
            return this;
        }
        @CustomType.Setter
        public Builder totalResults(Integer totalResults) {
            if (totalResults == null) {
              throw new MissingRequiredPropertyException("GetDomainsOauthPartnerCertificatesResult", "totalResults");
            }
            this.totalResults = totalResults;
            return this;
        }
        public GetDomainsOauthPartnerCertificatesResult build() {
            final var _resultValue = new GetDomainsOauthPartnerCertificatesResult();
            _resultValue.authorization = authorization;
            _resultValue.compartmentId = compartmentId;
            _resultValue.id = id;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.itemsPerPage = itemsPerPage;
            _resultValue.oauthPartnerCertificateCount = oauthPartnerCertificateCount;
            _resultValue.oauthPartnerCertificateFilter = oauthPartnerCertificateFilter;
            _resultValue.oauthPartnerCertificates = oauthPartnerCertificates;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.sortBy = sortBy;
            _resultValue.sortOrder = sortOrder;
            _resultValue.startIndex = startIndex;
            _resultValue.totalResults = totalResults;
            return _resultValue;
        }
    }
}
