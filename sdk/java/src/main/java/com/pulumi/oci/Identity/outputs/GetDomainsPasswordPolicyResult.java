// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyConfiguredPasswordPolicyRule;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsPasswordPolicyResult {
    /**
     * @return A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     */
    private String allowedChars;
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     */
    private List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return A String that describes the password policy
     * 
     */
    private String description;
    /**
     * @return A delimiter used to separate characters in the dictionary file
     * 
     */
    private String dictionaryDelimiter;
    /**
     * @return A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     */
    private String dictionaryLocation;
    /**
     * @return Indicates whether the password can match a dictionary word
     * 
     */
    private Boolean dictionaryWordDisallowed;
    /**
     * @return A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     */
    private String disallowedChars;
    /**
     * @return A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     */
    private List<String> disallowedSubstrings;
    /**
     * @return List of User attributes whose values are not allowed in the password.
     * 
     */
    private List<String> disallowedUserAttributeValues;
    /**
     * @return The number of distinct characters between old password and new password
     * 
     */
    private Integer distinctCharacters;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     */
    private Boolean firstNameDisallowed;
    /**
     * @return Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     */
    private Boolean forcePasswordReset;
    /**
     * @return A list of groups that the password policy belongs to.
     * 
     */
    private List<GetDomainsPasswordPolicyGroup> groups;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     */
    private Boolean lastNameDisallowed;
    /**
     * @return The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     */
    private Integer lockoutDuration;
    /**
     * @return An integer that represents the maximum number of failed logins before an account is locked
     * 
     */
    private Integer maxIncorrectAttempts;
    /**
     * @return The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     */
    private Integer maxLength;
    /**
     * @return The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     */
    private Integer maxRepeatedChars;
    /**
     * @return The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     */
    private Integer maxSpecialChars;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsPasswordPolicyMeta> metas;
    /**
     * @return The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     */
    private Integer minAlphaNumerals;
    /**
     * @return The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     */
    private Integer minAlphas;
    /**
     * @return The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     */
    private Integer minLength;
    /**
     * @return The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     */
    private Integer minLowerCase;
    /**
     * @return The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     */
    private Integer minNumerals;
    /**
     * @return Minimum time after which the user can resubmit the reset password request
     * 
     */
    private Integer minPasswordAge;
    /**
     * @return The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     */
    private Integer minSpecialChars;
    /**
     * @return The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     */
    private Integer minUniqueChars;
    /**
     * @return The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     */
    private Integer minUpperCase;
    /**
     * @return A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     */
    private String name;
    /**
     * @return The number of passwords that will be kept in history that may not be used as a password
     * 
     */
    private Integer numPasswordsInHistory;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     */
    private Integer passwordExpireWarning;
    /**
     * @return The number of days after which the password expires automatically
     * 
     */
    private Integer passwordExpiresAfter;
    private String passwordPolicyId;
    /**
     * @return Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     */
    private String passwordStrength;
    /**
     * @return Password policy priority
     * 
     */
    private Integer priority;
    /**
     * @return A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     */
    private String requiredChars;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return Indicates that the password must begin with an alphabetic character
     * 
     */
    private Boolean startsWithAlphabet;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsPasswordPolicyTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     */
    private Boolean userNameDisallowed;

    private GetDomainsPasswordPolicyResult() {}
    /**
     * @return A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     */
    public String allowedChars() {
        return this.allowedChars;
    }
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     */
    public List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules() {
        return this.configuredPasswordPolicyRules;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return A String that describes the password policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A delimiter used to separate characters in the dictionary file
     * 
     */
    public String dictionaryDelimiter() {
        return this.dictionaryDelimiter;
    }
    /**
     * @return A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     */
    public String dictionaryLocation() {
        return this.dictionaryLocation;
    }
    /**
     * @return Indicates whether the password can match a dictionary word
     * 
     */
    public Boolean dictionaryWordDisallowed() {
        return this.dictionaryWordDisallowed;
    }
    /**
     * @return A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     */
    public String disallowedChars() {
        return this.disallowedChars;
    }
    /**
     * @return A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     */
    public List<String> disallowedSubstrings() {
        return this.disallowedSubstrings;
    }
    /**
     * @return List of User attributes whose values are not allowed in the password.
     * 
     */
    public List<String> disallowedUserAttributeValues() {
        return this.disallowedUserAttributeValues;
    }
    /**
     * @return The number of distinct characters between old password and new password
     * 
     */
    public Integer distinctCharacters() {
        return this.distinctCharacters;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     */
    public Boolean firstNameDisallowed() {
        return this.firstNameDisallowed;
    }
    /**
     * @return Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     */
    public Boolean forcePasswordReset() {
        return this.forcePasswordReset;
    }
    /**
     * @return A list of groups that the password policy belongs to.
     * 
     */
    public List<GetDomainsPasswordPolicyGroup> groups() {
        return this.groups;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     */
    public Boolean lastNameDisallowed() {
        return this.lastNameDisallowed;
    }
    /**
     * @return The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     */
    public Integer lockoutDuration() {
        return this.lockoutDuration;
    }
    /**
     * @return An integer that represents the maximum number of failed logins before an account is locked
     * 
     */
    public Integer maxIncorrectAttempts() {
        return this.maxIncorrectAttempts;
    }
    /**
     * @return The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     */
    public Integer maxLength() {
        return this.maxLength;
    }
    /**
     * @return The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     */
    public Integer maxRepeatedChars() {
        return this.maxRepeatedChars;
    }
    /**
     * @return The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     */
    public Integer maxSpecialChars() {
        return this.maxSpecialChars;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsPasswordPolicyMeta> metas() {
        return this.metas;
    }
    /**
     * @return The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     */
    public Integer minAlphaNumerals() {
        return this.minAlphaNumerals;
    }
    /**
     * @return The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     */
    public Integer minAlphas() {
        return this.minAlphas;
    }
    /**
     * @return The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     */
    public Integer minLength() {
        return this.minLength;
    }
    /**
     * @return The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     */
    public Integer minLowerCase() {
        return this.minLowerCase;
    }
    /**
     * @return The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     */
    public Integer minNumerals() {
        return this.minNumerals;
    }
    /**
     * @return Minimum time after which the user can resubmit the reset password request
     * 
     */
    public Integer minPasswordAge() {
        return this.minPasswordAge;
    }
    /**
     * @return The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     */
    public Integer minSpecialChars() {
        return this.minSpecialChars;
    }
    /**
     * @return The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     */
    public Integer minUniqueChars() {
        return this.minUniqueChars;
    }
    /**
     * @return The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     */
    public Integer minUpperCase() {
        return this.minUpperCase;
    }
    /**
     * @return A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of passwords that will be kept in history that may not be used as a password
     * 
     */
    public Integer numPasswordsInHistory() {
        return this.numPasswordsInHistory;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     */
    public Integer passwordExpireWarning() {
        return this.passwordExpireWarning;
    }
    /**
     * @return The number of days after which the password expires automatically
     * 
     */
    public Integer passwordExpiresAfter() {
        return this.passwordExpiresAfter;
    }
    public String passwordPolicyId() {
        return this.passwordPolicyId;
    }
    /**
     * @return Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     */
    public String passwordStrength() {
        return this.passwordStrength;
    }
    /**
     * @return Password policy priority
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     */
    public String requiredChars() {
        return this.requiredChars;
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return Indicates that the password must begin with an alphabetic character
     * 
     */
    public Boolean startsWithAlphabet() {
        return this.startsWithAlphabet;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsPasswordPolicyTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     */
    public Boolean userNameDisallowed() {
        return this.userNameDisallowed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsPasswordPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allowedChars;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private String compartmentOcid;
        private List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules;
        private Boolean deleteInProgress;
        private String description;
        private String dictionaryDelimiter;
        private String dictionaryLocation;
        private Boolean dictionaryWordDisallowed;
        private String disallowedChars;
        private List<String> disallowedSubstrings;
        private List<String> disallowedUserAttributeValues;
        private Integer distinctCharacters;
        private String domainOcid;
        private String externalId;
        private Boolean firstNameDisallowed;
        private Boolean forcePasswordReset;
        private List<GetDomainsPasswordPolicyGroup> groups;
        private String id;
        private List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private Boolean lastNameDisallowed;
        private Integer lockoutDuration;
        private Integer maxIncorrectAttempts;
        private Integer maxLength;
        private Integer maxRepeatedChars;
        private Integer maxSpecialChars;
        private List<GetDomainsPasswordPolicyMeta> metas;
        private Integer minAlphaNumerals;
        private Integer minAlphas;
        private Integer minLength;
        private Integer minLowerCase;
        private Integer minNumerals;
        private Integer minPasswordAge;
        private Integer minSpecialChars;
        private Integer minUniqueChars;
        private Integer minUpperCase;
        private String name;
        private Integer numPasswordsInHistory;
        private String ocid;
        private Integer passwordExpireWarning;
        private Integer passwordExpiresAfter;
        private String passwordPolicyId;
        private String passwordStrength;
        private Integer priority;
        private String requiredChars;
        private @Nullable String resourceTypeSchemaVersion;
        private List<String> schemas;
        private Boolean startsWithAlphabet;
        private List<GetDomainsPasswordPolicyTag> tags;
        private String tenancyOcid;
        private Boolean userNameDisallowed;
        public Builder() {}
        public Builder(GetDomainsPasswordPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedChars = defaults.allowedChars;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.configuredPasswordPolicyRules = defaults.configuredPasswordPolicyRules;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.dictionaryDelimiter = defaults.dictionaryDelimiter;
    	      this.dictionaryLocation = defaults.dictionaryLocation;
    	      this.dictionaryWordDisallowed = defaults.dictionaryWordDisallowed;
    	      this.disallowedChars = defaults.disallowedChars;
    	      this.disallowedSubstrings = defaults.disallowedSubstrings;
    	      this.disallowedUserAttributeValues = defaults.disallowedUserAttributeValues;
    	      this.distinctCharacters = defaults.distinctCharacters;
    	      this.domainOcid = defaults.domainOcid;
    	      this.externalId = defaults.externalId;
    	      this.firstNameDisallowed = defaults.firstNameDisallowed;
    	      this.forcePasswordReset = defaults.forcePasswordReset;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.lastNameDisallowed = defaults.lastNameDisallowed;
    	      this.lockoutDuration = defaults.lockoutDuration;
    	      this.maxIncorrectAttempts = defaults.maxIncorrectAttempts;
    	      this.maxLength = defaults.maxLength;
    	      this.maxRepeatedChars = defaults.maxRepeatedChars;
    	      this.maxSpecialChars = defaults.maxSpecialChars;
    	      this.metas = defaults.metas;
    	      this.minAlphaNumerals = defaults.minAlphaNumerals;
    	      this.minAlphas = defaults.minAlphas;
    	      this.minLength = defaults.minLength;
    	      this.minLowerCase = defaults.minLowerCase;
    	      this.minNumerals = defaults.minNumerals;
    	      this.minPasswordAge = defaults.minPasswordAge;
    	      this.minSpecialChars = defaults.minSpecialChars;
    	      this.minUniqueChars = defaults.minUniqueChars;
    	      this.minUpperCase = defaults.minUpperCase;
    	      this.name = defaults.name;
    	      this.numPasswordsInHistory = defaults.numPasswordsInHistory;
    	      this.ocid = defaults.ocid;
    	      this.passwordExpireWarning = defaults.passwordExpireWarning;
    	      this.passwordExpiresAfter = defaults.passwordExpiresAfter;
    	      this.passwordPolicyId = defaults.passwordPolicyId;
    	      this.passwordStrength = defaults.passwordStrength;
    	      this.priority = defaults.priority;
    	      this.requiredChars = defaults.requiredChars;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.startsWithAlphabet = defaults.startsWithAlphabet;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.userNameDisallowed = defaults.userNameDisallowed;
        }

        @CustomType.Setter
        public Builder allowedChars(String allowedChars) {
            this.allowedChars = Objects.requireNonNull(allowedChars);
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            this.compartmentOcid = Objects.requireNonNull(compartmentOcid);
            return this;
        }
        @CustomType.Setter
        public Builder configuredPasswordPolicyRules(List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules) {
            this.configuredPasswordPolicyRules = Objects.requireNonNull(configuredPasswordPolicyRules);
            return this;
        }
        public Builder configuredPasswordPolicyRules(GetDomainsPasswordPolicyConfiguredPasswordPolicyRule... configuredPasswordPolicyRules) {
            return configuredPasswordPolicyRules(List.of(configuredPasswordPolicyRules));
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            this.deleteInProgress = Objects.requireNonNull(deleteInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryDelimiter(String dictionaryDelimiter) {
            this.dictionaryDelimiter = Objects.requireNonNull(dictionaryDelimiter);
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryLocation(String dictionaryLocation) {
            this.dictionaryLocation = Objects.requireNonNull(dictionaryLocation);
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryWordDisallowed(Boolean dictionaryWordDisallowed) {
            this.dictionaryWordDisallowed = Objects.requireNonNull(dictionaryWordDisallowed);
            return this;
        }
        @CustomType.Setter
        public Builder disallowedChars(String disallowedChars) {
            this.disallowedChars = Objects.requireNonNull(disallowedChars);
            return this;
        }
        @CustomType.Setter
        public Builder disallowedSubstrings(List<String> disallowedSubstrings) {
            this.disallowedSubstrings = Objects.requireNonNull(disallowedSubstrings);
            return this;
        }
        public Builder disallowedSubstrings(String... disallowedSubstrings) {
            return disallowedSubstrings(List.of(disallowedSubstrings));
        }
        @CustomType.Setter
        public Builder disallowedUserAttributeValues(List<String> disallowedUserAttributeValues) {
            this.disallowedUserAttributeValues = Objects.requireNonNull(disallowedUserAttributeValues);
            return this;
        }
        public Builder disallowedUserAttributeValues(String... disallowedUserAttributeValues) {
            return disallowedUserAttributeValues(List.of(disallowedUserAttributeValues));
        }
        @CustomType.Setter
        public Builder distinctCharacters(Integer distinctCharacters) {
            this.distinctCharacters = Objects.requireNonNull(distinctCharacters);
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            this.domainOcid = Objects.requireNonNull(domainOcid);
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder firstNameDisallowed(Boolean firstNameDisallowed) {
            this.firstNameDisallowed = Objects.requireNonNull(firstNameDisallowed);
            return this;
        }
        @CustomType.Setter
        public Builder forcePasswordReset(Boolean forcePasswordReset) {
            this.forcePasswordReset = Objects.requireNonNull(forcePasswordReset);
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GetDomainsPasswordPolicyGroup> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(GetDomainsPasswordPolicyGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = Objects.requireNonNull(idcsCreatedBies);
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsPasswordPolicyIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = Objects.requireNonNull(idcsLastModifiedBies);
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsPasswordPolicyIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = Objects.requireNonNull(idcsLastUpgradedInRelease);
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = Objects.requireNonNull(idcsPreventedOperations);
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder lastNameDisallowed(Boolean lastNameDisallowed) {
            this.lastNameDisallowed = Objects.requireNonNull(lastNameDisallowed);
            return this;
        }
        @CustomType.Setter
        public Builder lockoutDuration(Integer lockoutDuration) {
            this.lockoutDuration = Objects.requireNonNull(lockoutDuration);
            return this;
        }
        @CustomType.Setter
        public Builder maxIncorrectAttempts(Integer maxIncorrectAttempts) {
            this.maxIncorrectAttempts = Objects.requireNonNull(maxIncorrectAttempts);
            return this;
        }
        @CustomType.Setter
        public Builder maxLength(Integer maxLength) {
            this.maxLength = Objects.requireNonNull(maxLength);
            return this;
        }
        @CustomType.Setter
        public Builder maxRepeatedChars(Integer maxRepeatedChars) {
            this.maxRepeatedChars = Objects.requireNonNull(maxRepeatedChars);
            return this;
        }
        @CustomType.Setter
        public Builder maxSpecialChars(Integer maxSpecialChars) {
            this.maxSpecialChars = Objects.requireNonNull(maxSpecialChars);
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsPasswordPolicyMeta> metas) {
            this.metas = Objects.requireNonNull(metas);
            return this;
        }
        public Builder metas(GetDomainsPasswordPolicyMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder minAlphaNumerals(Integer minAlphaNumerals) {
            this.minAlphaNumerals = Objects.requireNonNull(minAlphaNumerals);
            return this;
        }
        @CustomType.Setter
        public Builder minAlphas(Integer minAlphas) {
            this.minAlphas = Objects.requireNonNull(minAlphas);
            return this;
        }
        @CustomType.Setter
        public Builder minLength(Integer minLength) {
            this.minLength = Objects.requireNonNull(minLength);
            return this;
        }
        @CustomType.Setter
        public Builder minLowerCase(Integer minLowerCase) {
            this.minLowerCase = Objects.requireNonNull(minLowerCase);
            return this;
        }
        @CustomType.Setter
        public Builder minNumerals(Integer minNumerals) {
            this.minNumerals = Objects.requireNonNull(minNumerals);
            return this;
        }
        @CustomType.Setter
        public Builder minPasswordAge(Integer minPasswordAge) {
            this.minPasswordAge = Objects.requireNonNull(minPasswordAge);
            return this;
        }
        @CustomType.Setter
        public Builder minSpecialChars(Integer minSpecialChars) {
            this.minSpecialChars = Objects.requireNonNull(minSpecialChars);
            return this;
        }
        @CustomType.Setter
        public Builder minUniqueChars(Integer minUniqueChars) {
            this.minUniqueChars = Objects.requireNonNull(minUniqueChars);
            return this;
        }
        @CustomType.Setter
        public Builder minUpperCase(Integer minUpperCase) {
            this.minUpperCase = Objects.requireNonNull(minUpperCase);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numPasswordsInHistory(Integer numPasswordsInHistory) {
            this.numPasswordsInHistory = Objects.requireNonNull(numPasswordsInHistory);
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            this.ocid = Objects.requireNonNull(ocid);
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpireWarning(Integer passwordExpireWarning) {
            this.passwordExpireWarning = Objects.requireNonNull(passwordExpireWarning);
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpiresAfter(Integer passwordExpiresAfter) {
            this.passwordExpiresAfter = Objects.requireNonNull(passwordExpiresAfter);
            return this;
        }
        @CustomType.Setter
        public Builder passwordPolicyId(String passwordPolicyId) {
            this.passwordPolicyId = Objects.requireNonNull(passwordPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder passwordStrength(String passwordStrength) {
            this.passwordStrength = Objects.requireNonNull(passwordStrength);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder requiredChars(String requiredChars) {
            this.requiredChars = Objects.requireNonNull(requiredChars);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder startsWithAlphabet(Boolean startsWithAlphabet) {
            this.startsWithAlphabet = Objects.requireNonNull(startsWithAlphabet);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsPasswordPolicyTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDomainsPasswordPolicyTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            this.tenancyOcid = Objects.requireNonNull(tenancyOcid);
            return this;
        }
        @CustomType.Setter
        public Builder userNameDisallowed(Boolean userNameDisallowed) {
            this.userNameDisallowed = Objects.requireNonNull(userNameDisallowed);
            return this;
        }
        public GetDomainsPasswordPolicyResult build() {
            final var o = new GetDomainsPasswordPolicyResult();
            o.allowedChars = allowedChars;
            o.attributeSets = attributeSets;
            o.attributes = attributes;
            o.authorization = authorization;
            o.compartmentOcid = compartmentOcid;
            o.configuredPasswordPolicyRules = configuredPasswordPolicyRules;
            o.deleteInProgress = deleteInProgress;
            o.description = description;
            o.dictionaryDelimiter = dictionaryDelimiter;
            o.dictionaryLocation = dictionaryLocation;
            o.dictionaryWordDisallowed = dictionaryWordDisallowed;
            o.disallowedChars = disallowedChars;
            o.disallowedSubstrings = disallowedSubstrings;
            o.disallowedUserAttributeValues = disallowedUserAttributeValues;
            o.distinctCharacters = distinctCharacters;
            o.domainOcid = domainOcid;
            o.externalId = externalId;
            o.firstNameDisallowed = firstNameDisallowed;
            o.forcePasswordReset = forcePasswordReset;
            o.groups = groups;
            o.id = id;
            o.idcsCreatedBies = idcsCreatedBies;
            o.idcsEndpoint = idcsEndpoint;
            o.idcsLastModifiedBies = idcsLastModifiedBies;
            o.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            o.idcsPreventedOperations = idcsPreventedOperations;
            o.lastNameDisallowed = lastNameDisallowed;
            o.lockoutDuration = lockoutDuration;
            o.maxIncorrectAttempts = maxIncorrectAttempts;
            o.maxLength = maxLength;
            o.maxRepeatedChars = maxRepeatedChars;
            o.maxSpecialChars = maxSpecialChars;
            o.metas = metas;
            o.minAlphaNumerals = minAlphaNumerals;
            o.minAlphas = minAlphas;
            o.minLength = minLength;
            o.minLowerCase = minLowerCase;
            o.minNumerals = minNumerals;
            o.minPasswordAge = minPasswordAge;
            o.minSpecialChars = minSpecialChars;
            o.minUniqueChars = minUniqueChars;
            o.minUpperCase = minUpperCase;
            o.name = name;
            o.numPasswordsInHistory = numPasswordsInHistory;
            o.ocid = ocid;
            o.passwordExpireWarning = passwordExpireWarning;
            o.passwordExpiresAfter = passwordExpiresAfter;
            o.passwordPolicyId = passwordPolicyId;
            o.passwordStrength = passwordStrength;
            o.priority = priority;
            o.requiredChars = requiredChars;
            o.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            o.schemas = schemas;
            o.startsWithAlphabet = startsWithAlphabet;
            o.tags = tags;
            o.tenancyOcid = tenancyOcid;
            o.userNameDisallowed = userNameDisallowed;
            return o;
        }
    }
}
