// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyConfiguredPasswordPolicyRule;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsPasswordPolicyTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsPasswordPolicyResult {
    /**
     * @return A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     */
    private @Nullable String allowedChars;
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String compartmentOcid;
    /**
     * @return List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private @Nullable Boolean deleteInProgress;
    /**
     * @return A String that describes the password policy
     * 
     */
    private @Nullable String description;
    /**
     * @return A delimiter used to separate characters in the dictionary file
     * 
     */
    private @Nullable String dictionaryDelimiter;
    /**
     * @return A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     */
    private @Nullable String dictionaryLocation;
    /**
     * @return Indicates whether the password can match a dictionary word
     * 
     */
    private @Nullable Boolean dictionaryWordDisallowed;
    /**
     * @return A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     */
    private @Nullable String disallowedChars;
    /**
     * @return A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     */
    private @Nullable List<String> disallowedSubstrings;
    /**
     * @return List of User attributes whose values are not allowed in the password.
     * 
     */
    private @Nullable List<String> disallowedUserAttributeValues;
    /**
     * @return The number of distinct characters between old password and new password
     * 
     */
    private @Nullable Integer distinctCharacters;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String domainOcid;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private @Nullable String externalId;
    /**
     * @return Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     */
    private @Nullable Boolean firstNameDisallowed;
    /**
     * @return Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     */
    private @Nullable Boolean forcePasswordReset;
    /**
     * @return A list of groups that the password policy belongs to.
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyGroup> groups;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private @Nullable String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private @Nullable String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private @Nullable List<String> idcsPreventedOperations;
    /**
     * @return Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     */
    private @Nullable Boolean lastNameDisallowed;
    /**
     * @return The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     */
    private @Nullable Integer lockoutDuration;
    /**
     * @return An integer that represents the maximum number of failed logins before an account is locked
     * 
     */
    private @Nullable Integer maxIncorrectAttempts;
    /**
     * @return The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     */
    private @Nullable Integer maxLength;
    /**
     * @return The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     */
    private @Nullable Integer maxRepeatedChars;
    /**
     * @return The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     */
    private @Nullable Integer maxSpecialChars;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyMeta> metas;
    /**
     * @return The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     */
    private @Nullable Integer minAlphaNumerals;
    /**
     * @return The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     */
    private @Nullable Integer minAlphas;
    /**
     * @return The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     */
    private @Nullable Integer minLength;
    /**
     * @return The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     */
    private @Nullable Integer minLowerCase;
    /**
     * @return The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     */
    private @Nullable Integer minNumerals;
    /**
     * @return Minimum time after which the user can resubmit the reset password request
     * 
     */
    private @Nullable Integer minPasswordAge;
    /**
     * @return The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     */
    private @Nullable Integer minSpecialChars;
    /**
     * @return The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     */
    private @Nullable Integer minUniqueChars;
    /**
     * @return The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     */
    private @Nullable Integer minUpperCase;
    /**
     * @return A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     */
    private @Nullable String name;
    /**
     * @return The number of passwords that will be kept in history that may not be used as a password
     * 
     */
    private @Nullable Integer numPasswordsInHistory;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private @Nullable String ocid;
    /**
     * @return An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     */
    private @Nullable Integer passwordExpireWarning;
    /**
     * @return The number of days after which the password expires automatically
     * 
     */
    private @Nullable Integer passwordExpiresAfter;
    private String passwordPolicyId;
    /**
     * @return Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     */
    private @Nullable String passwordStrength;
    /**
     * @return Password policy priority
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     */
    private @Nullable String requiredChars;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private @Nullable List<String> schemas;
    /**
     * @return Indicates that the password must begin with an alphabetic character
     * 
     */
    private @Nullable Boolean startsWithAlphabet;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private @Nullable List<GetDomainsPasswordPolicyTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String tenancyOcid;
    /**
     * @return Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     */
    private @Nullable Boolean userNameDisallowed;

    private GetDomainsPasswordPolicyResult() {}
    /**
     * @return A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
     * 
     */
    public Optional<String> allowedChars() {
        return Optional.ofNullable(this.allowedChars);
    }
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }
    /**
     * @return List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
     * 
     */
    public List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules() {
        return this.configuredPasswordPolicyRules == null ? List.of() : this.configuredPasswordPolicyRules;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Optional<Boolean> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }
    /**
     * @return A String that describes the password policy
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A delimiter used to separate characters in the dictionary file
     * 
     */
    public Optional<String> dictionaryDelimiter() {
        return Optional.ofNullable(this.dictionaryDelimiter);
    }
    /**
     * @return A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
     * 
     */
    public Optional<String> dictionaryLocation() {
        return Optional.ofNullable(this.dictionaryLocation);
    }
    /**
     * @return Indicates whether the password can match a dictionary word
     * 
     */
    public Optional<Boolean> dictionaryWordDisallowed() {
        return Optional.ofNullable(this.dictionaryWordDisallowed);
    }
    /**
     * @return A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
     * 
     */
    public Optional<String> disallowedChars() {
        return Optional.ofNullable(this.disallowedChars);
    }
    /**
     * @return A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
     * 
     */
    public List<String> disallowedSubstrings() {
        return this.disallowedSubstrings == null ? List.of() : this.disallowedSubstrings;
    }
    /**
     * @return List of User attributes whose values are not allowed in the password.
     * 
     */
    public List<String> disallowedUserAttributeValues() {
        return this.disallowedUserAttributeValues == null ? List.of() : this.disallowedUserAttributeValues;
    }
    /**
     * @return The number of distinct characters between old password and new password
     * 
     */
    public Optional<Integer> distinctCharacters() {
        return Optional.ofNullable(this.distinctCharacters);
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    /**
     * @return Indicates a sequence of characters that match the user&#39;s first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
     * 
     */
    public Optional<Boolean> firstNameDisallowed() {
        return Optional.ofNullable(this.firstNameDisallowed);
    }
    /**
     * @return Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
     * 
     */
    public Optional<Boolean> forcePasswordReset() {
        return Optional.ofNullable(this.forcePasswordReset);
    }
    /**
     * @return A list of groups that the password policy belongs to.
     * 
     */
    public List<GetDomainsPasswordPolicyGroup> groups() {
        return this.groups == null ? List.of() : this.groups;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies == null ? List.of() : this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies == null ? List.of() : this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public Optional<String> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations == null ? List.of() : this.idcsPreventedOperations;
    }
    /**
     * @return Indicates a sequence of characters that match the user&#39;s last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
     * 
     */
    public Optional<Boolean> lastNameDisallowed() {
        return Optional.ofNullable(this.lastNameDisallowed);
    }
    /**
     * @return The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
     * 
     */
    public Optional<Integer> lockoutDuration() {
        return Optional.ofNullable(this.lockoutDuration);
    }
    /**
     * @return An integer that represents the maximum number of failed logins before an account is locked
     * 
     */
    public Optional<Integer> maxIncorrectAttempts() {
        return Optional.ofNullable(this.maxIncorrectAttempts);
    }
    /**
     * @return The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
     * 
     */
    public Optional<Integer> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }
    /**
     * @return The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
     * 
     */
    public Optional<Integer> maxRepeatedChars() {
        return Optional.ofNullable(this.maxRepeatedChars);
    }
    /**
     * @return The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
     * 
     */
    public Optional<Integer> maxSpecialChars() {
        return Optional.ofNullable(this.maxSpecialChars);
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsPasswordPolicyMeta> metas() {
        return this.metas == null ? List.of() : this.metas;
    }
    /**
     * @return The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
     * 
     */
    public Optional<Integer> minAlphaNumerals() {
        return Optional.ofNullable(this.minAlphaNumerals);
    }
    /**
     * @return The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
     * 
     */
    public Optional<Integer> minAlphas() {
        return Optional.ofNullable(this.minAlphas);
    }
    /**
     * @return The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
     * 
     */
    public Optional<Integer> minLength() {
        return Optional.ofNullable(this.minLength);
    }
    /**
     * @return The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
     * 
     */
    public Optional<Integer> minLowerCase() {
        return Optional.ofNullable(this.minLowerCase);
    }
    /**
     * @return The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
     * 
     */
    public Optional<Integer> minNumerals() {
        return Optional.ofNullable(this.minNumerals);
    }
    /**
     * @return Minimum time after which the user can resubmit the reset password request
     * 
     */
    public Optional<Integer> minPasswordAge() {
        return Optional.ofNullable(this.minPasswordAge);
    }
    /**
     * @return The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
     * 
     */
    public Optional<Integer> minSpecialChars() {
        return Optional.ofNullable(this.minSpecialChars);
    }
    /**
     * @return The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
     * 
     */
    public Optional<Integer> minUniqueChars() {
        return Optional.ofNullable(this.minUniqueChars);
    }
    /**
     * @return The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
     * 
     */
    public Optional<Integer> minUpperCase() {
        return Optional.ofNullable(this.minUpperCase);
    }
    /**
     * @return A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The number of passwords that will be kept in history that may not be used as a password
     * 
     */
    public Optional<Integer> numPasswordsInHistory() {
        return Optional.ofNullable(this.numPasswordsInHistory);
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    /**
     * @return An integer indicating the number of days before which the user should be warned about password expiry.
     * 
     */
    public Optional<Integer> passwordExpireWarning() {
        return Optional.ofNullable(this.passwordExpireWarning);
    }
    /**
     * @return The number of days after which the password expires automatically
     * 
     */
    public Optional<Integer> passwordExpiresAfter() {
        return Optional.ofNullable(this.passwordExpiresAfter);
    }
    public String passwordPolicyId() {
        return this.passwordPolicyId;
    }
    /**
     * @return Indicates whether the password policy is configured as Simple, Standard, or Custom.
     * 
     */
    public Optional<String> passwordStrength() {
        return Optional.ofNullable(this.passwordStrength);
    }
    /**
     * @return Password policy priority
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
     * 
     */
    public Optional<String> requiredChars() {
        return Optional.ofNullable(this.requiredChars);
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    /**
     * @return Indicates that the password must begin with an alphabetic character
     * 
     */
    public Optional<Boolean> startsWithAlphabet() {
        return Optional.ofNullable(this.startsWithAlphabet);
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsPasswordPolicyTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }
    /**
     * @return Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
     * 
     */
    public Optional<Boolean> userNameDisallowed() {
        return Optional.ofNullable(this.userNameDisallowed);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsPasswordPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allowedChars;
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private @Nullable String compartmentOcid;
        private @Nullable List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules;
        private @Nullable Boolean deleteInProgress;
        private @Nullable String description;
        private @Nullable String dictionaryDelimiter;
        private @Nullable String dictionaryLocation;
        private @Nullable Boolean dictionaryWordDisallowed;
        private @Nullable String disallowedChars;
        private @Nullable List<String> disallowedSubstrings;
        private @Nullable List<String> disallowedUserAttributeValues;
        private @Nullable Integer distinctCharacters;
        private @Nullable String domainOcid;
        private @Nullable String externalId;
        private @Nullable Boolean firstNameDisallowed;
        private @Nullable Boolean forcePasswordReset;
        private @Nullable List<GetDomainsPasswordPolicyGroup> groups;
        private @Nullable String id;
        private @Nullable List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private @Nullable List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies;
        private @Nullable String idcsLastUpgradedInRelease;
        private @Nullable List<String> idcsPreventedOperations;
        private @Nullable Boolean lastNameDisallowed;
        private @Nullable Integer lockoutDuration;
        private @Nullable Integer maxIncorrectAttempts;
        private @Nullable Integer maxLength;
        private @Nullable Integer maxRepeatedChars;
        private @Nullable Integer maxSpecialChars;
        private @Nullable List<GetDomainsPasswordPolicyMeta> metas;
        private @Nullable Integer minAlphaNumerals;
        private @Nullable Integer minAlphas;
        private @Nullable Integer minLength;
        private @Nullable Integer minLowerCase;
        private @Nullable Integer minNumerals;
        private @Nullable Integer minPasswordAge;
        private @Nullable Integer minSpecialChars;
        private @Nullable Integer minUniqueChars;
        private @Nullable Integer minUpperCase;
        private @Nullable String name;
        private @Nullable Integer numPasswordsInHistory;
        private @Nullable String ocid;
        private @Nullable Integer passwordExpireWarning;
        private @Nullable Integer passwordExpiresAfter;
        private String passwordPolicyId;
        private @Nullable String passwordStrength;
        private @Nullable Integer priority;
        private @Nullable String requiredChars;
        private @Nullable String resourceTypeSchemaVersion;
        private @Nullable List<String> schemas;
        private @Nullable Boolean startsWithAlphabet;
        private @Nullable List<GetDomainsPasswordPolicyTag> tags;
        private @Nullable String tenancyOcid;
        private @Nullable Boolean userNameDisallowed;
        public Builder() {}
        public Builder(GetDomainsPasswordPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedChars = defaults.allowedChars;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.configuredPasswordPolicyRules = defaults.configuredPasswordPolicyRules;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.dictionaryDelimiter = defaults.dictionaryDelimiter;
    	      this.dictionaryLocation = defaults.dictionaryLocation;
    	      this.dictionaryWordDisallowed = defaults.dictionaryWordDisallowed;
    	      this.disallowedChars = defaults.disallowedChars;
    	      this.disallowedSubstrings = defaults.disallowedSubstrings;
    	      this.disallowedUserAttributeValues = defaults.disallowedUserAttributeValues;
    	      this.distinctCharacters = defaults.distinctCharacters;
    	      this.domainOcid = defaults.domainOcid;
    	      this.externalId = defaults.externalId;
    	      this.firstNameDisallowed = defaults.firstNameDisallowed;
    	      this.forcePasswordReset = defaults.forcePasswordReset;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.lastNameDisallowed = defaults.lastNameDisallowed;
    	      this.lockoutDuration = defaults.lockoutDuration;
    	      this.maxIncorrectAttempts = defaults.maxIncorrectAttempts;
    	      this.maxLength = defaults.maxLength;
    	      this.maxRepeatedChars = defaults.maxRepeatedChars;
    	      this.maxSpecialChars = defaults.maxSpecialChars;
    	      this.metas = defaults.metas;
    	      this.minAlphaNumerals = defaults.minAlphaNumerals;
    	      this.minAlphas = defaults.minAlphas;
    	      this.minLength = defaults.minLength;
    	      this.minLowerCase = defaults.minLowerCase;
    	      this.minNumerals = defaults.minNumerals;
    	      this.minPasswordAge = defaults.minPasswordAge;
    	      this.minSpecialChars = defaults.minSpecialChars;
    	      this.minUniqueChars = defaults.minUniqueChars;
    	      this.minUpperCase = defaults.minUpperCase;
    	      this.name = defaults.name;
    	      this.numPasswordsInHistory = defaults.numPasswordsInHistory;
    	      this.ocid = defaults.ocid;
    	      this.passwordExpireWarning = defaults.passwordExpireWarning;
    	      this.passwordExpiresAfter = defaults.passwordExpiresAfter;
    	      this.passwordPolicyId = defaults.passwordPolicyId;
    	      this.passwordStrength = defaults.passwordStrength;
    	      this.priority = defaults.priority;
    	      this.requiredChars = defaults.requiredChars;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.startsWithAlphabet = defaults.startsWithAlphabet;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.userNameDisallowed = defaults.userNameDisallowed;
        }

        @CustomType.Setter
        public Builder allowedChars(@Nullable String allowedChars) {
            this.allowedChars = allowedChars;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(@Nullable String compartmentOcid) {
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder configuredPasswordPolicyRules(@Nullable List<GetDomainsPasswordPolicyConfiguredPasswordPolicyRule> configuredPasswordPolicyRules) {
            this.configuredPasswordPolicyRules = configuredPasswordPolicyRules;
            return this;
        }
        public Builder configuredPasswordPolicyRules(GetDomainsPasswordPolicyConfiguredPasswordPolicyRule... configuredPasswordPolicyRules) {
            return configuredPasswordPolicyRules(List.of(configuredPasswordPolicyRules));
        }
        @CustomType.Setter
        public Builder deleteInProgress(@Nullable Boolean deleteInProgress) {
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryDelimiter(@Nullable String dictionaryDelimiter) {
            this.dictionaryDelimiter = dictionaryDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryLocation(@Nullable String dictionaryLocation) {
            this.dictionaryLocation = dictionaryLocation;
            return this;
        }
        @CustomType.Setter
        public Builder dictionaryWordDisallowed(@Nullable Boolean dictionaryWordDisallowed) {
            this.dictionaryWordDisallowed = dictionaryWordDisallowed;
            return this;
        }
        @CustomType.Setter
        public Builder disallowedChars(@Nullable String disallowedChars) {
            this.disallowedChars = disallowedChars;
            return this;
        }
        @CustomType.Setter
        public Builder disallowedSubstrings(@Nullable List<String> disallowedSubstrings) {
            this.disallowedSubstrings = disallowedSubstrings;
            return this;
        }
        public Builder disallowedSubstrings(String... disallowedSubstrings) {
            return disallowedSubstrings(List.of(disallowedSubstrings));
        }
        @CustomType.Setter
        public Builder disallowedUserAttributeValues(@Nullable List<String> disallowedUserAttributeValues) {
            this.disallowedUserAttributeValues = disallowedUserAttributeValues;
            return this;
        }
        public Builder disallowedUserAttributeValues(String... disallowedUserAttributeValues) {
            return disallowedUserAttributeValues(List.of(disallowedUserAttributeValues));
        }
        @CustomType.Setter
        public Builder distinctCharacters(@Nullable Integer distinctCharacters) {
            this.distinctCharacters = distinctCharacters;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(@Nullable String domainOcid) {
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable String externalId) {
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder firstNameDisallowed(@Nullable Boolean firstNameDisallowed) {
            this.firstNameDisallowed = firstNameDisallowed;
            return this;
        }
        @CustomType.Setter
        public Builder forcePasswordReset(@Nullable Boolean forcePasswordReset) {
            this.forcePasswordReset = forcePasswordReset;
            return this;
        }
        @CustomType.Setter
        public Builder groups(@Nullable List<GetDomainsPasswordPolicyGroup> groups) {
            this.groups = groups;
            return this;
        }
        public Builder groups(GetDomainsPasswordPolicyGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(@Nullable List<GetDomainsPasswordPolicyIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsPasswordPolicyIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(@Nullable List<GetDomainsPasswordPolicyIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsPasswordPolicyIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(@Nullable String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(@Nullable List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder lastNameDisallowed(@Nullable Boolean lastNameDisallowed) {
            this.lastNameDisallowed = lastNameDisallowed;
            return this;
        }
        @CustomType.Setter
        public Builder lockoutDuration(@Nullable Integer lockoutDuration) {
            this.lockoutDuration = lockoutDuration;
            return this;
        }
        @CustomType.Setter
        public Builder maxIncorrectAttempts(@Nullable Integer maxIncorrectAttempts) {
            this.maxIncorrectAttempts = maxIncorrectAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder maxLength(@Nullable Integer maxLength) {
            this.maxLength = maxLength;
            return this;
        }
        @CustomType.Setter
        public Builder maxRepeatedChars(@Nullable Integer maxRepeatedChars) {
            this.maxRepeatedChars = maxRepeatedChars;
            return this;
        }
        @CustomType.Setter
        public Builder maxSpecialChars(@Nullable Integer maxSpecialChars) {
            this.maxSpecialChars = maxSpecialChars;
            return this;
        }
        @CustomType.Setter
        public Builder metas(@Nullable List<GetDomainsPasswordPolicyMeta> metas) {
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsPasswordPolicyMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder minAlphaNumerals(@Nullable Integer minAlphaNumerals) {
            this.minAlphaNumerals = minAlphaNumerals;
            return this;
        }
        @CustomType.Setter
        public Builder minAlphas(@Nullable Integer minAlphas) {
            this.minAlphas = minAlphas;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(@Nullable Integer minLength) {
            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder minLowerCase(@Nullable Integer minLowerCase) {
            this.minLowerCase = minLowerCase;
            return this;
        }
        @CustomType.Setter
        public Builder minNumerals(@Nullable Integer minNumerals) {
            this.minNumerals = minNumerals;
            return this;
        }
        @CustomType.Setter
        public Builder minPasswordAge(@Nullable Integer minPasswordAge) {
            this.minPasswordAge = minPasswordAge;
            return this;
        }
        @CustomType.Setter
        public Builder minSpecialChars(@Nullable Integer minSpecialChars) {
            this.minSpecialChars = minSpecialChars;
            return this;
        }
        @CustomType.Setter
        public Builder minUniqueChars(@Nullable Integer minUniqueChars) {
            this.minUniqueChars = minUniqueChars;
            return this;
        }
        @CustomType.Setter
        public Builder minUpperCase(@Nullable Integer minUpperCase) {
            this.minUpperCase = minUpperCase;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numPasswordsInHistory(@Nullable Integer numPasswordsInHistory) {
            this.numPasswordsInHistory = numPasswordsInHistory;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpireWarning(@Nullable Integer passwordExpireWarning) {
            this.passwordExpireWarning = passwordExpireWarning;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpiresAfter(@Nullable Integer passwordExpiresAfter) {
            this.passwordExpiresAfter = passwordExpiresAfter;
            return this;
        }
        @CustomType.Setter
        public Builder passwordPolicyId(String passwordPolicyId) {
            this.passwordPolicyId = Objects.requireNonNull(passwordPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder passwordStrength(@Nullable String passwordStrength) {
            this.passwordStrength = passwordStrength;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder requiredChars(@Nullable String requiredChars) {
            this.requiredChars = requiredChars;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder startsWithAlphabet(@Nullable Boolean startsWithAlphabet) {
            this.startsWithAlphabet = startsWithAlphabet;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<GetDomainsPasswordPolicyTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsPasswordPolicyTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(@Nullable String tenancyOcid) {
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder userNameDisallowed(@Nullable Boolean userNameDisallowed) {
            this.userNameDisallowed = userNameDisallowed;
            return this;
        }
        public GetDomainsPasswordPolicyResult build() {
            final var o = new GetDomainsPasswordPolicyResult();
            o.allowedChars = allowedChars;
            o.attributeSets = attributeSets;
            o.attributes = attributes;
            o.authorization = authorization;
            o.compartmentOcid = compartmentOcid;
            o.configuredPasswordPolicyRules = configuredPasswordPolicyRules;
            o.deleteInProgress = deleteInProgress;
            o.description = description;
            o.dictionaryDelimiter = dictionaryDelimiter;
            o.dictionaryLocation = dictionaryLocation;
            o.dictionaryWordDisallowed = dictionaryWordDisallowed;
            o.disallowedChars = disallowedChars;
            o.disallowedSubstrings = disallowedSubstrings;
            o.disallowedUserAttributeValues = disallowedUserAttributeValues;
            o.distinctCharacters = distinctCharacters;
            o.domainOcid = domainOcid;
            o.externalId = externalId;
            o.firstNameDisallowed = firstNameDisallowed;
            o.forcePasswordReset = forcePasswordReset;
            o.groups = groups;
            o.id = id;
            o.idcsCreatedBies = idcsCreatedBies;
            o.idcsEndpoint = idcsEndpoint;
            o.idcsLastModifiedBies = idcsLastModifiedBies;
            o.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            o.idcsPreventedOperations = idcsPreventedOperations;
            o.lastNameDisallowed = lastNameDisallowed;
            o.lockoutDuration = lockoutDuration;
            o.maxIncorrectAttempts = maxIncorrectAttempts;
            o.maxLength = maxLength;
            o.maxRepeatedChars = maxRepeatedChars;
            o.maxSpecialChars = maxSpecialChars;
            o.metas = metas;
            o.minAlphaNumerals = minAlphaNumerals;
            o.minAlphas = minAlphas;
            o.minLength = minLength;
            o.minLowerCase = minLowerCase;
            o.minNumerals = minNumerals;
            o.minPasswordAge = minPasswordAge;
            o.minSpecialChars = minSpecialChars;
            o.minUniqueChars = minUniqueChars;
            o.minUpperCase = minUpperCase;
            o.name = name;
            o.numPasswordsInHistory = numPasswordsInHistory;
            o.ocid = ocid;
            o.passwordExpireWarning = passwordExpireWarning;
            o.passwordExpiresAfter = passwordExpiresAfter;
            o.passwordPolicyId = passwordPolicyId;
            o.passwordStrength = passwordStrength;
            o.priority = priority;
            o.requiredChars = requiredChars;
            o.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            o.schemas = schemas;
            o.startsWithAlphabet = startsWithAlphabet;
            o.tags = tags;
            o.tenancyOcid = tenancyOcid;
            o.userNameDisallowed = userNameDisallowed;
            return o;
        }
    }
}
