// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute {
    /**
     * @return A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \&#34;work\&#34;, \&#34;home\&#34;.
     * 
     */
    private List<String> canonicalValues;
    /**
     * @return Specifies if the String attribute is case-sensitive
     * 
     */
    private Boolean caseExact;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return The attribute&#39;s human-readable description
     * 
     */
    private String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Specifies User mutability for this attribute
     * 
     */
    private String endUserMutability;
    /**
     * @return Specifies the list of User mutabilities allowed
     * 
     */
    private List<String> endUserMutabilityAllowedValues;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return Indicates that the schema has been added since this release number
     * 
     */
    private String idcsAddedSinceReleaseNumber;
    /**
     * @return Indicates that the schema has been added since version
     * 
     */
    private Integer idcsAddedSinceVersion;
    /**
     * @return Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \&#34;attributesToGet\&#34; while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
     * 
     */
    private Boolean idcsAttributeCacheable;
    /**
     * @return Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
     * 
     */
    private Boolean idcsAttributeMappable;
    /**
     * @return Specifies whether changes to this attribute value are audited
     * 
     */
    private Boolean idcsAuditable;
    /**
     * @return Sequence tracking ID name for the attribute
     * 
     */
    private String idcsAutoIncrementSeqName;
    /**
     * @return Filter to use when getting canonical values for this schema attribute
     * 
     */
    private String idcsCanonicalValueSourceFilter;
    /**
     * @return Specifies the Resource type to read from for dynamic canonical values
     * 
     */
    private String idcsCanonicalValueSourceResourceType;
    /**
     * @return The set of one or more sub attributes&#39; names of a CMVA, whose values uniquely identify an instance of a CMVA
     * 
     */
    private List<String> idcsCompositeKeys;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The attribute defining the CSV column header name for import/export
     * 
     */
    private String idcsCsvColumnHeaderName;
    /**
     * @return custom attribute flag.
     * 
     */
    private Boolean idcsCustomAttribute;
    /**
     * @return Indicates that the schema has been deprecated since this release number
     * 
     */
    private String idcsDeprecatedSinceReleaseNumber;
    /**
     * @return Indicates that the schema has been deprecated since version
     * 
     */
    private Integer idcsDeprecatedSinceVersion;
    /**
     * @return Specifies the user-friendly displayable attribute name or catalog key used for localization
     * 
     */
    private String idcsDisplayName;
    /**
     * @return Localized schema attribute display name for use by UI client  for displaying attribute labels
     * 
     */
    private String idcsDisplayNameMessageId;
    /**
     * @return **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * idcsSearchable: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
     * 
     */
    private Boolean idcsFetchComplexAttributeValues;
    /**
     * @return Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
     * 
     */
    private String idcsFromTargetMapper;
    /**
     * @return Fully qualified name of this attribute
     * 
     */
    private String idcsFullyQualifiedName;
    /**
     * @return Specifies whether this attribute value was generated
     * 
     */
    private Boolean idcsGenerated;
    /**
     * @return Maps to ICF data type
     * 
     */
    private String idcsIcfAttributeType;
    /**
     * @return Maps to ICF target attribute name
     * 
     */
    private String idcsIcfBundleAttributeName;
    /**
     * @return Metadata to identify the ICF required attribute
     * 
     */
    private Boolean idcsIcfRequired;
    /**
     * @return Specifies the indirectly referenced Resources
     * 
     */
    private List<String> idcsIndirectRefResourceAttributes;
    /**
     * @return Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
     * 
     */
    private Boolean idcsInternal;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Specifies the maximum length of the attribute
     * 
     */
    private Integer idcsMaxLength;
    /**
     * @return Specifies the maximum value of the integer attribute
     * 
     */
    private Integer idcsMaxValue;
    /**
     * @return Specifies the minimum length of the attribute
     * 
     */
    private Integer idcsMinLength;
    /**
     * @return Specifies the minimum value of the integer attribute
     * 
     */
    private Integer idcsMinValue;
    /**
     * @return If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
     * 
     */
    private Boolean idcsMultiLanguage;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return Specifies the referenced Resource attribute
     * 
     */
    private String idcsRefResourceAttribute;
    /**
     * @return Specifies the directly referenced Resources
     * 
     */
    private List<String> idcsRefResourceAttributes;
    /**
     * @return Schema URN string that this attribute belongs to
     * 
     */
    private String idcsSchemaUrn;
    /**
     * @return Indicates if the attribute is scim compliant, default is true
     * 
     */
    private Boolean idcsScimCompliant;
    /**
     * @return Specifies whether this attribute can be included in a search filter
     * 
     */
    private Boolean idcsSearchable;
    /**
     * @return Flag to specify if the attribute should be encrypted or hashed
     * 
     */
    private String idcsSensitive;
    /**
     * @return Target attribute name that this attribute gets mapped to for persistence
     * 
     */
    private String idcsTargetAttributeName;
    /**
     * @return Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
     * 
     */
    private String idcsTargetAttributeNameToMigrateFrom;
    /**
     * @return Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false &amp; searchable attributes. Do not use by default.
     * 
     */
    private String idcsTargetNormAttributeName;
    /**
     * @return Target index name created for this attribute for performance
     * 
     */
    private String idcsTargetUniqueConstraintName;
    /**
     * @return Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
     * 
     */
    private String idcsToTargetMapper;
    /**
     * @return Trims any leading and trailing blanks from String values. Default is True.
     * 
     */
    private Boolean idcsTrimStringValue;
    /**
     * @return Validate payload reference value during create, replace, and update. Default is True.
     * 
     */
    private Boolean idcsValidateReference;
    /**
     * @return Specifies whether the value of the Resource attribute is persisted
     * 
     */
    private Boolean idcsValuePersisted;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas;
    /**
     * @return Indicates the attribute&#39;s plurality
     * 
     */
    private Boolean multiValued;
    /**
     * @return Specifies if the attribute is mutable
     * 
     */
    private String mutability;
    /**
     * @return Attribute&#39;s name
     * 
     */
    private String name;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \&#34;reference\&#34; data type.
     * 
     */
    private List<String> referenceTypes;
    /**
     * @return Specifies if the attribute is required
     * 
     */
    private Boolean required;
    /**
     * @return ResourceType this attribute belongs to.
     * 
     */
    private String resourceType;
    /**
     * @return A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
     * 
     */
    private String returned;
    /**
     * @return The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
     * 
     */
    private List<String> schemas;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return The attribute&#39;s data type--for example, String
     * 
     */
    private String type;
    /**
     * @return A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \&#34;none\&#34;.
     * 
     */
    private String uniqueness;

    private GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute() {}
    /**
     * @return A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \&#34;work\&#34;, \&#34;home\&#34;.
     * 
     */
    public List<String> canonicalValues() {
        return this.canonicalValues;
    }
    /**
     * @return Specifies if the String attribute is case-sensitive
     * 
     */
    public Boolean caseExact() {
        return this.caseExact;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return The attribute&#39;s human-readable description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Specifies User mutability for this attribute
     * 
     */
    public String endUserMutability() {
        return this.endUserMutability;
    }
    /**
     * @return Specifies the list of User mutabilities allowed
     * 
     */
    public List<String> endUserMutabilityAllowedValues() {
        return this.endUserMutabilityAllowedValues;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates that the schema has been added since this release number
     * 
     */
    public String idcsAddedSinceReleaseNumber() {
        return this.idcsAddedSinceReleaseNumber;
    }
    /**
     * @return Indicates that the schema has been added since version
     * 
     */
    public Integer idcsAddedSinceVersion() {
        return this.idcsAddedSinceVersion;
    }
    /**
     * @return Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \&#34;attributesToGet\&#34; while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
     * 
     */
    public Boolean idcsAttributeCacheable() {
        return this.idcsAttributeCacheable;
    }
    /**
     * @return Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
     * 
     */
    public Boolean idcsAttributeMappable() {
        return this.idcsAttributeMappable;
    }
    /**
     * @return Specifies whether changes to this attribute value are audited
     * 
     */
    public Boolean idcsAuditable() {
        return this.idcsAuditable;
    }
    /**
     * @return Sequence tracking ID name for the attribute
     * 
     */
    public String idcsAutoIncrementSeqName() {
        return this.idcsAutoIncrementSeqName;
    }
    /**
     * @return Filter to use when getting canonical values for this schema attribute
     * 
     */
    public String idcsCanonicalValueSourceFilter() {
        return this.idcsCanonicalValueSourceFilter;
    }
    /**
     * @return Specifies the Resource type to read from for dynamic canonical values
     * 
     */
    public String idcsCanonicalValueSourceResourceType() {
        return this.idcsCanonicalValueSourceResourceType;
    }
    /**
     * @return The set of one or more sub attributes&#39; names of a CMVA, whose values uniquely identify an instance of a CMVA
     * 
     */
    public List<String> idcsCompositeKeys() {
        return this.idcsCompositeKeys;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The attribute defining the CSV column header name for import/export
     * 
     */
    public String idcsCsvColumnHeaderName() {
        return this.idcsCsvColumnHeaderName;
    }
    /**
     * @return custom attribute flag.
     * 
     */
    public Boolean idcsCustomAttribute() {
        return this.idcsCustomAttribute;
    }
    /**
     * @return Indicates that the schema has been deprecated since this release number
     * 
     */
    public String idcsDeprecatedSinceReleaseNumber() {
        return this.idcsDeprecatedSinceReleaseNumber;
    }
    /**
     * @return Indicates that the schema has been deprecated since version
     * 
     */
    public Integer idcsDeprecatedSinceVersion() {
        return this.idcsDeprecatedSinceVersion;
    }
    /**
     * @return Specifies the user-friendly displayable attribute name or catalog key used for localization
     * 
     */
    public String idcsDisplayName() {
        return this.idcsDisplayName;
    }
    /**
     * @return Localized schema attribute display name for use by UI client  for displaying attribute labels
     * 
     */
    public String idcsDisplayNameMessageId() {
        return this.idcsDisplayNameMessageId;
    }
    /**
     * @return **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * idcsSearchable: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
     * 
     */
    public Boolean idcsFetchComplexAttributeValues() {
        return this.idcsFetchComplexAttributeValues;
    }
    /**
     * @return Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
     * 
     */
    public String idcsFromTargetMapper() {
        return this.idcsFromTargetMapper;
    }
    /**
     * @return Fully qualified name of this attribute
     * 
     */
    public String idcsFullyQualifiedName() {
        return this.idcsFullyQualifiedName;
    }
    /**
     * @return Specifies whether this attribute value was generated
     * 
     */
    public Boolean idcsGenerated() {
        return this.idcsGenerated;
    }
    /**
     * @return Maps to ICF data type
     * 
     */
    public String idcsIcfAttributeType() {
        return this.idcsIcfAttributeType;
    }
    /**
     * @return Maps to ICF target attribute name
     * 
     */
    public String idcsIcfBundleAttributeName() {
        return this.idcsIcfBundleAttributeName;
    }
    /**
     * @return Metadata to identify the ICF required attribute
     * 
     */
    public Boolean idcsIcfRequired() {
        return this.idcsIcfRequired;
    }
    /**
     * @return Specifies the indirectly referenced Resources
     * 
     */
    public List<String> idcsIndirectRefResourceAttributes() {
        return this.idcsIndirectRefResourceAttributes;
    }
    /**
     * @return Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
     * 
     */
    public Boolean idcsInternal() {
        return this.idcsInternal;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Specifies the maximum length of the attribute
     * 
     */
    public Integer idcsMaxLength() {
        return this.idcsMaxLength;
    }
    /**
     * @return Specifies the maximum value of the integer attribute
     * 
     */
    public Integer idcsMaxValue() {
        return this.idcsMaxValue;
    }
    /**
     * @return Specifies the minimum length of the attribute
     * 
     */
    public Integer idcsMinLength() {
        return this.idcsMinLength;
    }
    /**
     * @return Specifies the minimum value of the integer attribute
     * 
     */
    public Integer idcsMinValue() {
        return this.idcsMinValue;
    }
    /**
     * @return If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
     * 
     */
    public Boolean idcsMultiLanguage() {
        return this.idcsMultiLanguage;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return Specifies the referenced Resource attribute
     * 
     */
    public String idcsRefResourceAttribute() {
        return this.idcsRefResourceAttribute;
    }
    /**
     * @return Specifies the directly referenced Resources
     * 
     */
    public List<String> idcsRefResourceAttributes() {
        return this.idcsRefResourceAttributes;
    }
    /**
     * @return Schema URN string that this attribute belongs to
     * 
     */
    public String idcsSchemaUrn() {
        return this.idcsSchemaUrn;
    }
    /**
     * @return Indicates if the attribute is scim compliant, default is true
     * 
     */
    public Boolean idcsScimCompliant() {
        return this.idcsScimCompliant;
    }
    /**
     * @return Specifies whether this attribute can be included in a search filter
     * 
     */
    public Boolean idcsSearchable() {
        return this.idcsSearchable;
    }
    /**
     * @return Flag to specify if the attribute should be encrypted or hashed
     * 
     */
    public String idcsSensitive() {
        return this.idcsSensitive;
    }
    /**
     * @return Target attribute name that this attribute gets mapped to for persistence
     * 
     */
    public String idcsTargetAttributeName() {
        return this.idcsTargetAttributeName;
    }
    /**
     * @return Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
     * 
     */
    public String idcsTargetAttributeNameToMigrateFrom() {
        return this.idcsTargetAttributeNameToMigrateFrom;
    }
    /**
     * @return Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false &amp; searchable attributes. Do not use by default.
     * 
     */
    public String idcsTargetNormAttributeName() {
        return this.idcsTargetNormAttributeName;
    }
    /**
     * @return Target index name created for this attribute for performance
     * 
     */
    public String idcsTargetUniqueConstraintName() {
        return this.idcsTargetUniqueConstraintName;
    }
    /**
     * @return Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
     * 
     */
    public String idcsToTargetMapper() {
        return this.idcsToTargetMapper;
    }
    /**
     * @return Trims any leading and trailing blanks from String values. Default is True.
     * 
     */
    public Boolean idcsTrimStringValue() {
        return this.idcsTrimStringValue;
    }
    /**
     * @return Validate payload reference value during create, replace, and update. Default is True.
     * 
     */
    public Boolean idcsValidateReference() {
        return this.idcsValidateReference;
    }
    /**
     * @return Specifies whether the value of the Resource attribute is persisted
     * 
     */
    public Boolean idcsValuePersisted() {
        return this.idcsValuePersisted;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas() {
        return this.metas;
    }
    /**
     * @return Indicates the attribute&#39;s plurality
     * 
     */
    public Boolean multiValued() {
        return this.multiValued;
    }
    /**
     * @return Specifies if the attribute is mutable
     * 
     */
    public String mutability() {
        return this.mutability;
    }
    /**
     * @return Attribute&#39;s name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \&#34;reference\&#34; data type.
     * 
     */
    public List<String> referenceTypes() {
        return this.referenceTypes;
    }
    /**
     * @return Specifies if the attribute is required
     * 
     */
    public Boolean required() {
        return this.required;
    }
    /**
     * @return ResourceType this attribute belongs to.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
     * 
     */
    public String returned() {
        return this.returned;
    }
    /**
     * @return The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return The attribute&#39;s data type--for example, String
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \&#34;none\&#34;.
     * 
     */
    public String uniqueness() {
        return this.uniqueness;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> canonicalValues;
        private Boolean caseExact;
        private String compartmentOcid;
        private Boolean deleteInProgress;
        private String description;
        private String domainOcid;
        private String endUserMutability;
        private List<String> endUserMutabilityAllowedValues;
        private String id;
        private String idcsAddedSinceReleaseNumber;
        private Integer idcsAddedSinceVersion;
        private Boolean idcsAttributeCacheable;
        private Boolean idcsAttributeMappable;
        private Boolean idcsAuditable;
        private String idcsAutoIncrementSeqName;
        private String idcsCanonicalValueSourceFilter;
        private String idcsCanonicalValueSourceResourceType;
        private List<String> idcsCompositeKeys;
        private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies;
        private String idcsCsvColumnHeaderName;
        private Boolean idcsCustomAttribute;
        private String idcsDeprecatedSinceReleaseNumber;
        private Integer idcsDeprecatedSinceVersion;
        private String idcsDisplayName;
        private String idcsDisplayNameMessageId;
        private Boolean idcsFetchComplexAttributeValues;
        private String idcsFromTargetMapper;
        private String idcsFullyQualifiedName;
        private Boolean idcsGenerated;
        private String idcsIcfAttributeType;
        private String idcsIcfBundleAttributeName;
        private Boolean idcsIcfRequired;
        private List<String> idcsIndirectRefResourceAttributes;
        private Boolean idcsInternal;
        private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private Integer idcsMaxLength;
        private Integer idcsMaxValue;
        private Integer idcsMinLength;
        private Integer idcsMinValue;
        private Boolean idcsMultiLanguage;
        private List<String> idcsPreventedOperations;
        private String idcsRefResourceAttribute;
        private List<String> idcsRefResourceAttributes;
        private String idcsSchemaUrn;
        private Boolean idcsScimCompliant;
        private Boolean idcsSearchable;
        private String idcsSensitive;
        private String idcsTargetAttributeName;
        private String idcsTargetAttributeNameToMigrateFrom;
        private String idcsTargetNormAttributeName;
        private String idcsTargetUniqueConstraintName;
        private String idcsToTargetMapper;
        private Boolean idcsTrimStringValue;
        private Boolean idcsValidateReference;
        private Boolean idcsValuePersisted;
        private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas;
        private Boolean multiValued;
        private String mutability;
        private String name;
        private String ocid;
        private List<String> referenceTypes;
        private Boolean required;
        private String resourceType;
        private String returned;
        private List<String> schemas;
        private List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags;
        private String tenancyOcid;
        private String type;
        private String uniqueness;
        public Builder() {}
        public Builder(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canonicalValues = defaults.canonicalValues;
    	      this.caseExact = defaults.caseExact;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.endUserMutability = defaults.endUserMutability;
    	      this.endUserMutabilityAllowedValues = defaults.endUserMutabilityAllowedValues;
    	      this.id = defaults.id;
    	      this.idcsAddedSinceReleaseNumber = defaults.idcsAddedSinceReleaseNumber;
    	      this.idcsAddedSinceVersion = defaults.idcsAddedSinceVersion;
    	      this.idcsAttributeCacheable = defaults.idcsAttributeCacheable;
    	      this.idcsAttributeMappable = defaults.idcsAttributeMappable;
    	      this.idcsAuditable = defaults.idcsAuditable;
    	      this.idcsAutoIncrementSeqName = defaults.idcsAutoIncrementSeqName;
    	      this.idcsCanonicalValueSourceFilter = defaults.idcsCanonicalValueSourceFilter;
    	      this.idcsCanonicalValueSourceResourceType = defaults.idcsCanonicalValueSourceResourceType;
    	      this.idcsCompositeKeys = defaults.idcsCompositeKeys;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsCsvColumnHeaderName = defaults.idcsCsvColumnHeaderName;
    	      this.idcsCustomAttribute = defaults.idcsCustomAttribute;
    	      this.idcsDeprecatedSinceReleaseNumber = defaults.idcsDeprecatedSinceReleaseNumber;
    	      this.idcsDeprecatedSinceVersion = defaults.idcsDeprecatedSinceVersion;
    	      this.idcsDisplayName = defaults.idcsDisplayName;
    	      this.idcsDisplayNameMessageId = defaults.idcsDisplayNameMessageId;
    	      this.idcsFetchComplexAttributeValues = defaults.idcsFetchComplexAttributeValues;
    	      this.idcsFromTargetMapper = defaults.idcsFromTargetMapper;
    	      this.idcsFullyQualifiedName = defaults.idcsFullyQualifiedName;
    	      this.idcsGenerated = defaults.idcsGenerated;
    	      this.idcsIcfAttributeType = defaults.idcsIcfAttributeType;
    	      this.idcsIcfBundleAttributeName = defaults.idcsIcfBundleAttributeName;
    	      this.idcsIcfRequired = defaults.idcsIcfRequired;
    	      this.idcsIndirectRefResourceAttributes = defaults.idcsIndirectRefResourceAttributes;
    	      this.idcsInternal = defaults.idcsInternal;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsMaxLength = defaults.idcsMaxLength;
    	      this.idcsMaxValue = defaults.idcsMaxValue;
    	      this.idcsMinLength = defaults.idcsMinLength;
    	      this.idcsMinValue = defaults.idcsMinValue;
    	      this.idcsMultiLanguage = defaults.idcsMultiLanguage;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.idcsRefResourceAttribute = defaults.idcsRefResourceAttribute;
    	      this.idcsRefResourceAttributes = defaults.idcsRefResourceAttributes;
    	      this.idcsSchemaUrn = defaults.idcsSchemaUrn;
    	      this.idcsScimCompliant = defaults.idcsScimCompliant;
    	      this.idcsSearchable = defaults.idcsSearchable;
    	      this.idcsSensitive = defaults.idcsSensitive;
    	      this.idcsTargetAttributeName = defaults.idcsTargetAttributeName;
    	      this.idcsTargetAttributeNameToMigrateFrom = defaults.idcsTargetAttributeNameToMigrateFrom;
    	      this.idcsTargetNormAttributeName = defaults.idcsTargetNormAttributeName;
    	      this.idcsTargetUniqueConstraintName = defaults.idcsTargetUniqueConstraintName;
    	      this.idcsToTargetMapper = defaults.idcsToTargetMapper;
    	      this.idcsTrimStringValue = defaults.idcsTrimStringValue;
    	      this.idcsValidateReference = defaults.idcsValidateReference;
    	      this.idcsValuePersisted = defaults.idcsValuePersisted;
    	      this.metas = defaults.metas;
    	      this.multiValued = defaults.multiValued;
    	      this.mutability = defaults.mutability;
    	      this.name = defaults.name;
    	      this.ocid = defaults.ocid;
    	      this.referenceTypes = defaults.referenceTypes;
    	      this.required = defaults.required;
    	      this.resourceType = defaults.resourceType;
    	      this.returned = defaults.returned;
    	      this.schemas = defaults.schemas;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.type = defaults.type;
    	      this.uniqueness = defaults.uniqueness;
        }

        @CustomType.Setter
        public Builder canonicalValues(List<String> canonicalValues) {
            if (canonicalValues == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "canonicalValues");
            }
            this.canonicalValues = canonicalValues;
            return this;
        }
        public Builder canonicalValues(String... canonicalValues) {
            return canonicalValues(List.of(canonicalValues));
        }
        @CustomType.Setter
        public Builder caseExact(Boolean caseExact) {
            if (caseExact == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "caseExact");
            }
            this.caseExact = caseExact;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder endUserMutability(String endUserMutability) {
            if (endUserMutability == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "endUserMutability");
            }
            this.endUserMutability = endUserMutability;
            return this;
        }
        @CustomType.Setter
        public Builder endUserMutabilityAllowedValues(List<String> endUserMutabilityAllowedValues) {
            if (endUserMutabilityAllowedValues == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "endUserMutabilityAllowedValues");
            }
            this.endUserMutabilityAllowedValues = endUserMutabilityAllowedValues;
            return this;
        }
        public Builder endUserMutabilityAllowedValues(String... endUserMutabilityAllowedValues) {
            return endUserMutabilityAllowedValues(List.of(endUserMutabilityAllowedValues));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAddedSinceReleaseNumber(String idcsAddedSinceReleaseNumber) {
            if (idcsAddedSinceReleaseNumber == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAddedSinceReleaseNumber");
            }
            this.idcsAddedSinceReleaseNumber = idcsAddedSinceReleaseNumber;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAddedSinceVersion(Integer idcsAddedSinceVersion) {
            if (idcsAddedSinceVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAddedSinceVersion");
            }
            this.idcsAddedSinceVersion = idcsAddedSinceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAttributeCacheable(Boolean idcsAttributeCacheable) {
            if (idcsAttributeCacheable == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAttributeCacheable");
            }
            this.idcsAttributeCacheable = idcsAttributeCacheable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAttributeMappable(Boolean idcsAttributeMappable) {
            if (idcsAttributeMappable == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAttributeMappable");
            }
            this.idcsAttributeMappable = idcsAttributeMappable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAuditable(Boolean idcsAuditable) {
            if (idcsAuditable == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAuditable");
            }
            this.idcsAuditable = idcsAuditable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAutoIncrementSeqName(String idcsAutoIncrementSeqName) {
            if (idcsAutoIncrementSeqName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsAutoIncrementSeqName");
            }
            this.idcsAutoIncrementSeqName = idcsAutoIncrementSeqName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCanonicalValueSourceFilter(String idcsCanonicalValueSourceFilter) {
            if (idcsCanonicalValueSourceFilter == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCanonicalValueSourceFilter");
            }
            this.idcsCanonicalValueSourceFilter = idcsCanonicalValueSourceFilter;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCanonicalValueSourceResourceType(String idcsCanonicalValueSourceResourceType) {
            if (idcsCanonicalValueSourceResourceType == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCanonicalValueSourceResourceType");
            }
            this.idcsCanonicalValueSourceResourceType = idcsCanonicalValueSourceResourceType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCompositeKeys(List<String> idcsCompositeKeys) {
            if (idcsCompositeKeys == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCompositeKeys");
            }
            this.idcsCompositeKeys = idcsCompositeKeys;
            return this;
        }
        public Builder idcsCompositeKeys(String... idcsCompositeKeys) {
            return idcsCompositeKeys(List.of(idcsCompositeKeys));
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsCsvColumnHeaderName(String idcsCsvColumnHeaderName) {
            if (idcsCsvColumnHeaderName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCsvColumnHeaderName");
            }
            this.idcsCsvColumnHeaderName = idcsCsvColumnHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCustomAttribute(Boolean idcsCustomAttribute) {
            if (idcsCustomAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsCustomAttribute");
            }
            this.idcsCustomAttribute = idcsCustomAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDeprecatedSinceReleaseNumber(String idcsDeprecatedSinceReleaseNumber) {
            if (idcsDeprecatedSinceReleaseNumber == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsDeprecatedSinceReleaseNumber");
            }
            this.idcsDeprecatedSinceReleaseNumber = idcsDeprecatedSinceReleaseNumber;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDeprecatedSinceVersion(Integer idcsDeprecatedSinceVersion) {
            if (idcsDeprecatedSinceVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsDeprecatedSinceVersion");
            }
            this.idcsDeprecatedSinceVersion = idcsDeprecatedSinceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDisplayName(String idcsDisplayName) {
            if (idcsDisplayName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsDisplayName");
            }
            this.idcsDisplayName = idcsDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDisplayNameMessageId(String idcsDisplayNameMessageId) {
            if (idcsDisplayNameMessageId == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsDisplayNameMessageId");
            }
            this.idcsDisplayNameMessageId = idcsDisplayNameMessageId;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFetchComplexAttributeValues(Boolean idcsFetchComplexAttributeValues) {
            if (idcsFetchComplexAttributeValues == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsFetchComplexAttributeValues");
            }
            this.idcsFetchComplexAttributeValues = idcsFetchComplexAttributeValues;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFromTargetMapper(String idcsFromTargetMapper) {
            if (idcsFromTargetMapper == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsFromTargetMapper");
            }
            this.idcsFromTargetMapper = idcsFromTargetMapper;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFullyQualifiedName(String idcsFullyQualifiedName) {
            if (idcsFullyQualifiedName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsFullyQualifiedName");
            }
            this.idcsFullyQualifiedName = idcsFullyQualifiedName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsGenerated(Boolean idcsGenerated) {
            if (idcsGenerated == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsGenerated");
            }
            this.idcsGenerated = idcsGenerated;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfAttributeType(String idcsIcfAttributeType) {
            if (idcsIcfAttributeType == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsIcfAttributeType");
            }
            this.idcsIcfAttributeType = idcsIcfAttributeType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfBundleAttributeName(String idcsIcfBundleAttributeName) {
            if (idcsIcfBundleAttributeName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsIcfBundleAttributeName");
            }
            this.idcsIcfBundleAttributeName = idcsIcfBundleAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfRequired(Boolean idcsIcfRequired) {
            if (idcsIcfRequired == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsIcfRequired");
            }
            this.idcsIcfRequired = idcsIcfRequired;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIndirectRefResourceAttributes(List<String> idcsIndirectRefResourceAttributes) {
            if (idcsIndirectRefResourceAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsIndirectRefResourceAttributes");
            }
            this.idcsIndirectRefResourceAttributes = idcsIndirectRefResourceAttributes;
            return this;
        }
        public Builder idcsIndirectRefResourceAttributes(String... idcsIndirectRefResourceAttributes) {
            return idcsIndirectRefResourceAttributes(List.of(idcsIndirectRefResourceAttributes));
        }
        @CustomType.Setter
        public Builder idcsInternal(Boolean idcsInternal) {
            if (idcsInternal == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsInternal");
            }
            this.idcsInternal = idcsInternal;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMaxLength(Integer idcsMaxLength) {
            if (idcsMaxLength == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsMaxLength");
            }
            this.idcsMaxLength = idcsMaxLength;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMaxValue(Integer idcsMaxValue) {
            if (idcsMaxValue == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsMaxValue");
            }
            this.idcsMaxValue = idcsMaxValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMinLength(Integer idcsMinLength) {
            if (idcsMinLength == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsMinLength");
            }
            this.idcsMinLength = idcsMinLength;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMinValue(Integer idcsMinValue) {
            if (idcsMinValue == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsMinValue");
            }
            this.idcsMinValue = idcsMinValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMultiLanguage(Boolean idcsMultiLanguage) {
            if (idcsMultiLanguage == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsMultiLanguage");
            }
            this.idcsMultiLanguage = idcsMultiLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder idcsRefResourceAttribute(String idcsRefResourceAttribute) {
            if (idcsRefResourceAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsRefResourceAttribute");
            }
            this.idcsRefResourceAttribute = idcsRefResourceAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder idcsRefResourceAttributes(List<String> idcsRefResourceAttributes) {
            if (idcsRefResourceAttributes == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsRefResourceAttributes");
            }
            this.idcsRefResourceAttributes = idcsRefResourceAttributes;
            return this;
        }
        public Builder idcsRefResourceAttributes(String... idcsRefResourceAttributes) {
            return idcsRefResourceAttributes(List.of(idcsRefResourceAttributes));
        }
        @CustomType.Setter
        public Builder idcsSchemaUrn(String idcsSchemaUrn) {
            if (idcsSchemaUrn == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsSchemaUrn");
            }
            this.idcsSchemaUrn = idcsSchemaUrn;
            return this;
        }
        @CustomType.Setter
        public Builder idcsScimCompliant(Boolean idcsScimCompliant) {
            if (idcsScimCompliant == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsScimCompliant");
            }
            this.idcsScimCompliant = idcsScimCompliant;
            return this;
        }
        @CustomType.Setter
        public Builder idcsSearchable(Boolean idcsSearchable) {
            if (idcsSearchable == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsSearchable");
            }
            this.idcsSearchable = idcsSearchable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsSensitive(String idcsSensitive) {
            if (idcsSensitive == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsSensitive");
            }
            this.idcsSensitive = idcsSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetAttributeName(String idcsTargetAttributeName) {
            if (idcsTargetAttributeName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsTargetAttributeName");
            }
            this.idcsTargetAttributeName = idcsTargetAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetAttributeNameToMigrateFrom(String idcsTargetAttributeNameToMigrateFrom) {
            if (idcsTargetAttributeNameToMigrateFrom == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsTargetAttributeNameToMigrateFrom");
            }
            this.idcsTargetAttributeNameToMigrateFrom = idcsTargetAttributeNameToMigrateFrom;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetNormAttributeName(String idcsTargetNormAttributeName) {
            if (idcsTargetNormAttributeName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsTargetNormAttributeName");
            }
            this.idcsTargetNormAttributeName = idcsTargetNormAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetUniqueConstraintName(String idcsTargetUniqueConstraintName) {
            if (idcsTargetUniqueConstraintName == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsTargetUniqueConstraintName");
            }
            this.idcsTargetUniqueConstraintName = idcsTargetUniqueConstraintName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsToTargetMapper(String idcsToTargetMapper) {
            if (idcsToTargetMapper == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsToTargetMapper");
            }
            this.idcsToTargetMapper = idcsToTargetMapper;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTrimStringValue(Boolean idcsTrimStringValue) {
            if (idcsTrimStringValue == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsTrimStringValue");
            }
            this.idcsTrimStringValue = idcsTrimStringValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsValidateReference(Boolean idcsValidateReference) {
            if (idcsValidateReference == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsValidateReference");
            }
            this.idcsValidateReference = idcsValidateReference;
            return this;
        }
        @CustomType.Setter
        public Builder idcsValuePersisted(Boolean idcsValuePersisted) {
            if (idcsValuePersisted == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "idcsValuePersisted");
            }
            this.idcsValuePersisted = idcsValuePersisted;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder multiValued(Boolean multiValued) {
            if (multiValued == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "multiValued");
            }
            this.multiValued = multiValued;
            return this;
        }
        @CustomType.Setter
        public Builder mutability(String mutability) {
            if (mutability == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "mutability");
            }
            this.mutability = mutability;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder referenceTypes(List<String> referenceTypes) {
            if (referenceTypes == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "referenceTypes");
            }
            this.referenceTypes = referenceTypes;
            return this;
        }
        public Builder referenceTypes(String... referenceTypes) {
            return referenceTypes(List.of(referenceTypes));
        }
        @CustomType.Setter
        public Builder required(Boolean required) {
            if (required == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "required");
            }
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder returned(String returned) {
            if (returned == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "returned");
            }
            this.returned = returned;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueness(String uniqueness) {
            if (uniqueness == null) {
              throw new MissingRequiredPropertyException("GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute", "uniqueness");
            }
            this.uniqueness = uniqueness;
            return this;
        }
        public GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute build() {
            final var _resultValue = new GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute();
            _resultValue.canonicalValues = canonicalValues;
            _resultValue.caseExact = caseExact;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.description = description;
            _resultValue.domainOcid = domainOcid;
            _resultValue.endUserMutability = endUserMutability;
            _resultValue.endUserMutabilityAllowedValues = endUserMutabilityAllowedValues;
            _resultValue.id = id;
            _resultValue.idcsAddedSinceReleaseNumber = idcsAddedSinceReleaseNumber;
            _resultValue.idcsAddedSinceVersion = idcsAddedSinceVersion;
            _resultValue.idcsAttributeCacheable = idcsAttributeCacheable;
            _resultValue.idcsAttributeMappable = idcsAttributeMappable;
            _resultValue.idcsAuditable = idcsAuditable;
            _resultValue.idcsAutoIncrementSeqName = idcsAutoIncrementSeqName;
            _resultValue.idcsCanonicalValueSourceFilter = idcsCanonicalValueSourceFilter;
            _resultValue.idcsCanonicalValueSourceResourceType = idcsCanonicalValueSourceResourceType;
            _resultValue.idcsCompositeKeys = idcsCompositeKeys;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsCsvColumnHeaderName = idcsCsvColumnHeaderName;
            _resultValue.idcsCustomAttribute = idcsCustomAttribute;
            _resultValue.idcsDeprecatedSinceReleaseNumber = idcsDeprecatedSinceReleaseNumber;
            _resultValue.idcsDeprecatedSinceVersion = idcsDeprecatedSinceVersion;
            _resultValue.idcsDisplayName = idcsDisplayName;
            _resultValue.idcsDisplayNameMessageId = idcsDisplayNameMessageId;
            _resultValue.idcsFetchComplexAttributeValues = idcsFetchComplexAttributeValues;
            _resultValue.idcsFromTargetMapper = idcsFromTargetMapper;
            _resultValue.idcsFullyQualifiedName = idcsFullyQualifiedName;
            _resultValue.idcsGenerated = idcsGenerated;
            _resultValue.idcsIcfAttributeType = idcsIcfAttributeType;
            _resultValue.idcsIcfBundleAttributeName = idcsIcfBundleAttributeName;
            _resultValue.idcsIcfRequired = idcsIcfRequired;
            _resultValue.idcsIndirectRefResourceAttributes = idcsIndirectRefResourceAttributes;
            _resultValue.idcsInternal = idcsInternal;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsMaxLength = idcsMaxLength;
            _resultValue.idcsMaxValue = idcsMaxValue;
            _resultValue.idcsMinLength = idcsMinLength;
            _resultValue.idcsMinValue = idcsMinValue;
            _resultValue.idcsMultiLanguage = idcsMultiLanguage;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.idcsRefResourceAttribute = idcsRefResourceAttribute;
            _resultValue.idcsRefResourceAttributes = idcsRefResourceAttributes;
            _resultValue.idcsSchemaUrn = idcsSchemaUrn;
            _resultValue.idcsScimCompliant = idcsScimCompliant;
            _resultValue.idcsSearchable = idcsSearchable;
            _resultValue.idcsSensitive = idcsSensitive;
            _resultValue.idcsTargetAttributeName = idcsTargetAttributeName;
            _resultValue.idcsTargetAttributeNameToMigrateFrom = idcsTargetAttributeNameToMigrateFrom;
            _resultValue.idcsTargetNormAttributeName = idcsTargetNormAttributeName;
            _resultValue.idcsTargetUniqueConstraintName = idcsTargetUniqueConstraintName;
            _resultValue.idcsToTargetMapper = idcsToTargetMapper;
            _resultValue.idcsTrimStringValue = idcsTrimStringValue;
            _resultValue.idcsValidateReference = idcsValidateReference;
            _resultValue.idcsValuePersisted = idcsValuePersisted;
            _resultValue.metas = metas;
            _resultValue.multiValued = multiValued;
            _resultValue.mutability = mutability;
            _resultValue.name = name;
            _resultValue.ocid = ocid;
            _resultValue.referenceTypes = referenceTypes;
            _resultValue.required = required;
            _resultValue.resourceType = resourceType;
            _resultValue.returned = returned;
            _resultValue.schemas = schemas;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.type = type;
            _resultValue.uniqueness = uniqueness;
            return _resultValue;
        }
    }
}
