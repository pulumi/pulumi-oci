// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute {
    /**
     * @return A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \&#34;work\&#34;, \&#34;home\&#34;.
     * 
     */
    private @Nullable List<String> canonicalValues;
    /**
     * @return Specifies if the String attribute is case-sensitive
     * 
     */
    private @Nullable Boolean caseExact;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String compartmentOcid;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private @Nullable Boolean deleteInProgress;
    /**
     * @return The attribute&#39;s human-readable description
     * 
     */
    private @Nullable String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String domainOcid;
    /**
     * @return Specifies User mutability for this attribute
     * 
     */
    private @Nullable String endUserMutability;
    /**
     * @return Specifies the list of User mutabilities allowed
     * 
     */
    private @Nullable List<String> endUserMutabilityAllowedValues;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates that the schema has been added since this release number
     * 
     */
    private @Nullable String idcsAddedSinceReleaseNumber;
    /**
     * @return Indicates that the schema has been added since version
     * 
     */
    private @Nullable Integer idcsAddedSinceVersion;
    /**
     * @return Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \&#34;attributesToGet\&#34; while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
     * 
     */
    private @Nullable Boolean idcsAttributeCacheable;
    /**
     * @return Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
     * 
     */
    private @Nullable Boolean idcsAttributeMappable;
    /**
     * @return Specifies whether changes to this attribute value are audited
     * 
     */
    private @Nullable Boolean idcsAuditable;
    /**
     * @return Sequence tracking ID name for the attribute
     * 
     */
    private @Nullable String idcsAutoIncrementSeqName;
    /**
     * @return Filter to use when getting canonical values for this schema attribute
     * 
     */
    private @Nullable String idcsCanonicalValueSourceFilter;
    /**
     * @return Specifies the Resource type to read from for dynamic canonical values
     * 
     */
    private @Nullable String idcsCanonicalValueSourceResourceType;
    /**
     * @return The set of one or more sub attributes&#39; names of a CMVA, whose values uniquely identify an instance of a CMVA
     * 
     */
    private @Nullable List<String> idcsCompositeKeys;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The attribute defining the CSV column header name for import/export
     * 
     */
    private @Nullable String idcsCsvColumnHeaderName;
    /**
     * @return custom attribute flag.
     * 
     */
    private @Nullable Boolean idcsCustomAttribute;
    /**
     * @return Indicates that the schema has been deprecated since this release number
     * 
     */
    private @Nullable String idcsDeprecatedSinceReleaseNumber;
    /**
     * @return Indicates that the schema has been deprecated since version
     * 
     */
    private @Nullable Integer idcsDeprecatedSinceVersion;
    /**
     * @return Specifies the user-friendly displayable attribute name or catalog key used for localization
     * 
     */
    private @Nullable String idcsDisplayName;
    /**
     * @return Localized schema attribute display name for use by UI client  for displaying attribute labels
     * 
     */
    private @Nullable String idcsDisplayNameMessageId;
    /**
     * @return **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * idcsSearchable: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
     * 
     */
    private @Nullable Boolean idcsFetchComplexAttributeValues;
    /**
     * @return Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
     * 
     */
    private @Nullable String idcsFromTargetMapper;
    /**
     * @return Fully qualified name of this attribute
     * 
     */
    private @Nullable String idcsFullyQualifiedName;
    /**
     * @return Specifies whether this attribute value was generated
     * 
     */
    private @Nullable Boolean idcsGenerated;
    /**
     * @return Maps to ICF data type
     * 
     */
    private @Nullable String idcsIcfAttributeType;
    /**
     * @return Maps to ICF target attribute name
     * 
     */
    private @Nullable String idcsIcfBundleAttributeName;
    /**
     * @return Metadata to identify the ICF required attribute
     * 
     */
    private @Nullable Boolean idcsIcfRequired;
    /**
     * @return Specifies the indirectly referenced Resources
     * 
     */
    private @Nullable List<String> idcsIndirectRefResourceAttributes;
    /**
     * @return Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
     * 
     */
    private @Nullable Boolean idcsInternal;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private @Nullable String idcsLastUpgradedInRelease;
    /**
     * @return Specifies the maximum length of the attribute
     * 
     */
    private @Nullable Integer idcsMaxLength;
    /**
     * @return Specifies the maximum value of the integer attribute
     * 
     */
    private @Nullable Integer idcsMaxValue;
    /**
     * @return Specifies the minimum length of the attribute
     * 
     */
    private @Nullable Integer idcsMinLength;
    /**
     * @return Specifies the minimum value of the integer attribute
     * 
     */
    private @Nullable Integer idcsMinValue;
    /**
     * @return If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
     * 
     */
    private @Nullable Boolean idcsMultiLanguage;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private @Nullable List<String> idcsPreventedOperations;
    /**
     * @return Specifies the referenced Resource attribute
     * 
     */
    private @Nullable String idcsRefResourceAttribute;
    /**
     * @return Specifies the directly referenced Resources
     * 
     */
    private @Nullable List<String> idcsRefResourceAttributes;
    /**
     * @return Schema URN string that this attribute belongs to
     * 
     */
    private @Nullable String idcsSchemaUrn;
    /**
     * @return Indicates if the attribute is scim compliant, default is true
     * 
     */
    private @Nullable Boolean idcsScimCompliant;
    /**
     * @return Specifies whether this attribute can be included in a search filter
     * 
     */
    private @Nullable Boolean idcsSearchable;
    /**
     * @return Flag to specify if the attribute should be encrypted or hashed
     * 
     */
    private @Nullable String idcsSensitive;
    /**
     * @return Target attribute name that this attribute gets mapped to for persistence
     * 
     */
    private @Nullable String idcsTargetAttributeName;
    /**
     * @return Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
     * 
     */
    private @Nullable String idcsTargetAttributeNameToMigrateFrom;
    /**
     * @return Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false &amp; searchable attributes. Do not use by default.
     * 
     */
    private @Nullable String idcsTargetNormAttributeName;
    /**
     * @return Target index name created for this attribute for performance
     * 
     */
    private @Nullable String idcsTargetUniqueConstraintName;
    /**
     * @return Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
     * 
     */
    private @Nullable String idcsToTargetMapper;
    /**
     * @return Trims any leading and trailing blanks from String values. Default is True.
     * 
     */
    private @Nullable Boolean idcsTrimStringValue;
    /**
     * @return Validate payload reference value during create, replace, and update. Default is True.
     * 
     */
    private @Nullable Boolean idcsValidateReference;
    /**
     * @return Specifies whether the value of the Resource attribute is persisted
     * 
     */
    private @Nullable Boolean idcsValuePersisted;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas;
    /**
     * @return Indicates the attribute&#39;s plurality
     * 
     */
    private @Nullable Boolean multiValued;
    /**
     * @return Specifies if the attribute is mutable
     * 
     */
    private @Nullable String mutability;
    /**
     * @return Attribute&#39;s name
     * 
     */
    private @Nullable String name;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private @Nullable String ocid;
    /**
     * @return The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \&#34;reference\&#34; data type.
     * 
     */
    private @Nullable List<String> referenceTypes;
    /**
     * @return Specifies if the attribute is required
     * 
     */
    private @Nullable Boolean required;
    /**
     * @return ResourceType this attribute belongs to.
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
     * 
     */
    private @Nullable String returned;
    /**
     * @return The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
     * 
     */
    private @Nullable List<String> schemas;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String tenancyOcid;
    /**
     * @return The attribute&#39;s data type--for example, String
     * 
     */
    private @Nullable String type;
    /**
     * @return A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \&#34;none\&#34;.
     * 
     */
    private @Nullable String uniqueness;

    private GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute() {}
    /**
     * @return A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \&#34;work\&#34;, \&#34;home\&#34;.
     * 
     */
    public List<String> canonicalValues() {
        return this.canonicalValues == null ? List.of() : this.canonicalValues;
    }
    /**
     * @return Specifies if the String attribute is case-sensitive
     * 
     */
    public Optional<Boolean> caseExact() {
        return Optional.ofNullable(this.caseExact);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Optional<Boolean> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }
    /**
     * @return The attribute&#39;s human-readable description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }
    /**
     * @return Specifies User mutability for this attribute
     * 
     */
    public Optional<String> endUserMutability() {
        return Optional.ofNullable(this.endUserMutability);
    }
    /**
     * @return Specifies the list of User mutabilities allowed
     * 
     */
    public List<String> endUserMutabilityAllowedValues() {
        return this.endUserMutabilityAllowedValues == null ? List.of() : this.endUserMutabilityAllowedValues;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates that the schema has been added since this release number
     * 
     */
    public Optional<String> idcsAddedSinceReleaseNumber() {
        return Optional.ofNullable(this.idcsAddedSinceReleaseNumber);
    }
    /**
     * @return Indicates that the schema has been added since version
     * 
     */
    public Optional<Integer> idcsAddedSinceVersion() {
        return Optional.ofNullable(this.idcsAddedSinceVersion);
    }
    /**
     * @return Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \&#34;attributesToGet\&#34; while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
     * 
     */
    public Optional<Boolean> idcsAttributeCacheable() {
        return Optional.ofNullable(this.idcsAttributeCacheable);
    }
    /**
     * @return Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
     * 
     */
    public Optional<Boolean> idcsAttributeMappable() {
        return Optional.ofNullable(this.idcsAttributeMappable);
    }
    /**
     * @return Specifies whether changes to this attribute value are audited
     * 
     */
    public Optional<Boolean> idcsAuditable() {
        return Optional.ofNullable(this.idcsAuditable);
    }
    /**
     * @return Sequence tracking ID name for the attribute
     * 
     */
    public Optional<String> idcsAutoIncrementSeqName() {
        return Optional.ofNullable(this.idcsAutoIncrementSeqName);
    }
    /**
     * @return Filter to use when getting canonical values for this schema attribute
     * 
     */
    public Optional<String> idcsCanonicalValueSourceFilter() {
        return Optional.ofNullable(this.idcsCanonicalValueSourceFilter);
    }
    /**
     * @return Specifies the Resource type to read from for dynamic canonical values
     * 
     */
    public Optional<String> idcsCanonicalValueSourceResourceType() {
        return Optional.ofNullable(this.idcsCanonicalValueSourceResourceType);
    }
    /**
     * @return The set of one or more sub attributes&#39; names of a CMVA, whose values uniquely identify an instance of a CMVA
     * 
     */
    public List<String> idcsCompositeKeys() {
        return this.idcsCompositeKeys == null ? List.of() : this.idcsCompositeKeys;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies == null ? List.of() : this.idcsCreatedBies;
    }
    /**
     * @return The attribute defining the CSV column header name for import/export
     * 
     */
    public Optional<String> idcsCsvColumnHeaderName() {
        return Optional.ofNullable(this.idcsCsvColumnHeaderName);
    }
    /**
     * @return custom attribute flag.
     * 
     */
    public Optional<Boolean> idcsCustomAttribute() {
        return Optional.ofNullable(this.idcsCustomAttribute);
    }
    /**
     * @return Indicates that the schema has been deprecated since this release number
     * 
     */
    public Optional<String> idcsDeprecatedSinceReleaseNumber() {
        return Optional.ofNullable(this.idcsDeprecatedSinceReleaseNumber);
    }
    /**
     * @return Indicates that the schema has been deprecated since version
     * 
     */
    public Optional<Integer> idcsDeprecatedSinceVersion() {
        return Optional.ofNullable(this.idcsDeprecatedSinceVersion);
    }
    /**
     * @return Specifies the user-friendly displayable attribute name or catalog key used for localization
     * 
     */
    public Optional<String> idcsDisplayName() {
        return Optional.ofNullable(this.idcsDisplayName);
    }
    /**
     * @return Localized schema attribute display name for use by UI client  for displaying attribute labels
     * 
     */
    public Optional<String> idcsDisplayNameMessageId() {
        return Optional.ofNullable(this.idcsDisplayNameMessageId);
    }
    /**
     * @return **SCIM++ Properties:**
     * * caseExact: false
     * * multiValued: false
     * * mutability: readOnly
     * * required: false
     * * idcsSearchable: true
     * * returned: default
     * * type: boolean
     * * uniqueness: none Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
     * 
     */
    public Optional<Boolean> idcsFetchComplexAttributeValues() {
        return Optional.ofNullable(this.idcsFetchComplexAttributeValues);
    }
    /**
     * @return Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
     * 
     */
    public Optional<String> idcsFromTargetMapper() {
        return Optional.ofNullable(this.idcsFromTargetMapper);
    }
    /**
     * @return Fully qualified name of this attribute
     * 
     */
    public Optional<String> idcsFullyQualifiedName() {
        return Optional.ofNullable(this.idcsFullyQualifiedName);
    }
    /**
     * @return Specifies whether this attribute value was generated
     * 
     */
    public Optional<Boolean> idcsGenerated() {
        return Optional.ofNullable(this.idcsGenerated);
    }
    /**
     * @return Maps to ICF data type
     * 
     */
    public Optional<String> idcsIcfAttributeType() {
        return Optional.ofNullable(this.idcsIcfAttributeType);
    }
    /**
     * @return Maps to ICF target attribute name
     * 
     */
    public Optional<String> idcsIcfBundleAttributeName() {
        return Optional.ofNullable(this.idcsIcfBundleAttributeName);
    }
    /**
     * @return Metadata to identify the ICF required attribute
     * 
     */
    public Optional<Boolean> idcsIcfRequired() {
        return Optional.ofNullable(this.idcsIcfRequired);
    }
    /**
     * @return Specifies the indirectly referenced Resources
     * 
     */
    public List<String> idcsIndirectRefResourceAttributes() {
        return this.idcsIndirectRefResourceAttributes == null ? List.of() : this.idcsIndirectRefResourceAttributes;
    }
    /**
     * @return Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
     * 
     */
    public Optional<Boolean> idcsInternal() {
        return Optional.ofNullable(this.idcsInternal);
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies == null ? List.of() : this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public Optional<String> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }
    /**
     * @return Specifies the maximum length of the attribute
     * 
     */
    public Optional<Integer> idcsMaxLength() {
        return Optional.ofNullable(this.idcsMaxLength);
    }
    /**
     * @return Specifies the maximum value of the integer attribute
     * 
     */
    public Optional<Integer> idcsMaxValue() {
        return Optional.ofNullable(this.idcsMaxValue);
    }
    /**
     * @return Specifies the minimum length of the attribute
     * 
     */
    public Optional<Integer> idcsMinLength() {
        return Optional.ofNullable(this.idcsMinLength);
    }
    /**
     * @return Specifies the minimum value of the integer attribute
     * 
     */
    public Optional<Integer> idcsMinValue() {
        return Optional.ofNullable(this.idcsMinValue);
    }
    /**
     * @return If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
     * 
     */
    public Optional<Boolean> idcsMultiLanguage() {
        return Optional.ofNullable(this.idcsMultiLanguage);
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations == null ? List.of() : this.idcsPreventedOperations;
    }
    /**
     * @return Specifies the referenced Resource attribute
     * 
     */
    public Optional<String> idcsRefResourceAttribute() {
        return Optional.ofNullable(this.idcsRefResourceAttribute);
    }
    /**
     * @return Specifies the directly referenced Resources
     * 
     */
    public List<String> idcsRefResourceAttributes() {
        return this.idcsRefResourceAttributes == null ? List.of() : this.idcsRefResourceAttributes;
    }
    /**
     * @return Schema URN string that this attribute belongs to
     * 
     */
    public Optional<String> idcsSchemaUrn() {
        return Optional.ofNullable(this.idcsSchemaUrn);
    }
    /**
     * @return Indicates if the attribute is scim compliant, default is true
     * 
     */
    public Optional<Boolean> idcsScimCompliant() {
        return Optional.ofNullable(this.idcsScimCompliant);
    }
    /**
     * @return Specifies whether this attribute can be included in a search filter
     * 
     */
    public Optional<Boolean> idcsSearchable() {
        return Optional.ofNullable(this.idcsSearchable);
    }
    /**
     * @return Flag to specify if the attribute should be encrypted or hashed
     * 
     */
    public Optional<String> idcsSensitive() {
        return Optional.ofNullable(this.idcsSensitive);
    }
    /**
     * @return Target attribute name that this attribute gets mapped to for persistence
     * 
     */
    public Optional<String> idcsTargetAttributeName() {
        return Optional.ofNullable(this.idcsTargetAttributeName);
    }
    /**
     * @return Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
     * 
     */
    public Optional<String> idcsTargetAttributeNameToMigrateFrom() {
        return Optional.ofNullable(this.idcsTargetAttributeNameToMigrateFrom);
    }
    /**
     * @return Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false &amp; searchable attributes. Do not use by default.
     * 
     */
    public Optional<String> idcsTargetNormAttributeName() {
        return Optional.ofNullable(this.idcsTargetNormAttributeName);
    }
    /**
     * @return Target index name created for this attribute for performance
     * 
     */
    public Optional<String> idcsTargetUniqueConstraintName() {
        return Optional.ofNullable(this.idcsTargetUniqueConstraintName);
    }
    /**
     * @return Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
     * 
     */
    public Optional<String> idcsToTargetMapper() {
        return Optional.ofNullable(this.idcsToTargetMapper);
    }
    /**
     * @return Trims any leading and trailing blanks from String values. Default is True.
     * 
     */
    public Optional<Boolean> idcsTrimStringValue() {
        return Optional.ofNullable(this.idcsTrimStringValue);
    }
    /**
     * @return Validate payload reference value during create, replace, and update. Default is True.
     * 
     */
    public Optional<Boolean> idcsValidateReference() {
        return Optional.ofNullable(this.idcsValidateReference);
    }
    /**
     * @return Specifies whether the value of the Resource attribute is persisted
     * 
     */
    public Optional<Boolean> idcsValuePersisted() {
        return Optional.ofNullable(this.idcsValuePersisted);
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas() {
        return this.metas == null ? List.of() : this.metas;
    }
    /**
     * @return Indicates the attribute&#39;s plurality
     * 
     */
    public Optional<Boolean> multiValued() {
        return Optional.ofNullable(this.multiValued);
    }
    /**
     * @return Specifies if the attribute is mutable
     * 
     */
    public Optional<String> mutability() {
        return Optional.ofNullable(this.mutability);
    }
    /**
     * @return Attribute&#39;s name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    /**
     * @return The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \&#34;reference\&#34; data type.
     * 
     */
    public List<String> referenceTypes() {
        return this.referenceTypes == null ? List.of() : this.referenceTypes;
    }
    /**
     * @return Specifies if the attribute is required
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }
    /**
     * @return ResourceType this attribute belongs to.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
     * 
     */
    public Optional<String> returned() {
        return Optional.ofNullable(this.returned);
    }
    /**
     * @return The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior. REQUIRED.
     * 
     */
    public List<String> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }
    /**
     * @return The attribute&#39;s data type--for example, String
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \&#34;none\&#34;.
     * 
     */
    public Optional<String> uniqueness() {
        return Optional.ofNullable(this.uniqueness);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> canonicalValues;
        private @Nullable Boolean caseExact;
        private @Nullable String compartmentOcid;
        private @Nullable Boolean deleteInProgress;
        private @Nullable String description;
        private @Nullable String domainOcid;
        private @Nullable String endUserMutability;
        private @Nullable List<String> endUserMutabilityAllowedValues;
        private @Nullable String id;
        private @Nullable String idcsAddedSinceReleaseNumber;
        private @Nullable Integer idcsAddedSinceVersion;
        private @Nullable Boolean idcsAttributeCacheable;
        private @Nullable Boolean idcsAttributeMappable;
        private @Nullable Boolean idcsAuditable;
        private @Nullable String idcsAutoIncrementSeqName;
        private @Nullable String idcsCanonicalValueSourceFilter;
        private @Nullable String idcsCanonicalValueSourceResourceType;
        private @Nullable List<String> idcsCompositeKeys;
        private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies;
        private @Nullable String idcsCsvColumnHeaderName;
        private @Nullable Boolean idcsCustomAttribute;
        private @Nullable String idcsDeprecatedSinceReleaseNumber;
        private @Nullable Integer idcsDeprecatedSinceVersion;
        private @Nullable String idcsDisplayName;
        private @Nullable String idcsDisplayNameMessageId;
        private @Nullable Boolean idcsFetchComplexAttributeValues;
        private @Nullable String idcsFromTargetMapper;
        private @Nullable String idcsFullyQualifiedName;
        private @Nullable Boolean idcsGenerated;
        private @Nullable String idcsIcfAttributeType;
        private @Nullable String idcsIcfBundleAttributeName;
        private @Nullable Boolean idcsIcfRequired;
        private @Nullable List<String> idcsIndirectRefResourceAttributes;
        private @Nullable Boolean idcsInternal;
        private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies;
        private @Nullable String idcsLastUpgradedInRelease;
        private @Nullable Integer idcsMaxLength;
        private @Nullable Integer idcsMaxValue;
        private @Nullable Integer idcsMinLength;
        private @Nullable Integer idcsMinValue;
        private @Nullable Boolean idcsMultiLanguage;
        private @Nullable List<String> idcsPreventedOperations;
        private @Nullable String idcsRefResourceAttribute;
        private @Nullable List<String> idcsRefResourceAttributes;
        private @Nullable String idcsSchemaUrn;
        private @Nullable Boolean idcsScimCompliant;
        private @Nullable Boolean idcsSearchable;
        private @Nullable String idcsSensitive;
        private @Nullable String idcsTargetAttributeName;
        private @Nullable String idcsTargetAttributeNameToMigrateFrom;
        private @Nullable String idcsTargetNormAttributeName;
        private @Nullable String idcsTargetUniqueConstraintName;
        private @Nullable String idcsToTargetMapper;
        private @Nullable Boolean idcsTrimStringValue;
        private @Nullable Boolean idcsValidateReference;
        private @Nullable Boolean idcsValuePersisted;
        private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas;
        private @Nullable Boolean multiValued;
        private @Nullable String mutability;
        private @Nullable String name;
        private @Nullable String ocid;
        private @Nullable List<String> referenceTypes;
        private @Nullable Boolean required;
        private @Nullable String resourceType;
        private @Nullable String returned;
        private @Nullable List<String> schemas;
        private @Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags;
        private @Nullable String tenancyOcid;
        private @Nullable String type;
        private @Nullable String uniqueness;
        public Builder() {}
        public Builder(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canonicalValues = defaults.canonicalValues;
    	      this.caseExact = defaults.caseExact;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.endUserMutability = defaults.endUserMutability;
    	      this.endUserMutabilityAllowedValues = defaults.endUserMutabilityAllowedValues;
    	      this.id = defaults.id;
    	      this.idcsAddedSinceReleaseNumber = defaults.idcsAddedSinceReleaseNumber;
    	      this.idcsAddedSinceVersion = defaults.idcsAddedSinceVersion;
    	      this.idcsAttributeCacheable = defaults.idcsAttributeCacheable;
    	      this.idcsAttributeMappable = defaults.idcsAttributeMappable;
    	      this.idcsAuditable = defaults.idcsAuditable;
    	      this.idcsAutoIncrementSeqName = defaults.idcsAutoIncrementSeqName;
    	      this.idcsCanonicalValueSourceFilter = defaults.idcsCanonicalValueSourceFilter;
    	      this.idcsCanonicalValueSourceResourceType = defaults.idcsCanonicalValueSourceResourceType;
    	      this.idcsCompositeKeys = defaults.idcsCompositeKeys;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsCsvColumnHeaderName = defaults.idcsCsvColumnHeaderName;
    	      this.idcsCustomAttribute = defaults.idcsCustomAttribute;
    	      this.idcsDeprecatedSinceReleaseNumber = defaults.idcsDeprecatedSinceReleaseNumber;
    	      this.idcsDeprecatedSinceVersion = defaults.idcsDeprecatedSinceVersion;
    	      this.idcsDisplayName = defaults.idcsDisplayName;
    	      this.idcsDisplayNameMessageId = defaults.idcsDisplayNameMessageId;
    	      this.idcsFetchComplexAttributeValues = defaults.idcsFetchComplexAttributeValues;
    	      this.idcsFromTargetMapper = defaults.idcsFromTargetMapper;
    	      this.idcsFullyQualifiedName = defaults.idcsFullyQualifiedName;
    	      this.idcsGenerated = defaults.idcsGenerated;
    	      this.idcsIcfAttributeType = defaults.idcsIcfAttributeType;
    	      this.idcsIcfBundleAttributeName = defaults.idcsIcfBundleAttributeName;
    	      this.idcsIcfRequired = defaults.idcsIcfRequired;
    	      this.idcsIndirectRefResourceAttributes = defaults.idcsIndirectRefResourceAttributes;
    	      this.idcsInternal = defaults.idcsInternal;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsMaxLength = defaults.idcsMaxLength;
    	      this.idcsMaxValue = defaults.idcsMaxValue;
    	      this.idcsMinLength = defaults.idcsMinLength;
    	      this.idcsMinValue = defaults.idcsMinValue;
    	      this.idcsMultiLanguage = defaults.idcsMultiLanguage;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.idcsRefResourceAttribute = defaults.idcsRefResourceAttribute;
    	      this.idcsRefResourceAttributes = defaults.idcsRefResourceAttributes;
    	      this.idcsSchemaUrn = defaults.idcsSchemaUrn;
    	      this.idcsScimCompliant = defaults.idcsScimCompliant;
    	      this.idcsSearchable = defaults.idcsSearchable;
    	      this.idcsSensitive = defaults.idcsSensitive;
    	      this.idcsTargetAttributeName = defaults.idcsTargetAttributeName;
    	      this.idcsTargetAttributeNameToMigrateFrom = defaults.idcsTargetAttributeNameToMigrateFrom;
    	      this.idcsTargetNormAttributeName = defaults.idcsTargetNormAttributeName;
    	      this.idcsTargetUniqueConstraintName = defaults.idcsTargetUniqueConstraintName;
    	      this.idcsToTargetMapper = defaults.idcsToTargetMapper;
    	      this.idcsTrimStringValue = defaults.idcsTrimStringValue;
    	      this.idcsValidateReference = defaults.idcsValidateReference;
    	      this.idcsValuePersisted = defaults.idcsValuePersisted;
    	      this.metas = defaults.metas;
    	      this.multiValued = defaults.multiValued;
    	      this.mutability = defaults.mutability;
    	      this.name = defaults.name;
    	      this.ocid = defaults.ocid;
    	      this.referenceTypes = defaults.referenceTypes;
    	      this.required = defaults.required;
    	      this.resourceType = defaults.resourceType;
    	      this.returned = defaults.returned;
    	      this.schemas = defaults.schemas;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.type = defaults.type;
    	      this.uniqueness = defaults.uniqueness;
        }

        @CustomType.Setter
        public Builder canonicalValues(@Nullable List<String> canonicalValues) {
            this.canonicalValues = canonicalValues;
            return this;
        }
        public Builder canonicalValues(String... canonicalValues) {
            return canonicalValues(List.of(canonicalValues));
        }
        @CustomType.Setter
        public Builder caseExact(@Nullable Boolean caseExact) {
            this.caseExact = caseExact;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(@Nullable String compartmentOcid) {
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(@Nullable Boolean deleteInProgress) {
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(@Nullable String domainOcid) {
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder endUserMutability(@Nullable String endUserMutability) {
            this.endUserMutability = endUserMutability;
            return this;
        }
        @CustomType.Setter
        public Builder endUserMutabilityAllowedValues(@Nullable List<String> endUserMutabilityAllowedValues) {
            this.endUserMutabilityAllowedValues = endUserMutabilityAllowedValues;
            return this;
        }
        public Builder endUserMutabilityAllowedValues(String... endUserMutabilityAllowedValues) {
            return endUserMutabilityAllowedValues(List.of(endUserMutabilityAllowedValues));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAddedSinceReleaseNumber(@Nullable String idcsAddedSinceReleaseNumber) {
            this.idcsAddedSinceReleaseNumber = idcsAddedSinceReleaseNumber;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAddedSinceVersion(@Nullable Integer idcsAddedSinceVersion) {
            this.idcsAddedSinceVersion = idcsAddedSinceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAttributeCacheable(@Nullable Boolean idcsAttributeCacheable) {
            this.idcsAttributeCacheable = idcsAttributeCacheable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAttributeMappable(@Nullable Boolean idcsAttributeMappable) {
            this.idcsAttributeMappable = idcsAttributeMappable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAuditable(@Nullable Boolean idcsAuditable) {
            this.idcsAuditable = idcsAuditable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAutoIncrementSeqName(@Nullable String idcsAutoIncrementSeqName) {
            this.idcsAutoIncrementSeqName = idcsAutoIncrementSeqName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCanonicalValueSourceFilter(@Nullable String idcsCanonicalValueSourceFilter) {
            this.idcsCanonicalValueSourceFilter = idcsCanonicalValueSourceFilter;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCanonicalValueSourceResourceType(@Nullable String idcsCanonicalValueSourceResourceType) {
            this.idcsCanonicalValueSourceResourceType = idcsCanonicalValueSourceResourceType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCompositeKeys(@Nullable List<String> idcsCompositeKeys) {
            this.idcsCompositeKeys = idcsCompositeKeys;
            return this;
        }
        public Builder idcsCompositeKeys(String... idcsCompositeKeys) {
            return idcsCompositeKeys(List.of(idcsCompositeKeys));
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(@Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsCsvColumnHeaderName(@Nullable String idcsCsvColumnHeaderName) {
            this.idcsCsvColumnHeaderName = idcsCsvColumnHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCustomAttribute(@Nullable Boolean idcsCustomAttribute) {
            this.idcsCustomAttribute = idcsCustomAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDeprecatedSinceReleaseNumber(@Nullable String idcsDeprecatedSinceReleaseNumber) {
            this.idcsDeprecatedSinceReleaseNumber = idcsDeprecatedSinceReleaseNumber;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDeprecatedSinceVersion(@Nullable Integer idcsDeprecatedSinceVersion) {
            this.idcsDeprecatedSinceVersion = idcsDeprecatedSinceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDisplayName(@Nullable String idcsDisplayName) {
            this.idcsDisplayName = idcsDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsDisplayNameMessageId(@Nullable String idcsDisplayNameMessageId) {
            this.idcsDisplayNameMessageId = idcsDisplayNameMessageId;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFetchComplexAttributeValues(@Nullable Boolean idcsFetchComplexAttributeValues) {
            this.idcsFetchComplexAttributeValues = idcsFetchComplexAttributeValues;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFromTargetMapper(@Nullable String idcsFromTargetMapper) {
            this.idcsFromTargetMapper = idcsFromTargetMapper;
            return this;
        }
        @CustomType.Setter
        public Builder idcsFullyQualifiedName(@Nullable String idcsFullyQualifiedName) {
            this.idcsFullyQualifiedName = idcsFullyQualifiedName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsGenerated(@Nullable Boolean idcsGenerated) {
            this.idcsGenerated = idcsGenerated;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfAttributeType(@Nullable String idcsIcfAttributeType) {
            this.idcsIcfAttributeType = idcsIcfAttributeType;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfBundleAttributeName(@Nullable String idcsIcfBundleAttributeName) {
            this.idcsIcfBundleAttributeName = idcsIcfBundleAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIcfRequired(@Nullable Boolean idcsIcfRequired) {
            this.idcsIcfRequired = idcsIcfRequired;
            return this;
        }
        @CustomType.Setter
        public Builder idcsIndirectRefResourceAttributes(@Nullable List<String> idcsIndirectRefResourceAttributes) {
            this.idcsIndirectRefResourceAttributes = idcsIndirectRefResourceAttributes;
            return this;
        }
        public Builder idcsIndirectRefResourceAttributes(String... idcsIndirectRefResourceAttributes) {
            return idcsIndirectRefResourceAttributes(List.of(idcsIndirectRefResourceAttributes));
        }
        @CustomType.Setter
        public Builder idcsInternal(@Nullable Boolean idcsInternal) {
            this.idcsInternal = idcsInternal;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(@Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(@Nullable String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMaxLength(@Nullable Integer idcsMaxLength) {
            this.idcsMaxLength = idcsMaxLength;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMaxValue(@Nullable Integer idcsMaxValue) {
            this.idcsMaxValue = idcsMaxValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMinLength(@Nullable Integer idcsMinLength) {
            this.idcsMinLength = idcsMinLength;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMinValue(@Nullable Integer idcsMinValue) {
            this.idcsMinValue = idcsMinValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsMultiLanguage(@Nullable Boolean idcsMultiLanguage) {
            this.idcsMultiLanguage = idcsMultiLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(@Nullable List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder idcsRefResourceAttribute(@Nullable String idcsRefResourceAttribute) {
            this.idcsRefResourceAttribute = idcsRefResourceAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder idcsRefResourceAttributes(@Nullable List<String> idcsRefResourceAttributes) {
            this.idcsRefResourceAttributes = idcsRefResourceAttributes;
            return this;
        }
        public Builder idcsRefResourceAttributes(String... idcsRefResourceAttributes) {
            return idcsRefResourceAttributes(List.of(idcsRefResourceAttributes));
        }
        @CustomType.Setter
        public Builder idcsSchemaUrn(@Nullable String idcsSchemaUrn) {
            this.idcsSchemaUrn = idcsSchemaUrn;
            return this;
        }
        @CustomType.Setter
        public Builder idcsScimCompliant(@Nullable Boolean idcsScimCompliant) {
            this.idcsScimCompliant = idcsScimCompliant;
            return this;
        }
        @CustomType.Setter
        public Builder idcsSearchable(@Nullable Boolean idcsSearchable) {
            this.idcsSearchable = idcsSearchable;
            return this;
        }
        @CustomType.Setter
        public Builder idcsSensitive(@Nullable String idcsSensitive) {
            this.idcsSensitive = idcsSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetAttributeName(@Nullable String idcsTargetAttributeName) {
            this.idcsTargetAttributeName = idcsTargetAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetAttributeNameToMigrateFrom(@Nullable String idcsTargetAttributeNameToMigrateFrom) {
            this.idcsTargetAttributeNameToMigrateFrom = idcsTargetAttributeNameToMigrateFrom;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetNormAttributeName(@Nullable String idcsTargetNormAttributeName) {
            this.idcsTargetNormAttributeName = idcsTargetNormAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTargetUniqueConstraintName(@Nullable String idcsTargetUniqueConstraintName) {
            this.idcsTargetUniqueConstraintName = idcsTargetUniqueConstraintName;
            return this;
        }
        @CustomType.Setter
        public Builder idcsToTargetMapper(@Nullable String idcsToTargetMapper) {
            this.idcsToTargetMapper = idcsToTargetMapper;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTrimStringValue(@Nullable Boolean idcsTrimStringValue) {
            this.idcsTrimStringValue = idcsTrimStringValue;
            return this;
        }
        @CustomType.Setter
        public Builder idcsValidateReference(@Nullable Boolean idcsValidateReference) {
            this.idcsValidateReference = idcsValidateReference;
            return this;
        }
        @CustomType.Setter
        public Builder idcsValuePersisted(@Nullable Boolean idcsValuePersisted) {
            this.idcsValuePersisted = idcsValuePersisted;
            return this;
        }
        @CustomType.Setter
        public Builder metas(@Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta> metas) {
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder multiValued(@Nullable Boolean multiValued) {
            this.multiValued = multiValued;
            return this;
        }
        @CustomType.Setter
        public Builder mutability(@Nullable String mutability) {
            this.mutability = mutability;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder referenceTypes(@Nullable List<String> referenceTypes) {
            this.referenceTypes = referenceTypes;
            return this;
        }
        public Builder referenceTypes(String... referenceTypes) {
            return referenceTypes(List.of(referenceTypes));
        }
        @CustomType.Setter
        public Builder required(@Nullable Boolean required) {
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder returned(@Nullable String returned) {
            this.returned = returned;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(@Nullable String tenancyOcid) {
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueness(@Nullable String uniqueness) {
            this.uniqueness = uniqueness;
            return this;
        }
        public GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute build() {
            final var o = new GetDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute();
            o.canonicalValues = canonicalValues;
            o.caseExact = caseExact;
            o.compartmentOcid = compartmentOcid;
            o.deleteInProgress = deleteInProgress;
            o.description = description;
            o.domainOcid = domainOcid;
            o.endUserMutability = endUserMutability;
            o.endUserMutabilityAllowedValues = endUserMutabilityAllowedValues;
            o.id = id;
            o.idcsAddedSinceReleaseNumber = idcsAddedSinceReleaseNumber;
            o.idcsAddedSinceVersion = idcsAddedSinceVersion;
            o.idcsAttributeCacheable = idcsAttributeCacheable;
            o.idcsAttributeMappable = idcsAttributeMappable;
            o.idcsAuditable = idcsAuditable;
            o.idcsAutoIncrementSeqName = idcsAutoIncrementSeqName;
            o.idcsCanonicalValueSourceFilter = idcsCanonicalValueSourceFilter;
            o.idcsCanonicalValueSourceResourceType = idcsCanonicalValueSourceResourceType;
            o.idcsCompositeKeys = idcsCompositeKeys;
            o.idcsCreatedBies = idcsCreatedBies;
            o.idcsCsvColumnHeaderName = idcsCsvColumnHeaderName;
            o.idcsCustomAttribute = idcsCustomAttribute;
            o.idcsDeprecatedSinceReleaseNumber = idcsDeprecatedSinceReleaseNumber;
            o.idcsDeprecatedSinceVersion = idcsDeprecatedSinceVersion;
            o.idcsDisplayName = idcsDisplayName;
            o.idcsDisplayNameMessageId = idcsDisplayNameMessageId;
            o.idcsFetchComplexAttributeValues = idcsFetchComplexAttributeValues;
            o.idcsFromTargetMapper = idcsFromTargetMapper;
            o.idcsFullyQualifiedName = idcsFullyQualifiedName;
            o.idcsGenerated = idcsGenerated;
            o.idcsIcfAttributeType = idcsIcfAttributeType;
            o.idcsIcfBundleAttributeName = idcsIcfBundleAttributeName;
            o.idcsIcfRequired = idcsIcfRequired;
            o.idcsIndirectRefResourceAttributes = idcsIndirectRefResourceAttributes;
            o.idcsInternal = idcsInternal;
            o.idcsLastModifiedBies = idcsLastModifiedBies;
            o.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            o.idcsMaxLength = idcsMaxLength;
            o.idcsMaxValue = idcsMaxValue;
            o.idcsMinLength = idcsMinLength;
            o.idcsMinValue = idcsMinValue;
            o.idcsMultiLanguage = idcsMultiLanguage;
            o.idcsPreventedOperations = idcsPreventedOperations;
            o.idcsRefResourceAttribute = idcsRefResourceAttribute;
            o.idcsRefResourceAttributes = idcsRefResourceAttributes;
            o.idcsSchemaUrn = idcsSchemaUrn;
            o.idcsScimCompliant = idcsScimCompliant;
            o.idcsSearchable = idcsSearchable;
            o.idcsSensitive = idcsSensitive;
            o.idcsTargetAttributeName = idcsTargetAttributeName;
            o.idcsTargetAttributeNameToMigrateFrom = idcsTargetAttributeNameToMigrateFrom;
            o.idcsTargetNormAttributeName = idcsTargetNormAttributeName;
            o.idcsTargetUniqueConstraintName = idcsTargetUniqueConstraintName;
            o.idcsToTargetMapper = idcsToTargetMapper;
            o.idcsTrimStringValue = idcsTrimStringValue;
            o.idcsValidateReference = idcsValidateReference;
            o.idcsValuePersisted = idcsValuePersisted;
            o.metas = metas;
            o.multiValued = multiValued;
            o.mutability = mutability;
            o.name = name;
            o.ocid = ocid;
            o.referenceTypes = referenceTypes;
            o.required = required;
            o.resourceType = resourceType;
            o.returned = returned;
            o.schemas = schemas;
            o.tags = tags;
            o.tenancyOcid = tenancyOcid;
            o.type = type;
            o.uniqueness = uniqueness;
            return o;
        }
    }
}
