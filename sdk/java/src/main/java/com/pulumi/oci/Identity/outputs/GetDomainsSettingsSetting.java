// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingCertificateValidation;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingCloudGateCorsSetting;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingCompanyName;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingDefaultCompanyName;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingDefaultImage;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingDefaultLoginText;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingImage;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingLoginText;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingPurgeConfig;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingTag;
import com.pulumi.oci.Identity.outputs.GetDomainsSettingsSettingTenantCustomClaim;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsSettingsSetting {
    /**
     * @return Indicates whether all the Apps in this customer tenancy should trust each other. A value of true overrides the &#39;defaultTrustScope&#39; attribute here in Settings, as well as any App-specific &#39;trustScope&#39; attribute, to force in effect &#39;trustScope=Account&#39; for every App in this customer tenancy.
     * 
     */
    private Boolean accountAlwaysTrustScope;
    /**
     * @return One or more email domains allowed in a user&#39;s email field. If unassigned, any domain is allowed.
     * 
     */
    private List<String> allowedDomains;
    /**
     * @return If specified, indicates the set of Urls which can be returned to after successful forgot password flow
     * 
     */
    private List<String> allowedForgotPasswordFlowReturnUrls;
    /**
     * @return If specified, indicates the set of allowed notification redirect Urls which can be specified as the value of \&#34;notificationRedirectUrl\&#34; in the POST .../admin/v1/MePasswordResetRequestor request payload, which will then be included in the reset password email notification sent to a user as part of the forgot password / password reset flow.
     * 
     */
    private List<String> allowedNotificationRedirectUrls;
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    private List<String> attributeSets;
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    private String attributes;
    /**
     * @return Audit Event retention period. If set, overrides default of 30 days after which Audit Events will be purged
     * 
     */
    private Integer auditEventRetentionPeriod;
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    private String authorization;
    /**
     * @return Certificate Validation Config
     * 
     */
    private List<GetDomainsSettingsSettingCertificateValidation> certificateValidations;
    /**
     * @return The attribute to store the cloud account name
     * 
     */
    private String cloudAccountName;
    /**
     * @return A complex attribute that specifies the Cloud Gate cross origin resource sharing settings.
     * 
     */
    private List<GetDomainsSettingsSettingCloudGateCorsSetting> cloudGateCorsSettings;
    /**
     * @return If specified, indicates the custom SIM Migrator Url which can be used while SIM to Oracle Identity Cloud Service CloudAccount Migration.
     * 
     */
    private String cloudMigrationCustomUrl;
    /**
     * @return CloudAccountMigration: Enable Custom SIM Migrator Url.
     * 
     */
    private Boolean cloudMigrationUrlEnabled;
    /**
     * @return Name of the company in different locales
     * 
     */
    private List<GetDomainsSettingsSettingCompanyName> companyNames;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return Contact emails used to notify tenants. Can be one or more user or group alias emails.
     * 
     */
    private List<String> contactEmails;
    /**
     * @return This value indicates whether Customer Service Representatives can login and have readOnly or readWrite access.  A value of &#39;none&#39; means CSR cannot login to the services.
     * 
     */
    private String csrAccess;
    /**
     * @return Indicates if the branding is default or custom
     * 
     */
    private Boolean customBranding;
    /**
     * @return Storage URL location where the sanitized custom css is located
     * 
     */
    private String customCssLocation;
    /**
     * @return Storage URL location where the sanitized custom html is located
     * 
     */
    private String customHtmlLocation;
    /**
     * @return Custom translations (JSON String)
     * 
     */
    private String customTranslation;
    /**
     * @return Default name of the Company in different locales
     * 
     */
    private List<GetDomainsSettingsSettingDefaultCompanyName> defaultCompanyNames;
    /**
     * @return References to various images
     * 
     */
    private List<GetDomainsSettingsSettingDefaultImage> defaultImages;
    /**
     * @return Default Login text in different locales
     * 
     */
    private List<GetDomainsSettingsSettingDefaultLoginText> defaultLoginTexts;
    /**
     * @return **Deprecated Since: 18.3.6**
     * 
     */
    private String defaultTrustScope;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return The level of diagnostic logging that is currently in effect. A level of 0 (zero) indicates that diagnostic logging is disabled. A level of 1 (one) indicates that diagnostic logging is enabled.
     * 
     */
    private Integer diagnosticLevel;
    /**
     * @return Controls whether DiagnosticRecords for external search-operations (against SCIM resource-types in the Admin service) identify returned resources.  If true, indicates that for each successful external search-operation at least one DiagnosticRecord will include at least one identifier for each matching resource that is returned in that search-response.  If false, no DiagnosticRecord should be expected to identify returned resources for a search-operation.  The default value is false.
     * 
     */
    private Boolean diagnosticRecordForSearchIdentifiesReturnedResources;
    /**
     * @return The end time up to which diagnostic recording is switched on
     * 
     */
    private String diagnosticTracingUpto;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Indicates if Terms of Use is enabled in UI
     * 
     */
    private Boolean enableTermsOfUse;
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    private String externalId;
    /**
     * @return Maximum duration for IAM User Principal Session Token expiry
     * 
     */
    private Integer iamUpstSessionExpiry;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsSettingsSettingIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsSettingsSettingIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return References to various images
     * 
     */
    private List<GetDomainsSettingsSettingImage> images;
    /**
     * @return Indicates if &#39;hosted&#39; option was selected
     * 
     */
    private Boolean isHostedPage;
    /**
     * @return Tenant issuer.
     * 
     */
    private String issuer;
    /**
     * @return Locale
     * 
     */
    private String locale;
    /**
     * @return Login text in different locales
     * 
     */
    private List<GetDomainsSettingsSettingLoginText> loginTexts;
    /**
     * @return Limit the maximum return of CMVA for an App
     * 
     */
    private Integer maxNoOfAppCmvaToReturn;
    /**
     * @return Limit the maximum return of members for an AppRole
     * 
     */
    private Integer maxNoOfAppRoleMembersToReturn;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsSettingsSettingMeta> metas;
    /**
     * @return Database Migration Status
     * 
     */
    private String migrationStatus;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return On-Premises provisioning feature toggle.
     * 
     */
    private Boolean onPremisesProvisioning;
    /**
     * @return Preferred written or spoken language used for localized user interfaces
     * 
     */
    private String preferredLanguage;
    /**
     * @return Previous Tenant issuer. This is an Oracle Identity Cloud Service internal attribute which is not meant to be directly modified by ID Admin. Even if the request body (Settings) contains this attribute, the actual value will be set according to the Oracle Identity Cloud Service internal logic rather than solely based on the value provided in the request payload.
     * 
     */
    private String prevIssuer;
    /**
     * @return Privacy Policy URL
     * 
     */
    private String privacyPolicyUrl;
    /**
     * @return Purge Configs for different Resource Types
     * 
     */
    private List<GetDomainsSettingsSettingPurgeConfig> purgeConfigs;
    /**
     * @return If reAuthWhenChangingMyAuthenticationFactors is true (default), this attribute specifies which re-authentication factor to use. Allowed value is \&#34;password\&#34;.
     * 
     */
    private List<String> reAuthFactors;
    /**
     * @return Specifies whether re-authentication is required or not when a user changes one of their security factors such as password or email. Default is true to ensure more secure behavior.
     * 
     */
    private Boolean reAuthWhenChangingMyAuthenticationFactors;
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    private String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return By default, a service admin can list all users in stripe. If true, a service admin cannot list other users.
     * 
     */
    private Boolean serviceAdminCannotListOtherUsers;
    private String settingId;
    /**
     * @return Indicates if access on SigningCert is allowed to public or not
     * 
     */
    private Boolean signingCertPublicAccess;
    /**
     * @return **Added In:** 20.1.3
     * 
     */
    private String subMappingAttr;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsSettingsSettingTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;
    /**
     * @return Custom claims associated with the specific tenant
     * 
     */
    private List<GetDomainsSettingsSettingTenantCustomClaim> tenantCustomClaims;
    /**
     * @return Terms of Use URL
     * 
     */
    private String termsOfUseUrl;
    /**
     * @return User&#39;s timezone
     * 
     */
    private String timezone;

    private GetDomainsSettingsSetting() {}
    /**
     * @return Indicates whether all the Apps in this customer tenancy should trust each other. A value of true overrides the &#39;defaultTrustScope&#39; attribute here in Settings, as well as any App-specific &#39;trustScope&#39; attribute, to force in effect &#39;trustScope=Account&#39; for every App in this customer tenancy.
     * 
     */
    public Boolean accountAlwaysTrustScope() {
        return this.accountAlwaysTrustScope;
    }
    /**
     * @return One or more email domains allowed in a user&#39;s email field. If unassigned, any domain is allowed.
     * 
     */
    public List<String> allowedDomains() {
        return this.allowedDomains;
    }
    /**
     * @return If specified, indicates the set of Urls which can be returned to after successful forgot password flow
     * 
     */
    public List<String> allowedForgotPasswordFlowReturnUrls() {
        return this.allowedForgotPasswordFlowReturnUrls;
    }
    /**
     * @return If specified, indicates the set of allowed notification redirect Urls which can be specified as the value of \&#34;notificationRedirectUrl\&#34; in the POST .../admin/v1/MePasswordResetRequestor request payload, which will then be included in the reset password email notification sent to a user as part of the forgot password / password reset flow.
     * 
     */
    public List<String> allowedNotificationRedirectUrls() {
        return this.allowedNotificationRedirectUrls;
    }
    /**
     * @return A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If &#39;attributes&#39; query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
     * 
     */
    public List<String> attributeSets() {
        return this.attributeSets;
    }
    /**
     * @return A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
     * 
     */
    public String attributes() {
        return this.attributes;
    }
    /**
     * @return Audit Event retention period. If set, overrides default of 30 days after which Audit Events will be purged
     * 
     */
    public Integer auditEventRetentionPeriod() {
        return this.auditEventRetentionPeriod;
    }
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public String authorization() {
        return this.authorization;
    }
    /**
     * @return Certificate Validation Config
     * 
     */
    public List<GetDomainsSettingsSettingCertificateValidation> certificateValidations() {
        return this.certificateValidations;
    }
    /**
     * @return The attribute to store the cloud account name
     * 
     */
    public String cloudAccountName() {
        return this.cloudAccountName;
    }
    /**
     * @return A complex attribute that specifies the Cloud Gate cross origin resource sharing settings.
     * 
     */
    public List<GetDomainsSettingsSettingCloudGateCorsSetting> cloudGateCorsSettings() {
        return this.cloudGateCorsSettings;
    }
    /**
     * @return If specified, indicates the custom SIM Migrator Url which can be used while SIM to Oracle Identity Cloud Service CloudAccount Migration.
     * 
     */
    public String cloudMigrationCustomUrl() {
        return this.cloudMigrationCustomUrl;
    }
    /**
     * @return CloudAccountMigration: Enable Custom SIM Migrator Url.
     * 
     */
    public Boolean cloudMigrationUrlEnabled() {
        return this.cloudMigrationUrlEnabled;
    }
    /**
     * @return Name of the company in different locales
     * 
     */
    public List<GetDomainsSettingsSettingCompanyName> companyNames() {
        return this.companyNames;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return Contact emails used to notify tenants. Can be one or more user or group alias emails.
     * 
     */
    public List<String> contactEmails() {
        return this.contactEmails;
    }
    /**
     * @return This value indicates whether Customer Service Representatives can login and have readOnly or readWrite access.  A value of &#39;none&#39; means CSR cannot login to the services.
     * 
     */
    public String csrAccess() {
        return this.csrAccess;
    }
    /**
     * @return Indicates if the branding is default or custom
     * 
     */
    public Boolean customBranding() {
        return this.customBranding;
    }
    /**
     * @return Storage URL location where the sanitized custom css is located
     * 
     */
    public String customCssLocation() {
        return this.customCssLocation;
    }
    /**
     * @return Storage URL location where the sanitized custom html is located
     * 
     */
    public String customHtmlLocation() {
        return this.customHtmlLocation;
    }
    /**
     * @return Custom translations (JSON String)
     * 
     */
    public String customTranslation() {
        return this.customTranslation;
    }
    /**
     * @return Default name of the Company in different locales
     * 
     */
    public List<GetDomainsSettingsSettingDefaultCompanyName> defaultCompanyNames() {
        return this.defaultCompanyNames;
    }
    /**
     * @return References to various images
     * 
     */
    public List<GetDomainsSettingsSettingDefaultImage> defaultImages() {
        return this.defaultImages;
    }
    /**
     * @return Default Login text in different locales
     * 
     */
    public List<GetDomainsSettingsSettingDefaultLoginText> defaultLoginTexts() {
        return this.defaultLoginTexts;
    }
    /**
     * @return **Deprecated Since: 18.3.6**
     * 
     */
    public String defaultTrustScope() {
        return this.defaultTrustScope;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return The level of diagnostic logging that is currently in effect. A level of 0 (zero) indicates that diagnostic logging is disabled. A level of 1 (one) indicates that diagnostic logging is enabled.
     * 
     */
    public Integer diagnosticLevel() {
        return this.diagnosticLevel;
    }
    /**
     * @return Controls whether DiagnosticRecords for external search-operations (against SCIM resource-types in the Admin service) identify returned resources.  If true, indicates that for each successful external search-operation at least one DiagnosticRecord will include at least one identifier for each matching resource that is returned in that search-response.  If false, no DiagnosticRecord should be expected to identify returned resources for a search-operation.  The default value is false.
     * 
     */
    public Boolean diagnosticRecordForSearchIdentifiesReturnedResources() {
        return this.diagnosticRecordForSearchIdentifiesReturnedResources;
    }
    /**
     * @return The end time up to which diagnostic recording is switched on
     * 
     */
    public String diagnosticTracingUpto() {
        return this.diagnosticTracingUpto;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Indicates if Terms of Use is enabled in UI
     * 
     */
    public Boolean enableTermsOfUse() {
        return this.enableTermsOfUse;
    }
    /**
     * @return An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer&#39;s tenant.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Maximum duration for IAM User Principal Session Token expiry
     * 
     */
    public Integer iamUpstSessionExpiry() {
        return this.iamUpstSessionExpiry;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsSettingsSettingIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsSettingsSettingIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return References to various images
     * 
     */
    public List<GetDomainsSettingsSettingImage> images() {
        return this.images;
    }
    /**
     * @return Indicates if &#39;hosted&#39; option was selected
     * 
     */
    public Boolean isHostedPage() {
        return this.isHostedPage;
    }
    /**
     * @return Tenant issuer.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Locale
     * 
     */
    public String locale() {
        return this.locale;
    }
    /**
     * @return Login text in different locales
     * 
     */
    public List<GetDomainsSettingsSettingLoginText> loginTexts() {
        return this.loginTexts;
    }
    /**
     * @return Limit the maximum return of CMVA for an App
     * 
     */
    public Integer maxNoOfAppCmvaToReturn() {
        return this.maxNoOfAppCmvaToReturn;
    }
    /**
     * @return Limit the maximum return of members for an AppRole
     * 
     */
    public Integer maxNoOfAppRoleMembersToReturn() {
        return this.maxNoOfAppRoleMembersToReturn;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsSettingsSettingMeta> metas() {
        return this.metas;
    }
    /**
     * @return Database Migration Status
     * 
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return On-Premises provisioning feature toggle.
     * 
     */
    public Boolean onPremisesProvisioning() {
        return this.onPremisesProvisioning;
    }
    /**
     * @return Preferred written or spoken language used for localized user interfaces
     * 
     */
    public String preferredLanguage() {
        return this.preferredLanguage;
    }
    /**
     * @return Previous Tenant issuer. This is an Oracle Identity Cloud Service internal attribute which is not meant to be directly modified by ID Admin. Even if the request body (Settings) contains this attribute, the actual value will be set according to the Oracle Identity Cloud Service internal logic rather than solely based on the value provided in the request payload.
     * 
     */
    public String prevIssuer() {
        return this.prevIssuer;
    }
    /**
     * @return Privacy Policy URL
     * 
     */
    public String privacyPolicyUrl() {
        return this.privacyPolicyUrl;
    }
    /**
     * @return Purge Configs for different Resource Types
     * 
     */
    public List<GetDomainsSettingsSettingPurgeConfig> purgeConfigs() {
        return this.purgeConfigs;
    }
    /**
     * @return If reAuthWhenChangingMyAuthenticationFactors is true (default), this attribute specifies which re-authentication factor to use. Allowed value is \&#34;password\&#34;.
     * 
     */
    public List<String> reAuthFactors() {
        return this.reAuthFactors;
    }
    /**
     * @return Specifies whether re-authentication is required or not when a user changes one of their security factors such as password or email. Default is true to ensure more secure behavior.
     * 
     */
    public Boolean reAuthWhenChangingMyAuthenticationFactors() {
        return this.reAuthWhenChangingMyAuthenticationFactors;
    }
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public String resourceTypeSchemaVersion() {
        return this.resourceTypeSchemaVersion;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return By default, a service admin can list all users in stripe. If true, a service admin cannot list other users.
     * 
     */
    public Boolean serviceAdminCannotListOtherUsers() {
        return this.serviceAdminCannotListOtherUsers;
    }
    public String settingId() {
        return this.settingId;
    }
    /**
     * @return Indicates if access on SigningCert is allowed to public or not
     * 
     */
    public Boolean signingCertPublicAccess() {
        return this.signingCertPublicAccess;
    }
    /**
     * @return **Added In:** 20.1.3
     * 
     */
    public String subMappingAttr() {
        return this.subMappingAttr;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsSettingsSettingTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }
    /**
     * @return Custom claims associated with the specific tenant
     * 
     */
    public List<GetDomainsSettingsSettingTenantCustomClaim> tenantCustomClaims() {
        return this.tenantCustomClaims;
    }
    /**
     * @return Terms of Use URL
     * 
     */
    public String termsOfUseUrl() {
        return this.termsOfUseUrl;
    }
    /**
     * @return User&#39;s timezone
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsSettingsSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accountAlwaysTrustScope;
        private List<String> allowedDomains;
        private List<String> allowedForgotPasswordFlowReturnUrls;
        private List<String> allowedNotificationRedirectUrls;
        private List<String> attributeSets;
        private String attributes;
        private Integer auditEventRetentionPeriod;
        private String authorization;
        private List<GetDomainsSettingsSettingCertificateValidation> certificateValidations;
        private String cloudAccountName;
        private List<GetDomainsSettingsSettingCloudGateCorsSetting> cloudGateCorsSettings;
        private String cloudMigrationCustomUrl;
        private Boolean cloudMigrationUrlEnabled;
        private List<GetDomainsSettingsSettingCompanyName> companyNames;
        private String compartmentOcid;
        private List<String> contactEmails;
        private String csrAccess;
        private Boolean customBranding;
        private String customCssLocation;
        private String customHtmlLocation;
        private String customTranslation;
        private List<GetDomainsSettingsSettingDefaultCompanyName> defaultCompanyNames;
        private List<GetDomainsSettingsSettingDefaultImage> defaultImages;
        private List<GetDomainsSettingsSettingDefaultLoginText> defaultLoginTexts;
        private String defaultTrustScope;
        private Boolean deleteInProgress;
        private Integer diagnosticLevel;
        private Boolean diagnosticRecordForSearchIdentifiesReturnedResources;
        private String diagnosticTracingUpto;
        private String domainOcid;
        private Boolean enableTermsOfUse;
        private String externalId;
        private Integer iamUpstSessionExpiry;
        private String id;
        private List<GetDomainsSettingsSettingIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsSettingsSettingIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private List<GetDomainsSettingsSettingImage> images;
        private Boolean isHostedPage;
        private String issuer;
        private String locale;
        private List<GetDomainsSettingsSettingLoginText> loginTexts;
        private Integer maxNoOfAppCmvaToReturn;
        private Integer maxNoOfAppRoleMembersToReturn;
        private List<GetDomainsSettingsSettingMeta> metas;
        private String migrationStatus;
        private String ocid;
        private Boolean onPremisesProvisioning;
        private String preferredLanguage;
        private String prevIssuer;
        private String privacyPolicyUrl;
        private List<GetDomainsSettingsSettingPurgeConfig> purgeConfigs;
        private List<String> reAuthFactors;
        private Boolean reAuthWhenChangingMyAuthenticationFactors;
        private String resourceTypeSchemaVersion;
        private List<String> schemas;
        private Boolean serviceAdminCannotListOtherUsers;
        private String settingId;
        private Boolean signingCertPublicAccess;
        private String subMappingAttr;
        private List<GetDomainsSettingsSettingTag> tags;
        private String tenancyOcid;
        private List<GetDomainsSettingsSettingTenantCustomClaim> tenantCustomClaims;
        private String termsOfUseUrl;
        private String timezone;
        public Builder() {}
        public Builder(GetDomainsSettingsSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAlwaysTrustScope = defaults.accountAlwaysTrustScope;
    	      this.allowedDomains = defaults.allowedDomains;
    	      this.allowedForgotPasswordFlowReturnUrls = defaults.allowedForgotPasswordFlowReturnUrls;
    	      this.allowedNotificationRedirectUrls = defaults.allowedNotificationRedirectUrls;
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.auditEventRetentionPeriod = defaults.auditEventRetentionPeriod;
    	      this.authorization = defaults.authorization;
    	      this.certificateValidations = defaults.certificateValidations;
    	      this.cloudAccountName = defaults.cloudAccountName;
    	      this.cloudGateCorsSettings = defaults.cloudGateCorsSettings;
    	      this.cloudMigrationCustomUrl = defaults.cloudMigrationCustomUrl;
    	      this.cloudMigrationUrlEnabled = defaults.cloudMigrationUrlEnabled;
    	      this.companyNames = defaults.companyNames;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.contactEmails = defaults.contactEmails;
    	      this.csrAccess = defaults.csrAccess;
    	      this.customBranding = defaults.customBranding;
    	      this.customCssLocation = defaults.customCssLocation;
    	      this.customHtmlLocation = defaults.customHtmlLocation;
    	      this.customTranslation = defaults.customTranslation;
    	      this.defaultCompanyNames = defaults.defaultCompanyNames;
    	      this.defaultImages = defaults.defaultImages;
    	      this.defaultLoginTexts = defaults.defaultLoginTexts;
    	      this.defaultTrustScope = defaults.defaultTrustScope;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.diagnosticLevel = defaults.diagnosticLevel;
    	      this.diagnosticRecordForSearchIdentifiesReturnedResources = defaults.diagnosticRecordForSearchIdentifiesReturnedResources;
    	      this.diagnosticTracingUpto = defaults.diagnosticTracingUpto;
    	      this.domainOcid = defaults.domainOcid;
    	      this.enableTermsOfUse = defaults.enableTermsOfUse;
    	      this.externalId = defaults.externalId;
    	      this.iamUpstSessionExpiry = defaults.iamUpstSessionExpiry;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.images = defaults.images;
    	      this.isHostedPage = defaults.isHostedPage;
    	      this.issuer = defaults.issuer;
    	      this.locale = defaults.locale;
    	      this.loginTexts = defaults.loginTexts;
    	      this.maxNoOfAppCmvaToReturn = defaults.maxNoOfAppCmvaToReturn;
    	      this.maxNoOfAppRoleMembersToReturn = defaults.maxNoOfAppRoleMembersToReturn;
    	      this.metas = defaults.metas;
    	      this.migrationStatus = defaults.migrationStatus;
    	      this.ocid = defaults.ocid;
    	      this.onPremisesProvisioning = defaults.onPremisesProvisioning;
    	      this.preferredLanguage = defaults.preferredLanguage;
    	      this.prevIssuer = defaults.prevIssuer;
    	      this.privacyPolicyUrl = defaults.privacyPolicyUrl;
    	      this.purgeConfigs = defaults.purgeConfigs;
    	      this.reAuthFactors = defaults.reAuthFactors;
    	      this.reAuthWhenChangingMyAuthenticationFactors = defaults.reAuthWhenChangingMyAuthenticationFactors;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.serviceAdminCannotListOtherUsers = defaults.serviceAdminCannotListOtherUsers;
    	      this.settingId = defaults.settingId;
    	      this.signingCertPublicAccess = defaults.signingCertPublicAccess;
    	      this.subMappingAttr = defaults.subMappingAttr;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.tenantCustomClaims = defaults.tenantCustomClaims;
    	      this.termsOfUseUrl = defaults.termsOfUseUrl;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder accountAlwaysTrustScope(Boolean accountAlwaysTrustScope) {
            this.accountAlwaysTrustScope = Objects.requireNonNull(accountAlwaysTrustScope);
            return this;
        }
        @CustomType.Setter
        public Builder allowedDomains(List<String> allowedDomains) {
            this.allowedDomains = Objects.requireNonNull(allowedDomains);
            return this;
        }
        public Builder allowedDomains(String... allowedDomains) {
            return allowedDomains(List.of(allowedDomains));
        }
        @CustomType.Setter
        public Builder allowedForgotPasswordFlowReturnUrls(List<String> allowedForgotPasswordFlowReturnUrls) {
            this.allowedForgotPasswordFlowReturnUrls = Objects.requireNonNull(allowedForgotPasswordFlowReturnUrls);
            return this;
        }
        public Builder allowedForgotPasswordFlowReturnUrls(String... allowedForgotPasswordFlowReturnUrls) {
            return allowedForgotPasswordFlowReturnUrls(List.of(allowedForgotPasswordFlowReturnUrls));
        }
        @CustomType.Setter
        public Builder allowedNotificationRedirectUrls(List<String> allowedNotificationRedirectUrls) {
            this.allowedNotificationRedirectUrls = Objects.requireNonNull(allowedNotificationRedirectUrls);
            return this;
        }
        public Builder allowedNotificationRedirectUrls(String... allowedNotificationRedirectUrls) {
            return allowedNotificationRedirectUrls(List.of(allowedNotificationRedirectUrls));
        }
        @CustomType.Setter
        public Builder attributeSets(List<String> attributeSets) {
            this.attributeSets = Objects.requireNonNull(attributeSets);
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(String attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }
        @CustomType.Setter
        public Builder auditEventRetentionPeriod(Integer auditEventRetentionPeriod) {
            this.auditEventRetentionPeriod = Objects.requireNonNull(auditEventRetentionPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder authorization(String authorization) {
            this.authorization = Objects.requireNonNull(authorization);
            return this;
        }
        @CustomType.Setter
        public Builder certificateValidations(List<GetDomainsSettingsSettingCertificateValidation> certificateValidations) {
            this.certificateValidations = Objects.requireNonNull(certificateValidations);
            return this;
        }
        public Builder certificateValidations(GetDomainsSettingsSettingCertificateValidation... certificateValidations) {
            return certificateValidations(List.of(certificateValidations));
        }
        @CustomType.Setter
        public Builder cloudAccountName(String cloudAccountName) {
            this.cloudAccountName = Objects.requireNonNull(cloudAccountName);
            return this;
        }
        @CustomType.Setter
        public Builder cloudGateCorsSettings(List<GetDomainsSettingsSettingCloudGateCorsSetting> cloudGateCorsSettings) {
            this.cloudGateCorsSettings = Objects.requireNonNull(cloudGateCorsSettings);
            return this;
        }
        public Builder cloudGateCorsSettings(GetDomainsSettingsSettingCloudGateCorsSetting... cloudGateCorsSettings) {
            return cloudGateCorsSettings(List.of(cloudGateCorsSettings));
        }
        @CustomType.Setter
        public Builder cloudMigrationCustomUrl(String cloudMigrationCustomUrl) {
            this.cloudMigrationCustomUrl = Objects.requireNonNull(cloudMigrationCustomUrl);
            return this;
        }
        @CustomType.Setter
        public Builder cloudMigrationUrlEnabled(Boolean cloudMigrationUrlEnabled) {
            this.cloudMigrationUrlEnabled = Objects.requireNonNull(cloudMigrationUrlEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder companyNames(List<GetDomainsSettingsSettingCompanyName> companyNames) {
            this.companyNames = Objects.requireNonNull(companyNames);
            return this;
        }
        public Builder companyNames(GetDomainsSettingsSettingCompanyName... companyNames) {
            return companyNames(List.of(companyNames));
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            this.compartmentOcid = Objects.requireNonNull(compartmentOcid);
            return this;
        }
        @CustomType.Setter
        public Builder contactEmails(List<String> contactEmails) {
            this.contactEmails = Objects.requireNonNull(contactEmails);
            return this;
        }
        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }
        @CustomType.Setter
        public Builder csrAccess(String csrAccess) {
            this.csrAccess = Objects.requireNonNull(csrAccess);
            return this;
        }
        @CustomType.Setter
        public Builder customBranding(Boolean customBranding) {
            this.customBranding = Objects.requireNonNull(customBranding);
            return this;
        }
        @CustomType.Setter
        public Builder customCssLocation(String customCssLocation) {
            this.customCssLocation = Objects.requireNonNull(customCssLocation);
            return this;
        }
        @CustomType.Setter
        public Builder customHtmlLocation(String customHtmlLocation) {
            this.customHtmlLocation = Objects.requireNonNull(customHtmlLocation);
            return this;
        }
        @CustomType.Setter
        public Builder customTranslation(String customTranslation) {
            this.customTranslation = Objects.requireNonNull(customTranslation);
            return this;
        }
        @CustomType.Setter
        public Builder defaultCompanyNames(List<GetDomainsSettingsSettingDefaultCompanyName> defaultCompanyNames) {
            this.defaultCompanyNames = Objects.requireNonNull(defaultCompanyNames);
            return this;
        }
        public Builder defaultCompanyNames(GetDomainsSettingsSettingDefaultCompanyName... defaultCompanyNames) {
            return defaultCompanyNames(List.of(defaultCompanyNames));
        }
        @CustomType.Setter
        public Builder defaultImages(List<GetDomainsSettingsSettingDefaultImage> defaultImages) {
            this.defaultImages = Objects.requireNonNull(defaultImages);
            return this;
        }
        public Builder defaultImages(GetDomainsSettingsSettingDefaultImage... defaultImages) {
            return defaultImages(List.of(defaultImages));
        }
        @CustomType.Setter
        public Builder defaultLoginTexts(List<GetDomainsSettingsSettingDefaultLoginText> defaultLoginTexts) {
            this.defaultLoginTexts = Objects.requireNonNull(defaultLoginTexts);
            return this;
        }
        public Builder defaultLoginTexts(GetDomainsSettingsSettingDefaultLoginText... defaultLoginTexts) {
            return defaultLoginTexts(List.of(defaultLoginTexts));
        }
        @CustomType.Setter
        public Builder defaultTrustScope(String defaultTrustScope) {
            this.defaultTrustScope = Objects.requireNonNull(defaultTrustScope);
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            this.deleteInProgress = Objects.requireNonNull(deleteInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticLevel(Integer diagnosticLevel) {
            this.diagnosticLevel = Objects.requireNonNull(diagnosticLevel);
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticRecordForSearchIdentifiesReturnedResources(Boolean diagnosticRecordForSearchIdentifiesReturnedResources) {
            this.diagnosticRecordForSearchIdentifiesReturnedResources = Objects.requireNonNull(diagnosticRecordForSearchIdentifiesReturnedResources);
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticTracingUpto(String diagnosticTracingUpto) {
            this.diagnosticTracingUpto = Objects.requireNonNull(diagnosticTracingUpto);
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            this.domainOcid = Objects.requireNonNull(domainOcid);
            return this;
        }
        @CustomType.Setter
        public Builder enableTermsOfUse(Boolean enableTermsOfUse) {
            this.enableTermsOfUse = Objects.requireNonNull(enableTermsOfUse);
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder iamUpstSessionExpiry(Integer iamUpstSessionExpiry) {
            this.iamUpstSessionExpiry = Objects.requireNonNull(iamUpstSessionExpiry);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsSettingsSettingIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = Objects.requireNonNull(idcsCreatedBies);
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsSettingsSettingIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsSettingsSettingIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = Objects.requireNonNull(idcsLastModifiedBies);
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsSettingsSettingIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = Objects.requireNonNull(idcsLastUpgradedInRelease);
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = Objects.requireNonNull(idcsPreventedOperations);
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder images(List<GetDomainsSettingsSettingImage> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(GetDomainsSettingsSettingImage... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder isHostedPage(Boolean isHostedPage) {
            this.isHostedPage = Objects.requireNonNull(isHostedPage);
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder locale(String locale) {
            this.locale = Objects.requireNonNull(locale);
            return this;
        }
        @CustomType.Setter
        public Builder loginTexts(List<GetDomainsSettingsSettingLoginText> loginTexts) {
            this.loginTexts = Objects.requireNonNull(loginTexts);
            return this;
        }
        public Builder loginTexts(GetDomainsSettingsSettingLoginText... loginTexts) {
            return loginTexts(List.of(loginTexts));
        }
        @CustomType.Setter
        public Builder maxNoOfAppCmvaToReturn(Integer maxNoOfAppCmvaToReturn) {
            this.maxNoOfAppCmvaToReturn = Objects.requireNonNull(maxNoOfAppCmvaToReturn);
            return this;
        }
        @CustomType.Setter
        public Builder maxNoOfAppRoleMembersToReturn(Integer maxNoOfAppRoleMembersToReturn) {
            this.maxNoOfAppRoleMembersToReturn = Objects.requireNonNull(maxNoOfAppRoleMembersToReturn);
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsSettingsSettingMeta> metas) {
            this.metas = Objects.requireNonNull(metas);
            return this;
        }
        public Builder metas(GetDomainsSettingsSettingMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder migrationStatus(String migrationStatus) {
            this.migrationStatus = Objects.requireNonNull(migrationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            this.ocid = Objects.requireNonNull(ocid);
            return this;
        }
        @CustomType.Setter
        public Builder onPremisesProvisioning(Boolean onPremisesProvisioning) {
            this.onPremisesProvisioning = Objects.requireNonNull(onPremisesProvisioning);
            return this;
        }
        @CustomType.Setter
        public Builder preferredLanguage(String preferredLanguage) {
            this.preferredLanguage = Objects.requireNonNull(preferredLanguage);
            return this;
        }
        @CustomType.Setter
        public Builder prevIssuer(String prevIssuer) {
            this.prevIssuer = Objects.requireNonNull(prevIssuer);
            return this;
        }
        @CustomType.Setter
        public Builder privacyPolicyUrl(String privacyPolicyUrl) {
            this.privacyPolicyUrl = Objects.requireNonNull(privacyPolicyUrl);
            return this;
        }
        @CustomType.Setter
        public Builder purgeConfigs(List<GetDomainsSettingsSettingPurgeConfig> purgeConfigs) {
            this.purgeConfigs = Objects.requireNonNull(purgeConfigs);
            return this;
        }
        public Builder purgeConfigs(GetDomainsSettingsSettingPurgeConfig... purgeConfigs) {
            return purgeConfigs(List.of(purgeConfigs));
        }
        @CustomType.Setter
        public Builder reAuthFactors(List<String> reAuthFactors) {
            this.reAuthFactors = Objects.requireNonNull(reAuthFactors);
            return this;
        }
        public Builder reAuthFactors(String... reAuthFactors) {
            return reAuthFactors(List.of(reAuthFactors));
        }
        @CustomType.Setter
        public Builder reAuthWhenChangingMyAuthenticationFactors(Boolean reAuthWhenChangingMyAuthenticationFactors) {
            this.reAuthWhenChangingMyAuthenticationFactors = Objects.requireNonNull(reAuthWhenChangingMyAuthenticationFactors);
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = Objects.requireNonNull(resourceTypeSchemaVersion);
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder serviceAdminCannotListOtherUsers(Boolean serviceAdminCannotListOtherUsers) {
            this.serviceAdminCannotListOtherUsers = Objects.requireNonNull(serviceAdminCannotListOtherUsers);
            return this;
        }
        @CustomType.Setter
        public Builder settingId(String settingId) {
            this.settingId = Objects.requireNonNull(settingId);
            return this;
        }
        @CustomType.Setter
        public Builder signingCertPublicAccess(Boolean signingCertPublicAccess) {
            this.signingCertPublicAccess = Objects.requireNonNull(signingCertPublicAccess);
            return this;
        }
        @CustomType.Setter
        public Builder subMappingAttr(String subMappingAttr) {
            this.subMappingAttr = Objects.requireNonNull(subMappingAttr);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsSettingsSettingTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDomainsSettingsSettingTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            this.tenancyOcid = Objects.requireNonNull(tenancyOcid);
            return this;
        }
        @CustomType.Setter
        public Builder tenantCustomClaims(List<GetDomainsSettingsSettingTenantCustomClaim> tenantCustomClaims) {
            this.tenantCustomClaims = Objects.requireNonNull(tenantCustomClaims);
            return this;
        }
        public Builder tenantCustomClaims(GetDomainsSettingsSettingTenantCustomClaim... tenantCustomClaims) {
            return tenantCustomClaims(List.of(tenantCustomClaims));
        }
        @CustomType.Setter
        public Builder termsOfUseUrl(String termsOfUseUrl) {
            this.termsOfUseUrl = Objects.requireNonNull(termsOfUseUrl);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        public GetDomainsSettingsSetting build() {
            final var _resultValue = new GetDomainsSettingsSetting();
            _resultValue.accountAlwaysTrustScope = accountAlwaysTrustScope;
            _resultValue.allowedDomains = allowedDomains;
            _resultValue.allowedForgotPasswordFlowReturnUrls = allowedForgotPasswordFlowReturnUrls;
            _resultValue.allowedNotificationRedirectUrls = allowedNotificationRedirectUrls;
            _resultValue.attributeSets = attributeSets;
            _resultValue.attributes = attributes;
            _resultValue.auditEventRetentionPeriod = auditEventRetentionPeriod;
            _resultValue.authorization = authorization;
            _resultValue.certificateValidations = certificateValidations;
            _resultValue.cloudAccountName = cloudAccountName;
            _resultValue.cloudGateCorsSettings = cloudGateCorsSettings;
            _resultValue.cloudMigrationCustomUrl = cloudMigrationCustomUrl;
            _resultValue.cloudMigrationUrlEnabled = cloudMigrationUrlEnabled;
            _resultValue.companyNames = companyNames;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.contactEmails = contactEmails;
            _resultValue.csrAccess = csrAccess;
            _resultValue.customBranding = customBranding;
            _resultValue.customCssLocation = customCssLocation;
            _resultValue.customHtmlLocation = customHtmlLocation;
            _resultValue.customTranslation = customTranslation;
            _resultValue.defaultCompanyNames = defaultCompanyNames;
            _resultValue.defaultImages = defaultImages;
            _resultValue.defaultLoginTexts = defaultLoginTexts;
            _resultValue.defaultTrustScope = defaultTrustScope;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.diagnosticLevel = diagnosticLevel;
            _resultValue.diagnosticRecordForSearchIdentifiesReturnedResources = diagnosticRecordForSearchIdentifiesReturnedResources;
            _resultValue.diagnosticTracingUpto = diagnosticTracingUpto;
            _resultValue.domainOcid = domainOcid;
            _resultValue.enableTermsOfUse = enableTermsOfUse;
            _resultValue.externalId = externalId;
            _resultValue.iamUpstSessionExpiry = iamUpstSessionExpiry;
            _resultValue.id = id;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.images = images;
            _resultValue.isHostedPage = isHostedPage;
            _resultValue.issuer = issuer;
            _resultValue.locale = locale;
            _resultValue.loginTexts = loginTexts;
            _resultValue.maxNoOfAppCmvaToReturn = maxNoOfAppCmvaToReturn;
            _resultValue.maxNoOfAppRoleMembersToReturn = maxNoOfAppRoleMembersToReturn;
            _resultValue.metas = metas;
            _resultValue.migrationStatus = migrationStatus;
            _resultValue.ocid = ocid;
            _resultValue.onPremisesProvisioning = onPremisesProvisioning;
            _resultValue.preferredLanguage = preferredLanguage;
            _resultValue.prevIssuer = prevIssuer;
            _resultValue.privacyPolicyUrl = privacyPolicyUrl;
            _resultValue.purgeConfigs = purgeConfigs;
            _resultValue.reAuthFactors = reAuthFactors;
            _resultValue.reAuthWhenChangingMyAuthenticationFactors = reAuthWhenChangingMyAuthenticationFactors;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.serviceAdminCannotListOtherUsers = serviceAdminCannotListOtherUsers;
            _resultValue.settingId = settingId;
            _resultValue.signingCertPublicAccess = signingCertPublicAccess;
            _resultValue.subMappingAttr = subMappingAttr;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            _resultValue.tenantCustomClaims = tenantCustomClaims;
            _resultValue.termsOfUseUrl = termsOfUseUrl;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
