// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsSettingsSettingCertificateValidation {
    /**
     * @return Use CRL as Fallback.
     * 
     */
    private Boolean crlCheckOnOcspFailureEnabled;
    /**
     * @return CRL is enabled Configuration
     * 
     */
    private Boolean crlEnabled;
    /**
     * @return CRL Location.
     * 
     */
    private String crlLocation;
    /**
     * @return The CRL refresh interval in minutes
     * 
     */
    private Integer crlRefreshInterval;
    /**
     * @return OCSP is enabled Configuration
     * 
     */
    private Boolean ocspEnabled;
    /**
     * @return OCSP Responder URL
     * 
     */
    private String ocspResponderUrl;
    /**
     * @return This setting says, OCSP Responder URL present in the issued certificate must be used. Otherwise, OCSP Responder URL from IDP or Settings.
     * 
     */
    private Boolean ocspSettingsResponderUrlPreferred;
    /**
     * @return OCSP Signing Certificate Alias
     * 
     */
    private String ocspSigningCertificateAlias;
    /**
     * @return The OCSP Timeout duration in minutes
     * 
     */
    private Integer ocspTimeoutDuration;
    /**
     * @return OCSP Accept unknown response status from ocsp responder.
     * 
     */
    private Boolean ocspUnknownResponseStatusAllowed;

    private GetDomainsSettingsSettingCertificateValidation() {}
    /**
     * @return Use CRL as Fallback.
     * 
     */
    public Boolean crlCheckOnOcspFailureEnabled() {
        return this.crlCheckOnOcspFailureEnabled;
    }
    /**
     * @return CRL is enabled Configuration
     * 
     */
    public Boolean crlEnabled() {
        return this.crlEnabled;
    }
    /**
     * @return CRL Location.
     * 
     */
    public String crlLocation() {
        return this.crlLocation;
    }
    /**
     * @return The CRL refresh interval in minutes
     * 
     */
    public Integer crlRefreshInterval() {
        return this.crlRefreshInterval;
    }
    /**
     * @return OCSP is enabled Configuration
     * 
     */
    public Boolean ocspEnabled() {
        return this.ocspEnabled;
    }
    /**
     * @return OCSP Responder URL
     * 
     */
    public String ocspResponderUrl() {
        return this.ocspResponderUrl;
    }
    /**
     * @return This setting says, OCSP Responder URL present in the issued certificate must be used. Otherwise, OCSP Responder URL from IDP or Settings.
     * 
     */
    public Boolean ocspSettingsResponderUrlPreferred() {
        return this.ocspSettingsResponderUrlPreferred;
    }
    /**
     * @return OCSP Signing Certificate Alias
     * 
     */
    public String ocspSigningCertificateAlias() {
        return this.ocspSigningCertificateAlias;
    }
    /**
     * @return The OCSP Timeout duration in minutes
     * 
     */
    public Integer ocspTimeoutDuration() {
        return this.ocspTimeoutDuration;
    }
    /**
     * @return OCSP Accept unknown response status from ocsp responder.
     * 
     */
    public Boolean ocspUnknownResponseStatusAllowed() {
        return this.ocspUnknownResponseStatusAllowed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsSettingsSettingCertificateValidation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean crlCheckOnOcspFailureEnabled;
        private Boolean crlEnabled;
        private String crlLocation;
        private Integer crlRefreshInterval;
        private Boolean ocspEnabled;
        private String ocspResponderUrl;
        private Boolean ocspSettingsResponderUrlPreferred;
        private String ocspSigningCertificateAlias;
        private Integer ocspTimeoutDuration;
        private Boolean ocspUnknownResponseStatusAllowed;
        public Builder() {}
        public Builder(GetDomainsSettingsSettingCertificateValidation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crlCheckOnOcspFailureEnabled = defaults.crlCheckOnOcspFailureEnabled;
    	      this.crlEnabled = defaults.crlEnabled;
    	      this.crlLocation = defaults.crlLocation;
    	      this.crlRefreshInterval = defaults.crlRefreshInterval;
    	      this.ocspEnabled = defaults.ocspEnabled;
    	      this.ocspResponderUrl = defaults.ocspResponderUrl;
    	      this.ocspSettingsResponderUrlPreferred = defaults.ocspSettingsResponderUrlPreferred;
    	      this.ocspSigningCertificateAlias = defaults.ocspSigningCertificateAlias;
    	      this.ocspTimeoutDuration = defaults.ocspTimeoutDuration;
    	      this.ocspUnknownResponseStatusAllowed = defaults.ocspUnknownResponseStatusAllowed;
        }

        @CustomType.Setter
        public Builder crlCheckOnOcspFailureEnabled(Boolean crlCheckOnOcspFailureEnabled) {
            if (crlCheckOnOcspFailureEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "crlCheckOnOcspFailureEnabled");
            }
            this.crlCheckOnOcspFailureEnabled = crlCheckOnOcspFailureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder crlEnabled(Boolean crlEnabled) {
            if (crlEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "crlEnabled");
            }
            this.crlEnabled = crlEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder crlLocation(String crlLocation) {
            if (crlLocation == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "crlLocation");
            }
            this.crlLocation = crlLocation;
            return this;
        }
        @CustomType.Setter
        public Builder crlRefreshInterval(Integer crlRefreshInterval) {
            if (crlRefreshInterval == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "crlRefreshInterval");
            }
            this.crlRefreshInterval = crlRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ocspEnabled(Boolean ocspEnabled) {
            if (ocspEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspEnabled");
            }
            this.ocspEnabled = ocspEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ocspResponderUrl(String ocspResponderUrl) {
            if (ocspResponderUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspResponderUrl");
            }
            this.ocspResponderUrl = ocspResponderUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocspSettingsResponderUrlPreferred(Boolean ocspSettingsResponderUrlPreferred) {
            if (ocspSettingsResponderUrlPreferred == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspSettingsResponderUrlPreferred");
            }
            this.ocspSettingsResponderUrlPreferred = ocspSettingsResponderUrlPreferred;
            return this;
        }
        @CustomType.Setter
        public Builder ocspSigningCertificateAlias(String ocspSigningCertificateAlias) {
            if (ocspSigningCertificateAlias == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspSigningCertificateAlias");
            }
            this.ocspSigningCertificateAlias = ocspSigningCertificateAlias;
            return this;
        }
        @CustomType.Setter
        public Builder ocspTimeoutDuration(Integer ocspTimeoutDuration) {
            if (ocspTimeoutDuration == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspTimeoutDuration");
            }
            this.ocspTimeoutDuration = ocspTimeoutDuration;
            return this;
        }
        @CustomType.Setter
        public Builder ocspUnknownResponseStatusAllowed(Boolean ocspUnknownResponseStatusAllowed) {
            if (ocspUnknownResponseStatusAllowed == null) {
              throw new MissingRequiredPropertyException("GetDomainsSettingsSettingCertificateValidation", "ocspUnknownResponseStatusAllowed");
            }
            this.ocspUnknownResponseStatusAllowed = ocspUnknownResponseStatusAllowed;
            return this;
        }
        public GetDomainsSettingsSettingCertificateValidation build() {
            final var _resultValue = new GetDomainsSettingsSettingCertificateValidation();
            _resultValue.crlCheckOnOcspFailureEnabled = crlCheckOnOcspFailureEnabled;
            _resultValue.crlEnabled = crlEnabled;
            _resultValue.crlLocation = crlLocation;
            _resultValue.crlRefreshInterval = crlRefreshInterval;
            _resultValue.ocspEnabled = ocspEnabled;
            _resultValue.ocspResponderUrl = ocspResponderUrl;
            _resultValue.ocspSettingsResponderUrlPreferred = ocspSettingsResponderUrlPreferred;
            _resultValue.ocspSigningCertificateAlias = ocspSigningCertificateAlias;
            _resultValue.ocspTimeoutDuration = ocspTimeoutDuration;
            _resultValue.ocspUnknownResponseStatusAllowed = ocspUnknownResponseStatusAllowed;
            return _resultValue;
        }
    }
}
