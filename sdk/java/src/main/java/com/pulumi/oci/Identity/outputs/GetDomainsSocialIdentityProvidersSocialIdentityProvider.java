// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping;
import com.pulumi.oci.Identity.outputs.GetDomainsSocialIdentityProvidersSocialIdentityProviderTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsSocialIdentityProvidersSocialIdentityProvider {
    /**
     * @return Social IDP Access token URL
     * 
     */
    private String accessTokenUrl;
    /**
     * @return Whether account linking is enabled
     * 
     */
    private Boolean accountLinkingEnabled;
    /**
     * @return Admin scope to request
     * 
     */
    private List<String> adminScopes;
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    private String authorization;
    /**
     * @return Social IDP Authorization URL
     * 
     */
    private String authzUrl;
    /**
     * @return Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
     * 
     */
    private Boolean autoRedirectEnabled;
    /**
     * @return Whether the client credential is contained in payload
     * 
     */
    private Boolean clientCredentialInPayload;
    /**
     * @return Social IDP allowed clock skew time
     * 
     */
    private Integer clockSkewInSeconds;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private String compartmentOcid;
    /**
     * @return Social IDP Client Application Client ID
     * 
     */
    private String consumerKey;
    /**
     * @return Social IDP Client Application Client Secret
     * 
     */
    private String consumerSecret;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private Boolean deleteInProgress;
    /**
     * @return Social IDP description
     * 
     */
    private String description;
    /**
     * @return Discovery URL
     * 
     */
    private String discoveryUrl;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private String domainOcid;
    /**
     * @return Whether the IDP is enabled or not
     * 
     */
    private Boolean enabled;
    /**
     * @return ICON URL for social idp
     * 
     */
    private String iconUrl;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private String id;
    /**
     * @return Id attribute used for account linking
     * 
     */
    private String idAttribute;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy> idcsCreatedBies;
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private List<String> idcsPreventedOperations;
    /**
     * @return Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups;
    /**
     * @return Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    private Boolean jitProvGroupStaticListEnabled;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta> metas;
    /**
     * @return Social provider name
     * 
     */
    private String name;
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    private String ocid;
    /**
     * @return Social IDP User profile URL
     * 
     */
    private String profileUrl;
    /**
     * @return redirect URL for social idp
     * 
     */
    private String redirectUrl;
    /**
     * @return Social IDP Refresh token URL
     * 
     */
    private String refreshTokenUrl;
    /**
     * @return Whether registration is enabled
     * 
     */
    private Boolean registrationEnabled;
    /**
     * @return Relay Param variable for Social IDP
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping> relayIdpParamMappings;
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    private String resourceTypeSchemaVersion;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private List<String> schemas;
    /**
     * @return Scope to request
     * 
     */
    private List<String> scopes;
    /**
     * @return Service Provider Name
     * 
     */
    private String serviceProviderName;
    /**
     * @return Whether show on login
     * 
     */
    private Boolean showOnLogin;
    /**
     * @return Whether Social JIT Provisioning is enabled
     * 
     */
    private Boolean socialJitProvisioningEnabled;
    /**
     * @return Status
     * 
     */
    private String status;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private String tenancyOcid;

    private GetDomainsSocialIdentityProvidersSocialIdentityProvider() {}
    /**
     * @return Social IDP Access token URL
     * 
     */
    public String accessTokenUrl() {
        return this.accessTokenUrl;
    }
    /**
     * @return Whether account linking is enabled
     * 
     */
    public Boolean accountLinkingEnabled() {
        return this.accountLinkingEnabled;
    }
    /**
     * @return Admin scope to request
     * 
     */
    public List<String> adminScopes() {
        return this.adminScopes;
    }
    /**
     * @return The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
     * 
     */
    public String authorization() {
        return this.authorization;
    }
    /**
     * @return Social IDP Authorization URL
     * 
     */
    public String authzUrl() {
        return this.authzUrl;
    }
    /**
     * @return Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
     * 
     */
    public Boolean autoRedirectEnabled() {
        return this.autoRedirectEnabled;
    }
    /**
     * @return Whether the client credential is contained in payload
     * 
     */
    public Boolean clientCredentialInPayload() {
        return this.clientCredentialInPayload;
    }
    /**
     * @return Social IDP allowed clock skew time
     * 
     */
    public Integer clockSkewInSeconds() {
        return this.clockSkewInSeconds;
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public String compartmentOcid() {
        return this.compartmentOcid;
    }
    /**
     * @return Social IDP Client Application Client ID
     * 
     */
    public String consumerKey() {
        return this.consumerKey;
    }
    /**
     * @return Social IDP Client Application Client Secret
     * 
     */
    public String consumerSecret() {
        return this.consumerSecret;
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Boolean deleteInProgress() {
        return this.deleteInProgress;
    }
    /**
     * @return Social IDP description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Discovery URL
     * 
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return Whether the IDP is enabled or not
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return ICON URL for social idp
     * 
     */
    public String iconUrl() {
        return this.iconUrl;
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Id attribute used for account linking
     * 
     */
    public String idAttribute() {
        return this.idAttribute;
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies;
    }
    /**
     * @return The basic endpoint for the identity domain
     * 
     */
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public String idcsLastUpgradedInRelease() {
        return this.idcsLastUpgradedInRelease;
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations;
    }
    /**
     * @return Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups() {
        return this.jitProvAssignedGroups;
    }
    /**
     * @return Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
     * 
     */
    public Boolean jitProvGroupStaticListEnabled() {
        return this.jitProvGroupStaticListEnabled;
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta> metas() {
        return this.metas;
    }
    /**
     * @return Social provider name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Social IDP User profile URL
     * 
     */
    public String profileUrl() {
        return this.profileUrl;
    }
    /**
     * @return redirect URL for social idp
     * 
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * @return Social IDP Refresh token URL
     * 
     */
    public String refreshTokenUrl() {
        return this.refreshTokenUrl;
    }
    /**
     * @return Whether registration is enabled
     * 
     */
    public Boolean registrationEnabled() {
        return this.registrationEnabled;
    }
    /**
     * @return Relay Param variable for Social IDP
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping> relayIdpParamMappings() {
        return this.relayIdpParamMappings;
    }
    /**
     * @return An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
     * 
     */
    public String resourceTypeSchemaVersion() {
        return this.resourceTypeSchemaVersion;
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas;
    }
    /**
     * @return Scope to request
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Service Provider Name
     * 
     */
    public String serviceProviderName() {
        return this.serviceProviderName;
    }
    /**
     * @return Whether show on login
     * 
     */
    public Boolean showOnLogin() {
        return this.showOnLogin;
    }
    /**
     * @return Whether Social JIT Provisioning is enabled
     * 
     */
    public Boolean socialJitProvisioningEnabled() {
        return this.socialJitProvisioningEnabled;
    }
    /**
     * @return Status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsSocialIdentityProvidersSocialIdentityProviderTag> tags() {
        return this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public String tenancyOcid() {
        return this.tenancyOcid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsSocialIdentityProvidersSocialIdentityProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTokenUrl;
        private Boolean accountLinkingEnabled;
        private List<String> adminScopes;
        private String authorization;
        private String authzUrl;
        private Boolean autoRedirectEnabled;
        private Boolean clientCredentialInPayload;
        private Integer clockSkewInSeconds;
        private String compartmentOcid;
        private String consumerKey;
        private String consumerSecret;
        private Boolean deleteInProgress;
        private String description;
        private String discoveryUrl;
        private String domainOcid;
        private Boolean enabled;
        private String iconUrl;
        private String id;
        private String idAttribute;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies;
        private String idcsLastUpgradedInRelease;
        private List<String> idcsPreventedOperations;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups;
        private Boolean jitProvGroupStaticListEnabled;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta> metas;
        private String name;
        private String ocid;
        private String profileUrl;
        private String redirectUrl;
        private String refreshTokenUrl;
        private Boolean registrationEnabled;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping> relayIdpParamMappings;
        private String resourceTypeSchemaVersion;
        private List<String> schemas;
        private List<String> scopes;
        private String serviceProviderName;
        private Boolean showOnLogin;
        private Boolean socialJitProvisioningEnabled;
        private String status;
        private List<GetDomainsSocialIdentityProvidersSocialIdentityProviderTag> tags;
        private String tenancyOcid;
        public Builder() {}
        public Builder(GetDomainsSocialIdentityProvidersSocialIdentityProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenUrl = defaults.accessTokenUrl;
    	      this.accountLinkingEnabled = defaults.accountLinkingEnabled;
    	      this.adminScopes = defaults.adminScopes;
    	      this.authorization = defaults.authorization;
    	      this.authzUrl = defaults.authzUrl;
    	      this.autoRedirectEnabled = defaults.autoRedirectEnabled;
    	      this.clientCredentialInPayload = defaults.clientCredentialInPayload;
    	      this.clockSkewInSeconds = defaults.clockSkewInSeconds;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.consumerKey = defaults.consumerKey;
    	      this.consumerSecret = defaults.consumerSecret;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.discoveryUrl = defaults.discoveryUrl;
    	      this.domainOcid = defaults.domainOcid;
    	      this.enabled = defaults.enabled;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.idAttribute = defaults.idAttribute;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.jitProvAssignedGroups = defaults.jitProvAssignedGroups;
    	      this.jitProvGroupStaticListEnabled = defaults.jitProvGroupStaticListEnabled;
    	      this.metas = defaults.metas;
    	      this.name = defaults.name;
    	      this.ocid = defaults.ocid;
    	      this.profileUrl = defaults.profileUrl;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.refreshTokenUrl = defaults.refreshTokenUrl;
    	      this.registrationEnabled = defaults.registrationEnabled;
    	      this.relayIdpParamMappings = defaults.relayIdpParamMappings;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.schemas = defaults.schemas;
    	      this.scopes = defaults.scopes;
    	      this.serviceProviderName = defaults.serviceProviderName;
    	      this.showOnLogin = defaults.showOnLogin;
    	      this.socialJitProvisioningEnabled = defaults.socialJitProvisioningEnabled;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
        }

        @CustomType.Setter
        public Builder accessTokenUrl(String accessTokenUrl) {
            if (accessTokenUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "accessTokenUrl");
            }
            this.accessTokenUrl = accessTokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder accountLinkingEnabled(Boolean accountLinkingEnabled) {
            if (accountLinkingEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "accountLinkingEnabled");
            }
            this.accountLinkingEnabled = accountLinkingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder adminScopes(List<String> adminScopes) {
            if (adminScopes == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "adminScopes");
            }
            this.adminScopes = adminScopes;
            return this;
        }
        public Builder adminScopes(String... adminScopes) {
            return adminScopes(List.of(adminScopes));
        }
        @CustomType.Setter
        public Builder authorization(String authorization) {
            if (authorization == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "authorization");
            }
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder authzUrl(String authzUrl) {
            if (authzUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "authzUrl");
            }
            this.authzUrl = authzUrl;
            return this;
        }
        @CustomType.Setter
        public Builder autoRedirectEnabled(Boolean autoRedirectEnabled) {
            if (autoRedirectEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "autoRedirectEnabled");
            }
            this.autoRedirectEnabled = autoRedirectEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientCredentialInPayload(Boolean clientCredentialInPayload) {
            if (clientCredentialInPayload == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "clientCredentialInPayload");
            }
            this.clientCredentialInPayload = clientCredentialInPayload;
            return this;
        }
        @CustomType.Setter
        public Builder clockSkewInSeconds(Integer clockSkewInSeconds) {
            if (clockSkewInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "clockSkewInSeconds");
            }
            this.clockSkewInSeconds = clockSkewInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(String compartmentOcid) {
            if (compartmentOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "compartmentOcid");
            }
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder consumerKey(String consumerKey) {
            if (consumerKey == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "consumerKey");
            }
            this.consumerKey = consumerKey;
            return this;
        }
        @CustomType.Setter
        public Builder consumerSecret(String consumerSecret) {
            if (consumerSecret == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "consumerSecret");
            }
            this.consumerSecret = consumerSecret;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(Boolean deleteInProgress) {
            if (deleteInProgress == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "deleteInProgress");
            }
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryUrl(String discoveryUrl) {
            if (discoveryUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "discoveryUrl");
            }
            this.discoveryUrl = discoveryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            if (iconUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "iconUrl");
            }
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idAttribute(String idAttribute) {
            if (idAttribute == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idAttribute");
            }
            this.idAttribute = idAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy> idcsCreatedBies) {
            if (idcsCreatedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idcsCreatedBies");
            }
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            if (idcsEndpoint == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idcsEndpoint");
            }
            this.idcsEndpoint = idcsEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy> idcsLastModifiedBies) {
            if (idcsLastModifiedBies == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idcsLastModifiedBies");
            }
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(String idcsLastUpgradedInRelease) {
            if (idcsLastUpgradedInRelease == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idcsLastUpgradedInRelease");
            }
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(List<String> idcsPreventedOperations) {
            if (idcsPreventedOperations == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "idcsPreventedOperations");
            }
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder jitProvAssignedGroups(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup> jitProvAssignedGroups) {
            if (jitProvAssignedGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "jitProvAssignedGroups");
            }
            this.jitProvAssignedGroups = jitProvAssignedGroups;
            return this;
        }
        public Builder jitProvAssignedGroups(GetDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup... jitProvAssignedGroups) {
            return jitProvAssignedGroups(List.of(jitProvAssignedGroups));
        }
        @CustomType.Setter
        public Builder jitProvGroupStaticListEnabled(Boolean jitProvGroupStaticListEnabled) {
            if (jitProvGroupStaticListEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "jitProvGroupStaticListEnabled");
            }
            this.jitProvGroupStaticListEnabled = jitProvGroupStaticListEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder metas(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta> metas) {
            if (metas == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "metas");
            }
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsSocialIdentityProvidersSocialIdentityProviderMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder profileUrl(String profileUrl) {
            if (profileUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "profileUrl");
            }
            this.profileUrl = profileUrl;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            if (redirectUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "redirectUrl");
            }
            this.redirectUrl = redirectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenUrl(String refreshTokenUrl) {
            if (refreshTokenUrl == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "refreshTokenUrl");
            }
            this.refreshTokenUrl = refreshTokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder registrationEnabled(Boolean registrationEnabled) {
            if (registrationEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "registrationEnabled");
            }
            this.registrationEnabled = registrationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder relayIdpParamMappings(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping> relayIdpParamMappings) {
            if (relayIdpParamMappings == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "relayIdpParamMappings");
            }
            this.relayIdpParamMappings = relayIdpParamMappings;
            return this;
        }
        public Builder relayIdpParamMappings(GetDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping... relayIdpParamMappings) {
            return relayIdpParamMappings(List.of(relayIdpParamMappings));
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(String resourceTypeSchemaVersion) {
            if (resourceTypeSchemaVersion == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "resourceTypeSchemaVersion");
            }
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(List<String> schemas) {
            if (schemas == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "schemas");
            }
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder serviceProviderName(String serviceProviderName) {
            if (serviceProviderName == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "serviceProviderName");
            }
            this.serviceProviderName = serviceProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder showOnLogin(Boolean showOnLogin) {
            if (showOnLogin == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "showOnLogin");
            }
            this.showOnLogin = showOnLogin;
            return this;
        }
        @CustomType.Setter
        public Builder socialJitProvisioningEnabled(Boolean socialJitProvisioningEnabled) {
            if (socialJitProvisioningEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "socialJitProvisioningEnabled");
            }
            this.socialJitProvisioningEnabled = socialJitProvisioningEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDomainsSocialIdentityProvidersSocialIdentityProviderTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsSocialIdentityProvidersSocialIdentityProviderTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(String tenancyOcid) {
            if (tenancyOcid == null) {
              throw new MissingRequiredPropertyException("GetDomainsSocialIdentityProvidersSocialIdentityProvider", "tenancyOcid");
            }
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        public GetDomainsSocialIdentityProvidersSocialIdentityProvider build() {
            final var _resultValue = new GetDomainsSocialIdentityProvidersSocialIdentityProvider();
            _resultValue.accessTokenUrl = accessTokenUrl;
            _resultValue.accountLinkingEnabled = accountLinkingEnabled;
            _resultValue.adminScopes = adminScopes;
            _resultValue.authorization = authorization;
            _resultValue.authzUrl = authzUrl;
            _resultValue.autoRedirectEnabled = autoRedirectEnabled;
            _resultValue.clientCredentialInPayload = clientCredentialInPayload;
            _resultValue.clockSkewInSeconds = clockSkewInSeconds;
            _resultValue.compartmentOcid = compartmentOcid;
            _resultValue.consumerKey = consumerKey;
            _resultValue.consumerSecret = consumerSecret;
            _resultValue.deleteInProgress = deleteInProgress;
            _resultValue.description = description;
            _resultValue.discoveryUrl = discoveryUrl;
            _resultValue.domainOcid = domainOcid;
            _resultValue.enabled = enabled;
            _resultValue.iconUrl = iconUrl;
            _resultValue.id = id;
            _resultValue.idAttribute = idAttribute;
            _resultValue.idcsCreatedBies = idcsCreatedBies;
            _resultValue.idcsEndpoint = idcsEndpoint;
            _resultValue.idcsLastModifiedBies = idcsLastModifiedBies;
            _resultValue.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            _resultValue.idcsPreventedOperations = idcsPreventedOperations;
            _resultValue.jitProvAssignedGroups = jitProvAssignedGroups;
            _resultValue.jitProvGroupStaticListEnabled = jitProvGroupStaticListEnabled;
            _resultValue.metas = metas;
            _resultValue.name = name;
            _resultValue.ocid = ocid;
            _resultValue.profileUrl = profileUrl;
            _resultValue.redirectUrl = redirectUrl;
            _resultValue.refreshTokenUrl = refreshTokenUrl;
            _resultValue.registrationEnabled = registrationEnabled;
            _resultValue.relayIdpParamMappings = relayIdpParamMappings;
            _resultValue.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            _resultValue.schemas = schemas;
            _resultValue.scopes = scopes;
            _resultValue.serviceProviderName = serviceProviderName;
            _resultValue.showOnLogin = showOnLogin;
            _resultValue.socialJitProvisioningEnabled = socialJitProvisioningEnabled;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.tenancyOcid = tenancyOcid;
            return _resultValue;
        }
    }
}
