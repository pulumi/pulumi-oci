// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsUserAddress {
    /**
     * @return The country name component.
     * 
     */
    private String country;
    /**
     * @return Full name
     * 
     */
    private String formatted;
    /**
     * @return The city or locality component.
     * 
     */
    private String locality;
    /**
     * @return The zipcode or postal code component.
     * 
     */
    private String postalCode;
    /**
     * @return A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     */
    private Boolean primary;
    /**
     * @return The state or region component.
     * 
     */
    private String region;
    /**
     * @return The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     */
    private String streetAddress;
    /**
     * @return A label indicating the attribute&#39;s function.
     * 
     */
    private String type;

    private GetDomainsUserAddress() {}
    /**
     * @return The country name component.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return Full name
     * 
     */
    public String formatted() {
        return this.formatted;
    }
    /**
     * @return The city or locality component.
     * 
     */
    public String locality() {
        return this.locality;
    }
    /**
     * @return The zipcode or postal code component.
     * 
     */
    public String postalCode() {
        return this.postalCode;
    }
    /**
     * @return A Boolean value indicating the &#39;primary&#39; or preferred attribute value for this attribute. The primary attribute value &#39;true&#39; MUST appear no more than once.
     * 
     */
    public Boolean primary() {
        return this.primary;
    }
    /**
     * @return The state or region component.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The full street address component, which may include house number, street name, PO BOX, and multi-line extended street address information. This attribute MAY contain newlines.
     * 
     */
    public String streetAddress() {
        return this.streetAddress;
    }
    /**
     * @return A label indicating the attribute&#39;s function.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUserAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String country;
        private String formatted;
        private String locality;
        private String postalCode;
        private Boolean primary;
        private String region;
        private String streetAddress;
        private String type;
        public Builder() {}
        public Builder(GetDomainsUserAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.country = defaults.country;
    	      this.formatted = defaults.formatted;
    	      this.locality = defaults.locality;
    	      this.postalCode = defaults.postalCode;
    	      this.primary = defaults.primary;
    	      this.region = defaults.region;
    	      this.streetAddress = defaults.streetAddress;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder formatted(String formatted) {
            if (formatted == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "formatted");
            }
            this.formatted = formatted;
            return this;
        }
        @CustomType.Setter
        public Builder locality(String locality) {
            if (locality == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "locality");
            }
            this.locality = locality;
            return this;
        }
        @CustomType.Setter
        public Builder postalCode(String postalCode) {
            if (postalCode == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "postalCode");
            }
            this.postalCode = postalCode;
            return this;
        }
        @CustomType.Setter
        public Builder primary(Boolean primary) {
            if (primary == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "primary");
            }
            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder streetAddress(String streetAddress) {
            if (streetAddress == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "streetAddress");
            }
            this.streetAddress = streetAddress;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserAddress", "type");
            }
            this.type = type;
            return this;
        }
        public GetDomainsUserAddress build() {
            final var _resultValue = new GetDomainsUserAddress();
            _resultValue.country = country;
            _resultValue.formatted = formatted;
            _resultValue.locality = locality;
            _resultValue.postalCode = postalCode;
            _resultValue.primary = primary;
            _resultValue.region = region;
            _resultValue.streetAddress = streetAddress;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
