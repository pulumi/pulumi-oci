// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialIdcsCreatedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialIdcsLastModifiedBy;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialMeta;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialTag;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser;
import com.pulumi.oci.Identity.outputs.GetDomainsUserDbCredentialUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsUserDbCredentialResult {
    private @Nullable List<String> attributeSets;
    private @Nullable String attributes;
    private @Nullable String authorization;
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String compartmentOcid;
    /**
     * @return The user&#39;s database password.
     * 
     */
    private @Nullable String dbPassword;
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    private @Nullable Boolean deleteInProgress;
    /**
     * @return Description
     * 
     */
    private @Nullable String description;
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String domainOcid;
    /**
     * @return Indicates that the database password has expired.
     * 
     */
    private @Nullable Boolean expired;
    /**
     * @return When the user credential expires.
     * 
     */
    private @Nullable String expiresOn;
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    private @Nullable String id;
    /**
     * @return The User or App who created the Resource
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialIdcsCreatedBy> idcsCreatedBies;
    private String idcsEndpoint;
    /**
     * @return The User or App who modified the Resource
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialIdcsLastModifiedBy> idcsLastModifiedBies;
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    private @Nullable String idcsLastUpgradedInRelease;
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    private @Nullable List<String> idcsPreventedOperations;
    /**
     * @return A DateTime that specifies the date and time when the current database password was set.
     * 
     */
    private @Nullable String lastSetDate;
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialMeta> metas;
    /**
     * @return The user&#39;s database password with mixed salt.
     * 
     */
    private @Nullable String mixedDbPassword;
    /**
     * @return The mixed salt of the password.
     * 
     */
    private @Nullable String mixedSalt;
    /**
     * @return The username.
     * 
     */
    private @Nullable String name;
    /**
     * @return The user&#39;s OCID.
     * 
     */
    private @Nullable String ocid;
    private @Nullable String resourceTypeSchemaVersion;
    /**
     * @return The salt of the password.
     * 
     */
    private @Nullable String salt;
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    private @Nullable List<String> schemas;
    /**
     * @return User credential status
     * 
     */
    private @Nullable String status;
    /**
     * @return A list of tags on this resource.
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialTag> tags;
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    private @Nullable String tenancyOcid;
    /**
     * @return Controls whether a user can update themselves or not via User related APIs
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser> urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
    private String userDbCredentialId;
    /**
     * @return The user linked to the database credential.
     * 
     */
    private @Nullable List<GetDomainsUserDbCredentialUser> users;

    private GetDomainsUserDbCredentialResult() {}
    public List<String> attributeSets() {
        return this.attributeSets == null ? List.of() : this.attributeSets;
    }
    public Optional<String> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    public Optional<String> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> compartmentOcid() {
        return Optional.ofNullable(this.compartmentOcid);
    }
    /**
     * @return The user&#39;s database password.
     * 
     */
    public Optional<String> dbPassword() {
        return Optional.ofNullable(this.dbPassword);
    }
    /**
     * @return A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
     * 
     */
    public Optional<Boolean> deleteInProgress() {
        return Optional.ofNullable(this.deleteInProgress);
    }
    /**
     * @return Description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> domainOcid() {
        return Optional.ofNullable(this.domainOcid);
    }
    /**
     * @return Indicates that the database password has expired.
     * 
     */
    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }
    /**
     * @return When the user credential expires.
     * 
     */
    public Optional<String> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }
    /**
     * @return Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider&#39;s entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The User or App who created the Resource
     * 
     */
    public List<GetDomainsUserDbCredentialIdcsCreatedBy> idcsCreatedBies() {
        return this.idcsCreatedBies == null ? List.of() : this.idcsCreatedBies;
    }
    public String idcsEndpoint() {
        return this.idcsEndpoint;
    }
    /**
     * @return The User or App who modified the Resource
     * 
     */
    public List<GetDomainsUserDbCredentialIdcsLastModifiedBy> idcsLastModifiedBies() {
        return this.idcsLastModifiedBies == null ? List.of() : this.idcsLastModifiedBies;
    }
    /**
     * @return The release number when the resource was upgraded.
     * 
     */
    public Optional<String> idcsLastUpgradedInRelease() {
        return Optional.ofNullable(this.idcsLastUpgradedInRelease);
    }
    /**
     * @return Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
     * 
     */
    public List<String> idcsPreventedOperations() {
        return this.idcsPreventedOperations == null ? List.of() : this.idcsPreventedOperations;
    }
    /**
     * @return A DateTime that specifies the date and time when the current database password was set.
     * 
     */
    public Optional<String> lastSetDate() {
        return Optional.ofNullable(this.lastSetDate);
    }
    /**
     * @return A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
     * 
     */
    public List<GetDomainsUserDbCredentialMeta> metas() {
        return this.metas == null ? List.of() : this.metas;
    }
    /**
     * @return The user&#39;s database password with mixed salt.
     * 
     */
    public Optional<String> mixedDbPassword() {
        return Optional.ofNullable(this.mixedDbPassword);
    }
    /**
     * @return The mixed salt of the password.
     * 
     */
    public Optional<String> mixedSalt() {
        return Optional.ofNullable(this.mixedSalt);
    }
    /**
     * @return The username.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The user&#39;s OCID.
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    public Optional<String> resourceTypeSchemaVersion() {
        return Optional.ofNullable(this.resourceTypeSchemaVersion);
    }
    /**
     * @return The salt of the password.
     * 
     */
    public Optional<String> salt() {
        return Optional.ofNullable(this.salt);
    }
    /**
     * @return REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \&#34;enterprise\&#34; extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
     * 
     */
    public List<String> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    /**
     * @return User credential status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return A list of tags on this resource.
     * 
     */
    public List<GetDomainsUserDbCredentialTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
     * 
     */
    public Optional<String> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }
    /**
     * @return Controls whether a user can update themselves or not via User related APIs
     * 
     */
    public List<GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser> urnietfparamsscimschemasoracleidcsextensionselfChangeUsers() {
        return this.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers == null ? List.of() : this.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
    }
    public String userDbCredentialId() {
        return this.userDbCredentialId;
    }
    /**
     * @return The user linked to the database credential.
     * 
     */
    public List<GetDomainsUserDbCredentialUser> users() {
        return this.users == null ? List.of() : this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUserDbCredentialResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> attributeSets;
        private @Nullable String attributes;
        private @Nullable String authorization;
        private @Nullable String compartmentOcid;
        private @Nullable String dbPassword;
        private @Nullable Boolean deleteInProgress;
        private @Nullable String description;
        private @Nullable String domainOcid;
        private @Nullable Boolean expired;
        private @Nullable String expiresOn;
        private @Nullable String id;
        private @Nullable List<GetDomainsUserDbCredentialIdcsCreatedBy> idcsCreatedBies;
        private String idcsEndpoint;
        private @Nullable List<GetDomainsUserDbCredentialIdcsLastModifiedBy> idcsLastModifiedBies;
        private @Nullable String idcsLastUpgradedInRelease;
        private @Nullable List<String> idcsPreventedOperations;
        private @Nullable String lastSetDate;
        private @Nullable List<GetDomainsUserDbCredentialMeta> metas;
        private @Nullable String mixedDbPassword;
        private @Nullable String mixedSalt;
        private @Nullable String name;
        private @Nullable String ocid;
        private @Nullable String resourceTypeSchemaVersion;
        private @Nullable String salt;
        private @Nullable List<String> schemas;
        private @Nullable String status;
        private @Nullable List<GetDomainsUserDbCredentialTag> tags;
        private @Nullable String tenancyOcid;
        private @Nullable List<GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser> urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
        private String userDbCredentialId;
        private @Nullable List<GetDomainsUserDbCredentialUser> users;
        public Builder() {}
        public Builder(GetDomainsUserDbCredentialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeSets = defaults.attributeSets;
    	      this.attributes = defaults.attributes;
    	      this.authorization = defaults.authorization;
    	      this.compartmentOcid = defaults.compartmentOcid;
    	      this.dbPassword = defaults.dbPassword;
    	      this.deleteInProgress = defaults.deleteInProgress;
    	      this.description = defaults.description;
    	      this.domainOcid = defaults.domainOcid;
    	      this.expired = defaults.expired;
    	      this.expiresOn = defaults.expiresOn;
    	      this.id = defaults.id;
    	      this.idcsCreatedBies = defaults.idcsCreatedBies;
    	      this.idcsEndpoint = defaults.idcsEndpoint;
    	      this.idcsLastModifiedBies = defaults.idcsLastModifiedBies;
    	      this.idcsLastUpgradedInRelease = defaults.idcsLastUpgradedInRelease;
    	      this.idcsPreventedOperations = defaults.idcsPreventedOperations;
    	      this.lastSetDate = defaults.lastSetDate;
    	      this.metas = defaults.metas;
    	      this.mixedDbPassword = defaults.mixedDbPassword;
    	      this.mixedSalt = defaults.mixedSalt;
    	      this.name = defaults.name;
    	      this.ocid = defaults.ocid;
    	      this.resourceTypeSchemaVersion = defaults.resourceTypeSchemaVersion;
    	      this.salt = defaults.salt;
    	      this.schemas = defaults.schemas;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenancyOcid = defaults.tenancyOcid;
    	      this.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers = defaults.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
    	      this.userDbCredentialId = defaults.userDbCredentialId;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder attributeSets(@Nullable List<String> attributeSets) {
            this.attributeSets = attributeSets;
            return this;
        }
        public Builder attributeSets(String... attributeSets) {
            return attributeSets(List.of(attributeSets));
        }
        @CustomType.Setter
        public Builder attributes(@Nullable String attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(@Nullable String authorization) {
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentOcid(@Nullable String compartmentOcid) {
            this.compartmentOcid = compartmentOcid;
            return this;
        }
        @CustomType.Setter
        public Builder dbPassword(@Nullable String dbPassword) {
            this.dbPassword = dbPassword;
            return this;
        }
        @CustomType.Setter
        public Builder deleteInProgress(@Nullable Boolean deleteInProgress) {
            this.deleteInProgress = deleteInProgress;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(@Nullable String domainOcid) {
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder expired(@Nullable Boolean expired) {
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(@Nullable String expiresOn) {
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsCreatedBies(@Nullable List<GetDomainsUserDbCredentialIdcsCreatedBy> idcsCreatedBies) {
            this.idcsCreatedBies = idcsCreatedBies;
            return this;
        }
        public Builder idcsCreatedBies(GetDomainsUserDbCredentialIdcsCreatedBy... idcsCreatedBies) {
            return idcsCreatedBies(List.of(idcsCreatedBies));
        }
        @CustomType.Setter
        public Builder idcsEndpoint(String idcsEndpoint) {
            this.idcsEndpoint = Objects.requireNonNull(idcsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder idcsLastModifiedBies(@Nullable List<GetDomainsUserDbCredentialIdcsLastModifiedBy> idcsLastModifiedBies) {
            this.idcsLastModifiedBies = idcsLastModifiedBies;
            return this;
        }
        public Builder idcsLastModifiedBies(GetDomainsUserDbCredentialIdcsLastModifiedBy... idcsLastModifiedBies) {
            return idcsLastModifiedBies(List.of(idcsLastModifiedBies));
        }
        @CustomType.Setter
        public Builder idcsLastUpgradedInRelease(@Nullable String idcsLastUpgradedInRelease) {
            this.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            return this;
        }
        @CustomType.Setter
        public Builder idcsPreventedOperations(@Nullable List<String> idcsPreventedOperations) {
            this.idcsPreventedOperations = idcsPreventedOperations;
            return this;
        }
        public Builder idcsPreventedOperations(String... idcsPreventedOperations) {
            return idcsPreventedOperations(List.of(idcsPreventedOperations));
        }
        @CustomType.Setter
        public Builder lastSetDate(@Nullable String lastSetDate) {
            this.lastSetDate = lastSetDate;
            return this;
        }
        @CustomType.Setter
        public Builder metas(@Nullable List<GetDomainsUserDbCredentialMeta> metas) {
            this.metas = metas;
            return this;
        }
        public Builder metas(GetDomainsUserDbCredentialMeta... metas) {
            return metas(List.of(metas));
        }
        @CustomType.Setter
        public Builder mixedDbPassword(@Nullable String mixedDbPassword) {
            this.mixedDbPassword = mixedDbPassword;
            return this;
        }
        @CustomType.Setter
        public Builder mixedSalt(@Nullable String mixedSalt) {
            this.mixedSalt = mixedSalt;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeSchemaVersion(@Nullable String resourceTypeSchemaVersion) {
            this.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder salt(@Nullable String salt) {
            this.salt = salt;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<String> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(String... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<GetDomainsUserDbCredentialTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDomainsUserDbCredentialTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenancyOcid(@Nullable String tenancyOcid) {
            this.tenancyOcid = tenancyOcid;
            return this;
        }
        @CustomType.Setter
        public Builder urnietfparamsscimschemasoracleidcsextensionselfChangeUsers(@Nullable List<GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser> urnietfparamsscimschemasoracleidcsextensionselfChangeUsers) {
            this.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers = urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
            return this;
        }
        public Builder urnietfparamsscimschemasoracleidcsextensionselfChangeUsers(GetDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser... urnietfparamsscimschemasoracleidcsextensionselfChangeUsers) {
            return urnietfparamsscimschemasoracleidcsextensionselfChangeUsers(List.of(urnietfparamsscimschemasoracleidcsextensionselfChangeUsers));
        }
        @CustomType.Setter
        public Builder userDbCredentialId(String userDbCredentialId) {
            this.userDbCredentialId = Objects.requireNonNull(userDbCredentialId);
            return this;
        }
        @CustomType.Setter
        public Builder users(@Nullable List<GetDomainsUserDbCredentialUser> users) {
            this.users = users;
            return this;
        }
        public Builder users(GetDomainsUserDbCredentialUser... users) {
            return users(List.of(users));
        }
        public GetDomainsUserDbCredentialResult build() {
            final var o = new GetDomainsUserDbCredentialResult();
            o.attributeSets = attributeSets;
            o.attributes = attributes;
            o.authorization = authorization;
            o.compartmentOcid = compartmentOcid;
            o.dbPassword = dbPassword;
            o.deleteInProgress = deleteInProgress;
            o.description = description;
            o.domainOcid = domainOcid;
            o.expired = expired;
            o.expiresOn = expiresOn;
            o.id = id;
            o.idcsCreatedBies = idcsCreatedBies;
            o.idcsEndpoint = idcsEndpoint;
            o.idcsLastModifiedBies = idcsLastModifiedBies;
            o.idcsLastUpgradedInRelease = idcsLastUpgradedInRelease;
            o.idcsPreventedOperations = idcsPreventedOperations;
            o.lastSetDate = lastSetDate;
            o.metas = metas;
            o.mixedDbPassword = mixedDbPassword;
            o.mixedSalt = mixedSalt;
            o.name = name;
            o.ocid = ocid;
            o.resourceTypeSchemaVersion = resourceTypeSchemaVersion;
            o.salt = salt;
            o.schemas = schemas;
            o.status = status;
            o.tags = tags;
            o.tenancyOcid = tenancyOcid;
            o.urnietfparamsscimschemasoracleidcsextensionselfChangeUsers = urnietfparamsscimschemasoracleidcsextensionselfChangeUsers;
            o.userDbCredentialId = userDbCredentialId;
            o.users = users;
            return o;
        }
    }
}
