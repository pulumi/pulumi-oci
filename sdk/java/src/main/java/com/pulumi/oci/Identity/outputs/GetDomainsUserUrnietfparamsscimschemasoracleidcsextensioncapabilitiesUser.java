// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser {
    /**
     * @return Indicates whether a user can use API keys.
     * 
     */
    private Boolean canUseApiKeys;
    /**
     * @return Indicates whether a user can use Auth tokens.
     * 
     */
    private Boolean canUseAuthTokens;
    /**
     * @return Specifies whether user can access the Console.
     * 
     */
    private Boolean canUseConsole;
    /**
     * @return Indicates whether a user can use Console passwords.
     * 
     */
    private Boolean canUseConsolePassword;
    /**
     * @return Indicates whether a user can use customer secret keys.
     * 
     */
    private Boolean canUseCustomerSecretKeys;
    /**
     * @return Indicates whether a user can use database credentials.
     * 
     */
    private Boolean canUseDbCredentials;
    /**
     * @return Indicates whether a user can use OAuth2 client credentials.
     * 
     */
    private Boolean canUseOauth2clientCredentials;
    /**
     * @return Indicates whether a user can use SMTP credentials.
     * 
     */
    private Boolean canUseSmtpCredentials;

    private GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser() {}
    /**
     * @return Indicates whether a user can use API keys.
     * 
     */
    public Boolean canUseApiKeys() {
        return this.canUseApiKeys;
    }
    /**
     * @return Indicates whether a user can use Auth tokens.
     * 
     */
    public Boolean canUseAuthTokens() {
        return this.canUseAuthTokens;
    }
    /**
     * @return Specifies whether user can access the Console.
     * 
     */
    public Boolean canUseConsole() {
        return this.canUseConsole;
    }
    /**
     * @return Indicates whether a user can use Console passwords.
     * 
     */
    public Boolean canUseConsolePassword() {
        return this.canUseConsolePassword;
    }
    /**
     * @return Indicates whether a user can use customer secret keys.
     * 
     */
    public Boolean canUseCustomerSecretKeys() {
        return this.canUseCustomerSecretKeys;
    }
    /**
     * @return Indicates whether a user can use database credentials.
     * 
     */
    public Boolean canUseDbCredentials() {
        return this.canUseDbCredentials;
    }
    /**
     * @return Indicates whether a user can use OAuth2 client credentials.
     * 
     */
    public Boolean canUseOauth2clientCredentials() {
        return this.canUseOauth2clientCredentials;
    }
    /**
     * @return Indicates whether a user can use SMTP credentials.
     * 
     */
    public Boolean canUseSmtpCredentials() {
        return this.canUseSmtpCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean canUseApiKeys;
        private Boolean canUseAuthTokens;
        private Boolean canUseConsole;
        private Boolean canUseConsolePassword;
        private Boolean canUseCustomerSecretKeys;
        private Boolean canUseDbCredentials;
        private Boolean canUseOauth2clientCredentials;
        private Boolean canUseSmtpCredentials;
        public Builder() {}
        public Builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canUseApiKeys = defaults.canUseApiKeys;
    	      this.canUseAuthTokens = defaults.canUseAuthTokens;
    	      this.canUseConsole = defaults.canUseConsole;
    	      this.canUseConsolePassword = defaults.canUseConsolePassword;
    	      this.canUseCustomerSecretKeys = defaults.canUseCustomerSecretKeys;
    	      this.canUseDbCredentials = defaults.canUseDbCredentials;
    	      this.canUseOauth2clientCredentials = defaults.canUseOauth2clientCredentials;
    	      this.canUseSmtpCredentials = defaults.canUseSmtpCredentials;
        }

        @CustomType.Setter
        public Builder canUseApiKeys(Boolean canUseApiKeys) {
            if (canUseApiKeys == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseApiKeys");
            }
            this.canUseApiKeys = canUseApiKeys;
            return this;
        }
        @CustomType.Setter
        public Builder canUseAuthTokens(Boolean canUseAuthTokens) {
            if (canUseAuthTokens == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseAuthTokens");
            }
            this.canUseAuthTokens = canUseAuthTokens;
            return this;
        }
        @CustomType.Setter
        public Builder canUseConsole(Boolean canUseConsole) {
            if (canUseConsole == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseConsole");
            }
            this.canUseConsole = canUseConsole;
            return this;
        }
        @CustomType.Setter
        public Builder canUseConsolePassword(Boolean canUseConsolePassword) {
            if (canUseConsolePassword == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseConsolePassword");
            }
            this.canUseConsolePassword = canUseConsolePassword;
            return this;
        }
        @CustomType.Setter
        public Builder canUseCustomerSecretKeys(Boolean canUseCustomerSecretKeys) {
            if (canUseCustomerSecretKeys == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseCustomerSecretKeys");
            }
            this.canUseCustomerSecretKeys = canUseCustomerSecretKeys;
            return this;
        }
        @CustomType.Setter
        public Builder canUseDbCredentials(Boolean canUseDbCredentials) {
            if (canUseDbCredentials == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseDbCredentials");
            }
            this.canUseDbCredentials = canUseDbCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder canUseOauth2clientCredentials(Boolean canUseOauth2clientCredentials) {
            if (canUseOauth2clientCredentials == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseOauth2clientCredentials");
            }
            this.canUseOauth2clientCredentials = canUseOauth2clientCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder canUseSmtpCredentials(Boolean canUseSmtpCredentials) {
            if (canUseSmtpCredentials == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser", "canUseSmtpCredentials");
            }
            this.canUseSmtpCredentials = canUseSmtpCredentials;
            return this;
        }
        public GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser build() {
            final var _resultValue = new GetDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser();
            _resultValue.canUseApiKeys = canUseApiKeys;
            _resultValue.canUseAuthTokens = canUseAuthTokens;
            _resultValue.canUseConsole = canUseConsole;
            _resultValue.canUseConsolePassword = canUseConsolePassword;
            _resultValue.canUseCustomerSecretKeys = canUseCustomerSecretKeys;
            _resultValue.canUseDbCredentials = canUseDbCredentials;
            _resultValue.canUseOauth2clientCredentials = canUseOauth2clientCredentials;
            _resultValue.canUseSmtpCredentials = canUseSmtpCredentials;
            return _resultValue;
        }
    }
}
