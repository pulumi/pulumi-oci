// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked {
    /**
     * @return Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     */
    private @Nullable Boolean expired;
    /**
     * @return The date and time that the current resource was locked.
     * 
     */
    private @Nullable String lockDate;
    /**
     * @return Indicates that the recovery is locked.
     * 
     */
    private @Nullable Boolean on;
    /**
     * @return Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     */
    private @Nullable Integer reason;

    private GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked() {}
    /**
     * @return Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     */
    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }
    /**
     * @return The date and time that the current resource was locked.
     * 
     */
    public Optional<String> lockDate() {
        return Optional.ofNullable(this.lockDate);
    }
    /**
     * @return Indicates that the recovery is locked.
     * 
     */
    public Optional<Boolean> on() {
        return Optional.ofNullable(this.on);
    }
    /**
     * @return Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     */
    public Optional<Integer> reason() {
        return Optional.ofNullable(this.reason);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean expired;
        private @Nullable String lockDate;
        private @Nullable Boolean on;
        private @Nullable Integer reason;
        public Builder() {}
        public Builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expired = defaults.expired;
    	      this.lockDate = defaults.lockDate;
    	      this.on = defaults.on;
    	      this.reason = defaults.reason;
        }

        @CustomType.Setter
        public Builder expired(@Nullable Boolean expired) {
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder lockDate(@Nullable String lockDate) {
            this.lockDate = lockDate;
            return this;
        }
        @CustomType.Setter
        public Builder on(@Nullable Boolean on) {
            this.on = on;
            return this;
        }
        @CustomType.Setter
        public Builder reason(@Nullable Integer reason) {
            this.reason = reason;
            return this;
        }
        public GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked build() {
            final var o = new GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked();
            o.expired = expired;
            o.lockDate = lockDate;
            o.on = on;
            o.reason = reason;
            return o;
        }
    }
}
