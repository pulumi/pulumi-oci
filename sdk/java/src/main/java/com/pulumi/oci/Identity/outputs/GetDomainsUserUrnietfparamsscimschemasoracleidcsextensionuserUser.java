// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp;
import com.pulumi.oci.Identity.outputs.GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser {
    /**
     * @return Boolean value to prompt user to setup account recovery during login.
     * 
     */
    private Boolean accountRecoveryRequired;
    /**
     * @return Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount> accounts;
    /**
     * @return A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole> appRoles;
    /**
     * @return The app against which the user will authenticate. The value is not persisted but rather calculated. If the user&#39;s delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user&#39;s applicable Delegated Authentication Policy is returned.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp> applicableAuthenticationTargetApps;
    /**
     * @return A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
     * 
     */
    private Boolean bypassNotification;
    /**
     * @return User creation mechanism
     * 
     */
    private String creationMechanism;
    /**
     * @return If set, indicates the user&#39;s preferred authentication target app. If not set and the user&#39;s \&#34;syncedFromApp\&#34; is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Identity Cloud Service.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp> delegatedAuthenticationTargetApps;
    /**
     * @return A Boolean value indicating whether or not to hide the getting started page
     * 
     */
    private Boolean doNotShowGettingStarted;
    /**
     * @return Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant> grants;
    /**
     * @return Specifies date time when a User&#39;s group membership was last modified.
     * 
     */
    private String groupMembershipLastModified;
    /**
     * @return Description:
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup> idcsAppRolesLimitedToGroups;
    /**
     * @return A Boolean value indicating whether or not a user is enrolled for account recovery
     * 
     */
    private Boolean isAccountRecoveryEnrolled;
    /**
     * @return A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
     * 
     */
    private Boolean isAuthenticationDelegated;
    /**
     * @return A Boolean value indicating whether or not the user is federated.
     * 
     */
    private Boolean isFederatedUser;
    /**
     * @return A Boolean value indicating whether or not group membership is normalized for this user.
     * 
     */
    private Boolean isGroupMembershipNormalized;
    /**
     * @return A Boolean value Indicates whether this User&#39;s group membership has been sync&#39;ed from Group.members to UsersGroups.
     * 
     */
    private Boolean isGroupMembershipSyncedToUsersGroups;
    /**
     * @return Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
     * 
     */
    private String notificationEmailTemplateId;
    /**
     * @return User&#39;s preferred landing page following login, logout and reset password.
     * 
     */
    private String preferredUiLandingPage;
    /**
     * @return Indicates if User is a Service User
     * 
     */
    private Boolean serviceUser;
    /**
     * @return A supplemental status indicating the reason why a user is disabled
     * 
     */
    private String status;
    /**
     * @return A list of Support Accounts corresponding to user.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount> supportAccounts;
    /**
     * @return Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp> syncedFromApps;
    /**
     * @return A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
     * 
     */
    private Boolean userFlowControlledByExternalClient;
    /**
     * @return User Support Account Provider
     * 
     */
    private String userProvider;
    /**
     * @return User token returned if userFlowControlledByExternalClient is true
     * 
     */
    private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken> userTokens;

    private GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser() {}
    /**
     * @return Boolean value to prompt user to setup account recovery during login.
     * 
     */
    public Boolean accountRecoveryRequired() {
        return this.accountRecoveryRequired;
    }
    /**
     * @return Accounts assigned to this User. Each value of this attribute refers to an app-specific identity that is owned by this User. Therefore, this attribute is a convenience that allows one to see on each User the Apps to which that User has access.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return A list of all AppRoles to which this User belongs directly, indirectly or implicitly. The User could belong directly because the User is a member of the AppRole, could belong indirectly because the User is a member of a Group that is a member of the AppRole, or could belong implicitly because the AppRole is public.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole> appRoles() {
        return this.appRoles;
    }
    /**
     * @return The app against which the user will authenticate. The value is not persisted but rather calculated. If the user&#39;s delegatedAuthenticationTargetApp is set, that value is returned. Otherwise, the app returned by evaluating the user&#39;s applicable Delegated Authentication Policy is returned.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp> applicableAuthenticationTargetApps() {
        return this.applicableAuthenticationTargetApps;
    }
    /**
     * @return A Boolean value indicating whether or not to send email notification after creating the user. This attribute is not used in update/replace operations.
     * 
     */
    public Boolean bypassNotification() {
        return this.bypassNotification;
    }
    /**
     * @return User creation mechanism
     * 
     */
    public String creationMechanism() {
        return this.creationMechanism;
    }
    /**
     * @return If set, indicates the user&#39;s preferred authentication target app. If not set and the user&#39;s \&#34;syncedFromApp\&#34; is set and is enabled for delegated authentication, it is used. Otherwise, the user authenticates locally to Oracle Identity Cloud Service.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp> delegatedAuthenticationTargetApps() {
        return this.delegatedAuthenticationTargetApps;
    }
    /**
     * @return A Boolean value indicating whether or not to hide the getting started page
     * 
     */
    public Boolean doNotShowGettingStarted() {
        return this.doNotShowGettingStarted;
    }
    /**
     * @return Grants to this User. Each value of this attribute refers to a Grant to this User of some App (and optionally of some entitlement). Therefore, this attribute is a convenience that allows one to see on each User all of the Grants to that User.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant> grants() {
        return this.grants;
    }
    /**
     * @return Specifies date time when a User&#39;s group membership was last modified.
     * 
     */
    public String groupMembershipLastModified() {
        return this.groupMembershipLastModified;
    }
    /**
     * @return Description:
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup> idcsAppRolesLimitedToGroups() {
        return this.idcsAppRolesLimitedToGroups;
    }
    /**
     * @return A Boolean value indicating whether or not a user is enrolled for account recovery
     * 
     */
    public Boolean isAccountRecoveryEnrolled() {
        return this.isAccountRecoveryEnrolled;
    }
    /**
     * @return A Boolean value indicating whether or not authentication request by this user should be delegated to a remote app. This value should be true only when the User was originally synced from an app which is enabled for delegated authentication
     * 
     */
    public Boolean isAuthenticationDelegated() {
        return this.isAuthenticationDelegated;
    }
    /**
     * @return A Boolean value indicating whether or not the user is federated.
     * 
     */
    public Boolean isFederatedUser() {
        return this.isFederatedUser;
    }
    /**
     * @return A Boolean value indicating whether or not group membership is normalized for this user.
     * 
     */
    public Boolean isGroupMembershipNormalized() {
        return this.isGroupMembershipNormalized;
    }
    /**
     * @return A Boolean value Indicates whether this User&#39;s group membership has been sync&#39;ed from Group.members to UsersGroups.
     * 
     */
    public Boolean isGroupMembershipSyncedToUsersGroups() {
        return this.isGroupMembershipSyncedToUsersGroups;
    }
    /**
     * @return Specifies the EmailTemplate to be used when sending notification to the user this request is for. If specified, it overrides the default EmailTemplate for this event.
     * 
     */
    public String notificationEmailTemplateId() {
        return this.notificationEmailTemplateId;
    }
    /**
     * @return User&#39;s preferred landing page following login, logout and reset password.
     * 
     */
    public String preferredUiLandingPage() {
        return this.preferredUiLandingPage;
    }
    /**
     * @return Indicates if User is a Service User
     * 
     */
    public Boolean serviceUser() {
        return this.serviceUser;
    }
    /**
     * @return A supplemental status indicating the reason why a user is disabled
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of Support Accounts corresponding to user.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount> supportAccounts() {
        return this.supportAccounts;
    }
    /**
     * @return Managed App or an Identity Source from where the user is synced. If enabled, this Managed App or Identity Source can be used for performing delegated authentication.
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp> syncedFromApps() {
        return this.syncedFromApps;
    }
    /**
     * @return A Boolean value indicating whether to bypass notification and return user token to be used by an external client to control the user flow.
     * 
     */
    public Boolean userFlowControlledByExternalClient() {
        return this.userFlowControlledByExternalClient;
    }
    /**
     * @return User Support Account Provider
     * 
     */
    public String userProvider() {
        return this.userProvider;
    }
    /**
     * @return User token returned if userFlowControlledByExternalClient is true
     * 
     */
    public List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken> userTokens() {
        return this.userTokens;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accountRecoveryRequired;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount> accounts;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole> appRoles;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp> applicableAuthenticationTargetApps;
        private Boolean bypassNotification;
        private String creationMechanism;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp> delegatedAuthenticationTargetApps;
        private Boolean doNotShowGettingStarted;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant> grants;
        private String groupMembershipLastModified;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup> idcsAppRolesLimitedToGroups;
        private Boolean isAccountRecoveryEnrolled;
        private Boolean isAuthenticationDelegated;
        private Boolean isFederatedUser;
        private Boolean isGroupMembershipNormalized;
        private Boolean isGroupMembershipSyncedToUsersGroups;
        private String notificationEmailTemplateId;
        private String preferredUiLandingPage;
        private Boolean serviceUser;
        private String status;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount> supportAccounts;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp> syncedFromApps;
        private Boolean userFlowControlledByExternalClient;
        private String userProvider;
        private List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken> userTokens;
        public Builder() {}
        public Builder(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountRecoveryRequired = defaults.accountRecoveryRequired;
    	      this.accounts = defaults.accounts;
    	      this.appRoles = defaults.appRoles;
    	      this.applicableAuthenticationTargetApps = defaults.applicableAuthenticationTargetApps;
    	      this.bypassNotification = defaults.bypassNotification;
    	      this.creationMechanism = defaults.creationMechanism;
    	      this.delegatedAuthenticationTargetApps = defaults.delegatedAuthenticationTargetApps;
    	      this.doNotShowGettingStarted = defaults.doNotShowGettingStarted;
    	      this.grants = defaults.grants;
    	      this.groupMembershipLastModified = defaults.groupMembershipLastModified;
    	      this.idcsAppRolesLimitedToGroups = defaults.idcsAppRolesLimitedToGroups;
    	      this.isAccountRecoveryEnrolled = defaults.isAccountRecoveryEnrolled;
    	      this.isAuthenticationDelegated = defaults.isAuthenticationDelegated;
    	      this.isFederatedUser = defaults.isFederatedUser;
    	      this.isGroupMembershipNormalized = defaults.isGroupMembershipNormalized;
    	      this.isGroupMembershipSyncedToUsersGroups = defaults.isGroupMembershipSyncedToUsersGroups;
    	      this.notificationEmailTemplateId = defaults.notificationEmailTemplateId;
    	      this.preferredUiLandingPage = defaults.preferredUiLandingPage;
    	      this.serviceUser = defaults.serviceUser;
    	      this.status = defaults.status;
    	      this.supportAccounts = defaults.supportAccounts;
    	      this.syncedFromApps = defaults.syncedFromApps;
    	      this.userFlowControlledByExternalClient = defaults.userFlowControlledByExternalClient;
    	      this.userProvider = defaults.userProvider;
    	      this.userTokens = defaults.userTokens;
        }

        @CustomType.Setter
        public Builder accountRecoveryRequired(Boolean accountRecoveryRequired) {
            if (accountRecoveryRequired == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "accountRecoveryRequired");
            }
            this.accountRecoveryRequired = accountRecoveryRequired;
            return this;
        }
        @CustomType.Setter
        public Builder accounts(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount> accounts) {
            if (accounts == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "accounts");
            }
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder appRoles(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole> appRoles) {
            if (appRoles == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "appRoles");
            }
            this.appRoles = appRoles;
            return this;
        }
        public Builder appRoles(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole... appRoles) {
            return appRoles(List.of(appRoles));
        }
        @CustomType.Setter
        public Builder applicableAuthenticationTargetApps(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp> applicableAuthenticationTargetApps) {
            if (applicableAuthenticationTargetApps == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "applicableAuthenticationTargetApps");
            }
            this.applicableAuthenticationTargetApps = applicableAuthenticationTargetApps;
            return this;
        }
        public Builder applicableAuthenticationTargetApps(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp... applicableAuthenticationTargetApps) {
            return applicableAuthenticationTargetApps(List.of(applicableAuthenticationTargetApps));
        }
        @CustomType.Setter
        public Builder bypassNotification(Boolean bypassNotification) {
            if (bypassNotification == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "bypassNotification");
            }
            this.bypassNotification = bypassNotification;
            return this;
        }
        @CustomType.Setter
        public Builder creationMechanism(String creationMechanism) {
            if (creationMechanism == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "creationMechanism");
            }
            this.creationMechanism = creationMechanism;
            return this;
        }
        @CustomType.Setter
        public Builder delegatedAuthenticationTargetApps(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp> delegatedAuthenticationTargetApps) {
            if (delegatedAuthenticationTargetApps == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "delegatedAuthenticationTargetApps");
            }
            this.delegatedAuthenticationTargetApps = delegatedAuthenticationTargetApps;
            return this;
        }
        public Builder delegatedAuthenticationTargetApps(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp... delegatedAuthenticationTargetApps) {
            return delegatedAuthenticationTargetApps(List.of(delegatedAuthenticationTargetApps));
        }
        @CustomType.Setter
        public Builder doNotShowGettingStarted(Boolean doNotShowGettingStarted) {
            if (doNotShowGettingStarted == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "doNotShowGettingStarted");
            }
            this.doNotShowGettingStarted = doNotShowGettingStarted;
            return this;
        }
        @CustomType.Setter
        public Builder grants(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant> grants) {
            if (grants == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "grants");
            }
            this.grants = grants;
            return this;
        }
        public Builder grants(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant... grants) {
            return grants(List.of(grants));
        }
        @CustomType.Setter
        public Builder groupMembershipLastModified(String groupMembershipLastModified) {
            if (groupMembershipLastModified == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "groupMembershipLastModified");
            }
            this.groupMembershipLastModified = groupMembershipLastModified;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAppRolesLimitedToGroups(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup> idcsAppRolesLimitedToGroups) {
            if (idcsAppRolesLimitedToGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "idcsAppRolesLimitedToGroups");
            }
            this.idcsAppRolesLimitedToGroups = idcsAppRolesLimitedToGroups;
            return this;
        }
        public Builder idcsAppRolesLimitedToGroups(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup... idcsAppRolesLimitedToGroups) {
            return idcsAppRolesLimitedToGroups(List.of(idcsAppRolesLimitedToGroups));
        }
        @CustomType.Setter
        public Builder isAccountRecoveryEnrolled(Boolean isAccountRecoveryEnrolled) {
            if (isAccountRecoveryEnrolled == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "isAccountRecoveryEnrolled");
            }
            this.isAccountRecoveryEnrolled = isAccountRecoveryEnrolled;
            return this;
        }
        @CustomType.Setter
        public Builder isAuthenticationDelegated(Boolean isAuthenticationDelegated) {
            if (isAuthenticationDelegated == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "isAuthenticationDelegated");
            }
            this.isAuthenticationDelegated = isAuthenticationDelegated;
            return this;
        }
        @CustomType.Setter
        public Builder isFederatedUser(Boolean isFederatedUser) {
            if (isFederatedUser == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "isFederatedUser");
            }
            this.isFederatedUser = isFederatedUser;
            return this;
        }
        @CustomType.Setter
        public Builder isGroupMembershipNormalized(Boolean isGroupMembershipNormalized) {
            if (isGroupMembershipNormalized == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "isGroupMembershipNormalized");
            }
            this.isGroupMembershipNormalized = isGroupMembershipNormalized;
            return this;
        }
        @CustomType.Setter
        public Builder isGroupMembershipSyncedToUsersGroups(Boolean isGroupMembershipSyncedToUsersGroups) {
            if (isGroupMembershipSyncedToUsersGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "isGroupMembershipSyncedToUsersGroups");
            }
            this.isGroupMembershipSyncedToUsersGroups = isGroupMembershipSyncedToUsersGroups;
            return this;
        }
        @CustomType.Setter
        public Builder notificationEmailTemplateId(String notificationEmailTemplateId) {
            if (notificationEmailTemplateId == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "notificationEmailTemplateId");
            }
            this.notificationEmailTemplateId = notificationEmailTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredUiLandingPage(String preferredUiLandingPage) {
            if (preferredUiLandingPage == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "preferredUiLandingPage");
            }
            this.preferredUiLandingPage = preferredUiLandingPage;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUser(Boolean serviceUser) {
            if (serviceUser == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "serviceUser");
            }
            this.serviceUser = serviceUser;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder supportAccounts(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount> supportAccounts) {
            if (supportAccounts == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "supportAccounts");
            }
            this.supportAccounts = supportAccounts;
            return this;
        }
        public Builder supportAccounts(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount... supportAccounts) {
            return supportAccounts(List.of(supportAccounts));
        }
        @CustomType.Setter
        public Builder syncedFromApps(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp> syncedFromApps) {
            if (syncedFromApps == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "syncedFromApps");
            }
            this.syncedFromApps = syncedFromApps;
            return this;
        }
        public Builder syncedFromApps(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp... syncedFromApps) {
            return syncedFromApps(List.of(syncedFromApps));
        }
        @CustomType.Setter
        public Builder userFlowControlledByExternalClient(Boolean userFlowControlledByExternalClient) {
            if (userFlowControlledByExternalClient == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "userFlowControlledByExternalClient");
            }
            this.userFlowControlledByExternalClient = userFlowControlledByExternalClient;
            return this;
        }
        @CustomType.Setter
        public Builder userProvider(String userProvider) {
            if (userProvider == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "userProvider");
            }
            this.userProvider = userProvider;
            return this;
        }
        @CustomType.Setter
        public Builder userTokens(List<GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken> userTokens) {
            if (userTokens == null) {
              throw new MissingRequiredPropertyException("GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser", "userTokens");
            }
            this.userTokens = userTokens;
            return this;
        }
        public Builder userTokens(GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken... userTokens) {
            return userTokens(List.of(userTokens));
        }
        public GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser build() {
            final var _resultValue = new GetDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser();
            _resultValue.accountRecoveryRequired = accountRecoveryRequired;
            _resultValue.accounts = accounts;
            _resultValue.appRoles = appRoles;
            _resultValue.applicableAuthenticationTargetApps = applicableAuthenticationTargetApps;
            _resultValue.bypassNotification = bypassNotification;
            _resultValue.creationMechanism = creationMechanism;
            _resultValue.delegatedAuthenticationTargetApps = delegatedAuthenticationTargetApps;
            _resultValue.doNotShowGettingStarted = doNotShowGettingStarted;
            _resultValue.grants = grants;
            _resultValue.groupMembershipLastModified = groupMembershipLastModified;
            _resultValue.idcsAppRolesLimitedToGroups = idcsAppRolesLimitedToGroups;
            _resultValue.isAccountRecoveryEnrolled = isAccountRecoveryEnrolled;
            _resultValue.isAuthenticationDelegated = isAuthenticationDelegated;
            _resultValue.isFederatedUser = isFederatedUser;
            _resultValue.isGroupMembershipNormalized = isGroupMembershipNormalized;
            _resultValue.isGroupMembershipSyncedToUsersGroups = isGroupMembershipSyncedToUsersGroups;
            _resultValue.notificationEmailTemplateId = notificationEmailTemplateId;
            _resultValue.preferredUiLandingPage = preferredUiLandingPage;
            _resultValue.serviceUser = serviceUser;
            _resultValue.status = status;
            _resultValue.supportAccounts = supportAccounts;
            _resultValue.syncedFromApps = syncedFromApps;
            _resultValue.userFlowControlledByExternalClient = userFlowControlledByExternalClient;
            _resultValue.userProvider = userProvider;
            _resultValue.userTokens = userTokens;
            return _resultValue;
        }
    }
}
