// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser {
    /**
     * @return A list of bypass codes that belongs to the user.
     * 
     */
    private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes;
    /**
     * @return A list of devices enrolled by the user.
     * 
     */
    private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices;
    /**
     * @return The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    private Integer loginAttempts;
    /**
     * @return The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     */
    private String mfaEnabledOn;
    /**
     * @return User MFA Ignored Apps Identifiers
     * 
     */
    private List<String> mfaIgnoredApps;
    /**
     * @return The user opted for MFA.
     * 
     */
    private String mfaStatus;
    /**
     * @return The preferred authentication factor type.
     * 
     */
    private String preferredAuthenticationFactor;
    /**
     * @return The preferred authentication method.
     * 
     */
    private String preferredAuthenticationMethod;
    /**
     * @return The user&#39;s preferred device.
     * 
     */
    private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice> preferredDevices;
    /**
     * @return The preferred third-party vendor name.
     * 
     */
    private String preferredThirdPartyVendor;
    /**
     * @return A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     */
    private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents;

    private GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser() {}
    /**
     * @return A list of bypass codes that belongs to the user.
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes() {
        return this.bypassCodes;
    }
    /**
     * @return A list of devices enrolled by the user.
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices() {
        return this.devices;
    }
    /**
     * @return The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Integer loginAttempts() {
        return this.loginAttempts;
    }
    /**
     * @return The date when the user enrolled in multi factor authentication. This will be set to null, when the user resets their factors.
     * 
     */
    public String mfaEnabledOn() {
        return this.mfaEnabledOn;
    }
    /**
     * @return User MFA Ignored Apps Identifiers
     * 
     */
    public List<String> mfaIgnoredApps() {
        return this.mfaIgnoredApps;
    }
    /**
     * @return The user opted for MFA.
     * 
     */
    public String mfaStatus() {
        return this.mfaStatus;
    }
    /**
     * @return The preferred authentication factor type.
     * 
     */
    public String preferredAuthenticationFactor() {
        return this.preferredAuthenticationFactor;
    }
    /**
     * @return The preferred authentication method.
     * 
     */
    public String preferredAuthenticationMethod() {
        return this.preferredAuthenticationMethod;
    }
    /**
     * @return The user&#39;s preferred device.
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice> preferredDevices() {
        return this.preferredDevices;
    }
    /**
     * @return The preferred third-party vendor name.
     * 
     */
    public String preferredThirdPartyVendor() {
        return this.preferredThirdPartyVendor;
    }
    /**
     * @return A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents() {
        return this.trustedUserAgents;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes;
        private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices;
        private Integer loginAttempts;
        private String mfaEnabledOn;
        private List<String> mfaIgnoredApps;
        private String mfaStatus;
        private String preferredAuthenticationFactor;
        private String preferredAuthenticationMethod;
        private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice> preferredDevices;
        private String preferredThirdPartyVendor;
        private List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents;
        public Builder() {}
        public Builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypassCodes = defaults.bypassCodes;
    	      this.devices = defaults.devices;
    	      this.loginAttempts = defaults.loginAttempts;
    	      this.mfaEnabledOn = defaults.mfaEnabledOn;
    	      this.mfaIgnoredApps = defaults.mfaIgnoredApps;
    	      this.mfaStatus = defaults.mfaStatus;
    	      this.preferredAuthenticationFactor = defaults.preferredAuthenticationFactor;
    	      this.preferredAuthenticationMethod = defaults.preferredAuthenticationMethod;
    	      this.preferredDevices = defaults.preferredDevices;
    	      this.preferredThirdPartyVendor = defaults.preferredThirdPartyVendor;
    	      this.trustedUserAgents = defaults.trustedUserAgents;
        }

        @CustomType.Setter
        public Builder bypassCodes(List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode> bypassCodes) {
            this.bypassCodes = Objects.requireNonNull(bypassCodes);
            return this;
        }
        public Builder bypassCodes(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode... bypassCodes) {
            return bypassCodes(List.of(bypassCodes));
        }
        @CustomType.Setter
        public Builder devices(List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice> devices) {
            this.devices = Objects.requireNonNull(devices);
            return this;
        }
        public Builder devices(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice... devices) {
            return devices(List.of(devices));
        }
        @CustomType.Setter
        public Builder loginAttempts(Integer loginAttempts) {
            this.loginAttempts = Objects.requireNonNull(loginAttempts);
            return this;
        }
        @CustomType.Setter
        public Builder mfaEnabledOn(String mfaEnabledOn) {
            this.mfaEnabledOn = Objects.requireNonNull(mfaEnabledOn);
            return this;
        }
        @CustomType.Setter
        public Builder mfaIgnoredApps(List<String> mfaIgnoredApps) {
            this.mfaIgnoredApps = Objects.requireNonNull(mfaIgnoredApps);
            return this;
        }
        public Builder mfaIgnoredApps(String... mfaIgnoredApps) {
            return mfaIgnoredApps(List.of(mfaIgnoredApps));
        }
        @CustomType.Setter
        public Builder mfaStatus(String mfaStatus) {
            this.mfaStatus = Objects.requireNonNull(mfaStatus);
            return this;
        }
        @CustomType.Setter
        public Builder preferredAuthenticationFactor(String preferredAuthenticationFactor) {
            this.preferredAuthenticationFactor = Objects.requireNonNull(preferredAuthenticationFactor);
            return this;
        }
        @CustomType.Setter
        public Builder preferredAuthenticationMethod(String preferredAuthenticationMethod) {
            this.preferredAuthenticationMethod = Objects.requireNonNull(preferredAuthenticationMethod);
            return this;
        }
        @CustomType.Setter
        public Builder preferredDevices(List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice> preferredDevices) {
            this.preferredDevices = Objects.requireNonNull(preferredDevices);
            return this;
        }
        public Builder preferredDevices(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice... preferredDevices) {
            return preferredDevices(List.of(preferredDevices));
        }
        @CustomType.Setter
        public Builder preferredThirdPartyVendor(String preferredThirdPartyVendor) {
            this.preferredThirdPartyVendor = Objects.requireNonNull(preferredThirdPartyVendor);
            return this;
        }
        @CustomType.Setter
        public Builder trustedUserAgents(List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent> trustedUserAgents) {
            this.trustedUserAgents = Objects.requireNonNull(trustedUserAgents);
            return this;
        }
        public Builder trustedUserAgents(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent... trustedUserAgents) {
            return trustedUserAgents(List.of(trustedUserAgents));
        }
        public GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser build() {
            final var _resultValue = new GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser();
            _resultValue.bypassCodes = bypassCodes;
            _resultValue.devices = devices;
            _resultValue.loginAttempts = loginAttempts;
            _resultValue.mfaEnabledOn = mfaEnabledOn;
            _resultValue.mfaIgnoredApps = mfaIgnoredApps;
            _resultValue.mfaStatus = mfaStatus;
            _resultValue.preferredAuthenticationFactor = preferredAuthenticationFactor;
            _resultValue.preferredAuthenticationMethod = preferredAuthenticationMethod;
            _resultValue.preferredDevices = preferredDevices;
            _resultValue.preferredThirdPartyVendor = preferredThirdPartyVendor;
            _resultValue.trustedUserAgents = trustedUserAgents;
            return _resultValue;
        }
    }
}
