// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked;
import com.pulumi.oci.Identity.outputs.GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser {
    /**
     * @return The last failed login date.
     * 
     */
    private @Nullable String lastFailedLoginDate;
    /**
     * @return The last successful login date.
     * 
     */
    private @Nullable String lastSuccessfulLoginDate;
    /**
     * @return A complex attribute that indicates an account is locked (blocking any new sessions).
     * 
     */
    private @Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked> lockeds;
    /**
     * @return The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    private @Nullable Integer loginAttempts;
    /**
     * @return The maximum number of concurrent sessions for a user.
     * 
     */
    private @Nullable Integer maxConcurrentSessions;
    /**
     * @return The previous successful login date.
     * 
     */
    private @Nullable String previousSuccessfulLoginDate;
    /**
     * @return The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     */
    private @Nullable Integer recoveryAttempts;
    /**
     * @return The number of failed account recovery enrollment attempts.
     * 
     */
    private @Nullable Integer recoveryEnrollAttempts;
    /**
     * @return A complex attribute that indicates a password recovery is locked (blocking any new sessions).
     * 
     */
    private @Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked> recoveryLockeds;

    private GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser() {}
    /**
     * @return The last failed login date.
     * 
     */
    public Optional<String> lastFailedLoginDate() {
        return Optional.ofNullable(this.lastFailedLoginDate);
    }
    /**
     * @return The last successful login date.
     * 
     */
    public Optional<String> lastSuccessfulLoginDate() {
        return Optional.ofNullable(this.lastSuccessfulLoginDate);
    }
    /**
     * @return A complex attribute that indicates an account is locked (blocking any new sessions).
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked> lockeds() {
        return this.lockeds == null ? List.of() : this.lockeds;
    }
    /**
     * @return The number of failed login attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Optional<Integer> loginAttempts() {
        return Optional.ofNullable(this.loginAttempts);
    }
    /**
     * @return The maximum number of concurrent sessions for a user.
     * 
     */
    public Optional<Integer> maxConcurrentSessions() {
        return Optional.ofNullable(this.maxConcurrentSessions);
    }
    /**
     * @return The previous successful login date.
     * 
     */
    public Optional<String> previousSuccessfulLoginDate() {
        return Optional.ofNullable(this.previousSuccessfulLoginDate);
    }
    /**
     * @return The number of failed recovery attempts. The value is reset to 0 after a successful login.
     * 
     */
    public Optional<Integer> recoveryAttempts() {
        return Optional.ofNullable(this.recoveryAttempts);
    }
    /**
     * @return The number of failed account recovery enrollment attempts.
     * 
     */
    public Optional<Integer> recoveryEnrollAttempts() {
        return Optional.ofNullable(this.recoveryEnrollAttempts);
    }
    /**
     * @return A complex attribute that indicates a password recovery is locked (blocking any new sessions).
     * 
     */
    public List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked> recoveryLockeds() {
        return this.recoveryLockeds == null ? List.of() : this.recoveryLockeds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String lastFailedLoginDate;
        private @Nullable String lastSuccessfulLoginDate;
        private @Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked> lockeds;
        private @Nullable Integer loginAttempts;
        private @Nullable Integer maxConcurrentSessions;
        private @Nullable String previousSuccessfulLoginDate;
        private @Nullable Integer recoveryAttempts;
        private @Nullable Integer recoveryEnrollAttempts;
        private @Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked> recoveryLockeds;
        public Builder() {}
        public Builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lastFailedLoginDate = defaults.lastFailedLoginDate;
    	      this.lastSuccessfulLoginDate = defaults.lastSuccessfulLoginDate;
    	      this.lockeds = defaults.lockeds;
    	      this.loginAttempts = defaults.loginAttempts;
    	      this.maxConcurrentSessions = defaults.maxConcurrentSessions;
    	      this.previousSuccessfulLoginDate = defaults.previousSuccessfulLoginDate;
    	      this.recoveryAttempts = defaults.recoveryAttempts;
    	      this.recoveryEnrollAttempts = defaults.recoveryEnrollAttempts;
    	      this.recoveryLockeds = defaults.recoveryLockeds;
        }

        @CustomType.Setter
        public Builder lastFailedLoginDate(@Nullable String lastFailedLoginDate) {
            this.lastFailedLoginDate = lastFailedLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulLoginDate(@Nullable String lastSuccessfulLoginDate) {
            this.lastSuccessfulLoginDate = lastSuccessfulLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder lockeds(@Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked> lockeds) {
            this.lockeds = lockeds;
            return this;
        }
        public Builder lockeds(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked... lockeds) {
            return lockeds(List.of(lockeds));
        }
        @CustomType.Setter
        public Builder loginAttempts(@Nullable Integer loginAttempts) {
            this.loginAttempts = loginAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentSessions(@Nullable Integer maxConcurrentSessions) {
            this.maxConcurrentSessions = maxConcurrentSessions;
            return this;
        }
        @CustomType.Setter
        public Builder previousSuccessfulLoginDate(@Nullable String previousSuccessfulLoginDate) {
            this.previousSuccessfulLoginDate = previousSuccessfulLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryAttempts(@Nullable Integer recoveryAttempts) {
            this.recoveryAttempts = recoveryAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryEnrollAttempts(@Nullable Integer recoveryEnrollAttempts) {
            this.recoveryEnrollAttempts = recoveryEnrollAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryLockeds(@Nullable List<GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked> recoveryLockeds) {
            this.recoveryLockeds = recoveryLockeds;
            return this;
        }
        public Builder recoveryLockeds(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked... recoveryLockeds) {
            return recoveryLockeds(List.of(recoveryLockeds));
        }
        public GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser build() {
            final var o = new GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser();
            o.lastFailedLoginDate = lastFailedLoginDate;
            o.lastSuccessfulLoginDate = lastSuccessfulLoginDate;
            o.lockeds = lockeds;
            o.loginAttempts = loginAttempts;
            o.maxConcurrentSessions = maxConcurrentSessions;
            o.previousSuccessfulLoginDate = previousSuccessfulLoginDate;
            o.recoveryAttempts = recoveryAttempts;
            o.recoveryEnrollAttempts = recoveryEnrollAttempts;
            o.recoveryLockeds = recoveryLockeds;
            return o;
        }
    }
}
