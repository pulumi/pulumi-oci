// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked {
    /**
     * @return Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     */
    private Boolean expired;
    /**
     * @return The date and time that the current resource was locked.
     * 
     */
    private String lockDate;
    /**
     * @return Indicates that the recovery is locked.
     * 
     */
    private Boolean on;
    /**
     * @return Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     */
    private Integer reason;

    private GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked() {}
    /**
     * @return Indicates whether the user password is expired. If this value is false, password expiry is still evaluated during user login.
     * 
     */
    public Boolean expired() {
        return this.expired;
    }
    /**
     * @return The date and time that the current resource was locked.
     * 
     */
    public String lockDate() {
        return this.lockDate;
    }
    /**
     * @return Indicates that the recovery is locked.
     * 
     */
    public Boolean on() {
        return this.on;
    }
    /**
     * @return Indicates the reason for locking the account. Valid values are: 0 - failed password login attempts, 1 - admin lock, 2 - failed reset password attempts, 3 - failed MFA login attempts, 4 - failed MFA login attempts for federated user, 5 - failed Database login attempts
     * 
     */
    public Integer reason() {
        return this.reason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean expired;
        private String lockDate;
        private Boolean on;
        private Integer reason;
        public Builder() {}
        public Builder(GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expired = defaults.expired;
    	      this.lockDate = defaults.lockDate;
    	      this.on = defaults.on;
    	      this.reason = defaults.reason;
        }

        @CustomType.Setter
        public Builder expired(Boolean expired) {
            if (expired == null) {
              throw new MissingRequiredPropertyException("GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked", "expired");
            }
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder lockDate(String lockDate) {
            if (lockDate == null) {
              throw new MissingRequiredPropertyException("GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked", "lockDate");
            }
            this.lockDate = lockDate;
            return this;
        }
        @CustomType.Setter
        public Builder on(Boolean on) {
            if (on == null) {
              throw new MissingRequiredPropertyException("GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked", "on");
            }
            this.on = on;
            return this;
        }
        @CustomType.Setter
        public Builder reason(Integer reason) {
            if (reason == null) {
              throw new MissingRequiredPropertyException("GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked", "reason");
            }
            this.reason = reason;
            return this;
        }
        public GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked build() {
            final var _resultValue = new GetDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked();
            _resultValue.expired = expired;
            _resultValue.lockDate = lockDate;
            _resultValue.on = on;
            _resultValue.reason = reason;
            return _resultValue;
        }
    }
}
