// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDynamicGroupsDynamicGroup;
import com.pulumi.oci.Identity.outputs.GetDynamicGroupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDynamicGroupsResult {
    /**
     * @return The OCID of the tenancy containing the group.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of dynamic_groups.
     * 
     */
    private @Nullable List<GetDynamicGroupsDynamicGroup> dynamicGroups;
    private @Nullable List<GetDynamicGroupsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
     * 
     */
    private @Nullable String name;
    /**
     * @return The group&#39;s current state.
     * 
     */
    private @Nullable String state;

    private GetDynamicGroupsResult() {}
    /**
     * @return The OCID of the tenancy containing the group.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of dynamic_groups.
     * 
     */
    public List<GetDynamicGroupsDynamicGroup> dynamicGroups() {
        return this.dynamicGroups == null ? List.of() : this.dynamicGroups;
    }
    public List<GetDynamicGroupsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The group&#39;s current state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDynamicGroupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetDynamicGroupsDynamicGroup> dynamicGroups;
        private @Nullable List<GetDynamicGroupsFilter> filters;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetDynamicGroupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dynamicGroups = defaults.dynamicGroups;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder dynamicGroups(@Nullable List<GetDynamicGroupsDynamicGroup> dynamicGroups) {
            this.dynamicGroups = dynamicGroups;
            return this;
        }
        public Builder dynamicGroups(GetDynamicGroupsDynamicGroup... dynamicGroups) {
            return dynamicGroups(List.of(dynamicGroups));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDynamicGroupsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDynamicGroupsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetDynamicGroupsResult build() {
            final var o = new GetDynamicGroupsResult();
            o.compartmentId = compartmentId;
            o.dynamicGroups = dynamicGroups;
            o.filters = filters;
            o.id = id;
            o.name = name;
            o.state = state;
            return o;
        }
    }
}
