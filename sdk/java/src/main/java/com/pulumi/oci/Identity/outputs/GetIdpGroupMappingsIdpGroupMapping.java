// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIdpGroupMappingsIdpGroupMapping {
    /**
     * @return The OCID of the tenancy containing the `IdentityProvider`.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the IAM Service group that is mapped to the IdP group.
     * 
     */
    private String groupId;
    /**
     * @return The OCID of the `IdpGroupMapping`.
     * 
     */
    private String id;
    /**
     * @return The OCID of the identity provider.
     * 
     */
    private String identityProviderId;
    /**
     * @return The name of the IdP group that is mapped to the IAM Service group.
     * 
     */
    private String idpGroupName;
    /**
     * @return The detailed status of INACTIVE lifecycleState.
     * 
     */
    private String inactiveState;
    /**
     * @return The mapping&#39;s current state.
     * 
     */
    private String state;
    /**
     * @return Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetIdpGroupMappingsIdpGroupMapping() {}
    /**
     * @return The OCID of the tenancy containing the `IdentityProvider`.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the IAM Service group that is mapped to the IdP group.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The OCID of the `IdpGroupMapping`.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the identity provider.
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return The name of the IdP group that is mapped to the IAM Service group.
     * 
     */
    public String idpGroupName() {
        return this.idpGroupName;
    }
    /**
     * @return The detailed status of INACTIVE lifecycleState.
     * 
     */
    public String inactiveState() {
        return this.inactiveState;
    }
    /**
     * @return The mapping&#39;s current state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the mapping was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIdpGroupMappingsIdpGroupMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String groupId;
        private String id;
        private String identityProviderId;
        private String idpGroupName;
        private String inactiveState;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetIdpGroupMappingsIdpGroupMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.idpGroupName = defaults.idpGroupName;
    	      this.inactiveState = defaults.inactiveState;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            if (identityProviderId == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "identityProviderId");
            }
            this.identityProviderId = identityProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder idpGroupName(String idpGroupName) {
            if (idpGroupName == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "idpGroupName");
            }
            this.idpGroupName = idpGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveState(String inactiveState) {
            if (inactiveState == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "inactiveState");
            }
            this.inactiveState = inactiveState;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetIdpGroupMappingsIdpGroupMapping", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetIdpGroupMappingsIdpGroupMapping build() {
            final var _resultValue = new GetIdpGroupMappingsIdpGroupMapping();
            _resultValue.compartmentId = compartmentId;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.idpGroupName = idpGroupName;
            _resultValue.inactiveState = inactiveState;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
