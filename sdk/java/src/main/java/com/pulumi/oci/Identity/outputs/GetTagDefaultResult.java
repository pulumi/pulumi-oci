// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTagDefaultResult {
    /**
     * @return The OCID of the compartment. The tag default applies to all new resources that get created in the compartment. Resources that existed before the tag default was created are not tagged.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The OCID of the tag default.
     * 
     */
    private @Nullable String id;
    /**
     * @return If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
     * * If the `isRequired` flag is set to &#34;true&#34;, the value is set during resource creation.
     * * If the `isRequired` flag is set to &#34;false&#34;, the value you enter is set during resource creation.
     * 
     */
    private @Nullable Boolean isRequired;
    /**
     * @return The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    private @Nullable String state;
    private String tagDefaultId;
    /**
     * @return The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    private @Nullable String tagDefinitionId;
    /**
     * @return The name used in the tag definition. This field is informational in the context of the tag default.
     * 
     */
    private @Nullable String tagDefinitionName;
    /**
     * @return The OCID of the tag namespace that contains the tag definition.
     * 
     */
    private @Nullable String tagNamespaceId;
    /**
     * @return Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The default value for the tag definition. This will be applied to all new resources created in the compartment.
     * 
     */
    private @Nullable String value;

    private GetTagDefaultResult() {}
    /**
     * @return The OCID of the compartment. The tag default applies to all new resources that get created in the compartment. Resources that existed before the tag default was created are not tagged.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The OCID of the tag default.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
     * * If the `isRequired` flag is set to &#34;true&#34;, the value is set during resource creation.
     * * If the `isRequired` flag is set to &#34;false&#34;, the value you enter is set during resource creation.
     * 
     */
    public Optional<Boolean> isRequired() {
        return Optional.ofNullable(this.isRequired);
    }
    /**
     * @return The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public String tagDefaultId() {
        return this.tagDefaultId;
    }
    /**
     * @return The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    public Optional<String> tagDefinitionId() {
        return Optional.ofNullable(this.tagDefinitionId);
    }
    /**
     * @return The name used in the tag definition. This field is informational in the context of the tag default.
     * 
     */
    public Optional<String> tagDefinitionName() {
        return Optional.ofNullable(this.tagDefinitionName);
    }
    /**
     * @return The OCID of the tag namespace that contains the tag definition.
     * 
     */
    public Optional<String> tagNamespaceId() {
        return Optional.ofNullable(this.tagNamespaceId);
    }
    /**
     * @return Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The default value for the tag definition. This will be applied to all new resources created in the compartment.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagDefaultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String id;
        private @Nullable Boolean isRequired;
        private @Nullable String state;
        private String tagDefaultId;
        private @Nullable String tagDefinitionId;
        private @Nullable String tagDefinitionName;
        private @Nullable String tagNamespaceId;
        private @Nullable String timeCreated;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetTagDefaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isRequired = defaults.isRequired;
    	      this.state = defaults.state;
    	      this.tagDefaultId = defaults.tagDefaultId;
    	      this.tagDefinitionId = defaults.tagDefinitionId;
    	      this.tagDefinitionName = defaults.tagDefinitionName;
    	      this.tagNamespaceId = defaults.tagNamespaceId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRequired(@Nullable Boolean isRequired) {
            this.isRequired = isRequired;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tagDefaultId(String tagDefaultId) {
            this.tagDefaultId = Objects.requireNonNull(tagDefaultId);
            return this;
        }
        @CustomType.Setter
        public Builder tagDefinitionId(@Nullable String tagDefinitionId) {
            this.tagDefinitionId = tagDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder tagDefinitionName(@Nullable String tagDefinitionName) {
            this.tagDefinitionName = tagDefinitionName;
            return this;
        }
        @CustomType.Setter
        public Builder tagNamespaceId(@Nullable String tagNamespaceId) {
            this.tagNamespaceId = tagNamespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        public GetTagDefaultResult build() {
            final var o = new GetTagDefaultResult();
            o.compartmentId = compartmentId;
            o.id = id;
            o.isRequired = isRequired;
            o.state = state;
            o.tagDefaultId = tagDefaultId;
            o.tagDefinitionId = tagDefinitionId;
            o.tagDefinitionName = tagDefinitionName;
            o.tagNamespaceId = tagNamespaceId;
            o.timeCreated = timeCreated;
            o.value = value;
            return o;
        }
    }
}
