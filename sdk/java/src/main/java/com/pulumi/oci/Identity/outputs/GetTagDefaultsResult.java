// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Identity.outputs.GetTagDefaultsFilter;
import com.pulumi.oci.Identity.outputs.GetTagDefaultsTagDefault;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTagDefaultsResult {
    /**
     * @return The OCID of the compartment. The tag default applies to all new resources that get created in the compartment. Resources that existed before the tag default was created are not tagged.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable List<GetTagDefaultsFilter> filters;
    /**
     * @return The OCID of the tag default.
     * 
     */
    private @Nullable String id;
    /**
     * @return The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    private @Nullable String state;
    /**
     * @return The list of tag_defaults.
     * 
     */
    private List<GetTagDefaultsTagDefault> tagDefaults;
    /**
     * @return The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    private @Nullable String tagDefinitionId;

    private GetTagDefaultsResult() {}
    /**
     * @return The OCID of the compartment. The tag default applies to all new resources that get created in the compartment. Resources that existed before the tag default was created are not tagged.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetTagDefaultsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The OCID of the tag default.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The list of tag_defaults.
     * 
     */
    public List<GetTagDefaultsTagDefault> tagDefaults() {
        return this.tagDefaults;
    }
    /**
     * @return The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    public Optional<String> tagDefinitionId() {
        return Optional.ofNullable(this.tagDefinitionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagDefaultsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetTagDefaultsFilter> filters;
        private @Nullable String id;
        private @Nullable String state;
        private List<GetTagDefaultsTagDefault> tagDefaults;
        private @Nullable String tagDefinitionId;
        public Builder() {}
        public Builder(GetTagDefaultsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.tagDefaults = defaults.tagDefaults;
    	      this.tagDefinitionId = defaults.tagDefinitionId;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetTagDefaultsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetTagDefaultsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tagDefaults(List<GetTagDefaultsTagDefault> tagDefaults) {
            if (tagDefaults == null) {
              throw new MissingRequiredPropertyException("GetTagDefaultsResult", "tagDefaults");
            }
            this.tagDefaults = tagDefaults;
            return this;
        }
        public Builder tagDefaults(GetTagDefaultsTagDefault... tagDefaults) {
            return tagDefaults(List.of(tagDefaults));
        }
        @CustomType.Setter
        public Builder tagDefinitionId(@Nullable String tagDefinitionId) {

            this.tagDefinitionId = tagDefinitionId;
            return this;
        }
        public GetTagDefaultsResult build() {
            final var _resultValue = new GetTagDefaultsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.tagDefaults = tagDefaults;
            _resultValue.tagDefinitionId = tagDefinitionId;
            return _resultValue;
        }
    }
}
