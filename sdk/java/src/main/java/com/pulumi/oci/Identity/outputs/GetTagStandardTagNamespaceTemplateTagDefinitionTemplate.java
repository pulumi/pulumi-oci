// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTagStandardTagNamespaceTemplateTagDefinitionTemplate {
    /**
     * @return The default description of the tag namespace that users can use to create the tag definition
     * 
     */
    private @Nullable String description;
    /**
     * @return The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
     * 
     */
    private @Nullable String enumMutability;
    /**
     * @return Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
     * 
     */
    private @Nullable Boolean isCostTracking;
    /**
     * @return List of possible values. An optional parameter that will be present if the type of definition is enum.
     * 
     */
    private @Nullable List<String> possibleValues;
    /**
     * @return The name of this standard tag definition
     * 
     */
    private @Nullable String tagDefinitionName;
    /**
     * @return The type of tag definition. Enum or string.
     * 
     */
    private @Nullable String type;

    private GetTagStandardTagNamespaceTemplateTagDefinitionTemplate() {}
    /**
     * @return The default description of the tag namespace that users can use to create the tag definition
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The mutability of the possible values list for enum tags. This will default to IMMUTABLE for string value tags
     * 
     */
    public Optional<String> enumMutability() {
        return Optional.ofNullable(this.enumMutability);
    }
    /**
     * @return Is the tag a cost tracking tag. Default will be false as cost tracking tags have been deprecated
     * 
     */
    public Optional<Boolean> isCostTracking() {
        return Optional.ofNullable(this.isCostTracking);
    }
    /**
     * @return List of possible values. An optional parameter that will be present if the type of definition is enum.
     * 
     */
    public List<String> possibleValues() {
        return this.possibleValues == null ? List.of() : this.possibleValues;
    }
    /**
     * @return The name of this standard tag definition
     * 
     */
    public Optional<String> tagDefinitionName() {
        return Optional.ofNullable(this.tagDefinitionName);
    }
    /**
     * @return The type of tag definition. Enum or string.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagStandardTagNamespaceTemplateTagDefinitionTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String enumMutability;
        private @Nullable Boolean isCostTracking;
        private @Nullable List<String> possibleValues;
        private @Nullable String tagDefinitionName;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetTagStandardTagNamespaceTemplateTagDefinitionTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.enumMutability = defaults.enumMutability;
    	      this.isCostTracking = defaults.isCostTracking;
    	      this.possibleValues = defaults.possibleValues;
    	      this.tagDefinitionName = defaults.tagDefinitionName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enumMutability(@Nullable String enumMutability) {
            this.enumMutability = enumMutability;
            return this;
        }
        @CustomType.Setter
        public Builder isCostTracking(@Nullable Boolean isCostTracking) {
            this.isCostTracking = isCostTracking;
            return this;
        }
        @CustomType.Setter
        public Builder possibleValues(@Nullable List<String> possibleValues) {
            this.possibleValues = possibleValues;
            return this;
        }
        public Builder possibleValues(String... possibleValues) {
            return possibleValues(List.of(possibleValues));
        }
        @CustomType.Setter
        public Builder tagDefinitionName(@Nullable String tagDefinitionName) {
            this.tagDefinitionName = tagDefinitionName;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetTagStandardTagNamespaceTemplateTagDefinitionTemplate build() {
            final var o = new GetTagStandardTagNamespaceTemplateTagDefinitionTemplate();
            o.description = description;
            o.enumMutability = enumMutability;
            o.isCostTracking = isCostTracking;
            o.possibleValues = possibleValues;
            o.tagDefinitionName = tagDefinitionName;
            o.type = type;
            return o;
        }
    }
}
