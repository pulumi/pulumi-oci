// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetUserCapability;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return Properties indicating how the user is allowed to authenticate.
     * 
     */
    private List<GetUserCapability> capabilities;
    /**
     * @return The OCID of the tenancy containing the user.
     * 
     */
    private String compartmentId;
    /**
     * @return DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The description you assign to the user. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    private String description;
    /**
     * @return The email address you assign to the user. The email address must be unique across all users in the tenancy.
     * 
     */
    private String email;
    /**
     * @return Whether the email address has been validated.
     * 
     */
    private Boolean emailVerified;
    /**
     * @return Identifier of the user in the identity provider
     * 
     */
    private String externalIdentifier;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the user.
     * 
     */
    private String id;
    /**
     * @return The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    private String identityProviderId;
    /**
     * @return Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    private String inactiveState;
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    private String lastSuccessfulLoginTime;
    /**
     * @return The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    private String name;
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    private String previousSuccessfulLoginTime;
    /**
     * @return The user&#39;s current state.
     * 
     */
    private String state;
    /**
     * @return Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    private String userId;

    private GetUserResult() {}
    /**
     * @return Properties indicating how the user is allowed to authenticate.
     * 
     */
    public List<GetUserCapability> capabilities() {
        return this.capabilities;
    }
    /**
     * @return The OCID of the tenancy containing the user.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description you assign to the user. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The email address you assign to the user. The email address must be unique across all users in the tenancy.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Whether the email address has been validated.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return Identifier of the user in the identity provider
     * 
     */
    public String externalIdentifier() {
        return this.externalIdentifier;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    public String inactiveState() {
        return this.inactiveState;
    }
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public String lastSuccessfulLoginTime() {
        return this.lastSuccessfulLoginTime;
    }
    /**
     * @return The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public String previousSuccessfulLoginTime() {
        return this.previousSuccessfulLoginTime;
    }
    /**
     * @return The user&#39;s current state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetUserCapability> capabilities;
        private String compartmentId;
        private String dbUserName;
        private Map<String,Object> definedTags;
        private String description;
        private String email;
        private Boolean emailVerified;
        private String externalIdentifier;
        private Map<String,Object> freeformTags;
        private String id;
        private String identityProviderId;
        private String inactiveState;
        private String lastSuccessfulLoginTime;
        private String name;
        private String previousSuccessfulLoginTime;
        private String state;
        private String timeCreated;
        private String userId;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.externalIdentifier = defaults.externalIdentifier;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.inactiveState = defaults.inactiveState;
    	      this.lastSuccessfulLoginTime = defaults.lastSuccessfulLoginTime;
    	      this.name = defaults.name;
    	      this.previousSuccessfulLoginTime = defaults.previousSuccessfulLoginTime;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder capabilities(List<GetUserCapability> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder capabilities(GetUserCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            this.dbUserName = Objects.requireNonNull(dbUserName);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder emailVerified(Boolean emailVerified) {
            this.emailVerified = Objects.requireNonNull(emailVerified);
            return this;
        }
        @CustomType.Setter
        public Builder externalIdentifier(String externalIdentifier) {
            this.externalIdentifier = Objects.requireNonNull(externalIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            this.identityProviderId = Objects.requireNonNull(identityProviderId);
            return this;
        }
        @CustomType.Setter
        public Builder inactiveState(String inactiveState) {
            this.inactiveState = Objects.requireNonNull(inactiveState);
            return this;
        }
        @CustomType.Setter
        public Builder lastSuccessfulLoginTime(String lastSuccessfulLoginTime) {
            this.lastSuccessfulLoginTime = Objects.requireNonNull(lastSuccessfulLoginTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder previousSuccessfulLoginTime(String previousSuccessfulLoginTime) {
            this.previousSuccessfulLoginTime = Objects.requireNonNull(previousSuccessfulLoginTime);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        public GetUserResult build() {
            final var o = new GetUserResult();
            o.capabilities = capabilities;
            o.compartmentId = compartmentId;
            o.dbUserName = dbUserName;
            o.definedTags = definedTags;
            o.description = description;
            o.email = email;
            o.emailVerified = emailVerified;
            o.externalIdentifier = externalIdentifier;
            o.freeformTags = freeformTags;
            o.id = id;
            o.identityProviderId = identityProviderId;
            o.inactiveState = inactiveState;
            o.lastSuccessfulLoginTime = lastSuccessfulLoginTime;
            o.name = name;
            o.previousSuccessfulLoginTime = previousSuccessfulLoginTime;
            o.state = state;
            o.timeCreated = timeCreated;
            o.userId = userId;
            return o;
        }
    }
}
