// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Jms.inputs.FleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsArgs;
import com.pulumi.oci.Jms.inputs.FleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxiesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs Empty = new FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs();

    /**
     * (Updatable) Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
     * 
     */
    @Import(name="addLoggingHandler")
    private @Nullable Output<Boolean> addLoggingHandler;

    /**
     * @return (Updatable) Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
     * 
     */
    public Optional<Output<Boolean>> addLoggingHandler() {
        return Optional.ofNullable(this.addLoggingHandler);
    }

    /**
     * (Updatable) The following post JRE installation actions are supported by the field:
     * * Disable TLS 1.0 , TLS 1.1
     * 
     */
    @Import(name="disabledTlsVersions")
    private @Nullable Output<List<String>> disabledTlsVersions;

    /**
     * @return (Updatable) The following post JRE installation actions are supported by the field:
     * * Disable TLS 1.0 , TLS 1.1
     * 
     */
    public Optional<Output<List<String>>> disabledTlsVersions() {
        return Optional.ofNullable(this.disabledTlsVersions);
    }

    /**
     * (Updatable) Sets the logging level in logging.properties file.
     * 
     */
    @Import(name="globalLoggingLevel")
    private @Nullable Output<String> globalLoggingLevel;

    /**
     * @return (Updatable) Sets the logging level in logging.properties file.
     * 
     */
    public Optional<Output<String>> globalLoggingLevel() {
        return Optional.ofNullable(this.globalLoggingLevel);
    }

    /**
     * (Updatable) test
     * 
     */
    @Import(name="minimumKeySizeSettings")
    private @Nullable Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsArgs> minimumKeySizeSettings;

    /**
     * @return (Updatable) test
     * 
     */
    public Optional<Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsArgs>> minimumKeySizeSettings() {
        return Optional.ofNullable(this.minimumKeySizeSettings);
    }

    /**
     * (Updatable) List of proxy properties to be configured in net.properties file.
     * 
     */
    @Import(name="proxies")
    private @Nullable Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxiesArgs> proxies;

    /**
     * @return (Updatable) List of proxy properties to be configured in net.properties file.
     * 
     */
    public Optional<Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxiesArgs>> proxies() {
        return Optional.ofNullable(this.proxies);
    }

    /**
     * (Updatable) Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
     * * Replace JDK root certificates with a list provided by the operating system.
     * 
     */
    @Import(name="shouldReplaceCertificatesOperatingSystem")
    private @Nullable Output<Boolean> shouldReplaceCertificatesOperatingSystem;

    /**
     * @return (Updatable) Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
     * * Replace JDK root certificates with a list provided by the operating system.
     * 
     */
    public Optional<Output<Boolean>> shouldReplaceCertificatesOperatingSystem() {
        return Optional.ofNullable(this.shouldReplaceCertificatesOperatingSystem);
    }

    private FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs() {}

    private FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs(FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs $) {
        this.addLoggingHandler = $.addLoggingHandler;
        this.disabledTlsVersions = $.disabledTlsVersions;
        this.globalLoggingLevel = $.globalLoggingLevel;
        this.minimumKeySizeSettings = $.minimumKeySizeSettings;
        this.proxies = $.proxies;
        this.shouldReplaceCertificatesOperatingSystem = $.shouldReplaceCertificatesOperatingSystem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs $;

        public Builder() {
            $ = new FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs();
        }

        public Builder(FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs defaults) {
            $ = new FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addLoggingHandler (Updatable) Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
         * 
         * @return builder
         * 
         */
        public Builder addLoggingHandler(@Nullable Output<Boolean> addLoggingHandler) {
            $.addLoggingHandler = addLoggingHandler;
            return this;
        }

        /**
         * @param addLoggingHandler (Updatable) Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
         * 
         * @return builder
         * 
         */
        public Builder addLoggingHandler(Boolean addLoggingHandler) {
            return addLoggingHandler(Output.of(addLoggingHandler));
        }

        /**
         * @param disabledTlsVersions (Updatable) The following post JRE installation actions are supported by the field:
         * * Disable TLS 1.0 , TLS 1.1
         * 
         * @return builder
         * 
         */
        public Builder disabledTlsVersions(@Nullable Output<List<String>> disabledTlsVersions) {
            $.disabledTlsVersions = disabledTlsVersions;
            return this;
        }

        /**
         * @param disabledTlsVersions (Updatable) The following post JRE installation actions are supported by the field:
         * * Disable TLS 1.0 , TLS 1.1
         * 
         * @return builder
         * 
         */
        public Builder disabledTlsVersions(List<String> disabledTlsVersions) {
            return disabledTlsVersions(Output.of(disabledTlsVersions));
        }

        /**
         * @param disabledTlsVersions (Updatable) The following post JRE installation actions are supported by the field:
         * * Disable TLS 1.0 , TLS 1.1
         * 
         * @return builder
         * 
         */
        public Builder disabledTlsVersions(String... disabledTlsVersions) {
            return disabledTlsVersions(List.of(disabledTlsVersions));
        }

        /**
         * @param globalLoggingLevel (Updatable) Sets the logging level in logging.properties file.
         * 
         * @return builder
         * 
         */
        public Builder globalLoggingLevel(@Nullable Output<String> globalLoggingLevel) {
            $.globalLoggingLevel = globalLoggingLevel;
            return this;
        }

        /**
         * @param globalLoggingLevel (Updatable) Sets the logging level in logging.properties file.
         * 
         * @return builder
         * 
         */
        public Builder globalLoggingLevel(String globalLoggingLevel) {
            return globalLoggingLevel(Output.of(globalLoggingLevel));
        }

        /**
         * @param minimumKeySizeSettings (Updatable) test
         * 
         * @return builder
         * 
         */
        public Builder minimumKeySizeSettings(@Nullable Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsArgs> minimumKeySizeSettings) {
            $.minimumKeySizeSettings = minimumKeySizeSettings;
            return this;
        }

        /**
         * @param minimumKeySizeSettings (Updatable) test
         * 
         * @return builder
         * 
         */
        public Builder minimumKeySizeSettings(FleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsArgs minimumKeySizeSettings) {
            return minimumKeySizeSettings(Output.of(minimumKeySizeSettings));
        }

        /**
         * @param proxies (Updatable) List of proxy properties to be configured in net.properties file.
         * 
         * @return builder
         * 
         */
        public Builder proxies(@Nullable Output<FleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxiesArgs> proxies) {
            $.proxies = proxies;
            return this;
        }

        /**
         * @param proxies (Updatable) List of proxy properties to be configured in net.properties file.
         * 
         * @return builder
         * 
         */
        public Builder proxies(FleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxiesArgs proxies) {
            return proxies(Output.of(proxies));
        }

        /**
         * @param shouldReplaceCertificatesOperatingSystem (Updatable) Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
         * * Replace JDK root certificates with a list provided by the operating system.
         * 
         * @return builder
         * 
         */
        public Builder shouldReplaceCertificatesOperatingSystem(@Nullable Output<Boolean> shouldReplaceCertificatesOperatingSystem) {
            $.shouldReplaceCertificatesOperatingSystem = shouldReplaceCertificatesOperatingSystem;
            return this;
        }

        /**
         * @param shouldReplaceCertificatesOperatingSystem (Updatable) Restores JDK root certificates with the certificates that are available in the operating system. The following action is supported by the field:
         * * Replace JDK root certificates with a list provided by the operating system.
         * 
         * @return builder
         * 
         */
        public Builder shouldReplaceCertificatesOperatingSystem(Boolean shouldReplaceCertificatesOperatingSystem) {
            return shouldReplaceCertificatesOperatingSystem(Output.of(shouldReplaceCertificatesOperatingSystem));
        }

        public FleetAdvancedFeatureConfigurationLcmPostInstallationActionsArgs build() {
            return $;
        }
    }

}
