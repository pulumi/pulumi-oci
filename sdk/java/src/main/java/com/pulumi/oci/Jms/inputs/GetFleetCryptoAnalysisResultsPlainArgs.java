// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Jms.inputs.GetFleetCryptoAnalysisResultsFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFleetCryptoAnalysisResultsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFleetCryptoAnalysisResultsPlainArgs Empty = new GetFleetCryptoAnalysisResultsPlainArgs();

    /**
     * The aggregation mode of the crypto event analysis result.
     * 
     */
    @Import(name="aggregationMode")
    private @Nullable String aggregationMode;

    /**
     * @return The aggregation mode of the crypto event analysis result.
     * 
     */
    public Optional<String> aggregationMode() {
        return Optional.ofNullable(this.aggregationMode);
    }

    @Import(name="filters")
    private @Nullable List<GetFleetCryptoAnalysisResultsFilter> filters;

    public Optional<List<GetFleetCryptoAnalysisResultsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * FindingCount of CryptoAnalysis Report.
     * 
     */
    @Import(name="findingCount")
    private @Nullable Integer findingCount;

    /**
     * @return FindingCount of CryptoAnalysis Report.
     * 
     */
    public Optional<Integer> findingCount() {
        return Optional.ofNullable(this.findingCount);
    }

    /**
     * FindingCount of CryptoAnalysis Report.
     * 
     */
    @Import(name="findingCountGreaterThan")
    private @Nullable Integer findingCountGreaterThan;

    /**
     * @return FindingCount of CryptoAnalysis Report.
     * 
     */
    public Optional<Integer> findingCountGreaterThan() {
        return Optional.ofNullable(this.findingCountGreaterThan);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    @Import(name="fleetId", required=true)
    private String fleetId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    public String fleetId() {
        return this.fleetId;
    }

    /**
     * The host [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
     * 
     */
    @Import(name="hostName")
    private @Nullable String hostName;

    /**
     * @return The host [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The Fleet-unique identifier of the related managed instance.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable String managedInstanceId;

    /**
     * @return The Fleet-unique identifier of the related managed instance.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * Non Compliant Finding Count of CryptoAnalysis Report.
     * 
     */
    @Import(name="nonCompliantFindingCount")
    private @Nullable Integer nonCompliantFindingCount;

    /**
     * @return Non Compliant Finding Count of CryptoAnalysis Report.
     * 
     */
    public Optional<Integer> nonCompliantFindingCount() {
        return Optional.ofNullable(this.nonCompliantFindingCount);
    }

    /**
     * Non Compliant Finding Count of CryptoAnalysis Report.
     * 
     */
    @Import(name="nonCompliantFindingCountGreaterThan")
    private @Nullable Integer nonCompliantFindingCountGreaterThan;

    /**
     * @return Non Compliant Finding Count of CryptoAnalysis Report.
     * 
     */
    public Optional<Integer> nonCompliantFindingCountGreaterThan() {
        return Optional.ofNullable(this.nonCompliantFindingCountGreaterThan);
    }

    /**
     * The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeEnd")
    private @Nullable String timeEnd;

    /**
     * @return The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }

    /**
     * The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeStart")
    private @Nullable String timeStart;

    /**
     * @return The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }

    private GetFleetCryptoAnalysisResultsPlainArgs() {}

    private GetFleetCryptoAnalysisResultsPlainArgs(GetFleetCryptoAnalysisResultsPlainArgs $) {
        this.aggregationMode = $.aggregationMode;
        this.filters = $.filters;
        this.findingCount = $.findingCount;
        this.findingCountGreaterThan = $.findingCountGreaterThan;
        this.fleetId = $.fleetId;
        this.hostName = $.hostName;
        this.managedInstanceId = $.managedInstanceId;
        this.nonCompliantFindingCount = $.nonCompliantFindingCount;
        this.nonCompliantFindingCountGreaterThan = $.nonCompliantFindingCountGreaterThan;
        this.timeEnd = $.timeEnd;
        this.timeStart = $.timeStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFleetCryptoAnalysisResultsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFleetCryptoAnalysisResultsPlainArgs $;

        public Builder() {
            $ = new GetFleetCryptoAnalysisResultsPlainArgs();
        }

        public Builder(GetFleetCryptoAnalysisResultsPlainArgs defaults) {
            $ = new GetFleetCryptoAnalysisResultsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationMode The aggregation mode of the crypto event analysis result.
         * 
         * @return builder
         * 
         */
        public Builder aggregationMode(@Nullable String aggregationMode) {
            $.aggregationMode = aggregationMode;
            return this;
        }

        public Builder filters(@Nullable List<GetFleetCryptoAnalysisResultsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetFleetCryptoAnalysisResultsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param findingCount FindingCount of CryptoAnalysis Report.
         * 
         * @return builder
         * 
         */
        public Builder findingCount(@Nullable Integer findingCount) {
            $.findingCount = findingCount;
            return this;
        }

        /**
         * @param findingCountGreaterThan FindingCount of CryptoAnalysis Report.
         * 
         * @return builder
         * 
         */
        public Builder findingCountGreaterThan(@Nullable Integer findingCountGreaterThan) {
            $.findingCountGreaterThan = findingCountGreaterThan;
            return this;
        }

        /**
         * @param fleetId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(String fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param hostName The host [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param managedInstanceId The Fleet-unique identifier of the related managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable String managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param nonCompliantFindingCount Non Compliant Finding Count of CryptoAnalysis Report.
         * 
         * @return builder
         * 
         */
        public Builder nonCompliantFindingCount(@Nullable Integer nonCompliantFindingCount) {
            $.nonCompliantFindingCount = nonCompliantFindingCount;
            return this;
        }

        /**
         * @param nonCompliantFindingCountGreaterThan Non Compliant Finding Count of CryptoAnalysis Report.
         * 
         * @return builder
         * 
         */
        public Builder nonCompliantFindingCountGreaterThan(@Nullable Integer nonCompliantFindingCountGreaterThan) {
            $.nonCompliantFindingCountGreaterThan = nonCompliantFindingCountGreaterThan;
            return this;
        }

        /**
         * @param timeEnd The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeEnd(@Nullable String timeEnd) {
            $.timeEnd = timeEnd;
            return this;
        }

        /**
         * @param timeStart The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeStart(@Nullable String timeStart) {
            $.timeStart = timeStart;
            return this;
        }

        public GetFleetCryptoAnalysisResultsPlainArgs build() {
            if ($.fleetId == null) {
                throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultsPlainArgs", "fleetId");
            }
            return $;
        }
    }

}
