// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Jms.inputs.TaskScheduleTaskDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final TaskScheduleState Empty = new TaskScheduleState();

    /**
     * Name of the task creator.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Name of the task creator.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
     * 
     */
    @Import(name="executionRecurrences")
    private @Nullable Output<String> executionRecurrences;

    /**
     * @return (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
     * 
     */
    public Optional<Output<String>> executionRecurrences() {
        return Optional.ofNullable(this.executionRecurrences);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    @Import(name="fleetId")
    private @Nullable Output<String> fleetId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    public Optional<Output<String>> fleetId() {
        return Optional.ofNullable(this.fleetId);
    }

    /**
     * The name of the task schedule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the task schedule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * All possible status of task schedule.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return All possible status of task schedule.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) The minimum details of a task.
     * 
     */
    @Import(name="taskDetails")
    private @Nullable Output<TaskScheduleTaskDetailsArgs> taskDetails;

    /**
     * @return (Updatable) The minimum details of a task.
     * 
     */
    public Optional<Output<TaskScheduleTaskDetailsArgs>> taskDetails() {
        return Optional.ofNullable(this.taskDetails);
    }

    /**
     * The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeLastRun")
    private @Nullable Output<String> timeLastRun;

    /**
     * @return The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeLastRun() {
        return Optional.ofNullable(this.timeLastRun);
    }

    /**
     * The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeLastUpdated")
    private @Nullable Output<String> timeLastUpdated;

    /**
     * @return The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeLastUpdated() {
        return Optional.ofNullable(this.timeLastUpdated);
    }

    /**
     * The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeNextRun")
    private @Nullable Output<String> timeNextRun;

    /**
     * @return The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeNextRun() {
        return Optional.ofNullable(this.timeNextRun);
    }

    private TaskScheduleState() {}

    private TaskScheduleState(TaskScheduleState $) {
        this.createdBy = $.createdBy;
        this.executionRecurrences = $.executionRecurrences;
        this.fleetId = $.fleetId;
        this.name = $.name;
        this.state = $.state;
        this.taskDetails = $.taskDetails;
        this.timeCreated = $.timeCreated;
        this.timeLastRun = $.timeLastRun;
        this.timeLastUpdated = $.timeLastUpdated;
        this.timeNextRun = $.timeNextRun;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskScheduleState $;

        public Builder() {
            $ = new TaskScheduleState();
        }

        public Builder(TaskScheduleState defaults) {
            $ = new TaskScheduleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy Name of the task creator.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Name of the task creator.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param executionRecurrences (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
         * 
         * @return builder
         * 
         */
        public Builder executionRecurrences(@Nullable Output<String> executionRecurrences) {
            $.executionRecurrences = executionRecurrences;
            return this;
        }

        /**
         * @param executionRecurrences (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
         * 
         * @return builder
         * 
         */
        public Builder executionRecurrences(String executionRecurrences) {
            return executionRecurrences(Output.of(executionRecurrences));
        }

        /**
         * @param fleetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(@Nullable Output<String> fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param fleetId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(String fleetId) {
            return fleetId(Output.of(fleetId));
        }

        /**
         * @param name The name of the task schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the task schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state All possible status of task schedule.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state All possible status of task schedule.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param taskDetails (Updatable) The minimum details of a task.
         * 
         * @return builder
         * 
         */
        public Builder taskDetails(@Nullable Output<TaskScheduleTaskDetailsArgs> taskDetails) {
            $.taskDetails = taskDetails;
            return this;
        }

        /**
         * @param taskDetails (Updatable) The minimum details of a task.
         * 
         * @return builder
         * 
         */
        public Builder taskDetails(TaskScheduleTaskDetailsArgs taskDetails) {
            return taskDetails(Output.of(taskDetails));
        }

        /**
         * @param timeCreated The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeLastRun The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeLastRun(@Nullable Output<String> timeLastRun) {
            $.timeLastRun = timeLastRun;
            return this;
        }

        /**
         * @param timeLastRun The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeLastRun(String timeLastRun) {
            return timeLastRun(Output.of(timeLastRun));
        }

        /**
         * @param timeLastUpdated The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeLastUpdated(@Nullable Output<String> timeLastUpdated) {
            $.timeLastUpdated = timeLastUpdated;
            return this;
        }

        /**
         * @param timeLastUpdated The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeLastUpdated(String timeLastUpdated) {
            return timeLastUpdated(Output.of(timeLastUpdated));
        }

        /**
         * @param timeNextRun The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeNextRun(@Nullable Output<String> timeNextRun) {
            $.timeNextRun = timeNextRun;
            return this;
        }

        /**
         * @param timeNextRun The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeNextRun(String timeNextRun) {
            return timeNextRun(Output.of(timeNextRun));
        }

        public TaskScheduleState build() {
            return $;
        }
    }

}
