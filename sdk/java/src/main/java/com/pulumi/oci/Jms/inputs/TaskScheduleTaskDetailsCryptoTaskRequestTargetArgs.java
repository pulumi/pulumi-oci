// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs Empty = new TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs();

    /**
     * (Updatable) Unique key that identifies the application installation for JFR data collection.
     * 
     */
    @Import(name="applicationInstallationKey")
    private @Nullable Output<String> applicationInstallationKey;

    /**
     * @return (Updatable) Unique key that identifies the application installation for JFR data collection.
     * 
     */
    public Optional<Output<String>> applicationInstallationKey() {
        return Optional.ofNullable(this.applicationInstallationKey);
    }

    /**
     * (Updatable) Unique key that identifies the application for JFR data collection.
     * 
     */
    @Import(name="applicationKey")
    private @Nullable Output<String> applicationKey;

    /**
     * @return (Updatable) Unique key that identifies the application for JFR data collection.
     * 
     */
    public Optional<Output<String>> applicationKey() {
        return Optional.ofNullable(this.applicationKey);
    }

    /**
     * (Updatable) Unique key that identifies the container for JFR data collection.
     * 
     */
    @Import(name="containerKey")
    private @Nullable Output<String> containerKey;

    /**
     * @return (Updatable) Unique key that identifies the container for JFR data collection.
     * 
     */
    public Optional<Output<String>> containerKey() {
        return Optional.ofNullable(this.containerKey);
    }

    /**
     * (Updatable) Unique key that identify the JVM for JFR data collection.
     * 
     */
    @Import(name="jreKey")
    private @Nullable Output<String> jreKey;

    /**
     * @return (Updatable) Unique key that identify the JVM for JFR data collection.
     * 
     */
    public Optional<Output<String>> jreKey() {
        return Optional.ofNullable(this.jreKey);
    }

    /**
     * (Updatable) OCID of the Managed Instance to collect JFR data.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable Output<String> managedInstanceId;

    /**
     * @return (Updatable) OCID of the Managed Instance to collect JFR data.
     * 
     */
    public Optional<Output<String>> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    private TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs() {}

    private TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs(TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs $) {
        this.applicationInstallationKey = $.applicationInstallationKey;
        this.applicationKey = $.applicationKey;
        this.containerKey = $.containerKey;
        this.jreKey = $.jreKey;
        this.managedInstanceId = $.managedInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs $;

        public Builder() {
            $ = new TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs();
        }

        public Builder(TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs defaults) {
            $ = new TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationInstallationKey (Updatable) Unique key that identifies the application installation for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder applicationInstallationKey(@Nullable Output<String> applicationInstallationKey) {
            $.applicationInstallationKey = applicationInstallationKey;
            return this;
        }

        /**
         * @param applicationInstallationKey (Updatable) Unique key that identifies the application installation for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder applicationInstallationKey(String applicationInstallationKey) {
            return applicationInstallationKey(Output.of(applicationInstallationKey));
        }

        /**
         * @param applicationKey (Updatable) Unique key that identifies the application for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(@Nullable Output<String> applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        /**
         * @param applicationKey (Updatable) Unique key that identifies the application for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(String applicationKey) {
            return applicationKey(Output.of(applicationKey));
        }

        /**
         * @param containerKey (Updatable) Unique key that identifies the container for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder containerKey(@Nullable Output<String> containerKey) {
            $.containerKey = containerKey;
            return this;
        }

        /**
         * @param containerKey (Updatable) Unique key that identifies the container for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder containerKey(String containerKey) {
            return containerKey(Output.of(containerKey));
        }

        /**
         * @param jreKey (Updatable) Unique key that identify the JVM for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder jreKey(@Nullable Output<String> jreKey) {
            $.jreKey = jreKey;
            return this;
        }

        /**
         * @param jreKey (Updatable) Unique key that identify the JVM for JFR data collection.
         * 
         * @return builder
         * 
         */
        public Builder jreKey(String jreKey) {
            return jreKey(Output.of(jreKey));
        }

        /**
         * @param managedInstanceId (Updatable) OCID of the Managed Instance to collect JFR data.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId (Updatable) OCID of the Managed Instance to collect JFR data.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        public TaskScheduleTaskDetailsCryptoTaskRequestTargetArgs build() {
            return $;
        }
    }

}
