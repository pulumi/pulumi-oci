// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs Empty = new TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs();

    /**
     * (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
     * 
     */
    @Import(name="applicationInstallationKey")
    private @Nullable Output<String> applicationInstallationKey;

    /**
     * @return (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
     * 
     */
    public Optional<Output<String>> applicationInstallationKey() {
        return Optional.ofNullable(this.applicationInstallationKey);
    }

    /**
     * (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
     * 
     */
    @Import(name="excludePackagePrefixes")
    private @Nullable Output<List<String>> excludePackagePrefixes;

    /**
     * @return (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
     * 
     */
    public Optional<Output<List<String>>> excludePackagePrefixes() {
        return Optional.ofNullable(this.excludePackagePrefixes);
    }

    /**
     * (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
     * 
     */
    @Import(name="includePackagePrefixes")
    private @Nullable Output<List<String>> includePackagePrefixes;

    /**
     * @return (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
     * 
     */
    public Optional<Output<List<String>>> includePackagePrefixes() {
        return Optional.ofNullable(this.includePackagePrefixes);
    }

    /**
     * (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable Output<String> managedInstanceId;

    /**
     * @return (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    public Optional<Output<String>> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * (Updatable) The JDK version the application is currently running on.
     * 
     */
    @Import(name="sourceJdkVersion")
    private @Nullable Output<String> sourceJdkVersion;

    /**
     * @return (Updatable) The JDK version the application is currently running on.
     * 
     */
    public Optional<Output<String>> sourceJdkVersion() {
        return Optional.ofNullable(this.sourceJdkVersion);
    }

    /**
     * (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
     * 
     */
    @Import(name="targetJdkVersion")
    private @Nullable Output<String> targetJdkVersion;

    /**
     * @return (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
     * 
     */
    public Optional<Output<String>> targetJdkVersion() {
        return Optional.ofNullable(this.targetJdkVersion);
    }

    private TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs() {}

    private TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs(TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs $) {
        this.applicationInstallationKey = $.applicationInstallationKey;
        this.excludePackagePrefixes = $.excludePackagePrefixes;
        this.includePackagePrefixes = $.includePackagePrefixes;
        this.managedInstanceId = $.managedInstanceId;
        this.sourceJdkVersion = $.sourceJdkVersion;
        this.targetJdkVersion = $.targetJdkVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs $;

        public Builder() {
            $ = new TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs();
        }

        public Builder(TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs defaults) {
            $ = new TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationInstallationKey (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
         * 
         * @return builder
         * 
         */
        public Builder applicationInstallationKey(@Nullable Output<String> applicationInstallationKey) {
            $.applicationInstallationKey = applicationInstallationKey;
            return this;
        }

        /**
         * @param applicationInstallationKey (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
         * 
         * @return builder
         * 
         */
        public Builder applicationInstallationKey(String applicationInstallationKey) {
            return applicationInstallationKey(Output.of(applicationInstallationKey));
        }

        /**
         * @param excludePackagePrefixes (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder excludePackagePrefixes(@Nullable Output<List<String>> excludePackagePrefixes) {
            $.excludePackagePrefixes = excludePackagePrefixes;
            return this;
        }

        /**
         * @param excludePackagePrefixes (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder excludePackagePrefixes(List<String> excludePackagePrefixes) {
            return excludePackagePrefixes(Output.of(excludePackagePrefixes));
        }

        /**
         * @param excludePackagePrefixes (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder excludePackagePrefixes(String... excludePackagePrefixes) {
            return excludePackagePrefixes(List.of(excludePackagePrefixes));
        }

        /**
         * @param includePackagePrefixes (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder includePackagePrefixes(@Nullable Output<List<String>> includePackagePrefixes) {
            $.includePackagePrefixes = includePackagePrefixes;
            return this;
        }

        /**
         * @param includePackagePrefixes (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder includePackagePrefixes(List<String> includePackagePrefixes) {
            return includePackagePrefixes(Output.of(includePackagePrefixes));
        }

        /**
         * @param includePackagePrefixes (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
         * 
         * @return builder
         * 
         */
        public Builder includePackagePrefixes(String... includePackagePrefixes) {
            return includePackagePrefixes(List.of(includePackagePrefixes));
        }

        /**
         * @param managedInstanceId (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param sourceJdkVersion (Updatable) The JDK version the application is currently running on.
         * 
         * @return builder
         * 
         */
        public Builder sourceJdkVersion(@Nullable Output<String> sourceJdkVersion) {
            $.sourceJdkVersion = sourceJdkVersion;
            return this;
        }

        /**
         * @param sourceJdkVersion (Updatable) The JDK version the application is currently running on.
         * 
         * @return builder
         * 
         */
        public Builder sourceJdkVersion(String sourceJdkVersion) {
            return sourceJdkVersion(Output.of(sourceJdkVersion));
        }

        /**
         * @param targetJdkVersion (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
         * 
         * @return builder
         * 
         */
        public Builder targetJdkVersion(@Nullable Output<String> targetJdkVersion) {
            $.targetJdkVersion = targetJdkVersion;
            return this;
        }

        /**
         * @param targetJdkVersion (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
         * 
         * @return builder
         * 
         */
        public Builder targetJdkVersion(String targetJdkVersion) {
            return targetJdkVersion(Output.of(targetJdkVersion));
        }

        public TaskScheduleTaskDetailsJavaMigrationTaskRequestTargetArgs build() {
            return $;
        }
    }

}
