// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Jms.inputs.TaskScheduleTaskDetailsJfrTaskRequestTargetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskScheduleTaskDetailsJfrTaskRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskScheduleTaskDetailsJfrTaskRequestArgs Empty = new TaskScheduleTaskDetailsJfrTaskRequestArgs();

    /**
     * (Updatable) The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
     * 
     */
    @Import(name="jfcProfileName")
    private @Nullable Output<String> jfcProfileName;

    /**
     * @return (Updatable) The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
     * 
     */
    public Optional<Output<String>> jfcProfileName() {
        return Optional.ofNullable(this.jfcProfileName);
    }

    /**
     * (Updatable) The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
     * 
     */
    @Import(name="jfcV1")
    private @Nullable Output<String> jfcV1;

    /**
     * @return (Updatable) The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
     * 
     */
    public Optional<Output<String>> jfcV1() {
        return Optional.ofNullable(this.jfcV1);
    }

    /**
     * (Updatable) The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
     * 
     */
    @Import(name="jfcV2")
    private @Nullable Output<String> jfcV2;

    /**
     * @return (Updatable) The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
     * 
     */
    public Optional<Output<String>> jfcV2() {
        return Optional.ofNullable(this.jfcV2);
    }

    /**
     * (Updatable) Duration of the JFR recording in minutes.
     * 
     */
    @Import(name="recordingDurationInMinutes")
    private @Nullable Output<Integer> recordingDurationInMinutes;

    /**
     * @return (Updatable) Duration of the JFR recording in minutes.
     * 
     */
    public Optional<Output<Integer>> recordingDurationInMinutes() {
        return Optional.ofNullable(this.recordingDurationInMinutes);
    }

    /**
     * (Updatable) The maximum size limit for the JFR file collected.
     * 
     */
    @Import(name="recordingSizeInMb")
    private @Nullable Output<Integer> recordingSizeInMb;

    /**
     * @return (Updatable) The maximum size limit for the JFR file collected.
     * 
     */
    public Optional<Output<Integer>> recordingSizeInMb() {
        return Optional.ofNullable(this.recordingSizeInMb);
    }

    /**
     * (Updatable) The attachment targets to start JFR.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<TaskScheduleTaskDetailsJfrTaskRequestTargetArgs>> targets;

    /**
     * @return (Updatable) The attachment targets to start JFR.
     * 
     */
    public Optional<Output<List<TaskScheduleTaskDetailsJfrTaskRequestTargetArgs>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    @Import(name="waitingPeriodInMinutes")
    private @Nullable Output<Integer> waitingPeriodInMinutes;

    /**
     * @return (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    public Optional<Output<Integer>> waitingPeriodInMinutes() {
        return Optional.ofNullable(this.waitingPeriodInMinutes);
    }

    private TaskScheduleTaskDetailsJfrTaskRequestArgs() {}

    private TaskScheduleTaskDetailsJfrTaskRequestArgs(TaskScheduleTaskDetailsJfrTaskRequestArgs $) {
        this.jfcProfileName = $.jfcProfileName;
        this.jfcV1 = $.jfcV1;
        this.jfcV2 = $.jfcV2;
        this.recordingDurationInMinutes = $.recordingDurationInMinutes;
        this.recordingSizeInMb = $.recordingSizeInMb;
        this.targets = $.targets;
        this.waitingPeriodInMinutes = $.waitingPeriodInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskScheduleTaskDetailsJfrTaskRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskScheduleTaskDetailsJfrTaskRequestArgs $;

        public Builder() {
            $ = new TaskScheduleTaskDetailsJfrTaskRequestArgs();
        }

        public Builder(TaskScheduleTaskDetailsJfrTaskRequestArgs defaults) {
            $ = new TaskScheduleTaskDetailsJfrTaskRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jfcProfileName (Updatable) The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
         * 
         * @return builder
         * 
         */
        public Builder jfcProfileName(@Nullable Output<String> jfcProfileName) {
            $.jfcProfileName = jfcProfileName;
            return this;
        }

        /**
         * @param jfcProfileName (Updatable) The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
         * 
         * @return builder
         * 
         */
        public Builder jfcProfileName(String jfcProfileName) {
            return jfcProfileName(Output.of(jfcProfileName));
        }

        /**
         * @param jfcV1 (Updatable) The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
         * 
         * @return builder
         * 
         */
        public Builder jfcV1(@Nullable Output<String> jfcV1) {
            $.jfcV1 = jfcV1;
            return this;
        }

        /**
         * @param jfcV1 (Updatable) The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
         * 
         * @return builder
         * 
         */
        public Builder jfcV1(String jfcV1) {
            return jfcV1(Output.of(jfcV1));
        }

        /**
         * @param jfcV2 (Updatable) The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
         * 
         * @return builder
         * 
         */
        public Builder jfcV2(@Nullable Output<String> jfcV2) {
            $.jfcV2 = jfcV2;
            return this;
        }

        /**
         * @param jfcV2 (Updatable) The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
         * 
         * @return builder
         * 
         */
        public Builder jfcV2(String jfcV2) {
            return jfcV2(Output.of(jfcV2));
        }

        /**
         * @param recordingDurationInMinutes (Updatable) Duration of the JFR recording in minutes.
         * 
         * @return builder
         * 
         */
        public Builder recordingDurationInMinutes(@Nullable Output<Integer> recordingDurationInMinutes) {
            $.recordingDurationInMinutes = recordingDurationInMinutes;
            return this;
        }

        /**
         * @param recordingDurationInMinutes (Updatable) Duration of the JFR recording in minutes.
         * 
         * @return builder
         * 
         */
        public Builder recordingDurationInMinutes(Integer recordingDurationInMinutes) {
            return recordingDurationInMinutes(Output.of(recordingDurationInMinutes));
        }

        /**
         * @param recordingSizeInMb (Updatable) The maximum size limit for the JFR file collected.
         * 
         * @return builder
         * 
         */
        public Builder recordingSizeInMb(@Nullable Output<Integer> recordingSizeInMb) {
            $.recordingSizeInMb = recordingSizeInMb;
            return this;
        }

        /**
         * @param recordingSizeInMb (Updatable) The maximum size limit for the JFR file collected.
         * 
         * @return builder
         * 
         */
        public Builder recordingSizeInMb(Integer recordingSizeInMb) {
            return recordingSizeInMb(Output.of(recordingSizeInMb));
        }

        /**
         * @param targets (Updatable) The attachment targets to start JFR.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<TaskScheduleTaskDetailsJfrTaskRequestTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets (Updatable) The attachment targets to start JFR.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<TaskScheduleTaskDetailsJfrTaskRequestTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets (Updatable) The attachment targets to start JFR.
         * 
         * @return builder
         * 
         */
        public Builder targets(TaskScheduleTaskDetailsJfrTaskRequestTargetArgs... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param waitingPeriodInMinutes (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
         * 
         * @return builder
         * 
         */
        public Builder waitingPeriodInMinutes(@Nullable Output<Integer> waitingPeriodInMinutes) {
            $.waitingPeriodInMinutes = waitingPeriodInMinutes;
            return this;
        }

        /**
         * @param waitingPeriodInMinutes (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
         * 
         * @return builder
         * 
         */
        public Builder waitingPeriodInMinutes(Integer waitingPeriodInMinutes) {
            return waitingPeriodInMinutes(Output.of(waitingPeriodInMinutes));
        }

        public TaskScheduleTaskDetailsJfrTaskRequestArgs build() {
            return $;
        }
    }

}
