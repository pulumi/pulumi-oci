// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy {
    /**
     * @return Ftp host to be set in net.properties file.
     * 
     */
    private String ftpProxyHost;
    /**
     * @return Ftp port number to be set in net.properties file.
     * 
     */
    private Integer ftpProxyPort;
    /**
     * @return Http host to be set in net.properties file.
     * 
     */
    private String httpProxyHost;
    /**
     * @return Http port number to be set in net.properties file.
     * 
     */
    private Integer httpProxyPort;
    /**
     * @return Https host to be set in net.properties file.
     * 
     */
    private String httpsProxyHost;
    /**
     * @return Https port number to be set in net.properties file.
     * 
     */
    private Integer httpsProxyPort;
    /**
     * @return Socks host to be set in net.properties file.
     * 
     */
    private String socksProxyHost;
    /**
     * @return Socks port number to be set in net.properties file.
     * 
     */
    private Integer socksProxyPort;
    /**
     * @return Sets &#34;java.net.useSystemProxies=true&#34; in net.properties when they exist.
     * 
     */
    private Boolean useSystemProxies;

    private GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy() {}
    /**
     * @return Ftp host to be set in net.properties file.
     * 
     */
    public String ftpProxyHost() {
        return this.ftpProxyHost;
    }
    /**
     * @return Ftp port number to be set in net.properties file.
     * 
     */
    public Integer ftpProxyPort() {
        return this.ftpProxyPort;
    }
    /**
     * @return Http host to be set in net.properties file.
     * 
     */
    public String httpProxyHost() {
        return this.httpProxyHost;
    }
    /**
     * @return Http port number to be set in net.properties file.
     * 
     */
    public Integer httpProxyPort() {
        return this.httpProxyPort;
    }
    /**
     * @return Https host to be set in net.properties file.
     * 
     */
    public String httpsProxyHost() {
        return this.httpsProxyHost;
    }
    /**
     * @return Https port number to be set in net.properties file.
     * 
     */
    public Integer httpsProxyPort() {
        return this.httpsProxyPort;
    }
    /**
     * @return Socks host to be set in net.properties file.
     * 
     */
    public String socksProxyHost() {
        return this.socksProxyHost;
    }
    /**
     * @return Socks port number to be set in net.properties file.
     * 
     */
    public Integer socksProxyPort() {
        return this.socksProxyPort;
    }
    /**
     * @return Sets &#34;java.net.useSystemProxies=true&#34; in net.properties when they exist.
     * 
     */
    public Boolean useSystemProxies() {
        return this.useSystemProxies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ftpProxyHost;
        private Integer ftpProxyPort;
        private String httpProxyHost;
        private Integer httpProxyPort;
        private String httpsProxyHost;
        private Integer httpsProxyPort;
        private String socksProxyHost;
        private Integer socksProxyPort;
        private Boolean useSystemProxies;
        public Builder() {}
        public Builder(GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ftpProxyHost = defaults.ftpProxyHost;
    	      this.ftpProxyPort = defaults.ftpProxyPort;
    	      this.httpProxyHost = defaults.httpProxyHost;
    	      this.httpProxyPort = defaults.httpProxyPort;
    	      this.httpsProxyHost = defaults.httpsProxyHost;
    	      this.httpsProxyPort = defaults.httpsProxyPort;
    	      this.socksProxyHost = defaults.socksProxyHost;
    	      this.socksProxyPort = defaults.socksProxyPort;
    	      this.useSystemProxies = defaults.useSystemProxies;
        }

        @CustomType.Setter
        public Builder ftpProxyHost(String ftpProxyHost) {
            this.ftpProxyHost = Objects.requireNonNull(ftpProxyHost);
            return this;
        }
        @CustomType.Setter
        public Builder ftpProxyPort(Integer ftpProxyPort) {
            this.ftpProxyPort = Objects.requireNonNull(ftpProxyPort);
            return this;
        }
        @CustomType.Setter
        public Builder httpProxyHost(String httpProxyHost) {
            this.httpProxyHost = Objects.requireNonNull(httpProxyHost);
            return this;
        }
        @CustomType.Setter
        public Builder httpProxyPort(Integer httpProxyPort) {
            this.httpProxyPort = Objects.requireNonNull(httpProxyPort);
            return this;
        }
        @CustomType.Setter
        public Builder httpsProxyHost(String httpsProxyHost) {
            this.httpsProxyHost = Objects.requireNonNull(httpsProxyHost);
            return this;
        }
        @CustomType.Setter
        public Builder httpsProxyPort(Integer httpsProxyPort) {
            this.httpsProxyPort = Objects.requireNonNull(httpsProxyPort);
            return this;
        }
        @CustomType.Setter
        public Builder socksProxyHost(String socksProxyHost) {
            this.socksProxyHost = Objects.requireNonNull(socksProxyHost);
            return this;
        }
        @CustomType.Setter
        public Builder socksProxyPort(Integer socksProxyPort) {
            this.socksProxyPort = Objects.requireNonNull(socksProxyPort);
            return this;
        }
        @CustomType.Setter
        public Builder useSystemProxies(Boolean useSystemProxies) {
            this.useSystemProxies = Objects.requireNonNull(useSystemProxies);
            return this;
        }
        public GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy build() {
            final var o = new GetFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy();
            o.ftpProxyHost = ftpProxyHost;
            o.ftpProxyPort = ftpProxyPort;
            o.httpProxyHost = httpProxyHost;
            o.httpProxyPort = httpProxyPort;
            o.httpsProxyHost = httpsProxyHost;
            o.httpsProxyPort = httpsProxyPort;
            o.socksProxyHost = socksProxyHost;
            o.socksProxyPort = socksProxyPort;
            o.useSystemProxies = useSystemProxies;
            return o;
        }
    }
}
