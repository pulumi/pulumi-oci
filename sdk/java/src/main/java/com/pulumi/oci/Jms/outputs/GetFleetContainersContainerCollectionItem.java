// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFleetContainersContainerCollectionItem {
    /**
     * @return Unique key that identifies the application running in the container.
     * 
     */
    private String applicationKey;
    /**
     * @return The name of the application.
     * 
     */
    private String applicationName;
    /**
     * @return Unique identifier for the container.
     * 
     */
    private String containerKey;
    /**
     * @return The display name.
     * 
     */
    private String displayName;
    /**
     * @return The container image name.
     * 
     */
    private String imageName;
    /**
     * @return The Java runtime used to run the application in the container.
     * 
     */
    private String javaVersion;
    /**
     * @return Unique key that identifies the Java runtime used to run the application in the container.
     * 
     */
    private String jreKey;
    /**
     * @return The security status of the Java Runtime.
     * 
     */
    private String jreSecurityStatus;
    /**
     * @return The Fleet-unique identifier of the managed instance.
     * 
     */
    private String managedInstanceId;
    /**
     * @return The namespace of the container.
     * 
     */
    private String namespace;
    /**
     * @return The name of the node associated with the pod running this container.
     * 
     */
    private String nodeName;
    /**
     * @return The name of the pod running this container.
     * 
     */
    private String podName;
    /**
     * @return The start time of the container.
     * 
     */
    private String timeStarted;

    private GetFleetContainersContainerCollectionItem() {}
    /**
     * @return Unique key that identifies the application running in the container.
     * 
     */
    public String applicationKey() {
        return this.applicationKey;
    }
    /**
     * @return The name of the application.
     * 
     */
    public String applicationName() {
        return this.applicationName;
    }
    /**
     * @return Unique identifier for the container.
     * 
     */
    public String containerKey() {
        return this.containerKey;
    }
    /**
     * @return The display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The container image name.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The Java runtime used to run the application in the container.
     * 
     */
    public String javaVersion() {
        return this.javaVersion;
    }
    /**
     * @return Unique key that identifies the Java runtime used to run the application in the container.
     * 
     */
    public String jreKey() {
        return this.jreKey;
    }
    /**
     * @return The security status of the Java Runtime.
     * 
     */
    public String jreSecurityStatus() {
        return this.jreSecurityStatus;
    }
    /**
     * @return The Fleet-unique identifier of the managed instance.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The namespace of the container.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The name of the node associated with the pod running this container.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return The name of the pod running this container.
     * 
     */
    public String podName() {
        return this.podName;
    }
    /**
     * @return The start time of the container.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFleetContainersContainerCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationKey;
        private String applicationName;
        private String containerKey;
        private String displayName;
        private String imageName;
        private String javaVersion;
        private String jreKey;
        private String jreSecurityStatus;
        private String managedInstanceId;
        private String namespace;
        private String nodeName;
        private String podName;
        private String timeStarted;
        public Builder() {}
        public Builder(GetFleetContainersContainerCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationKey = defaults.applicationKey;
    	      this.applicationName = defaults.applicationName;
    	      this.containerKey = defaults.containerKey;
    	      this.displayName = defaults.displayName;
    	      this.imageName = defaults.imageName;
    	      this.javaVersion = defaults.javaVersion;
    	      this.jreKey = defaults.jreKey;
    	      this.jreSecurityStatus = defaults.jreSecurityStatus;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.namespace = defaults.namespace;
    	      this.nodeName = defaults.nodeName;
    	      this.podName = defaults.podName;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder applicationKey(String applicationKey) {
            if (applicationKey == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "applicationKey");
            }
            this.applicationKey = applicationKey;
            return this;
        }
        @CustomType.Setter
        public Builder applicationName(String applicationName) {
            if (applicationName == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "applicationName");
            }
            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder containerKey(String containerKey) {
            if (containerKey == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "containerKey");
            }
            this.containerKey = containerKey;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder javaVersion(String javaVersion) {
            if (javaVersion == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "javaVersion");
            }
            this.javaVersion = javaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder jreKey(String jreKey) {
            if (jreKey == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "jreKey");
            }
            this.jreKey = jreKey;
            return this;
        }
        @CustomType.Setter
        public Builder jreSecurityStatus(String jreSecurityStatus) {
            if (jreSecurityStatus == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "jreSecurityStatus");
            }
            this.jreSecurityStatus = jreSecurityStatus;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder podName(String podName) {
            if (podName == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "podName");
            }
            this.podName = podName;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetFleetContainersContainerCollectionItem", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        public GetFleetContainersContainerCollectionItem build() {
            final var _resultValue = new GetFleetContainersContainerCollectionItem();
            _resultValue.applicationKey = applicationKey;
            _resultValue.applicationName = applicationName;
            _resultValue.containerKey = containerKey;
            _resultValue.displayName = displayName;
            _resultValue.imageName = imageName;
            _resultValue.javaVersion = javaVersion;
            _resultValue.jreKey = jreKey;
            _resultValue.jreSecurityStatus = jreSecurityStatus;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.namespace = namespace;
            _resultValue.nodeName = nodeName;
            _resultValue.podName = podName;
            _resultValue.timeStarted = timeStarted;
            return _resultValue;
        }
    }
}
