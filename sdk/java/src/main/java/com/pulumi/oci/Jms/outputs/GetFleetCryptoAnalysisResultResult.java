// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFleetCryptoAnalysisResultResult {
    /**
     * @return The result aggregation mode
     * 
     */
    private String aggregationMode;
    /**
     * @return The Object Storage bucket name of this analysis result.
     * 
     */
    private String bucket;
    private String cryptoAnalysisResultId;
    /**
     * @return The Crypto Roadmap version used to perform the analysis.
     * 
     */
    private String cryptoRoadmapVersion;
    /**
     * @return Total number of findings with the analysis.
     * 
     */
    private Integer findingCount;
    /**
     * @return The fleet OCID.
     * 
     */
    private String fleetId;
    /**
     * @return The hostname of the managed instance.
     * 
     */
    private String hostName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The managed instance OCID.
     * 
     */
    private String managedInstanceId;
    /**
     * @return The Object Storage namespace of this analysis result.
     * 
     */
    private String namespace;
    /**
     * @return Total number of non-compliant findings with the analysis. A non-compliant finding means the application won&#39;t work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
     * 
     */
    private Integer nonCompliantFindingCount;
    /**
     * @return The Object Storage object name of this analysis result.
     * 
     */
    private String object;
    /**
     * @return Total number of summarized events. Summarized events are deduplicated events of interest.
     * 
     */
    private Integer summarizedEventCount;
    /**
     * @return The time the result is compiled.
     * 
     */
    private String timeCreated;
    /**
     * @return Time of the first event in the analysis.
     * 
     */
    private String timeFirstEvent;
    /**
     * @return Time of the last event in the analysis.
     * 
     */
    private String timeLastEvent;
    /**
     * @return Total number of events in the analysis.
     * 
     */
    private Integer totalEventCount;
    /**
     * @return The OCID of the work request to start the analysis.
     * 
     */
    private String workRequestId;

    private GetFleetCryptoAnalysisResultResult() {}
    /**
     * @return The result aggregation mode
     * 
     */
    public String aggregationMode() {
        return this.aggregationMode;
    }
    /**
     * @return The Object Storage bucket name of this analysis result.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    public String cryptoAnalysisResultId() {
        return this.cryptoAnalysisResultId;
    }
    /**
     * @return The Crypto Roadmap version used to perform the analysis.
     * 
     */
    public String cryptoRoadmapVersion() {
        return this.cryptoRoadmapVersion;
    }
    /**
     * @return Total number of findings with the analysis.
     * 
     */
    public Integer findingCount() {
        return this.findingCount;
    }
    /**
     * @return The fleet OCID.
     * 
     */
    public String fleetId() {
        return this.fleetId;
    }
    /**
     * @return The hostname of the managed instance.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The managed instance OCID.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The Object Storage namespace of this analysis result.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Total number of non-compliant findings with the analysis. A non-compliant finding means the application won&#39;t work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
     * 
     */
    public Integer nonCompliantFindingCount() {
        return this.nonCompliantFindingCount;
    }
    /**
     * @return The Object Storage object name of this analysis result.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return Total number of summarized events. Summarized events are deduplicated events of interest.
     * 
     */
    public Integer summarizedEventCount() {
        return this.summarizedEventCount;
    }
    /**
     * @return The time the result is compiled.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time of the first event in the analysis.
     * 
     */
    public String timeFirstEvent() {
        return this.timeFirstEvent;
    }
    /**
     * @return Time of the last event in the analysis.
     * 
     */
    public String timeLastEvent() {
        return this.timeLastEvent;
    }
    /**
     * @return Total number of events in the analysis.
     * 
     */
    public Integer totalEventCount() {
        return this.totalEventCount;
    }
    /**
     * @return The OCID of the work request to start the analysis.
     * 
     */
    public String workRequestId() {
        return this.workRequestId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFleetCryptoAnalysisResultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aggregationMode;
        private String bucket;
        private String cryptoAnalysisResultId;
        private String cryptoRoadmapVersion;
        private Integer findingCount;
        private String fleetId;
        private String hostName;
        private String id;
        private String managedInstanceId;
        private String namespace;
        private Integer nonCompliantFindingCount;
        private String object;
        private Integer summarizedEventCount;
        private String timeCreated;
        private String timeFirstEvent;
        private String timeLastEvent;
        private Integer totalEventCount;
        private String workRequestId;
        public Builder() {}
        public Builder(GetFleetCryptoAnalysisResultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationMode = defaults.aggregationMode;
    	      this.bucket = defaults.bucket;
    	      this.cryptoAnalysisResultId = defaults.cryptoAnalysisResultId;
    	      this.cryptoRoadmapVersion = defaults.cryptoRoadmapVersion;
    	      this.findingCount = defaults.findingCount;
    	      this.fleetId = defaults.fleetId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.namespace = defaults.namespace;
    	      this.nonCompliantFindingCount = defaults.nonCompliantFindingCount;
    	      this.object = defaults.object;
    	      this.summarizedEventCount = defaults.summarizedEventCount;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeFirstEvent = defaults.timeFirstEvent;
    	      this.timeLastEvent = defaults.timeLastEvent;
    	      this.totalEventCount = defaults.totalEventCount;
    	      this.workRequestId = defaults.workRequestId;
        }

        @CustomType.Setter
        public Builder aggregationMode(String aggregationMode) {
            if (aggregationMode == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "aggregationMode");
            }
            this.aggregationMode = aggregationMode;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoAnalysisResultId(String cryptoAnalysisResultId) {
            if (cryptoAnalysisResultId == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "cryptoAnalysisResultId");
            }
            this.cryptoAnalysisResultId = cryptoAnalysisResultId;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoRoadmapVersion(String cryptoRoadmapVersion) {
            if (cryptoRoadmapVersion == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "cryptoRoadmapVersion");
            }
            this.cryptoRoadmapVersion = cryptoRoadmapVersion;
            return this;
        }
        @CustomType.Setter
        public Builder findingCount(Integer findingCount) {
            if (findingCount == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "findingCount");
            }
            this.findingCount = findingCount;
            return this;
        }
        @CustomType.Setter
        public Builder fleetId(String fleetId) {
            if (fleetId == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "fleetId");
            }
            this.fleetId = fleetId;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nonCompliantFindingCount(Integer nonCompliantFindingCount) {
            if (nonCompliantFindingCount == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "nonCompliantFindingCount");
            }
            this.nonCompliantFindingCount = nonCompliantFindingCount;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder summarizedEventCount(Integer summarizedEventCount) {
            if (summarizedEventCount == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "summarizedEventCount");
            }
            this.summarizedEventCount = summarizedEventCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeFirstEvent(String timeFirstEvent) {
            if (timeFirstEvent == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "timeFirstEvent");
            }
            this.timeFirstEvent = timeFirstEvent;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastEvent(String timeLastEvent) {
            if (timeLastEvent == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "timeLastEvent");
            }
            this.timeLastEvent = timeLastEvent;
            return this;
        }
        @CustomType.Setter
        public Builder totalEventCount(Integer totalEventCount) {
            if (totalEventCount == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "totalEventCount");
            }
            this.totalEventCount = totalEventCount;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(String workRequestId) {
            if (workRequestId == null) {
              throw new MissingRequiredPropertyException("GetFleetCryptoAnalysisResultResult", "workRequestId");
            }
            this.workRequestId = workRequestId;
            return this;
        }
        public GetFleetCryptoAnalysisResultResult build() {
            final var _resultValue = new GetFleetCryptoAnalysisResultResult();
            _resultValue.aggregationMode = aggregationMode;
            _resultValue.bucket = bucket;
            _resultValue.cryptoAnalysisResultId = cryptoAnalysisResultId;
            _resultValue.cryptoRoadmapVersion = cryptoRoadmapVersion;
            _resultValue.findingCount = findingCount;
            _resultValue.fleetId = fleetId;
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.namespace = namespace;
            _resultValue.nonCompliantFindingCount = nonCompliantFindingCount;
            _resultValue.object = object;
            _resultValue.summarizedEventCount = summarizedEventCount;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeFirstEvent = timeFirstEvent;
            _resultValue.timeLastEvent = timeLastEvent;
            _resultValue.totalEventCount = totalEventCount;
            _resultValue.workRequestId = workRequestId;
            return _resultValue;
        }
    }
}
