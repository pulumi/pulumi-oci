// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem {
    /**
     * @return The aggregation mode of the crypto event analysis result.
     * 
     */
    private @Nullable String aggregationMode;
    /**
     * @return The Object Storage bucket name of this analysis result.
     * 
     */
    private @Nullable String bucket;
    /**
     * @return The Crypto Roadmap version used to perform the analysis.
     * 
     */
    private @Nullable String cryptoRoadmapVersion;
    /**
     * @return Total number of findings with the analysis.
     * 
     */
    private @Nullable Integer findingCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    private @Nullable String fleetId;
    /**
     * @return The hostname of the managed instance.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The OCID to identify this analysis results.
     * 
     */
    private @Nullable String id;
    /**
     * @return The Fleet-unique identifier of the related managed instance.
     * 
     */
    private @Nullable String managedInstanceId;
    /**
     * @return The Object Storage namespace of this analysis result.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Total number of non-compliant findings with the analysis. A non-compliant finding means the application won&#39;t work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
     * 
     */
    private @Nullable Integer nonCompliantFindingCount;
    /**
     * @return The Object Storage object name of this analysis result.
     * 
     */
    private @Nullable String object;
    /**
     * @return Total number of summarized events. Summarized events are deduplicated events of interest.
     * 
     */
    private @Nullable Integer summarizedEventCount;
    /**
     * @return The time the result is compiled.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Time of the first event in the analysis.
     * 
     */
    private @Nullable String timeFirstEvent;
    /**
     * @return Time of the last event in the analysis.
     * 
     */
    private @Nullable String timeLastEvent;
    /**
     * @return Total number of events in the analysis.
     * 
     */
    private @Nullable Integer totalEventCount;
    /**
     * @return The OCID of the work request to start the analysis.
     * 
     */
    private @Nullable String workRequestId;

    private GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem() {}
    /**
     * @return The aggregation mode of the crypto event analysis result.
     * 
     */
    public Optional<String> aggregationMode() {
        return Optional.ofNullable(this.aggregationMode);
    }
    /**
     * @return The Object Storage bucket name of this analysis result.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return The Crypto Roadmap version used to perform the analysis.
     * 
     */
    public Optional<String> cryptoRoadmapVersion() {
        return Optional.ofNullable(this.cryptoRoadmapVersion);
    }
    /**
     * @return Total number of findings with the analysis.
     * 
     */
    public Optional<Integer> findingCount() {
        return Optional.ofNullable(this.findingCount);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    public Optional<String> fleetId() {
        return Optional.ofNullable(this.fleetId);
    }
    /**
     * @return The hostname of the managed instance.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The OCID to identify this analysis results.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The Fleet-unique identifier of the related managed instance.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    /**
     * @return The Object Storage namespace of this analysis result.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Total number of non-compliant findings with the analysis. A non-compliant finding means the application won&#39;t work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
     * 
     */
    public Optional<Integer> nonCompliantFindingCount() {
        return Optional.ofNullable(this.nonCompliantFindingCount);
    }
    /**
     * @return The Object Storage object name of this analysis result.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return Total number of summarized events. Summarized events are deduplicated events of interest.
     * 
     */
    public Optional<Integer> summarizedEventCount() {
        return Optional.ofNullable(this.summarizedEventCount);
    }
    /**
     * @return The time the result is compiled.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Time of the first event in the analysis.
     * 
     */
    public Optional<String> timeFirstEvent() {
        return Optional.ofNullable(this.timeFirstEvent);
    }
    /**
     * @return Time of the last event in the analysis.
     * 
     */
    public Optional<String> timeLastEvent() {
        return Optional.ofNullable(this.timeLastEvent);
    }
    /**
     * @return Total number of events in the analysis.
     * 
     */
    public Optional<Integer> totalEventCount() {
        return Optional.ofNullable(this.totalEventCount);
    }
    /**
     * @return The OCID of the work request to start the analysis.
     * 
     */
    public Optional<String> workRequestId() {
        return Optional.ofNullable(this.workRequestId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aggregationMode;
        private @Nullable String bucket;
        private @Nullable String cryptoRoadmapVersion;
        private @Nullable Integer findingCount;
        private @Nullable String fleetId;
        private @Nullable String hostName;
        private @Nullable String id;
        private @Nullable String managedInstanceId;
        private @Nullable String namespace;
        private @Nullable Integer nonCompliantFindingCount;
        private @Nullable String object;
        private @Nullable Integer summarizedEventCount;
        private @Nullable String timeCreated;
        private @Nullable String timeFirstEvent;
        private @Nullable String timeLastEvent;
        private @Nullable Integer totalEventCount;
        private @Nullable String workRequestId;
        public Builder() {}
        public Builder(GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationMode = defaults.aggregationMode;
    	      this.bucket = defaults.bucket;
    	      this.cryptoRoadmapVersion = defaults.cryptoRoadmapVersion;
    	      this.findingCount = defaults.findingCount;
    	      this.fleetId = defaults.fleetId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.namespace = defaults.namespace;
    	      this.nonCompliantFindingCount = defaults.nonCompliantFindingCount;
    	      this.object = defaults.object;
    	      this.summarizedEventCount = defaults.summarizedEventCount;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeFirstEvent = defaults.timeFirstEvent;
    	      this.timeLastEvent = defaults.timeLastEvent;
    	      this.totalEventCount = defaults.totalEventCount;
    	      this.workRequestId = defaults.workRequestId;
        }

        @CustomType.Setter
        public Builder aggregationMode(@Nullable String aggregationMode) {
            this.aggregationMode = aggregationMode;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoRoadmapVersion(@Nullable String cryptoRoadmapVersion) {
            this.cryptoRoadmapVersion = cryptoRoadmapVersion;
            return this;
        }
        @CustomType.Setter
        public Builder findingCount(@Nullable Integer findingCount) {
            this.findingCount = findingCount;
            return this;
        }
        @CustomType.Setter
        public Builder fleetId(@Nullable String fleetId) {
            this.fleetId = fleetId;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder nonCompliantFindingCount(@Nullable Integer nonCompliantFindingCount) {
            this.nonCompliantFindingCount = nonCompliantFindingCount;
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder summarizedEventCount(@Nullable Integer summarizedEventCount) {
            this.summarizedEventCount = summarizedEventCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeFirstEvent(@Nullable String timeFirstEvent) {
            this.timeFirstEvent = timeFirstEvent;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastEvent(@Nullable String timeLastEvent) {
            this.timeLastEvent = timeLastEvent;
            return this;
        }
        @CustomType.Setter
        public Builder totalEventCount(@Nullable Integer totalEventCount) {
            this.totalEventCount = totalEventCount;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(@Nullable String workRequestId) {
            this.workRequestId = workRequestId;
            return this;
        }
        public GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem build() {
            final var o = new GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem();
            o.aggregationMode = aggregationMode;
            o.bucket = bucket;
            o.cryptoRoadmapVersion = cryptoRoadmapVersion;
            o.findingCount = findingCount;
            o.fleetId = fleetId;
            o.hostName = hostName;
            o.id = id;
            o.managedInstanceId = managedInstanceId;
            o.namespace = namespace;
            o.nonCompliantFindingCount = nonCompliantFindingCount;
            o.object = object;
            o.summarizedEventCount = summarizedEventCount;
            o.timeCreated = timeCreated;
            o.timeFirstEvent = timeFirstEvent;
            o.timeLastEvent = timeLastEvent;
            o.totalEventCount = totalEventCount;
            o.workRequestId = workRequestId;
            return o;
        }
    }
}
