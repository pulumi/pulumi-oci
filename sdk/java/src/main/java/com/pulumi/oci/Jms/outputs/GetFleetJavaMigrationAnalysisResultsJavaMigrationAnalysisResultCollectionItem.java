// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem {
    /**
     * @return Execution type of the application for an application type, such as WAR and EAR, that is deployed or installed.
     * 
     */
    private @Nullable String applicationExecutionType;
    /**
     * @return The name of the application for which the Java migration analysis was performed.
     * 
     */
    private @Nullable String applicationName;
    /**
     * @return The installation path of the application for which the Java migration analysis was performed.
     * 
     */
    private @Nullable String applicationPath;
    /**
     * @return The name of the object storage bucket that contains the results of the migration analysis.
     * 
     */
    private @Nullable String bucket;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    private @Nullable String fleetId;
    /**
     * @return The hostname of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The OCID of the migration analysis report.
     * 
     */
    private @Nullable String id;
    /**
     * @return The Fleet-unique identifier of the related managed instance.
     * 
     */
    private @Nullable String managedInstanceId;
    /**
     * @return Additional info reserved for future use.
     * 
     */
    private @Nullable String metadata;
    /**
     * @return The object storage namespace that contains the results of the migration analysis.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return The names of the object storage objects that contain the results of the migration analysis.
     * 
     */
    private @Nullable List<String> objectLists;
    /**
     * @return The directory path of the object storage bucket that contains the results of the migration analysis.
     * 
     */
    private @Nullable String objectStorageUploadDirPath;
    /**
     * @return The source JDK version of the application that&#39;s currently running.
     * 
     */
    private @Nullable String sourceJdkVersion;
    /**
     * @return The target JDK version of the application to be migrated.
     * 
     */
    private @Nullable String targetJdkVersion;
    /**
     * @return The time the result is compiled.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The OCID of the work request of this analysis.
     * 
     */
    private @Nullable String workRequestId;

    private GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem() {}
    /**
     * @return Execution type of the application for an application type, such as WAR and EAR, that is deployed or installed.
     * 
     */
    public Optional<String> applicationExecutionType() {
        return Optional.ofNullable(this.applicationExecutionType);
    }
    /**
     * @return The name of the application for which the Java migration analysis was performed.
     * 
     */
    public Optional<String> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }
    /**
     * @return The installation path of the application for which the Java migration analysis was performed.
     * 
     */
    public Optional<String> applicationPath() {
        return Optional.ofNullable(this.applicationPath);
    }
    /**
     * @return The name of the object storage bucket that contains the results of the migration analysis.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    public Optional<String> fleetId() {
        return Optional.ofNullable(this.fleetId);
    }
    /**
     * @return The hostname of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The OCID of the migration analysis report.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The Fleet-unique identifier of the related managed instance.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    /**
     * @return Additional info reserved for future use.
     * 
     */
    public Optional<String> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return The object storage namespace that contains the results of the migration analysis.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The names of the object storage objects that contain the results of the migration analysis.
     * 
     */
    public List<String> objectLists() {
        return this.objectLists == null ? List.of() : this.objectLists;
    }
    /**
     * @return The directory path of the object storage bucket that contains the results of the migration analysis.
     * 
     */
    public Optional<String> objectStorageUploadDirPath() {
        return Optional.ofNullable(this.objectStorageUploadDirPath);
    }
    /**
     * @return The source JDK version of the application that&#39;s currently running.
     * 
     */
    public Optional<String> sourceJdkVersion() {
        return Optional.ofNullable(this.sourceJdkVersion);
    }
    /**
     * @return The target JDK version of the application to be migrated.
     * 
     */
    public Optional<String> targetJdkVersion() {
        return Optional.ofNullable(this.targetJdkVersion);
    }
    /**
     * @return The time the result is compiled.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The OCID of the work request of this analysis.
     * 
     */
    public Optional<String> workRequestId() {
        return Optional.ofNullable(this.workRequestId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationExecutionType;
        private @Nullable String applicationName;
        private @Nullable String applicationPath;
        private @Nullable String bucket;
        private @Nullable String fleetId;
        private @Nullable String hostName;
        private @Nullable String id;
        private @Nullable String managedInstanceId;
        private @Nullable String metadata;
        private @Nullable String namespace;
        private @Nullable List<String> objectLists;
        private @Nullable String objectStorageUploadDirPath;
        private @Nullable String sourceJdkVersion;
        private @Nullable String targetJdkVersion;
        private @Nullable String timeCreated;
        private @Nullable String workRequestId;
        public Builder() {}
        public Builder(GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationExecutionType = defaults.applicationExecutionType;
    	      this.applicationName = defaults.applicationName;
    	      this.applicationPath = defaults.applicationPath;
    	      this.bucket = defaults.bucket;
    	      this.fleetId = defaults.fleetId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.metadata = defaults.metadata;
    	      this.namespace = defaults.namespace;
    	      this.objectLists = defaults.objectLists;
    	      this.objectStorageUploadDirPath = defaults.objectStorageUploadDirPath;
    	      this.sourceJdkVersion = defaults.sourceJdkVersion;
    	      this.targetJdkVersion = defaults.targetJdkVersion;
    	      this.timeCreated = defaults.timeCreated;
    	      this.workRequestId = defaults.workRequestId;
        }

        @CustomType.Setter
        public Builder applicationExecutionType(@Nullable String applicationExecutionType) {
            this.applicationExecutionType = applicationExecutionType;
            return this;
        }
        @CustomType.Setter
        public Builder applicationName(@Nullable String applicationName) {
            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder applicationPath(@Nullable String applicationPath) {
            this.applicationPath = applicationPath;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder fleetId(@Nullable String fleetId) {
            this.fleetId = fleetId;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable String metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder objectLists(@Nullable List<String> objectLists) {
            this.objectLists = objectLists;
            return this;
        }
        public Builder objectLists(String... objectLists) {
            return objectLists(List.of(objectLists));
        }
        @CustomType.Setter
        public Builder objectStorageUploadDirPath(@Nullable String objectStorageUploadDirPath) {
            this.objectStorageUploadDirPath = objectStorageUploadDirPath;
            return this;
        }
        @CustomType.Setter
        public Builder sourceJdkVersion(@Nullable String sourceJdkVersion) {
            this.sourceJdkVersion = sourceJdkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder targetJdkVersion(@Nullable String targetJdkVersion) {
            this.targetJdkVersion = targetJdkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(@Nullable String workRequestId) {
            this.workRequestId = workRequestId;
            return this;
        }
        public GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem build() {
            final var o = new GetFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem();
            o.applicationExecutionType = applicationExecutionType;
            o.applicationName = applicationName;
            o.applicationPath = applicationPath;
            o.bucket = bucket;
            o.fleetId = fleetId;
            o.hostName = hostName;
            o.id = id;
            o.managedInstanceId = managedInstanceId;
            o.metadata = metadata;
            o.namespace = namespace;
            o.objectLists = objectLists;
            o.objectStorageUploadDirPath = objectStorageUploadDirPath;
            o.sourceJdkVersion = sourceJdkVersion;
            o.targetJdkVersion = targetJdkVersion;
            o.timeCreated = timeCreated;
            o.workRequestId = workRequestId;
            return o;
        }
    }
}
