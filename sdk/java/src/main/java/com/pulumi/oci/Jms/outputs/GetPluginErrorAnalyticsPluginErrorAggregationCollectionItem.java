// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Jms.outputs.GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem {
    /**
     * @return Count of plugins with no problems.
     * 
     */
    private Integer healthyPluginCount;
    /**
     * @return List of plugin aggregation errors.
     * 
     */
    private List<GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation> pluginErrorAggregations;

    private GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem() {}
    /**
     * @return Count of plugins with no problems.
     * 
     */
    public Integer healthyPluginCount() {
        return this.healthyPluginCount;
    }
    /**
     * @return List of plugin aggregation errors.
     * 
     */
    public List<GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation> pluginErrorAggregations() {
        return this.pluginErrorAggregations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer healthyPluginCount;
        private List<GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation> pluginErrorAggregations;
        public Builder() {}
        public Builder(GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthyPluginCount = defaults.healthyPluginCount;
    	      this.pluginErrorAggregations = defaults.pluginErrorAggregations;
        }

        @CustomType.Setter
        public Builder healthyPluginCount(Integer healthyPluginCount) {
            if (healthyPluginCount == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem", "healthyPluginCount");
            }
            this.healthyPluginCount = healthyPluginCount;
            return this;
        }
        @CustomType.Setter
        public Builder pluginErrorAggregations(List<GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation> pluginErrorAggregations) {
            if (pluginErrorAggregations == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem", "pluginErrorAggregations");
            }
            this.pluginErrorAggregations = pluginErrorAggregations;
            return this;
        }
        public Builder pluginErrorAggregations(GetPluginErrorAnalyticsPluginErrorAggregationCollectionItemPluginErrorAggregation... pluginErrorAggregations) {
            return pluginErrorAggregations(List.of(pluginErrorAggregations));
        }
        public GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem build() {
            final var _resultValue = new GetPluginErrorAnalyticsPluginErrorAggregationCollectionItem();
            _resultValue.healthyPluginCount = healthyPluginCount;
            _resultValue.pluginErrorAggregations = pluginErrorAggregations;
            return _resultValue;
        }
    }
}
