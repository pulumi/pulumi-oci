// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Jms.outputs.GetPluginErrorsPluginErrorCollectionItemError;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPluginErrorsPluginErrorCollectionItem {
    /**
     * @return The agent type.
     * 
     */
    private String agentType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return List of plugin error details.
     * 
     */
    private List<GetPluginErrorsPluginErrorCollectionItemError> errors;
    /**
     * @return The HostName or Compute Instance name of the Managed Instance running the plugin.
     * 
     */
    private String hostName;
    /**
     * @return The Fleet-unique identifier of the managed instance.
     * 
     */
    private String managedInstanceId;
    /**
     * @return The timestamp of the first time an error was detected.
     * 
     */
    private String timeFirstSeen;
    /**
     * @return The timestamp of the last time an error was detected.
     * 
     */
    private String timeLastSeen;

    private GetPluginErrorsPluginErrorCollectionItem() {}
    /**
     * @return The agent type.
     * 
     */
    public String agentType() {
        return this.agentType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of plugin error details.
     * 
     */
    public List<GetPluginErrorsPluginErrorCollectionItemError> errors() {
        return this.errors;
    }
    /**
     * @return The HostName or Compute Instance name of the Managed Instance running the plugin.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The Fleet-unique identifier of the managed instance.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The timestamp of the first time an error was detected.
     * 
     */
    public String timeFirstSeen() {
        return this.timeFirstSeen;
    }
    /**
     * @return The timestamp of the last time an error was detected.
     * 
     */
    public String timeLastSeen() {
        return this.timeLastSeen;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluginErrorsPluginErrorCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentType;
        private String compartmentId;
        private List<GetPluginErrorsPluginErrorCollectionItemError> errors;
        private String hostName;
        private String managedInstanceId;
        private String timeFirstSeen;
        private String timeLastSeen;
        public Builder() {}
        public Builder(GetPluginErrorsPluginErrorCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentType = defaults.agentType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.errors = defaults.errors;
    	      this.hostName = defaults.hostName;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.timeFirstSeen = defaults.timeFirstSeen;
    	      this.timeLastSeen = defaults.timeLastSeen;
        }

        @CustomType.Setter
        public Builder agentType(String agentType) {
            if (agentType == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "agentType");
            }
            this.agentType = agentType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<GetPluginErrorsPluginErrorCollectionItemError> errors) {
            if (errors == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "errors");
            }
            this.errors = errors;
            return this;
        }
        public Builder errors(GetPluginErrorsPluginErrorCollectionItemError... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder timeFirstSeen(String timeFirstSeen) {
            if (timeFirstSeen == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "timeFirstSeen");
            }
            this.timeFirstSeen = timeFirstSeen;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastSeen(String timeLastSeen) {
            if (timeLastSeen == null) {
              throw new MissingRequiredPropertyException("GetPluginErrorsPluginErrorCollectionItem", "timeLastSeen");
            }
            this.timeLastSeen = timeLastSeen;
            return this;
        }
        public GetPluginErrorsPluginErrorCollectionItem build() {
            final var _resultValue = new GetPluginErrorsPluginErrorCollectionItem();
            _resultValue.agentType = agentType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.errors = errors;
            _resultValue.hostName = hostName;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.timeFirstSeen = timeFirstSeen;
            _resultValue.timeLastSeen = timeLastSeen;
            return _resultValue;
        }
    }
}
