// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Jms.outputs.GetTaskScheduleTaskDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTaskScheduleResult {
    /**
     * @return Name of the task creator.
     * 
     */
    private String createdBy;
    /**
     * @return Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
     * 
     */
    private String executionRecurrences;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    private @Nullable String fleetId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
     * 
     */
    private String id;
    /**
     * @return The name of the task schedule.
     * 
     */
    private String name;
    /**
     * @return All possible status of task schedule.
     * 
     */
    private String state;
    /**
     * @return The minimum details of a task.
     * 
     */
    private List<GetTaskScheduleTaskDetail> taskDetails;
    private String taskScheduleId;
    /**
     * @return The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    private String timeLastRun;
    /**
     * @return The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    private String timeLastUpdated;
    /**
     * @return The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    private String timeNextRun;

    private GetTaskScheduleResult() {}
    /**
     * @return Name of the task creator.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10&#39;. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be &#39;DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z&#39;.
     * 
     */
    public String executionRecurrences() {
        return this.executionRecurrences;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     * 
     */
    public Optional<String> fleetId() {
        return Optional.ofNullable(this.fleetId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the task schedule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return All possible status of task schedule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The minimum details of a task.
     * 
     */
    public List<GetTaskScheduleTaskDetail> taskDetails() {
        return this.taskDetails;
    }
    public String taskScheduleId() {
        return this.taskScheduleId;
    }
    /**
     * @return The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public String timeLastRun() {
        return this.timeLastRun;
    }
    /**
     * @return The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public String timeLastUpdated() {
        return this.timeLastUpdated;
    }
    /**
     * @return The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public String timeNextRun() {
        return this.timeNextRun;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskScheduleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdBy;
        private String executionRecurrences;
        private @Nullable String fleetId;
        private String id;
        private String name;
        private String state;
        private List<GetTaskScheduleTaskDetail> taskDetails;
        private String taskScheduleId;
        private String timeCreated;
        private String timeLastRun;
        private String timeLastUpdated;
        private String timeNextRun;
        public Builder() {}
        public Builder(GetTaskScheduleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBy = defaults.createdBy;
    	      this.executionRecurrences = defaults.executionRecurrences;
    	      this.fleetId = defaults.fleetId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.taskDetails = defaults.taskDetails;
    	      this.taskScheduleId = defaults.taskScheduleId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastRun = defaults.timeLastRun;
    	      this.timeLastUpdated = defaults.timeLastUpdated;
    	      this.timeNextRun = defaults.timeNextRun;
        }

        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder executionRecurrences(String executionRecurrences) {
            if (executionRecurrences == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "executionRecurrences");
            }
            this.executionRecurrences = executionRecurrences;
            return this;
        }
        @CustomType.Setter
        public Builder fleetId(@Nullable String fleetId) {

            this.fleetId = fleetId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder taskDetails(List<GetTaskScheduleTaskDetail> taskDetails) {
            if (taskDetails == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "taskDetails");
            }
            this.taskDetails = taskDetails;
            return this;
        }
        public Builder taskDetails(GetTaskScheduleTaskDetail... taskDetails) {
            return taskDetails(List.of(taskDetails));
        }
        @CustomType.Setter
        public Builder taskScheduleId(String taskScheduleId) {
            if (taskScheduleId == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "taskScheduleId");
            }
            this.taskScheduleId = taskScheduleId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastRun(String timeLastRun) {
            if (timeLastRun == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "timeLastRun");
            }
            this.timeLastRun = timeLastRun;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastUpdated(String timeLastUpdated) {
            if (timeLastUpdated == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "timeLastUpdated");
            }
            this.timeLastUpdated = timeLastUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeNextRun(String timeNextRun) {
            if (timeNextRun == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleResult", "timeNextRun");
            }
            this.timeNextRun = timeNextRun;
            return this;
        }
        public GetTaskScheduleResult build() {
            final var _resultValue = new GetTaskScheduleResult();
            _resultValue.createdBy = createdBy;
            _resultValue.executionRecurrences = executionRecurrences;
            _resultValue.fleetId = fleetId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.taskDetails = taskDetails;
            _resultValue.taskScheduleId = taskScheduleId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastRun = timeLastRun;
            _resultValue.timeLastUpdated = timeLastUpdated;
            _resultValue.timeNextRun = timeNextRun;
            return _resultValue;
        }
    }
}
