// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite {
    /**
     * @return Artifact content type for the Java version.
     * 
     */
    private String artifactContentType;
    /**
     * @return Forces the installation request even if a more recent release is already present in the host.
     * 
     */
    private Boolean forceInstall;
    /**
     * @return Flag to install headless or headful Java installation. Only valid for Oracle Linux in OCI.
     * 
     */
    private Boolean headlessMode;
    /**
     * @return Custom path to install new Java installation site.
     * 
     */
    private String installationPath;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related managed instance.
     * 
     */
    private String managedInstanceId;
    /**
     * @return The release version of the Java Runtime.
     * 
     */
    private String releaseVersion;

    private GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite() {}
    /**
     * @return Artifact content type for the Java version.
     * 
     */
    public String artifactContentType() {
        return this.artifactContentType;
    }
    /**
     * @return Forces the installation request even if a more recent release is already present in the host.
     * 
     */
    public Boolean forceInstall() {
        return this.forceInstall;
    }
    /**
     * @return Flag to install headless or headful Java installation. Only valid for Oracle Linux in OCI.
     * 
     */
    public Boolean headlessMode() {
        return this.headlessMode;
    }
    /**
     * @return Custom path to install new Java installation site.
     * 
     */
    public String installationPath() {
        return this.installationPath;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related managed instance.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The release version of the Java Runtime.
     * 
     */
    public String releaseVersion() {
        return this.releaseVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactContentType;
        private Boolean forceInstall;
        private Boolean headlessMode;
        private String installationPath;
        private String managedInstanceId;
        private String releaseVersion;
        public Builder() {}
        public Builder(GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactContentType = defaults.artifactContentType;
    	      this.forceInstall = defaults.forceInstall;
    	      this.headlessMode = defaults.headlessMode;
    	      this.installationPath = defaults.installationPath;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.releaseVersion = defaults.releaseVersion;
        }

        @CustomType.Setter
        public Builder artifactContentType(String artifactContentType) {
            if (artifactContentType == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "artifactContentType");
            }
            this.artifactContentType = artifactContentType;
            return this;
        }
        @CustomType.Setter
        public Builder forceInstall(Boolean forceInstall) {
            if (forceInstall == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "forceInstall");
            }
            this.forceInstall = forceInstall;
            return this;
        }
        @CustomType.Setter
        public Builder headlessMode(Boolean headlessMode) {
            if (headlessMode == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "headlessMode");
            }
            this.headlessMode = headlessMode;
            return this;
        }
        @CustomType.Setter
        public Builder installationPath(String installationPath) {
            if (installationPath == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "installationPath");
            }
            this.installationPath = installationPath;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder releaseVersion(String releaseVersion) {
            if (releaseVersion == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite", "releaseVersion");
            }
            this.releaseVersion = releaseVersion;
            return this;
        }
        public GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite build() {
            final var _resultValue = new GetTaskScheduleTaskDetailAddInstallationSiteTaskRequestInstallationSite();
            _resultValue.artifactContentType = artifactContentType;
            _resultValue.forceInstall = forceInstall;
            _resultValue.headlessMode = headlessMode;
            _resultValue.installationPath = installationPath;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.releaseVersion = releaseVersion;
            return _resultValue;
        }
    }
}
