// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Jms.outputs.GetTaskScheduleTaskDetailJfrTaskRequestTarget;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTaskScheduleTaskDetailJfrTaskRequest {
    /**
     * @return The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
     * 
     */
    private String jfcProfileName;
    /**
     * @return The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
     * 
     */
    private String jfcV1;
    /**
     * @return The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
     * 
     */
    private String jfcV2;
    /**
     * @return Duration of the JFR recording in minutes.
     * 
     */
    private Integer recordingDurationInMinutes;
    /**
     * @return The maximum size limit for the JFR file collected.
     * 
     */
    private Integer recordingSizeInMb;
    /**
     * @return The attachment targets to start JFR.
     * 
     */
    private List<GetTaskScheduleTaskDetailJfrTaskRequestTarget> targets;
    /**
     * @return Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    private Integer waitingPeriodInMinutes;

    private GetTaskScheduleTaskDetailJfrTaskRequest() {}
    /**
     * @return The profile used for JFR events selection. If the name isn&#39;t recognized, the settings from jfcV1 or jfcV2 will be used depending on the JVM version. Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
     * 
     */
    public String jfcProfileName() {
        return this.jfcProfileName;
    }
    /**
     * @return The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
     * 
     */
    public String jfcV1() {
        return this.jfcV1;
    }
    /**
     * @return The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
     * 
     */
    public String jfcV2() {
        return this.jfcV2;
    }
    /**
     * @return Duration of the JFR recording in minutes.
     * 
     */
    public Integer recordingDurationInMinutes() {
        return this.recordingDurationInMinutes;
    }
    /**
     * @return The maximum size limit for the JFR file collected.
     * 
     */
    public Integer recordingSizeInMb() {
        return this.recordingSizeInMb;
    }
    /**
     * @return The attachment targets to start JFR.
     * 
     */
    public List<GetTaskScheduleTaskDetailJfrTaskRequestTarget> targets() {
        return this.targets;
    }
    /**
     * @return Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    public Integer waitingPeriodInMinutes() {
        return this.waitingPeriodInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTaskScheduleTaskDetailJfrTaskRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String jfcProfileName;
        private String jfcV1;
        private String jfcV2;
        private Integer recordingDurationInMinutes;
        private Integer recordingSizeInMb;
        private List<GetTaskScheduleTaskDetailJfrTaskRequestTarget> targets;
        private Integer waitingPeriodInMinutes;
        public Builder() {}
        public Builder(GetTaskScheduleTaskDetailJfrTaskRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.jfcProfileName = defaults.jfcProfileName;
    	      this.jfcV1 = defaults.jfcV1;
    	      this.jfcV2 = defaults.jfcV2;
    	      this.recordingDurationInMinutes = defaults.recordingDurationInMinutes;
    	      this.recordingSizeInMb = defaults.recordingSizeInMb;
    	      this.targets = defaults.targets;
    	      this.waitingPeriodInMinutes = defaults.waitingPeriodInMinutes;
        }

        @CustomType.Setter
        public Builder jfcProfileName(String jfcProfileName) {
            if (jfcProfileName == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "jfcProfileName");
            }
            this.jfcProfileName = jfcProfileName;
            return this;
        }
        @CustomType.Setter
        public Builder jfcV1(String jfcV1) {
            if (jfcV1 == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "jfcV1");
            }
            this.jfcV1 = jfcV1;
            return this;
        }
        @CustomType.Setter
        public Builder jfcV2(String jfcV2) {
            if (jfcV2 == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "jfcV2");
            }
            this.jfcV2 = jfcV2;
            return this;
        }
        @CustomType.Setter
        public Builder recordingDurationInMinutes(Integer recordingDurationInMinutes) {
            if (recordingDurationInMinutes == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "recordingDurationInMinutes");
            }
            this.recordingDurationInMinutes = recordingDurationInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder recordingSizeInMb(Integer recordingSizeInMb) {
            if (recordingSizeInMb == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "recordingSizeInMb");
            }
            this.recordingSizeInMb = recordingSizeInMb;
            return this;
        }
        @CustomType.Setter
        public Builder targets(List<GetTaskScheduleTaskDetailJfrTaskRequestTarget> targets) {
            if (targets == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "targets");
            }
            this.targets = targets;
            return this;
        }
        public Builder targets(GetTaskScheduleTaskDetailJfrTaskRequestTarget... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder waitingPeriodInMinutes(Integer waitingPeriodInMinutes) {
            if (waitingPeriodInMinutes == null) {
              throw new MissingRequiredPropertyException("GetTaskScheduleTaskDetailJfrTaskRequest", "waitingPeriodInMinutes");
            }
            this.waitingPeriodInMinutes = waitingPeriodInMinutes;
            return this;
        }
        public GetTaskScheduleTaskDetailJfrTaskRequest build() {
            final var _resultValue = new GetTaskScheduleTaskDetailJfrTaskRequest();
            _resultValue.jfcProfileName = jfcProfileName;
            _resultValue.jfcV1 = jfcV1;
            _resultValue.jfcV2 = jfcV2;
            _resultValue.recordingDurationInMinutes = recordingDurationInMinutes;
            _resultValue.recordingSizeInMb = recordingSizeInMb;
            _resultValue.targets = targets;
            _resultValue.waitingPeriodInMinutes = waitingPeriodInMinutes;
            return _resultValue;
        }
    }
}
