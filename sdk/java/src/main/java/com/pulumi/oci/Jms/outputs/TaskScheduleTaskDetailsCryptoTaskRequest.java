// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Jms.outputs.TaskScheduleTaskDetailsCryptoTaskRequestTarget;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskScheduleTaskDetailsCryptoTaskRequest {
    /**
     * @return (Updatable) Duration of the JFR recording in minutes.
     * 
     */
    private @Nullable Integer recordingDurationInMinutes;
    /**
     * @return (Updatable) The attachment targets to start JFR.
     * 
     */
    private @Nullable List<TaskScheduleTaskDetailsCryptoTaskRequestTarget> targets;
    /**
     * @return (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    private @Nullable Integer waitingPeriodInMinutes;

    private TaskScheduleTaskDetailsCryptoTaskRequest() {}
    /**
     * @return (Updatable) Duration of the JFR recording in minutes.
     * 
     */
    public Optional<Integer> recordingDurationInMinutes() {
        return Optional.ofNullable(this.recordingDurationInMinutes);
    }
    /**
     * @return (Updatable) The attachment targets to start JFR.
     * 
     */
    public List<TaskScheduleTaskDetailsCryptoTaskRequestTarget> targets() {
        return this.targets == null ? List.of() : this.targets;
    }
    /**
     * @return (Updatable) Period to looking for JVMs. In addition to attach to running JVMs when given the command, JVM started within the waiting period will also be attached for JFR. The value should be larger than the agent polling interval setting for the fleet to ensure agent can get the instructions. If not specified, the agent polling interval for the fleet is used.
     * 
     */
    public Optional<Integer> waitingPeriodInMinutes() {
        return Optional.ofNullable(this.waitingPeriodInMinutes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskScheduleTaskDetailsCryptoTaskRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer recordingDurationInMinutes;
        private @Nullable List<TaskScheduleTaskDetailsCryptoTaskRequestTarget> targets;
        private @Nullable Integer waitingPeriodInMinutes;
        public Builder() {}
        public Builder(TaskScheduleTaskDetailsCryptoTaskRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recordingDurationInMinutes = defaults.recordingDurationInMinutes;
    	      this.targets = defaults.targets;
    	      this.waitingPeriodInMinutes = defaults.waitingPeriodInMinutes;
        }

        @CustomType.Setter
        public Builder recordingDurationInMinutes(@Nullable Integer recordingDurationInMinutes) {

            this.recordingDurationInMinutes = recordingDurationInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder targets(@Nullable List<TaskScheduleTaskDetailsCryptoTaskRequestTarget> targets) {

            this.targets = targets;
            return this;
        }
        public Builder targets(TaskScheduleTaskDetailsCryptoTaskRequestTarget... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder waitingPeriodInMinutes(@Nullable Integer waitingPeriodInMinutes) {

            this.waitingPeriodInMinutes = waitingPeriodInMinutes;
            return this;
        }
        public TaskScheduleTaskDetailsCryptoTaskRequest build() {
            final var _resultValue = new TaskScheduleTaskDetailsCryptoTaskRequest();
            _resultValue.recordingDurationInMinutes = recordingDurationInMinutes;
            _resultValue.targets = targets;
            _resultValue.waitingPeriodInMinutes = waitingPeriodInMinutes;
            return _resultValue;
        }
    }
}
