// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Jms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget {
    /**
     * @return (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
     * 
     */
    private @Nullable String applicationInstallationKey;
    /**
     * @return (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
     * 
     */
    private @Nullable List<String> excludePackagePrefixes;
    /**
     * @return (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
     * 
     */
    private @Nullable List<String> includePackagePrefixes;
    /**
     * @return (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    private @Nullable String managedInstanceId;
    /**
     * @return (Updatable) The JDK version the application is currently running on.
     * 
     */
    private @Nullable String sourceJdkVersion;
    /**
     * @return (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
     * 
     */
    private @Nullable String targetJdkVersion;

    private TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget() {}
    /**
     * @return (Updatable) The unique key that identifies the application&#39;s installation path that is to be used for the Java migration analysis.
     * 
     */
    public Optional<String> applicationInstallationKey() {
        return Optional.ofNullable(this.applicationInstallationKey);
    }
    /**
     * @return (Updatable) Excludes the packages that starts with the prefix from the migration analysis result. Either this or includePackagePrefixes can be specified.
     * 
     */
    public List<String> excludePackagePrefixes() {
        return this.excludePackagePrefixes == null ? List.of() : this.excludePackagePrefixes;
    }
    /**
     * @return (Updatable) includes the packages that starts with the prefix from the migration analysis result. Either this or excludePackagePrefixes can be specified.
     * 
     */
    public List<String> includePackagePrefixes() {
        return this.includePackagePrefixes == null ? List.of() : this.includePackagePrefixes;
    }
    /**
     * @return (Updatable) The OCID of the managed instance that hosts the application for which the Java migration analysis was performed.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    /**
     * @return (Updatable) The JDK version the application is currently running on.
     * 
     */
    public Optional<String> sourceJdkVersion() {
        return Optional.ofNullable(this.sourceJdkVersion);
    }
    /**
     * @return (Updatable) The JDK version against which the migration analysis was performed to identify effort required to move from source JDK.
     * 
     */
    public Optional<String> targetJdkVersion() {
        return Optional.ofNullable(this.targetJdkVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationInstallationKey;
        private @Nullable List<String> excludePackagePrefixes;
        private @Nullable List<String> includePackagePrefixes;
        private @Nullable String managedInstanceId;
        private @Nullable String sourceJdkVersion;
        private @Nullable String targetJdkVersion;
        public Builder() {}
        public Builder(TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationInstallationKey = defaults.applicationInstallationKey;
    	      this.excludePackagePrefixes = defaults.excludePackagePrefixes;
    	      this.includePackagePrefixes = defaults.includePackagePrefixes;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.sourceJdkVersion = defaults.sourceJdkVersion;
    	      this.targetJdkVersion = defaults.targetJdkVersion;
        }

        @CustomType.Setter
        public Builder applicationInstallationKey(@Nullable String applicationInstallationKey) {

            this.applicationInstallationKey = applicationInstallationKey;
            return this;
        }
        @CustomType.Setter
        public Builder excludePackagePrefixes(@Nullable List<String> excludePackagePrefixes) {

            this.excludePackagePrefixes = excludePackagePrefixes;
            return this;
        }
        public Builder excludePackagePrefixes(String... excludePackagePrefixes) {
            return excludePackagePrefixes(List.of(excludePackagePrefixes));
        }
        @CustomType.Setter
        public Builder includePackagePrefixes(@Nullable List<String> includePackagePrefixes) {

            this.includePackagePrefixes = includePackagePrefixes;
            return this;
        }
        public Builder includePackagePrefixes(String... includePackagePrefixes) {
            return includePackagePrefixes(List.of(includePackagePrefixes));
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {

            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceJdkVersion(@Nullable String sourceJdkVersion) {

            this.sourceJdkVersion = sourceJdkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder targetJdkVersion(@Nullable String targetJdkVersion) {

            this.targetJdkVersion = targetJdkVersion;
            return this;
        }
        public TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget build() {
            final var _resultValue = new TaskScheduleTaskDetailsJavaMigrationTaskRequestTarget();
            _resultValue.applicationInstallationKey = applicationInstallationKey;
            _resultValue.excludePackagePrefixes = excludePackagePrefixes;
            _resultValue.includePackagePrefixes = includePackagePrefixes;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.sourceJdkVersion = sourceJdkVersion;
            _resultValue.targetJdkVersion = targetJdkVersion;
            return _resultValue;
        }
    }
}
