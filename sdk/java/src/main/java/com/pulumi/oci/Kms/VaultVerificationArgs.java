// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Kms.inputs.VaultVerificationReplicaVaultMetadataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VaultVerificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VaultVerificationArgs Empty = new VaultVerificationArgs();

    /**
     * (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     * 
     */
    @Import(name="replicaRegion", required=true)
    private Output<String> replicaRegion;

    /**
     * @return (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     * 
     */
    public Output<String> replicaRegion() {
        return this.replicaRegion;
    }

    @Import(name="replicaVaultMetadata")
    private @Nullable Output<VaultVerificationReplicaVaultMetadataArgs> replicaVaultMetadata;

    public Optional<Output<VaultVerificationReplicaVaultMetadataArgs>> replicaVaultMetadata() {
        return Optional.ofNullable(this.replicaVaultMetadata);
    }

    /**
     * The OCID of the primary vault to create replica from.
     * 
     */
    @Import(name="vaultId", required=true)
    private Output<String> vaultId;

    /**
     * @return The OCID of the primary vault to create replica from.
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }

    private VaultVerificationArgs() {}

    private VaultVerificationArgs(VaultVerificationArgs $) {
        this.replicaRegion = $.replicaRegion;
        this.replicaVaultMetadata = $.replicaVaultMetadata;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VaultVerificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VaultVerificationArgs $;

        public Builder() {
            $ = new VaultVerificationArgs();
        }

        public Builder(VaultVerificationArgs defaults) {
            $ = new VaultVerificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param replicaRegion (Updatable) The region to be created replica to. When updated,
         * replica will be deleted from old region, and created to updated region.
         * 
         * @return builder
         * 
         */
        public Builder replicaRegion(Output<String> replicaRegion) {
            $.replicaRegion = replicaRegion;
            return this;
        }

        /**
         * @param replicaRegion (Updatable) The region to be created replica to. When updated,
         * replica will be deleted from old region, and created to updated region.
         * 
         * @return builder
         * 
         */
        public Builder replicaRegion(String replicaRegion) {
            return replicaRegion(Output.of(replicaRegion));
        }

        public Builder replicaVaultMetadata(@Nullable Output<VaultVerificationReplicaVaultMetadataArgs> replicaVaultMetadata) {
            $.replicaVaultMetadata = replicaVaultMetadata;
            return this;
        }

        public Builder replicaVaultMetadata(VaultVerificationReplicaVaultMetadataArgs replicaVaultMetadata) {
            return replicaVaultMetadata(Output.of(replicaVaultMetadata));
        }

        /**
         * @param vaultId The OCID of the primary vault to create replica from.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The OCID of the primary vault to create replica from.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public VaultVerificationArgs build() {
            if ($.replicaRegion == null) {
                throw new MissingRequiredPropertyException("VaultVerificationArgs", "replicaRegion");
            }
            if ($.vaultId == null) {
                throw new MissingRequiredPropertyException("VaultVerificationArgs", "vaultId");
            }
            return $;
        }
    }

}
