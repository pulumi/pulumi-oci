// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Kms.inputs.VaultVerificationReplicaVaultMetadataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VaultVerificationState extends com.pulumi.resources.ResourceArgs {

    public static final VaultVerificationState Empty = new VaultVerificationState();

    @Import(name="cryptoEndpoint")
    private @Nullable Output<String> cryptoEndpoint;

    public Optional<Output<String>> cryptoEndpoint() {
        return Optional.ofNullable(this.cryptoEndpoint);
    }

    @Import(name="managementEndpoint")
    private @Nullable Output<String> managementEndpoint;

    public Optional<Output<String>> managementEndpoint() {
        return Optional.ofNullable(this.managementEndpoint);
    }

    /**
     * (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     * 
     */
    @Import(name="replicaRegion")
    private @Nullable Output<String> replicaRegion;

    /**
     * @return (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     * 
     */
    public Optional<Output<String>> replicaRegion() {
        return Optional.ofNullable(this.replicaRegion);
    }

    @Import(name="replicaVaultMetadata")
    private @Nullable Output<VaultVerificationReplicaVaultMetadataArgs> replicaVaultMetadata;

    public Optional<Output<VaultVerificationReplicaVaultMetadataArgs>> replicaVaultMetadata() {
        return Optional.ofNullable(this.replicaVaultMetadata);
    }

    /**
     * The OCID of the primary vault to create replica from.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The OCID of the primary vault to create replica from.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    @Import(name="vaultReplicaStatus")
    private @Nullable Output<String> vaultReplicaStatus;

    public Optional<Output<String>> vaultReplicaStatus() {
        return Optional.ofNullable(this.vaultReplicaStatus);
    }

    private VaultVerificationState() {}

    private VaultVerificationState(VaultVerificationState $) {
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.managementEndpoint = $.managementEndpoint;
        this.replicaRegion = $.replicaRegion;
        this.replicaVaultMetadata = $.replicaVaultMetadata;
        this.vaultId = $.vaultId;
        this.vaultReplicaStatus = $.vaultReplicaStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VaultVerificationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VaultVerificationState $;

        public Builder() {
            $ = new VaultVerificationState();
        }

        public Builder(VaultVerificationState defaults) {
            $ = new VaultVerificationState(Objects.requireNonNull(defaults));
        }

        public Builder cryptoEndpoint(@Nullable Output<String> cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        public Builder cryptoEndpoint(String cryptoEndpoint) {
            return cryptoEndpoint(Output.of(cryptoEndpoint));
        }

        public Builder managementEndpoint(@Nullable Output<String> managementEndpoint) {
            $.managementEndpoint = managementEndpoint;
            return this;
        }

        public Builder managementEndpoint(String managementEndpoint) {
            return managementEndpoint(Output.of(managementEndpoint));
        }

        /**
         * @param replicaRegion (Updatable) The region to be created replica to. When updated,
         * replica will be deleted from old region, and created to updated region.
         * 
         * @return builder
         * 
         */
        public Builder replicaRegion(@Nullable Output<String> replicaRegion) {
            $.replicaRegion = replicaRegion;
            return this;
        }

        /**
         * @param replicaRegion (Updatable) The region to be created replica to. When updated,
         * replica will be deleted from old region, and created to updated region.
         * 
         * @return builder
         * 
         */
        public Builder replicaRegion(String replicaRegion) {
            return replicaRegion(Output.of(replicaRegion));
        }

        public Builder replicaVaultMetadata(@Nullable Output<VaultVerificationReplicaVaultMetadataArgs> replicaVaultMetadata) {
            $.replicaVaultMetadata = replicaVaultMetadata;
            return this;
        }

        public Builder replicaVaultMetadata(VaultVerificationReplicaVaultMetadataArgs replicaVaultMetadata) {
            return replicaVaultMetadata(Output.of(replicaVaultMetadata));
        }

        /**
         * @param vaultId The OCID of the primary vault to create replica from.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The OCID of the primary vault to create replica from.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public Builder vaultReplicaStatus(@Nullable Output<String> vaultReplicaStatus) {
            $.vaultReplicaStatus = vaultReplicaStatus;
            return this;
        }

        public Builder vaultReplicaStatus(String vaultReplicaStatus) {
            return vaultReplicaStatus(Output.of(vaultReplicaStatus));
        }

        public VaultVerificationState build() {
            return $;
        }
    }

}
