// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEkmsPrivateEndpointResult {
    /**
     * @return CABundle to validate TLS certificate of the external key manager system in PEM format
     * 
     */
    private String caBundle;
    /**
     * @return Identifier of the compartment this EKMS private endpoint belongs to
     * 
     */
    private String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Mutable name of the EKMS private endpoint
     * 
     */
    private String displayName;
    private String ekmsPrivateEndpointId;
    /**
     * @return Private IP of the external key manager system to connect to from the EKMS private endpoint
     * 
     */
    private String externalKeyManagerIp;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in &#39;Failed&#39; state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The port of the external key manager system
     * 
     */
    private Integer port;
    /**
     * @return The IP address in the customer&#39;s VCN for the EKMS private endpoint. This is taken from subnet
     * 
     */
    private String privateEndpointIp;
    /**
     * @return The current state of the EKMS private endpoint resource.
     * 
     */
    private String state;
    /**
     * @return Subnet Identifier
     * 
     */
    private String subnetId;
    /**
     * @return The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetEkmsPrivateEndpointResult() {}
    /**
     * @return CABundle to validate TLS certificate of the external key manager system in PEM format
     * 
     */
    public String caBundle() {
        return this.caBundle;
    }
    /**
     * @return Identifier of the compartment this EKMS private endpoint belongs to
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Mutable name of the EKMS private endpoint
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String ekmsPrivateEndpointId() {
        return this.ekmsPrivateEndpointId;
    }
    /**
     * @return Private IP of the external key manager system to connect to from the EKMS private endpoint
     * 
     */
    public String externalKeyManagerIp() {
        return this.externalKeyManagerIp;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in &#39;Failed&#39; state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The port of the external key manager system
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The IP address in the customer&#39;s VCN for the EKMS private endpoint. This is taken from subnet
     * 
     */
    public String privateEndpointIp() {
        return this.privateEndpointIp;
    }
    /**
     * @return The current state of the EKMS private endpoint resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Subnet Identifier
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEkmsPrivateEndpointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caBundle;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private String ekmsPrivateEndpointId;
        private String externalKeyManagerIp;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private Integer port;
        private String privateEndpointIp;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetEkmsPrivateEndpointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caBundle = defaults.caBundle;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.ekmsPrivateEndpointId = defaults.ekmsPrivateEndpointId;
    	      this.externalKeyManagerIp = defaults.externalKeyManagerIp;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.port = defaults.port;
    	      this.privateEndpointIp = defaults.privateEndpointIp;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder caBundle(String caBundle) {
            this.caBundle = Objects.requireNonNull(caBundle);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder ekmsPrivateEndpointId(String ekmsPrivateEndpointId) {
            this.ekmsPrivateEndpointId = Objects.requireNonNull(ekmsPrivateEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder externalKeyManagerIp(String externalKeyManagerIp) {
            this.externalKeyManagerIp = Objects.requireNonNull(externalKeyManagerIp);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointIp(String privateEndpointIp) {
            this.privateEndpointIp = Objects.requireNonNull(privateEndpointIp);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetEkmsPrivateEndpointResult build() {
            final var _resultValue = new GetEkmsPrivateEndpointResult();
            _resultValue.caBundle = caBundle;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.ekmsPrivateEndpointId = ekmsPrivateEndpointId;
            _resultValue.externalKeyManagerIp = externalKeyManagerIp;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.port = port;
            _resultValue.privateEndpointIp = privateEndpointIp;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
