// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKeyAutoKeyRotationDetail {
    /**
     * @return The last execution status message of auto key rotation.
     * 
     */
    private String lastRotationMessage;
    /**
     * @return The status of last execution of auto key rotation.
     * 
     */
    private String lastRotationStatus;
    /**
     * @return The interval of auto key rotation. For auto key rotation the interval should between 60 day and 365 days (1 year). Note: User must specify this parameter when creating a new schedule.
     * 
     */
    private Integer rotationIntervalInDays;
    /**
     * @return A property indicating Last rotation Date. Example: `2023-04-04T00:00:00Z`.
     * 
     */
    private String timeOfLastRotation;
    /**
     * @return A property indicating Next estimated scheduled Time, as per the interval, expressed as date YYYY-MM-DD String. Example: `2023-04-04T00:00:00Z`. The time has no significance when scheduling an auto key rotation as this can be done anytime approximately the scheduled day, KMS ignores the time and replaces it with 00:00, for example 2023-04-04T15:14:13Z will be used as 2023-04-04T00:00:00Z.
     * 
     */
    private String timeOfNextRotation;
    /**
     * @return A property indicating  scheduled start date expressed as date YYYY-MM-DD String. Example: `2023-04-04T00:00:00Z. The time has no significance when scheduling an auto key rotation as this can be done anytime approximately the scheduled day, KMS ignores the time and replaces it with 00:00, for example 2023-04-04T15:14:13Z will be used as 2023-04-04T00:00:00Z . Note : Today’s date will be used if not specified by customer.
     * 
     */
    private String timeOfScheduleStart;

    private GetKeyAutoKeyRotationDetail() {}
    /**
     * @return The last execution status message of auto key rotation.
     * 
     */
    public String lastRotationMessage() {
        return this.lastRotationMessage;
    }
    /**
     * @return The status of last execution of auto key rotation.
     * 
     */
    public String lastRotationStatus() {
        return this.lastRotationStatus;
    }
    /**
     * @return The interval of auto key rotation. For auto key rotation the interval should between 60 day and 365 days (1 year). Note: User must specify this parameter when creating a new schedule.
     * 
     */
    public Integer rotationIntervalInDays() {
        return this.rotationIntervalInDays;
    }
    /**
     * @return A property indicating Last rotation Date. Example: `2023-04-04T00:00:00Z`.
     * 
     */
    public String timeOfLastRotation() {
        return this.timeOfLastRotation;
    }
    /**
     * @return A property indicating Next estimated scheduled Time, as per the interval, expressed as date YYYY-MM-DD String. Example: `2023-04-04T00:00:00Z`. The time has no significance when scheduling an auto key rotation as this can be done anytime approximately the scheduled day, KMS ignores the time and replaces it with 00:00, for example 2023-04-04T15:14:13Z will be used as 2023-04-04T00:00:00Z.
     * 
     */
    public String timeOfNextRotation() {
        return this.timeOfNextRotation;
    }
    /**
     * @return A property indicating  scheduled start date expressed as date YYYY-MM-DD String. Example: `2023-04-04T00:00:00Z. The time has no significance when scheduling an auto key rotation as this can be done anytime approximately the scheduled day, KMS ignores the time and replaces it with 00:00, for example 2023-04-04T15:14:13Z will be used as 2023-04-04T00:00:00Z . Note : Today’s date will be used if not specified by customer.
     * 
     */
    public String timeOfScheduleStart() {
        return this.timeOfScheduleStart;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyAutoKeyRotationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String lastRotationMessage;
        private String lastRotationStatus;
        private Integer rotationIntervalInDays;
        private String timeOfLastRotation;
        private String timeOfNextRotation;
        private String timeOfScheduleStart;
        public Builder() {}
        public Builder(GetKeyAutoKeyRotationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lastRotationMessage = defaults.lastRotationMessage;
    	      this.lastRotationStatus = defaults.lastRotationStatus;
    	      this.rotationIntervalInDays = defaults.rotationIntervalInDays;
    	      this.timeOfLastRotation = defaults.timeOfLastRotation;
    	      this.timeOfNextRotation = defaults.timeOfNextRotation;
    	      this.timeOfScheduleStart = defaults.timeOfScheduleStart;
        }

        @CustomType.Setter
        public Builder lastRotationMessage(String lastRotationMessage) {
            if (lastRotationMessage == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "lastRotationMessage");
            }
            this.lastRotationMessage = lastRotationMessage;
            return this;
        }
        @CustomType.Setter
        public Builder lastRotationStatus(String lastRotationStatus) {
            if (lastRotationStatus == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "lastRotationStatus");
            }
            this.lastRotationStatus = lastRotationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder rotationIntervalInDays(Integer rotationIntervalInDays) {
            if (rotationIntervalInDays == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "rotationIntervalInDays");
            }
            this.rotationIntervalInDays = rotationIntervalInDays;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfLastRotation(String timeOfLastRotation) {
            if (timeOfLastRotation == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "timeOfLastRotation");
            }
            this.timeOfLastRotation = timeOfLastRotation;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfNextRotation(String timeOfNextRotation) {
            if (timeOfNextRotation == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "timeOfNextRotation");
            }
            this.timeOfNextRotation = timeOfNextRotation;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfScheduleStart(String timeOfScheduleStart) {
            if (timeOfScheduleStart == null) {
              throw new MissingRequiredPropertyException("GetKeyAutoKeyRotationDetail", "timeOfScheduleStart");
            }
            this.timeOfScheduleStart = timeOfScheduleStart;
            return this;
        }
        public GetKeyAutoKeyRotationDetail build() {
            final var _resultValue = new GetKeyAutoKeyRotationDetail();
            _resultValue.lastRotationMessage = lastRotationMessage;
            _resultValue.lastRotationStatus = lastRotationStatus;
            _resultValue.rotationIntervalInDays = rotationIntervalInDays;
            _resultValue.timeOfLastRotation = timeOfLastRotation;
            _resultValue.timeOfNextRotation = timeOfNextRotation;
            _resultValue.timeOfScheduleStart = timeOfScheduleStart;
            return _resultValue;
        }
    }
}
