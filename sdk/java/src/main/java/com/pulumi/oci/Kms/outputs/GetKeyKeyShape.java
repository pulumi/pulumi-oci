// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKeyKeyShape {
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt. Only AES algorithm is supported for `External` keys.
     * 
     */
    private @Nullable String algorithm;
    /**
     * @return Supported curve IDs for ECDSA keys.
     * 
     */
    private @Nullable String curveId;
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    private @Nullable Integer length;

    private GetKeyKeyShape() {}
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt. Only AES algorithm is supported for `External` keys.
     * 
     */
    public Optional<String> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    /**
     * @return Supported curve IDs for ECDSA keys.
     * 
     */
    public Optional<String> curveId() {
        return Optional.ofNullable(this.curveId);
    }
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    public Optional<Integer> length() {
        return Optional.ofNullable(this.length);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyKeyShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String algorithm;
        private @Nullable String curveId;
        private @Nullable Integer length;
        public Builder() {}
        public Builder(GetKeyKeyShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.curveId = defaults.curveId;
    	      this.length = defaults.length;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable String algorithm) {
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder curveId(@Nullable String curveId) {
            this.curveId = curveId;
            return this;
        }
        @CustomType.Setter
        public Builder length(@Nullable Integer length) {
            this.length = length;
            return this;
        }
        public GetKeyKeyShape build() {
            final var o = new GetKeyKeyShape();
            o.algorithm = algorithm;
            o.curveId = curveId;
            o.length = length;
            return o;
        }
    }
}
