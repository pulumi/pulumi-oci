// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKeyKeyShape {
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt. Only AES algorithm is supported for `External` keys.
     * 
     */
    private String algorithm;
    /**
     * @return Supported curve IDs for ECDSA keys.
     * 
     */
    private String curveId;
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    private Integer length;

    private GetKeyKeyShape() {}
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt. Only AES algorithm is supported for `External` keys.
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return Supported curve IDs for ECDSA keys.
     * 
     */
    public String curveId() {
        return this.curveId;
    }
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    public Integer length() {
        return this.length;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyKeyShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String curveId;
        private Integer length;
        public Builder() {}
        public Builder(GetKeyKeyShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.curveId = defaults.curveId;
    	      this.length = defaults.length;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetKeyKeyShape", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder curveId(String curveId) {
            if (curveId == null) {
              throw new MissingRequiredPropertyException("GetKeyKeyShape", "curveId");
            }
            this.curveId = curveId;
            return this;
        }
        @CustomType.Setter
        public Builder length(Integer length) {
            if (length == null) {
              throw new MissingRequiredPropertyException("GetKeyKeyShape", "length");
            }
            this.length = length;
            return this;
        }
        public GetKeyKeyShape build() {
            final var _resultValue = new GetKeyKeyShape();
            _resultValue.algorithm = algorithm;
            _resultValue.curveId = curveId;
            _resultValue.length = length;
            return _resultValue;
        }
    }
}
