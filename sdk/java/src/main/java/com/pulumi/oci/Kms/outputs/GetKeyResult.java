// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Kms.outputs.GetKeyAutoKeyRotationDetail;
import com.pulumi.oci.Kms.outputs.GetKeyExternalKeyReference;
import com.pulumi.oci.Kms.outputs.GetKeyExternalKeyReferenceDetail;
import com.pulumi.oci.Kms.outputs.GetKeyKeyShape;
import com.pulumi.oci.Kms.outputs.GetKeyReplicaDetail;
import com.pulumi.oci.Kms.outputs.GetKeyRestoreFromFile;
import com.pulumi.oci.Kms.outputs.GetKeyRestoreFromObjectStore;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKeyResult {
    /**
     * @return The details of auto rotation schedule for the Key being create updated or imported.
     * 
     */
    private List<GetKeyAutoKeyRotationDetail> autoKeyRotationDetails;
    /**
     * @return The OCID of the compartment that contains this master encryption key.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    private String currentKeyVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    private String desiredState;
    /**
     * @return A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Key reference data to be returned to the customer as a response.
     * 
     */
    private List<GetKeyExternalKeyReferenceDetail> externalKeyReferenceDetails;
    private List<GetKeyExternalKeyReference> externalKeyReferences;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the key.
     * 
     */
    private String id;
    /**
     * @return A parameter specifying whether the auto key rotation is enabled or not.
     * 
     */
    private Boolean isAutoRotationEnabled;
    /**
     * @return A Boolean value that indicates whether the Key belongs to primary Vault or replica vault.
     * 
     */
    private Boolean isPrimary;
    private String keyId;
    /**
     * @return The cryptographic properties of a key.
     * 
     */
    private List<GetKeyKeyShape> keyShapes;
    private String managementEndpoint;
    /**
     * @return The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default, a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported. A protection mode of `EXTERNAL` mean that the key persists on the customer&#39;s external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key. All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
     * 
     */
    private String protectionMode;
    /**
     * @return Key replica details
     * 
     */
    private List<GetKeyReplicaDetail> replicaDetails;
    /**
     * @return Details where key was backed up.
     * 
     */
    private List<GetKeyRestoreFromFile> restoreFromFiles;
    /**
     * @return Details where key was backed up
     * 
     */
    private List<GetKeyRestoreFromObjectStore> restoreFromObjectStores;
    /**
     * @return When flipped, triggers restore if restore options are provided. Values of 0 or 1 are supported.
     * 
     */
    private Boolean restoreTrigger;
    /**
     * @return The OCID of the key from which this key was restored.
     * 
     */
    private String restoredFromKeyId;
    /**
     * @return The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    private String state;
    /**
     * @return The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when to delete the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;
    /**
     * @return The OCID of the vault that contains this key.
     * 
     */
    private String vaultId;

    private GetKeyResult() {}
    /**
     * @return The details of auto rotation schedule for the Key being create updated or imported.
     * 
     */
    public List<GetKeyAutoKeyRotationDetail> autoKeyRotationDetails() {
        return this.autoKeyRotationDetails;
    }
    /**
     * @return The OCID of the compartment that contains this master encryption key.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    public String currentKeyVersion() {
        return this.currentKeyVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    public String desiredState() {
        return this.desiredState;
    }
    /**
     * @return A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Key reference data to be returned to the customer as a response.
     * 
     */
    public List<GetKeyExternalKeyReferenceDetail> externalKeyReferenceDetails() {
        return this.externalKeyReferenceDetails;
    }
    public List<GetKeyExternalKeyReference> externalKeyReferences() {
        return this.externalKeyReferences;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the key.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A parameter specifying whether the auto key rotation is enabled or not.
     * 
     */
    public Boolean isAutoRotationEnabled() {
        return this.isAutoRotationEnabled;
    }
    /**
     * @return A Boolean value that indicates whether the Key belongs to primary Vault or replica vault.
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return The cryptographic properties of a key.
     * 
     */
    public List<GetKeyKeyShape> keyShapes() {
        return this.keyShapes;
    }
    public String managementEndpoint() {
        return this.managementEndpoint;
    }
    /**
     * @return The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default, a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported. A protection mode of `EXTERNAL` mean that the key persists on the customer&#39;s external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key. All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return Key replica details
     * 
     */
    public List<GetKeyReplicaDetail> replicaDetails() {
        return this.replicaDetails;
    }
    /**
     * @return Details where key was backed up.
     * 
     */
    public List<GetKeyRestoreFromFile> restoreFromFiles() {
        return this.restoreFromFiles;
    }
    /**
     * @return Details where key was backed up
     * 
     */
    public List<GetKeyRestoreFromObjectStore> restoreFromObjectStores() {
        return this.restoreFromObjectStores;
    }
    /**
     * @return When flipped, triggers restore if restore options are provided. Values of 0 or 1 are supported.
     * 
     */
    public Boolean restoreTrigger() {
        return this.restoreTrigger;
    }
    /**
     * @return The OCID of the key from which this key was restored.
     * 
     */
    public String restoredFromKeyId() {
        return this.restoredFromKeyId;
    }
    /**
     * @return The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return The OCID of the vault that contains this key.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetKeyAutoKeyRotationDetail> autoKeyRotationDetails;
        private String compartmentId;
        private String currentKeyVersion;
        private Map<String,String> definedTags;
        private String desiredState;
        private String displayName;
        private List<GetKeyExternalKeyReferenceDetail> externalKeyReferenceDetails;
        private List<GetKeyExternalKeyReference> externalKeyReferences;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isAutoRotationEnabled;
        private Boolean isPrimary;
        private String keyId;
        private List<GetKeyKeyShape> keyShapes;
        private String managementEndpoint;
        private String protectionMode;
        private List<GetKeyReplicaDetail> replicaDetails;
        private List<GetKeyRestoreFromFile> restoreFromFiles;
        private List<GetKeyRestoreFromObjectStore> restoreFromObjectStores;
        private Boolean restoreTrigger;
        private String restoredFromKeyId;
        private String state;
        private String timeCreated;
        private String timeOfDeletion;
        private String vaultId;
        public Builder() {}
        public Builder(GetKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoKeyRotationDetails = defaults.autoKeyRotationDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentKeyVersion = defaults.currentKeyVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.desiredState = defaults.desiredState;
    	      this.displayName = defaults.displayName;
    	      this.externalKeyReferenceDetails = defaults.externalKeyReferenceDetails;
    	      this.externalKeyReferences = defaults.externalKeyReferences;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAutoRotationEnabled = defaults.isAutoRotationEnabled;
    	      this.isPrimary = defaults.isPrimary;
    	      this.keyId = defaults.keyId;
    	      this.keyShapes = defaults.keyShapes;
    	      this.managementEndpoint = defaults.managementEndpoint;
    	      this.protectionMode = defaults.protectionMode;
    	      this.replicaDetails = defaults.replicaDetails;
    	      this.restoreFromFiles = defaults.restoreFromFiles;
    	      this.restoreFromObjectStores = defaults.restoreFromObjectStores;
    	      this.restoreTrigger = defaults.restoreTrigger;
    	      this.restoredFromKeyId = defaults.restoredFromKeyId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder autoKeyRotationDetails(List<GetKeyAutoKeyRotationDetail> autoKeyRotationDetails) {
            if (autoKeyRotationDetails == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "autoKeyRotationDetails");
            }
            this.autoKeyRotationDetails = autoKeyRotationDetails;
            return this;
        }
        public Builder autoKeyRotationDetails(GetKeyAutoKeyRotationDetail... autoKeyRotationDetails) {
            return autoKeyRotationDetails(List.of(autoKeyRotationDetails));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentKeyVersion(String currentKeyVersion) {
            if (currentKeyVersion == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "currentKeyVersion");
            }
            this.currentKeyVersion = currentKeyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder desiredState(String desiredState) {
            if (desiredState == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "desiredState");
            }
            this.desiredState = desiredState;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalKeyReferenceDetails(List<GetKeyExternalKeyReferenceDetail> externalKeyReferenceDetails) {
            if (externalKeyReferenceDetails == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "externalKeyReferenceDetails");
            }
            this.externalKeyReferenceDetails = externalKeyReferenceDetails;
            return this;
        }
        public Builder externalKeyReferenceDetails(GetKeyExternalKeyReferenceDetail... externalKeyReferenceDetails) {
            return externalKeyReferenceDetails(List.of(externalKeyReferenceDetails));
        }
        @CustomType.Setter
        public Builder externalKeyReferences(List<GetKeyExternalKeyReference> externalKeyReferences) {
            if (externalKeyReferences == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "externalKeyReferences");
            }
            this.externalKeyReferences = externalKeyReferences;
            return this;
        }
        public Builder externalKeyReferences(GetKeyExternalKeyReference... externalKeyReferences) {
            return externalKeyReferences(List.of(externalKeyReferences));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoRotationEnabled(Boolean isAutoRotationEnabled) {
            if (isAutoRotationEnabled == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "isAutoRotationEnabled");
            }
            this.isAutoRotationEnabled = isAutoRotationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            if (isPrimary == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "isPrimary");
            }
            this.isPrimary = isPrimary;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyShapes(List<GetKeyKeyShape> keyShapes) {
            if (keyShapes == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "keyShapes");
            }
            this.keyShapes = keyShapes;
            return this;
        }
        public Builder keyShapes(GetKeyKeyShape... keyShapes) {
            return keyShapes(List.of(keyShapes));
        }
        @CustomType.Setter
        public Builder managementEndpoint(String managementEndpoint) {
            if (managementEndpoint == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "managementEndpoint");
            }
            this.managementEndpoint = managementEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            if (protectionMode == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "protectionMode");
            }
            this.protectionMode = protectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder replicaDetails(List<GetKeyReplicaDetail> replicaDetails) {
            if (replicaDetails == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "replicaDetails");
            }
            this.replicaDetails = replicaDetails;
            return this;
        }
        public Builder replicaDetails(GetKeyReplicaDetail... replicaDetails) {
            return replicaDetails(List.of(replicaDetails));
        }
        @CustomType.Setter
        public Builder restoreFromFiles(List<GetKeyRestoreFromFile> restoreFromFiles) {
            if (restoreFromFiles == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "restoreFromFiles");
            }
            this.restoreFromFiles = restoreFromFiles;
            return this;
        }
        public Builder restoreFromFiles(GetKeyRestoreFromFile... restoreFromFiles) {
            return restoreFromFiles(List.of(restoreFromFiles));
        }
        @CustomType.Setter
        public Builder restoreFromObjectStores(List<GetKeyRestoreFromObjectStore> restoreFromObjectStores) {
            if (restoreFromObjectStores == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "restoreFromObjectStores");
            }
            this.restoreFromObjectStores = restoreFromObjectStores;
            return this;
        }
        public Builder restoreFromObjectStores(GetKeyRestoreFromObjectStore... restoreFromObjectStores) {
            return restoreFromObjectStores(List.of(restoreFromObjectStores));
        }
        @CustomType.Setter
        public Builder restoreTrigger(Boolean restoreTrigger) {
            if (restoreTrigger == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "restoreTrigger");
            }
            this.restoreTrigger = restoreTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder restoredFromKeyId(String restoredFromKeyId) {
            if (restoredFromKeyId == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "restoredFromKeyId");
            }
            this.restoredFromKeyId = restoredFromKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetKeyResult", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        public GetKeyResult build() {
            final var _resultValue = new GetKeyResult();
            _resultValue.autoKeyRotationDetails = autoKeyRotationDetails;
            _resultValue.compartmentId = compartmentId;
            _resultValue.currentKeyVersion = currentKeyVersion;
            _resultValue.definedTags = definedTags;
            _resultValue.desiredState = desiredState;
            _resultValue.displayName = displayName;
            _resultValue.externalKeyReferenceDetails = externalKeyReferenceDetails;
            _resultValue.externalKeyReferences = externalKeyReferences;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isAutoRotationEnabled = isAutoRotationEnabled;
            _resultValue.isPrimary = isPrimary;
            _resultValue.keyId = keyId;
            _resultValue.keyShapes = keyShapes;
            _resultValue.managementEndpoint = managementEndpoint;
            _resultValue.protectionMode = protectionMode;
            _resultValue.replicaDetails = replicaDetails;
            _resultValue.restoreFromFiles = restoreFromFiles;
            _resultValue.restoreFromObjectStores = restoreFromObjectStores;
            _resultValue.restoreTrigger = restoreTrigger;
            _resultValue.restoredFromKeyId = restoredFromKeyId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
