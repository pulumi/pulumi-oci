// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Kms.outputs.GetKeysKeyKeyShape;
import com.pulumi.oci.Kms.outputs.GetKeysKeyReplicaDetail;
import com.pulumi.oci.Kms.outputs.GetKeysKeyRestoreFromFile;
import com.pulumi.oci.Kms.outputs.GetKeysKeyRestoreFromObjectStore;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKeysKey {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    private String currentKeyVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    private String desiredState;
    /**
     * @return A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the key.
     * 
     */
    private String id;
    /**
     * @return A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
     * 
     */
    private Boolean isPrimary;
    /**
     * @return The cryptographic properties of a key.
     * 
     */
    private List<GetKeysKeyKeyShape> keyShapes;
    /**
     * @return The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
     * 
     */
    private String managementEndpoint;
    /**
     * @return A key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A  protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are  performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s  RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of  `SOFTWARE` are performed on the server.
     * 
     */
    private String protectionMode;
    /**
     * @return Key replica details
     * 
     */
    private List<GetKeysKeyReplicaDetail> replicaDetails;
    private List<GetKeysKeyRestoreFromFile> restoreFromFiles;
    private List<GetKeysKeyRestoreFromObjectStore> restoreFromObjectStores;
    private Boolean restoreTrigger;
    private String restoredFromKeyId;
    /**
     * @return The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    private String state;
    /**
     * @return The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when to delete the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;
    /**
     * @return The OCID of the vault that contains this key.
     * 
     */
    private String vaultId;

    private GetKeysKey() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    public String currentKeyVersion() {
        return this.currentKeyVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public String desiredState() {
        return this.desiredState;
    }
    /**
     * @return A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the key.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return The cryptographic properties of a key.
     * 
     */
    public List<GetKeysKeyKeyShape> keyShapes() {
        return this.keyShapes;
    }
    /**
     * @return The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
     * 
     */
    public String managementEndpoint() {
        return this.managementEndpoint;
    }
    /**
     * @return A key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A  protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are  performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s  RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of  `SOFTWARE` are performed on the server.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return Key replica details
     * 
     */
    public List<GetKeysKeyReplicaDetail> replicaDetails() {
        return this.replicaDetails;
    }
    public List<GetKeysKeyRestoreFromFile> restoreFromFiles() {
        return this.restoreFromFiles;
    }
    public List<GetKeysKeyRestoreFromObjectStore> restoreFromObjectStores() {
        return this.restoreFromObjectStores;
    }
    public Boolean restoreTrigger() {
        return this.restoreTrigger;
    }
    public String restoredFromKeyId() {
        return this.restoredFromKeyId;
    }
    /**
     * @return The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return The OCID of the vault that contains this key.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeysKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String currentKeyVersion;
        private Map<String,Object> definedTags;
        private String desiredState;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isPrimary;
        private List<GetKeysKeyKeyShape> keyShapes;
        private String managementEndpoint;
        private String protectionMode;
        private List<GetKeysKeyReplicaDetail> replicaDetails;
        private List<GetKeysKeyRestoreFromFile> restoreFromFiles;
        private List<GetKeysKeyRestoreFromObjectStore> restoreFromObjectStores;
        private Boolean restoreTrigger;
        private String restoredFromKeyId;
        private String state;
        private String timeCreated;
        private String timeOfDeletion;
        private String vaultId;
        public Builder() {}
        public Builder(GetKeysKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentKeyVersion = defaults.currentKeyVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.desiredState = defaults.desiredState;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isPrimary = defaults.isPrimary;
    	      this.keyShapes = defaults.keyShapes;
    	      this.managementEndpoint = defaults.managementEndpoint;
    	      this.protectionMode = defaults.protectionMode;
    	      this.replicaDetails = defaults.replicaDetails;
    	      this.restoreFromFiles = defaults.restoreFromFiles;
    	      this.restoreFromObjectStores = defaults.restoreFromObjectStores;
    	      this.restoreTrigger = defaults.restoreTrigger;
    	      this.restoredFromKeyId = defaults.restoredFromKeyId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder currentKeyVersion(String currentKeyVersion) {
            this.currentKeyVersion = Objects.requireNonNull(currentKeyVersion);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder desiredState(String desiredState) {
            this.desiredState = Objects.requireNonNull(desiredState);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            this.isPrimary = Objects.requireNonNull(isPrimary);
            return this;
        }
        @CustomType.Setter
        public Builder keyShapes(List<GetKeysKeyKeyShape> keyShapes) {
            this.keyShapes = Objects.requireNonNull(keyShapes);
            return this;
        }
        public Builder keyShapes(GetKeysKeyKeyShape... keyShapes) {
            return keyShapes(List.of(keyShapes));
        }
        @CustomType.Setter
        public Builder managementEndpoint(String managementEndpoint) {
            this.managementEndpoint = Objects.requireNonNull(managementEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            this.protectionMode = Objects.requireNonNull(protectionMode);
            return this;
        }
        @CustomType.Setter
        public Builder replicaDetails(List<GetKeysKeyReplicaDetail> replicaDetails) {
            this.replicaDetails = Objects.requireNonNull(replicaDetails);
            return this;
        }
        public Builder replicaDetails(GetKeysKeyReplicaDetail... replicaDetails) {
            return replicaDetails(List.of(replicaDetails));
        }
        @CustomType.Setter
        public Builder restoreFromFiles(List<GetKeysKeyRestoreFromFile> restoreFromFiles) {
            this.restoreFromFiles = Objects.requireNonNull(restoreFromFiles);
            return this;
        }
        public Builder restoreFromFiles(GetKeysKeyRestoreFromFile... restoreFromFiles) {
            return restoreFromFiles(List.of(restoreFromFiles));
        }
        @CustomType.Setter
        public Builder restoreFromObjectStores(List<GetKeysKeyRestoreFromObjectStore> restoreFromObjectStores) {
            this.restoreFromObjectStores = Objects.requireNonNull(restoreFromObjectStores);
            return this;
        }
        public Builder restoreFromObjectStores(GetKeysKeyRestoreFromObjectStore... restoreFromObjectStores) {
            return restoreFromObjectStores(List.of(restoreFromObjectStores));
        }
        @CustomType.Setter
        public Builder restoreTrigger(Boolean restoreTrigger) {
            this.restoreTrigger = Objects.requireNonNull(restoreTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder restoredFromKeyId(String restoredFromKeyId) {
            this.restoredFromKeyId = Objects.requireNonNull(restoredFromKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public GetKeysKey build() {
            final var o = new GetKeysKey();
            o.compartmentId = compartmentId;
            o.currentKeyVersion = currentKeyVersion;
            o.definedTags = definedTags;
            o.desiredState = desiredState;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isPrimary = isPrimary;
            o.keyShapes = keyShapes;
            o.managementEndpoint = managementEndpoint;
            o.protectionMode = protectionMode;
            o.replicaDetails = replicaDetails;
            o.restoreFromFiles = restoreFromFiles;
            o.restoreFromObjectStores = restoreFromObjectStores;
            o.restoreTrigger = restoreTrigger;
            o.restoredFromKeyId = restoredFromKeyId;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeOfDeletion = timeOfDeletion;
            o.vaultId = vaultId;
            return o;
        }
    }
}
