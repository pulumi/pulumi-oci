// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKeysKeyKeyShape {
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt data. Currently, support includes AES, RSA, and ECDSA algorithms.
     * 
     */
    private String algorithm;
    /**
     * @return The curve ID of the keys. (This pertains only to ECDSA keys.)
     * 
     */
    private String curveId;
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include 16, 24, or 32.
     * 
     */
    private Integer length;

    private GetKeysKeyKeyShape() {}
    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt data. Currently, support includes AES, RSA, and ECDSA algorithms.
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return The curve ID of the keys. (This pertains only to ECDSA keys.)
     * 
     */
    public String curveId() {
        return this.curveId;
    }
    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include 16, 24, or 32.
     * 
     */
    public Integer length() {
        return this.length;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeysKeyKeyShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String curveId;
        private Integer length;
        public Builder() {}
        public Builder(GetKeysKeyKeyShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.curveId = defaults.curveId;
    	      this.length = defaults.length;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }
        @CustomType.Setter
        public Builder curveId(String curveId) {
            this.curveId = Objects.requireNonNull(curveId);
            return this;
        }
        @CustomType.Setter
        public Builder length(Integer length) {
            this.length = Objects.requireNonNull(length);
            return this;
        }
        public GetKeysKeyKeyShape build() {
            final var o = new GetKeysKeyKeyShape();
            o.algorithm = algorithm;
            o.curveId = curveId;
            o.length = length;
            return o;
        }
    }
}
