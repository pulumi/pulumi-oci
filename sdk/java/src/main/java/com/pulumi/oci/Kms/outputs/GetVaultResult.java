// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Kms.outputs.GetVaultExternalKeyManagerMetadata;
import com.pulumi.oci.Kms.outputs.GetVaultExternalKeyManagerMetadataSummary;
import com.pulumi.oci.Kms.outputs.GetVaultReplicaDetail;
import com.pulumi.oci.Kms.outputs.GetVaultRestoreFromFile;
import com.pulumi.oci.Kms.outputs.GetVaultRestoreFromObjectStore;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVaultResult {
    /**
     * @return The OCID of the compartment that contains a particular vault.
     * 
     */
    private String compartmentId;
    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include [Encrypt](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/EncryptedData/Encrypt), [Decrypt](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/DecryptedData/Decrypt), and [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) operations.
     * 
     */
    private String cryptoEndpoint;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly name for the vault. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Summary about metadata of external key manager to be returned to the customer as a response.
     * 
     */
    private List<GetVaultExternalKeyManagerMetadataSummary> externalKeyManagerMetadataSummaries;
    private List<GetVaultExternalKeyManagerMetadata> externalKeyManagerMetadatas;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the vault.
     * 
     */
    private String id;
    /**
     * @return A Boolean value that indicates whether the Vault is primary Vault or replica Vault.
     * 
     */
    private Boolean isPrimary;
    /**
     * @return The service endpoint to perform management operations against. Management operations include &#34;Create,&#34; &#34;Update,&#34; &#34;List,&#34; &#34;Get,&#34; and &#34;Delete&#34; operations.
     * 
     */
    private String managementEndpoint;
    /**
     * @return Vault replica details
     * 
     */
    private List<GetVaultReplicaDetail> replicaDetails;
    /**
     * @return Details where vault was backed up.
     * 
     */
    private List<GetVaultRestoreFromFile> restoreFromFiles;
    /**
     * @return Details where vault was backed up
     * 
     */
    private List<GetVaultRestoreFromObjectStore> restoreFromObjectStores;
    /**
     * @return When flipped, triggers restore if restore options are provided. Values of 0 or 1 are supported
     * 
     */
    private Boolean restoreTrigger;
    /**
     * @return The OCID of the vault from which this vault was restored, if it was restored from a backup file. If you restore a vault to the same region, the vault retains the same OCID that it had when you backed up the vault.
     * 
     */
    private String restoredFromVaultId;
    /**
     * @return The vault&#39;s current lifecycle state.  Example: `DELETED`
     * 
     */
    private String state;
    /**
     * @return The date and time this vault was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property to indicate when to delete the vault, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;
    private String vaultId;
    /**
     * @return The type of vault. Each type of vault stores the key with different degrees of isolation and has different options and pricing.
     * 
     */
    private String vaultType;

    private GetVaultResult() {}
    /**
     * @return The OCID of the compartment that contains a particular vault.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include [Encrypt](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/EncryptedData/Encrypt), [Decrypt](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/DecryptedData/Decrypt), and [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) operations.
     * 
     */
    public String cryptoEndpoint() {
        return this.cryptoEndpoint;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name for the vault. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Summary about metadata of external key manager to be returned to the customer as a response.
     * 
     */
    public List<GetVaultExternalKeyManagerMetadataSummary> externalKeyManagerMetadataSummaries() {
        return this.externalKeyManagerMetadataSummaries;
    }
    public List<GetVaultExternalKeyManagerMetadata> externalKeyManagerMetadatas() {
        return this.externalKeyManagerMetadatas;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the vault.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Boolean value that indicates whether the Vault is primary Vault or replica Vault.
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return The service endpoint to perform management operations against. Management operations include &#34;Create,&#34; &#34;Update,&#34; &#34;List,&#34; &#34;Get,&#34; and &#34;Delete&#34; operations.
     * 
     */
    public String managementEndpoint() {
        return this.managementEndpoint;
    }
    /**
     * @return Vault replica details
     * 
     */
    public List<GetVaultReplicaDetail> replicaDetails() {
        return this.replicaDetails;
    }
    /**
     * @return Details where vault was backed up.
     * 
     */
    public List<GetVaultRestoreFromFile> restoreFromFiles() {
        return this.restoreFromFiles;
    }
    /**
     * @return Details where vault was backed up
     * 
     */
    public List<GetVaultRestoreFromObjectStore> restoreFromObjectStores() {
        return this.restoreFromObjectStores;
    }
    /**
     * @return When flipped, triggers restore if restore options are provided. Values of 0 or 1 are supported
     * 
     */
    public Boolean restoreTrigger() {
        return this.restoreTrigger;
    }
    /**
     * @return The OCID of the vault from which this vault was restored, if it was restored from a backup file. If you restore a vault to the same region, the vault retains the same OCID that it had when you backed up the vault.
     * 
     */
    public String restoredFromVaultId() {
        return this.restoredFromVaultId;
    }
    /**
     * @return The vault&#39;s current lifecycle state.  Example: `DELETED`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time this vault was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property to indicate when to delete the vault, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    public String vaultId() {
        return this.vaultId;
    }
    /**
     * @return The type of vault. Each type of vault stores the key with different degrees of isolation and has different options and pricing.
     * 
     */
    public String vaultType() {
        return this.vaultType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVaultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String cryptoEndpoint;
        private Map<String,String> definedTags;
        private String displayName;
        private List<GetVaultExternalKeyManagerMetadataSummary> externalKeyManagerMetadataSummaries;
        private List<GetVaultExternalKeyManagerMetadata> externalKeyManagerMetadatas;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isPrimary;
        private String managementEndpoint;
        private List<GetVaultReplicaDetail> replicaDetails;
        private List<GetVaultRestoreFromFile> restoreFromFiles;
        private List<GetVaultRestoreFromObjectStore> restoreFromObjectStores;
        private Boolean restoreTrigger;
        private String restoredFromVaultId;
        private String state;
        private String timeCreated;
        private String timeOfDeletion;
        private String vaultId;
        private String vaultType;
        public Builder() {}
        public Builder(GetVaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.cryptoEndpoint = defaults.cryptoEndpoint;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.externalKeyManagerMetadataSummaries = defaults.externalKeyManagerMetadataSummaries;
    	      this.externalKeyManagerMetadatas = defaults.externalKeyManagerMetadatas;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isPrimary = defaults.isPrimary;
    	      this.managementEndpoint = defaults.managementEndpoint;
    	      this.replicaDetails = defaults.replicaDetails;
    	      this.restoreFromFiles = defaults.restoreFromFiles;
    	      this.restoreFromObjectStores = defaults.restoreFromObjectStores;
    	      this.restoreTrigger = defaults.restoreTrigger;
    	      this.restoredFromVaultId = defaults.restoredFromVaultId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
    	      this.vaultType = defaults.vaultType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            if (cryptoEndpoint == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "cryptoEndpoint");
            }
            this.cryptoEndpoint = cryptoEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalKeyManagerMetadataSummaries(List<GetVaultExternalKeyManagerMetadataSummary> externalKeyManagerMetadataSummaries) {
            if (externalKeyManagerMetadataSummaries == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "externalKeyManagerMetadataSummaries");
            }
            this.externalKeyManagerMetadataSummaries = externalKeyManagerMetadataSummaries;
            return this;
        }
        public Builder externalKeyManagerMetadataSummaries(GetVaultExternalKeyManagerMetadataSummary... externalKeyManagerMetadataSummaries) {
            return externalKeyManagerMetadataSummaries(List.of(externalKeyManagerMetadataSummaries));
        }
        @CustomType.Setter
        public Builder externalKeyManagerMetadatas(List<GetVaultExternalKeyManagerMetadata> externalKeyManagerMetadatas) {
            if (externalKeyManagerMetadatas == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "externalKeyManagerMetadatas");
            }
            this.externalKeyManagerMetadatas = externalKeyManagerMetadatas;
            return this;
        }
        public Builder externalKeyManagerMetadatas(GetVaultExternalKeyManagerMetadata... externalKeyManagerMetadatas) {
            return externalKeyManagerMetadatas(List.of(externalKeyManagerMetadatas));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            if (isPrimary == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "isPrimary");
            }
            this.isPrimary = isPrimary;
            return this;
        }
        @CustomType.Setter
        public Builder managementEndpoint(String managementEndpoint) {
            if (managementEndpoint == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "managementEndpoint");
            }
            this.managementEndpoint = managementEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder replicaDetails(List<GetVaultReplicaDetail> replicaDetails) {
            if (replicaDetails == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "replicaDetails");
            }
            this.replicaDetails = replicaDetails;
            return this;
        }
        public Builder replicaDetails(GetVaultReplicaDetail... replicaDetails) {
            return replicaDetails(List.of(replicaDetails));
        }
        @CustomType.Setter
        public Builder restoreFromFiles(List<GetVaultRestoreFromFile> restoreFromFiles) {
            if (restoreFromFiles == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "restoreFromFiles");
            }
            this.restoreFromFiles = restoreFromFiles;
            return this;
        }
        public Builder restoreFromFiles(GetVaultRestoreFromFile... restoreFromFiles) {
            return restoreFromFiles(List.of(restoreFromFiles));
        }
        @CustomType.Setter
        public Builder restoreFromObjectStores(List<GetVaultRestoreFromObjectStore> restoreFromObjectStores) {
            if (restoreFromObjectStores == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "restoreFromObjectStores");
            }
            this.restoreFromObjectStores = restoreFromObjectStores;
            return this;
        }
        public Builder restoreFromObjectStores(GetVaultRestoreFromObjectStore... restoreFromObjectStores) {
            return restoreFromObjectStores(List.of(restoreFromObjectStores));
        }
        @CustomType.Setter
        public Builder restoreTrigger(Boolean restoreTrigger) {
            if (restoreTrigger == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "restoreTrigger");
            }
            this.restoreTrigger = restoreTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder restoredFromVaultId(String restoredFromVaultId) {
            if (restoredFromVaultId == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "restoredFromVaultId");
            }
            this.restoredFromVaultId = restoredFromVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        @CustomType.Setter
        public Builder vaultType(String vaultType) {
            if (vaultType == null) {
              throw new MissingRequiredPropertyException("GetVaultResult", "vaultType");
            }
            this.vaultType = vaultType;
            return this;
        }
        public GetVaultResult build() {
            final var _resultValue = new GetVaultResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.cryptoEndpoint = cryptoEndpoint;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.externalKeyManagerMetadataSummaries = externalKeyManagerMetadataSummaries;
            _resultValue.externalKeyManagerMetadatas = externalKeyManagerMetadatas;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isPrimary = isPrimary;
            _resultValue.managementEndpoint = managementEndpoint;
            _resultValue.replicaDetails = replicaDetails;
            _resultValue.restoreFromFiles = restoreFromFiles;
            _resultValue.restoreFromObjectStores = restoreFromObjectStores;
            _resultValue.restoreTrigger = restoreTrigger;
            _resultValue.restoredFromVaultId = restoredFromVaultId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.vaultId = vaultId;
            _resultValue.vaultType = vaultType;
            return _resultValue;
        }
    }
}
