// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LicenseManager.inputs.GetLicenseRecordsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLicenseRecordsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLicenseRecordsArgs Empty = new GetLicenseRecordsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetLicenseRecordsFilterArgs>> filters;

    public Optional<Output<List<GetLicenseRecordsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique product license identifier.
     * 
     */
    @Import(name="productLicenseId", required=true)
    private Output<String> productLicenseId;

    /**
     * @return Unique product license identifier.
     * 
     */
    public Output<String> productLicenseId() {
        return this.productLicenseId;
    }

    private GetLicenseRecordsArgs() {}

    private GetLicenseRecordsArgs(GetLicenseRecordsArgs $) {
        this.filters = $.filters;
        this.productLicenseId = $.productLicenseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLicenseRecordsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLicenseRecordsArgs $;

        public Builder() {
            $ = new GetLicenseRecordsArgs();
        }

        public Builder(GetLicenseRecordsArgs defaults) {
            $ = new GetLicenseRecordsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetLicenseRecordsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetLicenseRecordsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetLicenseRecordsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param productLicenseId Unique product license identifier.
         * 
         * @return builder
         * 
         */
        public Builder productLicenseId(Output<String> productLicenseId) {
            $.productLicenseId = productLicenseId;
            return this;
        }

        /**
         * @param productLicenseId Unique product license identifier.
         * 
         * @return builder
         * 
         */
        public Builder productLicenseId(String productLicenseId) {
            return productLicenseId(Output.of(productLicenseId));
        }

        public GetLicenseRecordsArgs build() {
            if ($.productLicenseId == null) {
                throw new MissingRequiredPropertyException("GetLicenseRecordsArgs", "productLicenseId");
            }
            return $;
        }
    }

}
