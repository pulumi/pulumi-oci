// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseRecordState extends com.pulumi.resources.ResourceArgs {

    public static final LicenseRecordState Empty = new LicenseRecordState();

    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) License record name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) License record name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Specifies if the license record term is perpertual.
     * 
     */
    @Import(name="isPerpetual")
    private @Nullable Output<Boolean> isPerpetual;

    /**
     * @return (Updatable) Specifies if the license record term is perpertual.
     * 
     */
    public Optional<Output<Boolean>> isPerpetual() {
        return Optional.ofNullable(this.isPerpetual);
    }

    /**
     * (Updatable) Specifies if the license count is unlimited.
     * 
     */
    @Import(name="isUnlimited")
    private @Nullable Output<Boolean> isUnlimited;

    /**
     * @return (Updatable) Specifies if the license count is unlimited.
     * 
     */
    public Optional<Output<Boolean>> isUnlimited() {
        return Optional.ofNullable(this.isUnlimited);
    }

    /**
     * (Updatable) The number of license units added by a user in a license record. Default 1
     * 
     */
    @Import(name="licenseCount")
    private @Nullable Output<Integer> licenseCount;

    /**
     * @return (Updatable) The number of license units added by a user in a license record. Default 1
     * 
     */
    public Optional<Output<Integer>> licenseCount() {
        return Optional.ofNullable(this.licenseCount);
    }

    /**
     * The product license unit.
     * 
     */
    @Import(name="licenseUnit")
    private @Nullable Output<String> licenseUnit;

    /**
     * @return The product license unit.
     * 
     */
    public Optional<Output<String>> licenseUnit() {
        return Optional.ofNullable(this.licenseUnit);
    }

    /**
     * (Updatable) The license record product ID.
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return (Updatable) The license record product ID.
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * The product license name with which the license record is associated.
     * 
     */
    @Import(name="productLicense")
    private @Nullable Output<String> productLicense;

    /**
     * @return The product license name with which the license record is associated.
     * 
     */
    public Optional<Output<String>> productLicense() {
        return Optional.ofNullable(this.productLicense);
    }

    /**
     * Unique product license identifier.
     * 
     */
    @Import(name="productLicenseId")
    private @Nullable Output<String> productLicenseId;

    /**
     * @return Unique product license identifier.
     * 
     */
    public Optional<Output<String>> productLicenseId() {
        return Optional.ofNullable(this.productLicenseId);
    }

    /**
     * The current license record state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current license record state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    @Import(name="supportEndDate")
    private @Nullable Output<String> supportEndDate;

    /**
     * @return (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    public Optional<Output<String>> supportEndDate() {
        return Optional.ofNullable(this.supportEndDate);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private LicenseRecordState() {}

    private LicenseRecordState(LicenseRecordState $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.expirationDate = $.expirationDate;
        this.freeformTags = $.freeformTags;
        this.isPerpetual = $.isPerpetual;
        this.isUnlimited = $.isUnlimited;
        this.licenseCount = $.licenseCount;
        this.licenseUnit = $.licenseUnit;
        this.productId = $.productId;
        this.productLicense = $.productLicense;
        this.productLicenseId = $.productLicenseId;
        this.state = $.state;
        this.supportEndDate = $.supportEndDate;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseRecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseRecordState $;

        public Builder() {
            $ = new LicenseRecordState();
        }

        public Builder(LicenseRecordState defaults) {
            $ = new LicenseRecordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) License record name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) License record name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param expirationDate (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isPerpetual (Updatable) Specifies if the license record term is perpertual.
         * 
         * @return builder
         * 
         */
        public Builder isPerpetual(@Nullable Output<Boolean> isPerpetual) {
            $.isPerpetual = isPerpetual;
            return this;
        }

        /**
         * @param isPerpetual (Updatable) Specifies if the license record term is perpertual.
         * 
         * @return builder
         * 
         */
        public Builder isPerpetual(Boolean isPerpetual) {
            return isPerpetual(Output.of(isPerpetual));
        }

        /**
         * @param isUnlimited (Updatable) Specifies if the license count is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(@Nullable Output<Boolean> isUnlimited) {
            $.isUnlimited = isUnlimited;
            return this;
        }

        /**
         * @param isUnlimited (Updatable) Specifies if the license count is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(Boolean isUnlimited) {
            return isUnlimited(Output.of(isUnlimited));
        }

        /**
         * @param licenseCount (Updatable) The number of license units added by a user in a license record. Default 1
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(@Nullable Output<Integer> licenseCount) {
            $.licenseCount = licenseCount;
            return this;
        }

        /**
         * @param licenseCount (Updatable) The number of license units added by a user in a license record. Default 1
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(Integer licenseCount) {
            return licenseCount(Output.of(licenseCount));
        }

        /**
         * @param licenseUnit The product license unit.
         * 
         * @return builder
         * 
         */
        public Builder licenseUnit(@Nullable Output<String> licenseUnit) {
            $.licenseUnit = licenseUnit;
            return this;
        }

        /**
         * @param licenseUnit The product license unit.
         * 
         * @return builder
         * 
         */
        public Builder licenseUnit(String licenseUnit) {
            return licenseUnit(Output.of(licenseUnit));
        }

        /**
         * @param productId (Updatable) The license record product ID.
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId (Updatable) The license record product ID.
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param productLicense The product license name with which the license record is associated.
         * 
         * @return builder
         * 
         */
        public Builder productLicense(@Nullable Output<String> productLicense) {
            $.productLicense = productLicense;
            return this;
        }

        /**
         * @param productLicense The product license name with which the license record is associated.
         * 
         * @return builder
         * 
         */
        public Builder productLicense(String productLicense) {
            return productLicense(Output.of(productLicense));
        }

        /**
         * @param productLicenseId Unique product license identifier.
         * 
         * @return builder
         * 
         */
        public Builder productLicenseId(@Nullable Output<String> productLicenseId) {
            $.productLicenseId = productLicenseId;
            return this;
        }

        /**
         * @param productLicenseId Unique product license identifier.
         * 
         * @return builder
         * 
         */
        public Builder productLicenseId(String productLicenseId) {
            return productLicenseId(Output.of(productLicenseId));
        }

        /**
         * @param state The current license record state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current license record state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param supportEndDate (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
         * 
         * @return builder
         * 
         */
        public Builder supportEndDate(@Nullable Output<String> supportEndDate) {
            $.supportEndDate = supportEndDate;
            return this;
        }

        /**
         * @param supportEndDate (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
         * 
         * @return builder
         * 
         */
        public Builder supportEndDate(String supportEndDate) {
            return supportEndDate(Output.of(supportEndDate));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public LicenseRecordState build() {
            return $;
        }
    }

}
