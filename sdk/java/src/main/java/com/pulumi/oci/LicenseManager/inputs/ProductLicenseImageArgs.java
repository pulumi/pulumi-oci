// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProductLicenseImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProductLicenseImageArgs Empty = new ProductLicenseImageArgs();

    /**
     * The image ID associated with the product license.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The image ID associated with the product license.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * (Updatable) Marketplace image listing ID.
     * 
     */
    @Import(name="listingId", required=true)
    private Output<String> listingId;

    /**
     * @return (Updatable) Marketplace image listing ID.
     * 
     */
    public Output<String> listingId() {
        return this.listingId;
    }

    /**
     * The listing name associated with the product license.
     * 
     */
    @Import(name="listingName")
    private @Nullable Output<String> listingName;

    /**
     * @return The listing name associated with the product license.
     * 
     */
    public Optional<Output<String>> listingName() {
        return Optional.ofNullable(this.listingName);
    }

    /**
     * (Updatable) Image package version.
     * 
     */
    @Import(name="packageVersion", required=true)
    private Output<String> packageVersion;

    /**
     * @return (Updatable) Image package version.
     * 
     */
    public Output<String> packageVersion() {
        return this.packageVersion;
    }

    /**
     * The image publisher.
     * 
     */
    @Import(name="publisher")
    private @Nullable Output<String> publisher;

    /**
     * @return The image publisher.
     * 
     */
    public Optional<Output<String>> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    private ProductLicenseImageArgs() {}

    private ProductLicenseImageArgs(ProductLicenseImageArgs $) {
        this.id = $.id;
        this.listingId = $.listingId;
        this.listingName = $.listingName;
        this.packageVersion = $.packageVersion;
        this.publisher = $.publisher;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductLicenseImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductLicenseImageArgs $;

        public Builder() {
            $ = new ProductLicenseImageArgs();
        }

        public Builder(ProductLicenseImageArgs defaults) {
            $ = new ProductLicenseImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The image ID associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The image ID associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param listingId (Updatable) Marketplace image listing ID.
         * 
         * @return builder
         * 
         */
        public Builder listingId(Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId (Updatable) Marketplace image listing ID.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param listingName The listing name associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder listingName(@Nullable Output<String> listingName) {
            $.listingName = listingName;
            return this;
        }

        /**
         * @param listingName The listing name associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder listingName(String listingName) {
            return listingName(Output.of(listingName));
        }

        /**
         * @param packageVersion (Updatable) Image package version.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion (Updatable) Image package version.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        /**
         * @param publisher The image publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(@Nullable Output<String> publisher) {
            $.publisher = publisher;
            return this;
        }

        /**
         * @param publisher The image publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(String publisher) {
            return publisher(Output.of(publisher));
        }

        public ProductLicenseImageArgs build() {
            if ($.listingId == null) {
                throw new MissingRequiredPropertyException("ProductLicenseImageArgs", "listingId");
            }
            if ($.packageVersion == null) {
                throw new MissingRequiredPropertyException("ProductLicenseImageArgs", "packageVersion");
            }
            return $;
        }
    }

}
