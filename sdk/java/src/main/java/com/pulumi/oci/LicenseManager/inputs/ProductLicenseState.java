// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LicenseManager.inputs.ProductLicenseImageArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProductLicenseState extends com.pulumi.resources.ResourceArgs {

    public static final ProductLicenseState Empty = new ProductLicenseState();

    /**
     * The number of active license records associated with the product license.
     * 
     */
    @Import(name="activeLicenseRecordCount")
    private @Nullable Output<Integer> activeLicenseRecordCount;

    /**
     * @return The number of active license records associated with the product license.
     * 
     */
    public Optional<Output<Integer>> activeLicenseRecordCount() {
        return Optional.ofNullable(this.activeLicenseRecordCount);
    }

    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * Name of the product license.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Name of the product license.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The image details associated with the product license.
     * 
     */
    @Import(name="images")
    private @Nullable Output<List<ProductLicenseImageArgs>> images;

    /**
     * @return (Updatable) The image details associated with the product license.
     * 
     */
    public Optional<Output<List<ProductLicenseImageArgs>>> images() {
        return Optional.ofNullable(this.images);
    }

    /**
     * Specifies whether or not the product license is oversubscribed.
     * 
     */
    @Import(name="isOverSubscribed")
    private @Nullable Output<Boolean> isOverSubscribed;

    /**
     * @return Specifies whether or not the product license is oversubscribed.
     * 
     */
    public Optional<Output<Boolean>> isOverSubscribed() {
        return Optional.ofNullable(this.isOverSubscribed);
    }

    /**
     * Specifies if the license unit count is unlimited.
     * 
     */
    @Import(name="isUnlimited")
    private @Nullable Output<Boolean> isUnlimited;

    /**
     * @return Specifies if the license unit count is unlimited.
     * 
     */
    public Optional<Output<Boolean>> isUnlimited() {
        return Optional.ofNullable(this.isUnlimited);
    }

    /**
     * Specifies if the product license vendor is Oracle or a third party.
     * 
     */
    @Import(name="isVendorOracle")
    private @Nullable Output<Boolean> isVendorOracle;

    /**
     * @return Specifies if the product license vendor is Oracle or a third party.
     * 
     */
    public Optional<Output<Boolean>> isVendorOracle() {
        return Optional.ofNullable(this.isVendorOracle);
    }

    /**
     * The product license unit.
     * 
     */
    @Import(name="licenseUnit")
    private @Nullable Output<String> licenseUnit;

    /**
     * @return The product license unit.
     * 
     */
    public Optional<Output<String>> licenseUnit() {
        return Optional.ofNullable(this.licenseUnit);
    }

    /**
     * The current product license state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current product license state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The current product license status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current product license status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Status description for the current product license status.
     * 
     */
    @Import(name="statusDescription")
    private @Nullable Output<String> statusDescription;

    /**
     * @return Status description for the current product license status.
     * 
     */
    public Optional<Output<String>> statusDescription() {
        return Optional.ofNullable(this.statusDescription);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
     * 
     */
    @Import(name="totalActiveLicenseUnitCount")
    private @Nullable Output<Integer> totalActiveLicenseUnitCount;

    /**
     * @return The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
     * 
     */
    public Optional<Output<Integer>> totalActiveLicenseUnitCount() {
        return Optional.ofNullable(this.totalActiveLicenseUnitCount);
    }

    /**
     * The number of license records associated with the product license.
     * 
     */
    @Import(name="totalLicenseRecordCount")
    private @Nullable Output<Integer> totalLicenseRecordCount;

    /**
     * @return The number of license records associated with the product license.
     * 
     */
    public Optional<Output<Integer>> totalLicenseRecordCount() {
        return Optional.ofNullable(this.totalLicenseRecordCount);
    }

    /**
     * The number of license units consumed. Updated after each allocation run.
     * 
     */
    @Import(name="totalLicenseUnitsConsumed")
    private @Nullable Output<Double> totalLicenseUnitsConsumed;

    /**
     * @return The number of license units consumed. Updated after each allocation run.
     * 
     */
    public Optional<Output<Double>> totalLicenseUnitsConsumed() {
        return Optional.ofNullable(this.totalLicenseUnitsConsumed);
    }

    /**
     * The product license vendor name, for example: Microsoft, RHEL, and so on.
     * 
     */
    @Import(name="vendorName")
    private @Nullable Output<String> vendorName;

    /**
     * @return The product license vendor name, for example: Microsoft, RHEL, and so on.
     * 
     */
    public Optional<Output<String>> vendorName() {
        return Optional.ofNullable(this.vendorName);
    }

    private ProductLicenseState() {}

    private ProductLicenseState(ProductLicenseState $) {
        this.activeLicenseRecordCount = $.activeLicenseRecordCount;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.images = $.images;
        this.isOverSubscribed = $.isOverSubscribed;
        this.isUnlimited = $.isUnlimited;
        this.isVendorOracle = $.isVendorOracle;
        this.licenseUnit = $.licenseUnit;
        this.state = $.state;
        this.status = $.status;
        this.statusDescription = $.statusDescription;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.totalActiveLicenseUnitCount = $.totalActiveLicenseUnitCount;
        this.totalLicenseRecordCount = $.totalLicenseRecordCount;
        this.totalLicenseUnitsConsumed = $.totalLicenseUnitsConsumed;
        this.vendorName = $.vendorName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProductLicenseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProductLicenseState $;

        public Builder() {
            $ = new ProductLicenseState();
        }

        public Builder(ProductLicenseState defaults) {
            $ = new ProductLicenseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeLicenseRecordCount The number of active license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder activeLicenseRecordCount(@Nullable Output<Integer> activeLicenseRecordCount) {
            $.activeLicenseRecordCount = activeLicenseRecordCount;
            return this;
        }

        /**
         * @param activeLicenseRecordCount The number of active license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder activeLicenseRecordCount(Integer activeLicenseRecordCount) {
            return activeLicenseRecordCount(Output.of(activeLicenseRecordCount));
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName Name of the product license.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name of the product license.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param images (Updatable) The image details associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder images(@Nullable Output<List<ProductLicenseImageArgs>> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images (Updatable) The image details associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder images(List<ProductLicenseImageArgs> images) {
            return images(Output.of(images));
        }

        /**
         * @param images (Updatable) The image details associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder images(ProductLicenseImageArgs... images) {
            return images(List.of(images));
        }

        /**
         * @param isOverSubscribed Specifies whether or not the product license is oversubscribed.
         * 
         * @return builder
         * 
         */
        public Builder isOverSubscribed(@Nullable Output<Boolean> isOverSubscribed) {
            $.isOverSubscribed = isOverSubscribed;
            return this;
        }

        /**
         * @param isOverSubscribed Specifies whether or not the product license is oversubscribed.
         * 
         * @return builder
         * 
         */
        public Builder isOverSubscribed(Boolean isOverSubscribed) {
            return isOverSubscribed(Output.of(isOverSubscribed));
        }

        /**
         * @param isUnlimited Specifies if the license unit count is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(@Nullable Output<Boolean> isUnlimited) {
            $.isUnlimited = isUnlimited;
            return this;
        }

        /**
         * @param isUnlimited Specifies if the license unit count is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(Boolean isUnlimited) {
            return isUnlimited(Output.of(isUnlimited));
        }

        /**
         * @param isVendorOracle Specifies if the product license vendor is Oracle or a third party.
         * 
         * @return builder
         * 
         */
        public Builder isVendorOracle(@Nullable Output<Boolean> isVendorOracle) {
            $.isVendorOracle = isVendorOracle;
            return this;
        }

        /**
         * @param isVendorOracle Specifies if the product license vendor is Oracle or a third party.
         * 
         * @return builder
         * 
         */
        public Builder isVendorOracle(Boolean isVendorOracle) {
            return isVendorOracle(Output.of(isVendorOracle));
        }

        /**
         * @param licenseUnit The product license unit.
         * 
         * @return builder
         * 
         */
        public Builder licenseUnit(@Nullable Output<String> licenseUnit) {
            $.licenseUnit = licenseUnit;
            return this;
        }

        /**
         * @param licenseUnit The product license unit.
         * 
         * @return builder
         * 
         */
        public Builder licenseUnit(String licenseUnit) {
            return licenseUnit(Output.of(licenseUnit));
        }

        /**
         * @param state The current product license state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current product license state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status The current product license status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current product license status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusDescription Status description for the current product license status.
         * 
         * @return builder
         * 
         */
        public Builder statusDescription(@Nullable Output<String> statusDescription) {
            $.statusDescription = statusDescription;
            return this;
        }

        /**
         * @param statusDescription Status description for the current product license status.
         * 
         * @return builder
         * 
         */
        public Builder statusDescription(String statusDescription) {
            return statusDescription(Output.of(statusDescription));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param totalActiveLicenseUnitCount The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveLicenseUnitCount(@Nullable Output<Integer> totalActiveLicenseUnitCount) {
            $.totalActiveLicenseUnitCount = totalActiveLicenseUnitCount;
            return this;
        }

        /**
         * @param totalActiveLicenseUnitCount The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveLicenseUnitCount(Integer totalActiveLicenseUnitCount) {
            return totalActiveLicenseUnitCount(Output.of(totalActiveLicenseUnitCount));
        }

        /**
         * @param totalLicenseRecordCount The number of license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder totalLicenseRecordCount(@Nullable Output<Integer> totalLicenseRecordCount) {
            $.totalLicenseRecordCount = totalLicenseRecordCount;
            return this;
        }

        /**
         * @param totalLicenseRecordCount The number of license records associated with the product license.
         * 
         * @return builder
         * 
         */
        public Builder totalLicenseRecordCount(Integer totalLicenseRecordCount) {
            return totalLicenseRecordCount(Output.of(totalLicenseRecordCount));
        }

        /**
         * @param totalLicenseUnitsConsumed The number of license units consumed. Updated after each allocation run.
         * 
         * @return builder
         * 
         */
        public Builder totalLicenseUnitsConsumed(@Nullable Output<Double> totalLicenseUnitsConsumed) {
            $.totalLicenseUnitsConsumed = totalLicenseUnitsConsumed;
            return this;
        }

        /**
         * @param totalLicenseUnitsConsumed The number of license units consumed. Updated after each allocation run.
         * 
         * @return builder
         * 
         */
        public Builder totalLicenseUnitsConsumed(Double totalLicenseUnitsConsumed) {
            return totalLicenseUnitsConsumed(Output.of(totalLicenseUnitsConsumed));
        }

        /**
         * @param vendorName The product license vendor name, for example: Microsoft, RHEL, and so on.
         * 
         * @return builder
         * 
         */
        public Builder vendorName(@Nullable Output<String> vendorName) {
            $.vendorName = vendorName;
            return this;
        }

        /**
         * @param vendorName The product license vendor name, for example: Microsoft, RHEL, and so on.
         * 
         * @return builder
         * 
         */
        public Builder vendorName(String vendorName) {
            return vendorName(Output.of(vendorName));
        }

        public ProductLicenseState build() {
            return $;
        }
    }

}
