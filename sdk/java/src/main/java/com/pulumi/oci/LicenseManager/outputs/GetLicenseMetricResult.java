// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLicenseMetricResult {
    private String compartmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isCompartmentIdInSubtree;
    /**
     * @return Total number of license records that will expire within 90 days in a particular compartment.
     * 
     */
    private Integer licenseRecordExpiringSoonCount;
    /**
     * @return Total number of BYOL instances in a particular compartment.
     * 
     */
    private Integer totalByolInstanceCount;
    /**
     * @return Total number of License Included (LI) instances in a particular compartment.
     * 
     */
    private Integer totalLicenseIncludedInstanceCount;
    /**
     * @return Total number of product licenses in a particular compartment.
     * 
     */
    private Integer totalProductLicenseCount;

    private GetLicenseMetricResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isCompartmentIdInSubtree() {
        return Optional.ofNullable(this.isCompartmentIdInSubtree);
    }
    /**
     * @return Total number of license records that will expire within 90 days in a particular compartment.
     * 
     */
    public Integer licenseRecordExpiringSoonCount() {
        return this.licenseRecordExpiringSoonCount;
    }
    /**
     * @return Total number of BYOL instances in a particular compartment.
     * 
     */
    public Integer totalByolInstanceCount() {
        return this.totalByolInstanceCount;
    }
    /**
     * @return Total number of License Included (LI) instances in a particular compartment.
     * 
     */
    public Integer totalLicenseIncludedInstanceCount() {
        return this.totalLicenseIncludedInstanceCount;
    }
    /**
     * @return Total number of product licenses in a particular compartment.
     * 
     */
    public Integer totalProductLicenseCount() {
        return this.totalProductLicenseCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicenseMetricResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String id;
        private @Nullable Boolean isCompartmentIdInSubtree;
        private Integer licenseRecordExpiringSoonCount;
        private Integer totalByolInstanceCount;
        private Integer totalLicenseIncludedInstanceCount;
        private Integer totalProductLicenseCount;
        public Builder() {}
        public Builder(GetLicenseMetricResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isCompartmentIdInSubtree = defaults.isCompartmentIdInSubtree;
    	      this.licenseRecordExpiringSoonCount = defaults.licenseRecordExpiringSoonCount;
    	      this.totalByolInstanceCount = defaults.totalByolInstanceCount;
    	      this.totalLicenseIncludedInstanceCount = defaults.totalLicenseIncludedInstanceCount;
    	      this.totalProductLicenseCount = defaults.totalProductLicenseCount;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isCompartmentIdInSubtree(@Nullable Boolean isCompartmentIdInSubtree) {
            this.isCompartmentIdInSubtree = isCompartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder licenseRecordExpiringSoonCount(Integer licenseRecordExpiringSoonCount) {
            this.licenseRecordExpiringSoonCount = Objects.requireNonNull(licenseRecordExpiringSoonCount);
            return this;
        }
        @CustomType.Setter
        public Builder totalByolInstanceCount(Integer totalByolInstanceCount) {
            this.totalByolInstanceCount = Objects.requireNonNull(totalByolInstanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder totalLicenseIncludedInstanceCount(Integer totalLicenseIncludedInstanceCount) {
            this.totalLicenseIncludedInstanceCount = Objects.requireNonNull(totalLicenseIncludedInstanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder totalProductLicenseCount(Integer totalProductLicenseCount) {
            this.totalProductLicenseCount = Objects.requireNonNull(totalProductLicenseCount);
            return this;
        }
        public GetLicenseMetricResult build() {
            final var o = new GetLicenseMetricResult();
            o.compartmentId = compartmentId;
            o.id = id;
            o.isCompartmentIdInSubtree = isCompartmentIdInSubtree;
            o.licenseRecordExpiringSoonCount = licenseRecordExpiringSoonCount;
            o.totalByolInstanceCount = totalByolInstanceCount;
            o.totalLicenseIncludedInstanceCount = totalLicenseIncludedInstanceCount;
            o.totalProductLicenseCount = totalProductLicenseCount;
            return o;
        }
    }
}
