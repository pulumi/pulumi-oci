// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLicenseRecordsLicenseRecordCollectionItem {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The license record display name. Avoid entering confidential information.
     * 
     */
    private final String displayName;
    /**
     * @return The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    private final String expirationDate;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private final String id;
    /**
     * @return Specifies if the license record term is perpertual.
     * 
     */
    private final Boolean isPerpetual;
    /**
     * @return Specifies if the license count is unlimited.
     * 
     */
    private final Boolean isUnlimited;
    /**
     * @return The number of license units added by the user for the given license record. Default 1
     * 
     */
    private final Integer licenseCount;
    /**
     * @return The product license unit.
     * 
     */
    private final String licenseUnit;
    /**
     * @return The license record product ID.
     * 
     */
    private final String productId;
    /**
     * @return The product license name with which the license record is associated.
     * 
     */
    private final String productLicense;
    /**
     * @return Unique product license identifier.
     * 
     */
    private final String productLicenseId;
    /**
     * @return The current license record state.
     * 
     */
    private final String state;
    /**
     * @return The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    private final String supportEndDate;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetLicenseRecordsLicenseRecordCollectionItem(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("expirationDate") String expirationDate,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isPerpetual") Boolean isPerpetual,
        @CustomType.Parameter("isUnlimited") Boolean isUnlimited,
        @CustomType.Parameter("licenseCount") Integer licenseCount,
        @CustomType.Parameter("licenseUnit") String licenseUnit,
        @CustomType.Parameter("productId") String productId,
        @CustomType.Parameter("productLicense") String productLicense,
        @CustomType.Parameter("productLicenseId") String productLicenseId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("supportEndDate") String supportEndDate,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.expirationDate = expirationDate;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isPerpetual = isPerpetual;
        this.isUnlimited = isUnlimited;
        this.licenseCount = licenseCount;
        this.licenseUnit = licenseUnit;
        this.productId = productId;
        this.productLicense = productLicense;
        this.productLicenseId = productLicenseId;
        this.state = state;
        this.supportEndDate = supportEndDate;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The license record display name. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    public String expirationDate() {
        return this.expirationDate;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies if the license record term is perpertual.
     * 
     */
    public Boolean isPerpetual() {
        return this.isPerpetual;
    }
    /**
     * @return Specifies if the license count is unlimited.
     * 
     */
    public Boolean isUnlimited() {
        return this.isUnlimited;
    }
    /**
     * @return The number of license units added by the user for the given license record. Default 1
     * 
     */
    public Integer licenseCount() {
        return this.licenseCount;
    }
    /**
     * @return The product license unit.
     * 
     */
    public String licenseUnit() {
        return this.licenseUnit;
    }
    /**
     * @return The license record product ID.
     * 
     */
    public String productId() {
        return this.productId;
    }
    /**
     * @return The product license name with which the license record is associated.
     * 
     */
    public String productLicense() {
        return this.productLicense;
    }
    /**
     * @return Unique product license identifier.
     * 
     */
    public String productLicenseId() {
        return this.productLicenseId;
    }
    /**
     * @return The current license record state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
     * 
     */
    public String supportEndDate() {
        return this.supportEndDate;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicenseRecordsLicenseRecordCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private String expirationDate;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isPerpetual;
        private Boolean isUnlimited;
        private Integer licenseCount;
        private String licenseUnit;
        private String productId;
        private String productLicense;
        private String productLicenseId;
        private String state;
        private String supportEndDate;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLicenseRecordsLicenseRecordCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.expirationDate = defaults.expirationDate;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isPerpetual = defaults.isPerpetual;
    	      this.isUnlimited = defaults.isUnlimited;
    	      this.licenseCount = defaults.licenseCount;
    	      this.licenseUnit = defaults.licenseUnit;
    	      this.productId = defaults.productId;
    	      this.productLicense = defaults.productLicense;
    	      this.productLicenseId = defaults.productLicenseId;
    	      this.state = defaults.state;
    	      this.supportEndDate = defaults.supportEndDate;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder expirationDate(String expirationDate) {
            this.expirationDate = Objects.requireNonNull(expirationDate);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isPerpetual(Boolean isPerpetual) {
            this.isPerpetual = Objects.requireNonNull(isPerpetual);
            return this;
        }
        public Builder isUnlimited(Boolean isUnlimited) {
            this.isUnlimited = Objects.requireNonNull(isUnlimited);
            return this;
        }
        public Builder licenseCount(Integer licenseCount) {
            this.licenseCount = Objects.requireNonNull(licenseCount);
            return this;
        }
        public Builder licenseUnit(String licenseUnit) {
            this.licenseUnit = Objects.requireNonNull(licenseUnit);
            return this;
        }
        public Builder productId(String productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }
        public Builder productLicense(String productLicense) {
            this.productLicense = Objects.requireNonNull(productLicense);
            return this;
        }
        public Builder productLicenseId(String productLicenseId) {
            this.productLicenseId = Objects.requireNonNull(productLicenseId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder supportEndDate(String supportEndDate) {
            this.supportEndDate = Objects.requireNonNull(supportEndDate);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetLicenseRecordsLicenseRecordCollectionItem build() {
            return new GetLicenseRecordsLicenseRecordCollectionItem(compartmentId, definedTags, displayName, expirationDate, freeformTags, id, isPerpetual, isUnlimited, licenseCount, licenseUnit, productId, productLicense, productLicenseId, state, supportEndDate, systemTags, timeCreated, timeUpdated);
        }
    }
}
