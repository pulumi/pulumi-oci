// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LicenseManager.outputs.GetProductLicenseConsumersItemMissingProduct;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProductLicenseConsumersItem {
    /**
     * @return Specifies if all options are available.
     * 
     */
    private Boolean areAllOptionsAvailable;
    /**
     * @return Specifies if the base license is available.
     * 
     */
    private Boolean isBaseLicenseAvailable;
    /**
     * @return The product license unit.
     * 
     */
    private String licenseUnitType;
    /**
     * @return Number of license units consumed by the resource.
     * 
     */
    private Double licenseUnitsConsumed;
    /**
     * @return Collection of missing product licenses.
     * 
     */
    private List<GetProductLicenseConsumersItemMissingProduct> missingProducts;
    /**
     * @return The resource product name.
     * 
     */
    private String productName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the resource.
     * 
     */
    private String resourceCompartmentId;
    /**
     * @return The display name of the compartment that contains the resource.
     * 
     */
    private String resourceCompartmentName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     * 
     */
    private String resourceId;
    /**
     * @return The display name of the resource.
     * 
     */
    private String resourceName;
    /**
     * @return Number of units of the resource
     * 
     */
    private Double resourceUnitCount;
    /**
     * @return The unit type for the resource.
     * 
     */
    private String resourceUnitType;

    private GetProductLicenseConsumersItem() {}
    /**
     * @return Specifies if all options are available.
     * 
     */
    public Boolean areAllOptionsAvailable() {
        return this.areAllOptionsAvailable;
    }
    /**
     * @return Specifies if the base license is available.
     * 
     */
    public Boolean isBaseLicenseAvailable() {
        return this.isBaseLicenseAvailable;
    }
    /**
     * @return The product license unit.
     * 
     */
    public String licenseUnitType() {
        return this.licenseUnitType;
    }
    /**
     * @return Number of license units consumed by the resource.
     * 
     */
    public Double licenseUnitsConsumed() {
        return this.licenseUnitsConsumed;
    }
    /**
     * @return Collection of missing product licenses.
     * 
     */
    public List<GetProductLicenseConsumersItemMissingProduct> missingProducts() {
        return this.missingProducts;
    }
    /**
     * @return The resource product name.
     * 
     */
    public String productName() {
        return this.productName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the resource.
     * 
     */
    public String resourceCompartmentId() {
        return this.resourceCompartmentId;
    }
    /**
     * @return The display name of the compartment that contains the resource.
     * 
     */
    public String resourceCompartmentName() {
        return this.resourceCompartmentName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return The display name of the resource.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return Number of units of the resource
     * 
     */
    public Double resourceUnitCount() {
        return this.resourceUnitCount;
    }
    /**
     * @return The unit type for the resource.
     * 
     */
    public String resourceUnitType() {
        return this.resourceUnitType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductLicenseConsumersItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean areAllOptionsAvailable;
        private Boolean isBaseLicenseAvailable;
        private String licenseUnitType;
        private Double licenseUnitsConsumed;
        private List<GetProductLicenseConsumersItemMissingProduct> missingProducts;
        private String productName;
        private String resourceCompartmentId;
        private String resourceCompartmentName;
        private String resourceId;
        private String resourceName;
        private Double resourceUnitCount;
        private String resourceUnitType;
        public Builder() {}
        public Builder(GetProductLicenseConsumersItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areAllOptionsAvailable = defaults.areAllOptionsAvailable;
    	      this.isBaseLicenseAvailable = defaults.isBaseLicenseAvailable;
    	      this.licenseUnitType = defaults.licenseUnitType;
    	      this.licenseUnitsConsumed = defaults.licenseUnitsConsumed;
    	      this.missingProducts = defaults.missingProducts;
    	      this.productName = defaults.productName;
    	      this.resourceCompartmentId = defaults.resourceCompartmentId;
    	      this.resourceCompartmentName = defaults.resourceCompartmentName;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceUnitCount = defaults.resourceUnitCount;
    	      this.resourceUnitType = defaults.resourceUnitType;
        }

        @CustomType.Setter
        public Builder areAllOptionsAvailable(Boolean areAllOptionsAvailable) {
            if (areAllOptionsAvailable == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "areAllOptionsAvailable");
            }
            this.areAllOptionsAvailable = areAllOptionsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder isBaseLicenseAvailable(Boolean isBaseLicenseAvailable) {
            if (isBaseLicenseAvailable == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "isBaseLicenseAvailable");
            }
            this.isBaseLicenseAvailable = isBaseLicenseAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder licenseUnitType(String licenseUnitType) {
            if (licenseUnitType == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "licenseUnitType");
            }
            this.licenseUnitType = licenseUnitType;
            return this;
        }
        @CustomType.Setter
        public Builder licenseUnitsConsumed(Double licenseUnitsConsumed) {
            if (licenseUnitsConsumed == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "licenseUnitsConsumed");
            }
            this.licenseUnitsConsumed = licenseUnitsConsumed;
            return this;
        }
        @CustomType.Setter
        public Builder missingProducts(List<GetProductLicenseConsumersItemMissingProduct> missingProducts) {
            if (missingProducts == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "missingProducts");
            }
            this.missingProducts = missingProducts;
            return this;
        }
        public Builder missingProducts(GetProductLicenseConsumersItemMissingProduct... missingProducts) {
            return missingProducts(List.of(missingProducts));
        }
        @CustomType.Setter
        public Builder productName(String productName) {
            if (productName == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "productName");
            }
            this.productName = productName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            if (resourceCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceCompartmentId");
            }
            this.resourceCompartmentId = resourceCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCompartmentName(String resourceCompartmentName) {
            if (resourceCompartmentName == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceCompartmentName");
            }
            this.resourceCompartmentName = resourceCompartmentName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUnitCount(Double resourceUnitCount) {
            if (resourceUnitCount == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceUnitCount");
            }
            this.resourceUnitCount = resourceUnitCount;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUnitType(String resourceUnitType) {
            if (resourceUnitType == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItem", "resourceUnitType");
            }
            this.resourceUnitType = resourceUnitType;
            return this;
        }
        public GetProductLicenseConsumersItem build() {
            final var _resultValue = new GetProductLicenseConsumersItem();
            _resultValue.areAllOptionsAvailable = areAllOptionsAvailable;
            _resultValue.isBaseLicenseAvailable = isBaseLicenseAvailable;
            _resultValue.licenseUnitType = licenseUnitType;
            _resultValue.licenseUnitsConsumed = licenseUnitsConsumed;
            _resultValue.missingProducts = missingProducts;
            _resultValue.productName = productName;
            _resultValue.resourceCompartmentId = resourceCompartmentId;
            _resultValue.resourceCompartmentName = resourceCompartmentName;
            _resultValue.resourceId = resourceId;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceUnitCount = resourceUnitCount;
            _resultValue.resourceUnitType = resourceUnitType;
            return _resultValue;
        }
    }
}
