// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProductLicenseConsumersItemMissingProduct {
    /**
     * @return Product category base or option.
     * 
     */
    private String category;
    /**
     * @return Units required for the missing product.
     * 
     */
    private Double count;
    /**
     * @return Name of the product.
     * 
     */
    private String name;

    private GetProductLicenseConsumersItemMissingProduct() {}
    /**
     * @return Product category base or option.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Units required for the missing product.
     * 
     */
    public Double count() {
        return this.count;
    }
    /**
     * @return Name of the product.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductLicenseConsumersItemMissingProduct defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private Double count;
        private String name;
        public Builder() {}
        public Builder(GetProductLicenseConsumersItemMissingProduct defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.count = defaults.count;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItemMissingProduct", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder count(Double count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItemMissingProduct", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProductLicenseConsumersItemMissingProduct", "name");
            }
            this.name = name;
            return this;
        }
        public GetProductLicenseConsumersItemMissingProduct build() {
            final var _resultValue = new GetProductLicenseConsumersItemMissingProduct();
            _resultValue.category = category;
            _resultValue.count = count;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
