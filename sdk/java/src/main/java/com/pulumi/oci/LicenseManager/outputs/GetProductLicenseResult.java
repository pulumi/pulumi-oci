// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LicenseManager.outputs.GetProductLicenseImage;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProductLicenseResult {
    /**
     * @return The number of active license records associated with the product license.
     * 
     */
    private final Integer activeLicenseRecordCount;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return License record name
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The image ID associated with the product license.
     * 
     */
    private final String id;
    /**
     * @return The images associated with the product license.
     * 
     */
    private final List<GetProductLicenseImage> images;
    /**
     * @return Specifies whether or not the product license is oversubscribed.
     * 
     */
    private final Boolean isOverSubscribed;
    /**
     * @return Specifies if the license unit count is unlimited.
     * 
     */
    private final Boolean isUnlimited;
    /**
     * @return Specifies whether the vendor is Oracle or a third party.
     * 
     */
    private final Boolean isVendorOracle;
    /**
     * @return The product license unit.
     * 
     */
    private final String licenseUnit;
    private final String productLicenseId;
    /**
     * @return The current product license state.
     * 
     */
    private final String state;
    /**
     * @return The current product license status.
     * 
     */
    private final String status;
    /**
     * @return Status description for the current product license status.
     * 
     */
    private final String statusDescription;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    private final String timeUpdated;
    /**
     * @return The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
     * 
     */
    private final Integer totalActiveLicenseUnitCount;
    /**
     * @return The number of license records associated with the product license.
     * 
     */
    private final Integer totalLicenseRecordCount;
    /**
     * @return The number of license units consumed. Updated after each allocation run.
     * 
     */
    private final Double totalLicenseUnitsConsumed;
    /**
     * @return The vendor of the ProductLicense
     * 
     */
    private final String vendorName;

    @CustomType.Constructor
    private GetProductLicenseResult(
        @CustomType.Parameter("activeLicenseRecordCount") Integer activeLicenseRecordCount,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("images") List<GetProductLicenseImage> images,
        @CustomType.Parameter("isOverSubscribed") Boolean isOverSubscribed,
        @CustomType.Parameter("isUnlimited") Boolean isUnlimited,
        @CustomType.Parameter("isVendorOracle") Boolean isVendorOracle,
        @CustomType.Parameter("licenseUnit") String licenseUnit,
        @CustomType.Parameter("productLicenseId") String productLicenseId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("statusDescription") String statusDescription,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("totalActiveLicenseUnitCount") Integer totalActiveLicenseUnitCount,
        @CustomType.Parameter("totalLicenseRecordCount") Integer totalLicenseRecordCount,
        @CustomType.Parameter("totalLicenseUnitsConsumed") Double totalLicenseUnitsConsumed,
        @CustomType.Parameter("vendorName") String vendorName) {
        this.activeLicenseRecordCount = activeLicenseRecordCount;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.images = images;
        this.isOverSubscribed = isOverSubscribed;
        this.isUnlimited = isUnlimited;
        this.isVendorOracle = isVendorOracle;
        this.licenseUnit = licenseUnit;
        this.productLicenseId = productLicenseId;
        this.state = state;
        this.status = status;
        this.statusDescription = statusDescription;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.totalActiveLicenseUnitCount = totalActiveLicenseUnitCount;
        this.totalLicenseRecordCount = totalLicenseRecordCount;
        this.totalLicenseUnitsConsumed = totalLicenseUnitsConsumed;
        this.vendorName = vendorName;
    }

    /**
     * @return The number of active license records associated with the product license.
     * 
     */
    public Integer activeLicenseRecordCount() {
        return this.activeLicenseRecordCount;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return License record name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The image ID associated with the product license.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The images associated with the product license.
     * 
     */
    public List<GetProductLicenseImage> images() {
        return this.images;
    }
    /**
     * @return Specifies whether or not the product license is oversubscribed.
     * 
     */
    public Boolean isOverSubscribed() {
        return this.isOverSubscribed;
    }
    /**
     * @return Specifies if the license unit count is unlimited.
     * 
     */
    public Boolean isUnlimited() {
        return this.isUnlimited;
    }
    /**
     * @return Specifies whether the vendor is Oracle or a third party.
     * 
     */
    public Boolean isVendorOracle() {
        return this.isVendorOracle;
    }
    /**
     * @return The product license unit.
     * 
     */
    public String licenseUnit() {
        return this.licenseUnit;
    }
    public String productLicenseId() {
        return this.productLicenseId;
    }
    /**
     * @return The current product license state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The current product license status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Status description for the current product license status.
     * 
     */
    public String statusDescription() {
        return this.statusDescription;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
     * 
     */
    public Integer totalActiveLicenseUnitCount() {
        return this.totalActiveLicenseUnitCount;
    }
    /**
     * @return The number of license records associated with the product license.
     * 
     */
    public Integer totalLicenseRecordCount() {
        return this.totalLicenseRecordCount;
    }
    /**
     * @return The number of license units consumed. Updated after each allocation run.
     * 
     */
    public Double totalLicenseUnitsConsumed() {
        return this.totalLicenseUnitsConsumed;
    }
    /**
     * @return The vendor of the ProductLicense
     * 
     */
    public String vendorName() {
        return this.vendorName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductLicenseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer activeLicenseRecordCount;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetProductLicenseImage> images;
        private Boolean isOverSubscribed;
        private Boolean isUnlimited;
        private Boolean isVendorOracle;
        private String licenseUnit;
        private String productLicenseId;
        private String state;
        private String status;
        private String statusDescription;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private Integer totalActiveLicenseUnitCount;
        private Integer totalLicenseRecordCount;
        private Double totalLicenseUnitsConsumed;
        private String vendorName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProductLicenseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeLicenseRecordCount = defaults.activeLicenseRecordCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.images = defaults.images;
    	      this.isOverSubscribed = defaults.isOverSubscribed;
    	      this.isUnlimited = defaults.isUnlimited;
    	      this.isVendorOracle = defaults.isVendorOracle;
    	      this.licenseUnit = defaults.licenseUnit;
    	      this.productLicenseId = defaults.productLicenseId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.statusDescription = defaults.statusDescription;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.totalActiveLicenseUnitCount = defaults.totalActiveLicenseUnitCount;
    	      this.totalLicenseRecordCount = defaults.totalLicenseRecordCount;
    	      this.totalLicenseUnitsConsumed = defaults.totalLicenseUnitsConsumed;
    	      this.vendorName = defaults.vendorName;
        }

        public Builder activeLicenseRecordCount(Integer activeLicenseRecordCount) {
            this.activeLicenseRecordCount = Objects.requireNonNull(activeLicenseRecordCount);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder images(List<GetProductLicenseImage> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(GetProductLicenseImage... images) {
            return images(List.of(images));
        }
        public Builder isOverSubscribed(Boolean isOverSubscribed) {
            this.isOverSubscribed = Objects.requireNonNull(isOverSubscribed);
            return this;
        }
        public Builder isUnlimited(Boolean isUnlimited) {
            this.isUnlimited = Objects.requireNonNull(isUnlimited);
            return this;
        }
        public Builder isVendorOracle(Boolean isVendorOracle) {
            this.isVendorOracle = Objects.requireNonNull(isVendorOracle);
            return this;
        }
        public Builder licenseUnit(String licenseUnit) {
            this.licenseUnit = Objects.requireNonNull(licenseUnit);
            return this;
        }
        public Builder productLicenseId(String productLicenseId) {
            this.productLicenseId = Objects.requireNonNull(productLicenseId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder statusDescription(String statusDescription) {
            this.statusDescription = Objects.requireNonNull(statusDescription);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder totalActiveLicenseUnitCount(Integer totalActiveLicenseUnitCount) {
            this.totalActiveLicenseUnitCount = Objects.requireNonNull(totalActiveLicenseUnitCount);
            return this;
        }
        public Builder totalLicenseRecordCount(Integer totalLicenseRecordCount) {
            this.totalLicenseRecordCount = Objects.requireNonNull(totalLicenseRecordCount);
            return this;
        }
        public Builder totalLicenseUnitsConsumed(Double totalLicenseUnitsConsumed) {
            this.totalLicenseUnitsConsumed = Objects.requireNonNull(totalLicenseUnitsConsumed);
            return this;
        }
        public Builder vendorName(String vendorName) {
            this.vendorName = Objects.requireNonNull(vendorName);
            return this;
        }        public GetProductLicenseResult build() {
            return new GetProductLicenseResult(activeLicenseRecordCount, compartmentId, definedTags, displayName, freeformTags, id, images, isOverSubscribed, isUnlimited, isVendorOracle, licenseUnit, productLicenseId, state, status, statusDescription, systemTags, timeCreated, timeUpdated, totalActiveLicenseUnitCount, totalLicenseRecordCount, totalLicenseUnitsConsumed, vendorName);
        }
    }
}
