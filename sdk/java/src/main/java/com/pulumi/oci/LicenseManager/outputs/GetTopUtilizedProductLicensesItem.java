// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LicenseManager.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTopUtilizedProductLicensesItem {
    /**
     * @return Specifies if the license unit count is unlimited.
     * 
     */
    private Boolean isUnlimited;
    /**
     * @return The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String productLicenseId;
    /**
     * @return The product type.
     * 
     */
    private String productType;
    /**
     * @return The current product license status.
     * 
     */
    private String status;
    /**
     * @return Total number of license units in the product license provided by the user.
     * 
     */
    private Integer totalLicenseUnitCount;
    /**
     * @return Number of license units consumed.
     * 
     */
    private Double totalUnitsConsumed;
    /**
     * @return The product license unit.
     * 
     */
    private String unitType;

    private GetTopUtilizedProductLicensesItem() {}
    /**
     * @return Specifies if the license unit count is unlimited.
     * 
     */
    public Boolean isUnlimited() {
        return this.isUnlimited;
    }
    /**
     * @return The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String productLicenseId() {
        return this.productLicenseId;
    }
    /**
     * @return The product type.
     * 
     */
    public String productType() {
        return this.productType;
    }
    /**
     * @return The current product license status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Total number of license units in the product license provided by the user.
     * 
     */
    public Integer totalLicenseUnitCount() {
        return this.totalLicenseUnitCount;
    }
    /**
     * @return Number of license units consumed.
     * 
     */
    public Double totalUnitsConsumed() {
        return this.totalUnitsConsumed;
    }
    /**
     * @return The product license unit.
     * 
     */
    public String unitType() {
        return this.unitType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopUtilizedProductLicensesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isUnlimited;
        private String productLicenseId;
        private String productType;
        private String status;
        private Integer totalLicenseUnitCount;
        private Double totalUnitsConsumed;
        private String unitType;
        public Builder() {}
        public Builder(GetTopUtilizedProductLicensesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isUnlimited = defaults.isUnlimited;
    	      this.productLicenseId = defaults.productLicenseId;
    	      this.productType = defaults.productType;
    	      this.status = defaults.status;
    	      this.totalLicenseUnitCount = defaults.totalLicenseUnitCount;
    	      this.totalUnitsConsumed = defaults.totalUnitsConsumed;
    	      this.unitType = defaults.unitType;
        }

        @CustomType.Setter
        public Builder isUnlimited(Boolean isUnlimited) {
            this.isUnlimited = Objects.requireNonNull(isUnlimited);
            return this;
        }
        @CustomType.Setter
        public Builder productLicenseId(String productLicenseId) {
            this.productLicenseId = Objects.requireNonNull(productLicenseId);
            return this;
        }
        @CustomType.Setter
        public Builder productType(String productType) {
            this.productType = Objects.requireNonNull(productType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder totalLicenseUnitCount(Integer totalLicenseUnitCount) {
            this.totalLicenseUnitCount = Objects.requireNonNull(totalLicenseUnitCount);
            return this;
        }
        @CustomType.Setter
        public Builder totalUnitsConsumed(Double totalUnitsConsumed) {
            this.totalUnitsConsumed = Objects.requireNonNull(totalUnitsConsumed);
            return this;
        }
        @CustomType.Setter
        public Builder unitType(String unitType) {
            this.unitType = Objects.requireNonNull(unitType);
            return this;
        }
        public GetTopUtilizedProductLicensesItem build() {
            final var o = new GetTopUtilizedProductLicensesItem();
            o.isUnlimited = isUnlimited;
            o.productLicenseId = productLicenseId;
            o.productType = productType;
            o.status = status;
            o.totalLicenseUnitCount = totalLicenseUnitCount;
            o.totalUnitsConsumed = totalUnitsConsumed;
            o.unitType = unitType;
            return o;
        }
    }
}
