// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Limits.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Limits.outputs.GetLimitDefinitionsFilter;
import com.pulumi.oci.Limits.outputs.GetLimitDefinitionsLimitDefinition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLimitDefinitionsResult {
    private String compartmentId;
    private @Nullable List<GetLimitDefinitionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of limit_definitions.
     * 
     */
    private List<GetLimitDefinitionsLimitDefinition> limitDefinitions;
    /**
     * @return The resource limit name. To be used for writing policies (in case of quotas) or other programmatic calls.
     * 
     */
    private @Nullable String name;
    /**
     * @return The service name of the limit.
     * 
     */
    private @Nullable String serviceName;
    private @Nullable String subscriptionId;

    private GetLimitDefinitionsResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetLimitDefinitionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of limit_definitions.
     * 
     */
    public List<GetLimitDefinitionsLimitDefinition> limitDefinitions() {
        return this.limitDefinitions;
    }
    /**
     * @return The resource limit name. To be used for writing policies (in case of quotas) or other programmatic calls.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The service name of the limit.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLimitDefinitionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetLimitDefinitionsFilter> filters;
        private String id;
        private List<GetLimitDefinitionsLimitDefinition> limitDefinitions;
        private @Nullable String name;
        private @Nullable String serviceName;
        private @Nullable String subscriptionId;
        public Builder() {}
        public Builder(GetLimitDefinitionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.limitDefinitions = defaults.limitDefinitions;
    	      this.name = defaults.name;
    	      this.serviceName = defaults.serviceName;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetLimitDefinitionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetLimitDefinitionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetLimitDefinitionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLimitDefinitionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limitDefinitions(List<GetLimitDefinitionsLimitDefinition> limitDefinitions) {
            if (limitDefinitions == null) {
              throw new MissingRequiredPropertyException("GetLimitDefinitionsResult", "limitDefinitions");
            }
            this.limitDefinitions = limitDefinitions;
            return this;
        }
        public Builder limitDefinitions(GetLimitDefinitionsLimitDefinition... limitDefinitions) {
            return limitDefinitions(List.of(limitDefinitions));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(@Nullable String serviceName) {

            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {

            this.subscriptionId = subscriptionId;
            return this;
        }
        public GetLimitDefinitionsResult build() {
            final var _resultValue = new GetLimitDefinitionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.limitDefinitions = limitDefinitions;
            _resultValue.name = name;
            _resultValue.serviceName = serviceName;
            _resultValue.subscriptionId = subscriptionId;
            return _resultValue;
        }
    }
}
