// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Limits.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetResourceAvailabilityResult {
    private @Nullable String availabilityDomain;
    /**
     * @return The count of available resources. To support resources with fractional counts, the field rounds down to the nearest integer.
     * 
     */
    private String available;
    private String compartmentId;
    /**
     * @return The effective quota value for the given compartment. This field is only present if there is a current quota policy affecting the current resource in the target region or availability domain.
     * 
     */
    private Double effectiveQuotaValue;
    /**
     * @return The most accurate count of available resources.
     * 
     */
    private Double fractionalAvailability;
    /**
     * @return The current most accurate usage in the given compartment.
     * 
     */
    private Double fractionalUsage;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String limitName;
    private String serviceName;
    private @Nullable String subscriptionId;
    /**
     * @return The current usage in the given compartment. To support resources with fractional counts, the field rounds up to the nearest integer.
     * 
     */
    private String used;

    private GetResourceAvailabilityResult() {}
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The count of available resources. To support resources with fractional counts, the field rounds down to the nearest integer.
     * 
     */
    public String available() {
        return this.available;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The effective quota value for the given compartment. This field is only present if there is a current quota policy affecting the current resource in the target region or availability domain.
     * 
     */
    public Double effectiveQuotaValue() {
        return this.effectiveQuotaValue;
    }
    /**
     * @return The most accurate count of available resources.
     * 
     */
    public Double fractionalAvailability() {
        return this.fractionalAvailability;
    }
    /**
     * @return The current most accurate usage in the given compartment.
     * 
     */
    public Double fractionalUsage() {
        return this.fractionalUsage;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String limitName() {
        return this.limitName;
    }
    public String serviceName() {
        return this.serviceName;
    }
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return The current usage in the given compartment. To support resources with fractional counts, the field rounds up to the nearest integer.
     * 
     */
    public String used() {
        return this.used;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResourceAvailabilityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private String available;
        private String compartmentId;
        private Double effectiveQuotaValue;
        private Double fractionalAvailability;
        private Double fractionalUsage;
        private String id;
        private String limitName;
        private String serviceName;
        private @Nullable String subscriptionId;
        private String used;
        public Builder() {}
        public Builder(GetResourceAvailabilityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.available = defaults.available;
    	      this.compartmentId = defaults.compartmentId;
    	      this.effectiveQuotaValue = defaults.effectiveQuotaValue;
    	      this.fractionalAvailability = defaults.fractionalAvailability;
    	      this.fractionalUsage = defaults.fractionalUsage;
    	      this.id = defaults.id;
    	      this.limitName = defaults.limitName;
    	      this.serviceName = defaults.serviceName;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.used = defaults.used;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder available(String available) {
            if (available == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "available");
            }
            this.available = available;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveQuotaValue(Double effectiveQuotaValue) {
            if (effectiveQuotaValue == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "effectiveQuotaValue");
            }
            this.effectiveQuotaValue = effectiveQuotaValue;
            return this;
        }
        @CustomType.Setter
        public Builder fractionalAvailability(Double fractionalAvailability) {
            if (fractionalAvailability == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "fractionalAvailability");
            }
            this.fractionalAvailability = fractionalAvailability;
            return this;
        }
        @CustomType.Setter
        public Builder fractionalUsage(Double fractionalUsage) {
            if (fractionalUsage == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "fractionalUsage");
            }
            this.fractionalUsage = fractionalUsage;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limitName(String limitName) {
            if (limitName == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "limitName");
            }
            this.limitName = limitName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {

            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder used(String used) {
            if (used == null) {
              throw new MissingRequiredPropertyException("GetResourceAvailabilityResult", "used");
            }
            this.used = used;
            return this;
        }
        public GetResourceAvailabilityResult build() {
            final var _resultValue = new GetResourceAvailabilityResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.available = available;
            _resultValue.compartmentId = compartmentId;
            _resultValue.effectiveQuotaValue = effectiveQuotaValue;
            _resultValue.fractionalAvailability = fractionalAvailability;
            _resultValue.fractionalUsage = fractionalUsage;
            _resultValue.id = id;
            _resultValue.limitName = limitName;
            _resultValue.serviceName = serviceName;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.used = used;
            return _resultValue;
        }
    }
}
