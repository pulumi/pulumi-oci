// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.LoadBalancer.BackendSetArgs;
import com.pulumi.oci.LoadBalancer.inputs.BackendSetState;
import com.pulumi.oci.LoadBalancer.outputs.BackendSetBackend;
import com.pulumi.oci.LoadBalancer.outputs.BackendSetHealthChecker;
import com.pulumi.oci.LoadBalancer.outputs.BackendSetLbCookieSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.BackendSetSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.BackendSetSslConfiguration;
import com.pulumi.oci.Utilities;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Backend Set resource in Oracle Cloud Infrastructure Load Balancer service.
 * 
 * Adds a backend set to a load balancer.
 * 
 * ## Supported Aliases
 * 
 * * `oci_load_balancer_backendset`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.LoadBalancer.BackendSet;
 * import com.pulumi.oci.LoadBalancer.BackendSetArgs;
 * import com.pulumi.oci.LoadBalancer.inputs.BackendSetHealthCheckerArgs;
 * import com.pulumi.oci.LoadBalancer.inputs.BackendSetLbCookieSessionPersistenceConfigurationArgs;
 * import com.pulumi.oci.LoadBalancer.inputs.BackendSetSessionPersistenceConfigurationArgs;
 * import com.pulumi.oci.LoadBalancer.inputs.BackendSetSslConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testBackendSet = new BackendSet("testBackendSet", BackendSetArgs.builder()
 *             .healthChecker(BackendSetHealthCheckerArgs.builder()
 *                 .protocol(backendSetHealthCheckerProtocol)
 *                 .intervalMs(backendSetHealthCheckerIntervalMs)
 *                 .isForcePlainText(backendSetHealthCheckerIsForcePlainText)
 *                 .port(backendSetHealthCheckerPort)
 *                 .responseBodyRegex(backendSetHealthCheckerResponseBodyRegex)
 *                 .retries(backendSetHealthCheckerRetries)
 *                 .returnCode(backendSetHealthCheckerReturnCode)
 *                 .timeoutInMillis(backendSetHealthCheckerTimeoutInMillis)
 *                 .urlPath(backendSetHealthCheckerUrlPath)
 *                 .build())
 *             .loadBalancerId(testLoadBalancer.id())
 *             .name(backendSetName)
 *             .policy(backendSetPolicy)
 *             .backendMaxConnections(backendSetBackendMaxConnections)
 *             .lbCookieSessionPersistenceConfiguration(BackendSetLbCookieSessionPersistenceConfigurationArgs.builder()
 *                 .cookieName(backendSetLbCookieSessionPersistenceConfigurationCookieName)
 *                 .disableFallback(backendSetLbCookieSessionPersistenceConfigurationDisableFallback)
 *                 .domain(backendSetLbCookieSessionPersistenceConfigurationDomain)
 *                 .isHttpOnly(backendSetLbCookieSessionPersistenceConfigurationIsHttpOnly)
 *                 .isSecure(backendSetLbCookieSessionPersistenceConfigurationIsSecure)
 *                 .maxAgeInSeconds(backendSetLbCookieSessionPersistenceConfigurationMaxAgeInSeconds)
 *                 .path(backendSetLbCookieSessionPersistenceConfigurationPath)
 *                 .build())
 *             .sessionPersistenceConfiguration(BackendSetSessionPersistenceConfigurationArgs.builder()
 *                 .cookieName(backendSetSessionPersistenceConfigurationCookieName)
 *                 .disableFallback(backendSetSessionPersistenceConfigurationDisableFallback)
 *                 .build())
 *             .sslConfiguration(BackendSetSslConfigurationArgs.builder()
 *                 .certificateIds(backendSetSslConfigurationCertificateIds)
 *                 .certificateName(testCertificate.name())
 *                 .cipherSuiteName(backendSetSslConfigurationCipherSuiteName)
 *                 .protocols(backendSetSslConfigurationProtocols)
 *                 .serverOrderPreference(backendSetSslConfigurationServerOrderPreference)
 *                 .trustedCertificateAuthorityIds(backendSetSslConfigurationTrustedCertificateAuthorityIds)
 *                 .verifyDepth(backendSetSslConfigurationVerifyDepth)
 *                 .verifyPeerCertificate(backendSetSslConfigurationVerifyPeerCertificate)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * **Note:** The `sessionPersistenceConfiguration` (application cookie stickiness) and `lbCookieSessionPersistenceConfiguration`
 * (LB cookie stickiness) attributes are mutually exclusive. To avoid returning an error, configure only one of these two
 * attributes per backend set.
 * 
 * ## Import
 * 
 * BackendSets can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:LoadBalancer/backendSet:BackendSet test_backend_set &#34;loadBalancers/{loadBalancerId}/backendSets/{backendSetName}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:LoadBalancer/backendSet:BackendSet")
public class BackendSet extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) The maximum number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting. If this is not set then the number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting is unlimited.  Example: `300`
     * 
     */
    @Export(name="backendMaxConnections", refs={Integer.class}, tree="[0]")
    private Output<Integer> backendMaxConnections;

    /**
     * @return (Updatable) The maximum number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting. If this is not set then the number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting is unlimited.  Example: `300`
     * 
     */
    public Output<Integer> backendMaxConnections() {
        return this.backendMaxConnections;
    }
    /**
     * (Updatable)
     * 
     */
    @Export(name="backends", refs={List.class,BackendSetBackend.class}, tree="[0,1]")
    private Output<List<BackendSetBackend>> backends;

    /**
     * @return (Updatable)
     * 
     */
    public Output<List<BackendSetBackend>> backends() {
        return this.backends;
    }
    /**
     * (Updatable) The health check policy&#39;s configuration details.
     * 
     */
    @Export(name="healthChecker", refs={BackendSetHealthChecker.class}, tree="[0]")
    private Output<BackendSetHealthChecker> healthChecker;

    /**
     * @return (Updatable) The health check policy&#39;s configuration details.
     * 
     */
    public Output<BackendSetHealthChecker> healthChecker() {
        return this.healthChecker;
    }
    /**
     * (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     * Session persistence enables the Load Balancing service to direct all requests that originate from a single logical client to a single backend web server. For more information, see [Session Persistence](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/sessionpersistence.htm).
     * 
     * When you configure LB cookie stickiness, the load balancer inserts a cookie into the response. The parameters configured in the cookie enable session stickiness. This method is useful when you have applications and Web backend services that cannot generate their own cookies.
     * 
     * Path route rules take precedence to determine the target backend server. The load balancer verifies that session stickiness is enabled for the backend server and that the cookie configuration (domain, path, and cookie hash) is valid for the target. The system ignores invalid cookies.
     * 
     * To disable LB cookie stickiness on a running load balancer, use the [UpdateBackendSet](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/UpdateBackendSet) operation and specify `null` for the `LBCookieSessionPersistenceConfigurationDetails` object.
     * 
     * Example: `LBCookieSessionPersistenceConfigurationDetails: null`
     * 
     * **Note:** `SessionPersistenceConfigurationDetails` (application cookie stickiness) and `LBCookieSessionPersistenceConfigurationDetails` (LB cookie stickiness) are mutually exclusive. An error results if you try to enable both types of session persistence.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    @Export(name="lbCookieSessionPersistenceConfiguration", refs={BackendSetLbCookieSessionPersistenceConfiguration.class}, tree="[0]")
    private Output<BackendSetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfiguration;

    /**
     * @return (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     * Session persistence enables the Load Balancing service to direct all requests that originate from a single logical client to a single backend web server. For more information, see [Session Persistence](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/sessionpersistence.htm).
     * 
     * When you configure LB cookie stickiness, the load balancer inserts a cookie into the response. The parameters configured in the cookie enable session stickiness. This method is useful when you have applications and Web backend services that cannot generate their own cookies.
     * 
     * Path route rules take precedence to determine the target backend server. The load balancer verifies that session stickiness is enabled for the backend server and that the cookie configuration (domain, path, and cookie hash) is valid for the target. The system ignores invalid cookies.
     * 
     * To disable LB cookie stickiness on a running load balancer, use the [UpdateBackendSet](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/UpdateBackendSet) operation and specify `null` for the `LBCookieSessionPersistenceConfigurationDetails` object.
     * 
     * Example: `LBCookieSessionPersistenceConfigurationDetails: null`
     * 
     * **Note:** `SessionPersistenceConfigurationDetails` (application cookie stickiness) and `LBCookieSessionPersistenceConfigurationDetails` (LB cookie stickiness) are mutually exclusive. An error results if you try to enable both types of session persistence.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    public Output<BackendSetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfiguration() {
        return this.lbCookieSessionPersistenceConfiguration;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
     * 
     */
    @Export(name="loadBalancerId", refs={String.class}, tree="[0]")
    private Output<String> loadBalancerId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     * Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
     * 
     * Example: `example_backend_set`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     * Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
     * 
     * Example: `example_backend_set`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    @Export(name="policy", refs={String.class}, tree="[0]")
    private Output<String> policy;

    /**
     * @return (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }
    /**
     * (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     * Session persistence enables the Load Balancing service to direct any number of requests that originate from a single logical client to a single backend web server. For more information, see [Session Persistence](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/sessionpersistence.htm).
     * 
     * With application cookie stickiness, the load balancer enables session persistence only when the response from a backend application server includes a `Set-cookie` header with the user-specified cookie name.
     * 
     * To disable application cookie stickiness on a running load balancer, use the [UpdateBackendSet](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/UpdateBackendSet) operation and specify `null` for the `SessionPersistenceConfigurationDetails` object.
     * 
     * Example: `SessionPersistenceConfigurationDetails: null`
     * 
     * **Note:** `SessionPersistenceConfigurationDetails` (application cookie stickiness) and `LBCookieSessionPersistenceConfigurationDetails` (LB cookie stickiness) are mutually exclusive. An error results if you try to enable both types of session persistence.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    @Export(name="sessionPersistenceConfiguration", refs={BackendSetSessionPersistenceConfiguration.class}, tree="[0]")
    private Output<BackendSetSessionPersistenceConfiguration> sessionPersistenceConfiguration;

    /**
     * @return (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     * Session persistence enables the Load Balancing service to direct any number of requests that originate from a single logical client to a single backend web server. For more information, see [Session Persistence](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/sessionpersistence.htm).
     * 
     * With application cookie stickiness, the load balancer enables session persistence only when the response from a backend application server includes a `Set-cookie` header with the user-specified cookie name.
     * 
     * To disable application cookie stickiness on a running load balancer, use the [UpdateBackendSet](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/BackendSet/UpdateBackendSet) operation and specify `null` for the `SessionPersistenceConfigurationDetails` object.
     * 
     * Example: `SessionPersistenceConfigurationDetails: null`
     * 
     * **Note:** `SessionPersistenceConfigurationDetails` (application cookie stickiness) and `LBCookieSessionPersistenceConfigurationDetails` (LB cookie stickiness) are mutually exclusive. An error results if you try to enable both types of session persistence.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    public Output<BackendSetSessionPersistenceConfiguration> sessionPersistenceConfiguration() {
        return this.sessionPersistenceConfiguration;
    }
    /**
     * (Updatable) The load balancer&#39;s SSL handling configuration details.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    @Export(name="sslConfiguration", refs={BackendSetSslConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ BackendSetSslConfiguration> sslConfiguration;

    /**
     * @return (Updatable) The load balancer&#39;s SSL handling configuration details.
     * 
     * **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    public Output<Optional<BackendSetSslConfiguration>> sslConfiguration() {
        return Codegen.optional(this.sslConfiguration);
    }
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendSet(java.lang.String name) {
        this(name, BackendSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendSet(java.lang.String name, BackendSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendSet(java.lang.String name, BackendSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:LoadBalancer/backendSet:BackendSet", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendSet(java.lang.String name, Output<java.lang.String> id, @Nullable BackendSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:LoadBalancer/backendSet:BackendSet", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendSetArgs makeArgs(BackendSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendSetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendSet get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendSet(name, id, state, options);
    }
}
