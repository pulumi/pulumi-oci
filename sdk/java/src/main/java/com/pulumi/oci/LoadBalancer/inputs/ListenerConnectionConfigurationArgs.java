// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerConnectionConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerConnectionConfigurationArgs Empty = new ListenerConnectionConfigurationArgs();

    /**
     * (Updatable) An array that represents the PPV2 Options that can be enabled on TCP Listeners. Example: [&#34;PP2_TYPE_AUTHORITY&#34;]
     * 
     */
    @Import(name="backendTcpProxyProtocolOptions")
    private @Nullable Output<List<String>> backendTcpProxyProtocolOptions;

    /**
     * @return (Updatable) An array that represents the PPV2 Options that can be enabled on TCP Listeners. Example: [&#34;PP2_TYPE_AUTHORITY&#34;]
     * 
     */
    public Optional<Output<List<String>>> backendTcpProxyProtocolOptions() {
        return Optional.ofNullable(this.backendTcpProxyProtocolOptions);
    }

    /**
     * (Updatable) The backend TCP Proxy Protocol version.  Example: `1`
     * 
     */
    @Import(name="backendTcpProxyProtocolVersion")
    private @Nullable Output<Integer> backendTcpProxyProtocolVersion;

    /**
     * @return (Updatable) The backend TCP Proxy Protocol version.  Example: `1`
     * 
     */
    public Optional<Output<Integer>> backendTcpProxyProtocolVersion() {
        return Optional.ofNullable(this.backendTcpProxyProtocolVersion);
    }

    /**
     * (Updatable) The maximum idle time, in seconds, allowed between two successive receive or two successive send operations between the client and backend servers. A send operation does not reset the timer for receive operations. A receive operation does not reset the timer for send operations.
     * 
     * For more information, see [Connection Configuration](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/connectionreuse.htm#ConnectionConfiguration).
     * 
     * Example: `1200`
     * 
     */
    @Import(name="idleTimeoutInSeconds", required=true)
    private Output<String> idleTimeoutInSeconds;

    /**
     * @return (Updatable) The maximum idle time, in seconds, allowed between two successive receive or two successive send operations between the client and backend servers. A send operation does not reset the timer for receive operations. A receive operation does not reset the timer for send operations.
     * 
     * For more information, see [Connection Configuration](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/connectionreuse.htm#ConnectionConfiguration).
     * 
     * Example: `1200`
     * 
     */
    public Output<String> idleTimeoutInSeconds() {
        return this.idleTimeoutInSeconds;
    }

    private ListenerConnectionConfigurationArgs() {}

    private ListenerConnectionConfigurationArgs(ListenerConnectionConfigurationArgs $) {
        this.backendTcpProxyProtocolOptions = $.backendTcpProxyProtocolOptions;
        this.backendTcpProxyProtocolVersion = $.backendTcpProxyProtocolVersion;
        this.idleTimeoutInSeconds = $.idleTimeoutInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerConnectionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerConnectionConfigurationArgs $;

        public Builder() {
            $ = new ListenerConnectionConfigurationArgs();
        }

        public Builder(ListenerConnectionConfigurationArgs defaults) {
            $ = new ListenerConnectionConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendTcpProxyProtocolOptions (Updatable) An array that represents the PPV2 Options that can be enabled on TCP Listeners. Example: [&#34;PP2_TYPE_AUTHORITY&#34;]
         * 
         * @return builder
         * 
         */
        public Builder backendTcpProxyProtocolOptions(@Nullable Output<List<String>> backendTcpProxyProtocolOptions) {
            $.backendTcpProxyProtocolOptions = backendTcpProxyProtocolOptions;
            return this;
        }

        /**
         * @param backendTcpProxyProtocolOptions (Updatable) An array that represents the PPV2 Options that can be enabled on TCP Listeners. Example: [&#34;PP2_TYPE_AUTHORITY&#34;]
         * 
         * @return builder
         * 
         */
        public Builder backendTcpProxyProtocolOptions(List<String> backendTcpProxyProtocolOptions) {
            return backendTcpProxyProtocolOptions(Output.of(backendTcpProxyProtocolOptions));
        }

        /**
         * @param backendTcpProxyProtocolOptions (Updatable) An array that represents the PPV2 Options that can be enabled on TCP Listeners. Example: [&#34;PP2_TYPE_AUTHORITY&#34;]
         * 
         * @return builder
         * 
         */
        public Builder backendTcpProxyProtocolOptions(String... backendTcpProxyProtocolOptions) {
            return backendTcpProxyProtocolOptions(List.of(backendTcpProxyProtocolOptions));
        }

        /**
         * @param backendTcpProxyProtocolVersion (Updatable) The backend TCP Proxy Protocol version.  Example: `1`
         * 
         * @return builder
         * 
         */
        public Builder backendTcpProxyProtocolVersion(@Nullable Output<Integer> backendTcpProxyProtocolVersion) {
            $.backendTcpProxyProtocolVersion = backendTcpProxyProtocolVersion;
            return this;
        }

        /**
         * @param backendTcpProxyProtocolVersion (Updatable) The backend TCP Proxy Protocol version.  Example: `1`
         * 
         * @return builder
         * 
         */
        public Builder backendTcpProxyProtocolVersion(Integer backendTcpProxyProtocolVersion) {
            return backendTcpProxyProtocolVersion(Output.of(backendTcpProxyProtocolVersion));
        }

        /**
         * @param idleTimeoutInSeconds (Updatable) The maximum idle time, in seconds, allowed between two successive receive or two successive send operations between the client and backend servers. A send operation does not reset the timer for receive operations. A receive operation does not reset the timer for send operations.
         * 
         * For more information, see [Connection Configuration](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/connectionreuse.htm#ConnectionConfiguration).
         * 
         * Example: `1200`
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInSeconds(Output<String> idleTimeoutInSeconds) {
            $.idleTimeoutInSeconds = idleTimeoutInSeconds;
            return this;
        }

        /**
         * @param idleTimeoutInSeconds (Updatable) The maximum idle time, in seconds, allowed between two successive receive or two successive send operations between the client and backend servers. A send operation does not reset the timer for receive operations. A receive operation does not reset the timer for send operations.
         * 
         * For more information, see [Connection Configuration](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/connectionreuse.htm#ConnectionConfiguration).
         * 
         * Example: `1200`
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInSeconds(String idleTimeoutInSeconds) {
            return idleTimeoutInSeconds(Output.of(idleTimeoutInSeconds));
        }

        public ListenerConnectionConfigurationArgs build() {
            if ($.idleTimeoutInSeconds == null) {
                throw new MissingRequiredPropertyException("ListenerConnectionConfigurationArgs", "idleTimeoutInSeconds");
            }
            return $;
        }
    }

}
