// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LoadBalancer.inputs.RuleSetItemConditionArgs;
import com.pulumi.oci.LoadBalancer.inputs.RuleSetItemIpMaxConnectionArgs;
import com.pulumi.oci.LoadBalancer.inputs.RuleSetItemRedirectUriArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleSetItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleSetItemArgs Empty = new RuleSetItemArgs();

    /**
     * (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * (Updatable) The list of HTTP methods allowed for this listener.
     * 
     * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
     * 
     * Your backend application must be able to handle the methods specified in this list.
     * 
     * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
     * 
     * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
     * 
     */
    @Import(name="allowedMethods")
    private @Nullable Output<List<String>> allowedMethods;

    /**
     * @return (Updatable) The list of HTTP methods allowed for this listener.
     * 
     * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
     * 
     * Your backend application must be able to handle the methods specified in this list.
     * 
     * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
     * 
     * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
     * 
     */
    public Optional<Output<List<String>>> allowedMethods() {
        return Optional.ofNullable(this.allowedMethods);
    }

    /**
     * (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    @Import(name="areInvalidCharactersAllowed")
    private @Nullable Output<Boolean> areInvalidCharactersAllowed;

    /**
     * @return (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    public Optional<Output<Boolean>> areInvalidCharactersAllowed() {
        return Optional.ofNullable(this.areInvalidCharactersAllowed);
    }

    /**
     * (Updatable)
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<RuleSetItemConditionArgs>> conditions;

    /**
     * @return (Updatable)
     * 
     */
    public Optional<Output<List<RuleSetItemConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    @Import(name="defaultMaxConnections")
    private @Nullable Output<Integer> defaultMaxConnections;

    /**
     * @return (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    public Optional<Output<Integer>> defaultMaxConnections() {
        return Optional.ofNullable(this.defaultMaxConnections);
    }

    /**
     * (Updatable) A brief description of the access control rule. Avoid entering confidential information.
     * 
     * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A brief description of the access control rule. Avoid entering confidential information.
     * 
     * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    @Import(name="header")
    private @Nullable Output<String> header;

    /**
     * @return (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    public Optional<Output<String>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    @Import(name="httpLargeHeaderSizeInKb")
    private @Nullable Output<Integer> httpLargeHeaderSizeInKb;

    /**
     * @return (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    public Optional<Output<Integer>> httpLargeHeaderSizeInKb() {
        return Optional.ofNullable(this.httpLargeHeaderSizeInKb);
    }

    /**
     * (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    @Import(name="ipMaxConnections")
    private @Nullable Output<List<RuleSetItemIpMaxConnectionArgs>> ipMaxConnections;

    /**
     * @return (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    public Optional<Output<List<RuleSetItemIpMaxConnectionArgs>>> ipMaxConnections() {
        return Optional.ofNullable(this.ipMaxConnections);
    }

    /**
     * (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_prefix_value`
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_prefix_value`
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
     * 
     * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
     * 
     * Be sure to configure valid percent-encoding (URL encoding) when needed.
     * 
     * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
     * *  {protocol} : The protocol from the incoming HTTP request URI.
     * *  {host}     : The domain name from the incoming HTTP request URI.
     * *  {port}     : The port from the incoming HTTP request URI.
     * *  {path}     : The path from the incoming HTTP request URI.
     * *  {query}    : The query string from the incoming HTTP request URI.
     * 
     * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
     * 
     * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
     * 
     * `/example{path}123\{path\}`
     * 
     * appears in the constructed redirect URI as:
     * 
     * `/example/video123{path}`
     * 
     */
    @Import(name="redirectUri")
    private @Nullable Output<RuleSetItemRedirectUriArgs> redirectUri;

    /**
     * @return (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
     * 
     * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
     * 
     * Be sure to configure valid percent-encoding (URL encoding) when needed.
     * 
     * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
     * *  {protocol} : The protocol from the incoming HTTP request URI.
     * *  {host}     : The domain name from the incoming HTTP request URI.
     * *  {port}     : The port from the incoming HTTP request URI.
     * *  {path}     : The path from the incoming HTTP request URI.
     * *  {query}    : The query string from the incoming HTTP request URI.
     * 
     * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
     * 
     * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
     * 
     * `/example{path}123\{path\}`
     * 
     * appears in the constructed redirect URI as:
     * 
     * `/example/video123{path}`
     * 
     */
    public Optional<Output<RuleSetItemRedirectUriArgs>> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }

    /**
     * (Updatable) The HTTP status code to return when the incoming request is redirected.
     * 
     * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
     * *  301
     * *  302
     * *  303
     * *  307
     * *  308
     * 
     * The default value is `302` (Found).
     * 
     * Example: `301`
     * 
     */
    @Import(name="responseCode")
    private @Nullable Output<Integer> responseCode;

    /**
     * @return (Updatable) The HTTP status code to return when the incoming request is redirected.
     * 
     * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
     * *  301
     * *  302
     * *  303
     * *  307
     * *  308
     * 
     * The default value is `302` (Found).
     * 
     * Example: `301`
     * 
     */
    public Optional<Output<Integer>> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }

    /**
     * (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    @Import(name="statusCode")
    private @Nullable Output<Integer> statusCode;

    /**
     * @return (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    public Optional<Output<Integer>> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }

    /**
     * (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_suffix_value`
     * 
     */
    @Import(name="suffix")
    private @Nullable Output<String> suffix;

    /**
     * @return (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_suffix_value`
     * 
     */
    public Optional<Output<String>> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    /**
     * (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_value`
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_value`
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private RuleSetItemArgs() {}

    private RuleSetItemArgs(RuleSetItemArgs $) {
        this.action = $.action;
        this.allowedMethods = $.allowedMethods;
        this.areInvalidCharactersAllowed = $.areInvalidCharactersAllowed;
        this.conditions = $.conditions;
        this.defaultMaxConnections = $.defaultMaxConnections;
        this.description = $.description;
        this.header = $.header;
        this.httpLargeHeaderSizeInKb = $.httpLargeHeaderSizeInKb;
        this.ipMaxConnections = $.ipMaxConnections;
        this.prefix = $.prefix;
        this.redirectUri = $.redirectUri;
        this.responseCode = $.responseCode;
        this.statusCode = $.statusCode;
        this.suffix = $.suffix;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleSetItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleSetItemArgs $;

        public Builder() {
            $ = new RuleSetItemArgs();
        }

        public Builder(RuleSetItemArgs defaults) {
            $ = new RuleSetItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param allowedMethods (Updatable) The list of HTTP methods allowed for this listener.
         * 
         * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
         * 
         * Your backend application must be able to handle the methods specified in this list.
         * 
         * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
         * 
         * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(@Nullable Output<List<String>> allowedMethods) {
            $.allowedMethods = allowedMethods;
            return this;
        }

        /**
         * @param allowedMethods (Updatable) The list of HTTP methods allowed for this listener.
         * 
         * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
         * 
         * Your backend application must be able to handle the methods specified in this list.
         * 
         * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
         * 
         * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            return allowedMethods(Output.of(allowedMethods));
        }

        /**
         * @param allowedMethods (Updatable) The list of HTTP methods allowed for this listener.
         * 
         * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
         * 
         * Your backend application must be able to handle the methods specified in this list.
         * 
         * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
         * 
         * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }

        /**
         * @param areInvalidCharactersAllowed (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
         * 
         * @return builder
         * 
         */
        public Builder areInvalidCharactersAllowed(@Nullable Output<Boolean> areInvalidCharactersAllowed) {
            $.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            return this;
        }

        /**
         * @param areInvalidCharactersAllowed (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
         * 
         * @return builder
         * 
         */
        public Builder areInvalidCharactersAllowed(Boolean areInvalidCharactersAllowed) {
            return areInvalidCharactersAllowed(Output.of(areInvalidCharactersAllowed));
        }

        /**
         * @param conditions (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<RuleSetItemConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<RuleSetItemConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder conditions(RuleSetItemConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param defaultMaxConnections (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder defaultMaxConnections(@Nullable Output<Integer> defaultMaxConnections) {
            $.defaultMaxConnections = defaultMaxConnections;
            return this;
        }

        /**
         * @param defaultMaxConnections (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
         * 
         * @return builder
         * 
         */
        public Builder defaultMaxConnections(Integer defaultMaxConnections) {
            return defaultMaxConnections(Output.of(defaultMaxConnections));
        }

        /**
         * @param description (Updatable) A brief description of the access control rule. Avoid entering confidential information.
         * 
         * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A brief description of the access control rule. Avoid entering confidential information.
         * 
         * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param header (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param httpLargeHeaderSizeInKb (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
         * 
         * @return builder
         * 
         */
        public Builder httpLargeHeaderSizeInKb(@Nullable Output<Integer> httpLargeHeaderSizeInKb) {
            $.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            return this;
        }

        /**
         * @param httpLargeHeaderSizeInKb (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
         * 
         * @return builder
         * 
         */
        public Builder httpLargeHeaderSizeInKb(Integer httpLargeHeaderSizeInKb) {
            return httpLargeHeaderSizeInKb(Output.of(httpLargeHeaderSizeInKb));
        }

        /**
         * @param ipMaxConnections (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
         * 
         * @return builder
         * 
         */
        public Builder ipMaxConnections(@Nullable Output<List<RuleSetItemIpMaxConnectionArgs>> ipMaxConnections) {
            $.ipMaxConnections = ipMaxConnections;
            return this;
        }

        /**
         * @param ipMaxConnections (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
         * 
         * @return builder
         * 
         */
        public Builder ipMaxConnections(List<RuleSetItemIpMaxConnectionArgs> ipMaxConnections) {
            return ipMaxConnections(Output.of(ipMaxConnections));
        }

        /**
         * @param ipMaxConnections (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
         * 
         * @return builder
         * 
         */
        public Builder ipMaxConnections(RuleSetItemIpMaxConnectionArgs... ipMaxConnections) {
            return ipMaxConnections(List.of(ipMaxConnections));
        }

        /**
         * @param prefix (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_prefix_value`
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_prefix_value`
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param redirectUri (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
         * 
         * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
         * 
         * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
         * 
         * Be sure to configure valid percent-encoding (URL encoding) when needed.
         * 
         * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
         * *  {protocol} : The protocol from the incoming HTTP request URI.
         * *  {host}     : The domain name from the incoming HTTP request URI.
         * *  {port}     : The port from the incoming HTTP request URI.
         * *  {path}     : The path from the incoming HTTP request URI.
         * *  {query}    : The query string from the incoming HTTP request URI.
         * 
         * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
         * 
         * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
         * 
         * `/example{path}123\{path\}`
         * 
         * appears in the constructed redirect URI as:
         * 
         * `/example/video123{path}`
         * 
         * @return builder
         * 
         */
        public Builder redirectUri(@Nullable Output<RuleSetItemRedirectUriArgs> redirectUri) {
            $.redirectUri = redirectUri;
            return this;
        }

        /**
         * @param redirectUri (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
         * 
         * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
         * 
         * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
         * 
         * Be sure to configure valid percent-encoding (URL encoding) when needed.
         * 
         * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
         * *  {protocol} : The protocol from the incoming HTTP request URI.
         * *  {host}     : The domain name from the incoming HTTP request URI.
         * *  {port}     : The port from the incoming HTTP request URI.
         * *  {path}     : The path from the incoming HTTP request URI.
         * *  {query}    : The query string from the incoming HTTP request URI.
         * 
         * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
         * 
         * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
         * 
         * `/example{path}123\{path\}`
         * 
         * appears in the constructed redirect URI as:
         * 
         * `/example/video123{path}`
         * 
         * @return builder
         * 
         */
        public Builder redirectUri(RuleSetItemRedirectUriArgs redirectUri) {
            return redirectUri(Output.of(redirectUri));
        }

        /**
         * @param responseCode (Updatable) The HTTP status code to return when the incoming request is redirected.
         * 
         * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
         * *  301
         * *  302
         * *  303
         * *  307
         * *  308
         * 
         * The default value is `302` (Found).
         * 
         * Example: `301`
         * 
         * @return builder
         * 
         */
        public Builder responseCode(@Nullable Output<Integer> responseCode) {
            $.responseCode = responseCode;
            return this;
        }

        /**
         * @param responseCode (Updatable) The HTTP status code to return when the incoming request is redirected.
         * 
         * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
         * *  301
         * *  302
         * *  303
         * *  307
         * *  308
         * 
         * The default value is `302` (Found).
         * 
         * Example: `301`
         * 
         * @return builder
         * 
         */
        public Builder responseCode(Integer responseCode) {
            return responseCode(Output.of(responseCode));
        }

        /**
         * @param statusCode (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
         * 
         * @return builder
         * 
         */
        public Builder statusCode(@Nullable Output<Integer> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        /**
         * @param statusCode (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
         * 
         * @return builder
         * 
         */
        public Builder statusCode(Integer statusCode) {
            return statusCode(Output.of(statusCode));
        }

        /**
         * @param suffix (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_suffix_value`
         * 
         * @return builder
         * 
         */
        public Builder suffix(@Nullable Output<String> suffix) {
            $.suffix = suffix;
            return this;
        }

        /**
         * @param suffix (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_suffix_value`
         * 
         * @return builder
         * 
         */
        public Builder suffix(String suffix) {
            return suffix(Output.of(suffix));
        }

        /**
         * @param value (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_value`
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
         * *  value cannot contain `$`
         * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
         * 
         * Example: `example_value`
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public RuleSetItemArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("RuleSetItemArgs", "action");
            }
            return $;
        }
    }

}
