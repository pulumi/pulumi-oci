// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleSetItemRedirectUriArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleSetItemRedirectUriArgs Empty = new RuleSetItemRedirectUriArgs();

    /**
     * (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * Curly braces are valid in this property only to surround tokens, such as `{host}`
     * 
     * Examples:
     * *  **example.com** appears as `example.com` in the redirect URI.
     * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * Curly braces are valid in this property only to surround tokens, such as `{host}`
     * 
     * Examples:
     * *  **example.com** appears as `example.com` in the redirect URI.
     * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * (Updatable) The HTTP URI path to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * The path string must begin with `/` if it does not begin with the `{path}` token.
     * 
     * Examples:
     * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
     * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
     * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
     * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return (Updatable) The HTTP URI path to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * The path string must begin with `/` if it does not begin with the `{path}` token.
     * 
     * Examples:
     * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
     * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
     * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
     * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * (Updatable) The communication port to use in the redirect URI.
     * 
     * Valid values include integers from 1 to 65535.
     * 
     * When this value is null, the service preserves the original port from the incoming HTTP request URI.
     * 
     * Example: `8081`
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The communication port to use in the redirect URI.
     * 
     * Valid values include integers from 1 to 65535.
     * 
     * When this value is null, the service preserves the original port from the incoming HTTP request URI.
     * 
     * Example: `8081`
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) The HTTP protocol to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
     * *  HTTP
     * *  HTTPS
     * *  {protocol}
     * 
     * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
     * 
     * Example: `HTTPS`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Updatable) The HTTP protocol to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
     * *  HTTP
     * *  HTTPS
     * *  {protocol}
     * 
     * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
     * 
     * Example: `HTTPS`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Updatable) The query string to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
     * 
     * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
     * 
     * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
     * 
     * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
     * 
     * Examples:
     * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
     * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
     * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
     * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
     * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return (Updatable) The query string to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
     * 
     * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
     * 
     * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
     * 
     * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
     * 
     * Examples:
     * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
     * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
     * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
     * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
     * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    private RuleSetItemRedirectUriArgs() {}

    private RuleSetItemRedirectUriArgs(RuleSetItemRedirectUriArgs $) {
        this.host = $.host;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleSetItemRedirectUriArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleSetItemRedirectUriArgs $;

        public Builder() {
            $ = new RuleSetItemRedirectUriArgs();
        }

        public Builder(RuleSetItemRedirectUriArgs defaults) {
            $ = new RuleSetItemRedirectUriArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
         * 
         * All RedirectUri tokens are valid for this property. You can use any token more than once.
         * 
         * Curly braces are valid in this property only to surround tokens, such as `{host}`
         * 
         * Examples:
         * *  **example.com** appears as `example.com` in the redirect URI.
         * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
         * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
         * 
         * All RedirectUri tokens are valid for this property. You can use any token more than once.
         * 
         * Curly braces are valid in this property only to surround tokens, such as `{host}`
         * 
         * Examples:
         * *  **example.com** appears as `example.com` in the redirect URI.
         * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
         * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param path (Updatable) The HTTP URI path to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
         * 
         * All RedirectUri tokens are valid for this property. You can use any token more than once.
         * 
         * The path string must begin with `/` if it does not begin with the `{path}` token.
         * 
         * Examples:
         * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
         * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
         * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
         * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
         * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
         * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
         * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Updatable) The HTTP URI path to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
         * 
         * All RedirectUri tokens are valid for this property. You can use any token more than once.
         * 
         * The path string must begin with `/` if it does not begin with the `{path}` token.
         * 
         * Examples:
         * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
         * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
         * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
         * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
         * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
         * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
         * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port (Updatable) The communication port to use in the redirect URI.
         * 
         * Valid values include integers from 1 to 65535.
         * 
         * When this value is null, the service preserves the original port from the incoming HTTP request URI.
         * 
         * Example: `8081`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The communication port to use in the redirect URI.
         * 
         * Valid values include integers from 1 to 65535.
         * 
         * When this value is null, the service preserves the original port from the incoming HTTP request URI.
         * 
         * Example: `8081`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol (Updatable) The HTTP protocol to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
         * *  HTTP
         * *  HTTPS
         * *  {protocol}
         * 
         * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
         * 
         * Example: `HTTPS`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The HTTP protocol to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
         * *  HTTP
         * *  HTTPS
         * *  {protocol}
         * 
         * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
         * 
         * Example: `HTTPS`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param query (Updatable) The query string to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
         * 
         * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
         * 
         * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
         * 
         * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
         * 
         * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
         * 
         * Examples:
         * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
         * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
         * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
         * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
         * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) The query string to use in the redirect URI.
         * 
         * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
         * 
         * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
         * 
         * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
         * 
         * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
         * 
         * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
         * 
         * Examples:
         * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
         * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
         * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
         * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
         * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public RuleSetItemRedirectUriArgs build() {
            return $;
        }
    }

}
