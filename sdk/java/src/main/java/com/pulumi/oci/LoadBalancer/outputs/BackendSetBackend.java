// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendSetBackend {
    /**
     * @return (Updatable) Whether the load balancer should treat this server as a backup unit. If `true`, the load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;backup&#34; fail the health check policy.
     * 
     * **Note:** You cannot add a backend server marked as `backup` to a backend set that uses the IP Hash policy.
     * 
     * Example: `false`
     * 
     */
    private @Nullable Boolean backup;
    /**
     * @return (Updatable) Whether the load balancer should drain this server. Servers marked &#34;drain&#34; receive no new incoming traffic.  Example: `false`
     * 
     */
    private @Nullable Boolean drain;
    /**
     * @return (Updatable) The IP address of the backend server.  Example: `10.0.0.3`
     * 
     */
    private String ipAddress;
    /**
     * @return (Updatable) The maximum number of simultaneous connections the load balancer can make to the backend. If this is not set or set to 0 then the maximum number of simultaneous connections the load balancer can make to the backend is unlimited.
     * 
     * If setting maxConnections to some value other than 0 then that value must be greater or equal to 256.
     * 
     * Example: `300`
     * 
     */
    private @Nullable Integer maxConnections;
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     * Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
     * 
     * Example: `exampleBackendSet`
     * 
     */
    private @Nullable String name;
    /**
     * @return (Updatable) Whether the load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    private @Nullable Boolean offline;
    /**
     * @return (Updatable) The communication port for the backend server.  Example: `8080`
     * 
     */
    private Integer port;
    /**
     * @return (Updatable) The load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives 3 times the number of new connections as a server weighted &#39;1&#39;. For more information on load balancing policies, see [How Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    private @Nullable Integer weight;

    private BackendSetBackend() {}
    /**
     * @return (Updatable) Whether the load balancer should treat this server as a backup unit. If `true`, the load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;backup&#34; fail the health check policy.
     * 
     * **Note:** You cannot add a backend server marked as `backup` to a backend set that uses the IP Hash policy.
     * 
     * Example: `false`
     * 
     */
    public Optional<Boolean> backup() {
        return Optional.ofNullable(this.backup);
    }
    /**
     * @return (Updatable) Whether the load balancer should drain this server. Servers marked &#34;drain&#34; receive no new incoming traffic.  Example: `false`
     * 
     */
    public Optional<Boolean> drain() {
        return Optional.ofNullable(this.drain);
    }
    /**
     * @return (Updatable) The IP address of the backend server.  Example: `10.0.0.3`
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return (Updatable) The maximum number of simultaneous connections the load balancer can make to the backend. If this is not set or set to 0 then the maximum number of simultaneous connections the load balancer can make to the backend is unlimited.
     * 
     * If setting maxConnections to some value other than 0 then that value must be greater or equal to 256.
     * 
     * Example: `300`
     * 
     */
    public Optional<Integer> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     * Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
     * 
     * Example: `exampleBackendSet`
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) Whether the load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    public Optional<Boolean> offline() {
        return Optional.ofNullable(this.offline);
    }
    /**
     * @return (Updatable) The communication port for the backend server.  Example: `8080`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return (Updatable) The load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives 3 times the number of new connections as a server weighted &#39;1&#39;. For more information on load balancing policies, see [How Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendSetBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean backup;
        private @Nullable Boolean drain;
        private String ipAddress;
        private @Nullable Integer maxConnections;
        private @Nullable String name;
        private @Nullable Boolean offline;
        private Integer port;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(BackendSetBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backup = defaults.backup;
    	      this.drain = defaults.drain;
    	      this.ipAddress = defaults.ipAddress;
    	      this.maxConnections = defaults.maxConnections;
    	      this.name = defaults.name;
    	      this.offline = defaults.offline;
    	      this.port = defaults.port;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder backup(@Nullable Boolean backup) {

            this.backup = backup;
            return this;
        }
        @CustomType.Setter
        public Builder drain(@Nullable Boolean drain) {

            this.drain = drain;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("BackendSetBackend", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(@Nullable Integer maxConnections) {

            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder offline(@Nullable Boolean offline) {

            this.offline = offline;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("BackendSetBackend", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {

            this.weight = weight;
            return this;
        }
        public BackendSetBackend build() {
            final var _resultValue = new BackendSetBackend();
            _resultValue.backup = backup;
            _resultValue.drain = drain;
            _resultValue.ipAddress = ipAddress;
            _resultValue.maxConnections = maxConnections;
            _resultValue.name = name;
            _resultValue.offline = offline;
            _resultValue.port = port;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
