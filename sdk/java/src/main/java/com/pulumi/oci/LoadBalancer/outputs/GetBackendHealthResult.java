// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendHealthHealthCheckResult;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendHealthResult {
    private String backendName;
    private String backendSetName;
    /**
     * @return A list of the most recent health check results returned for the specified backend server.
     * 
     */
    private List<GetBackendHealthHealthCheckResult> healthCheckResults;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String loadBalancerId;
    /**
     * @return The general health status of the specified backend server as reported by the primary and standby load balancers.
     * * **OK:** Both health checks returned `OK`.
     * * **WARNING:** One health check returned `OK` and one did not.
     * * **CRITICAL:** Neither health check returned `OK`.
     * * **UNKNOWN:** One or both health checks returned `UNKNOWN`, or the system was unable to retrieve metrics at this time.
     * 
     */
    private String status;

    private GetBackendHealthResult() {}
    public String backendName() {
        return this.backendName;
    }
    public String backendSetName() {
        return this.backendSetName;
    }
    /**
     * @return A list of the most recent health check results returned for the specified backend server.
     * 
     */
    public List<GetBackendHealthHealthCheckResult> healthCheckResults() {
        return this.healthCheckResults;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return The general health status of the specified backend server as reported by the primary and standby load balancers.
     * * **OK:** Both health checks returned `OK`.
     * * **WARNING:** One health check returned `OK` and one did not.
     * * **CRITICAL:** Neither health check returned `OK`.
     * * **UNKNOWN:** One or both health checks returned `UNKNOWN`, or the system was unable to retrieve metrics at this time.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendHealthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendName;
        private String backendSetName;
        private List<GetBackendHealthHealthCheckResult> healthCheckResults;
        private String id;
        private String loadBalancerId;
        private String status;
        public Builder() {}
        public Builder(GetBackendHealthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendName = defaults.backendName;
    	      this.backendSetName = defaults.backendSetName;
    	      this.healthCheckResults = defaults.healthCheckResults;
    	      this.id = defaults.id;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder backendName(String backendName) {
            if (backendName == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "backendName");
            }
            this.backendName = backendName;
            return this;
        }
        @CustomType.Setter
        public Builder backendSetName(String backendSetName) {
            if (backendSetName == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "backendSetName");
            }
            this.backendSetName = backendSetName;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckResults(List<GetBackendHealthHealthCheckResult> healthCheckResults) {
            if (healthCheckResults == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "healthCheckResults");
            }
            this.healthCheckResults = healthCheckResults;
            return this;
        }
        public Builder healthCheckResults(GetBackendHealthHealthCheckResult... healthCheckResults) {
            return healthCheckResults(List.of(healthCheckResults));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetBackendHealthResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetBackendHealthResult build() {
            final var _resultValue = new GetBackendHealthResult();
            _resultValue.backendName = backendName;
            _resultValue.backendSetName = backendSetName;
            _resultValue.healthCheckResults = healthCheckResults;
            _resultValue.id = id;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
