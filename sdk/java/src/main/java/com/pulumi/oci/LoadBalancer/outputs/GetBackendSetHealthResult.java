// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackendSetHealthResult {
    private String backendSetName;
    /**
     * @return A list of backend servers that are currently in the `CRITICAL` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.4:8080`
     * 
     */
    private @Nullable List<String> criticalStateBackendNames;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String loadBalancerId;
    /**
     * @return Overall health status of the backend set.
     * *  **OK:** All backend servers in the backend set return a status of `OK`.
     * *  **WARNING:** Half or more of the backend set&#39;s backend servers return a status of `OK` and at least one backend server returns a status of `WARNING`, `CRITICAL`, or `UNKNOWN`.
     * *  **CRITICAL:** Fewer than half of the backend set&#39;s backend servers return a status of `OK`.
     * *  **UNKNOWN:** More than half of the backend set&#39;s backend servers return a status of `UNKNOWN`, the system was unable to retrieve metrics, or the backend set does not have a listener attached.
     * 
     */
    private @Nullable String status;
    /**
     * @return The total number of backend servers in this backend set.  Example: `7`
     * 
     */
    private @Nullable Integer totalBackendCount;
    /**
     * @return A list of backend servers that are currently in the `UNKNOWN` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.5:8080`
     * 
     */
    private @Nullable List<String> unknownStateBackendNames;
    /**
     * @return A list of backend servers that are currently in the `WARNING` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.3:8080`
     * 
     */
    private @Nullable List<String> warningStateBackendNames;

    private GetBackendSetHealthResult() {}
    public String backendSetName() {
        return this.backendSetName;
    }
    /**
     * @return A list of backend servers that are currently in the `CRITICAL` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.4:8080`
     * 
     */
    public List<String> criticalStateBackendNames() {
        return this.criticalStateBackendNames == null ? List.of() : this.criticalStateBackendNames;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return Overall health status of the backend set.
     * *  **OK:** All backend servers in the backend set return a status of `OK`.
     * *  **WARNING:** Half or more of the backend set&#39;s backend servers return a status of `OK` and at least one backend server returns a status of `WARNING`, `CRITICAL`, or `UNKNOWN`.
     * *  **CRITICAL:** Fewer than half of the backend set&#39;s backend servers return a status of `OK`.
     * *  **UNKNOWN:** More than half of the backend set&#39;s backend servers return a status of `UNKNOWN`, the system was unable to retrieve metrics, or the backend set does not have a listener attached.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The total number of backend servers in this backend set.  Example: `7`
     * 
     */
    public Optional<Integer> totalBackendCount() {
        return Optional.ofNullable(this.totalBackendCount);
    }
    /**
     * @return A list of backend servers that are currently in the `UNKNOWN` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.5:8080`
     * 
     */
    public List<String> unknownStateBackendNames() {
        return this.unknownStateBackendNames == null ? List.of() : this.unknownStateBackendNames;
    }
    /**
     * @return A list of backend servers that are currently in the `WARNING` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.3:8080`
     * 
     */
    public List<String> warningStateBackendNames() {
        return this.warningStateBackendNames == null ? List.of() : this.warningStateBackendNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetHealthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendSetName;
        private @Nullable List<String> criticalStateBackendNames;
        private @Nullable String id;
        private String loadBalancerId;
        private @Nullable String status;
        private @Nullable Integer totalBackendCount;
        private @Nullable List<String> unknownStateBackendNames;
        private @Nullable List<String> warningStateBackendNames;
        public Builder() {}
        public Builder(GetBackendSetHealthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetName = defaults.backendSetName;
    	      this.criticalStateBackendNames = defaults.criticalStateBackendNames;
    	      this.id = defaults.id;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.status = defaults.status;
    	      this.totalBackendCount = defaults.totalBackendCount;
    	      this.unknownStateBackendNames = defaults.unknownStateBackendNames;
    	      this.warningStateBackendNames = defaults.warningStateBackendNames;
        }

        @CustomType.Setter
        public Builder backendSetName(String backendSetName) {
            this.backendSetName = Objects.requireNonNull(backendSetName);
            return this;
        }
        @CustomType.Setter
        public Builder criticalStateBackendNames(@Nullable List<String> criticalStateBackendNames) {
            this.criticalStateBackendNames = criticalStateBackendNames;
            return this;
        }
        public Builder criticalStateBackendNames(String... criticalStateBackendNames) {
            return criticalStateBackendNames(List.of(criticalStateBackendNames));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            this.loadBalancerId = Objects.requireNonNull(loadBalancerId);
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder totalBackendCount(@Nullable Integer totalBackendCount) {
            this.totalBackendCount = totalBackendCount;
            return this;
        }
        @CustomType.Setter
        public Builder unknownStateBackendNames(@Nullable List<String> unknownStateBackendNames) {
            this.unknownStateBackendNames = unknownStateBackendNames;
            return this;
        }
        public Builder unknownStateBackendNames(String... unknownStateBackendNames) {
            return unknownStateBackendNames(List.of(unknownStateBackendNames));
        }
        @CustomType.Setter
        public Builder warningStateBackendNames(@Nullable List<String> warningStateBackendNames) {
            this.warningStateBackendNames = warningStateBackendNames;
            return this;
        }
        public Builder warningStateBackendNames(String... warningStateBackendNames) {
            return warningStateBackendNames(List.of(warningStateBackendNames));
        }
        public GetBackendSetHealthResult build() {
            final var o = new GetBackendSetHealthResult();
            o.backendSetName = backendSetName;
            o.criticalStateBackendNames = criticalStateBackendNames;
            o.id = id;
            o.loadBalancerId = loadBalancerId;
            o.status = status;
            o.totalBackendCount = totalBackendCount;
            o.unknownStateBackendNames = unknownStateBackendNames;
            o.warningStateBackendNames = warningStateBackendNames;
            return o;
        }
    }
}
