// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendSetHealthResult {
    private String backendSetName;
    /**
     * @return A list of backend servers that are currently in the `CRITICAL` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.4:8080`
     * 
     */
    private List<String> criticalStateBackendNames;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String loadBalancerId;
    /**
     * @return Overall health status of the backend set.
     * *  **OK:** All backend servers in the backend set return a status of `OK`.
     * *  **WARNING:** Half or more of the backend set&#39;s backend servers return a status of `OK` and at least one backend server returns a status of `WARNING`, `CRITICAL`, or `UNKNOWN`.
     * *  **CRITICAL:** Fewer than half of the backend set&#39;s backend servers return a status of `OK`.
     * *  **UNKNOWN:** More than half of the backend set&#39;s backend servers return a status of `UNKNOWN`, the system was unable to retrieve metrics, or the backend set does not have a listener attached.
     * 
     */
    private String status;
    /**
     * @return The total number of backend servers in this backend set.  Example: `7`
     * 
     */
    private Integer totalBackendCount;
    /**
     * @return A list of backend servers that are currently in the `UNKNOWN` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.5:8080`
     * 
     */
    private List<String> unknownStateBackendNames;
    /**
     * @return A list of backend servers that are currently in the `WARNING` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.3:8080`
     * 
     */
    private List<String> warningStateBackendNames;

    private GetBackendSetHealthResult() {}
    public String backendSetName() {
        return this.backendSetName;
    }
    /**
     * @return A list of backend servers that are currently in the `CRITICAL` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.4:8080`
     * 
     */
    public List<String> criticalStateBackendNames() {
        return this.criticalStateBackendNames;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return Overall health status of the backend set.
     * *  **OK:** All backend servers in the backend set return a status of `OK`.
     * *  **WARNING:** Half or more of the backend set&#39;s backend servers return a status of `OK` and at least one backend server returns a status of `WARNING`, `CRITICAL`, or `UNKNOWN`.
     * *  **CRITICAL:** Fewer than half of the backend set&#39;s backend servers return a status of `OK`.
     * *  **UNKNOWN:** More than half of the backend set&#39;s backend servers return a status of `UNKNOWN`, the system was unable to retrieve metrics, or the backend set does not have a listener attached.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The total number of backend servers in this backend set.  Example: `7`
     * 
     */
    public Integer totalBackendCount() {
        return this.totalBackendCount;
    }
    /**
     * @return A list of backend servers that are currently in the `UNKNOWN` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.5:8080`
     * 
     */
    public List<String> unknownStateBackendNames() {
        return this.unknownStateBackendNames;
    }
    /**
     * @return A list of backend servers that are currently in the `WARNING` health state. The list identifies each backend server by IP address and port.  Example: `10.0.0.3:8080`
     * 
     */
    public List<String> warningStateBackendNames() {
        return this.warningStateBackendNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetHealthResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendSetName;
        private List<String> criticalStateBackendNames;
        private String id;
        private String loadBalancerId;
        private String status;
        private Integer totalBackendCount;
        private List<String> unknownStateBackendNames;
        private List<String> warningStateBackendNames;
        public Builder() {}
        public Builder(GetBackendSetHealthResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetName = defaults.backendSetName;
    	      this.criticalStateBackendNames = defaults.criticalStateBackendNames;
    	      this.id = defaults.id;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.status = defaults.status;
    	      this.totalBackendCount = defaults.totalBackendCount;
    	      this.unknownStateBackendNames = defaults.unknownStateBackendNames;
    	      this.warningStateBackendNames = defaults.warningStateBackendNames;
        }

        @CustomType.Setter
        public Builder backendSetName(String backendSetName) {
            if (backendSetName == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "backendSetName");
            }
            this.backendSetName = backendSetName;
            return this;
        }
        @CustomType.Setter
        public Builder criticalStateBackendNames(List<String> criticalStateBackendNames) {
            if (criticalStateBackendNames == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "criticalStateBackendNames");
            }
            this.criticalStateBackendNames = criticalStateBackendNames;
            return this;
        }
        public Builder criticalStateBackendNames(String... criticalStateBackendNames) {
            return criticalStateBackendNames(List.of(criticalStateBackendNames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder totalBackendCount(Integer totalBackendCount) {
            if (totalBackendCount == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "totalBackendCount");
            }
            this.totalBackendCount = totalBackendCount;
            return this;
        }
        @CustomType.Setter
        public Builder unknownStateBackendNames(List<String> unknownStateBackendNames) {
            if (unknownStateBackendNames == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "unknownStateBackendNames");
            }
            this.unknownStateBackendNames = unknownStateBackendNames;
            return this;
        }
        public Builder unknownStateBackendNames(String... unknownStateBackendNames) {
            return unknownStateBackendNames(List.of(unknownStateBackendNames));
        }
        @CustomType.Setter
        public Builder warningStateBackendNames(List<String> warningStateBackendNames) {
            if (warningStateBackendNames == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthResult", "warningStateBackendNames");
            }
            this.warningStateBackendNames = warningStateBackendNames;
            return this;
        }
        public Builder warningStateBackendNames(String... warningStateBackendNames) {
            return warningStateBackendNames(List.of(warningStateBackendNames));
        }
        public GetBackendSetHealthResult build() {
            final var _resultValue = new GetBackendSetHealthResult();
            _resultValue.backendSetName = backendSetName;
            _resultValue.criticalStateBackendNames = criticalStateBackendNames;
            _resultValue.id = id;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.status = status;
            _resultValue.totalBackendCount = totalBackendCount;
            _resultValue.unknownStateBackendNames = unknownStateBackendNames;
            _resultValue.warningStateBackendNames = warningStateBackendNames;
            return _resultValue;
        }
    }
}
