// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetBackend;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetHealthChecker;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetSslConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendSetsBackendset {
    /**
     * @return The maximum number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting. If this is not set then the number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting is unlimited.  Example: `300`
     * 
     */
    private Integer backendMaxConnections;
    private List<GetBackendSetsBackendsetBackend> backends;
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    private List<GetBackendSetsBackendsetHealthChecker> healthCheckers;
    private String id;
    /**
     * @return The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    private List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the backend sets to retrieve.
     * 
     */
    private String loadBalancerId;
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    private String name;
    /**
     * @return The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    private String policy;
    /**
     * @return The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    private List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations;
    /**
     * @return A listener&#39;s SSL handling configuration.
     * 
     */
    private List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations;
    private String state;

    private GetBackendSetsBackendset() {}
    /**
     * @return The maximum number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting. If this is not set then the number of simultaneous connections the load balancer can make to any backend in the backend set unless the backend has its own maxConnections setting is unlimited.  Example: `300`
     * 
     */
    public Integer backendMaxConnections() {
        return this.backendMaxConnections;
    }
    public List<GetBackendSetsBackendsetBackend> backends() {
        return this.backends;
    }
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    public List<GetBackendSetsBackendsetHealthChecker> healthCheckers() {
        return this.healthCheckers;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    public List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations() {
        return this.lbCookieSessionPersistenceConfigurations;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the backend sets to retrieve.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    public List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations() {
        return this.sessionPersistenceConfigurations;
    }
    /**
     * @return A listener&#39;s SSL handling configuration.
     * 
     */
    public List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations() {
        return this.sslConfigurations;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetsBackendset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer backendMaxConnections;
        private List<GetBackendSetsBackendsetBackend> backends;
        private List<GetBackendSetsBackendsetHealthChecker> healthCheckers;
        private String id;
        private List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations;
        private String loadBalancerId;
        private String name;
        private String policy;
        private List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations;
        private List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations;
        private String state;
        public Builder() {}
        public Builder(GetBackendSetsBackendset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendMaxConnections = defaults.backendMaxConnections;
    	      this.backends = defaults.backends;
    	      this.healthCheckers = defaults.healthCheckers;
    	      this.id = defaults.id;
    	      this.lbCookieSessionPersistenceConfigurations = defaults.lbCookieSessionPersistenceConfigurations;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.sessionPersistenceConfigurations = defaults.sessionPersistenceConfigurations;
    	      this.sslConfigurations = defaults.sslConfigurations;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder backendMaxConnections(Integer backendMaxConnections) {
            if (backendMaxConnections == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "backendMaxConnections");
            }
            this.backendMaxConnections = backendMaxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder backends(List<GetBackendSetsBackendsetBackend> backends) {
            if (backends == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "backends");
            }
            this.backends = backends;
            return this;
        }
        public Builder backends(GetBackendSetsBackendsetBackend... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder healthCheckers(List<GetBackendSetsBackendsetHealthChecker> healthCheckers) {
            if (healthCheckers == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "healthCheckers");
            }
            this.healthCheckers = healthCheckers;
            return this;
        }
        public Builder healthCheckers(GetBackendSetsBackendsetHealthChecker... healthCheckers) {
            return healthCheckers(List.of(healthCheckers));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lbCookieSessionPersistenceConfigurations(List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations) {
            if (lbCookieSessionPersistenceConfigurations == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "lbCookieSessionPersistenceConfigurations");
            }
            this.lbCookieSessionPersistenceConfigurations = lbCookieSessionPersistenceConfigurations;
            return this;
        }
        public Builder lbCookieSessionPersistenceConfigurations(GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration... lbCookieSessionPersistenceConfigurations) {
            return lbCookieSessionPersistenceConfigurations(List.of(lbCookieSessionPersistenceConfigurations));
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPersistenceConfigurations(List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations) {
            if (sessionPersistenceConfigurations == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "sessionPersistenceConfigurations");
            }
            this.sessionPersistenceConfigurations = sessionPersistenceConfigurations;
            return this;
        }
        public Builder sessionPersistenceConfigurations(GetBackendSetsBackendsetSessionPersistenceConfiguration... sessionPersistenceConfigurations) {
            return sessionPersistenceConfigurations(List.of(sessionPersistenceConfigurations));
        }
        @CustomType.Setter
        public Builder sslConfigurations(List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations) {
            if (sslConfigurations == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "sslConfigurations");
            }
            this.sslConfigurations = sslConfigurations;
            return this;
        }
        public Builder sslConfigurations(GetBackendSetsBackendsetSslConfiguration... sslConfigurations) {
            return sslConfigurations(List.of(sslConfigurations));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBackendSetsBackendset", "state");
            }
            this.state = state;
            return this;
        }
        public GetBackendSetsBackendset build() {
            final var _resultValue = new GetBackendSetsBackendset();
            _resultValue.backendMaxConnections = backendMaxConnections;
            _resultValue.backends = backends;
            _resultValue.healthCheckers = healthCheckers;
            _resultValue.id = id;
            _resultValue.lbCookieSessionPersistenceConfigurations = lbCookieSessionPersistenceConfigurations;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.name = name;
            _resultValue.policy = policy;
            _resultValue.sessionPersistenceConfigurations = sessionPersistenceConfigurations;
            _resultValue.sslConfigurations = sslConfigurations;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
