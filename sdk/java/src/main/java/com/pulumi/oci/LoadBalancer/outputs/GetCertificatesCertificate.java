// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificatesCertificate {
    /**
     * @return The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
     * 
     */
    private String caCertificate;
    /**
     * @return A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `exampleCertificateBundle`
     * 
     */
    private String certificateName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the certificate bundles to be listed.
     * 
     */
    private String loadBalancerId;
    private @Nullable String passphrase;
    private String privateKey;
    /**
     * @return The public certificate, in PEM format, that you received from your SSL certificate provider.
     * 
     */
    private String publicCertificate;
    private String state;

    private GetCertificatesCertificate() {}
    /**
     * @return The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
     * 
     */
    public String caCertificate() {
        return this.caCertificate;
    }
    /**
     * @return A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `exampleCertificateBundle`
     * 
     */
    public String certificateName() {
        return this.certificateName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the certificate bundles to be listed.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    public Optional<String> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return The public certificate, in PEM format, that you received from your SSL certificate provider.
     * 
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCertificate;
        private String certificateName;
        private String loadBalancerId;
        private @Nullable String passphrase;
        private String privateKey;
        private String publicCertificate;
        private String state;
        public Builder() {}
        public Builder(GetCertificatesCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.certificateName = defaults.certificateName;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.passphrase = defaults.passphrase;
    	      this.privateKey = defaults.privateKey;
    	      this.publicCertificate = defaults.publicCertificate;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder caCertificate(String caCertificate) {
            if (caCertificate == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "caCertificate");
            }
            this.caCertificate = caCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(String certificateName) {
            if (certificateName == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "certificateName");
            }
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder passphrase(@Nullable String passphrase) {

            this.passphrase = passphrase;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder publicCertificate(String publicCertificate) {
            if (publicCertificate == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "publicCertificate");
            }
            this.publicCertificate = publicCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "state");
            }
            this.state = state;
            return this;
        }
        public GetCertificatesCertificate build() {
            final var _resultValue = new GetCertificatesCertificate();
            _resultValue.caCertificate = caCertificate;
            _resultValue.certificateName = certificateName;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.passphrase = passphrase;
            _resultValue.privateKey = privateKey;
            _resultValue.publicCertificate = publicCertificate;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
