// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LoadBalancer.outputs.GetListenerRulesListenerRuleRuleCondition;
import com.pulumi.oci.LoadBalancer.outputs.GetListenerRulesListenerRuleRuleIpMaxConnection;
import com.pulumi.oci.LoadBalancer.outputs.GetListenerRulesListenerRuleRuleRedirectUri;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListenerRulesListenerRuleRule {
    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    private String action;
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    private List<String> allowedMethods;
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    private Boolean areInvalidCharactersAllowed;
    private List<GetListenerRulesListenerRuleRuleCondition> conditions;
    /**
     * @return The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    private Integer defaultMaxConnections;
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return A header name that conforms to RFC 7230.  Example: `exampleHeaderName`
     * 
     */
    private String header;
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    private Integer httpLargeHeaderSizeInKb;
    /**
     * @return An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    private List<GetListenerRulesListenerRuleRuleIpMaxConnection> ipMaxConnections;
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private String prefix;
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    private List<GetListenerRulesListenerRuleRuleRedirectUri> redirectUris;
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    private Integer responseCode;
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    private Integer statusCode;
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private String suffix;
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private String value;

    private GetListenerRulesListenerRuleRule() {}
    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    public Boolean areInvalidCharactersAllowed() {
        return this.areInvalidCharactersAllowed;
    }
    public List<GetListenerRulesListenerRuleRuleCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    public Integer defaultMaxConnections() {
        return this.defaultMaxConnections;
    }
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A header name that conforms to RFC 7230.  Example: `exampleHeaderName`
     * 
     */
    public String header() {
        return this.header;
    }
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    public Integer httpLargeHeaderSizeInKb() {
        return this.httpLargeHeaderSizeInKb;
    }
    /**
     * @return An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    public List<GetListenerRulesListenerRuleRuleIpMaxConnection> ipMaxConnections() {
        return this.ipMaxConnections;
    }
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    public List<GetListenerRulesListenerRuleRuleRedirectUri> redirectUris() {
        return this.redirectUris;
    }
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    public Integer responseCode() {
        return this.responseCode;
    }
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String suffix() {
        return this.suffix;
    }
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerRulesListenerRuleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<String> allowedMethods;
        private Boolean areInvalidCharactersAllowed;
        private List<GetListenerRulesListenerRuleRuleCondition> conditions;
        private Integer defaultMaxConnections;
        private String description;
        private String header;
        private Integer httpLargeHeaderSizeInKb;
        private List<GetListenerRulesListenerRuleRuleIpMaxConnection> ipMaxConnections;
        private String prefix;
        private List<GetListenerRulesListenerRuleRuleRedirectUri> redirectUris;
        private Integer responseCode;
        private Integer statusCode;
        private String suffix;
        private String value;
        public Builder() {}
        public Builder(GetListenerRulesListenerRuleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.areInvalidCharactersAllowed = defaults.areInvalidCharactersAllowed;
    	      this.conditions = defaults.conditions;
    	      this.defaultMaxConnections = defaults.defaultMaxConnections;
    	      this.description = defaults.description;
    	      this.header = defaults.header;
    	      this.httpLargeHeaderSizeInKb = defaults.httpLargeHeaderSizeInKb;
    	      this.ipMaxConnections = defaults.ipMaxConnections;
    	      this.prefix = defaults.prefix;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseCode = defaults.responseCode;
    	      this.statusCode = defaults.statusCode;
    	      this.suffix = defaults.suffix;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder allowedMethods(List<String> allowedMethods) {
            if (allowedMethods == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "allowedMethods");
            }
            this.allowedMethods = allowedMethods;
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        @CustomType.Setter
        public Builder areInvalidCharactersAllowed(Boolean areInvalidCharactersAllowed) {
            if (areInvalidCharactersAllowed == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "areInvalidCharactersAllowed");
            }
            this.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetListenerRulesListenerRuleRuleCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetListenerRulesListenerRuleRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder defaultMaxConnections(Integer defaultMaxConnections) {
            if (defaultMaxConnections == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "defaultMaxConnections");
            }
            this.defaultMaxConnections = defaultMaxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder header(String header) {
            if (header == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "header");
            }
            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder httpLargeHeaderSizeInKb(Integer httpLargeHeaderSizeInKb) {
            if (httpLargeHeaderSizeInKb == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "httpLargeHeaderSizeInKb");
            }
            this.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            return this;
        }
        @CustomType.Setter
        public Builder ipMaxConnections(List<GetListenerRulesListenerRuleRuleIpMaxConnection> ipMaxConnections) {
            if (ipMaxConnections == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "ipMaxConnections");
            }
            this.ipMaxConnections = ipMaxConnections;
            return this;
        }
        public Builder ipMaxConnections(GetListenerRulesListenerRuleRuleIpMaxConnection... ipMaxConnections) {
            return ipMaxConnections(List.of(ipMaxConnections));
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUris(List<GetListenerRulesListenerRuleRuleRedirectUri> redirectUris) {
            if (redirectUris == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "redirectUris");
            }
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(GetListenerRulesListenerRuleRuleRedirectUri... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder responseCode(Integer responseCode) {
            if (responseCode == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "responseCode");
            }
            this.responseCode = responseCode;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(String suffix) {
            if (suffix == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "suffix");
            }
            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRule", "value");
            }
            this.value = value;
            return this;
        }
        public GetListenerRulesListenerRuleRule build() {
            final var _resultValue = new GetListenerRulesListenerRuleRule();
            _resultValue.action = action;
            _resultValue.allowedMethods = allowedMethods;
            _resultValue.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            _resultValue.conditions = conditions;
            _resultValue.defaultMaxConnections = defaultMaxConnections;
            _resultValue.description = description;
            _resultValue.header = header;
            _resultValue.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            _resultValue.ipMaxConnections = ipMaxConnections;
            _resultValue.prefix = prefix;
            _resultValue.redirectUris = redirectUris;
            _resultValue.responseCode = responseCode;
            _resultValue.statusCode = statusCode;
            _resultValue.suffix = suffix;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
