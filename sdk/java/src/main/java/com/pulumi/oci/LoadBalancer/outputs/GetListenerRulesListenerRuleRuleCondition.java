// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetListenerRulesListenerRuleRuleCondition {
    /**
     * @return The attributeName can be one of these values: `PATH`, `SOURCE_IP_ADDRESS`, `SOURCE_VCN_ID`, `SOURCE_VCN_IP_ADDRESS`
     * 
     */
    private String attributeName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the originating VCN that an incoming packet must match.
     * 
     */
    private String attributeValue;
    /**
     * @return A string that specifies how to compare the PathMatchCondition object&#39;s `attributeValue` string to the incoming URI.
     * *  **EXACT_MATCH** - The incoming URI path must exactly and completely match the `attributeValue` string.
     * *  **FORCE_LONGEST_PREFIX_MATCH** - The system looks for the `attributeValue` string with the best, longest match of the beginning portion of the incoming URI path.
     * *  **PREFIX_MATCH** - The beginning portion of the incoming URI path must exactly match the `attributeValue` string.
     * *  **SUFFIX_MATCH** - The ending portion of the incoming URI path must exactly match the `attributeValue` string.
     * 
     */
    private String operator;

    private GetListenerRulesListenerRuleRuleCondition() {}
    /**
     * @return The attributeName can be one of these values: `PATH`, `SOURCE_IP_ADDRESS`, `SOURCE_VCN_ID`, `SOURCE_VCN_IP_ADDRESS`
     * 
     */
    public String attributeName() {
        return this.attributeName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the originating VCN that an incoming packet must match.
     * 
     */
    public String attributeValue() {
        return this.attributeValue;
    }
    /**
     * @return A string that specifies how to compare the PathMatchCondition object&#39;s `attributeValue` string to the incoming URI.
     * *  **EXACT_MATCH** - The incoming URI path must exactly and completely match the `attributeValue` string.
     * *  **FORCE_LONGEST_PREFIX_MATCH** - The system looks for the `attributeValue` string with the best, longest match of the beginning portion of the incoming URI path.
     * *  **PREFIX_MATCH** - The beginning portion of the incoming URI path must exactly match the `attributeValue` string.
     * *  **SUFFIX_MATCH** - The ending portion of the incoming URI path must exactly match the `attributeValue` string.
     * 
     */
    public String operator() {
        return this.operator;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerRulesListenerRuleRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attributeName;
        private String attributeValue;
        private String operator;
        public Builder() {}
        public Builder(GetListenerRulesListenerRuleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeName = defaults.attributeName;
    	      this.attributeValue = defaults.attributeValue;
    	      this.operator = defaults.operator;
        }

        @CustomType.Setter
        public Builder attributeName(String attributeName) {
            if (attributeName == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRuleCondition", "attributeName");
            }
            this.attributeName = attributeName;
            return this;
        }
        @CustomType.Setter
        public Builder attributeValue(String attributeValue) {
            if (attributeValue == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRuleCondition", "attributeValue");
            }
            this.attributeValue = attributeValue;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetListenerRulesListenerRuleRuleCondition", "operator");
            }
            this.operator = operator;
            return this;
        }
        public GetListenerRulesListenerRuleRuleCondition build() {
            final var _resultValue = new GetListenerRulesListenerRuleRuleCondition();
            _resultValue.attributeName = attributeName;
            _resultValue.attributeValue = attributeValue;
            _resultValue.operator = operator;
            return _resultValue;
        }
    }
}
