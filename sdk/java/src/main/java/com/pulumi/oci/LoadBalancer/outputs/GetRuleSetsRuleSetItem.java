// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LoadBalancer.outputs.GetRuleSetsRuleSetItemCondition;
import com.pulumi.oci.LoadBalancer.outputs.GetRuleSetsRuleSetItemRedirectUri;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRuleSetsRuleSetItem {
    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    private @Nullable String action;
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    private @Nullable List<String> allowedMethods;
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    private @Nullable Boolean areInvalidCharactersAllowed;
    private @Nullable List<GetRuleSetsRuleSetItemCondition> conditions;
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    private @Nullable String description;
    /**
     * @return A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    private @Nullable String header;
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    private @Nullable Integer httpLargeHeaderSizeInKb;
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    private @Nullable List<GetRuleSetsRuleSetItemRedirectUri> redirectUris;
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    private @Nullable Integer responseCode;
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private @Nullable String suffix;
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private @Nullable String value;

    private GetRuleSetsRuleSetItem() {}
    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    public List<String> allowedMethods() {
        return this.allowedMethods == null ? List.of() : this.allowedMethods;
    }
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    public Optional<Boolean> areInvalidCharactersAllowed() {
        return Optional.ofNullable(this.areInvalidCharactersAllowed);
    }
    public List<GetRuleSetsRuleSetItemCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    public Optional<String> header() {
        return Optional.ofNullable(this.header);
    }
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    public Optional<Integer> httpLargeHeaderSizeInKb() {
        return Optional.ofNullable(this.httpLargeHeaderSizeInKb);
    }
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    public List<GetRuleSetsRuleSetItemRedirectUri> redirectUris() {
        return this.redirectUris == null ? List.of() : this.redirectUris;
    }
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    public Optional<Integer> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleSetsRuleSetItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable List<String> allowedMethods;
        private @Nullable Boolean areInvalidCharactersAllowed;
        private @Nullable List<GetRuleSetsRuleSetItemCondition> conditions;
        private @Nullable String description;
        private @Nullable String header;
        private @Nullable Integer httpLargeHeaderSizeInKb;
        private @Nullable String prefix;
        private @Nullable List<GetRuleSetsRuleSetItemRedirectUri> redirectUris;
        private @Nullable Integer responseCode;
        private @Nullable Integer statusCode;
        private @Nullable String suffix;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetRuleSetsRuleSetItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.areInvalidCharactersAllowed = defaults.areInvalidCharactersAllowed;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.header = defaults.header;
    	      this.httpLargeHeaderSizeInKb = defaults.httpLargeHeaderSizeInKb;
    	      this.prefix = defaults.prefix;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseCode = defaults.responseCode;
    	      this.statusCode = defaults.statusCode;
    	      this.suffix = defaults.suffix;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder allowedMethods(@Nullable List<String> allowedMethods) {
            this.allowedMethods = allowedMethods;
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        @CustomType.Setter
        public Builder areInvalidCharactersAllowed(@Nullable Boolean areInvalidCharactersAllowed) {
            this.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(@Nullable List<GetRuleSetsRuleSetItemCondition> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetRuleSetsRuleSetItemCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable String header) {
            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder httpLargeHeaderSizeInKb(@Nullable Integer httpLargeHeaderSizeInKb) {
            this.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUris(@Nullable List<GetRuleSetsRuleSetItemRedirectUri> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(GetRuleSetsRuleSetItemRedirectUri... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder responseCode(@Nullable Integer responseCode) {
            this.responseCode = responseCode;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {
            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        public GetRuleSetsRuleSetItem build() {
            final var o = new GetRuleSetsRuleSetItem();
            o.action = action;
            o.allowedMethods = allowedMethods;
            o.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            o.conditions = conditions;
            o.description = description;
            o.header = header;
            o.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            o.prefix = prefix;
            o.redirectUris = redirectUris;
            o.responseCode = responseCode;
            o.statusCode = statusCode;
            o.suffix = suffix;
            o.value = value;
            return o;
        }
    }
}
