// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerSslConfiguration {
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service certificates. Currently only a single Id may be passed.  Example: `[ocid1.certificate.oc1.us-ashburn-1.amaaaaaaav3bgsaa5o2q7rh5nfmkkukfkogasqhk6af2opufhjlqg7m6jqzq]`
     * 
     */
    private @Nullable List<String> certificateIds;
    /**
     * @return (Updatable) A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `example_certificate_bundle`
     * 
     */
    private @Nullable String certificateName;
    /**
     * @return (Updatable) The name of the cipher suite to use for HTTPS or SSL connections.
     * 
     */
    private @Nullable String cipherSuiteName;
    /**
     * @return (Updatable) A list of SSL protocols the load balancer must support for HTTPS or SSL connections.
     * 
     */
    private @Nullable List<String> protocols;
    /**
     * @return (Updatable) When this attribute is set to ENABLED, the system gives preference to the server ciphers over the client ciphers.
     * 
     */
    private @Nullable String serverOrderPreference;
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service CA or CA bundles for the load balancer to trust.  Example: `[ocid1.cabundle.oc1.us-ashburn-1.amaaaaaaav3bgsaagl4zzyqdop5i2vuwoqewdvauuw34llqa74otq2jdsfyq]`
     * 
     */
    private @Nullable List<String> trustedCertificateAuthorityIds;
    /**
     * @return (Updatable) The maximum depth for peer certificate chain verification.  Example: `3`
     * 
     */
    private @Nullable Integer verifyDepth;
    /**
     * @return (Updatable) Whether the load balancer listener should verify peer certificates.  Example: `true`
     * 
     */
    private @Nullable Boolean verifyPeerCertificate;

    private ListenerSslConfiguration() {}
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service certificates. Currently only a single Id may be passed.  Example: `[ocid1.certificate.oc1.us-ashburn-1.amaaaaaaav3bgsaa5o2q7rh5nfmkkukfkogasqhk6af2opufhjlqg7m6jqzq]`
     * 
     */
    public List<String> certificateIds() {
        return this.certificateIds == null ? List.of() : this.certificateIds;
    }
    /**
     * @return (Updatable) A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `example_certificate_bundle`
     * 
     */
    public Optional<String> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }
    /**
     * @return (Updatable) The name of the cipher suite to use for HTTPS or SSL connections.
     * 
     */
    public Optional<String> cipherSuiteName() {
        return Optional.ofNullable(this.cipherSuiteName);
    }
    /**
     * @return (Updatable) A list of SSL protocols the load balancer must support for HTTPS or SSL connections.
     * 
     */
    public List<String> protocols() {
        return this.protocols == null ? List.of() : this.protocols;
    }
    /**
     * @return (Updatable) When this attribute is set to ENABLED, the system gives preference to the server ciphers over the client ciphers.
     * 
     */
    public Optional<String> serverOrderPreference() {
        return Optional.ofNullable(this.serverOrderPreference);
    }
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service CA or CA bundles for the load balancer to trust.  Example: `[ocid1.cabundle.oc1.us-ashburn-1.amaaaaaaav3bgsaagl4zzyqdop5i2vuwoqewdvauuw34llqa74otq2jdsfyq]`
     * 
     */
    public List<String> trustedCertificateAuthorityIds() {
        return this.trustedCertificateAuthorityIds == null ? List.of() : this.trustedCertificateAuthorityIds;
    }
    /**
     * @return (Updatable) The maximum depth for peer certificate chain verification.  Example: `3`
     * 
     */
    public Optional<Integer> verifyDepth() {
        return Optional.ofNullable(this.verifyDepth);
    }
    /**
     * @return (Updatable) Whether the load balancer listener should verify peer certificates.  Example: `true`
     * 
     */
    public Optional<Boolean> verifyPeerCertificate() {
        return Optional.ofNullable(this.verifyPeerCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerSslConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> certificateIds;
        private @Nullable String certificateName;
        private @Nullable String cipherSuiteName;
        private @Nullable List<String> protocols;
        private @Nullable String serverOrderPreference;
        private @Nullable List<String> trustedCertificateAuthorityIds;
        private @Nullable Integer verifyDepth;
        private @Nullable Boolean verifyPeerCertificate;
        public Builder() {}
        public Builder(ListenerSslConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateIds = defaults.certificateIds;
    	      this.certificateName = defaults.certificateName;
    	      this.cipherSuiteName = defaults.cipherSuiteName;
    	      this.protocols = defaults.protocols;
    	      this.serverOrderPreference = defaults.serverOrderPreference;
    	      this.trustedCertificateAuthorityIds = defaults.trustedCertificateAuthorityIds;
    	      this.verifyDepth = defaults.verifyDepth;
    	      this.verifyPeerCertificate = defaults.verifyPeerCertificate;
        }

        @CustomType.Setter
        public Builder certificateIds(@Nullable List<String> certificateIds) {
            this.certificateIds = certificateIds;
            return this;
        }
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }
        @CustomType.Setter
        public Builder certificateName(@Nullable String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder cipherSuiteName(@Nullable String cipherSuiteName) {
            this.cipherSuiteName = cipherSuiteName;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(@Nullable List<String> protocols) {
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder serverOrderPreference(@Nullable String serverOrderPreference) {
            this.serverOrderPreference = serverOrderPreference;
            return this;
        }
        @CustomType.Setter
        public Builder trustedCertificateAuthorityIds(@Nullable List<String> trustedCertificateAuthorityIds) {
            this.trustedCertificateAuthorityIds = trustedCertificateAuthorityIds;
            return this;
        }
        public Builder trustedCertificateAuthorityIds(String... trustedCertificateAuthorityIds) {
            return trustedCertificateAuthorityIds(List.of(trustedCertificateAuthorityIds));
        }
        @CustomType.Setter
        public Builder verifyDepth(@Nullable Integer verifyDepth) {
            this.verifyDepth = verifyDepth;
            return this;
        }
        @CustomType.Setter
        public Builder verifyPeerCertificate(@Nullable Boolean verifyPeerCertificate) {
            this.verifyPeerCertificate = verifyPeerCertificate;
            return this;
        }
        public ListenerSslConfiguration build() {
            final var o = new ListenerSslConfiguration();
            o.certificateIds = certificateIds;
            o.certificateName = certificateName;
            o.cipherSuiteName = cipherSuiteName;
            o.protocols = protocols;
            o.serverOrderPreference = serverOrderPreference;
            o.trustedCertificateAuthorityIds = trustedCertificateAuthorityIds;
            o.verifyDepth = verifyDepth;
            o.verifyPeerCertificate = verifyPeerCertificate;
            return o;
        }
    }
}
