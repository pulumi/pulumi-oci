// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LoadBalancer.outputs.RuleSetItemCondition;
import com.pulumi.oci.LoadBalancer.outputs.RuleSetItemIpMaxConnection;
import com.pulumi.oci.LoadBalancer.outputs.RuleSetItemRedirectUri;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleSetItem {
    /**
     * @return (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    private String action;
    /**
     * @return (Updatable) The list of HTTP methods allowed for this listener.
     * 
     * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
     * 
     * Your backend application must be able to handle the methods specified in this list.
     * 
     * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
     * 
     * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
     * 
     */
    private @Nullable List<String> allowedMethods;
    /**
     * @return (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    private @Nullable Boolean areInvalidCharactersAllowed;
    /**
     * @return (Updatable)
     * 
     */
    private @Nullable List<RuleSetItemCondition> conditions;
    /**
     * @return (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    private @Nullable Integer defaultMaxConnections;
    /**
     * @return (Updatable) A brief description of the access control rule. Avoid entering confidential information.
     * 
     * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    private @Nullable String header;
    /**
     * @return (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    private @Nullable Integer httpLargeHeaderSizeInKb;
    /**
     * @return (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    private @Nullable List<RuleSetItemIpMaxConnection> ipMaxConnections;
    /**
     * @return (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_prefix_value`
     * 
     */
    private @Nullable String prefix;
    /**
     * @return (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
     * 
     * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
     * 
     * Be sure to configure valid percent-encoding (URL encoding) when needed.
     * 
     * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
     * * {protocol} : The protocol from the incoming HTTP request URI.
     * * {host}     : The domain name from the incoming HTTP request URI.
     * * {port}     : The port from the incoming HTTP request URI.
     * * {path}     : The path from the incoming HTTP request URI.
     * * {query}    : The query string from the incoming HTTP request URI.
     * 
     * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
     * 
     * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
     * 
     * `/example{path}123\{path\}`
     * 
     * appears in the constructed redirect URI as:
     * 
     * `/example/video123{path}`
     * 
     */
    private @Nullable RuleSetItemRedirectUri redirectUri;
    /**
     * @return (Updatable) The HTTP status code to return when the incoming request is redirected.
     * 
     * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
     * * 301
     * * 302
     * * 303
     * * 307
     * * 308
     * 
     * The default value is `302` (Found).
     * 
     * Example: `301`
     * 
     */
    private @Nullable Integer responseCode;
    /**
     * @return (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_suffix_value`
     * 
     */
    private @Nullable String suffix;
    /**
     * @return (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_value`
     * 
     */
    private @Nullable String value;

    private RuleSetItem() {}
    /**
     * @return (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return (Updatable) The list of HTTP methods allowed for this listener.
     * 
     * By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
     * 
     * Your backend application must be able to handle the methods specified in this list.
     * 
     * The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
     * 
     * Example: [&#34;GET&#34;, &#34;PUT&#34;, &#34;POST&#34;, &#34;PROPFIND&#34;]
     * 
     */
    public List<String> allowedMethods() {
        return this.allowedMethods == null ? List.of() : this.allowedMethods;
    }
    /**
     * @return (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    public Optional<Boolean> areInvalidCharactersAllowed() {
        return Optional.ofNullable(this.areInvalidCharactersAllowed);
    }
    /**
     * @return (Updatable)
     * 
     */
    public List<RuleSetItemCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
     * 
     */
    public Optional<Integer> defaultMaxConnections() {
        return Optional.ofNullable(this.defaultMaxConnections);
    }
    /**
     * @return (Updatable) A brief description of the access control rule. Avoid entering confidential information.
     * 
     * example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    public Optional<String> header() {
        return Optional.ofNullable(this.header);
    }
    /**
     * @return (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    public Optional<Integer> httpLargeHeaderSizeInKb() {
        return Optional.ofNullable(this.httpLargeHeaderSizeInKb);
    }
    /**
     * @return (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
     * 
     */
    public List<RuleSetItemIpMaxConnection> ipMaxConnections() {
        return this.ipMaxConnections == null ? List.of() : this.ipMaxConnections;
    }
    /**
     * @return (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_prefix_value`
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     * **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
     * 
     * For example, if you specify only the protocol field `https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
     * 
     * Be sure to configure valid percent-encoding (URL encoding) when needed.
     * 
     * In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
     * * {protocol} : The protocol from the incoming HTTP request URI.
     * * {host}     : The domain name from the incoming HTTP request URI.
     * * {port}     : The port from the incoming HTTP request URI.
     * * {path}     : The path from the incoming HTTP request URI.
     * * {query}    : The query string from the incoming HTTP request URI.
     * 
     * The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
     * 
     * You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
     * 
     * `/example{path}123\{path\}`
     * 
     * appears in the constructed redirect URI as:
     * 
     * `/example/video123{path}`
     * 
     */
    public Optional<RuleSetItemRedirectUri> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }
    /**
     * @return (Updatable) The HTTP status code to return when the incoming request is redirected.
     * 
     * The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
     * * 301
     * * 302
     * * 303
     * * 307
     * * 308
     * 
     * The default value is `302` (Found).
     * 
     * Example: `301`
     * 
     */
    public Optional<Integer> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }
    /**
     * @return (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_suffix_value`
     * 
     */
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }
    /**
     * @return (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
     * * value cannot contain `$`
     * * value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     * Example: `example_value`
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleSetItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable List<String> allowedMethods;
        private @Nullable Boolean areInvalidCharactersAllowed;
        private @Nullable List<RuleSetItemCondition> conditions;
        private @Nullable Integer defaultMaxConnections;
        private @Nullable String description;
        private @Nullable String header;
        private @Nullable Integer httpLargeHeaderSizeInKb;
        private @Nullable List<RuleSetItemIpMaxConnection> ipMaxConnections;
        private @Nullable String prefix;
        private @Nullable RuleSetItemRedirectUri redirectUri;
        private @Nullable Integer responseCode;
        private @Nullable Integer statusCode;
        private @Nullable String suffix;
        private @Nullable String value;
        public Builder() {}
        public Builder(RuleSetItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.areInvalidCharactersAllowed = defaults.areInvalidCharactersAllowed;
    	      this.conditions = defaults.conditions;
    	      this.defaultMaxConnections = defaults.defaultMaxConnections;
    	      this.description = defaults.description;
    	      this.header = defaults.header;
    	      this.httpLargeHeaderSizeInKb = defaults.httpLargeHeaderSizeInKb;
    	      this.ipMaxConnections = defaults.ipMaxConnections;
    	      this.prefix = defaults.prefix;
    	      this.redirectUri = defaults.redirectUri;
    	      this.responseCode = defaults.responseCode;
    	      this.statusCode = defaults.statusCode;
    	      this.suffix = defaults.suffix;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("RuleSetItem", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder allowedMethods(@Nullable List<String> allowedMethods) {

            this.allowedMethods = allowedMethods;
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        @CustomType.Setter
        public Builder areInvalidCharactersAllowed(@Nullable Boolean areInvalidCharactersAllowed) {

            this.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(@Nullable List<RuleSetItemCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(RuleSetItemCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder defaultMaxConnections(@Nullable Integer defaultMaxConnections) {

            this.defaultMaxConnections = defaultMaxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable String header) {

            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder httpLargeHeaderSizeInKb(@Nullable Integer httpLargeHeaderSizeInKb) {

            this.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            return this;
        }
        @CustomType.Setter
        public Builder ipMaxConnections(@Nullable List<RuleSetItemIpMaxConnection> ipMaxConnections) {

            this.ipMaxConnections = ipMaxConnections;
            return this;
        }
        public Builder ipMaxConnections(RuleSetItemIpMaxConnection... ipMaxConnections) {
            return ipMaxConnections(List.of(ipMaxConnections));
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUri(@Nullable RuleSetItemRedirectUri redirectUri) {

            this.redirectUri = redirectUri;
            return this;
        }
        @CustomType.Setter
        public Builder responseCode(@Nullable Integer responseCode) {

            this.responseCode = responseCode;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {

            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {

            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        public RuleSetItem build() {
            final var _resultValue = new RuleSetItem();
            _resultValue.action = action;
            _resultValue.allowedMethods = allowedMethods;
            _resultValue.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
            _resultValue.conditions = conditions;
            _resultValue.defaultMaxConnections = defaultMaxConnections;
            _resultValue.description = description;
            _resultValue.header = header;
            _resultValue.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
            _resultValue.ipMaxConnections = ipMaxConnections;
            _resultValue.prefix = prefix;
            _resultValue.redirectUri = redirectUri;
            _resultValue.responseCode = responseCode;
            _resultValue.statusCode = statusCode;
            _resultValue.suffix = suffix;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
