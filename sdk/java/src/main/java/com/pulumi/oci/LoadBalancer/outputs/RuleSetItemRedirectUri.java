// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleSetItemRedirectUri {
    /**
     * @return (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * Curly braces are valid in this property only to surround tokens, such as `{host}`
     * 
     * Examples:
     * *  **example.com** appears as `example.com` in the redirect URI.
     * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
     * 
     */
    private @Nullable String host;
    /**
     * @return (Updatable) The HTTP URI path to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * The path string must begin with `/` if it does not begin with the `{path}` token.
     * 
     * Examples:
     * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
     * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
     * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
     * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
     * 
     */
    private @Nullable String path;
    /**
     * @return (Updatable) The communication port to use in the redirect URI.
     * 
     * Valid values include integers from 1 to 65535.
     * 
     * When this value is null, the service preserves the original port from the incoming HTTP request URI.
     * 
     * Example: `8081`
     * 
     */
    private @Nullable Integer port;
    /**
     * @return (Updatable) The HTTP protocol to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
     * *  HTTP
     * *  HTTPS
     * *  {protocol}
     * 
     * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
     * 
     * Example: `HTTPS`
     * 
     */
    private @Nullable String protocol;
    /**
     * @return (Updatable) The query string to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
     * 
     * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
     * 
     * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
     * 
     * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
     * 
     * Examples:
     * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
     * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
     * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
     * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
     * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
     * 
     */
    private @Nullable String query;

    private RuleSetItemRedirectUri() {}
    /**
     * @return (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{host}`, the service preserves the original domain name from the incoming HTTP request URI.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * Curly braces are valid in this property only to surround tokens, such as `{host}`
     * 
     * Examples:
     * *  **example.com** appears as `example.com` in the redirect URI.
     * *  **in{host}** appears as `inexample.com` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  **{port}{host}** appears as `8081example.com` in the redirect URI if `example.com` is the hostname and the port is `8081` in the incoming HTTP request URI.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return (Updatable) The HTTP URI path to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{path}`, the service preserves the original path from the incoming HTTP request URI. To omit the path from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * All RedirectUri tokens are valid for this property. You can use any token more than once.
     * 
     * The path string must begin with `/` if it does not begin with the `{path}` token.
     * 
     * Examples:
     * *  __/example/video/123__ appears as `/example/video/123` in the redirect URI.
     * *  __/example{path}__ appears as `/example/video/123` in the redirect URI if `/video/123` is the path in the incoming HTTP request URI.
     * *  __{path}/123__ appears as `/example/video/123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __{path}123__ appears as `/example/video123` in the redirect URI if `/example/video` is the path in the incoming HTTP request URI.
     * *  __/{host}/123__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname in the incoming HTTP request URI.
     * *  __/{host}/{port}__ appears as `/example.com/123` in the redirect URI if `example.com` is the hostname and `123` is the port in the incoming HTTP request URI.
     * *  __/{query}__ appears as `/lang=en` in the redirect URI if the query is `lang=en` in the incoming HTTP request URI.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return (Updatable) The communication port to use in the redirect URI.
     * 
     * Valid values include integers from 1 to 65535.
     * 
     * When this value is null, the service preserves the original port from the incoming HTTP request URI.
     * 
     * Example: `8081`
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return (Updatable) The HTTP protocol to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{protocol}`, the service preserves the original protocol from the incoming HTTP request URI. Allowed values are:
     * *  HTTP
     * *  HTTPS
     * *  {protocol}
     * 
     * `{protocol}` is the only valid token for this property. It can appear only once in the value string.
     * 
     * Example: `HTTPS`
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return (Updatable) The query string to use in the redirect URI.
     * 
     * When this value is null, not set, or set to `{query}`, the service preserves the original query parameters from the incoming HTTP request URI.
     * 
     * All `RedirectUri` tokens are valid for this property. You can use any token more than once.
     * 
     * If the query string does not begin with the `{query}` token, it must begin with the question mark (?) character.
     * 
     * You can specify multiple query parameters as a single string. Separate each query parameter with an ampersand (&amp;) character. To omit all incoming query parameters from the redirect URI, set this value to an empty string, &#34;&#34;.
     * 
     * If the specified query string results in a redirect URI ending with `?` or `&amp;`, the last character is truncated. For example, if the incoming URI is `http://host.com:8080/documents` and the query property value is `?lang=en&amp;{query}`, the redirect URI is `http://host.com:8080/documents?lang=en`. The system truncates the final ampersand (&amp;) because the incoming URI included no value to replace the {query} token.
     * 
     * Examples:
     * * **lang=en&amp;time_zone=PST** appears as `lang=en&amp;time_zone=PST` in the redirect URI.
     * * **{query}** appears as `lang=en&amp;time_zone=PST` in the redirect URI if `lang=en&amp;time_zone=PST` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, the `{query}` token renders as an empty string.
     * * **lang=en&amp;{query}&amp;time_zone=PST** appears as `lang=en&amp;country=us&amp;time_zone=PST` in the redirect URI if `country=us` is the query string in the incoming HTTP request. If the incoming HTTP request has no query parameters, this value renders as `lang=en&amp;time_zone=PST`.
     * *  **protocol={protocol}&amp;hostname={host}** appears as `protocol=http&amp;hostname=example.com` in the redirect URI if the protocol is `HTTP` and the hostname is `example.com` in the incoming HTTP request.
     * *  **port={port}&amp;hostname={host}** appears as `port=8080&amp;hostname=example.com` in the redirect URI if the port is `8080` and the hostname is `example.com` in the incoming HTTP request URI.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleSetItemRedirectUri defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String host;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable String protocol;
        private @Nullable String query;
        public Builder() {}
        public Builder(RuleSetItemRedirectUri defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.query = defaults.query;
        }

        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {
            this.query = query;
            return this;
        }
        public RuleSetItemRedirectUri build() {
            final var _resultValue = new RuleSetItemRedirectUri();
            _resultValue.host = host;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.query = query;
            return _resultValue;
        }
    }
}
