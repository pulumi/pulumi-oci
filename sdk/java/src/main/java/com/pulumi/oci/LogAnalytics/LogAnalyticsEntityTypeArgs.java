// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.LogAnalyticsEntityTypePropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogAnalyticsEntityTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsEntityTypeArgs Empty = new LogAnalyticsEntityTypeArgs();

    /**
     * Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Log analytics entity type name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Log analytics entity type name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Log analytics entity type property definition.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<LogAnalyticsEntityTypePropertyArgs>> properties;

    /**
     * @return Log analytics entity type property definition.
     * 
     */
    public Optional<Output<List<LogAnalyticsEntityTypePropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    private LogAnalyticsEntityTypeArgs() {}

    private LogAnalyticsEntityTypeArgs(LogAnalyticsEntityTypeArgs $) {
        this.category = $.category;
        this.name = $.name;
        this.namespace = $.namespace;
        this.properties = $.properties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsEntityTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsEntityTypeArgs $;

        public Builder() {
            $ = new LogAnalyticsEntityTypeArgs();
        }

        public Builder(LogAnalyticsEntityTypeArgs defaults) {
            $ = new LogAnalyticsEntityTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Log analytics entity type category. Category will be used for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Log analytics entity type category. Category will be used for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param name Log analytics entity type name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Log analytics entity type name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<LogAnalyticsEntityTypePropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(List<LogAnalyticsEntityTypePropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(LogAnalyticsEntityTypePropertyArgs... properties) {
            return properties(List.of(properties));
        }

        public LogAnalyticsEntityTypeArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("LogAnalyticsEntityTypeArgs", "namespace");
            }
            return $;
        }
    }

}
