// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.LogAnalytics.NamespaceLookupArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupState;
import com.pulumi.oci.LogAnalytics.outputs.NamespaceLookupCategory;
import com.pulumi.oci.LogAnalytics.outputs.NamespaceLookupField;
import com.pulumi.oci.LogAnalytics.outputs.NamespaceLookupReferringSource;
import com.pulumi.oci.LogAnalytics.outputs.NamespaceLookupStatusSummary;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Namespace Lookup resource in Oracle Cloud Infrastructure Log Analytics service.
 * 
 * Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.LogAnalytics.NamespaceLookup;
 * import com.pulumi.oci.LogAnalytics.NamespaceLookupArgs;
 * import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupCategoryArgs;
 * import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupFieldArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testNamespaceLookup = new NamespaceLookup("testNamespaceLookup", NamespaceLookupArgs.builder()
 *             .lookupName(namespaceLookupLookupName)
 *             .namespace(namespaceLookupNamespace)
 *             .registerLookupFile(namespaceLookupRegisterLookupFile)
 *             .type(namespaceLookupType)
 *             .categories(NamespaceLookupCategoryArgs.builder()
 *                 .description(namespaceLookupCategoriesDescription)
 *                 .displayName(namespaceLookupCategoriesDisplayName)
 *                 .isSystem(namespaceLookupCategoriesIsSystem)
 *                 .name(namespaceLookupCategoriesName)
 *                 .type(namespaceLookupCategoriesType)
 *                 .build())
 *             .charEncoding(namespaceLookupCharEncoding)
 *             .compartmentId(namespaceLookupCompartmentId)
 *             .defaultMatchValue(namespaceLookupDefaultMatchValue)
 *             .definedTags(Map.of("foo-namespace.bar-key", "value"))
 *             .description(namespaceLookupDescription)
 *             .fields(NamespaceLookupFieldArgs.builder()
 *                 .commonFieldName(namespaceLookupFieldsCommonFieldName)
 *                 .defaultMatchValue(namespaceLookupFieldsDefaultMatchValue)
 *                 .displayName(namespaceLookupFieldsDisplayName)
 *                 .isCommonField(namespaceLookupFieldsIsCommonField)
 *                 .matchOperator(namespaceLookupFieldsMatchOperator)
 *                 .name(namespaceLookupFieldsName)
 *                 .position(namespaceLookupFieldsPosition)
 *                 .build())
 *             .freeformTags(Map.of("bar-key", "value"))
 *             .isHidden(namespaceLookupIsHidden)
 *             .maxMatches(namespaceLookupMaxMatches)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * NamespaceLookups can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:LogAnalytics/namespaceLookup:NamespaceLookup test_namespace_lookup &#34;namespaces/{namespaceName}/lookups/{lookupName}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:LogAnalytics/namespaceLookup:NamespaceLookup")
public class NamespaceLookup extends com.pulumi.resources.CustomResource {
    /**
     * The active edit version.
     * 
     */
    @Export(name="activeEditVersion", refs={String.class}, tree="[0]")
    private Output<String> activeEditVersion;

    /**
     * @return The active edit version.
     * 
     */
    public Output<String> activeEditVersion() {
        return this.activeEditVersion;
    }
    /**
     * The canonical link.
     * 
     */
    @Export(name="canonicalLink", refs={String.class}, tree="[0]")
    private Output<String> canonicalLink;

    /**
     * @return The canonical link.
     * 
     */
    public Output<String> canonicalLink() {
        return this.canonicalLink;
    }
    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    @Export(name="categories", refs={List.class,NamespaceLookupCategory.class}, tree="[0,1]")
    private Output<List<NamespaceLookupCategory>> categories;

    /**
     * @return (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    public Output<List<NamespaceLookupCategory>> categories() {
        return this.categories;
    }
    /**
     * The character encoding of the uploaded file.
     * 
     */
    @Export(name="charEncoding", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> charEncoding;

    /**
     * @return The character encoding of the uploaded file.
     * 
     */
    public Output<Optional<String>> charEncoding() {
        return Codegen.optional(this.charEncoding);
    }
    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) The default match value.
     * 
     */
    @Export(name="defaultMatchValue", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultMatchValue;

    /**
     * @return (Updatable) The default match value.
     * 
     */
    public Output<Optional<String>> defaultMatchValue() {
        return Codegen.optional(this.defaultMatchValue);
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,String>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) The lookup description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return (Updatable) The lookup description.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The edit version.
     * 
     */
    @Export(name="editVersion", refs={String.class}, tree="[0]")
    private Output<String> editVersion;

    /**
     * @return The edit version.
     * 
     */
    public Output<String> editVersion() {
        return this.editVersion;
    }
    /**
     * (Updatable) The lookup fields.
     * 
     */
    @Export(name="fields", refs={List.class,NamespaceLookupField.class}, tree="[0,1]")
    private Output<List<NamespaceLookupField>> fields;

    /**
     * @return (Updatable) The lookup fields.
     * 
     */
    public Output<List<NamespaceLookupField>> fields() {
        return this.fields;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,String>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    @Export(name="isBuiltIn", refs={String.class}, tree="[0]")
    private Output<String> isBuiltIn;

    /**
     * @return A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    public Output<String> isBuiltIn() {
        return this.isBuiltIn;
    }
    /**
     * A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    @Export(name="isHidden", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isHidden;

    /**
     * @return A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    public Output<Boolean> isHidden() {
        return this.isHidden;
    }
    /**
     * The lookup display name.
     * 
     */
    @Export(name="lookupDisplayName", refs={String.class}, tree="[0]")
    private Output<String> lookupDisplayName;

    /**
     * @return The lookup display name.
     * 
     */
    public Output<String> lookupDisplayName() {
        return this.lookupDisplayName;
    }
    /**
     * The lookup OCID.
     * 
     */
    @Export(name="lookupId", refs={String.class}, tree="[0]")
    private Output<String> lookupId;

    /**
     * @return The lookup OCID.
     * 
     */
    public Output<String> lookupId() {
        return this.lookupId;
    }
    /**
     * The name of the lookup to operate on.
     * 
     */
    @Export(name="lookupName", refs={String.class}, tree="[0]")
    private Output<String> lookupName;

    /**
     * @return The name of the lookup to operate on.
     * 
     */
    public Output<String> lookupName() {
        return this.lookupName;
    }
    /**
     * The lookup reference as an integer.
     * 
     */
    @Export(name="lookupReference", refs={String.class}, tree="[0]")
    private Output<String> lookupReference;

    /**
     * @return The lookup reference as an integer.
     * 
     */
    public Output<String> lookupReference() {
        return this.lookupReference;
    }
    /**
     * The lookup reference as a string.
     * 
     */
    @Export(name="lookupReferenceString", refs={String.class}, tree="[0]")
    private Output<String> lookupReferenceString;

    /**
     * @return The lookup reference as a string.
     * 
     */
    public Output<String> lookupReferenceString() {
        return this.lookupReferenceString;
    }
    /**
     * (Updatable) The maximum number of matches.
     * 
     */
    @Export(name="maxMatches", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maxMatches;

    /**
     * @return (Updatable) The maximum number of matches.
     * 
     */
    public Output<Optional<String>> maxMatches() {
        return Codegen.optional(this.maxMatches);
    }
    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }
    /**
     * AutoLookups
     * 
     */
    @Export(name="referringSources", refs={List.class,NamespaceLookupReferringSource.class}, tree="[0,1]")
    private Output<List<NamespaceLookupReferringSource>> referringSources;

    /**
     * @return AutoLookups
     * 
     */
    public Output<List<NamespaceLookupReferringSource>> referringSources() {
        return this.referringSources;
    }
    /**
     * Path to the file containing data for lookup creation.
     * 
     */
    @Export(name="registerLookupFile", refs={String.class}, tree="[0]")
    private Output<String> registerLookupFile;

    /**
     * @return Path to the file containing data for lookup creation.
     * 
     */
    public Output<String> registerLookupFile() {
        return this.registerLookupFile;
    }
    /**
     * StatusSummary
     * 
     */
    @Export(name="statusSummaries", refs={List.class,NamespaceLookupStatusSummary.class}, tree="[0,1]")
    private Output<List<NamespaceLookupStatusSummary>> statusSummaries;

    /**
     * @return StatusSummary
     * 
     */
    public Output<List<NamespaceLookupStatusSummary>> statusSummaries() {
        return this.statusSummaries;
    }
    /**
     * The last updated date.
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeUpdated;

    /**
     * @return The last updated date.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NamespaceLookup(java.lang.String name) {
        this(name, NamespaceLookupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NamespaceLookup(java.lang.String name, NamespaceLookupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NamespaceLookup(java.lang.String name, NamespaceLookupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NamespaceLookup(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceLookupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, state, makeResourceOptions(options, id), false);
    }

    private static NamespaceLookupArgs makeArgs(NamespaceLookupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NamespaceLookupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NamespaceLookup get(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceLookupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NamespaceLookup(name, id, state, options);
    }
}
