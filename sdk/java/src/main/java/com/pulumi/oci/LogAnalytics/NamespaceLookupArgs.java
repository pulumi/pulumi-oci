// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupCategoryArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceLookupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceLookupArgs Empty = new NamespaceLookupArgs();

    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<NamespaceLookupCategoryArgs>> categories;

    /**
     * @return (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    public Optional<Output<List<NamespaceLookupCategoryArgs>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * The character encoding of the uploaded file.
     * 
     */
    @Import(name="charEncoding")
    private @Nullable Output<String> charEncoding;

    /**
     * @return The character encoding of the uploaded file.
     * 
     */
    public Optional<Output<String>> charEncoding() {
        return Optional.ofNullable(this.charEncoding);
    }

    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The default match value.
     * 
     */
    @Import(name="defaultMatchValue")
    private @Nullable Output<String> defaultMatchValue;

    /**
     * @return (Updatable) The default match value.
     * 
     */
    public Optional<Output<String>> defaultMatchValue() {
        return Optional.ofNullable(this.defaultMatchValue);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The lookup description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The lookup description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The lookup fields.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<NamespaceLookupFieldArgs>> fields;

    /**
     * @return (Updatable) The lookup fields.
     * 
     */
    public Optional<Output<List<NamespaceLookupFieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    @Import(name="isHidden")
    private @Nullable Output<Boolean> isHidden;

    /**
     * @return A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    public Optional<Output<Boolean>> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }

    /**
     * The name of the lookup to operate on.
     * 
     */
    @Import(name="lookupName", required=true)
    private Output<String> lookupName;

    /**
     * @return The name of the lookup to operate on.
     * 
     */
    public Output<String> lookupName() {
        return this.lookupName;
    }

    /**
     * (Updatable) The maximum number of matches.
     * 
     */
    @Import(name="maxMatches")
    private @Nullable Output<String> maxMatches;

    /**
     * @return (Updatable) The maximum number of matches.
     * 
     */
    public Optional<Output<String>> maxMatches() {
        return Optional.ofNullable(this.maxMatches);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * Path to the file containing data for lookup creation.
     * 
     */
    @Import(name="registerLookupFile", required=true)
    private Output<String> registerLookupFile;

    /**
     * @return Path to the file containing data for lookup creation.
     * 
     */
    public Output<String> registerLookupFile() {
        return this.registerLookupFile;
    }

    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NamespaceLookupArgs() {}

    private NamespaceLookupArgs(NamespaceLookupArgs $) {
        this.categories = $.categories;
        this.charEncoding = $.charEncoding;
        this.compartmentId = $.compartmentId;
        this.defaultMatchValue = $.defaultMatchValue;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.fields = $.fields;
        this.freeformTags = $.freeformTags;
        this.isHidden = $.isHidden;
        this.lookupName = $.lookupName;
        this.maxMatches = $.maxMatches;
        this.namespace = $.namespace;
        this.registerLookupFile = $.registerLookupFile;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceLookupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceLookupArgs $;

        public Builder() {
            $ = new NamespaceLookupArgs();
        }

        public Builder(NamespaceLookupArgs defaults) {
            $ = new NamespaceLookupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<NamespaceLookupCategoryArgs>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<NamespaceLookupCategoryArgs> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(NamespaceLookupCategoryArgs... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(@Nullable Output<String> charEncoding) {
            $.charEncoding = charEncoding;
            return this;
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(String charEncoding) {
            return charEncoding(Output.of(charEncoding));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(@Nullable Output<String> defaultMatchValue) {
            $.defaultMatchValue = defaultMatchValue;
            return this;
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(String defaultMatchValue) {
            return defaultMatchValue(Output.of(defaultMatchValue));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The lookup description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The lookup description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<NamespaceLookupFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<NamespaceLookupFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(NamespaceLookupFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isHidden A flag indicating whether or not the new lookup should be hidden.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(@Nullable Output<Boolean> isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        /**
         * @param isHidden A flag indicating whether or not the new lookup should be hidden.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Boolean isHidden) {
            return isHidden(Output.of(isHidden));
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(Output<String> lookupName) {
            $.lookupName = lookupName;
            return this;
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(String lookupName) {
            return lookupName(Output.of(lookupName));
        }

        /**
         * @param maxMatches (Updatable) The maximum number of matches.
         * 
         * @return builder
         * 
         */
        public Builder maxMatches(@Nullable Output<String> maxMatches) {
            $.maxMatches = maxMatches;
            return this;
        }

        /**
         * @param maxMatches (Updatable) The maximum number of matches.
         * 
         * @return builder
         * 
         */
        public Builder maxMatches(String maxMatches) {
            return maxMatches(Output.of(maxMatches));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param registerLookupFile Path to the file containing data for lookup creation.
         * 
         * @return builder
         * 
         */
        public Builder registerLookupFile(Output<String> registerLookupFile) {
            $.registerLookupFile = registerLookupFile;
            return this;
        }

        /**
         * @param registerLookupFile Path to the file containing data for lookup creation.
         * 
         * @return builder
         * 
         */
        public Builder registerLookupFile(String registerLookupFile) {
            return registerLookupFile(Output.of(registerLookupFile));
        }

        /**
         * @param type The lookup type. Valid values are Lookup, Dictionary or Module.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The lookup type. Valid values are Lookup, Dictionary or Module.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NamespaceLookupArgs build() {
            if ($.lookupName == null) {
                throw new MissingRequiredPropertyException("NamespaceLookupArgs", "lookupName");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("NamespaceLookupArgs", "namespace");
            }
            if ($.registerLookupFile == null) {
                throw new MissingRequiredPropertyException("NamespaceLookupArgs", "registerLookupFile");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NamespaceLookupArgs", "type");
            }
            return $;
        }
    }

}
