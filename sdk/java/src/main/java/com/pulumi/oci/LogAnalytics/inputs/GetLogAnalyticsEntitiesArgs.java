// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntitiesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntitiesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntitiesArgs Empty = new GetLogAnalyticsEntitiesArgs();

    /**
     * A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    @Import(name="cloudResourceId")
    private @Nullable Output<String> cloudResourceId;

    /**
     * @return A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    public Optional<Output<String>> cloudResourceId() {
        return Optional.ofNullable(this.cloudResourceId);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagEquals")
    private @Nullable Output<List<String>> definedTagEquals;

    /**
     * @return A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<Output<List<String>>> definedTagEquals() {
        return Optional.ofNullable(this.definedTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagExists")
    private @Nullable Output<List<String>> definedTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<Output<List<String>>> definedTagExists() {
        return Optional.ofNullable(this.definedTagExists);
    }

    /**
     * A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    @Import(name="entityTypeNames")
    private @Nullable Output<List<String>> entityTypeNames;

    /**
     * @return A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> entityTypeNames() {
        return Optional.ofNullable(this.entityTypeNames);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetLogAnalyticsEntitiesFilterArgs>> filters;

    public Optional<Output<List<GetLogAnalyticsEntitiesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagEquals")
    private @Nullable Output<List<String>> freeformTagEquals;

    /**
     * @return A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<Output<List<String>>> freeformTagEquals() {
        return Optional.ofNullable(this.freeformTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagExists")
    private @Nullable Output<List<String>> freeformTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<Output<List<String>>> freeformTagExists() {
        return Optional.ofNullable(this.freeformTagExists);
    }

    /**
     * A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    @Import(name="hostnameContains")
    private @Nullable Output<String> hostnameContains;

    /**
     * @return A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    public Optional<Output<String>> hostnameContains() {
        return Optional.ofNullable(this.hostnameContains);
    }

    /**
     * A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    @Import(name="isManagementAgentIdNull")
    private @Nullable Output<String> isManagementAgentIdNull;

    /**
     * @return A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    public Optional<Output<String>> isManagementAgentIdNull() {
        return Optional.ofNullable(this.isManagementAgentIdNull);
    }

    /**
     * Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    @Import(name="isShowAssociatedSourcesCount")
    private @Nullable Output<Boolean> isShowAssociatedSourcesCount;

    /**
     * @return Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    public Optional<Output<Boolean>> isShowAssociatedSourcesCount() {
        return Optional.ofNullable(this.isShowAssociatedSourcesCount);
    }

    /**
     * A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    @Import(name="lifecycleDetailsContains")
    private @Nullable Output<String> lifecycleDetailsContains;

    /**
     * @return A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    public Optional<Output<String>> lifecycleDetailsContains() {
        return Optional.ofNullable(this.lifecycleDetailsContains);
    }

    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    @Import(name="metadataEquals")
    private @Nullable Output<List<String>> metadataEquals;

    /**
     * @return A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> metadataEquals() {
        return Optional.ofNullable(this.metadataEquals);
    }

    /**
     * A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    @Import(name="nameContains")
    private @Nullable Output<String> nameContains;

    /**
     * @return A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    public Optional<Output<String>> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    /**
     * @return A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetLogAnalyticsEntitiesArgs() {}

    private GetLogAnalyticsEntitiesArgs(GetLogAnalyticsEntitiesArgs $) {
        this.cloudResourceId = $.cloudResourceId;
        this.compartmentId = $.compartmentId;
        this.definedTagEquals = $.definedTagEquals;
        this.definedTagExists = $.definedTagExists;
        this.entityTypeNames = $.entityTypeNames;
        this.filters = $.filters;
        this.freeformTagEquals = $.freeformTagEquals;
        this.freeformTagExists = $.freeformTagExists;
        this.hostname = $.hostname;
        this.hostnameContains = $.hostnameContains;
        this.isManagementAgentIdNull = $.isManagementAgentIdNull;
        this.isShowAssociatedSourcesCount = $.isShowAssociatedSourcesCount;
        this.lifecycleDetailsContains = $.lifecycleDetailsContains;
        this.metadataEquals = $.metadataEquals;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.namespace = $.namespace;
        this.sourceId = $.sourceId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntitiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntitiesArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntitiesArgs();
        }

        public Builder(GetLogAnalyticsEntitiesArgs defaults) {
            $ = new GetLogAnalyticsEntitiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudResourceId A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
         * 
         * @return builder
         * 
         */
        public Builder cloudResourceId(@Nullable Output<String> cloudResourceId) {
            $.cloudResourceId = cloudResourceId;
            return this;
        }

        /**
         * @param cloudResourceId A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
         * 
         * @return builder
         * 
         */
        public Builder cloudResourceId(String cloudResourceId) {
            return cloudResourceId(Output.of(cloudResourceId));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(@Nullable Output<List<String>> definedTagEquals) {
            $.definedTagEquals = definedTagEquals;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(List<String> definedTagEquals) {
            return definedTagEquals(Output.of(definedTagEquals));
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(String... definedTagEquals) {
            return definedTagEquals(List.of(definedTagEquals));
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(@Nullable Output<List<String>> definedTagExists) {
            $.definedTagExists = definedTagExists;
            return this;
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(List<String> definedTagExists) {
            return definedTagExists(Output.of(definedTagExists));
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(String... definedTagExists) {
            return definedTagExists(List.of(definedTagExists));
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(@Nullable Output<List<String>> entityTypeNames) {
            $.entityTypeNames = entityTypeNames;
            return this;
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(List<String> entityTypeNames) {
            return entityTypeNames(Output.of(entityTypeNames));
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(String... entityTypeNames) {
            return entityTypeNames(List.of(entityTypeNames));
        }

        public Builder filters(@Nullable Output<List<GetLogAnalyticsEntitiesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetLogAnalyticsEntitiesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetLogAnalyticsEntitiesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(@Nullable Output<List<String>> freeformTagEquals) {
            $.freeformTagEquals = freeformTagEquals;
            return this;
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(List<String> freeformTagEquals) {
            return freeformTagEquals(Output.of(freeformTagEquals));
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(String... freeformTagEquals) {
            return freeformTagEquals(List.of(freeformTagEquals));
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(@Nullable Output<List<String>> freeformTagExists) {
            $.freeformTagExists = freeformTagExists;
            return this;
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(List<String> freeformTagExists) {
            return freeformTagExists(Output.of(freeformTagExists));
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(String... freeformTagExists) {
            return freeformTagExists(List.of(freeformTagExists));
        }

        /**
         * @param hostname A filter to return only log analytics entities whose hostname matches the entire hostname given.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname A filter to return only log analytics entities whose hostname matches the entire hostname given.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnameContains A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostnameContains(@Nullable Output<String> hostnameContains) {
            $.hostnameContains = hostnameContains;
            return this;
        }

        /**
         * @param hostnameContains A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostnameContains(String hostnameContains) {
            return hostnameContains(Output.of(hostnameContains));
        }

        /**
         * @param isManagementAgentIdNull A filter to return only those log analytics entities whose managementAgentId is null or is not null.
         * 
         * @return builder
         * 
         */
        public Builder isManagementAgentIdNull(@Nullable Output<String> isManagementAgentIdNull) {
            $.isManagementAgentIdNull = isManagementAgentIdNull;
            return this;
        }

        /**
         * @param isManagementAgentIdNull A filter to return only those log analytics entities whose managementAgentId is null or is not null.
         * 
         * @return builder
         * 
         */
        public Builder isManagementAgentIdNull(String isManagementAgentIdNull) {
            return isManagementAgentIdNull(Output.of(isManagementAgentIdNull));
        }

        /**
         * @param isShowAssociatedSourcesCount Option to return count of associated log sources for log analytics entity(s).
         * 
         * @return builder
         * 
         */
        public Builder isShowAssociatedSourcesCount(@Nullable Output<Boolean> isShowAssociatedSourcesCount) {
            $.isShowAssociatedSourcesCount = isShowAssociatedSourcesCount;
            return this;
        }

        /**
         * @param isShowAssociatedSourcesCount Option to return count of associated log sources for log analytics entity(s).
         * 
         * @return builder
         * 
         */
        public Builder isShowAssociatedSourcesCount(Boolean isShowAssociatedSourcesCount) {
            return isShowAssociatedSourcesCount(Output.of(isShowAssociatedSourcesCount));
        }

        /**
         * @param lifecycleDetailsContains A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetailsContains(@Nullable Output<String> lifecycleDetailsContains) {
            $.lifecycleDetailsContains = lifecycleDetailsContains;
            return this;
        }

        /**
         * @param lifecycleDetailsContains A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetailsContains(String lifecycleDetailsContains) {
            return lifecycleDetailsContains(Output.of(lifecycleDetailsContains));
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(@Nullable Output<List<String>> metadataEquals) {
            $.metadataEquals = metadataEquals;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(List<String> metadataEquals) {
            return metadataEquals(Output.of(metadataEquals));
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(String... metadataEquals) {
            return metadataEquals(List.of(metadataEquals));
        }

        /**
         * @param name A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameContains A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable Output<String> nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param nameContains A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(String nameContains) {
            return nameContains(Output.of(nameContains));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param sourceId A filter to return only log analytics entities whose sourceId matches the sourceId given.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId A filter to return only log analytics entities whose sourceId matches the sourceId given.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetLogAnalyticsEntitiesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntitiesArgs", "compartmentId");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntitiesArgs", "namespace");
            }
            return $;
        }
    }

}
