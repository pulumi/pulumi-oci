// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntitiesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntitiesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntitiesPlainArgs Empty = new GetLogAnalyticsEntitiesPlainArgs();

    /**
     * A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    @Import(name="cloudResourceId")
    private @Nullable String cloudResourceId;

    /**
     * @return A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    public Optional<String> cloudResourceId() {
        return Optional.ofNullable(this.cloudResourceId);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagEquals")
    private @Nullable List<String> definedTagEquals;

    /**
     * @return A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> definedTagEquals() {
        return Optional.ofNullable(this.definedTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagExists")
    private @Nullable List<String> definedTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> definedTagExists() {
        return Optional.ofNullable(this.definedTagExists);
    }

    /**
     * A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    @Import(name="entityTypeNames")
    private @Nullable List<String> entityTypeNames;

    /**
     * @return A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    public Optional<List<String>> entityTypeNames() {
        return Optional.ofNullable(this.entityTypeNames);
    }

    @Import(name="filters")
    private @Nullable List<GetLogAnalyticsEntitiesFilter> filters;

    public Optional<List<GetLogAnalyticsEntitiesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagEquals")
    private @Nullable List<String> freeformTagEquals;

    /**
     * @return A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> freeformTagEquals() {
        return Optional.ofNullable(this.freeformTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagExists")
    private @Nullable List<String> freeformTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> freeformTagExists() {
        return Optional.ofNullable(this.freeformTagExists);
    }

    /**
     * A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    @Import(name="hostname")
    private @Nullable String hostname;

    /**
     * @return A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    @Import(name="hostnameContains")
    private @Nullable String hostnameContains;

    /**
     * @return A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    public Optional<String> hostnameContains() {
        return Optional.ofNullable(this.hostnameContains);
    }

    /**
     * A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    @Import(name="isManagementAgentIdNull")
    private @Nullable String isManagementAgentIdNull;

    /**
     * @return A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    public Optional<String> isManagementAgentIdNull() {
        return Optional.ofNullable(this.isManagementAgentIdNull);
    }

    /**
     * Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    @Import(name="isShowAssociatedSourcesCount")
    private @Nullable Boolean isShowAssociatedSourcesCount;

    /**
     * @return Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    public Optional<Boolean> isShowAssociatedSourcesCount() {
        return Optional.ofNullable(this.isShowAssociatedSourcesCount);
    }

    /**
     * A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    @Import(name="lifecycleDetailsContains")
    private @Nullable String lifecycleDetailsContains;

    /**
     * @return A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    public Optional<String> lifecycleDetailsContains() {
        return Optional.ofNullable(this.lifecycleDetailsContains);
    }

    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    @Import(name="metadataEquals")
    private @Nullable List<String> metadataEquals;

    /**
     * @return A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    public Optional<List<String>> metadataEquals() {
        return Optional.ofNullable(this.metadataEquals);
    }

    /**
     * A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    @Import(name="nameContains")
    private @Nullable String nameContains;

    /**
     * @return A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    public Optional<String> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    @Import(name="sourceId")
    private @Nullable String sourceId;

    /**
     * @return A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    public Optional<String> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetLogAnalyticsEntitiesPlainArgs() {}

    private GetLogAnalyticsEntitiesPlainArgs(GetLogAnalyticsEntitiesPlainArgs $) {
        this.cloudResourceId = $.cloudResourceId;
        this.compartmentId = $.compartmentId;
        this.definedTagEquals = $.definedTagEquals;
        this.definedTagExists = $.definedTagExists;
        this.entityTypeNames = $.entityTypeNames;
        this.filters = $.filters;
        this.freeformTagEquals = $.freeformTagEquals;
        this.freeformTagExists = $.freeformTagExists;
        this.hostname = $.hostname;
        this.hostnameContains = $.hostnameContains;
        this.isManagementAgentIdNull = $.isManagementAgentIdNull;
        this.isShowAssociatedSourcesCount = $.isShowAssociatedSourcesCount;
        this.lifecycleDetailsContains = $.lifecycleDetailsContains;
        this.metadataEquals = $.metadataEquals;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.namespace = $.namespace;
        this.sourceId = $.sourceId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntitiesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntitiesPlainArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntitiesPlainArgs();
        }

        public Builder(GetLogAnalyticsEntitiesPlainArgs defaults) {
            $ = new GetLogAnalyticsEntitiesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudResourceId A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
         * 
         * @return builder
         * 
         */
        public Builder cloudResourceId(@Nullable String cloudResourceId) {
            $.cloudResourceId = cloudResourceId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(@Nullable List<String> definedTagEquals) {
            $.definedTagEquals = definedTagEquals;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only entities with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(String... definedTagEquals) {
            return definedTagEquals(List.of(definedTagEquals));
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(@Nullable List<String> definedTagExists) {
            $.definedTagExists = definedTagExists;
            return this;
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only entities for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(String... definedTagExists) {
            return definedTagExists(List.of(definedTagExists));
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(@Nullable List<String> entityTypeNames) {
            $.entityTypeNames = entityTypeNames;
            return this;
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(String... entityTypeNames) {
            return entityTypeNames(List.of(entityTypeNames));
        }

        public Builder filters(@Nullable List<GetLogAnalyticsEntitiesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetLogAnalyticsEntitiesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(@Nullable List<String> freeformTagEquals) {
            $.freeformTagEquals = freeformTagEquals;
            return this;
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only entities with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(String... freeformTagEquals) {
            return freeformTagEquals(List.of(freeformTagEquals));
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(@Nullable List<String> freeformTagExists) {
            $.freeformTagExists = freeformTagExists;
            return this;
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only entities for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(String... freeformTagExists) {
            return freeformTagExists(List.of(freeformTagExists));
        }

        /**
         * @param hostname A filter to return only log analytics entities whose hostname matches the entire hostname given.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable String hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostnameContains A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostnameContains(@Nullable String hostnameContains) {
            $.hostnameContains = hostnameContains;
            return this;
        }

        /**
         * @param isManagementAgentIdNull A filter to return only those log analytics entities whose managementAgentId is null or is not null.
         * 
         * @return builder
         * 
         */
        public Builder isManagementAgentIdNull(@Nullable String isManagementAgentIdNull) {
            $.isManagementAgentIdNull = isManagementAgentIdNull;
            return this;
        }

        /**
         * @param isShowAssociatedSourcesCount Option to return count of associated log sources for log analytics entity(s).
         * 
         * @return builder
         * 
         */
        public Builder isShowAssociatedSourcesCount(@Nullable Boolean isShowAssociatedSourcesCount) {
            $.isShowAssociatedSourcesCount = isShowAssociatedSourcesCount;
            return this;
        }

        /**
         * @param lifecycleDetailsContains A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetailsContains(@Nullable String lifecycleDetailsContains) {
            $.lifecycleDetailsContains = lifecycleDetailsContains;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(@Nullable List<String> metadataEquals) {
            $.metadataEquals = metadataEquals;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(String... metadataEquals) {
            return metadataEquals(List.of(metadataEquals));
        }

        /**
         * @param name A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameContains A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable String nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param sourceId A filter to return only log analytics entities whose sourceId matches the sourceId given.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable String sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetLogAnalyticsEntitiesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntitiesPlainArgs", "compartmentId");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntitiesPlainArgs", "namespace");
            }
            return $;
        }
    }

}
