// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntityPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntityPlainArgs Empty = new GetLogAnalyticsEntityPlainArgs();

    /**
     * Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    @Import(name="isShowAssociatedSourcesCount")
    private @Nullable String isShowAssociatedSourcesCount;

    /**
     * @return Option to return count of associated log sources for log analytics entity(s).
     * 
     */
    public Optional<String> isShowAssociatedSourcesCount() {
        return Optional.ofNullable(this.isShowAssociatedSourcesCount);
    }

    /**
     * The log analytics entity OCID.
     * 
     */
    @Import(name="logAnalyticsEntityId", required=true)
    private String logAnalyticsEntityId;

    /**
     * @return The log analytics entity OCID.
     * 
     */
    public String logAnalyticsEntityId() {
        return this.logAnalyticsEntityId;
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    private GetLogAnalyticsEntityPlainArgs() {}

    private GetLogAnalyticsEntityPlainArgs(GetLogAnalyticsEntityPlainArgs $) {
        this.isShowAssociatedSourcesCount = $.isShowAssociatedSourcesCount;
        this.logAnalyticsEntityId = $.logAnalyticsEntityId;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntityPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntityPlainArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntityPlainArgs();
        }

        public Builder(GetLogAnalyticsEntityPlainArgs defaults) {
            $ = new GetLogAnalyticsEntityPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isShowAssociatedSourcesCount Option to return count of associated log sources for log analytics entity(s).
         * 
         * @return builder
         * 
         */
        public Builder isShowAssociatedSourcesCount(@Nullable String isShowAssociatedSourcesCount) {
            $.isShowAssociatedSourcesCount = isShowAssociatedSourcesCount;
            return this;
        }

        /**
         * @param logAnalyticsEntityId The log analytics entity OCID.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsEntityId(String logAnalyticsEntityId) {
            $.logAnalyticsEntityId = logAnalyticsEntityId;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        public GetLogAnalyticsEntityPlainArgs build() {
            if ($.logAnalyticsEntityId == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityPlainArgs", "logAnalyticsEntityId");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityPlainArgs", "namespace");
            }
            return $;
        }
    }

}
