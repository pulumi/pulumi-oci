// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntityTopologyFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntityTopologyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntityTopologyArgs Empty = new GetLogAnalyticsEntityTopologyArgs();

    /**
     * A filter to return log analytics entity toplogy whose context matches the specified string.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return A filter to return log analytics entity toplogy whose context matches the specified string.
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetLogAnalyticsEntityTopologyFilterArgs>> filters;

    public Optional<Output<List<GetLogAnalyticsEntityTopologyFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The log analytics entity OCID.
     * 
     */
    @Import(name="logAnalyticsEntityId", required=true)
    private Output<String> logAnalyticsEntityId;

    /**
     * @return The log analytics entity OCID.
     * 
     */
    public Output<String> logAnalyticsEntityId() {
        return this.logAnalyticsEntityId;
    }

    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    @Import(name="metadataEquals")
    private @Nullable Output<List<String>> metadataEquals;

    /**
     * @return A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    public Optional<Output<List<String>>> metadataEquals() {
        return Optional.ofNullable(this.metadataEquals);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetLogAnalyticsEntityTopologyArgs() {}

    private GetLogAnalyticsEntityTopologyArgs(GetLogAnalyticsEntityTopologyArgs $) {
        this.context = $.context;
        this.filters = $.filters;
        this.logAnalyticsEntityId = $.logAnalyticsEntityId;
        this.metadataEquals = $.metadataEquals;
        this.namespace = $.namespace;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntityTopologyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntityTopologyArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntityTopologyArgs();
        }

        public Builder(GetLogAnalyticsEntityTopologyArgs defaults) {
            $ = new GetLogAnalyticsEntityTopologyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context A filter to return log analytics entity toplogy whose context matches the specified string.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context A filter to return log analytics entity toplogy whose context matches the specified string.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        public Builder filters(@Nullable Output<List<GetLogAnalyticsEntityTopologyFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetLogAnalyticsEntityTopologyFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetLogAnalyticsEntityTopologyFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param logAnalyticsEntityId The log analytics entity OCID.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsEntityId(Output<String> logAnalyticsEntityId) {
            $.logAnalyticsEntityId = logAnalyticsEntityId;
            return this;
        }

        /**
         * @param logAnalyticsEntityId The log analytics entity OCID.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsEntityId(String logAnalyticsEntityId) {
            return logAnalyticsEntityId(Output.of(logAnalyticsEntityId));
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(@Nullable Output<List<String>> metadataEquals) {
            $.metadataEquals = metadataEquals;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(List<String> metadataEquals) {
            return metadataEquals(Output.of(metadataEquals));
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(String... metadataEquals) {
            return metadataEquals(List.of(metadataEquals));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetLogAnalyticsEntityTopologyArgs build() {
            if ($.logAnalyticsEntityId == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTopologyArgs", "logAnalyticsEntityId");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTopologyArgs", "namespace");
            }
            return $;
        }
    }

}
