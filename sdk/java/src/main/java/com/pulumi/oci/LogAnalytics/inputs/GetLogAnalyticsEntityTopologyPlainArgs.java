// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntityTopologyFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntityTopologyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntityTopologyPlainArgs Empty = new GetLogAnalyticsEntityTopologyPlainArgs();

    /**
     * A filter to return log analytics entity toplogy whose context matches the specified string.
     * 
     */
    @Import(name="context")
    private @Nullable String context;

    /**
     * @return A filter to return log analytics entity toplogy whose context matches the specified string.
     * 
     */
    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }

    @Import(name="filters")
    private @Nullable List<GetLogAnalyticsEntityTopologyFilter> filters;

    public Optional<List<GetLogAnalyticsEntityTopologyFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The log analytics entity OCID.
     * 
     */
    @Import(name="logAnalyticsEntityId", required=true)
    private String logAnalyticsEntityId;

    /**
     * @return The log analytics entity OCID.
     * 
     */
    public String logAnalyticsEntityId() {
        return this.logAnalyticsEntityId;
    }

    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    @Import(name="metadataEquals")
    private @Nullable List<String> metadataEquals;

    /**
     * @return A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
     * 
     */
    public Optional<List<String>> metadataEquals() {
        return Optional.ofNullable(this.metadataEquals);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetLogAnalyticsEntityTopologyPlainArgs() {}

    private GetLogAnalyticsEntityTopologyPlainArgs(GetLogAnalyticsEntityTopologyPlainArgs $) {
        this.context = $.context;
        this.filters = $.filters;
        this.logAnalyticsEntityId = $.logAnalyticsEntityId;
        this.metadataEquals = $.metadataEquals;
        this.namespace = $.namespace;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntityTopologyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntityTopologyPlainArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntityTopologyPlainArgs();
        }

        public Builder(GetLogAnalyticsEntityTopologyPlainArgs defaults) {
            $ = new GetLogAnalyticsEntityTopologyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context A filter to return log analytics entity toplogy whose context matches the specified string.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable String context) {
            $.context = context;
            return this;
        }

        public Builder filters(@Nullable List<GetLogAnalyticsEntityTopologyFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetLogAnalyticsEntityTopologyFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param logAnalyticsEntityId The log analytics entity OCID.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsEntityId(String logAnalyticsEntityId) {
            $.logAnalyticsEntityId = logAnalyticsEntityId;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(@Nullable List<String> metadataEquals) {
            $.metadataEquals = metadataEquals;
            return this;
        }

        /**
         * @param metadataEquals A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format &#34;{name}:{value}:{type}&#34;.  All inputs are case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder metadataEquals(String... metadataEquals) {
            return metadataEquals(List.of(metadataEquals));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetLogAnalyticsEntityTopologyPlainArgs build() {
            if ($.logAnalyticsEntityId == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTopologyPlainArgs", "logAnalyticsEntityId");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTopologyPlainArgs", "namespace");
            }
            return $;
        }
    }

}
