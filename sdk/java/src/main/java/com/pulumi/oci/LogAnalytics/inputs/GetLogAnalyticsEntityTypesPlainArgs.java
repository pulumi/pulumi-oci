// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntityTypesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntityTypesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntityTypesPlainArgs Empty = new GetLogAnalyticsEntityTypesPlainArgs();

    /**
     * A filter to return CLOUD or NON_CLOUD entity types.
     * 
     */
    @Import(name="cloudType")
    private @Nullable String cloudType;

    /**
     * @return A filter to return CLOUD or NON_CLOUD entity types.
     * 
     */
    public Optional<String> cloudType() {
        return Optional.ofNullable(this.cloudType);
    }

    @Import(name="filters")
    private @Nullable List<GetLogAnalyticsEntityTypesFilter> filters;

    public Optional<List<GetLogAnalyticsEntityTypesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only log analytics entity types whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return only log analytics entity types whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only log analytics entity types whose name or internalName contains name given. The match is case-insensitive.
     * 
     */
    @Import(name="nameContains")
    private @Nullable String nameContains;

    /**
     * @return A filter to return only log analytics entity types whose name or internalName contains name given. The match is case-insensitive.
     * 
     */
    public Optional<String> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only those log analytics entity types with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only those log analytics entity types with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetLogAnalyticsEntityTypesPlainArgs() {}

    private GetLogAnalyticsEntityTypesPlainArgs(GetLogAnalyticsEntityTypesPlainArgs $) {
        this.cloudType = $.cloudType;
        this.filters = $.filters;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.namespace = $.namespace;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntityTypesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntityTypesPlainArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntityTypesPlainArgs();
        }

        public Builder(GetLogAnalyticsEntityTypesPlainArgs defaults) {
            $ = new GetLogAnalyticsEntityTypesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudType A filter to return CLOUD or NON_CLOUD entity types.
         * 
         * @return builder
         * 
         */
        public Builder cloudType(@Nullable String cloudType) {
            $.cloudType = cloudType;
            return this;
        }

        public Builder filters(@Nullable List<GetLogAnalyticsEntityTypesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetLogAnalyticsEntityTypesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A filter to return only log analytics entity types whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameContains A filter to return only log analytics entity types whose name or internalName contains name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable String nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entity types with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetLogAnalyticsEntityTypesPlainArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypesPlainArgs", "namespace");
            }
            return $;
        }
    }

}
