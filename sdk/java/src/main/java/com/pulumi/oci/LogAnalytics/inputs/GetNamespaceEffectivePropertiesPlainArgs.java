// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetNamespaceEffectivePropertiesFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNamespaceEffectivePropertiesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamespaceEffectivePropertiesPlainArgs Empty = new GetNamespaceEffectivePropertiesPlainArgs();

    /**
     * The agent ocid.
     * 
     */
    @Import(name="agentId")
    private @Nullable String agentId;

    /**
     * @return The agent ocid.
     * 
     */
    public Optional<String> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * The entity ocid.
     * 
     */
    @Import(name="entityId")
    private @Nullable String entityId;

    /**
     * @return The entity ocid.
     * 
     */
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="filters")
    private @Nullable List<GetNamespaceEffectivePropertiesFilter> filters;

    public Optional<List<GetNamespaceEffectivePropertiesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The include pattern flag.
     * 
     */
    @Import(name="isIncludePatterns")
    private @Nullable Boolean isIncludePatterns;

    /**
     * @return The include pattern flag.
     * 
     */
    public Optional<Boolean> isIncludePatterns() {
        return Optional.ofNullable(this.isIncludePatterns);
    }

    /**
     * The property name used for filtering.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The property name used for filtering.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * The pattern id.
     * 
     */
    @Import(name="patternId")
    private @Nullable Integer patternId;

    /**
     * @return The pattern id.
     * 
     */
    public Optional<Integer> patternId() {
        return Optional.ofNullable(this.patternId);
    }

    /**
     * The pattern id (long).
     * 
     */
    @Import(name="patternIdLong")
    private @Nullable String patternIdLong;

    /**
     * @return The pattern id (long).
     * 
     */
    public Optional<String> patternIdLong() {
        return Optional.ofNullable(this.patternIdLong);
    }

    /**
     * The source name.
     * 
     */
    @Import(name="sourceName")
    private @Nullable String sourceName;

    /**
     * @return The source name.
     * 
     */
    public Optional<String> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    private GetNamespaceEffectivePropertiesPlainArgs() {}

    private GetNamespaceEffectivePropertiesPlainArgs(GetNamespaceEffectivePropertiesPlainArgs $) {
        this.agentId = $.agentId;
        this.entityId = $.entityId;
        this.filters = $.filters;
        this.isIncludePatterns = $.isIncludePatterns;
        this.name = $.name;
        this.namespace = $.namespace;
        this.patternId = $.patternId;
        this.patternIdLong = $.patternIdLong;
        this.sourceName = $.sourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamespaceEffectivePropertiesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamespaceEffectivePropertiesPlainArgs $;

        public Builder() {
            $ = new GetNamespaceEffectivePropertiesPlainArgs();
        }

        public Builder(GetNamespaceEffectivePropertiesPlainArgs defaults) {
            $ = new GetNamespaceEffectivePropertiesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId The agent ocid.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable String agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param entityId The entity ocid.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable String entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder filters(@Nullable List<GetNamespaceEffectivePropertiesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetNamespaceEffectivePropertiesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isIncludePatterns The include pattern flag.
         * 
         * @return builder
         * 
         */
        public Builder isIncludePatterns(@Nullable Boolean isIncludePatterns) {
            $.isIncludePatterns = isIncludePatterns;
            return this;
        }

        /**
         * @param name The property name used for filtering.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param patternId The pattern id.
         * 
         * @return builder
         * 
         */
        public Builder patternId(@Nullable Integer patternId) {
            $.patternId = patternId;
            return this;
        }

        /**
         * @param patternIdLong The pattern id (long).
         * 
         * @return builder
         * 
         */
        public Builder patternIdLong(@Nullable String patternIdLong) {
            $.patternIdLong = patternIdLong;
            return this;
        }

        /**
         * @param sourceName The source name.
         * 
         * @return builder
         * 
         */
        public Builder sourceName(@Nullable String sourceName) {
            $.sourceName = sourceName;
            return this;
        }

        public GetNamespaceEffectivePropertiesPlainArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetNamespaceEffectivePropertiesPlainArgs", "namespace");
            }
            return $;
        }
    }

}
