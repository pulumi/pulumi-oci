// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.GetNamespaceIngestTimeRulesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNamespaceIngestTimeRulesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamespaceIngestTimeRulesArgs Empty = new GetNamespaceIngestTimeRulesArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The ingest time rule condition kind used for filtering. Only rules with conditions of the specified kind will be returned.
     * 
     */
    @Import(name="conditionKind")
    private @Nullable Output<String> conditionKind;

    /**
     * @return The ingest time rule condition kind used for filtering. Only rules with conditions of the specified kind will be returned.
     * 
     */
    public Optional<Output<String>> conditionKind() {
        return Optional.ofNullable(this.conditionKind);
    }

    /**
     * A filter to return rules whose displayName matches in whole or in part the specified value. The match is case-insensitive.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return rules whose displayName matches in whole or in part the specified value. The match is case-insensitive.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The field name used for filtering. Only rules using the specified field name will be returned.
     * 
     */
    @Import(name="fieldName")
    private @Nullable Output<String> fieldName;

    /**
     * @return The field name used for filtering. Only rules using the specified field name will be returned.
     * 
     */
    public Optional<Output<String>> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }

    /**
     * The field value used for filtering. Only rules using the specified field value will be returned.
     * 
     */
    @Import(name="fieldValue")
    private @Nullable Output<String> fieldValue;

    /**
     * @return The field value used for filtering. Only rules using the specified field value will be returned.
     * 
     */
    public Optional<Output<String>> fieldValue() {
        return Optional.ofNullable(this.fieldValue);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetNamespaceIngestTimeRulesFilterArgs>> filters;

    public Optional<Output<List<GetNamespaceIngestTimeRulesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The rule lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The rule lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetNamespaceIngestTimeRulesArgs() {}

    private GetNamespaceIngestTimeRulesArgs(GetNamespaceIngestTimeRulesArgs $) {
        this.compartmentId = $.compartmentId;
        this.conditionKind = $.conditionKind;
        this.displayName = $.displayName;
        this.fieldName = $.fieldName;
        this.fieldValue = $.fieldValue;
        this.filters = $.filters;
        this.namespace = $.namespace;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamespaceIngestTimeRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamespaceIngestTimeRulesArgs $;

        public Builder() {
            $ = new GetNamespaceIngestTimeRulesArgs();
        }

        public Builder(GetNamespaceIngestTimeRulesArgs defaults) {
            $ = new GetNamespaceIngestTimeRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param conditionKind The ingest time rule condition kind used for filtering. Only rules with conditions of the specified kind will be returned.
         * 
         * @return builder
         * 
         */
        public Builder conditionKind(@Nullable Output<String> conditionKind) {
            $.conditionKind = conditionKind;
            return this;
        }

        /**
         * @param conditionKind The ingest time rule condition kind used for filtering. Only rules with conditions of the specified kind will be returned.
         * 
         * @return builder
         * 
         */
        public Builder conditionKind(String conditionKind) {
            return conditionKind(Output.of(conditionKind));
        }

        /**
         * @param displayName A filter to return rules whose displayName matches in whole or in part the specified value. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return rules whose displayName matches in whole or in part the specified value. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fieldName The field name used for filtering. Only rules using the specified field name will be returned.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(@Nullable Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName The field name used for filtering. Only rules using the specified field name will be returned.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param fieldValue The field value used for filtering. Only rules using the specified field value will be returned.
         * 
         * @return builder
         * 
         */
        public Builder fieldValue(@Nullable Output<String> fieldValue) {
            $.fieldValue = fieldValue;
            return this;
        }

        /**
         * @param fieldValue The field value used for filtering. Only rules using the specified field value will be returned.
         * 
         * @return builder
         * 
         */
        public Builder fieldValue(String fieldValue) {
            return fieldValue(Output.of(fieldValue));
        }

        public Builder filters(@Nullable Output<List<GetNamespaceIngestTimeRulesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetNamespaceIngestTimeRulesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetNamespaceIngestTimeRulesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param state The rule lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The rule lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetNamespaceIngestTimeRulesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
