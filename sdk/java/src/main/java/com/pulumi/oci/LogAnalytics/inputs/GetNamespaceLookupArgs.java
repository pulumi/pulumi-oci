// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetNamespaceLookupArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamespaceLookupArgs Empty = new GetNamespaceLookupArgs();

    /**
     * The name of the lookup to operate on.
     * 
     */
    @Import(name="lookupName", required=true)
    private Output<String> lookupName;

    /**
     * @return The name of the lookup to operate on.
     * 
     */
    public Output<String> lookupName() {
        return this.lookupName;
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    private GetNamespaceLookupArgs() {}

    private GetNamespaceLookupArgs(GetNamespaceLookupArgs $) {
        this.lookupName = $.lookupName;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamespaceLookupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamespaceLookupArgs $;

        public Builder() {
            $ = new GetNamespaceLookupArgs();
        }

        public Builder(GetNamespaceLookupArgs defaults) {
            $ = new GetNamespaceLookupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(Output<String> lookupName) {
            $.lookupName = lookupName;
            return this;
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(String lookupName) {
            return lookupName(Output.of(lookupName));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public GetNamespaceLookupArgs build() {
            if ($.lookupName == null) {
                throw new MissingRequiredPropertyException("GetNamespaceLookupArgs", "lookupName");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetNamespaceLookupArgs", "namespace");
            }
            return $;
        }
    }

}
