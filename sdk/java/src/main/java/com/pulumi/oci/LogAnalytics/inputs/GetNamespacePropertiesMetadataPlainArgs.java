// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.inputs.GetNamespacePropertiesMetadataFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNamespacePropertiesMetadataPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamespacePropertiesMetadataPlainArgs Empty = new GetNamespacePropertiesMetadataPlainArgs();

    /**
     * The constraints that apply to the properties at a certain level.
     * 
     */
    @Import(name="constraints")
    private @Nullable String constraints;

    /**
     * @return The constraints that apply to the properties at a certain level.
     * 
     */
    public Optional<String> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * The property display text used for filtering. Only properties matching the specified display name or description will be returned.
     * 
     */
    @Import(name="displayText")
    private @Nullable String displayText;

    /**
     * @return The property display text used for filtering. Only properties matching the specified display name or description will be returned.
     * 
     */
    public Optional<String> displayText() {
        return Optional.ofNullable(this.displayText);
    }

    @Import(name="filters")
    private @Nullable List<GetNamespacePropertiesMetadataFilter> filters;

    public Optional<List<GetNamespacePropertiesMetadataFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The level for which applicable properties are to be listed.
     * 
     */
    @Import(name="level")
    private @Nullable String level;

    /**
     * @return The level for which applicable properties are to be listed.
     * 
     */
    public Optional<String> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * The property name used for filtering.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The property name used for filtering.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private String namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    private GetNamespacePropertiesMetadataPlainArgs() {}

    private GetNamespacePropertiesMetadataPlainArgs(GetNamespacePropertiesMetadataPlainArgs $) {
        this.constraints = $.constraints;
        this.displayText = $.displayText;
        this.filters = $.filters;
        this.level = $.level;
        this.name = $.name;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamespacePropertiesMetadataPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamespacePropertiesMetadataPlainArgs $;

        public Builder() {
            $ = new GetNamespacePropertiesMetadataPlainArgs();
        }

        public Builder(GetNamespacePropertiesMetadataPlainArgs defaults) {
            $ = new GetNamespacePropertiesMetadataPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param constraints The constraints that apply to the properties at a certain level.
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable String constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param displayText The property display text used for filtering. Only properties matching the specified display name or description will be returned.
         * 
         * @return builder
         * 
         */
        public Builder displayText(@Nullable String displayText) {
            $.displayText = displayText;
            return this;
        }

        public Builder filters(@Nullable List<GetNamespacePropertiesMetadataFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetNamespacePropertiesMetadataFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param level The level for which applicable properties are to be listed.
         * 
         * @return builder
         * 
         */
        public Builder level(@Nullable String level) {
            $.level = level;
            return this;
        }

        /**
         * @param name The property name used for filtering.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        public GetNamespacePropertiesMetadataPlainArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("GetNamespacePropertiesMetadataPlainArgs", "namespace");
            }
            return $;
        }
    }

}
