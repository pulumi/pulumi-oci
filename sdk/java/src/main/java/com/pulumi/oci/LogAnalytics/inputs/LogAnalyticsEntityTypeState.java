// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.LogAnalyticsEntityTypePropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogAnalyticsEntityTypeState extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsEntityTypeState Empty = new LogAnalyticsEntityTypeState();

    /**
     * Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Log analytics entity type group. This can be CLOUD (OCI) or NON_CLOUD otherwise.
     * 
     */
    @Import(name="cloudType")
    private @Nullable Output<String> cloudType;

    /**
     * @return Log analytics entity type group. This can be CLOUD (OCI) or NON_CLOUD otherwise.
     * 
     */
    public Optional<Output<String>> cloudType() {
        return Optional.ofNullable(this.cloudType);
    }

    /**
     * Internal name for the log analytics entity type.
     * 
     */
    @Import(name="internalName")
    private @Nullable Output<String> internalName;

    /**
     * @return Internal name for the log analytics entity type.
     * 
     */
    public Optional<Output<String>> internalName() {
        return Optional.ofNullable(this.internalName);
    }

    @Import(name="managementAgentEligibilityStatus")
    private @Nullable Output<String> managementAgentEligibilityStatus;

    public Optional<Output<String>> managementAgentEligibilityStatus() {
        return Optional.ofNullable(this.managementAgentEligibilityStatus);
    }

    /**
     * Log analytics entity type name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Log analytics entity type name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Log analytics entity type property definition.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<LogAnalyticsEntityTypePropertyArgs>> properties;

    /**
     * @return Log analytics entity type property definition.
     * 
     */
    public Optional<Output<List<LogAnalyticsEntityTypePropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The current lifecycle state of the log analytics entity type.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the log analytics entity type.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Time the log analytics entity type was created. An RFC3339 formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Time the log analytics entity type was created. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private LogAnalyticsEntityTypeState() {}

    private LogAnalyticsEntityTypeState(LogAnalyticsEntityTypeState $) {
        this.category = $.category;
        this.cloudType = $.cloudType;
        this.internalName = $.internalName;
        this.managementAgentEligibilityStatus = $.managementAgentEligibilityStatus;
        this.name = $.name;
        this.namespace = $.namespace;
        this.properties = $.properties;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsEntityTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsEntityTypeState $;

        public Builder() {
            $ = new LogAnalyticsEntityTypeState();
        }

        public Builder(LogAnalyticsEntityTypeState defaults) {
            $ = new LogAnalyticsEntityTypeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Log analytics entity type category. Category will be used for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Log analytics entity type category. Category will be used for grouping and filtering.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param cloudType Log analytics entity type group. This can be CLOUD (OCI) or NON_CLOUD otherwise.
         * 
         * @return builder
         * 
         */
        public Builder cloudType(@Nullable Output<String> cloudType) {
            $.cloudType = cloudType;
            return this;
        }

        /**
         * @param cloudType Log analytics entity type group. This can be CLOUD (OCI) or NON_CLOUD otherwise.
         * 
         * @return builder
         * 
         */
        public Builder cloudType(String cloudType) {
            return cloudType(Output.of(cloudType));
        }

        /**
         * @param internalName Internal name for the log analytics entity type.
         * 
         * @return builder
         * 
         */
        public Builder internalName(@Nullable Output<String> internalName) {
            $.internalName = internalName;
            return this;
        }

        /**
         * @param internalName Internal name for the log analytics entity type.
         * 
         * @return builder
         * 
         */
        public Builder internalName(String internalName) {
            return internalName(Output.of(internalName));
        }

        public Builder managementAgentEligibilityStatus(@Nullable Output<String> managementAgentEligibilityStatus) {
            $.managementAgentEligibilityStatus = managementAgentEligibilityStatus;
            return this;
        }

        public Builder managementAgentEligibilityStatus(String managementAgentEligibilityStatus) {
            return managementAgentEligibilityStatus(Output.of(managementAgentEligibilityStatus));
        }

        /**
         * @param name Log analytics entity type name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Log analytics entity type name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<LogAnalyticsEntityTypePropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(List<LogAnalyticsEntityTypePropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties Log analytics entity type property definition.
         * 
         * @return builder
         * 
         */
        public Builder properties(LogAnalyticsEntityTypePropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param state The current lifecycle state of the log analytics entity type.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the log analytics entity type.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated Time the log analytics entity type was created. An RFC3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Time the log analytics entity type was created. An RFC3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public LogAnalyticsEntityTypeState build() {
            return $;
        }
    }

}
