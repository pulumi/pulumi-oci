// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NamespaceIngestTimeRuleConditionsAdditionalConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceIngestTimeRuleConditionsAdditionalConditionArgs Empty = new NamespaceIngestTimeRuleConditionsAdditionalConditionArgs();

    /**
     * (Updatable) The additional field name to be evaluated.
     * 
     */
    @Import(name="conditionField", required=true)
    private Output<String> conditionField;

    /**
     * @return (Updatable) The additional field name to be evaluated.
     * 
     */
    public Output<String> conditionField() {
        return this.conditionField;
    }

    /**
     * (Updatable) The operator to be used for evaluating the additional field.
     * 
     */
    @Import(name="conditionOperator", required=true)
    private Output<String> conditionOperator;

    /**
     * @return (Updatable) The operator to be used for evaluating the additional field.
     * 
     */
    public Output<String> conditionOperator() {
        return this.conditionOperator;
    }

    /**
     * (Updatable) The additional field value to be evaluated.
     * 
     */
    @Import(name="conditionValue", required=true)
    private Output<String> conditionValue;

    /**
     * @return (Updatable) The additional field value to be evaluated.
     * 
     */
    public Output<String> conditionValue() {
        return this.conditionValue;
    }

    private NamespaceIngestTimeRuleConditionsAdditionalConditionArgs() {}

    private NamespaceIngestTimeRuleConditionsAdditionalConditionArgs(NamespaceIngestTimeRuleConditionsAdditionalConditionArgs $) {
        this.conditionField = $.conditionField;
        this.conditionOperator = $.conditionOperator;
        this.conditionValue = $.conditionValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceIngestTimeRuleConditionsAdditionalConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceIngestTimeRuleConditionsAdditionalConditionArgs $;

        public Builder() {
            $ = new NamespaceIngestTimeRuleConditionsAdditionalConditionArgs();
        }

        public Builder(NamespaceIngestTimeRuleConditionsAdditionalConditionArgs defaults) {
            $ = new NamespaceIngestTimeRuleConditionsAdditionalConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionField (Updatable) The additional field name to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder conditionField(Output<String> conditionField) {
            $.conditionField = conditionField;
            return this;
        }

        /**
         * @param conditionField (Updatable) The additional field name to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder conditionField(String conditionField) {
            return conditionField(Output.of(conditionField));
        }

        /**
         * @param conditionOperator (Updatable) The operator to be used for evaluating the additional field.
         * 
         * @return builder
         * 
         */
        public Builder conditionOperator(Output<String> conditionOperator) {
            $.conditionOperator = conditionOperator;
            return this;
        }

        /**
         * @param conditionOperator (Updatable) The operator to be used for evaluating the additional field.
         * 
         * @return builder
         * 
         */
        public Builder conditionOperator(String conditionOperator) {
            return conditionOperator(Output.of(conditionOperator));
        }

        /**
         * @param conditionValue (Updatable) The additional field value to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder conditionValue(Output<String> conditionValue) {
            $.conditionValue = conditionValue;
            return this;
        }

        /**
         * @param conditionValue (Updatable) The additional field value to be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder conditionValue(String conditionValue) {
            return conditionValue(Output.of(conditionValue));
        }

        public NamespaceIngestTimeRuleConditionsAdditionalConditionArgs build() {
            if ($.conditionField == null) {
                throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditionsAdditionalConditionArgs", "conditionField");
            }
            if ($.conditionOperator == null) {
                throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditionsAdditionalConditionArgs", "conditionOperator");
            }
            if ($.conditionValue == null) {
                throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditionsAdditionalConditionArgs", "conditionValue");
            }
            return $;
        }
    }

}
