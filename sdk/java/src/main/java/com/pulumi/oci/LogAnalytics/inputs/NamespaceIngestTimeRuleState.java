// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceIngestTimeRuleActionArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceIngestTimeRuleConditionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceIngestTimeRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceIngestTimeRuleState Empty = new NamespaceIngestTimeRuleState();

    /**
     * (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<NamespaceIngestTimeRuleActionArgs>> actions;

    /**
     * @return (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
     * 
     */
    public Optional<Output<List<NamespaceIngestTimeRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * (Updatable) Compartment Identifier [OCID] (&lt;https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)&gt;.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier [OCID] (&lt;https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)&gt;.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The condition(s) to evaluate for an ingest time rule.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<NamespaceIngestTimeRuleConditionsArgs> conditions;

    /**
     * @return (Updatable) The condition(s) to evaluate for an ingest time rule.
     * 
     */
    public Optional<Output<NamespaceIngestTimeRuleConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Description for this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Description for this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The ingest time rule display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The ingest time rule display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    @Import(name="ingestTimeRuleId")
    private @Nullable Output<String> ingestTimeRuleId;

    public Optional<Output<String>> ingestTimeRuleId() {
        return Optional.ofNullable(this.ingestTimeRuleId);
    }

    /**
     * A flag indicating whether or not the ingest time rule is enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return A flag indicating whether or not the ingest time rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The current state of the ingest time rule.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the ingest time rule.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private NamespaceIngestTimeRuleState() {}

    private NamespaceIngestTimeRuleState(NamespaceIngestTimeRuleState $) {
        this.actions = $.actions;
        this.compartmentId = $.compartmentId;
        this.conditions = $.conditions;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.ingestTimeRuleId = $.ingestTimeRuleId;
        this.isEnabled = $.isEnabled;
        this.namespace = $.namespace;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceIngestTimeRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceIngestTimeRuleState $;

        public Builder() {
            $ = new NamespaceIngestTimeRuleState();
        }

        public Builder(NamespaceIngestTimeRuleState defaults) {
            $ = new NamespaceIngestTimeRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<NamespaceIngestTimeRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<NamespaceIngestTimeRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
         * 
         * @return builder
         * 
         */
        public Builder actions(NamespaceIngestTimeRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (&lt;https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)&gt;.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (&lt;https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)&gt;.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param conditions (Updatable) The condition(s) to evaluate for an ingest time rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<NamespaceIngestTimeRuleConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions (Updatable) The condition(s) to evaluate for an ingest time rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(NamespaceIngestTimeRuleConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Description for this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Description for this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The ingest time rule display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The ingest time rule display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        public Builder ingestTimeRuleId(@Nullable Output<String> ingestTimeRuleId) {
            $.ingestTimeRuleId = ingestTimeRuleId;
            return this;
        }

        public Builder ingestTimeRuleId(String ingestTimeRuleId) {
            return ingestTimeRuleId(Output.of(ingestTimeRuleId));
        }

        /**
         * @param isEnabled A flag indicating whether or not the ingest time rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled A flag indicating whether or not the ingest time rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param state The current state of the ingest time rule.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the ingest time rule.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the resource was created, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the resource was created, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the resource was last updated, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the resource was last updated, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public NamespaceIngestTimeRuleState build() {
            return $;
        }
    }

}
