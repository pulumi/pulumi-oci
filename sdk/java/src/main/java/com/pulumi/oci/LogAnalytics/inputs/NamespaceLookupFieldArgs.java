// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceLookupFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceLookupFieldArgs Empty = new NamespaceLookupFieldArgs();

    /**
     * (Updatable) The common field name.
     * 
     */
    @Import(name="commonFieldName")
    private @Nullable Output<String> commonFieldName;

    /**
     * @return (Updatable) The common field name.
     * 
     */
    public Optional<Output<String>> commonFieldName() {
        return Optional.ofNullable(this.commonFieldName);
    }

    /**
     * (Updatable) The default match value.
     * 
     */
    @Import(name="defaultMatchValue")
    private @Nullable Output<String> defaultMatchValue;

    /**
     * @return (Updatable) The default match value.
     * 
     */
    public Optional<Output<String>> defaultMatchValue() {
        return Optional.ofNullable(this.defaultMatchValue);
    }

    /**
     * (Updatable) The display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A flag indicating whether or not the field is a common field.
     * 
     */
    @Import(name="isCommonField")
    private @Nullable Output<Boolean> isCommonField;

    /**
     * @return (Updatable) A flag indicating whether or not the field is a common field.
     * 
     */
    public Optional<Output<Boolean>> isCommonField() {
        return Optional.ofNullable(this.isCommonField);
    }

    /**
     * (Updatable) The match operator.
     * 
     */
    @Import(name="matchOperator")
    private @Nullable Output<String> matchOperator;

    /**
     * @return (Updatable) The match operator.
     * 
     */
    public Optional<Output<String>> matchOperator() {
        return Optional.ofNullable(this.matchOperator);
    }

    /**
     * (Updatable) The field name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) The field name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The position.
     * 
     */
    @Import(name="position")
    private @Nullable Output<String> position;

    /**
     * @return (Updatable) The position.
     * 
     */
    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    private NamespaceLookupFieldArgs() {}

    private NamespaceLookupFieldArgs(NamespaceLookupFieldArgs $) {
        this.commonFieldName = $.commonFieldName;
        this.defaultMatchValue = $.defaultMatchValue;
        this.displayName = $.displayName;
        this.isCommonField = $.isCommonField;
        this.matchOperator = $.matchOperator;
        this.name = $.name;
        this.position = $.position;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceLookupFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceLookupFieldArgs $;

        public Builder() {
            $ = new NamespaceLookupFieldArgs();
        }

        public Builder(NamespaceLookupFieldArgs defaults) {
            $ = new NamespaceLookupFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonFieldName (Updatable) The common field name.
         * 
         * @return builder
         * 
         */
        public Builder commonFieldName(@Nullable Output<String> commonFieldName) {
            $.commonFieldName = commonFieldName;
            return this;
        }

        /**
         * @param commonFieldName (Updatable) The common field name.
         * 
         * @return builder
         * 
         */
        public Builder commonFieldName(String commonFieldName) {
            return commonFieldName(Output.of(commonFieldName));
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(@Nullable Output<String> defaultMatchValue) {
            $.defaultMatchValue = defaultMatchValue;
            return this;
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(String defaultMatchValue) {
            return defaultMatchValue(Output.of(defaultMatchValue));
        }

        /**
         * @param displayName (Updatable) The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isCommonField (Updatable) A flag indicating whether or not the field is a common field.
         * 
         * @return builder
         * 
         */
        public Builder isCommonField(@Nullable Output<Boolean> isCommonField) {
            $.isCommonField = isCommonField;
            return this;
        }

        /**
         * @param isCommonField (Updatable) A flag indicating whether or not the field is a common field.
         * 
         * @return builder
         * 
         */
        public Builder isCommonField(Boolean isCommonField) {
            return isCommonField(Output.of(isCommonField));
        }

        /**
         * @param matchOperator (Updatable) The match operator.
         * 
         * @return builder
         * 
         */
        public Builder matchOperator(@Nullable Output<String> matchOperator) {
            $.matchOperator = matchOperator;
            return this;
        }

        /**
         * @param matchOperator (Updatable) The match operator.
         * 
         * @return builder
         * 
         */
        public Builder matchOperator(String matchOperator) {
            return matchOperator(Output.of(matchOperator));
        }

        /**
         * @param name (Updatable) The field name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The field name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param position (Updatable) The position.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position (Updatable) The position.
         * 
         * @return builder
         * 
         */
        public Builder position(String position) {
            return position(Output.of(position));
        }

        public NamespaceLookupFieldArgs build() {
            return $;
        }
    }

}
