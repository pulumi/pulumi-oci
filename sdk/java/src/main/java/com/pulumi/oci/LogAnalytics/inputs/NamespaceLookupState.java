// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupCategoryArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupFieldArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupReferringSourceArgs;
import com.pulumi.oci.LogAnalytics.inputs.NamespaceLookupStatusSummaryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceLookupState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceLookupState Empty = new NamespaceLookupState();

    /**
     * The active edit version.
     * 
     */
    @Import(name="activeEditVersion")
    private @Nullable Output<String> activeEditVersion;

    /**
     * @return The active edit version.
     * 
     */
    public Optional<Output<String>> activeEditVersion() {
        return Optional.ofNullable(this.activeEditVersion);
    }

    /**
     * The canonical link.
     * 
     */
    @Import(name="canonicalLink")
    private @Nullable Output<String> canonicalLink;

    /**
     * @return The canonical link.
     * 
     */
    public Optional<Output<String>> canonicalLink() {
        return Optional.ofNullable(this.canonicalLink);
    }

    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<NamespaceLookupCategoryArgs>> categories;

    /**
     * @return (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     * 
     */
    public Optional<Output<List<NamespaceLookupCategoryArgs>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * The character encoding of the uploaded file.
     * 
     */
    @Import(name="charEncoding")
    private @Nullable Output<String> charEncoding;

    /**
     * @return The character encoding of the uploaded file.
     * 
     */
    public Optional<Output<String>> charEncoding() {
        return Optional.ofNullable(this.charEncoding);
    }

    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The default match value.
     * 
     */
    @Import(name="defaultMatchValue")
    private @Nullable Output<String> defaultMatchValue;

    /**
     * @return (Updatable) The default match value.
     * 
     */
    public Optional<Output<String>> defaultMatchValue() {
        return Optional.ofNullable(this.defaultMatchValue);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The lookup description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The lookup description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The edit version.
     * 
     */
    @Import(name="editVersion")
    private @Nullable Output<String> editVersion;

    /**
     * @return The edit version.
     * 
     */
    public Optional<Output<String>> editVersion() {
        return Optional.ofNullable(this.editVersion);
    }

    /**
     * (Updatable) The lookup fields.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<NamespaceLookupFieldArgs>> fields;

    /**
     * @return (Updatable) The lookup fields.
     * 
     */
    public Optional<Output<List<NamespaceLookupFieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    @Import(name="isBuiltIn")
    private @Nullable Output<String> isBuiltIn;

    /**
     * @return A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    public Optional<Output<String>> isBuiltIn() {
        return Optional.ofNullable(this.isBuiltIn);
    }

    /**
     * A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    @Import(name="isHidden")
    private @Nullable Output<Boolean> isHidden;

    /**
     * @return A flag indicating whether or not the new lookup should be hidden.
     * 
     */
    public Optional<Output<Boolean>> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }

    /**
     * The lookup display name.
     * 
     */
    @Import(name="lookupDisplayName")
    private @Nullable Output<String> lookupDisplayName;

    /**
     * @return The lookup display name.
     * 
     */
    public Optional<Output<String>> lookupDisplayName() {
        return Optional.ofNullable(this.lookupDisplayName);
    }

    /**
     * The lookup OCID.
     * 
     */
    @Import(name="lookupId")
    private @Nullable Output<String> lookupId;

    /**
     * @return The lookup OCID.
     * 
     */
    public Optional<Output<String>> lookupId() {
        return Optional.ofNullable(this.lookupId);
    }

    /**
     * The name of the lookup to operate on.
     * 
     */
    @Import(name="lookupName")
    private @Nullable Output<String> lookupName;

    /**
     * @return The name of the lookup to operate on.
     * 
     */
    public Optional<Output<String>> lookupName() {
        return Optional.ofNullable(this.lookupName);
    }

    /**
     * The lookup reference as an integer.
     * 
     */
    @Import(name="lookupReference")
    private @Nullable Output<String> lookupReference;

    /**
     * @return The lookup reference as an integer.
     * 
     */
    public Optional<Output<String>> lookupReference() {
        return Optional.ofNullable(this.lookupReference);
    }

    /**
     * The lookup reference as a string.
     * 
     */
    @Import(name="lookupReferenceString")
    private @Nullable Output<String> lookupReferenceString;

    /**
     * @return The lookup reference as a string.
     * 
     */
    public Optional<Output<String>> lookupReferenceString() {
        return Optional.ofNullable(this.lookupReferenceString);
    }

    /**
     * (Updatable) The maximum number of matches.
     * 
     */
    @Import(name="maxMatches")
    private @Nullable Output<String> maxMatches;

    /**
     * @return (Updatable) The maximum number of matches.
     * 
     */
    public Optional<Output<String>> maxMatches() {
        return Optional.ofNullable(this.maxMatches);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * AutoLookups
     * 
     */
    @Import(name="referringSources")
    private @Nullable Output<List<NamespaceLookupReferringSourceArgs>> referringSources;

    /**
     * @return AutoLookups
     * 
     */
    public Optional<Output<List<NamespaceLookupReferringSourceArgs>>> referringSources() {
        return Optional.ofNullable(this.referringSources);
    }

    /**
     * Path to the file containing data for lookup creation.
     * 
     */
    @Import(name="registerLookupFile")
    private @Nullable Output<String> registerLookupFile;

    /**
     * @return Path to the file containing data for lookup creation.
     * 
     */
    public Optional<Output<String>> registerLookupFile() {
        return Optional.ofNullable(this.registerLookupFile);
    }

    /**
     * StatusSummary
     * 
     */
    @Import(name="statusSummaries")
    private @Nullable Output<List<NamespaceLookupStatusSummaryArgs>> statusSummaries;

    /**
     * @return StatusSummary
     * 
     */
    public Optional<Output<List<NamespaceLookupStatusSummaryArgs>>> statusSummaries() {
        return Optional.ofNullable(this.statusSummaries);
    }

    /**
     * The last updated date.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The last updated date.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private NamespaceLookupState() {}

    private NamespaceLookupState(NamespaceLookupState $) {
        this.activeEditVersion = $.activeEditVersion;
        this.canonicalLink = $.canonicalLink;
        this.categories = $.categories;
        this.charEncoding = $.charEncoding;
        this.compartmentId = $.compartmentId;
        this.defaultMatchValue = $.defaultMatchValue;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.editVersion = $.editVersion;
        this.fields = $.fields;
        this.freeformTags = $.freeformTags;
        this.isBuiltIn = $.isBuiltIn;
        this.isHidden = $.isHidden;
        this.lookupDisplayName = $.lookupDisplayName;
        this.lookupId = $.lookupId;
        this.lookupName = $.lookupName;
        this.lookupReference = $.lookupReference;
        this.lookupReferenceString = $.lookupReferenceString;
        this.maxMatches = $.maxMatches;
        this.namespace = $.namespace;
        this.referringSources = $.referringSources;
        this.registerLookupFile = $.registerLookupFile;
        this.statusSummaries = $.statusSummaries;
        this.timeUpdated = $.timeUpdated;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceLookupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceLookupState $;

        public Builder() {
            $ = new NamespaceLookupState();
        }

        public Builder(NamespaceLookupState defaults) {
            $ = new NamespaceLookupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeEditVersion The active edit version.
         * 
         * @return builder
         * 
         */
        public Builder activeEditVersion(@Nullable Output<String> activeEditVersion) {
            $.activeEditVersion = activeEditVersion;
            return this;
        }

        /**
         * @param activeEditVersion The active edit version.
         * 
         * @return builder
         * 
         */
        public Builder activeEditVersion(String activeEditVersion) {
            return activeEditVersion(Output.of(activeEditVersion));
        }

        /**
         * @param canonicalLink The canonical link.
         * 
         * @return builder
         * 
         */
        public Builder canonicalLink(@Nullable Output<String> canonicalLink) {
            $.canonicalLink = canonicalLink;
            return this;
        }

        /**
         * @param canonicalLink The canonical link.
         * 
         * @return builder
         * 
         */
        public Builder canonicalLink(String canonicalLink) {
            return canonicalLink(Output.of(canonicalLink));
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<NamespaceLookupCategoryArgs>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<NamespaceLookupCategoryArgs> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
         * 
         * @return builder
         * 
         */
        public Builder categories(NamespaceLookupCategoryArgs... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(@Nullable Output<String> charEncoding) {
            $.charEncoding = charEncoding;
            return this;
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(String charEncoding) {
            return charEncoding(Output.of(charEncoding));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(@Nullable Output<String> defaultMatchValue) {
            $.defaultMatchValue = defaultMatchValue;
            return this;
        }

        /**
         * @param defaultMatchValue (Updatable) The default match value.
         * 
         * @return builder
         * 
         */
        public Builder defaultMatchValue(String defaultMatchValue) {
            return defaultMatchValue(Output.of(defaultMatchValue));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The lookup description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The lookup description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param editVersion The edit version.
         * 
         * @return builder
         * 
         */
        public Builder editVersion(@Nullable Output<String> editVersion) {
            $.editVersion = editVersion;
            return this;
        }

        /**
         * @param editVersion The edit version.
         * 
         * @return builder
         * 
         */
        public Builder editVersion(String editVersion) {
            return editVersion(Output.of(editVersion));
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<NamespaceLookupFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<NamespaceLookupFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields (Updatable) The lookup fields.
         * 
         * @return builder
         * 
         */
        public Builder fields(NamespaceLookupFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isBuiltIn A flag indicating if the lookup is custom (user-defined) or built in.
         * 
         * @return builder
         * 
         */
        public Builder isBuiltIn(@Nullable Output<String> isBuiltIn) {
            $.isBuiltIn = isBuiltIn;
            return this;
        }

        /**
         * @param isBuiltIn A flag indicating if the lookup is custom (user-defined) or built in.
         * 
         * @return builder
         * 
         */
        public Builder isBuiltIn(String isBuiltIn) {
            return isBuiltIn(Output.of(isBuiltIn));
        }

        /**
         * @param isHidden A flag indicating whether or not the new lookup should be hidden.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(@Nullable Output<Boolean> isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        /**
         * @param isHidden A flag indicating whether or not the new lookup should be hidden.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Boolean isHidden) {
            return isHidden(Output.of(isHidden));
        }

        /**
         * @param lookupDisplayName The lookup display name.
         * 
         * @return builder
         * 
         */
        public Builder lookupDisplayName(@Nullable Output<String> lookupDisplayName) {
            $.lookupDisplayName = lookupDisplayName;
            return this;
        }

        /**
         * @param lookupDisplayName The lookup display name.
         * 
         * @return builder
         * 
         */
        public Builder lookupDisplayName(String lookupDisplayName) {
            return lookupDisplayName(Output.of(lookupDisplayName));
        }

        /**
         * @param lookupId The lookup OCID.
         * 
         * @return builder
         * 
         */
        public Builder lookupId(@Nullable Output<String> lookupId) {
            $.lookupId = lookupId;
            return this;
        }

        /**
         * @param lookupId The lookup OCID.
         * 
         * @return builder
         * 
         */
        public Builder lookupId(String lookupId) {
            return lookupId(Output.of(lookupId));
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(@Nullable Output<String> lookupName) {
            $.lookupName = lookupName;
            return this;
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(String lookupName) {
            return lookupName(Output.of(lookupName));
        }

        /**
         * @param lookupReference The lookup reference as an integer.
         * 
         * @return builder
         * 
         */
        public Builder lookupReference(@Nullable Output<String> lookupReference) {
            $.lookupReference = lookupReference;
            return this;
        }

        /**
         * @param lookupReference The lookup reference as an integer.
         * 
         * @return builder
         * 
         */
        public Builder lookupReference(String lookupReference) {
            return lookupReference(Output.of(lookupReference));
        }

        /**
         * @param lookupReferenceString The lookup reference as a string.
         * 
         * @return builder
         * 
         */
        public Builder lookupReferenceString(@Nullable Output<String> lookupReferenceString) {
            $.lookupReferenceString = lookupReferenceString;
            return this;
        }

        /**
         * @param lookupReferenceString The lookup reference as a string.
         * 
         * @return builder
         * 
         */
        public Builder lookupReferenceString(String lookupReferenceString) {
            return lookupReferenceString(Output.of(lookupReferenceString));
        }

        /**
         * @param maxMatches (Updatable) The maximum number of matches.
         * 
         * @return builder
         * 
         */
        public Builder maxMatches(@Nullable Output<String> maxMatches) {
            $.maxMatches = maxMatches;
            return this;
        }

        /**
         * @param maxMatches (Updatable) The maximum number of matches.
         * 
         * @return builder
         * 
         */
        public Builder maxMatches(String maxMatches) {
            return maxMatches(Output.of(maxMatches));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param referringSources AutoLookups
         * 
         * @return builder
         * 
         */
        public Builder referringSources(@Nullable Output<List<NamespaceLookupReferringSourceArgs>> referringSources) {
            $.referringSources = referringSources;
            return this;
        }

        /**
         * @param referringSources AutoLookups
         * 
         * @return builder
         * 
         */
        public Builder referringSources(List<NamespaceLookupReferringSourceArgs> referringSources) {
            return referringSources(Output.of(referringSources));
        }

        /**
         * @param referringSources AutoLookups
         * 
         * @return builder
         * 
         */
        public Builder referringSources(NamespaceLookupReferringSourceArgs... referringSources) {
            return referringSources(List.of(referringSources));
        }

        /**
         * @param registerLookupFile Path to the file containing data for lookup creation.
         * 
         * @return builder
         * 
         */
        public Builder registerLookupFile(@Nullable Output<String> registerLookupFile) {
            $.registerLookupFile = registerLookupFile;
            return this;
        }

        /**
         * @param registerLookupFile Path to the file containing data for lookup creation.
         * 
         * @return builder
         * 
         */
        public Builder registerLookupFile(String registerLookupFile) {
            return registerLookupFile(Output.of(registerLookupFile));
        }

        /**
         * @param statusSummaries StatusSummary
         * 
         * @return builder
         * 
         */
        public Builder statusSummaries(@Nullable Output<List<NamespaceLookupStatusSummaryArgs>> statusSummaries) {
            $.statusSummaries = statusSummaries;
            return this;
        }

        /**
         * @param statusSummaries StatusSummary
         * 
         * @return builder
         * 
         */
        public Builder statusSummaries(List<NamespaceLookupStatusSummaryArgs> statusSummaries) {
            return statusSummaries(Output.of(statusSummaries));
        }

        /**
         * @param statusSummaries StatusSummary
         * 
         * @return builder
         * 
         */
        public Builder statusSummaries(NamespaceLookupStatusSummaryArgs... statusSummaries) {
            return statusSummaries(List.of(statusSummaries));
        }

        /**
         * @param timeUpdated The last updated date.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The last updated date.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param type The lookup type. Valid values are Lookup, Dictionary or Module.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The lookup type. Valid values are Lookup, Dictionary or Module.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NamespaceLookupState build() {
            return $;
        }
    }

}
