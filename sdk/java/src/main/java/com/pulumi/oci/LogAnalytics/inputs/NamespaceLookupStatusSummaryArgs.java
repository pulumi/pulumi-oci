// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceLookupStatusSummaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceLookupStatusSummaryArgs Empty = new NamespaceLookupStatusSummaryArgs();

    /**
     * The number of chunks processed.
     * 
     */
    @Import(name="chunksProcessed")
    private @Nullable Output<String> chunksProcessed;

    /**
     * @return The number of chunks processed.
     * 
     */
    public Optional<Output<String>> chunksProcessed() {
        return Optional.ofNullable(this.chunksProcessed);
    }

    /**
     * The failure details, if any.
     * 
     */
    @Import(name="failureDetails")
    private @Nullable Output<String> failureDetails;

    /**
     * @return The failure details, if any.
     * 
     */
    public Optional<Output<String>> failureDetails() {
        return Optional.ofNullable(this.failureDetails);
    }

    /**
     * The filename.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    /**
     * @return The filename.
     * 
     */
    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * The status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The total number of chunks.
     * 
     */
    @Import(name="totalChunks")
    private @Nullable Output<String> totalChunks;

    /**
     * @return The total number of chunks.
     * 
     */
    public Optional<Output<String>> totalChunks() {
        return Optional.ofNullable(this.totalChunks);
    }

    private NamespaceLookupStatusSummaryArgs() {}

    private NamespaceLookupStatusSummaryArgs(NamespaceLookupStatusSummaryArgs $) {
        this.chunksProcessed = $.chunksProcessed;
        this.failureDetails = $.failureDetails;
        this.filename = $.filename;
        this.status = $.status;
        this.totalChunks = $.totalChunks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceLookupStatusSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceLookupStatusSummaryArgs $;

        public Builder() {
            $ = new NamespaceLookupStatusSummaryArgs();
        }

        public Builder(NamespaceLookupStatusSummaryArgs defaults) {
            $ = new NamespaceLookupStatusSummaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chunksProcessed The number of chunks processed.
         * 
         * @return builder
         * 
         */
        public Builder chunksProcessed(@Nullable Output<String> chunksProcessed) {
            $.chunksProcessed = chunksProcessed;
            return this;
        }

        /**
         * @param chunksProcessed The number of chunks processed.
         * 
         * @return builder
         * 
         */
        public Builder chunksProcessed(String chunksProcessed) {
            return chunksProcessed(Output.of(chunksProcessed));
        }

        /**
         * @param failureDetails The failure details, if any.
         * 
         * @return builder
         * 
         */
        public Builder failureDetails(@Nullable Output<String> failureDetails) {
            $.failureDetails = failureDetails;
            return this;
        }

        /**
         * @param failureDetails The failure details, if any.
         * 
         * @return builder
         * 
         */
        public Builder failureDetails(String failureDetails) {
            return failureDetails(Output.of(failureDetails));
        }

        /**
         * @param filename The filename.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The filename.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param status The status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param totalChunks The total number of chunks.
         * 
         * @return builder
         * 
         */
        public Builder totalChunks(@Nullable Output<String> totalChunks) {
            $.totalChunks = totalChunks;
            return this;
        }

        /**
         * @param totalChunks The total number of chunks.
         * 
         * @return builder
         * 
         */
        public Builder totalChunks(String totalChunks) {
            return totalChunks(Output.of(totalChunks));
        }

        public NamespaceLookupStatusSummaryArgs build() {
            return $;
        }
    }

}
