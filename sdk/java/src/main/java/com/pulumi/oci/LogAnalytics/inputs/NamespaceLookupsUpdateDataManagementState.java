// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceLookupsUpdateDataManagementState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceLookupsUpdateDataManagementState Empty = new NamespaceLookupsUpdateDataManagementState();

    /**
     * The character encoding of the uploaded file.
     * 
     */
    @Import(name="charEncoding")
    private @Nullable Output<String> charEncoding;

    /**
     * @return The character encoding of the uploaded file.
     * 
     */
    public Optional<Output<String>> charEncoding() {
        return Optional.ofNullable(this.charEncoding);
    }

    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    @Import(name="expect")
    private @Nullable Output<String> expect;

    /**
     * @return A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    public Optional<Output<String>> expect() {
        return Optional.ofNullable(this.expect);
    }

    /**
     * is force
     * 
     */
    @Import(name="isForce")
    private @Nullable Output<Boolean> isForce;

    /**
     * @return is force
     * 
     */
    public Optional<Output<Boolean>> isForce() {
        return Optional.ofNullable(this.isForce);
    }

    /**
     * The name of the lookup to operate on.
     * 
     */
    @Import(name="lookupName")
    private @Nullable Output<String> lookupName;

    /**
     * @return The name of the lookup to operate on.
     * 
     */
    public Optional<Output<String>> lookupName() {
        return Optional.ofNullable(this.lookupName);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="updateLookupFile")
    private @Nullable Output<String> updateLookupFile;

    public Optional<Output<String>> updateLookupFile() {
        return Optional.ofNullable(this.updateLookupFile);
    }

    private NamespaceLookupsUpdateDataManagementState() {}

    private NamespaceLookupsUpdateDataManagementState(NamespaceLookupsUpdateDataManagementState $) {
        this.charEncoding = $.charEncoding;
        this.expect = $.expect;
        this.isForce = $.isForce;
        this.lookupName = $.lookupName;
        this.namespace = $.namespace;
        this.updateLookupFile = $.updateLookupFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceLookupsUpdateDataManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceLookupsUpdateDataManagementState $;

        public Builder() {
            $ = new NamespaceLookupsUpdateDataManagementState();
        }

        public Builder(NamespaceLookupsUpdateDataManagementState defaults) {
            $ = new NamespaceLookupsUpdateDataManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(@Nullable Output<String> charEncoding) {
            $.charEncoding = charEncoding;
            return this;
        }

        /**
         * @param charEncoding The character encoding of the uploaded file.
         * 
         * @return builder
         * 
         */
        public Builder charEncoding(String charEncoding) {
            return charEncoding(Output.of(charEncoding));
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(@Nullable Output<String> expect) {
            $.expect = expect;
            return this;
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(String expect) {
            return expect(Output.of(expect));
        }

        /**
         * @param isForce is force
         * 
         * @return builder
         * 
         */
        public Builder isForce(@Nullable Output<Boolean> isForce) {
            $.isForce = isForce;
            return this;
        }

        /**
         * @param isForce is force
         * 
         * @return builder
         * 
         */
        public Builder isForce(Boolean isForce) {
            return isForce(Output.of(isForce));
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(@Nullable Output<String> lookupName) {
            $.lookupName = lookupName;
            return this;
        }

        /**
         * @param lookupName The name of the lookup to operate on.
         * 
         * @return builder
         * 
         */
        public Builder lookupName(String lookupName) {
            return lookupName(Output.of(lookupName));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder updateLookupFile(@Nullable Output<String> updateLookupFile) {
            $.updateLookupFile = updateLookupFile;
            return this;
        }

        public Builder updateLookupFile(String updateLookupFile) {
            return updateLookupFile(Output.of(updateLookupFile));
        }

        public NamespaceLookupsUpdateDataManagementState build() {
            return $;
        }
    }

}
