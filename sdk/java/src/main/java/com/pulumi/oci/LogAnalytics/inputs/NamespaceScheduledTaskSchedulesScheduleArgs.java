// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceScheduledTaskSchedulesScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceScheduledTaskSchedulesScheduleArgs Empty = new NamespaceScheduledTaskSchedulesScheduleArgs();

    /**
     * Value in cron format.
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return Value in cron format.
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * Schedule misfire retry policy.
     * 
     */
    @Import(name="misfirePolicy")
    private @Nullable Output<String> misfirePolicy;

    /**
     * @return Schedule misfire retry policy.
     * 
     */
    public Optional<Output<String>> misfirePolicy() {
        return Optional.ofNullable(this.misfirePolicy);
    }

    /**
     * Recurring interval in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. P14D (not P2W). The value must be at least 5 minutes (PT5M) and at most 3 weeks (P21D or PT30240M).
     * 
     */
    @Import(name="recurringInterval")
    private @Nullable Output<String> recurringInterval;

    /**
     * @return Recurring interval in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. P14D (not P2W). The value must be at least 5 minutes (PT5M) and at most 3 weeks (P21D or PT30240M).
     * 
     */
    public Optional<Output<String>> recurringInterval() {
        return Optional.ofNullable(this.recurringInterval);
    }

    /**
     * Number of times (0-based) to execute until auto-stop. Default value -1 will execute indefinitely. Value 0 will execute once.
     * 
     */
    @Import(name="repeatCount")
    private @Nullable Output<Integer> repeatCount;

    /**
     * @return Number of times (0-based) to execute until auto-stop. Default value -1 will execute indefinitely. Value 0 will execute once.
     * 
     */
    public Optional<Output<Integer>> repeatCount() {
        return Optional.ofNullable(this.repeatCount);
    }

    /**
     * Time zone, by default UTC.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Time zone, by default UTC.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * Schedule type discriminator.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Schedule type discriminator.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NamespaceScheduledTaskSchedulesScheduleArgs() {}

    private NamespaceScheduledTaskSchedulesScheduleArgs(NamespaceScheduledTaskSchedulesScheduleArgs $) {
        this.expression = $.expression;
        this.misfirePolicy = $.misfirePolicy;
        this.recurringInterval = $.recurringInterval;
        this.repeatCount = $.repeatCount;
        this.timeZone = $.timeZone;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceScheduledTaskSchedulesScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceScheduledTaskSchedulesScheduleArgs $;

        public Builder() {
            $ = new NamespaceScheduledTaskSchedulesScheduleArgs();
        }

        public Builder(NamespaceScheduledTaskSchedulesScheduleArgs defaults) {
            $ = new NamespaceScheduledTaskSchedulesScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression Value in cron format.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression Value in cron format.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param misfirePolicy Schedule misfire retry policy.
         * 
         * @return builder
         * 
         */
        public Builder misfirePolicy(@Nullable Output<String> misfirePolicy) {
            $.misfirePolicy = misfirePolicy;
            return this;
        }

        /**
         * @param misfirePolicy Schedule misfire retry policy.
         * 
         * @return builder
         * 
         */
        public Builder misfirePolicy(String misfirePolicy) {
            return misfirePolicy(Output.of(misfirePolicy));
        }

        /**
         * @param recurringInterval Recurring interval in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. P14D (not P2W). The value must be at least 5 minutes (PT5M) and at most 3 weeks (P21D or PT30240M).
         * 
         * @return builder
         * 
         */
        public Builder recurringInterval(@Nullable Output<String> recurringInterval) {
            $.recurringInterval = recurringInterval;
            return this;
        }

        /**
         * @param recurringInterval Recurring interval in ISO 8601 extended format as described in https://en.wikipedia.org/wiki/ISO_8601#Durations. The largest supported unit is D, e.g. P14D (not P2W). The value must be at least 5 minutes (PT5M) and at most 3 weeks (P21D or PT30240M).
         * 
         * @return builder
         * 
         */
        public Builder recurringInterval(String recurringInterval) {
            return recurringInterval(Output.of(recurringInterval));
        }

        /**
         * @param repeatCount Number of times (0-based) to execute until auto-stop. Default value -1 will execute indefinitely. Value 0 will execute once.
         * 
         * @return builder
         * 
         */
        public Builder repeatCount(@Nullable Output<Integer> repeatCount) {
            $.repeatCount = repeatCount;
            return this;
        }

        /**
         * @param repeatCount Number of times (0-based) to execute until auto-stop. Default value -1 will execute indefinitely. Value 0 will execute once.
         * 
         * @return builder
         * 
         */
        public Builder repeatCount(Integer repeatCount) {
            return repeatCount(Output.of(repeatCount));
        }

        /**
         * @param timeZone Time zone, by default UTC.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Time zone, by default UTC.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param type Schedule type discriminator.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Schedule type discriminator.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NamespaceScheduledTaskSchedulesScheduleArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NamespaceScheduledTaskSchedulesScheduleArgs", "type");
            }
            return $;
        }
    }

}
