// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetLogAnalyticsEntityTypeProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLogAnalyticsEntityTypeResult {
    /**
     * @return Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    private String category;
    /**
     * @return Log analytics entity type group. That can be CLOUD (OCI) or NON_CLOUD otherwise.
     * 
     */
    private String cloudType;
    private String entityTypeName;
    private String id;
    /**
     * @return Internal name for the log analytics entity type.
     * 
     */
    private String internalName;
    private String managementAgentEligibilityStatus;
    /**
     * @return Log analytics entity type property name.
     * 
     */
    private String name;
    private String namespace;
    /**
     * @return The parameters used in file patterns specified in log sources for this log analytics entity type.
     * 
     */
    private List<GetLogAnalyticsEntityTypeProperty> properties;
    /**
     * @return The current lifecycle state of the log analytics entity type.
     * 
     */
    private String state;
    /**
     * @return Time the log analytics entity type was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetLogAnalyticsEntityTypeResult() {}
    /**
     * @return Log analytics entity type category. Category will be used for grouping and filtering.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Log analytics entity type group. That can be CLOUD (OCI) or NON_CLOUD otherwise.
     * 
     */
    public String cloudType() {
        return this.cloudType;
    }
    public String entityTypeName() {
        return this.entityTypeName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Internal name for the log analytics entity type.
     * 
     */
    public String internalName() {
        return this.internalName;
    }
    public String managementAgentEligibilityStatus() {
        return this.managementAgentEligibilityStatus;
    }
    /**
     * @return Log analytics entity type property name.
     * 
     */
    public String name() {
        return this.name;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The parameters used in file patterns specified in log sources for this log analytics entity type.
     * 
     */
    public List<GetLogAnalyticsEntityTypeProperty> properties() {
        return this.properties;
    }
    /**
     * @return The current lifecycle state of the log analytics entity type.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time the log analytics entity type was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogAnalyticsEntityTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String cloudType;
        private String entityTypeName;
        private String id;
        private String internalName;
        private String managementAgentEligibilityStatus;
        private String name;
        private String namespace;
        private List<GetLogAnalyticsEntityTypeProperty> properties;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetLogAnalyticsEntityTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.cloudType = defaults.cloudType;
    	      this.entityTypeName = defaults.entityTypeName;
    	      this.id = defaults.id;
    	      this.internalName = defaults.internalName;
    	      this.managementAgentEligibilityStatus = defaults.managementAgentEligibilityStatus;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.properties = defaults.properties;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder cloudType(String cloudType) {
            if (cloudType == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "cloudType");
            }
            this.cloudType = cloudType;
            return this;
        }
        @CustomType.Setter
        public Builder entityTypeName(String entityTypeName) {
            if (entityTypeName == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "entityTypeName");
            }
            this.entityTypeName = entityTypeName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalName(String internalName) {
            if (internalName == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "internalName");
            }
            this.internalName = internalName;
            return this;
        }
        @CustomType.Setter
        public Builder managementAgentEligibilityStatus(String managementAgentEligibilityStatus) {
            if (managementAgentEligibilityStatus == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "managementAgentEligibilityStatus");
            }
            this.managementAgentEligibilityStatus = managementAgentEligibilityStatus;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetLogAnalyticsEntityTypeProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetLogAnalyticsEntityTypeProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsEntityTypeResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetLogAnalyticsEntityTypeResult build() {
            final var _resultValue = new GetLogAnalyticsEntityTypeResult();
            _resultValue.category = category;
            _resultValue.cloudType = cloudType;
            _resultValue.entityTypeName = entityTypeName;
            _resultValue.id = id;
            _resultValue.internalName = internalName;
            _resultValue.managementAgentEligibilityStatus = managementAgentEligibilityStatus;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.properties = properties;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
