// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetLogAnalyticsObjectCollectionRuleOverride;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLogAnalyticsObjectCollectionRuleResult {
    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    private String charEncoding;
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    private String collectionType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    private String entityId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    private String id;
    /**
     * @return Whether or not this rule is currently enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return Flag to allow historic collection if poll period overlaps with existing ACTIVE collection rule
     * 
     */
    private Boolean isForceHistoricCollection;
    /**
     * @return Last Collected Object for the rule
     * 
     */
    private String lastCollectedObject;
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    private String lifecycleDetails;
    private String logAnalyticsObjectCollectionRuleId;
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    private String logGroupId;
    /**
     * @return The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
     * 
     */
    private String logSet;
    /**
     * @return The regex to be applied against given logSetKey. Regex has to be in string escaped format.
     * 
     */
    private String logSetExtRegex;
    /**
     * @return An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
     * 
     */
    private String logSetKey;
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    private String logSourceName;
    /**
     * @return Type of files/objects in this object collection rule.
     * 
     */
    private String logType;
    /**
     * @return A unique name to the rule. The name must be unique, within the tenancy, and cannot be changed.
     * 
     */
    private String name;
    private String namespace;
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    private List<String> objectNameFilters;
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    private String osBucketName;
    /**
     * @return Object Storage namespace.
     * 
     */
    private String osNamespace;
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    private List<GetLogAnalyticsObjectCollectionRuleOverride> overrides;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    private String pollSince;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    private String pollTill;
    /**
     * @return The current state of the rule.
     * 
     */
    private String state;
    /**
     * @return The time from which to consume the objects, if streamCursorType is AT_TIME.
     * 
     */
    private String streamCursorTime;
    /**
     * @return Cursor type used to fetch messages from stream. When the streamCursorType is set to DEFAULT, the existing cursor position will be used if already set by any previous objection collection rule(s) using the same stream.  Otherwise, the behaviour is to consume from the oldest available message in the stream.  When the streamCursorType is set to TRIM_HORIZON, the behaviour is to start consuming from the oldest available message in the stream.  When the streamCursorType is set to LATEST, the behavior is to start consuming messages that were published after the creation of this rule.  When the streamCursorType is set to AT_TIME, the behavior is to start consuming from a given time.  For more information on cursor types, see [Stream Consumer Groups](https://docs.oracle.com/en-us/iaas/Content/Streaming/Tasks/using_consumer_groups.htm).
     * 
     */
    private String streamCursorType;
    /**
     * @return A Stream OCID is required for Object Collection rules of type LIVE or HISTORIC_LIVE, which will be used by Logging Analytics while creating Event Rule and consume the event notifications created by the Object Storage.
     * 
     */
    private String streamId;
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used.
     * 
     */
    private String timezone;

    private GetLogAnalyticsObjectCollectionRuleResult() {}
    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    public String charEncoding() {
        return this.charEncoding;
    }
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    public String collectionType() {
        return this.collectionType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    public String entityId() {
        return this.entityId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not this rule is currently enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return Flag to allow historic collection if poll period overlaps with existing ACTIVE collection rule
     * 
     */
    public Boolean isForceHistoricCollection() {
        return this.isForceHistoricCollection;
    }
    /**
     * @return Last Collected Object for the rule
     * 
     */
    public String lastCollectedObject() {
        return this.lastCollectedObject;
    }
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String logAnalyticsObjectCollectionRuleId() {
        return this.logAnalyticsObjectCollectionRuleId;
    }
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    public String logGroupId() {
        return this.logGroupId;
    }
    /**
     * @return The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
     * 
     */
    public String logSet() {
        return this.logSet;
    }
    /**
     * @return The regex to be applied against given logSetKey. Regex has to be in string escaped format.
     * 
     */
    public String logSetExtRegex() {
        return this.logSetExtRegex;
    }
    /**
     * @return An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
     * 
     */
    public String logSetKey() {
        return this.logSetKey;
    }
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    public String logSourceName() {
        return this.logSourceName;
    }
    /**
     * @return Type of files/objects in this object collection rule.
     * 
     */
    public String logType() {
        return this.logType;
    }
    /**
     * @return A unique name to the rule. The name must be unique, within the tenancy, and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    public List<String> objectNameFilters() {
        return this.objectNameFilters;
    }
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    public String osBucketName() {
        return this.osBucketName;
    }
    /**
     * @return Object Storage namespace.
     * 
     */
    public String osNamespace() {
        return this.osNamespace;
    }
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    public List<GetLogAnalyticsObjectCollectionRuleOverride> overrides() {
        return this.overrides;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    public String pollSince() {
        return this.pollSince;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    public String pollTill() {
        return this.pollTill;
    }
    /**
     * @return The current state of the rule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time from which to consume the objects, if streamCursorType is AT_TIME.
     * 
     */
    public String streamCursorTime() {
        return this.streamCursorTime;
    }
    /**
     * @return Cursor type used to fetch messages from stream. When the streamCursorType is set to DEFAULT, the existing cursor position will be used if already set by any previous objection collection rule(s) using the same stream.  Otherwise, the behaviour is to consume from the oldest available message in the stream.  When the streamCursorType is set to TRIM_HORIZON, the behaviour is to start consuming from the oldest available message in the stream.  When the streamCursorType is set to LATEST, the behavior is to start consuming messages that were published after the creation of this rule.  When the streamCursorType is set to AT_TIME, the behavior is to start consuming from a given time.  For more information on cursor types, see [Stream Consumer Groups](https://docs.oracle.com/en-us/iaas/Content/Streaming/Tasks/using_consumer_groups.htm).
     * 
     */
    public String streamCursorType() {
        return this.streamCursorType;
    }
    /**
     * @return A Stream OCID is required for Object Collection rules of type LIVE or HISTORIC_LIVE, which will be used by Logging Analytics while creating Event Rule and consume the event notifications created by the Object Storage.
     * 
     */
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used.
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogAnalyticsObjectCollectionRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String charEncoding;
        private String collectionType;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private String entityId;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isEnabled;
        private Boolean isForceHistoricCollection;
        private String lastCollectedObject;
        private String lifecycleDetails;
        private String logAnalyticsObjectCollectionRuleId;
        private String logGroupId;
        private String logSet;
        private String logSetExtRegex;
        private String logSetKey;
        private String logSourceName;
        private String logType;
        private String name;
        private String namespace;
        private List<String> objectNameFilters;
        private String osBucketName;
        private String osNamespace;
        private List<GetLogAnalyticsObjectCollectionRuleOverride> overrides;
        private String pollSince;
        private String pollTill;
        private String state;
        private String streamCursorTime;
        private String streamCursorType;
        private String streamId;
        private String timeCreated;
        private String timeUpdated;
        private String timezone;
        public Builder() {}
        public Builder(GetLogAnalyticsObjectCollectionRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.charEncoding = defaults.charEncoding;
    	      this.collectionType = defaults.collectionType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.entityId = defaults.entityId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isForceHistoricCollection = defaults.isForceHistoricCollection;
    	      this.lastCollectedObject = defaults.lastCollectedObject;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.logAnalyticsObjectCollectionRuleId = defaults.logAnalyticsObjectCollectionRuleId;
    	      this.logGroupId = defaults.logGroupId;
    	      this.logSet = defaults.logSet;
    	      this.logSetExtRegex = defaults.logSetExtRegex;
    	      this.logSetKey = defaults.logSetKey;
    	      this.logSourceName = defaults.logSourceName;
    	      this.logType = defaults.logType;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.objectNameFilters = defaults.objectNameFilters;
    	      this.osBucketName = defaults.osBucketName;
    	      this.osNamespace = defaults.osNamespace;
    	      this.overrides = defaults.overrides;
    	      this.pollSince = defaults.pollSince;
    	      this.pollTill = defaults.pollTill;
    	      this.state = defaults.state;
    	      this.streamCursorTime = defaults.streamCursorTime;
    	      this.streamCursorType = defaults.streamCursorType;
    	      this.streamId = defaults.streamId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder charEncoding(String charEncoding) {
            if (charEncoding == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "charEncoding");
            }
            this.charEncoding = charEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder collectionType(String collectionType) {
            if (collectionType == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "collectionType");
            }
            this.collectionType = collectionType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            if (entityId == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "entityId");
            }
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isForceHistoricCollection(Boolean isForceHistoricCollection) {
            if (isForceHistoricCollection == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "isForceHistoricCollection");
            }
            this.isForceHistoricCollection = isForceHistoricCollection;
            return this;
        }
        @CustomType.Setter
        public Builder lastCollectedObject(String lastCollectedObject) {
            if (lastCollectedObject == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "lastCollectedObject");
            }
            this.lastCollectedObject = lastCollectedObject;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsObjectCollectionRuleId(String logAnalyticsObjectCollectionRuleId) {
            if (logAnalyticsObjectCollectionRuleId == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logAnalyticsObjectCollectionRuleId");
            }
            this.logAnalyticsObjectCollectionRuleId = logAnalyticsObjectCollectionRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder logGroupId(String logGroupId) {
            if (logGroupId == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logGroupId");
            }
            this.logGroupId = logGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder logSet(String logSet) {
            if (logSet == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logSet");
            }
            this.logSet = logSet;
            return this;
        }
        @CustomType.Setter
        public Builder logSetExtRegex(String logSetExtRegex) {
            if (logSetExtRegex == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logSetExtRegex");
            }
            this.logSetExtRegex = logSetExtRegex;
            return this;
        }
        @CustomType.Setter
        public Builder logSetKey(String logSetKey) {
            if (logSetKey == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logSetKey");
            }
            this.logSetKey = logSetKey;
            return this;
        }
        @CustomType.Setter
        public Builder logSourceName(String logSourceName) {
            if (logSourceName == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logSourceName");
            }
            this.logSourceName = logSourceName;
            return this;
        }
        @CustomType.Setter
        public Builder logType(String logType) {
            if (logType == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "logType");
            }
            this.logType = logType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder objectNameFilters(List<String> objectNameFilters) {
            if (objectNameFilters == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "objectNameFilters");
            }
            this.objectNameFilters = objectNameFilters;
            return this;
        }
        public Builder objectNameFilters(String... objectNameFilters) {
            return objectNameFilters(List.of(objectNameFilters));
        }
        @CustomType.Setter
        public Builder osBucketName(String osBucketName) {
            if (osBucketName == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "osBucketName");
            }
            this.osBucketName = osBucketName;
            return this;
        }
        @CustomType.Setter
        public Builder osNamespace(String osNamespace) {
            if (osNamespace == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "osNamespace");
            }
            this.osNamespace = osNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(List<GetLogAnalyticsObjectCollectionRuleOverride> overrides) {
            if (overrides == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "overrides");
            }
            this.overrides = overrides;
            return this;
        }
        public Builder overrides(GetLogAnalyticsObjectCollectionRuleOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder pollSince(String pollSince) {
            if (pollSince == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "pollSince");
            }
            this.pollSince = pollSince;
            return this;
        }
        @CustomType.Setter
        public Builder pollTill(String pollTill) {
            if (pollTill == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "pollTill");
            }
            this.pollTill = pollTill;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamCursorTime(String streamCursorTime) {
            if (streamCursorTime == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "streamCursorTime");
            }
            this.streamCursorTime = streamCursorTime;
            return this;
        }
        @CustomType.Setter
        public Builder streamCursorType(String streamCursorType) {
            if (streamCursorType == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "streamCursorType");
            }
            this.streamCursorType = streamCursorType;
            return this;
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            if (streamId == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "streamId");
            }
            this.streamId = streamId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetLogAnalyticsObjectCollectionRuleResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public GetLogAnalyticsObjectCollectionRuleResult build() {
            final var _resultValue = new GetLogAnalyticsObjectCollectionRuleResult();
            _resultValue.charEncoding = charEncoding;
            _resultValue.collectionType = collectionType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.entityId = entityId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.isForceHistoricCollection = isForceHistoricCollection;
            _resultValue.lastCollectedObject = lastCollectedObject;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.logAnalyticsObjectCollectionRuleId = logAnalyticsObjectCollectionRuleId;
            _resultValue.logGroupId = logGroupId;
            _resultValue.logSet = logSet;
            _resultValue.logSetExtRegex = logSetExtRegex;
            _resultValue.logSetKey = logSetKey;
            _resultValue.logSourceName = logSourceName;
            _resultValue.logType = logType;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.objectNameFilters = objectNameFilters;
            _resultValue.osBucketName = osBucketName;
            _resultValue.osNamespace = osNamespace;
            _resultValue.overrides = overrides;
            _resultValue.pollSince = pollSince;
            _resultValue.pollTill = pollTill;
            _resultValue.state = state;
            _resultValue.streamCursorTime = streamCursorTime;
            _resultValue.streamCursorType = streamCursorType;
            _resultValue.streamId = streamId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
