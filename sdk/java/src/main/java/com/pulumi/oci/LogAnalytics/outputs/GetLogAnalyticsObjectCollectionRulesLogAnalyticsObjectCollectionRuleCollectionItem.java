// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LogAnalytics.outputs.GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem {
    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    private String charEncoding;
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    private String collectionType;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    private String entityId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    private String id;
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    private String logGroupId;
    /**
     * @return The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
     * 
     */
    private String logSet;
    /**
     * @return The regex to be applied against given logSetKey. Regex has to be in string escaped format.
     * 
     */
    private String logSetExtRegex;
    /**
     * @return An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
     * 
     */
    private String logSetKey;
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    private String logSourceName;
    /**
     * @return A filter to return rules only matching with this name.
     * 
     */
    private String name;
    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    private String namespace;
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    private List<String> objectNameFilters;
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    private String osBucketName;
    /**
     * @return Object Storage namespace.
     * 
     */
    private String osNamespace;
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    private List<GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride> overrides;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    private String pollSince;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    private String pollTill;
    /**
     * @return Lifecycle state filter.
     * 
     */
    private String state;
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used.
     * 
     */
    private String timezone;

    private GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem() {}
    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    public String charEncoding() {
        return this.charEncoding;
    }
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    public String collectionType() {
        return this.collectionType;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    public String entityId() {
        return this.entityId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    public String logGroupId() {
        return this.logGroupId;
    }
    /**
     * @return The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
     * 
     */
    public String logSet() {
        return this.logSet;
    }
    /**
     * @return The regex to be applied against given logSetKey. Regex has to be in string escaped format.
     * 
     */
    public String logSetExtRegex() {
        return this.logSetExtRegex;
    }
    /**
     * @return An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
     * 
     */
    public String logSetKey() {
        return this.logSetKey;
    }
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    public String logSourceName() {
        return this.logSourceName;
    }
    /**
     * @return A filter to return rules only matching with this name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    public List<String> objectNameFilters() {
        return this.objectNameFilters;
    }
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    public String osBucketName() {
        return this.osBucketName;
    }
    /**
     * @return Object Storage namespace.
     * 
     */
    public String osNamespace() {
        return this.osNamespace;
    }
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    public List<GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride> overrides() {
        return this.overrides;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    public String pollSince() {
        return this.pollSince;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    public String pollTill() {
        return this.pollTill;
    }
    /**
     * @return Lifecycle state filter.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used.
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String charEncoding;
        private String collectionType;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String entityId;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String logGroupId;
        private String logSet;
        private String logSetExtRegex;
        private String logSetKey;
        private String logSourceName;
        private String name;
        private String namespace;
        private List<String> objectNameFilters;
        private String osBucketName;
        private String osNamespace;
        private List<GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride> overrides;
        private String pollSince;
        private String pollTill;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String timezone;
        public Builder() {}
        public Builder(GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.charEncoding = defaults.charEncoding;
    	      this.collectionType = defaults.collectionType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.entityId = defaults.entityId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.logGroupId = defaults.logGroupId;
    	      this.logSet = defaults.logSet;
    	      this.logSetExtRegex = defaults.logSetExtRegex;
    	      this.logSetKey = defaults.logSetKey;
    	      this.logSourceName = defaults.logSourceName;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.objectNameFilters = defaults.objectNameFilters;
    	      this.osBucketName = defaults.osBucketName;
    	      this.osNamespace = defaults.osNamespace;
    	      this.overrides = defaults.overrides;
    	      this.pollSince = defaults.pollSince;
    	      this.pollTill = defaults.pollTill;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder charEncoding(String charEncoding) {
            this.charEncoding = Objects.requireNonNull(charEncoding);
            return this;
        }
        @CustomType.Setter
        public Builder collectionType(String collectionType) {
            this.collectionType = Objects.requireNonNull(collectionType);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder logGroupId(String logGroupId) {
            this.logGroupId = Objects.requireNonNull(logGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder logSet(String logSet) {
            this.logSet = Objects.requireNonNull(logSet);
            return this;
        }
        @CustomType.Setter
        public Builder logSetExtRegex(String logSetExtRegex) {
            this.logSetExtRegex = Objects.requireNonNull(logSetExtRegex);
            return this;
        }
        @CustomType.Setter
        public Builder logSetKey(String logSetKey) {
            this.logSetKey = Objects.requireNonNull(logSetKey);
            return this;
        }
        @CustomType.Setter
        public Builder logSourceName(String logSourceName) {
            this.logSourceName = Objects.requireNonNull(logSourceName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder objectNameFilters(List<String> objectNameFilters) {
            this.objectNameFilters = Objects.requireNonNull(objectNameFilters);
            return this;
        }
        public Builder objectNameFilters(String... objectNameFilters) {
            return objectNameFilters(List.of(objectNameFilters));
        }
        @CustomType.Setter
        public Builder osBucketName(String osBucketName) {
            this.osBucketName = Objects.requireNonNull(osBucketName);
            return this;
        }
        @CustomType.Setter
        public Builder osNamespace(String osNamespace) {
            this.osNamespace = Objects.requireNonNull(osNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder overrides(List<GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride> overrides) {
            this.overrides = Objects.requireNonNull(overrides);
            return this;
        }
        public Builder overrides(GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder pollSince(String pollSince) {
            this.pollSince = Objects.requireNonNull(pollSince);
            return this;
        }
        @CustomType.Setter
        public Builder pollTill(String pollTill) {
            this.pollTill = Objects.requireNonNull(pollTill);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }
        public GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem build() {
            final var o = new GetLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem();
            o.charEncoding = charEncoding;
            o.collectionType = collectionType;
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.description = description;
            o.entityId = entityId;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.logGroupId = logGroupId;
            o.logSet = logSet;
            o.logSetExtRegex = logSetExtRegex;
            o.logSetKey = logSetKey;
            o.logSourceName = logSourceName;
            o.name = name;
            o.namespace = namespace;
            o.objectNameFilters = objectNameFilters;
            o.osBucketName = osBucketName;
            o.osNamespace = osNamespace;
            o.overrides = overrides;
            o.pollSince = pollSince;
            o.pollTill = pollTill;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.timezone = timezone;
            return o;
        }
    }
}
