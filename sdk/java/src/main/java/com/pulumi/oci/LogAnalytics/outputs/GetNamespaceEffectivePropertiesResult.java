// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceEffectivePropertiesEffectivePropertyCollection;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceEffectivePropertiesFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceEffectivePropertiesResult {
    private @Nullable String agentId;
    /**
     * @return The list of effective_property_collection.
     * 
     */
    private List<GetNamespaceEffectivePropertiesEffectivePropertyCollection> effectivePropertyCollections;
    private @Nullable String entityId;
    private @Nullable List<GetNamespaceEffectivePropertiesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isIncludePatterns;
    /**
     * @return The property name.
     * 
     */
    private @Nullable String name;
    private String namespace;
    private @Nullable Integer patternId;
    private @Nullable String patternIdLong;
    private @Nullable String sourceName;

    private GetNamespaceEffectivePropertiesResult() {}
    public Optional<String> agentId() {
        return Optional.ofNullable(this.agentId);
    }
    /**
     * @return The list of effective_property_collection.
     * 
     */
    public List<GetNamespaceEffectivePropertiesEffectivePropertyCollection> effectivePropertyCollections() {
        return this.effectivePropertyCollections;
    }
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }
    public List<GetNamespaceEffectivePropertiesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isIncludePatterns() {
        return Optional.ofNullable(this.isIncludePatterns);
    }
    /**
     * @return The property name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String namespace() {
        return this.namespace;
    }
    public Optional<Integer> patternId() {
        return Optional.ofNullable(this.patternId);
    }
    public Optional<String> patternIdLong() {
        return Optional.ofNullable(this.patternIdLong);
    }
    public Optional<String> sourceName() {
        return Optional.ofNullable(this.sourceName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceEffectivePropertiesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String agentId;
        private List<GetNamespaceEffectivePropertiesEffectivePropertyCollection> effectivePropertyCollections;
        private @Nullable String entityId;
        private @Nullable List<GetNamespaceEffectivePropertiesFilter> filters;
        private String id;
        private @Nullable Boolean isIncludePatterns;
        private @Nullable String name;
        private String namespace;
        private @Nullable Integer patternId;
        private @Nullable String patternIdLong;
        private @Nullable String sourceName;
        public Builder() {}
        public Builder(GetNamespaceEffectivePropertiesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentId = defaults.agentId;
    	      this.effectivePropertyCollections = defaults.effectivePropertyCollections;
    	      this.entityId = defaults.entityId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isIncludePatterns = defaults.isIncludePatterns;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.patternId = defaults.patternId;
    	      this.patternIdLong = defaults.patternIdLong;
    	      this.sourceName = defaults.sourceName;
        }

        @CustomType.Setter
        public Builder agentId(@Nullable String agentId) {

            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder effectivePropertyCollections(List<GetNamespaceEffectivePropertiesEffectivePropertyCollection> effectivePropertyCollections) {
            if (effectivePropertyCollections == null) {
              throw new MissingRequiredPropertyException("GetNamespaceEffectivePropertiesResult", "effectivePropertyCollections");
            }
            this.effectivePropertyCollections = effectivePropertyCollections;
            return this;
        }
        public Builder effectivePropertyCollections(GetNamespaceEffectivePropertiesEffectivePropertyCollection... effectivePropertyCollections) {
            return effectivePropertyCollections(List.of(effectivePropertyCollections));
        }
        @CustomType.Setter
        public Builder entityId(@Nullable String entityId) {

            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetNamespaceEffectivePropertiesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetNamespaceEffectivePropertiesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceEffectivePropertiesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIncludePatterns(@Nullable Boolean isIncludePatterns) {

            this.isIncludePatterns = isIncludePatterns;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceEffectivePropertiesResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder patternId(@Nullable Integer patternId) {

            this.patternId = patternId;
            return this;
        }
        @CustomType.Setter
        public Builder patternIdLong(@Nullable String patternIdLong) {

            this.patternIdLong = patternIdLong;
            return this;
        }
        @CustomType.Setter
        public Builder sourceName(@Nullable String sourceName) {

            this.sourceName = sourceName;
            return this;
        }
        public GetNamespaceEffectivePropertiesResult build() {
            final var _resultValue = new GetNamespaceEffectivePropertiesResult();
            _resultValue.agentId = agentId;
            _resultValue.effectivePropertyCollections = effectivePropertyCollections;
            _resultValue.entityId = entityId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isIncludePatterns = isIncludePatterns;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.patternId = patternId;
            _resultValue.patternIdLong = patternIdLong;
            _resultValue.sourceName = sourceName;
            return _resultValue;
        }
    }
}
