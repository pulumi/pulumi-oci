// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceFieldUsageDependentParserDependency;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNamespaceFieldUsageDependentParser {
    /**
     * @return The list of dependencies defined by the source.
     * 
     */
    private List<GetNamespaceFieldUsageDependentParserDependency> dependencies;
    /**
     * @return The system flag.  A value of false denotes a custom, or user defined object.  A value of true denotes a built in object.
     * 
     */
    private Boolean isSystem;
    /**
     * @return The parser display name.
     * 
     */
    private String parserDisplayName;
    /**
     * @return The parser unique identifier.
     * 
     */
    private String parserId;
    /**
     * @return The parser name.
     * 
     */
    private String parserName;
    /**
     * @return The parser type
     * 
     */
    private String parserType;

    private GetNamespaceFieldUsageDependentParser() {}
    /**
     * @return The list of dependencies defined by the source.
     * 
     */
    public List<GetNamespaceFieldUsageDependentParserDependency> dependencies() {
        return this.dependencies;
    }
    /**
     * @return The system flag.  A value of false denotes a custom, or user defined object.  A value of true denotes a built in object.
     * 
     */
    public Boolean isSystem() {
        return this.isSystem;
    }
    /**
     * @return The parser display name.
     * 
     */
    public String parserDisplayName() {
        return this.parserDisplayName;
    }
    /**
     * @return The parser unique identifier.
     * 
     */
    public String parserId() {
        return this.parserId;
    }
    /**
     * @return The parser name.
     * 
     */
    public String parserName() {
        return this.parserName;
    }
    /**
     * @return The parser type
     * 
     */
    public String parserType() {
        return this.parserType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceFieldUsageDependentParser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNamespaceFieldUsageDependentParserDependency> dependencies;
        private Boolean isSystem;
        private String parserDisplayName;
        private String parserId;
        private String parserName;
        private String parserType;
        public Builder() {}
        public Builder(GetNamespaceFieldUsageDependentParser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependencies = defaults.dependencies;
    	      this.isSystem = defaults.isSystem;
    	      this.parserDisplayName = defaults.parserDisplayName;
    	      this.parserId = defaults.parserId;
    	      this.parserName = defaults.parserName;
    	      this.parserType = defaults.parserType;
        }

        @CustomType.Setter
        public Builder dependencies(List<GetNamespaceFieldUsageDependentParserDependency> dependencies) {
            if (dependencies == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "dependencies");
            }
            this.dependencies = dependencies;
            return this;
        }
        public Builder dependencies(GetNamespaceFieldUsageDependentParserDependency... dependencies) {
            return dependencies(List.of(dependencies));
        }
        @CustomType.Setter
        public Builder isSystem(Boolean isSystem) {
            if (isSystem == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "isSystem");
            }
            this.isSystem = isSystem;
            return this;
        }
        @CustomType.Setter
        public Builder parserDisplayName(String parserDisplayName) {
            if (parserDisplayName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "parserDisplayName");
            }
            this.parserDisplayName = parserDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder parserId(String parserId) {
            if (parserId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "parserId");
            }
            this.parserId = parserId;
            return this;
        }
        @CustomType.Setter
        public Builder parserName(String parserName) {
            if (parserName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "parserName");
            }
            this.parserName = parserName;
            return this;
        }
        @CustomType.Setter
        public Builder parserType(String parserType) {
            if (parserType == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParser", "parserType");
            }
            this.parserType = parserType;
            return this;
        }
        public GetNamespaceFieldUsageDependentParser build() {
            final var _resultValue = new GetNamespaceFieldUsageDependentParser();
            _resultValue.dependencies = dependencies;
            _resultValue.isSystem = isSystem;
            _resultValue.parserDisplayName = parserDisplayName;
            _resultValue.parserId = parserId;
            _resultValue.parserName = parserName;
            _resultValue.parserType = parserType;
            return _resultValue;
        }
    }
}
