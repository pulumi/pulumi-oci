// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNamespaceFieldUsageDependentParserDependency {
    /**
     * @return The display name of the dependency object
     * 
     */
    private String referenceDisplayName;
    /**
     * @return The unique identifier of the reference, if available.
     * 
     */
    private String referenceId;
    /**
     * @return The name of the dependency object
     * 
     */
    private String referenceName;
    /**
     * @return The type of reference that defines the dependency.
     * 
     */
    private String referenceType;
    /**
     * @return The dependency type.
     * 
     */
    private String type;

    private GetNamespaceFieldUsageDependentParserDependency() {}
    /**
     * @return The display name of the dependency object
     * 
     */
    public String referenceDisplayName() {
        return this.referenceDisplayName;
    }
    /**
     * @return The unique identifier of the reference, if available.
     * 
     */
    public String referenceId() {
        return this.referenceId;
    }
    /**
     * @return The name of the dependency object
     * 
     */
    public String referenceName() {
        return this.referenceName;
    }
    /**
     * @return The type of reference that defines the dependency.
     * 
     */
    public String referenceType() {
        return this.referenceType;
    }
    /**
     * @return The dependency type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceFieldUsageDependentParserDependency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String referenceDisplayName;
        private String referenceId;
        private String referenceName;
        private String referenceType;
        private String type;
        public Builder() {}
        public Builder(GetNamespaceFieldUsageDependentParserDependency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.referenceDisplayName = defaults.referenceDisplayName;
    	      this.referenceId = defaults.referenceId;
    	      this.referenceName = defaults.referenceName;
    	      this.referenceType = defaults.referenceType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder referenceDisplayName(String referenceDisplayName) {
            if (referenceDisplayName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParserDependency", "referenceDisplayName");
            }
            this.referenceDisplayName = referenceDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder referenceId(String referenceId) {
            if (referenceId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParserDependency", "referenceId");
            }
            this.referenceId = referenceId;
            return this;
        }
        @CustomType.Setter
        public Builder referenceName(String referenceName) {
            if (referenceName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParserDependency", "referenceName");
            }
            this.referenceName = referenceName;
            return this;
        }
        @CustomType.Setter
        public Builder referenceType(String referenceType) {
            if (referenceType == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParserDependency", "referenceType");
            }
            this.referenceType = referenceType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageDependentParserDependency", "type");
            }
            this.type = type;
            return this;
        }
        public GetNamespaceFieldUsageDependentParserDependency build() {
            final var _resultValue = new GetNamespaceFieldUsageDependentParserDependency();
            _resultValue.referenceDisplayName = referenceDisplayName;
            _resultValue.referenceId = referenceId;
            _resultValue.referenceName = referenceName;
            _resultValue.referenceType = referenceType;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
