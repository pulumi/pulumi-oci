// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceFieldUsageDependentParser;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceFieldUsageDependentSource;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNamespaceFieldUsageResult {
    /**
     * @return Parsers that depend on or use the field.
     * 
     */
    private List<GetNamespaceFieldUsageDependentParser> dependentParsers;
    /**
     * @return Sources that depend on or use the field.
     * 
     */
    private List<GetNamespaceFieldUsageDependentSource> dependentSources;
    private String fieldName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String namespace;

    private GetNamespaceFieldUsageResult() {}
    /**
     * @return Parsers that depend on or use the field.
     * 
     */
    public List<GetNamespaceFieldUsageDependentParser> dependentParsers() {
        return this.dependentParsers;
    }
    /**
     * @return Sources that depend on or use the field.
     * 
     */
    public List<GetNamespaceFieldUsageDependentSource> dependentSources() {
        return this.dependentSources;
    }
    public String fieldName() {
        return this.fieldName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String namespace() {
        return this.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceFieldUsageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNamespaceFieldUsageDependentParser> dependentParsers;
        private List<GetNamespaceFieldUsageDependentSource> dependentSources;
        private String fieldName;
        private String id;
        private String namespace;
        public Builder() {}
        public Builder(GetNamespaceFieldUsageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependentParsers = defaults.dependentParsers;
    	      this.dependentSources = defaults.dependentSources;
    	      this.fieldName = defaults.fieldName;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
        }

        @CustomType.Setter
        public Builder dependentParsers(List<GetNamespaceFieldUsageDependentParser> dependentParsers) {
            if (dependentParsers == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageResult", "dependentParsers");
            }
            this.dependentParsers = dependentParsers;
            return this;
        }
        public Builder dependentParsers(GetNamespaceFieldUsageDependentParser... dependentParsers) {
            return dependentParsers(List.of(dependentParsers));
        }
        @CustomType.Setter
        public Builder dependentSources(List<GetNamespaceFieldUsageDependentSource> dependentSources) {
            if (dependentSources == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageResult", "dependentSources");
            }
            this.dependentSources = dependentSources;
            return this;
        }
        public Builder dependentSources(GetNamespaceFieldUsageDependentSource... dependentSources) {
            return dependentSources(List.of(dependentSources));
        }
        @CustomType.Setter
        public Builder fieldName(String fieldName) {
            if (fieldName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageResult", "fieldName");
            }
            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceFieldUsageResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        public GetNamespaceFieldUsageResult build() {
            final var _resultValue = new GetNamespaceFieldUsageResult();
            _resultValue.dependentParsers = dependentParsers;
            _resultValue.dependentSources = dependentSources;
            _resultValue.fieldName = fieldName;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            return _resultValue;
        }
    }
}
