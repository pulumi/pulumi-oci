// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceIngestTimeRuleAction;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceIngestTimeRuleCondition;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNamespaceIngestTimeRuleResult {
    /**
     * @return The action(s) to be performed if the ingest time rule condition(s) are satisfied.
     * 
     */
    private List<GetNamespaceIngestTimeRuleAction> actions;
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The condition(s) to evaluate for an ingest time rule.
     * 
     */
    private List<GetNamespaceIngestTimeRuleCondition> conditions;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Description for this resource.
     * 
     */
    private String description;
    /**
     * @return The ingest time rule display name.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
     * 
     */
    private String id;
    private String ingestTimeRuleId;
    /**
     * @return A flag indicating whether or not the ingest time rule is enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return The namespace of the extracted metric. A valid value starts with an alphabetical character and includes only alphanumeric characters and underscores (_).
     * 
     */
    private String namespace;
    /**
     * @return The current state of the ingest time rule.
     * 
     */
    private String state;
    /**
     * @return The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetNamespaceIngestTimeRuleResult() {}
    /**
     * @return The action(s) to be performed if the ingest time rule condition(s) are satisfied.
     * 
     */
    public List<GetNamespaceIngestTimeRuleAction> actions() {
        return this.actions;
    }
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The condition(s) to evaluate for an ingest time rule.
     * 
     */
    public List<GetNamespaceIngestTimeRuleCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description for this resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ingest time rule display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ingestTimeRuleId() {
        return this.ingestTimeRuleId;
    }
    /**
     * @return A flag indicating whether or not the ingest time rule is enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return The namespace of the extracted metric. A valid value starts with an alphabetical character and includes only alphanumeric characters and underscores (_).
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The current state of the ingest time rule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceIngestTimeRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNamespaceIngestTimeRuleAction> actions;
        private String compartmentId;
        private List<GetNamespaceIngestTimeRuleCondition> conditions;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String ingestTimeRuleId;
        private Boolean isEnabled;
        private String namespace;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetNamespaceIngestTimeRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.compartmentId = defaults.compartmentId;
    	      this.conditions = defaults.conditions;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.ingestTimeRuleId = defaults.ingestTimeRuleId;
    	      this.isEnabled = defaults.isEnabled;
    	      this.namespace = defaults.namespace;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder actions(List<GetNamespaceIngestTimeRuleAction> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(GetNamespaceIngestTimeRuleAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetNamespaceIngestTimeRuleCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetNamespaceIngestTimeRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingestTimeRuleId(String ingestTimeRuleId) {
            if (ingestTimeRuleId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "ingestTimeRuleId");
            }
            this.ingestTimeRuleId = ingestTimeRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetNamespaceIngestTimeRuleResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetNamespaceIngestTimeRuleResult build() {
            final var _resultValue = new GetNamespaceIngestTimeRuleResult();
            _resultValue.actions = actions;
            _resultValue.compartmentId = compartmentId;
            _resultValue.conditions = conditions;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.ingestTimeRuleId = ingestTimeRuleId;
            _resultValue.isEnabled = isEnabled;
            _resultValue.namespace = namespace;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
