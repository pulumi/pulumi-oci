// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceLookupCategory;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceLookupField;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceLookupReferringSource;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceLookupStatusSummary;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNamespaceLookupResult {
    /**
     * @return The active edit version.
     * 
     */
    private String activeEditVersion;
    /**
     * @return The canonical link.
     * 
     */
    private String canonicalLink;
    /**
     * @return An array of categories assigned to this lookup. The isSystem flag denotes if each category assignment is user-created or Oracle-defined.
     * 
     */
    private List<GetNamespaceLookupCategory> categories;
    private String charEncoding;
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The default match value.
     * 
     */
    private String defaultMatchValue;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The lookup description.
     * 
     */
    private String description;
    /**
     * @return The edit version.
     * 
     */
    private String editVersion;
    /**
     * @return The lookup fields.
     * 
     */
    private List<GetNamespaceLookupField> fields;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
     * 
     */
    private String id;
    /**
     * @return A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    private String isBuiltIn;
    /**
     * @return A flag indicating if the lookup is hidden or not.  A hidden lookup will not be returned in list operations by default.
     * 
     */
    private Boolean isHidden;
    /**
     * @return The lookup display name.
     * 
     */
    private String lookupDisplayName;
    /**
     * @return The lookup OCID.
     * 
     */
    private String lookupId;
    /**
     * @return The lookup name.
     * 
     */
    private String lookupName;
    /**
     * @return The lookup reference as an integer.
     * 
     */
    private String lookupReference;
    /**
     * @return The lookup reference as a string.
     * 
     */
    private String lookupReferenceString;
    private String maxMatches;
    private String namespace;
    /**
     * @return AutoLookups
     * 
     */
    private List<GetNamespaceLookupReferringSource> referringSources;
    private String registerLookupFile;
    /**
     * @return StatusSummary
     * 
     */
    private List<GetNamespaceLookupStatusSummary> statusSummaries;
    /**
     * @return The last updated date.
     * 
     */
    private String timeUpdated;
    /**
     * @return The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     */
    private String type;

    private GetNamespaceLookupResult() {}
    /**
     * @return The active edit version.
     * 
     */
    public String activeEditVersion() {
        return this.activeEditVersion;
    }
    /**
     * @return The canonical link.
     * 
     */
    public String canonicalLink() {
        return this.canonicalLink;
    }
    /**
     * @return An array of categories assigned to this lookup. The isSystem flag denotes if each category assignment is user-created or Oracle-defined.
     * 
     */
    public List<GetNamespaceLookupCategory> categories() {
        return this.categories;
    }
    public String charEncoding() {
        return this.charEncoding;
    }
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The default match value.
     * 
     */
    public String defaultMatchValue() {
        return this.defaultMatchValue;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The lookup description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The edit version.
     * 
     */
    public String editVersion() {
        return this.editVersion;
    }
    /**
     * @return The lookup fields.
     * 
     */
    public List<GetNamespaceLookupField> fields() {
        return this.fields;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A flag indicating if the lookup is custom (user-defined) or built in.
     * 
     */
    public String isBuiltIn() {
        return this.isBuiltIn;
    }
    /**
     * @return A flag indicating if the lookup is hidden or not.  A hidden lookup will not be returned in list operations by default.
     * 
     */
    public Boolean isHidden() {
        return this.isHidden;
    }
    /**
     * @return The lookup display name.
     * 
     */
    public String lookupDisplayName() {
        return this.lookupDisplayName;
    }
    /**
     * @return The lookup OCID.
     * 
     */
    public String lookupId() {
        return this.lookupId;
    }
    /**
     * @return The lookup name.
     * 
     */
    public String lookupName() {
        return this.lookupName;
    }
    /**
     * @return The lookup reference as an integer.
     * 
     */
    public String lookupReference() {
        return this.lookupReference;
    }
    /**
     * @return The lookup reference as a string.
     * 
     */
    public String lookupReferenceString() {
        return this.lookupReferenceString;
    }
    public String maxMatches() {
        return this.maxMatches;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return AutoLookups
     * 
     */
    public List<GetNamespaceLookupReferringSource> referringSources() {
        return this.referringSources;
    }
    public String registerLookupFile() {
        return this.registerLookupFile;
    }
    /**
     * @return StatusSummary
     * 
     */
    public List<GetNamespaceLookupStatusSummary> statusSummaries() {
        return this.statusSummaries;
    }
    /**
     * @return The last updated date.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The lookup type. Valid values are Lookup, Dictionary or Module.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceLookupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activeEditVersion;
        private String canonicalLink;
        private List<GetNamespaceLookupCategory> categories;
        private String charEncoding;
        private String compartmentId;
        private String defaultMatchValue;
        private Map<String,String> definedTags;
        private String description;
        private String editVersion;
        private List<GetNamespaceLookupField> fields;
        private Map<String,String> freeformTags;
        private String id;
        private String isBuiltIn;
        private Boolean isHidden;
        private String lookupDisplayName;
        private String lookupId;
        private String lookupName;
        private String lookupReference;
        private String lookupReferenceString;
        private String maxMatches;
        private String namespace;
        private List<GetNamespaceLookupReferringSource> referringSources;
        private String registerLookupFile;
        private List<GetNamespaceLookupStatusSummary> statusSummaries;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetNamespaceLookupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeEditVersion = defaults.activeEditVersion;
    	      this.canonicalLink = defaults.canonicalLink;
    	      this.categories = defaults.categories;
    	      this.charEncoding = defaults.charEncoding;
    	      this.compartmentId = defaults.compartmentId;
    	      this.defaultMatchValue = defaults.defaultMatchValue;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.editVersion = defaults.editVersion;
    	      this.fields = defaults.fields;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isBuiltIn = defaults.isBuiltIn;
    	      this.isHidden = defaults.isHidden;
    	      this.lookupDisplayName = defaults.lookupDisplayName;
    	      this.lookupId = defaults.lookupId;
    	      this.lookupName = defaults.lookupName;
    	      this.lookupReference = defaults.lookupReference;
    	      this.lookupReferenceString = defaults.lookupReferenceString;
    	      this.maxMatches = defaults.maxMatches;
    	      this.namespace = defaults.namespace;
    	      this.referringSources = defaults.referringSources;
    	      this.registerLookupFile = defaults.registerLookupFile;
    	      this.statusSummaries = defaults.statusSummaries;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder activeEditVersion(String activeEditVersion) {
            if (activeEditVersion == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "activeEditVersion");
            }
            this.activeEditVersion = activeEditVersion;
            return this;
        }
        @CustomType.Setter
        public Builder canonicalLink(String canonicalLink) {
            if (canonicalLink == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "canonicalLink");
            }
            this.canonicalLink = canonicalLink;
            return this;
        }
        @CustomType.Setter
        public Builder categories(List<GetNamespaceLookupCategory> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(GetNamespaceLookupCategory... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder charEncoding(String charEncoding) {
            if (charEncoding == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "charEncoding");
            }
            this.charEncoding = charEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMatchValue(String defaultMatchValue) {
            if (defaultMatchValue == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "defaultMatchValue");
            }
            this.defaultMatchValue = defaultMatchValue;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder editVersion(String editVersion) {
            if (editVersion == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "editVersion");
            }
            this.editVersion = editVersion;
            return this;
        }
        @CustomType.Setter
        public Builder fields(List<GetNamespaceLookupField> fields) {
            if (fields == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "fields");
            }
            this.fields = fields;
            return this;
        }
        public Builder fields(GetNamespaceLookupField... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isBuiltIn(String isBuiltIn) {
            if (isBuiltIn == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "isBuiltIn");
            }
            this.isBuiltIn = isBuiltIn;
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(Boolean isHidden) {
            if (isHidden == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "isHidden");
            }
            this.isHidden = isHidden;
            return this;
        }
        @CustomType.Setter
        public Builder lookupDisplayName(String lookupDisplayName) {
            if (lookupDisplayName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "lookupDisplayName");
            }
            this.lookupDisplayName = lookupDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder lookupId(String lookupId) {
            if (lookupId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "lookupId");
            }
            this.lookupId = lookupId;
            return this;
        }
        @CustomType.Setter
        public Builder lookupName(String lookupName) {
            if (lookupName == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "lookupName");
            }
            this.lookupName = lookupName;
            return this;
        }
        @CustomType.Setter
        public Builder lookupReference(String lookupReference) {
            if (lookupReference == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "lookupReference");
            }
            this.lookupReference = lookupReference;
            return this;
        }
        @CustomType.Setter
        public Builder lookupReferenceString(String lookupReferenceString) {
            if (lookupReferenceString == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "lookupReferenceString");
            }
            this.lookupReferenceString = lookupReferenceString;
            return this;
        }
        @CustomType.Setter
        public Builder maxMatches(String maxMatches) {
            if (maxMatches == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "maxMatches");
            }
            this.maxMatches = maxMatches;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder referringSources(List<GetNamespaceLookupReferringSource> referringSources) {
            if (referringSources == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "referringSources");
            }
            this.referringSources = referringSources;
            return this;
        }
        public Builder referringSources(GetNamespaceLookupReferringSource... referringSources) {
            return referringSources(List.of(referringSources));
        }
        @CustomType.Setter
        public Builder registerLookupFile(String registerLookupFile) {
            if (registerLookupFile == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "registerLookupFile");
            }
            this.registerLookupFile = registerLookupFile;
            return this;
        }
        @CustomType.Setter
        public Builder statusSummaries(List<GetNamespaceLookupStatusSummary> statusSummaries) {
            if (statusSummaries == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "statusSummaries");
            }
            this.statusSummaries = statusSummaries;
            return this;
        }
        public Builder statusSummaries(GetNamespaceLookupStatusSummary... statusSummaries) {
            return statusSummaries(List.of(statusSummaries));
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNamespaceLookupResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetNamespaceLookupResult build() {
            final var _resultValue = new GetNamespaceLookupResult();
            _resultValue.activeEditVersion = activeEditVersion;
            _resultValue.canonicalLink = canonicalLink;
            _resultValue.categories = categories;
            _resultValue.charEncoding = charEncoding;
            _resultValue.compartmentId = compartmentId;
            _resultValue.defaultMatchValue = defaultMatchValue;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.editVersion = editVersion;
            _resultValue.fields = fields;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isBuiltIn = isBuiltIn;
            _resultValue.isHidden = isHidden;
            _resultValue.lookupDisplayName = lookupDisplayName;
            _resultValue.lookupId = lookupId;
            _resultValue.lookupName = lookupName;
            _resultValue.lookupReference = lookupReference;
            _resultValue.lookupReferenceString = lookupReferenceString;
            _resultValue.maxMatches = maxMatches;
            _resultValue.namespace = namespace;
            _resultValue.referringSources = referringSources;
            _resultValue.registerLookupFile = registerLookupFile;
            _resultValue.statusSummaries = statusSummaries;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
