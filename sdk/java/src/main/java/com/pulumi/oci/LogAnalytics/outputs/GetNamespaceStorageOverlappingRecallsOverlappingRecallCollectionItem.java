// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem {
    /**
     * @return This is the id of the associated recalled data collection
     * 
     */
    private String collectionId;
    /**
     * @return This is the user who initiated the recall request
     * 
     */
    private String createdBy;
    /**
     * @return This is the list of logsets associated with this recall
     * 
     */
    private String logSets;
    /**
     * @return This is the purpose of the recall
     * 
     */
    private String purpose;
    /**
     * @return This is the query associated with the recall
     * 
     */
    private String queryString;
    /**
     * @return This is the id for the recall request
     * 
     */
    private String recallId;
    /**
     * @return This is the status of the recall
     * 
     */
    private String status;
    /**
     * @return This is the end of the time range for recalled data
     * 
     */
    private String timeDataEnded;
    /**
     * @return This is the start of the time range for recalled data
     * 
     */
    private String timeDataStarted;
    /**
     * @return This is the time when the recall operation was started for this recall request
     * 
     */
    private String timeStarted;

    private GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem() {}
    /**
     * @return This is the id of the associated recalled data collection
     * 
     */
    public String collectionId() {
        return this.collectionId;
    }
    /**
     * @return This is the user who initiated the recall request
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return This is the list of logsets associated with this recall
     * 
     */
    public String logSets() {
        return this.logSets;
    }
    /**
     * @return This is the purpose of the recall
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return This is the query associated with the recall
     * 
     */
    public String queryString() {
        return this.queryString;
    }
    /**
     * @return This is the id for the recall request
     * 
     */
    public String recallId() {
        return this.recallId;
    }
    /**
     * @return This is the status of the recall
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return This is the end of the time range for recalled data
     * 
     */
    public String timeDataEnded() {
        return this.timeDataEnded;
    }
    /**
     * @return This is the start of the time range for recalled data
     * 
     */
    public String timeDataStarted() {
        return this.timeDataStarted;
    }
    /**
     * @return This is the time when the recall operation was started for this recall request
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collectionId;
        private String createdBy;
        private String logSets;
        private String purpose;
        private String queryString;
        private String recallId;
        private String status;
        private String timeDataEnded;
        private String timeDataStarted;
        private String timeStarted;
        public Builder() {}
        public Builder(GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionId = defaults.collectionId;
    	      this.createdBy = defaults.createdBy;
    	      this.logSets = defaults.logSets;
    	      this.purpose = defaults.purpose;
    	      this.queryString = defaults.queryString;
    	      this.recallId = defaults.recallId;
    	      this.status = defaults.status;
    	      this.timeDataEnded = defaults.timeDataEnded;
    	      this.timeDataStarted = defaults.timeDataStarted;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder collectionId(String collectionId) {
            if (collectionId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "collectionId");
            }
            this.collectionId = collectionId;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder logSets(String logSets) {
            if (logSets == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "logSets");
            }
            this.logSets = logSets;
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            if (purpose == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "purpose");
            }
            this.purpose = purpose;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(String queryString) {
            if (queryString == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "queryString");
            }
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder recallId(String recallId) {
            if (recallId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "recallId");
            }
            this.recallId = recallId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeDataEnded(String timeDataEnded) {
            if (timeDataEnded == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "timeDataEnded");
            }
            this.timeDataEnded = timeDataEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeDataStarted(String timeDataStarted) {
            if (timeDataStarted == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "timeDataStarted");
            }
            this.timeDataStarted = timeDataStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        public GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem build() {
            final var _resultValue = new GetNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem();
            _resultValue.collectionId = collectionId;
            _resultValue.createdBy = createdBy;
            _resultValue.logSets = logSets;
            _resultValue.purpose = purpose;
            _resultValue.queryString = queryString;
            _resultValue.recallId = recallId;
            _resultValue.status = status;
            _resultValue.timeDataEnded = timeDataEnded;
            _resultValue.timeDataStarted = timeDataStarted;
            _resultValue.timeStarted = timeStarted;
            return _resultValue;
        }
    }
}
