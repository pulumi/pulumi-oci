// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceStorageOverlappingRecallsFilter;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceStorageOverlappingRecallsResult {
    private @Nullable List<GetNamespaceStorageOverlappingRecallsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String namespace;
    /**
     * @return The list of overlapping_recall_collection.
     * 
     */
    private List<GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection> overlappingRecallCollections;
    /**
     * @return This is the end of the time range of the archival data
     * 
     */
    private @Nullable String timeDataEnded;
    /**
     * @return This is the start of the time range of the archival data
     * 
     */
    private @Nullable String timeDataStarted;

    private GetNamespaceStorageOverlappingRecallsResult() {}
    public List<GetNamespaceStorageOverlappingRecallsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The list of overlapping_recall_collection.
     * 
     */
    public List<GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection> overlappingRecallCollections() {
        return this.overlappingRecallCollections;
    }
    /**
     * @return This is the end of the time range of the archival data
     * 
     */
    public Optional<String> timeDataEnded() {
        return Optional.ofNullable(this.timeDataEnded);
    }
    /**
     * @return This is the start of the time range of the archival data
     * 
     */
    public Optional<String> timeDataStarted() {
        return Optional.ofNullable(this.timeDataStarted);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceStorageOverlappingRecallsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetNamespaceStorageOverlappingRecallsFilter> filters;
        private String id;
        private String namespace;
        private List<GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection> overlappingRecallCollections;
        private @Nullable String timeDataEnded;
        private @Nullable String timeDataStarted;
        public Builder() {}
        public Builder(GetNamespaceStorageOverlappingRecallsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.overlappingRecallCollections = defaults.overlappingRecallCollections;
    	      this.timeDataEnded = defaults.timeDataEnded;
    	      this.timeDataStarted = defaults.timeDataStarted;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetNamespaceStorageOverlappingRecallsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetNamespaceStorageOverlappingRecallsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder overlappingRecallCollections(List<GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection> overlappingRecallCollections) {
            if (overlappingRecallCollections == null) {
              throw new MissingRequiredPropertyException("GetNamespaceStorageOverlappingRecallsResult", "overlappingRecallCollections");
            }
            this.overlappingRecallCollections = overlappingRecallCollections;
            return this;
        }
        public Builder overlappingRecallCollections(GetNamespaceStorageOverlappingRecallsOverlappingRecallCollection... overlappingRecallCollections) {
            return overlappingRecallCollections(List.of(overlappingRecallCollections));
        }
        @CustomType.Setter
        public Builder timeDataEnded(@Nullable String timeDataEnded) {

            this.timeDataEnded = timeDataEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeDataStarted(@Nullable String timeDataStarted) {

            this.timeDataStarted = timeDataStarted;
            return this;
        }
        public GetNamespaceStorageOverlappingRecallsResult build() {
            final var _resultValue = new GetNamespaceStorageOverlappingRecallsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.overlappingRecallCollections = overlappingRecallCollections;
            _resultValue.timeDataEnded = timeDataEnded;
            _resultValue.timeDataStarted = timeDataStarted;
            return _resultValue;
        }
    }
}
