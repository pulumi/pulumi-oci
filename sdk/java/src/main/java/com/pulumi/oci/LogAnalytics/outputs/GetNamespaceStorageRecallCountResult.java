// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNamespaceStorageRecallCountResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String namespace;
    /**
     * @return This is the total number of recalls made so far
     * 
     */
    private Integer recallCount;
    /**
     * @return This is the number of recalls that failed
     * 
     */
    private Integer recallFailed;
    /**
     * @return This is the maximum number of recalls (including successful and pending recalls) allowed
     * 
     */
    private Integer recallLimit;
    /**
     * @return This is the number of recalls in pending state
     * 
     */
    private Integer recallPending;
    /**
     * @return This is the number of recalls that succeeded
     * 
     */
    private Integer recallSucceeded;

    private GetNamespaceStorageRecallCountResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return This is the total number of recalls made so far
     * 
     */
    public Integer recallCount() {
        return this.recallCount;
    }
    /**
     * @return This is the number of recalls that failed
     * 
     */
    public Integer recallFailed() {
        return this.recallFailed;
    }
    /**
     * @return This is the maximum number of recalls (including successful and pending recalls) allowed
     * 
     */
    public Integer recallLimit() {
        return this.recallLimit;
    }
    /**
     * @return This is the number of recalls in pending state
     * 
     */
    public Integer recallPending() {
        return this.recallPending;
    }
    /**
     * @return This is the number of recalls that succeeded
     * 
     */
    public Integer recallSucceeded() {
        return this.recallSucceeded;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceStorageRecallCountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String namespace;
        private Integer recallCount;
        private Integer recallFailed;
        private Integer recallLimit;
        private Integer recallPending;
        private Integer recallSucceeded;
        public Builder() {}
        public Builder(GetNamespaceStorageRecallCountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.recallCount = defaults.recallCount;
    	      this.recallFailed = defaults.recallFailed;
    	      this.recallLimit = defaults.recallLimit;
    	      this.recallPending = defaults.recallPending;
    	      this.recallSucceeded = defaults.recallSucceeded;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder recallCount(Integer recallCount) {
            this.recallCount = Objects.requireNonNull(recallCount);
            return this;
        }
        @CustomType.Setter
        public Builder recallFailed(Integer recallFailed) {
            this.recallFailed = Objects.requireNonNull(recallFailed);
            return this;
        }
        @CustomType.Setter
        public Builder recallLimit(Integer recallLimit) {
            this.recallLimit = Objects.requireNonNull(recallLimit);
            return this;
        }
        @CustomType.Setter
        public Builder recallPending(Integer recallPending) {
            this.recallPending = Objects.requireNonNull(recallPending);
            return this;
        }
        @CustomType.Setter
        public Builder recallSucceeded(Integer recallSucceeded) {
            this.recallSucceeded = Objects.requireNonNull(recallSucceeded);
            return this;
        }
        public GetNamespaceStorageRecallCountResult build() {
            final var _resultValue = new GetNamespaceStorageRecallCountResult();
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.recallCount = recallCount;
            _resultValue.recallFailed = recallFailed;
            _resultValue.recallLimit = recallLimit;
            _resultValue.recallPending = recallPending;
            _resultValue.recallSucceeded = recallSucceeded;
            return _resultValue;
        }
    }
}
