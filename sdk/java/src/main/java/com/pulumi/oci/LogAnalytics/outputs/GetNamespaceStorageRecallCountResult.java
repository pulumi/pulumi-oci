// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceStorageRecallCountResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String namespace;
    /**
     * @return This is the total number of recalls made so far
     * 
     */
    private @Nullable Integer recallCount;
    /**
     * @return This is the number of recalls that failed
     * 
     */
    private @Nullable Integer recallFailed;
    /**
     * @return This is the maximum number of recalls (including successful and pending recalls) allowed
     * 
     */
    private @Nullable Integer recallLimit;
    /**
     * @return This is the number of recalls in pending state
     * 
     */
    private @Nullable Integer recallPending;
    /**
     * @return This is the number of recalls that succeeded
     * 
     */
    private @Nullable Integer recallSucceeded;

    private GetNamespaceStorageRecallCountResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return This is the total number of recalls made so far
     * 
     */
    public Optional<Integer> recallCount() {
        return Optional.ofNullable(this.recallCount);
    }
    /**
     * @return This is the number of recalls that failed
     * 
     */
    public Optional<Integer> recallFailed() {
        return Optional.ofNullable(this.recallFailed);
    }
    /**
     * @return This is the maximum number of recalls (including successful and pending recalls) allowed
     * 
     */
    public Optional<Integer> recallLimit() {
        return Optional.ofNullable(this.recallLimit);
    }
    /**
     * @return This is the number of recalls in pending state
     * 
     */
    public Optional<Integer> recallPending() {
        return Optional.ofNullable(this.recallPending);
    }
    /**
     * @return This is the number of recalls that succeeded
     * 
     */
    public Optional<Integer> recallSucceeded() {
        return Optional.ofNullable(this.recallSucceeded);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceStorageRecallCountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private String namespace;
        private @Nullable Integer recallCount;
        private @Nullable Integer recallFailed;
        private @Nullable Integer recallLimit;
        private @Nullable Integer recallPending;
        private @Nullable Integer recallSucceeded;
        public Builder() {}
        public Builder(GetNamespaceStorageRecallCountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.recallCount = defaults.recallCount;
    	      this.recallFailed = defaults.recallFailed;
    	      this.recallLimit = defaults.recallLimit;
    	      this.recallPending = defaults.recallPending;
    	      this.recallSucceeded = defaults.recallSucceeded;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder recallCount(@Nullable Integer recallCount) {
            this.recallCount = recallCount;
            return this;
        }
        @CustomType.Setter
        public Builder recallFailed(@Nullable Integer recallFailed) {
            this.recallFailed = recallFailed;
            return this;
        }
        @CustomType.Setter
        public Builder recallLimit(@Nullable Integer recallLimit) {
            this.recallLimit = recallLimit;
            return this;
        }
        @CustomType.Setter
        public Builder recallPending(@Nullable Integer recallPending) {
            this.recallPending = recallPending;
            return this;
        }
        @CustomType.Setter
        public Builder recallSucceeded(@Nullable Integer recallSucceeded) {
            this.recallSucceeded = recallSucceeded;
            return this;
        }
        public GetNamespaceStorageRecallCountResult build() {
            final var o = new GetNamespaceStorageRecallCountResult();
            o.id = id;
            o.namespace = namespace;
            o.recallCount = recallCount;
            o.recallFailed = recallFailed;
            o.recallLimit = recallLimit;
            o.recallPending = recallPending;
            o.recallSucceeded = recallSucceeded;
            return o;
        }
    }
}
