// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.GetNamespaceTemplateFacet;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNamespaceTemplateResult {
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return Base64 encoded template content.
     * 
     */
    private String content;
    /**
     * @return Content format. For example - XML.
     * 
     */
    private String contentFormat;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Description for this resource.
     * 
     */
    private String description;
    /**
     * @return Facets of the template
     * 
     */
    private List<GetNamespaceTemplateFacet> facets;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The system flag.  A value of false denotes a custom, or user defined object.  A value of true denotes a built in object.
     * 
     */
    private Boolean isSystem;
    /**
     * @return The template name.
     * 
     */
    private String name;
    private String namespace;
    /**
     * @return Base64 encoded template parameters.
     * 
     */
    private String parameters;
    /**
     * @return Parameters format.  For example - NAME_VALUE_PAIR.
     * 
     */
    private String parametersFormat;
    /**
     * @return Base64 encoded parameters metadata definition.
     * 
     */
    private String parametersMetadata;
    /**
     * @return The current state of the template.
     * 
     */
    private String state;
    private String templateId;
    /**
     * @return The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;
    /**
     * @return The template type.
     * 
     */
    private String type;

    private GetNamespaceTemplateResult() {}
    /**
     * @return Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Base64 encoded template content.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return Content format. For example - XML.
     * 
     */
    public String contentFormat() {
        return this.contentFormat;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description for this resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Facets of the template
     * 
     */
    public List<GetNamespaceTemplateFacet> facets() {
        return this.facets;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The system flag.  A value of false denotes a custom, or user defined object.  A value of true denotes a built in object.
     * 
     */
    public Boolean isSystem() {
        return this.isSystem;
    }
    /**
     * @return The template name.
     * 
     */
    public String name() {
        return this.name;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Base64 encoded template parameters.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return Parameters format.  For example - NAME_VALUE_PAIR.
     * 
     */
    public String parametersFormat() {
        return this.parametersFormat;
    }
    /**
     * @return Base64 encoded parameters metadata definition.
     * 
     */
    public String parametersMetadata() {
        return this.parametersMetadata;
    }
    /**
     * @return The current state of the template.
     * 
     */
    public String state() {
        return this.state;
    }
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return The date and time the resource was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the resource was last updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The template type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String content;
        private String contentFormat;
        private Map<String,String> definedTags;
        private String description;
        private List<GetNamespaceTemplateFacet> facets;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isSystem;
        private String name;
        private String namespace;
        private String parameters;
        private String parametersFormat;
        private String parametersMetadata;
        private String state;
        private String templateId;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetNamespaceTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.content = defaults.content;
    	      this.contentFormat = defaults.contentFormat;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.facets = defaults.facets;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isSystem = defaults.isSystem;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.parameters = defaults.parameters;
    	      this.parametersFormat = defaults.parametersFormat;
    	      this.parametersMetadata = defaults.parametersMetadata;
    	      this.state = defaults.state;
    	      this.templateId = defaults.templateId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentFormat(String contentFormat) {
            if (contentFormat == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "contentFormat");
            }
            this.contentFormat = contentFormat;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder facets(List<GetNamespaceTemplateFacet> facets) {
            if (facets == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "facets");
            }
            this.facets = facets;
            return this;
        }
        public Builder facets(GetNamespaceTemplateFacet... facets) {
            return facets(List.of(facets));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSystem(Boolean isSystem) {
            if (isSystem == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "isSystem");
            }
            this.isSystem = isSystem;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder parametersFormat(String parametersFormat) {
            if (parametersFormat == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "parametersFormat");
            }
            this.parametersFormat = parametersFormat;
            return this;
        }
        @CustomType.Setter
        public Builder parametersMetadata(String parametersMetadata) {
            if (parametersMetadata == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "parametersMetadata");
            }
            this.parametersMetadata = parametersMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNamespaceTemplateResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetNamespaceTemplateResult build() {
            final var _resultValue = new GetNamespaceTemplateResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.content = content;
            _resultValue.contentFormat = contentFormat;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.facets = facets;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isSystem = isSystem;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.parameters = parameters;
            _resultValue.parametersFormat = parametersFormat;
            _resultValue.parametersMetadata = parametersMetadata;
            _resultValue.state = state;
            _resultValue.templateId = templateId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
