// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNamespacesNamespaceCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return This indicates if old data can be archived for a tenancy
     * 
     */
    private Boolean isArchivingEnabled;
    /**
     * @return This indicates if the tenancy is data ever ingested
     * 
     */
    private Boolean isDataEverIngested;
    private Boolean isLogsetEnabled;
    /**
     * @return This indicates if the tenancy is onboarded to Logging Analytics
     * 
     */
    private Boolean isOnboarded;
    /**
     * @return This is the namespace name of a tenancy
     * * `is_logSet_enabled` - This indicates if the tenancy is logSet enable
     * 
     */
    private String namespace;

    private GetNamespacesNamespaceCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return This indicates if old data can be archived for a tenancy
     * 
     */
    public Boolean isArchivingEnabled() {
        return this.isArchivingEnabled;
    }
    /**
     * @return This indicates if the tenancy is data ever ingested
     * 
     */
    public Boolean isDataEverIngested() {
        return this.isDataEverIngested;
    }
    public Boolean isLogsetEnabled() {
        return this.isLogsetEnabled;
    }
    /**
     * @return This indicates if the tenancy is onboarded to Logging Analytics
     * 
     */
    public Boolean isOnboarded() {
        return this.isOnboarded;
    }
    /**
     * @return This is the namespace name of a tenancy
     * * `is_logSet_enabled` - This indicates if the tenancy is logSet enable
     * 
     */
    public String namespace() {
        return this.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespacesNamespaceCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Boolean isArchivingEnabled;
        private Boolean isDataEverIngested;
        private Boolean isLogsetEnabled;
        private Boolean isOnboarded;
        private String namespace;
        public Builder() {}
        public Builder(GetNamespacesNamespaceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.isArchivingEnabled = defaults.isArchivingEnabled;
    	      this.isDataEverIngested = defaults.isDataEverIngested;
    	      this.isLogsetEnabled = defaults.isLogsetEnabled;
    	      this.isOnboarded = defaults.isOnboarded;
    	      this.namespace = defaults.namespace;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder isArchivingEnabled(Boolean isArchivingEnabled) {
            if (isArchivingEnabled == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "isArchivingEnabled");
            }
            this.isArchivingEnabled = isArchivingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDataEverIngested(Boolean isDataEverIngested) {
            if (isDataEverIngested == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "isDataEverIngested");
            }
            this.isDataEverIngested = isDataEverIngested;
            return this;
        }
        @CustomType.Setter
        public Builder isLogsetEnabled(Boolean isLogsetEnabled) {
            if (isLogsetEnabled == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "isLogsetEnabled");
            }
            this.isLogsetEnabled = isLogsetEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isOnboarded(Boolean isOnboarded) {
            if (isOnboarded == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "isOnboarded");
            }
            this.isOnboarded = isOnboarded;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespacesNamespaceCollectionItem", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        public GetNamespacesNamespaceCollectionItem build() {
            final var _resultValue = new GetNamespacesNamespaceCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.isArchivingEnabled = isArchivingEnabled;
            _resultValue.isDataEverIngested = isDataEverIngested;
            _resultValue.isLogsetEnabled = isLogsetEnabled;
            _resultValue.isOnboarded = isOnboarded;
            _resultValue.namespace = namespace;
            return _resultValue;
        }
    }
}
