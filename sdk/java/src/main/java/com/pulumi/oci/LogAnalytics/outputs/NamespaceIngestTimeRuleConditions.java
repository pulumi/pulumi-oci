// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.LogAnalytics.outputs.NamespaceIngestTimeRuleConditionsAdditionalCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class NamespaceIngestTimeRuleConditions {
    /**
     * @return (Updatable) Optional additional condition(s) to be evaluated.
     * 
     */
    private @Nullable List<NamespaceIngestTimeRuleConditionsAdditionalCondition> additionalConditions;
    /**
     * @return (Updatable) The field name to be evaluated.
     * 
     */
    private String fieldName;
    /**
     * @return (Updatable) The operator to be used for evaluating the field.
     * 
     */
    private String fieldOperator;
    /**
     * @return (Updatable) The field value to be evaluated.
     * 
     */
    private String fieldValue;
    /**
     * @return (Updatable) Discriminator.
     * 
     */
    private String kind;

    private NamespaceIngestTimeRuleConditions() {}
    /**
     * @return (Updatable) Optional additional condition(s) to be evaluated.
     * 
     */
    public List<NamespaceIngestTimeRuleConditionsAdditionalCondition> additionalConditions() {
        return this.additionalConditions == null ? List.of() : this.additionalConditions;
    }
    /**
     * @return (Updatable) The field name to be evaluated.
     * 
     */
    public String fieldName() {
        return this.fieldName;
    }
    /**
     * @return (Updatable) The operator to be used for evaluating the field.
     * 
     */
    public String fieldOperator() {
        return this.fieldOperator;
    }
    /**
     * @return (Updatable) The field value to be evaluated.
     * 
     */
    public String fieldValue() {
        return this.fieldValue;
    }
    /**
     * @return (Updatable) Discriminator.
     * 
     */
    public String kind() {
        return this.kind;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamespaceIngestTimeRuleConditions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<NamespaceIngestTimeRuleConditionsAdditionalCondition> additionalConditions;
        private String fieldName;
        private String fieldOperator;
        private String fieldValue;
        private String kind;
        public Builder() {}
        public Builder(NamespaceIngestTimeRuleConditions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalConditions = defaults.additionalConditions;
    	      this.fieldName = defaults.fieldName;
    	      this.fieldOperator = defaults.fieldOperator;
    	      this.fieldValue = defaults.fieldValue;
    	      this.kind = defaults.kind;
        }

        @CustomType.Setter
        public Builder additionalConditions(@Nullable List<NamespaceIngestTimeRuleConditionsAdditionalCondition> additionalConditions) {

            this.additionalConditions = additionalConditions;
            return this;
        }
        public Builder additionalConditions(NamespaceIngestTimeRuleConditionsAdditionalCondition... additionalConditions) {
            return additionalConditions(List.of(additionalConditions));
        }
        @CustomType.Setter
        public Builder fieldName(String fieldName) {
            if (fieldName == null) {
              throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditions", "fieldName");
            }
            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder fieldOperator(String fieldOperator) {
            if (fieldOperator == null) {
              throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditions", "fieldOperator");
            }
            this.fieldOperator = fieldOperator;
            return this;
        }
        @CustomType.Setter
        public Builder fieldValue(String fieldValue) {
            if (fieldValue == null) {
              throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditions", "fieldValue");
            }
            this.fieldValue = fieldValue;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("NamespaceIngestTimeRuleConditions", "kind");
            }
            this.kind = kind;
            return this;
        }
        public NamespaceIngestTimeRuleConditions build() {
            final var _resultValue = new NamespaceIngestTimeRuleConditions();
            _resultValue.additionalConditions = additionalConditions;
            _resultValue.fieldName = fieldName;
            _resultValue.fieldOperator = fieldOperator;
            _resultValue.fieldValue = fieldValue;
            _resultValue.kind = kind;
            return _resultValue;
        }
    }
}
