// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogConfigurationSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogConfigurationSourceArgs Empty = new LogConfigurationSourceArgs();

    /**
     * Log object category.
     * 
     */
    @Import(name="category", required=true)
    private Output<String> category;

    /**
     * @return Log object category.
     * 
     */
    public Output<String> category() {
        return this.category;
    }

    /**
     * (Updatable) Log category parameters are stored here.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,Object>> parameters;

    /**
     * @return (Updatable) Log category parameters are stored here.
     * 
     */
    public Optional<Output<Map<String,Object>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The unique identifier of the resource emitting the log.
     * 
     */
    @Import(name="resource", required=true)
    private Output<String> resource;

    /**
     * @return The unique identifier of the resource emitting the log.
     * 
     */
    public Output<String> resource() {
        return this.resource;
    }

    /**
     * Service generating log.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Service generating log.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * The log source.
     * * **OCISERVICE:** Oracle Service.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The log source.
     * * **OCISERVICE:** Oracle Service.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private LogConfigurationSourceArgs() {}

    private LogConfigurationSourceArgs(LogConfigurationSourceArgs $) {
        this.category = $.category;
        this.parameters = $.parameters;
        this.resource = $.resource;
        this.service = $.service;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogConfigurationSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogConfigurationSourceArgs $;

        public Builder() {
            $ = new LogConfigurationSourceArgs();
        }

        public Builder(LogConfigurationSourceArgs defaults) {
            $ = new LogConfigurationSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Log object category.
         * 
         * @return builder
         * 
         */
        public Builder category(Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Log object category.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param parameters (Updatable) Log category parameters are stored here.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,Object>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters (Updatable) Log category parameters are stored here.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,Object> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param resource The unique identifier of the resource emitting the log.
         * 
         * @return builder
         * 
         */
        public Builder resource(Output<String> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource The unique identifier of the resource emitting the log.
         * 
         * @return builder
         * 
         */
        public Builder resource(String resource) {
            return resource(Output.of(resource));
        }

        /**
         * @param service Service generating log.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Service generating log.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param sourceType The log source.
         * * **OCISERVICE:** Oracle Service.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The log source.
         * * **OCISERVICE:** Oracle Service.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public LogConfigurationSourceArgs build() {
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.resource = Objects.requireNonNull($.resource, "expected parameter 'resource' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
