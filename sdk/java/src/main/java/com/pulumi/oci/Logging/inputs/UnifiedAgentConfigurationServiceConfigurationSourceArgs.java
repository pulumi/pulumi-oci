// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Logging.inputs.UnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptionsArgs;
import com.pulumi.oci.Logging.inputs.UnifiedAgentConfigurationServiceConfigurationSourceParserArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnifiedAgentConfigurationServiceConfigurationSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final UnifiedAgentConfigurationServiceConfigurationSourceArgs Empty = new UnifiedAgentConfigurationServiceConfigurationSourceArgs();

    /**
     * (Updatable) Advanced options for logging configuration
     * 
     */
    @Import(name="advancedOptions")
    private @Nullable Output<UnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptionsArgs> advancedOptions;

    /**
     * @return (Updatable) Advanced options for logging configuration
     * 
     */
    public Optional<Output<UnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptionsArgs>> advancedOptions() {
        return Optional.ofNullable(this.advancedOptions);
    }

    /**
     * (Updatable) Windows event log channels.
     * 
     */
    @Import(name="channels")
    private @Nullable Output<List<String>> channels;

    /**
     * @return (Updatable) Windows event log channels.
     * 
     */
    public Optional<Output<List<String>>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * (Updatable) User customized source plugin.
     * 
     */
    @Import(name="customPlugin")
    private @Nullable Output<String> customPlugin;

    /**
     * @return (Updatable) User customized source plugin.
     * 
     */
    public Optional<Output<String>> customPlugin() {
        return Optional.ofNullable(this.customPlugin);
    }

    /**
     * (Updatable) Unique name for the source.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Unique name for the source.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) Source parser object.
     * 
     */
    @Import(name="parser")
    private @Nullable Output<UnifiedAgentConfigurationServiceConfigurationSourceParserArgs> parser;

    /**
     * @return (Updatable) Source parser object.
     * 
     */
    public Optional<Output<UnifiedAgentConfigurationServiceConfigurationSourceParserArgs>> parser() {
        return Optional.ofNullable(this.parser);
    }

    /**
     * (Updatable) Absolute paths for log source files. Wildcards can be used.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    /**
     * @return (Updatable) Absolute paths for log source files. Wildcards can be used.
     * 
     */
    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * (Updatable) Unified schema logging source type.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return (Updatable) Unified schema logging source type.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private UnifiedAgentConfigurationServiceConfigurationSourceArgs() {}

    private UnifiedAgentConfigurationServiceConfigurationSourceArgs(UnifiedAgentConfigurationServiceConfigurationSourceArgs $) {
        this.advancedOptions = $.advancedOptions;
        this.channels = $.channels;
        this.customPlugin = $.customPlugin;
        this.name = $.name;
        this.parser = $.parser;
        this.paths = $.paths;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnifiedAgentConfigurationServiceConfigurationSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnifiedAgentConfigurationServiceConfigurationSourceArgs $;

        public Builder() {
            $ = new UnifiedAgentConfigurationServiceConfigurationSourceArgs();
        }

        public Builder(UnifiedAgentConfigurationServiceConfigurationSourceArgs defaults) {
            $ = new UnifiedAgentConfigurationServiceConfigurationSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedOptions (Updatable) Advanced options for logging configuration
         * 
         * @return builder
         * 
         */
        public Builder advancedOptions(@Nullable Output<UnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptionsArgs> advancedOptions) {
            $.advancedOptions = advancedOptions;
            return this;
        }

        /**
         * @param advancedOptions (Updatable) Advanced options for logging configuration
         * 
         * @return builder
         * 
         */
        public Builder advancedOptions(UnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptionsArgs advancedOptions) {
            return advancedOptions(Output.of(advancedOptions));
        }

        /**
         * @param channels (Updatable) Windows event log channels.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<List<String>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels (Updatable) Windows event log channels.
         * 
         * @return builder
         * 
         */
        public Builder channels(List<String> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels (Updatable) Windows event log channels.
         * 
         * @return builder
         * 
         */
        public Builder channels(String... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param customPlugin (Updatable) User customized source plugin.
         * 
         * @return builder
         * 
         */
        public Builder customPlugin(@Nullable Output<String> customPlugin) {
            $.customPlugin = customPlugin;
            return this;
        }

        /**
         * @param customPlugin (Updatable) User customized source plugin.
         * 
         * @return builder
         * 
         */
        public Builder customPlugin(String customPlugin) {
            return customPlugin(Output.of(customPlugin));
        }

        /**
         * @param name (Updatable) Unique name for the source.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Unique name for the source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parser (Updatable) Source parser object.
         * 
         * @return builder
         * 
         */
        public Builder parser(@Nullable Output<UnifiedAgentConfigurationServiceConfigurationSourceParserArgs> parser) {
            $.parser = parser;
            return this;
        }

        /**
         * @param parser (Updatable) Source parser object.
         * 
         * @return builder
         * 
         */
        public Builder parser(UnifiedAgentConfigurationServiceConfigurationSourceParserArgs parser) {
            return parser(Output.of(parser));
        }

        /**
         * @param paths (Updatable) Absolute paths for log source files. Wildcards can be used.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths (Updatable) Absolute paths for log source files. Wildcards can be used.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths (Updatable) Absolute paths for log source files. Wildcards can be used.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param sourceType (Updatable) Unified schema logging source type.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType (Updatable) Unified schema logging source type.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public UnifiedAgentConfigurationServiceConfigurationSourceArgs build() {
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("UnifiedAgentConfigurationServiceConfigurationSourceArgs", "sourceType");
            }
            return $;
        }
    }

}
