// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Logging.outputs.GetLogsFilter;
import com.pulumi.oci.Logging.outputs.GetLogsLog;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLogsResult {
    /**
     * @return The user-friendly display name. This must be unique within the enclosing resource, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetLogsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Log group OCID.
     * 
     */
    private String logGroupId;
    /**
     * @return The logType that the log object is for, whether custom or service.
     * 
     */
    private @Nullable String logType;
    /**
     * @return The list of logs.
     * 
     */
    private List<GetLogsLog> logs;
    private @Nullable String sourceResource;
    private @Nullable String sourceService;
    /**
     * @return The pipeline state.
     * 
     */
    private @Nullable String state;

    private GetLogsResult() {}
    /**
     * @return The user-friendly display name. This must be unique within the enclosing resource, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetLogsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Log group OCID.
     * 
     */
    public String logGroupId() {
        return this.logGroupId;
    }
    /**
     * @return The logType that the log object is for, whether custom or service.
     * 
     */
    public Optional<String> logType() {
        return Optional.ofNullable(this.logType);
    }
    /**
     * @return The list of logs.
     * 
     */
    public List<GetLogsLog> logs() {
        return this.logs;
    }
    public Optional<String> sourceResource() {
        return Optional.ofNullable(this.sourceResource);
    }
    public Optional<String> sourceService() {
        return Optional.ofNullable(this.sourceService);
    }
    /**
     * @return The pipeline state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable List<GetLogsFilter> filters;
        private String id;
        private String logGroupId;
        private @Nullable String logType;
        private List<GetLogsLog> logs;
        private @Nullable String sourceResource;
        private @Nullable String sourceService;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetLogsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.logGroupId = defaults.logGroupId;
    	      this.logType = defaults.logType;
    	      this.logs = defaults.logs;
    	      this.sourceResource = defaults.sourceResource;
    	      this.sourceService = defaults.sourceService;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetLogsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetLogsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLogsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logGroupId(String logGroupId) {
            if (logGroupId == null) {
              throw new MissingRequiredPropertyException("GetLogsResult", "logGroupId");
            }
            this.logGroupId = logGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder logType(@Nullable String logType) {

            this.logType = logType;
            return this;
        }
        @CustomType.Setter
        public Builder logs(List<GetLogsLog> logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetLogsResult", "logs");
            }
            this.logs = logs;
            return this;
        }
        public Builder logs(GetLogsLog... logs) {
            return logs(List.of(logs));
        }
        @CustomType.Setter
        public Builder sourceResource(@Nullable String sourceResource) {

            this.sourceResource = sourceResource;
            return this;
        }
        @CustomType.Setter
        public Builder sourceService(@Nullable String sourceService) {

            this.sourceService = sourceService;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetLogsResult build() {
            final var _resultValue = new GetLogsResult();
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.logGroupId = logGroupId;
            _resultValue.logType = logType;
            _resultValue.logs = logs;
            _resultValue.sourceResource = sourceResource;
            _resultValue.sourceService = sourceService;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
