// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUnifiedAgentConfigurationServiceConfigurationSourceParser {
    /**
     * @return CSV delimiter.
     * 
     */
    private @Nullable String delimiter;
    /**
     * @return Regex pattern.
     * 
     */
    private @Nullable String expression;
    /**
     * @return Specify the time field for the event time. If the event doesn&#39;t have this field, the current time is used.
     * 
     */
    private @Nullable String fieldTimeKey;
    /**
     * @return First line pattern format.
     * 
     */
    private @Nullable String formatFirstline;
    /**
     * @return Mutiline pattern format.
     * 
     */
    private @Nullable List<String> formats;
    /**
     * @return Grok failure key.
     * 
     */
    private @Nullable String grokFailureKey;
    /**
     * @return Grok name key.
     * 
     */
    private @Nullable String grokNameKey;
    /**
     * @return If true, use Fluent::EventTime.now(current time) as a timestamp when the time_key is specified.
     * 
     */
    private @Nullable Boolean isEstimateCurrentEvent;
    /**
     * @return If true, keep the time field in the record.
     * 
     */
    private @Nullable Boolean isKeepTimeKey;
    /**
     * @return If you don&#39;t need stream or logtag fields, set this to false.
     * 
     */
    private @Nullable Boolean isMergeCriFields;
    /**
     * @return If true, an empty string field is replaced with a null value.
     * 
     */
    private @Nullable Boolean isNullEmptyString;
    /**
     * @return Specifies whether or not to support colonless ident. Corresponds to the Fluentd support_colonless_ident parameter.
     * 
     */
    private @Nullable Boolean isSupportColonlessIdent;
    /**
     * @return Specifies with priority or not. Corresponds to the Fluentd with_priority parameter.
     * 
     */
    private @Nullable Boolean isWithPriority;
    /**
     * @return CSV keys.
     * 
     */
    private @Nullable List<String> keys;
    /**
     * @return Syslog message format.
     * 
     */
    private @Nullable String messageFormat;
    /**
     * @return Specifies the field name to contain logs.
     * 
     */
    private @Nullable String messageKey;
    /**
     * @return Multiline start regexp pattern.
     * 
     */
    private @Nullable String multiLineStartRegexp;
    /**
     * @return Optional nested JSON Parser for CRI. Supported fields are fieldTimeKey, timeFormat, and isKeepTimeKey.
     * 
     */
    private @Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser> nestedParsers;
    /**
     * @return Specify the null value pattern.
     * 
     */
    private @Nullable String nullValuePattern;
    /**
     * @return Type of fluent parser.
     * 
     */
    private @Nullable String parserType;
    /**
     * @return Grok pattern object.
     * 
     */
    private @Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern> patterns;
    /**
     * @return RFC 5424 time format.
     * 
     */
    private @Nullable String rfc5424timeFormat;
    /**
     * @return Syslog parser type.
     * 
     */
    private @Nullable String syslogParserType;
    /**
     * @return Process time value using the specified format.
     * 
     */
    private @Nullable String timeFormat;
    /**
     * @return JSON parser time type.
     * 
     */
    private @Nullable String timeType;
    /**
     * @return Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern.
     * 
     */
    private @Nullable Integer timeoutInMilliseconds;
    /**
     * @return Specify types for converting a field into another type. For example, With this configuration: &lt;parse&gt; @type csv keys time,host,req_id,user time_key time &lt;/parse&gt;
     * 
     */
    private @Nullable Map<String,Object> types;

    private GetUnifiedAgentConfigurationServiceConfigurationSourceParser() {}
    /**
     * @return CSV delimiter.
     * 
     */
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    /**
     * @return Regex pattern.
     * 
     */
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }
    /**
     * @return Specify the time field for the event time. If the event doesn&#39;t have this field, the current time is used.
     * 
     */
    public Optional<String> fieldTimeKey() {
        return Optional.ofNullable(this.fieldTimeKey);
    }
    /**
     * @return First line pattern format.
     * 
     */
    public Optional<String> formatFirstline() {
        return Optional.ofNullable(this.formatFirstline);
    }
    /**
     * @return Mutiline pattern format.
     * 
     */
    public List<String> formats() {
        return this.formats == null ? List.of() : this.formats;
    }
    /**
     * @return Grok failure key.
     * 
     */
    public Optional<String> grokFailureKey() {
        return Optional.ofNullable(this.grokFailureKey);
    }
    /**
     * @return Grok name key.
     * 
     */
    public Optional<String> grokNameKey() {
        return Optional.ofNullable(this.grokNameKey);
    }
    /**
     * @return If true, use Fluent::EventTime.now(current time) as a timestamp when the time_key is specified.
     * 
     */
    public Optional<Boolean> isEstimateCurrentEvent() {
        return Optional.ofNullable(this.isEstimateCurrentEvent);
    }
    /**
     * @return If true, keep the time field in the record.
     * 
     */
    public Optional<Boolean> isKeepTimeKey() {
        return Optional.ofNullable(this.isKeepTimeKey);
    }
    /**
     * @return If you don&#39;t need stream or logtag fields, set this to false.
     * 
     */
    public Optional<Boolean> isMergeCriFields() {
        return Optional.ofNullable(this.isMergeCriFields);
    }
    /**
     * @return If true, an empty string field is replaced with a null value.
     * 
     */
    public Optional<Boolean> isNullEmptyString() {
        return Optional.ofNullable(this.isNullEmptyString);
    }
    /**
     * @return Specifies whether or not to support colonless ident. Corresponds to the Fluentd support_colonless_ident parameter.
     * 
     */
    public Optional<Boolean> isSupportColonlessIdent() {
        return Optional.ofNullable(this.isSupportColonlessIdent);
    }
    /**
     * @return Specifies with priority or not. Corresponds to the Fluentd with_priority parameter.
     * 
     */
    public Optional<Boolean> isWithPriority() {
        return Optional.ofNullable(this.isWithPriority);
    }
    /**
     * @return CSV keys.
     * 
     */
    public List<String> keys() {
        return this.keys == null ? List.of() : this.keys;
    }
    /**
     * @return Syslog message format.
     * 
     */
    public Optional<String> messageFormat() {
        return Optional.ofNullable(this.messageFormat);
    }
    /**
     * @return Specifies the field name to contain logs.
     * 
     */
    public Optional<String> messageKey() {
        return Optional.ofNullable(this.messageKey);
    }
    /**
     * @return Multiline start regexp pattern.
     * 
     */
    public Optional<String> multiLineStartRegexp() {
        return Optional.ofNullable(this.multiLineStartRegexp);
    }
    /**
     * @return Optional nested JSON Parser for CRI. Supported fields are fieldTimeKey, timeFormat, and isKeepTimeKey.
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser> nestedParsers() {
        return this.nestedParsers == null ? List.of() : this.nestedParsers;
    }
    /**
     * @return Specify the null value pattern.
     * 
     */
    public Optional<String> nullValuePattern() {
        return Optional.ofNullable(this.nullValuePattern);
    }
    /**
     * @return Type of fluent parser.
     * 
     */
    public Optional<String> parserType() {
        return Optional.ofNullable(this.parserType);
    }
    /**
     * @return Grok pattern object.
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern> patterns() {
        return this.patterns == null ? List.of() : this.patterns;
    }
    /**
     * @return RFC 5424 time format.
     * 
     */
    public Optional<String> rfc5424timeFormat() {
        return Optional.ofNullable(this.rfc5424timeFormat);
    }
    /**
     * @return Syslog parser type.
     * 
     */
    public Optional<String> syslogParserType() {
        return Optional.ofNullable(this.syslogParserType);
    }
    /**
     * @return Process time value using the specified format.
     * 
     */
    public Optional<String> timeFormat() {
        return Optional.ofNullable(this.timeFormat);
    }
    /**
     * @return JSON parser time type.
     * 
     */
    public Optional<String> timeType() {
        return Optional.ofNullable(this.timeType);
    }
    /**
     * @return Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern.
     * 
     */
    public Optional<Integer> timeoutInMilliseconds() {
        return Optional.ofNullable(this.timeoutInMilliseconds);
    }
    /**
     * @return Specify types for converting a field into another type. For example, With this configuration: &lt;parse&gt; @type csv keys time,host,req_id,user time_key time &lt;/parse&gt;
     * 
     */
    public Map<String,Object> types() {
        return this.types == null ? Map.of() : this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUnifiedAgentConfigurationServiceConfigurationSourceParser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String delimiter;
        private @Nullable String expression;
        private @Nullable String fieldTimeKey;
        private @Nullable String formatFirstline;
        private @Nullable List<String> formats;
        private @Nullable String grokFailureKey;
        private @Nullable String grokNameKey;
        private @Nullable Boolean isEstimateCurrentEvent;
        private @Nullable Boolean isKeepTimeKey;
        private @Nullable Boolean isMergeCriFields;
        private @Nullable Boolean isNullEmptyString;
        private @Nullable Boolean isSupportColonlessIdent;
        private @Nullable Boolean isWithPriority;
        private @Nullable List<String> keys;
        private @Nullable String messageFormat;
        private @Nullable String messageKey;
        private @Nullable String multiLineStartRegexp;
        private @Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser> nestedParsers;
        private @Nullable String nullValuePattern;
        private @Nullable String parserType;
        private @Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern> patterns;
        private @Nullable String rfc5424timeFormat;
        private @Nullable String syslogParserType;
        private @Nullable String timeFormat;
        private @Nullable String timeType;
        private @Nullable Integer timeoutInMilliseconds;
        private @Nullable Map<String,Object> types;
        public Builder() {}
        public Builder(GetUnifiedAgentConfigurationServiceConfigurationSourceParser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delimiter = defaults.delimiter;
    	      this.expression = defaults.expression;
    	      this.fieldTimeKey = defaults.fieldTimeKey;
    	      this.formatFirstline = defaults.formatFirstline;
    	      this.formats = defaults.formats;
    	      this.grokFailureKey = defaults.grokFailureKey;
    	      this.grokNameKey = defaults.grokNameKey;
    	      this.isEstimateCurrentEvent = defaults.isEstimateCurrentEvent;
    	      this.isKeepTimeKey = defaults.isKeepTimeKey;
    	      this.isMergeCriFields = defaults.isMergeCriFields;
    	      this.isNullEmptyString = defaults.isNullEmptyString;
    	      this.isSupportColonlessIdent = defaults.isSupportColonlessIdent;
    	      this.isWithPriority = defaults.isWithPriority;
    	      this.keys = defaults.keys;
    	      this.messageFormat = defaults.messageFormat;
    	      this.messageKey = defaults.messageKey;
    	      this.multiLineStartRegexp = defaults.multiLineStartRegexp;
    	      this.nestedParsers = defaults.nestedParsers;
    	      this.nullValuePattern = defaults.nullValuePattern;
    	      this.parserType = defaults.parserType;
    	      this.patterns = defaults.patterns;
    	      this.rfc5424timeFormat = defaults.rfc5424timeFormat;
    	      this.syslogParserType = defaults.syslogParserType;
    	      this.timeFormat = defaults.timeFormat;
    	      this.timeType = defaults.timeType;
    	      this.timeoutInMilliseconds = defaults.timeoutInMilliseconds;
    	      this.types = defaults.types;
        }

        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder expression(@Nullable String expression) {
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder fieldTimeKey(@Nullable String fieldTimeKey) {
            this.fieldTimeKey = fieldTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder formatFirstline(@Nullable String formatFirstline) {
            this.formatFirstline = formatFirstline;
            return this;
        }
        @CustomType.Setter
        public Builder formats(@Nullable List<String> formats) {
            this.formats = formats;
            return this;
        }
        public Builder formats(String... formats) {
            return formats(List.of(formats));
        }
        @CustomType.Setter
        public Builder grokFailureKey(@Nullable String grokFailureKey) {
            this.grokFailureKey = grokFailureKey;
            return this;
        }
        @CustomType.Setter
        public Builder grokNameKey(@Nullable String grokNameKey) {
            this.grokNameKey = grokNameKey;
            return this;
        }
        @CustomType.Setter
        public Builder isEstimateCurrentEvent(@Nullable Boolean isEstimateCurrentEvent) {
            this.isEstimateCurrentEvent = isEstimateCurrentEvent;
            return this;
        }
        @CustomType.Setter
        public Builder isKeepTimeKey(@Nullable Boolean isKeepTimeKey) {
            this.isKeepTimeKey = isKeepTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder isMergeCriFields(@Nullable Boolean isMergeCriFields) {
            this.isMergeCriFields = isMergeCriFields;
            return this;
        }
        @CustomType.Setter
        public Builder isNullEmptyString(@Nullable Boolean isNullEmptyString) {
            this.isNullEmptyString = isNullEmptyString;
            return this;
        }
        @CustomType.Setter
        public Builder isSupportColonlessIdent(@Nullable Boolean isSupportColonlessIdent) {
            this.isSupportColonlessIdent = isSupportColonlessIdent;
            return this;
        }
        @CustomType.Setter
        public Builder isWithPriority(@Nullable Boolean isWithPriority) {
            this.isWithPriority = isWithPriority;
            return this;
        }
        @CustomType.Setter
        public Builder keys(@Nullable List<String> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder messageFormat(@Nullable String messageFormat) {
            this.messageFormat = messageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder messageKey(@Nullable String messageKey) {
            this.messageKey = messageKey;
            return this;
        }
        @CustomType.Setter
        public Builder multiLineStartRegexp(@Nullable String multiLineStartRegexp) {
            this.multiLineStartRegexp = multiLineStartRegexp;
            return this;
        }
        @CustomType.Setter
        public Builder nestedParsers(@Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser> nestedParsers) {
            this.nestedParsers = nestedParsers;
            return this;
        }
        public Builder nestedParsers(GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser... nestedParsers) {
            return nestedParsers(List.of(nestedParsers));
        }
        @CustomType.Setter
        public Builder nullValuePattern(@Nullable String nullValuePattern) {
            this.nullValuePattern = nullValuePattern;
            return this;
        }
        @CustomType.Setter
        public Builder parserType(@Nullable String parserType) {
            this.parserType = parserType;
            return this;
        }
        @CustomType.Setter
        public Builder patterns(@Nullable List<GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern> patterns) {
            this.patterns = patterns;
            return this;
        }
        public Builder patterns(GetUnifiedAgentConfigurationServiceConfigurationSourceParserPattern... patterns) {
            return patterns(List.of(patterns));
        }
        @CustomType.Setter
        public Builder rfc5424timeFormat(@Nullable String rfc5424timeFormat) {
            this.rfc5424timeFormat = rfc5424timeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder syslogParserType(@Nullable String syslogParserType) {
            this.syslogParserType = syslogParserType;
            return this;
        }
        @CustomType.Setter
        public Builder timeFormat(@Nullable String timeFormat) {
            this.timeFormat = timeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder timeType(@Nullable String timeType) {
            this.timeType = timeType;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInMilliseconds(@Nullable Integer timeoutInMilliseconds) {
            this.timeoutInMilliseconds = timeoutInMilliseconds;
            return this;
        }
        @CustomType.Setter
        public Builder types(@Nullable Map<String,Object> types) {
            this.types = types;
            return this;
        }
        public GetUnifiedAgentConfigurationServiceConfigurationSourceParser build() {
            final var o = new GetUnifiedAgentConfigurationServiceConfigurationSourceParser();
            o.delimiter = delimiter;
            o.expression = expression;
            o.fieldTimeKey = fieldTimeKey;
            o.formatFirstline = formatFirstline;
            o.formats = formats;
            o.grokFailureKey = grokFailureKey;
            o.grokNameKey = grokNameKey;
            o.isEstimateCurrentEvent = isEstimateCurrentEvent;
            o.isKeepTimeKey = isKeepTimeKey;
            o.isMergeCriFields = isMergeCriFields;
            o.isNullEmptyString = isNullEmptyString;
            o.isSupportColonlessIdent = isSupportColonlessIdent;
            o.isWithPriority = isWithPriority;
            o.keys = keys;
            o.messageFormat = messageFormat;
            o.messageKey = messageKey;
            o.multiLineStartRegexp = multiLineStartRegexp;
            o.nestedParsers = nestedParsers;
            o.nullValuePattern = nullValuePattern;
            o.parserType = parserType;
            o.patterns = patterns;
            o.rfc5424timeFormat = rfc5424timeFormat;
            o.syslogParserType = syslogParserType;
            o.timeFormat = timeFormat;
            o.timeType = timeType;
            o.timeoutInMilliseconds = timeoutInMilliseconds;
            o.types = types;
            return o;
        }
    }
}
