// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser {
    /**
     * @return Specify the time field for the event time. If the event doesn&#39;t have this field, the current time is used.
     * 
     */
    private String fieldTimeKey;
    /**
     * @return If true, keep the time field in the record.
     * 
     */
    private Boolean isKeepTimeKey;
    /**
     * @return If true, a separator parameter can be further defined.
     * 
     */
    private Boolean parseNested;
    /**
     * @return Keys of adjacent levels are joined by the separator.
     * 
     */
    private String separator;
    /**
     * @return Process time value using the specified format.
     * 
     */
    private String timeFormat;
    /**
     * @return JSON parser time type.
     * 
     */
    private String timeType;

    private GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser() {}
    /**
     * @return Specify the time field for the event time. If the event doesn&#39;t have this field, the current time is used.
     * 
     */
    public String fieldTimeKey() {
        return this.fieldTimeKey;
    }
    /**
     * @return If true, keep the time field in the record.
     * 
     */
    public Boolean isKeepTimeKey() {
        return this.isKeepTimeKey;
    }
    /**
     * @return If true, a separator parameter can be further defined.
     * 
     */
    public Boolean parseNested() {
        return this.parseNested;
    }
    /**
     * @return Keys of adjacent levels are joined by the separator.
     * 
     */
    public String separator() {
        return this.separator;
    }
    /**
     * @return Process time value using the specified format.
     * 
     */
    public String timeFormat() {
        return this.timeFormat;
    }
    /**
     * @return JSON parser time type.
     * 
     */
    public String timeType() {
        return this.timeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String fieldTimeKey;
        private Boolean isKeepTimeKey;
        private Boolean parseNested;
        private String separator;
        private String timeFormat;
        private String timeType;
        public Builder() {}
        public Builder(GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fieldTimeKey = defaults.fieldTimeKey;
    	      this.isKeepTimeKey = defaults.isKeepTimeKey;
    	      this.parseNested = defaults.parseNested;
    	      this.separator = defaults.separator;
    	      this.timeFormat = defaults.timeFormat;
    	      this.timeType = defaults.timeType;
        }

        @CustomType.Setter
        public Builder fieldTimeKey(String fieldTimeKey) {
            if (fieldTimeKey == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "fieldTimeKey");
            }
            this.fieldTimeKey = fieldTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder isKeepTimeKey(Boolean isKeepTimeKey) {
            if (isKeepTimeKey == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "isKeepTimeKey");
            }
            this.isKeepTimeKey = isKeepTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder parseNested(Boolean parseNested) {
            if (parseNested == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "parseNested");
            }
            this.parseNested = parseNested;
            return this;
        }
        @CustomType.Setter
        public Builder separator(String separator) {
            if (separator == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "separator");
            }
            this.separator = separator;
            return this;
        }
        @CustomType.Setter
        public Builder timeFormat(String timeFormat) {
            if (timeFormat == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "timeFormat");
            }
            this.timeFormat = timeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder timeType(String timeType) {
            if (timeType == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser", "timeType");
            }
            this.timeType = timeType;
            return this;
        }
        public GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser build() {
            final var _resultValue = new GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser();
            _resultValue.fieldTimeKey = fieldTimeKey;
            _resultValue.isKeepTimeKey = isKeepTimeKey;
            _resultValue.parseNested = parseNested;
            _resultValue.separator = separator;
            _resultValue.timeFormat = timeFormat;
            _resultValue.timeType = timeType;
            return _resultValue;
        }
    }
}
