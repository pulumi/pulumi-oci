// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser;
import com.pulumi.oci.Logging.outputs.GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter {
    /**
     * @return A list of filtering rules to include logs
     * 
     */
    private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists;
    /**
     * @return Type of the custom filter
     * 
     */
    private String customFilterType;
    /**
     * @return List of custom sections in custom filter
     * 
     */
    private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections;
    /**
     * @return A list of filtering rules to reject logs
     * 
     */
    private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists;
    /**
     * @return If true, emit invalid record to{@literal @}ERROR label. Invalid cases are: 1) key does not exist; 2) the format does not match; or 3) an unexpected error. You can rescue unexpected format logs in the{@literal @}ERROR lable. If you want to ignore these errors, set this to false.
     * 
     */
    private Boolean emitInvalidRecordToError;
    /**
     * @return Unified schema logging filter type.
     * 
     */
    private String filterType;
    /**
     * @return Store the parsed values as a hash value in a field.
     * 
     */
    private String hashValueField;
    /**
     * @return Store the parsed values with the specified key name prefix.
     * 
     */
    private String injectKeyPrefix;
    /**
     * @return If true, automatically casts the field types.
     * 
     */
    private Boolean isAutoTypecastEnabled;
    /**
     * @return If true, it modifies a new empty hash
     * 
     */
    private Boolean isRenewRecordEnabled;
    /**
     * @return When set to true, the full Ruby syntax is enabled in the ${} expression.
     * 
     */
    private Boolean isRubyEnabled;
    /**
     * @return A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
     * 
     */
    private List<String> keepKeys;
    /**
     * @return The field name in the record to parse.
     * 
     */
    private String keyName;
    /**
     * @return The name key to tag this Grok pattern.
     * 
     */
    private String name;
    /**
     * @return Parameters of the custom filter
     * 
     */
    private Map<String,Object> params;
    /**
     * @return Source parser object.
     * 
     */
    private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser> parsers;
    /**
     * @return Add new key-value pairs in logs
     * 
     */
    private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists;
    /**
     * @return If true, remove the keyName field when parsing is succeeded.
     * 
     */
    private Boolean removeKeyNameField;
    /**
     * @return A list of keys to delete
     * 
     */
    private List<String> removeKeys;
    /**
     * @return Overwrites the time of logs with this value, this value must be a Unix timestamp.
     * 
     */
    private String renewTimeKey;
    /**
     * @return If true, the invalid string is replaced with safe characters and is re-parsed.
     * 
     */
    private Boolean replaceInvalidSequence;
    /**
     * @return If true, keep the original key-value pair in the parsed result.
     * 
     */
    private Boolean reserveData;
    /**
     * @return If true, keep the original event time in the parsed result.
     * 
     */
    private Boolean reserveTime;

    private GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter() {}
    /**
     * @return A list of filtering rules to include logs
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists() {
        return this.allowLists;
    }
    /**
     * @return Type of the custom filter
     * 
     */
    public String customFilterType() {
        return this.customFilterType;
    }
    /**
     * @return List of custom sections in custom filter
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections() {
        return this.customSections;
    }
    /**
     * @return A list of filtering rules to reject logs
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists() {
        return this.denyLists;
    }
    /**
     * @return If true, emit invalid record to{@literal @}ERROR label. Invalid cases are: 1) key does not exist; 2) the format does not match; or 3) an unexpected error. You can rescue unexpected format logs in the{@literal @}ERROR lable. If you want to ignore these errors, set this to false.
     * 
     */
    public Boolean emitInvalidRecordToError() {
        return this.emitInvalidRecordToError;
    }
    /**
     * @return Unified schema logging filter type.
     * 
     */
    public String filterType() {
        return this.filterType;
    }
    /**
     * @return Store the parsed values as a hash value in a field.
     * 
     */
    public String hashValueField() {
        return this.hashValueField;
    }
    /**
     * @return Store the parsed values with the specified key name prefix.
     * 
     */
    public String injectKeyPrefix() {
        return this.injectKeyPrefix;
    }
    /**
     * @return If true, automatically casts the field types.
     * 
     */
    public Boolean isAutoTypecastEnabled() {
        return this.isAutoTypecastEnabled;
    }
    /**
     * @return If true, it modifies a new empty hash
     * 
     */
    public Boolean isRenewRecordEnabled() {
        return this.isRenewRecordEnabled;
    }
    /**
     * @return When set to true, the full Ruby syntax is enabled in the ${} expression.
     * 
     */
    public Boolean isRubyEnabled() {
        return this.isRubyEnabled;
    }
    /**
     * @return A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
     * 
     */
    public List<String> keepKeys() {
        return this.keepKeys;
    }
    /**
     * @return The field name in the record to parse.
     * 
     */
    public String keyName() {
        return this.keyName;
    }
    /**
     * @return The name key to tag this Grok pattern.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Parameters of the custom filter
     * 
     */
    public Map<String,Object> params() {
        return this.params;
    }
    /**
     * @return Source parser object.
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser> parsers() {
        return this.parsers;
    }
    /**
     * @return Add new key-value pairs in logs
     * 
     */
    public List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists() {
        return this.recordLists;
    }
    /**
     * @return If true, remove the keyName field when parsing is succeeded.
     * 
     */
    public Boolean removeKeyNameField() {
        return this.removeKeyNameField;
    }
    /**
     * @return A list of keys to delete
     * 
     */
    public List<String> removeKeys() {
        return this.removeKeys;
    }
    /**
     * @return Overwrites the time of logs with this value, this value must be a Unix timestamp.
     * 
     */
    public String renewTimeKey() {
        return this.renewTimeKey;
    }
    /**
     * @return If true, the invalid string is replaced with safe characters and is re-parsed.
     * 
     */
    public Boolean replaceInvalidSequence() {
        return this.replaceInvalidSequence;
    }
    /**
     * @return If true, keep the original key-value pair in the parsed result.
     * 
     */
    public Boolean reserveData() {
        return this.reserveData;
    }
    /**
     * @return If true, keep the original event time in the parsed result.
     * 
     */
    public Boolean reserveTime() {
        return this.reserveTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists;
        private String customFilterType;
        private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections;
        private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists;
        private Boolean emitInvalidRecordToError;
        private String filterType;
        private String hashValueField;
        private String injectKeyPrefix;
        private Boolean isAutoTypecastEnabled;
        private Boolean isRenewRecordEnabled;
        private Boolean isRubyEnabled;
        private List<String> keepKeys;
        private String keyName;
        private String name;
        private Map<String,Object> params;
        private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser> parsers;
        private List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists;
        private Boolean removeKeyNameField;
        private List<String> removeKeys;
        private String renewTimeKey;
        private Boolean replaceInvalidSequence;
        private Boolean reserveData;
        private Boolean reserveTime;
        public Builder() {}
        public Builder(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLists = defaults.allowLists;
    	      this.customFilterType = defaults.customFilterType;
    	      this.customSections = defaults.customSections;
    	      this.denyLists = defaults.denyLists;
    	      this.emitInvalidRecordToError = defaults.emitInvalidRecordToError;
    	      this.filterType = defaults.filterType;
    	      this.hashValueField = defaults.hashValueField;
    	      this.injectKeyPrefix = defaults.injectKeyPrefix;
    	      this.isAutoTypecastEnabled = defaults.isAutoTypecastEnabled;
    	      this.isRenewRecordEnabled = defaults.isRenewRecordEnabled;
    	      this.isRubyEnabled = defaults.isRubyEnabled;
    	      this.keepKeys = defaults.keepKeys;
    	      this.keyName = defaults.keyName;
    	      this.name = defaults.name;
    	      this.params = defaults.params;
    	      this.parsers = defaults.parsers;
    	      this.recordLists = defaults.recordLists;
    	      this.removeKeyNameField = defaults.removeKeyNameField;
    	      this.removeKeys = defaults.removeKeys;
    	      this.renewTimeKey = defaults.renewTimeKey;
    	      this.replaceInvalidSequence = defaults.replaceInvalidSequence;
    	      this.reserveData = defaults.reserveData;
    	      this.reserveTime = defaults.reserveTime;
        }

        @CustomType.Setter
        public Builder allowLists(List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists) {
            if (allowLists == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "allowLists");
            }
            this.allowLists = allowLists;
            return this;
        }
        public Builder allowLists(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList... allowLists) {
            return allowLists(List.of(allowLists));
        }
        @CustomType.Setter
        public Builder customFilterType(String customFilterType) {
            if (customFilterType == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "customFilterType");
            }
            this.customFilterType = customFilterType;
            return this;
        }
        @CustomType.Setter
        public Builder customSections(List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections) {
            if (customSections == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "customSections");
            }
            this.customSections = customSections;
            return this;
        }
        public Builder customSections(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection... customSections) {
            return customSections(List.of(customSections));
        }
        @CustomType.Setter
        public Builder denyLists(List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists) {
            if (denyLists == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "denyLists");
            }
            this.denyLists = denyLists;
            return this;
        }
        public Builder denyLists(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList... denyLists) {
            return denyLists(List.of(denyLists));
        }
        @CustomType.Setter
        public Builder emitInvalidRecordToError(Boolean emitInvalidRecordToError) {
            if (emitInvalidRecordToError == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "emitInvalidRecordToError");
            }
            this.emitInvalidRecordToError = emitInvalidRecordToError;
            return this;
        }
        @CustomType.Setter
        public Builder filterType(String filterType) {
            if (filterType == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "filterType");
            }
            this.filterType = filterType;
            return this;
        }
        @CustomType.Setter
        public Builder hashValueField(String hashValueField) {
            if (hashValueField == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "hashValueField");
            }
            this.hashValueField = hashValueField;
            return this;
        }
        @CustomType.Setter
        public Builder injectKeyPrefix(String injectKeyPrefix) {
            if (injectKeyPrefix == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "injectKeyPrefix");
            }
            this.injectKeyPrefix = injectKeyPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoTypecastEnabled(Boolean isAutoTypecastEnabled) {
            if (isAutoTypecastEnabled == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "isAutoTypecastEnabled");
            }
            this.isAutoTypecastEnabled = isAutoTypecastEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRenewRecordEnabled(Boolean isRenewRecordEnabled) {
            if (isRenewRecordEnabled == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "isRenewRecordEnabled");
            }
            this.isRenewRecordEnabled = isRenewRecordEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRubyEnabled(Boolean isRubyEnabled) {
            if (isRubyEnabled == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "isRubyEnabled");
            }
            this.isRubyEnabled = isRubyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder keepKeys(List<String> keepKeys) {
            if (keepKeys == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "keepKeys");
            }
            this.keepKeys = keepKeys;
            return this;
        }
        public Builder keepKeys(String... keepKeys) {
            return keepKeys(List.of(keepKeys));
        }
        @CustomType.Setter
        public Builder keyName(String keyName) {
            if (keyName == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "keyName");
            }
            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder params(Map<String,Object> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "params");
            }
            this.params = params;
            return this;
        }
        @CustomType.Setter
        public Builder parsers(List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser> parsers) {
            if (parsers == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "parsers");
            }
            this.parsers = parsers;
            return this;
        }
        public Builder parsers(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser... parsers) {
            return parsers(List.of(parsers));
        }
        @CustomType.Setter
        public Builder recordLists(List<GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists) {
            if (recordLists == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "recordLists");
            }
            this.recordLists = recordLists;
            return this;
        }
        public Builder recordLists(GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList... recordLists) {
            return recordLists(List.of(recordLists));
        }
        @CustomType.Setter
        public Builder removeKeyNameField(Boolean removeKeyNameField) {
            if (removeKeyNameField == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "removeKeyNameField");
            }
            this.removeKeyNameField = removeKeyNameField;
            return this;
        }
        @CustomType.Setter
        public Builder removeKeys(List<String> removeKeys) {
            if (removeKeys == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "removeKeys");
            }
            this.removeKeys = removeKeys;
            return this;
        }
        public Builder removeKeys(String... removeKeys) {
            return removeKeys(List.of(removeKeys));
        }
        @CustomType.Setter
        public Builder renewTimeKey(String renewTimeKey) {
            if (renewTimeKey == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "renewTimeKey");
            }
            this.renewTimeKey = renewTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder replaceInvalidSequence(Boolean replaceInvalidSequence) {
            if (replaceInvalidSequence == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "replaceInvalidSequence");
            }
            this.replaceInvalidSequence = replaceInvalidSequence;
            return this;
        }
        @CustomType.Setter
        public Builder reserveData(Boolean reserveData) {
            if (reserveData == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "reserveData");
            }
            this.reserveData = reserveData;
            return this;
        }
        @CustomType.Setter
        public Builder reserveTime(Boolean reserveTime) {
            if (reserveTime == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "reserveTime");
            }
            this.reserveTime = reserveTime;
            return this;
        }
        public GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter build() {
            final var _resultValue = new GetUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter();
            _resultValue.allowLists = allowLists;
            _resultValue.customFilterType = customFilterType;
            _resultValue.customSections = customSections;
            _resultValue.denyLists = denyLists;
            _resultValue.emitInvalidRecordToError = emitInvalidRecordToError;
            _resultValue.filterType = filterType;
            _resultValue.hashValueField = hashValueField;
            _resultValue.injectKeyPrefix = injectKeyPrefix;
            _resultValue.isAutoTypecastEnabled = isAutoTypecastEnabled;
            _resultValue.isRenewRecordEnabled = isRenewRecordEnabled;
            _resultValue.isRubyEnabled = isRubyEnabled;
            _resultValue.keepKeys = keepKeys;
            _resultValue.keyName = keyName;
            _resultValue.name = name;
            _resultValue.params = params;
            _resultValue.parsers = parsers;
            _resultValue.recordLists = recordLists;
            _resultValue.removeKeyNameField = removeKeyNameField;
            _resultValue.removeKeys = removeKeys;
            _resultValue.renewTimeKey = renewTimeKey;
            _resultValue.replaceInvalidSequence = replaceInvalidSequence;
            _resultValue.reserveData = reserveData;
            _resultValue.reserveTime = reserveTime;
            return _resultValue;
        }
    }
}
