// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Logging.outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList;
import com.pulumi.oci.Logging.outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection;
import com.pulumi.oci.Logging.outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList;
import com.pulumi.oci.Logging.outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser;
import com.pulumi.oci.Logging.outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter {
    /**
     * @return (Updatable) A list of filtering rules to include logs
     * 
     */
    private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists;
    /**
     * @return (Updatable) Type of the custom filter
     * 
     */
    private @Nullable String customFilterType;
    /**
     * @return (Updatable) List of custom sections in custom filter
     * 
     */
    private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections;
    /**
     * @return (Updatable) A list of filtering rules to reject logs
     * 
     */
    private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists;
    /**
     * @return (Updatable) If true, emit invalid record to @ERROR label. Invalid cases are: 1) key does not exist; 2) the format does not match; or 3) an unexpected error. You can rescue unexpected format logs in the @ERROR lable. If you want to ignore these errors, set this to false.
     * 
     */
    private @Nullable Boolean emitInvalidRecordToError;
    /**
     * @return (Updatable) Unified schema logging filter type.
     * 
     */
    private String filterType;
    /**
     * @return (Updatable) Store the parsed values as a hash value in a field.
     * 
     */
    private @Nullable String hashValueField;
    /**
     * @return (Updatable) Store the parsed values with the specified key name prefix.
     * 
     */
    private @Nullable String injectKeyPrefix;
    /**
     * @return (Updatable) If true, automatically casts the field types.
     * 
     */
    private @Nullable Boolean isAutoTypecastEnabled;
    /**
     * @return (Updatable) If true, it modifies a new empty hash
     * 
     */
    private @Nullable Boolean isRenewRecordEnabled;
    /**
     * @return (Updatable) When set to true, the full Ruby syntax is enabled in the ${} expression.
     * 
     */
    private @Nullable Boolean isRubyEnabled;
    /**
     * @return (Updatable) A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
     * 
     */
    private @Nullable List<String> keepKeys;
    /**
     * @return (Updatable) The field name in the record to parse.
     * 
     */
    private @Nullable String keyName;
    /**
     * @return (Updatable) The name key to tag this Grok pattern.
     * 
     */
    private String name;
    /**
     * @return (Updatable) Parameters of the custom filter
     * 
     */
    private @Nullable Map<String,Object> params;
    /**
     * @return (Updatable) Source parser object.
     * 
     */
    private @Nullable UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser parser;
    /**
     * @return (Updatable) Add new key-value pairs in logs
     * 
     */
    private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists;
    /**
     * @return (Updatable) If true, remove the keyName field when parsing is succeeded.
     * 
     */
    private @Nullable Boolean removeKeyNameField;
    /**
     * @return (Updatable) A list of keys to delete
     * 
     */
    private @Nullable List<String> removeKeys;
    /**
     * @return (Updatable) Overwrites the time of logs with this value, this value must be a Unix timestamp.
     * 
     */
    private @Nullable String renewTimeKey;
    /**
     * @return (Updatable) If true, the invalid string is replaced with safe characters and is re-parsed.
     * 
     */
    private @Nullable Boolean replaceInvalidSequence;
    /**
     * @return (Updatable) If true, keep the original key-value pair in the parsed result.
     * 
     */
    private @Nullable Boolean reserveData;
    /**
     * @return (Updatable) If true, keep the original event time in the parsed result.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable Boolean reserveTime;

    private UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter() {}
    /**
     * @return (Updatable) A list of filtering rules to include logs
     * 
     */
    public List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists() {
        return this.allowLists == null ? List.of() : this.allowLists;
    }
    /**
     * @return (Updatable) Type of the custom filter
     * 
     */
    public Optional<String> customFilterType() {
        return Optional.ofNullable(this.customFilterType);
    }
    /**
     * @return (Updatable) List of custom sections in custom filter
     * 
     */
    public List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections() {
        return this.customSections == null ? List.of() : this.customSections;
    }
    /**
     * @return (Updatable) A list of filtering rules to reject logs
     * 
     */
    public List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists() {
        return this.denyLists == null ? List.of() : this.denyLists;
    }
    /**
     * @return (Updatable) If true, emit invalid record to @ERROR label. Invalid cases are: 1) key does not exist; 2) the format does not match; or 3) an unexpected error. You can rescue unexpected format logs in the @ERROR lable. If you want to ignore these errors, set this to false.
     * 
     */
    public Optional<Boolean> emitInvalidRecordToError() {
        return Optional.ofNullable(this.emitInvalidRecordToError);
    }
    /**
     * @return (Updatable) Unified schema logging filter type.
     * 
     */
    public String filterType() {
        return this.filterType;
    }
    /**
     * @return (Updatable) Store the parsed values as a hash value in a field.
     * 
     */
    public Optional<String> hashValueField() {
        return Optional.ofNullable(this.hashValueField);
    }
    /**
     * @return (Updatable) Store the parsed values with the specified key name prefix.
     * 
     */
    public Optional<String> injectKeyPrefix() {
        return Optional.ofNullable(this.injectKeyPrefix);
    }
    /**
     * @return (Updatable) If true, automatically casts the field types.
     * 
     */
    public Optional<Boolean> isAutoTypecastEnabled() {
        return Optional.ofNullable(this.isAutoTypecastEnabled);
    }
    /**
     * @return (Updatable) If true, it modifies a new empty hash
     * 
     */
    public Optional<Boolean> isRenewRecordEnabled() {
        return Optional.ofNullable(this.isRenewRecordEnabled);
    }
    /**
     * @return (Updatable) When set to true, the full Ruby syntax is enabled in the ${} expression.
     * 
     */
    public Optional<Boolean> isRubyEnabled() {
        return Optional.ofNullable(this.isRubyEnabled);
    }
    /**
     * @return (Updatable) A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
     * 
     */
    public List<String> keepKeys() {
        return this.keepKeys == null ? List.of() : this.keepKeys;
    }
    /**
     * @return (Updatable) The field name in the record to parse.
     * 
     */
    public Optional<String> keyName() {
        return Optional.ofNullable(this.keyName);
    }
    /**
     * @return (Updatable) The name key to tag this Grok pattern.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) Parameters of the custom filter
     * 
     */
    public Map<String,Object> params() {
        return this.params == null ? Map.of() : this.params;
    }
    /**
     * @return (Updatable) Source parser object.
     * 
     */
    public Optional<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser> parser() {
        return Optional.ofNullable(this.parser);
    }
    /**
     * @return (Updatable) Add new key-value pairs in logs
     * 
     */
    public List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists() {
        return this.recordLists == null ? List.of() : this.recordLists;
    }
    /**
     * @return (Updatable) If true, remove the keyName field when parsing is succeeded.
     * 
     */
    public Optional<Boolean> removeKeyNameField() {
        return Optional.ofNullable(this.removeKeyNameField);
    }
    /**
     * @return (Updatable) A list of keys to delete
     * 
     */
    public List<String> removeKeys() {
        return this.removeKeys == null ? List.of() : this.removeKeys;
    }
    /**
     * @return (Updatable) Overwrites the time of logs with this value, this value must be a Unix timestamp.
     * 
     */
    public Optional<String> renewTimeKey() {
        return Optional.ofNullable(this.renewTimeKey);
    }
    /**
     * @return (Updatable) If true, the invalid string is replaced with safe characters and is re-parsed.
     * 
     */
    public Optional<Boolean> replaceInvalidSequence() {
        return Optional.ofNullable(this.replaceInvalidSequence);
    }
    /**
     * @return (Updatable) If true, keep the original key-value pair in the parsed result.
     * 
     */
    public Optional<Boolean> reserveData() {
        return Optional.ofNullable(this.reserveData);
    }
    /**
     * @return (Updatable) If true, keep the original event time in the parsed result.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Boolean> reserveTime() {
        return Optional.ofNullable(this.reserveTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists;
        private @Nullable String customFilterType;
        private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections;
        private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists;
        private @Nullable Boolean emitInvalidRecordToError;
        private String filterType;
        private @Nullable String hashValueField;
        private @Nullable String injectKeyPrefix;
        private @Nullable Boolean isAutoTypecastEnabled;
        private @Nullable Boolean isRenewRecordEnabled;
        private @Nullable Boolean isRubyEnabled;
        private @Nullable List<String> keepKeys;
        private @Nullable String keyName;
        private String name;
        private @Nullable Map<String,Object> params;
        private @Nullable UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser parser;
        private @Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists;
        private @Nullable Boolean removeKeyNameField;
        private @Nullable List<String> removeKeys;
        private @Nullable String renewTimeKey;
        private @Nullable Boolean replaceInvalidSequence;
        private @Nullable Boolean reserveData;
        private @Nullable Boolean reserveTime;
        public Builder() {}
        public Builder(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLists = defaults.allowLists;
    	      this.customFilterType = defaults.customFilterType;
    	      this.customSections = defaults.customSections;
    	      this.denyLists = defaults.denyLists;
    	      this.emitInvalidRecordToError = defaults.emitInvalidRecordToError;
    	      this.filterType = defaults.filterType;
    	      this.hashValueField = defaults.hashValueField;
    	      this.injectKeyPrefix = defaults.injectKeyPrefix;
    	      this.isAutoTypecastEnabled = defaults.isAutoTypecastEnabled;
    	      this.isRenewRecordEnabled = defaults.isRenewRecordEnabled;
    	      this.isRubyEnabled = defaults.isRubyEnabled;
    	      this.keepKeys = defaults.keepKeys;
    	      this.keyName = defaults.keyName;
    	      this.name = defaults.name;
    	      this.params = defaults.params;
    	      this.parser = defaults.parser;
    	      this.recordLists = defaults.recordLists;
    	      this.removeKeyNameField = defaults.removeKeyNameField;
    	      this.removeKeys = defaults.removeKeys;
    	      this.renewTimeKey = defaults.renewTimeKey;
    	      this.replaceInvalidSequence = defaults.replaceInvalidSequence;
    	      this.reserveData = defaults.reserveData;
    	      this.reserveTime = defaults.reserveTime;
        }

        @CustomType.Setter
        public Builder allowLists(@Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists) {

            this.allowLists = allowLists;
            return this;
        }
        public Builder allowLists(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList... allowLists) {
            return allowLists(List.of(allowLists));
        }
        @CustomType.Setter
        public Builder customFilterType(@Nullable String customFilterType) {

            this.customFilterType = customFilterType;
            return this;
        }
        @CustomType.Setter
        public Builder customSections(@Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections) {

            this.customSections = customSections;
            return this;
        }
        public Builder customSections(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection... customSections) {
            return customSections(List.of(customSections));
        }
        @CustomType.Setter
        public Builder denyLists(@Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists) {

            this.denyLists = denyLists;
            return this;
        }
        public Builder denyLists(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList... denyLists) {
            return denyLists(List.of(denyLists));
        }
        @CustomType.Setter
        public Builder emitInvalidRecordToError(@Nullable Boolean emitInvalidRecordToError) {

            this.emitInvalidRecordToError = emitInvalidRecordToError;
            return this;
        }
        @CustomType.Setter
        public Builder filterType(String filterType) {
            if (filterType == null) {
              throw new MissingRequiredPropertyException("UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "filterType");
            }
            this.filterType = filterType;
            return this;
        }
        @CustomType.Setter
        public Builder hashValueField(@Nullable String hashValueField) {

            this.hashValueField = hashValueField;
            return this;
        }
        @CustomType.Setter
        public Builder injectKeyPrefix(@Nullable String injectKeyPrefix) {

            this.injectKeyPrefix = injectKeyPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoTypecastEnabled(@Nullable Boolean isAutoTypecastEnabled) {

            this.isAutoTypecastEnabled = isAutoTypecastEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRenewRecordEnabled(@Nullable Boolean isRenewRecordEnabled) {

            this.isRenewRecordEnabled = isRenewRecordEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRubyEnabled(@Nullable Boolean isRubyEnabled) {

            this.isRubyEnabled = isRubyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder keepKeys(@Nullable List<String> keepKeys) {

            this.keepKeys = keepKeys;
            return this;
        }
        public Builder keepKeys(String... keepKeys) {
            return keepKeys(List.of(keepKeys));
        }
        @CustomType.Setter
        public Builder keyName(@Nullable String keyName) {

            this.keyName = keyName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder params(@Nullable Map<String,Object> params) {

            this.params = params;
            return this;
        }
        @CustomType.Setter
        public Builder parser(@Nullable UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser parser) {

            this.parser = parser;
            return this;
        }
        @CustomType.Setter
        public Builder recordLists(@Nullable List<UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists) {

            this.recordLists = recordLists;
            return this;
        }
        public Builder recordLists(UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList... recordLists) {
            return recordLists(List.of(recordLists));
        }
        @CustomType.Setter
        public Builder removeKeyNameField(@Nullable Boolean removeKeyNameField) {

            this.removeKeyNameField = removeKeyNameField;
            return this;
        }
        @CustomType.Setter
        public Builder removeKeys(@Nullable List<String> removeKeys) {

            this.removeKeys = removeKeys;
            return this;
        }
        public Builder removeKeys(String... removeKeys) {
            return removeKeys(List.of(removeKeys));
        }
        @CustomType.Setter
        public Builder renewTimeKey(@Nullable String renewTimeKey) {

            this.renewTimeKey = renewTimeKey;
            return this;
        }
        @CustomType.Setter
        public Builder replaceInvalidSequence(@Nullable Boolean replaceInvalidSequence) {

            this.replaceInvalidSequence = replaceInvalidSequence;
            return this;
        }
        @CustomType.Setter
        public Builder reserveData(@Nullable Boolean reserveData) {

            this.reserveData = reserveData;
            return this;
        }
        @CustomType.Setter
        public Builder reserveTime(@Nullable Boolean reserveTime) {

            this.reserveTime = reserveTime;
            return this;
        }
        public UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter build() {
            final var _resultValue = new UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter();
            _resultValue.allowLists = allowLists;
            _resultValue.customFilterType = customFilterType;
            _resultValue.customSections = customSections;
            _resultValue.denyLists = denyLists;
            _resultValue.emitInvalidRecordToError = emitInvalidRecordToError;
            _resultValue.filterType = filterType;
            _resultValue.hashValueField = hashValueField;
            _resultValue.injectKeyPrefix = injectKeyPrefix;
            _resultValue.isAutoTypecastEnabled = isAutoTypecastEnabled;
            _resultValue.isRenewRecordEnabled = isRenewRecordEnabled;
            _resultValue.isRubyEnabled = isRubyEnabled;
            _resultValue.keepKeys = keepKeys;
            _resultValue.keyName = keyName;
            _resultValue.name = name;
            _resultValue.params = params;
            _resultValue.parser = parser;
            _resultValue.recordLists = recordLists;
            _resultValue.removeKeyNameField = removeKeyNameField;
            _resultValue.removeKeys = removeKeys;
            _resultValue.renewTimeKey = renewTimeKey;
            _resultValue.replaceInvalidSequence = replaceInvalidSequence;
            _resultValue.reserveData = reserveData;
            _resultValue.reserveTime = reserveTime;
            return _resultValue;
        }
    }
}
