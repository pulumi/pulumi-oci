// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.inputs.NamedCredentialPropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamedCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamedCredentialArgs Empty = new NamedCredentialArgs();

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Description of the Named Credential.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Description of the Named Credential.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The Management Agent parent resource to associate this named credential with.  This is the ManagementAgent resource OCID.
     * 
     */
    @Import(name="managementAgentId", required=true)
    private Output<String> managementAgentId;

    /**
     * @return The Management Agent parent resource to associate this named credential with.  This is the ManagementAgent resource OCID.
     * 
     */
    public Output<String> managementAgentId() {
        return this.managementAgentId;
    }

    /**
     * Identifier for Named Credential. This is unique for the Management Agent.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier for Named Credential. This is unique for the Management Agent.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) Properties for the named credential
     * 
     */
    @Import(name="properties", required=true)
    private Output<List<NamedCredentialPropertyArgs>> properties;

    /**
     * @return (Updatable) Properties for the named credential
     * 
     */
    public Output<List<NamedCredentialPropertyArgs>> properties() {
        return this.properties;
    }

    /**
     * The type of the Named Credential.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the Named Credential.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NamedCredentialArgs() {}

    private NamedCredentialArgs(NamedCredentialArgs $) {
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.managementAgentId = $.managementAgentId;
        this.name = $.name;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamedCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamedCredentialArgs $;

        public Builder() {
            $ = new NamedCredentialArgs();
        }

        public Builder(NamedCredentialArgs defaults) {
            $ = new NamedCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Description of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Description of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param managementAgentId The Management Agent parent resource to associate this named credential with.  This is the ManagementAgent resource OCID.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(Output<String> managementAgentId) {
            $.managementAgentId = managementAgentId;
            return this;
        }

        /**
         * @param managementAgentId The Management Agent parent resource to associate this named credential with.  This is the ManagementAgent resource OCID.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(String managementAgentId) {
            return managementAgentId(Output.of(managementAgentId));
        }

        /**
         * @param name Identifier for Named Credential. This is unique for the Management Agent.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier for Named Credential. This is unique for the Management Agent.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param properties (Updatable) Properties for the named credential
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<List<NamedCredentialPropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties (Updatable) Properties for the named credential
         * 
         * @return builder
         * 
         */
        public Builder properties(List<NamedCredentialPropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties (Updatable) Properties for the named credential
         * 
         * @return builder
         * 
         */
        public Builder properties(NamedCredentialPropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param type The type of the Named Credential.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Named Credential.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NamedCredentialArgs build() {
            if ($.managementAgentId == null) {
                throw new MissingRequiredPropertyException("NamedCredentialArgs", "managementAgentId");
            }
            if ($.properties == null) {
                throw new MissingRequiredPropertyException("NamedCredentialArgs", "properties");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NamedCredentialArgs", "type");
            }
            return $;
        }
    }

}
