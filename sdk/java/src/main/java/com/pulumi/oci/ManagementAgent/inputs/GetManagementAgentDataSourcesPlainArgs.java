// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.inputs.GetManagementAgentDataSourcesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagementAgentDataSourcesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementAgentDataSourcesPlainArgs Empty = new GetManagementAgentDataSourcesPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetManagementAgentDataSourcesFilter> filters;

    public Optional<List<GetManagementAgentDataSourcesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Management Agent identifier
     * 
     */
    @Import(name="managementAgentId", required=true)
    private String managementAgentId;

    /**
     * @return Unique Management Agent identifier
     * 
     */
    public String managementAgentId() {
        return this.managementAgentId;
    }

    /**
     * Unique name of the dataSource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Unique name of the dataSource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private GetManagementAgentDataSourcesPlainArgs() {}

    private GetManagementAgentDataSourcesPlainArgs(GetManagementAgentDataSourcesPlainArgs $) {
        this.filters = $.filters;
        this.managementAgentId = $.managementAgentId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementAgentDataSourcesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementAgentDataSourcesPlainArgs $;

        public Builder() {
            $ = new GetManagementAgentDataSourcesPlainArgs();
        }

        public Builder(GetManagementAgentDataSourcesPlainArgs defaults) {
            $ = new GetManagementAgentDataSourcesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetManagementAgentDataSourcesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagementAgentDataSourcesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managementAgentId Unique Management Agent identifier
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(String managementAgentId) {
            $.managementAgentId = managementAgentId;
            return this;
        }

        /**
         * @param name Unique name of the dataSource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public GetManagementAgentDataSourcesPlainArgs build() {
            if ($.managementAgentId == null) {
                throw new MissingRequiredPropertyException("GetManagementAgentDataSourcesPlainArgs", "managementAgentId");
            }
            return $;
        }
    }

}
