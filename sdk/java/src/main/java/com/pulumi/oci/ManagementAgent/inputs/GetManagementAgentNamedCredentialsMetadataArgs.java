// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagementAgentNamedCredentialsMetadataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementAgentNamedCredentialsMetadataArgs Empty = new GetManagementAgentNamedCredentialsMetadataArgs();

    /**
     * The OCID of the compartment to which a request will be scoped.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Filter the named credential metadata which is compatible with the given Management Agent identifier.
     * 
     */
    @Import(name="managementAgentId")
    private @Nullable Output<String> managementAgentId;

    /**
     * @return Filter the named credential metadata which is compatible with the given Management Agent identifier.
     * 
     */
    public Optional<Output<String>> managementAgentId() {
        return Optional.ofNullable(this.managementAgentId);
    }

    private GetManagementAgentNamedCredentialsMetadataArgs() {}

    private GetManagementAgentNamedCredentialsMetadataArgs(GetManagementAgentNamedCredentialsMetadataArgs $) {
        this.compartmentId = $.compartmentId;
        this.managementAgentId = $.managementAgentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementAgentNamedCredentialsMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementAgentNamedCredentialsMetadataArgs $;

        public Builder() {
            $ = new GetManagementAgentNamedCredentialsMetadataArgs();
        }

        public Builder(GetManagementAgentNamedCredentialsMetadataArgs defaults) {
            $ = new GetManagementAgentNamedCredentialsMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param managementAgentId Filter the named credential metadata which is compatible with the given Management Agent identifier.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(@Nullable Output<String> managementAgentId) {
            $.managementAgentId = managementAgentId;
            return this;
        }

        /**
         * @param managementAgentId Filter the named credential metadata which is compatible with the given Management Agent identifier.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(String managementAgentId) {
            return managementAgentId(Output.of(managementAgentId));
        }

        public GetManagementAgentNamedCredentialsMetadataArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetManagementAgentNamedCredentialsMetadataArgs", "compartmentId");
            }
            return $;
        }
    }

}
