// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.inputs.GetManagementAgentsFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagementAgentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementAgentsPlainArgs Empty = new GetManagementAgentsPlainArgs();

    /**
     * When the value is &#34;ACCESSIBLE&#34;, insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return When the value is &#34;ACCESSIBLE&#34;, insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * Filter to return only Management Agents in the particular availability status.
     * 
     */
    @Import(name="availabilityStatus")
    private @Nullable String availabilityStatus;

    /**
     * @return Filter to return only Management Agents in the particular availability status.
     * 
     */
    public Optional<String> availabilityStatus() {
        return Optional.ofNullable(this.availabilityStatus);
    }

    /**
     * The OCID of the compartment to which a request will be scoped.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * Unique name of the dataSource.
     * 
     */
    @Import(name="dataSourceNames")
    private @Nullable List<String> dataSourceNames;

    /**
     * @return Unique name of the dataSource.
     * 
     */
    public Optional<List<String>> dataSourceNames() {
        return Optional.ofNullable(this.dataSourceNames);
    }

    /**
     * The type of the dataSource.
     * 
     */
    @Import(name="dataSourceType")
    private @Nullable String dataSourceType;

    /**
     * @return The type of the dataSource.
     * 
     */
    public Optional<String> dataSourceType() {
        return Optional.ofNullable(this.dataSourceType);
    }

    /**
     * Filter to return only Management Agents having the particular display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return Filter to return only Management Agents having the particular display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetManagementAgentsFilter> filters;

    public Optional<List<GetManagementAgentsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter to return only results having the particular gatewayId.
     * 
     */
    @Import(name="gatewayIds")
    private @Nullable List<String> gatewayIds;

    /**
     * @return Filter to return only results having the particular gatewayId.
     * 
     */
    public Optional<List<String>> gatewayIds() {
        return Optional.ofNullable(this.gatewayIds);
    }

    /**
     * Filter to return only Management Agents having the particular agent host id.
     * 
     */
    @Import(name="hostId")
    private @Nullable String hostId;

    /**
     * @return Filter to return only Management Agents having the particular agent host id.
     * 
     */
    public Optional<String> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
     * 
     */
    @Import(name="installType")
    private @Nullable String installType;

    /**
     * @return A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
     * 
     */
    public Optional<String> installType() {
        return Optional.ofNullable(this.installType);
    }

    /**
     * true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    @Import(name="isCustomerDeployed")
    private @Nullable Boolean isCustomerDeployed;

    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    public Optional<Boolean> isCustomerDeployed() {
        return Optional.ofNullable(this.isCustomerDeployed);
    }

    /**
     * Array of PlatformTypes to return only results having the particular platform types. Example: [&#34;LINUX&#34;]
     * 
     */
    @Import(name="platformTypes")
    private @Nullable List<String> platformTypes;

    /**
     * @return Array of PlatformTypes to return only results having the particular platform types. Example: [&#34;LINUX&#34;]
     * 
     */
    public Optional<List<String>> platformTypes() {
        return Optional.ofNullable(this.platformTypes);
    }

    /**
     * Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed. Example: [&#34;PluginA&#34;]
     * 
     */
    @Import(name="pluginNames")
    private @Nullable List<String> pluginNames;

    /**
     * @return Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed. Example: [&#34;PluginA&#34;]
     * 
     */
    public Optional<List<String>> pluginNames() {
        return Optional.ofNullable(this.pluginNames);
    }

    /**
     * Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Array of versions to return only Management Agents having the particular agent versions. Example: [&#34;202020.0101&#34;,&#34;210201.0513&#34;]
     * 
     */
    @Import(name="versions")
    private @Nullable List<String> versions;

    /**
     * @return Array of versions to return only Management Agents having the particular agent versions. Example: [&#34;202020.0101&#34;,&#34;210201.0513&#34;]
     * 
     */
    public Optional<List<String>> versions() {
        return Optional.ofNullable(this.versions);
    }

    /**
     * When host_id argument is set, the data source will wait for the given period of time (in minutes) for this host_id to become available. This can be used when compute instance with Management Agent has been recently created.
     * 
     */
    @Import(name="waitForHostId")
    private @Nullable Integer waitForHostId;

    /**
     * @return When host_id argument is set, the data source will wait for the given period of time (in minutes) for this host_id to become available. This can be used when compute instance with Management Agent has been recently created.
     * 
     */
    public Optional<Integer> waitForHostId() {
        return Optional.ofNullable(this.waitForHostId);
    }

    private GetManagementAgentsPlainArgs() {}

    private GetManagementAgentsPlainArgs(GetManagementAgentsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.availabilityStatus = $.availabilityStatus;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.dataSourceNames = $.dataSourceNames;
        this.dataSourceType = $.dataSourceType;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.gatewayIds = $.gatewayIds;
        this.hostId = $.hostId;
        this.installType = $.installType;
        this.isCustomerDeployed = $.isCustomerDeployed;
        this.platformTypes = $.platformTypes;
        this.pluginNames = $.pluginNames;
        this.state = $.state;
        this.versions = $.versions;
        this.waitForHostId = $.waitForHostId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementAgentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementAgentsPlainArgs $;

        public Builder() {
            $ = new GetManagementAgentsPlainArgs();
        }

        public Builder(GetManagementAgentsPlainArgs defaults) {
            $ = new GetManagementAgentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel When the value is &#34;ACCESSIBLE&#34;, insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param availabilityStatus Filter to return only Management Agents in the particular availability status.
         * 
         * @return builder
         * 
         */
        public Builder availabilityStatus(@Nullable String availabilityStatus) {
            $.availabilityStatus = availabilityStatus;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param dataSourceNames Unique name of the dataSource.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceNames(@Nullable List<String> dataSourceNames) {
            $.dataSourceNames = dataSourceNames;
            return this;
        }

        /**
         * @param dataSourceNames Unique name of the dataSource.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceNames(String... dataSourceNames) {
            return dataSourceNames(List.of(dataSourceNames));
        }

        /**
         * @param dataSourceType The type of the dataSource.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceType(@Nullable String dataSourceType) {
            $.dataSourceType = dataSourceType;
            return this;
        }

        /**
         * @param displayName Filter to return only Management Agents having the particular display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetManagementAgentsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagementAgentsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param gatewayIds Filter to return only results having the particular gatewayId.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIds(@Nullable List<String> gatewayIds) {
            $.gatewayIds = gatewayIds;
            return this;
        }

        /**
         * @param gatewayIds Filter to return only results having the particular gatewayId.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIds(String... gatewayIds) {
            return gatewayIds(List.of(gatewayIds));
        }

        /**
         * @param hostId Filter to return only Management Agents having the particular agent host id.
         * 
         * @return builder
         * 
         */
        public Builder hostId(@Nullable String hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param installType A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
         * 
         * @return builder
         * 
         */
        public Builder installType(@Nullable String installType) {
            $.installType = installType;
            return this;
        }

        /**
         * @param isCustomerDeployed true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
         * 
         * @return builder
         * 
         */
        public Builder isCustomerDeployed(@Nullable Boolean isCustomerDeployed) {
            $.isCustomerDeployed = isCustomerDeployed;
            return this;
        }

        /**
         * @param platformTypes Array of PlatformTypes to return only results having the particular platform types. Example: [&#34;LINUX&#34;]
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(@Nullable List<String> platformTypes) {
            $.platformTypes = platformTypes;
            return this;
        }

        /**
         * @param platformTypes Array of PlatformTypes to return only results having the particular platform types. Example: [&#34;LINUX&#34;]
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(String... platformTypes) {
            return platformTypes(List.of(platformTypes));
        }

        /**
         * @param pluginNames Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed. Example: [&#34;PluginA&#34;]
         * 
         * @return builder
         * 
         */
        public Builder pluginNames(@Nullable List<String> pluginNames) {
            $.pluginNames = pluginNames;
            return this;
        }

        /**
         * @param pluginNames Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed. Example: [&#34;PluginA&#34;]
         * 
         * @return builder
         * 
         */
        public Builder pluginNames(String... pluginNames) {
            return pluginNames(List.of(pluginNames));
        }

        /**
         * @param state Filter to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param versions Array of versions to return only Management Agents having the particular agent versions. Example: [&#34;202020.0101&#34;,&#34;210201.0513&#34;]
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable List<String> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Array of versions to return only Management Agents having the particular agent versions. Example: [&#34;202020.0101&#34;,&#34;210201.0513&#34;]
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        /**
         * @param waitForHostId When host_id argument is set, the data source will wait for the given period of time (in minutes) for this host_id to become available. This can be used when compute instance with Management Agent has been recently created.
         * 
         * @return builder
         * 
         */
        public Builder waitForHostId(@Nullable Integer waitForHostId) {
            $.waitForHostId = waitForHostId;
            return this;
        }

        public GetManagementAgentsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetManagementAgentsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
