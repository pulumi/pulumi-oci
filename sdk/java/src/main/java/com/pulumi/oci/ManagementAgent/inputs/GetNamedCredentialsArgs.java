// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.inputs.GetNamedCredentialsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNamedCredentialsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamedCredentialsArgs Empty = new GetNamedCredentialsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetNamedCredentialsFilterArgs>> filters;

    public Optional<Output<List<GetNamedCredentialsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter list for these Named credentials identifiers (ocid) values.
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return Filter list for these Named credentials identifiers (ocid) values.
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * The ManagementAgentID of the agent from which the named credentials are associated.
     * 
     */
    @Import(name="managementAgentId", required=true)
    private Output<String> managementAgentId;

    /**
     * @return The ManagementAgentID of the agent from which the named credentials are associated.
     * 
     */
    public Output<String> managementAgentId() {
        return this.managementAgentId;
    }

    /**
     * Filter list for these name items.
     * 
     */
    @Import(name="names")
    private @Nullable Output<List<String>> names;

    /**
     * @return Filter list for these name items.
     * 
     */
    public Optional<Output<List<String>>> names() {
        return Optional.ofNullable(this.names);
    }

    /**
     * Filter list to return only Management Agents in the particular lifecycle state.
     * 
     */
    @Import(name="states")
    private @Nullable Output<List<String>> states;

    /**
     * @return Filter list to return only Management Agents in the particular lifecycle state.
     * 
     */
    public Optional<Output<List<String>>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * Filter list for these type values.
     * 
     */
    @Import(name="types")
    private @Nullable Output<List<String>> types;

    /**
     * @return Filter list for these type values.
     * 
     */
    public Optional<Output<List<String>>> types() {
        return Optional.ofNullable(this.types);
    }

    private GetNamedCredentialsArgs() {}

    private GetNamedCredentialsArgs(GetNamedCredentialsArgs $) {
        this.filters = $.filters;
        this.ids = $.ids;
        this.managementAgentId = $.managementAgentId;
        this.names = $.names;
        this.states = $.states;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamedCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamedCredentialsArgs $;

        public Builder() {
            $ = new GetNamedCredentialsArgs();
        }

        public Builder(GetNamedCredentialsArgs defaults) {
            $ = new GetNamedCredentialsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetNamedCredentialsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetNamedCredentialsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetNamedCredentialsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param ids Filter list for these Named credentials identifiers (ocid) values.
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids Filter list for these Named credentials identifiers (ocid) values.
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids Filter list for these Named credentials identifiers (ocid) values.
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param managementAgentId The ManagementAgentID of the agent from which the named credentials are associated.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(Output<String> managementAgentId) {
            $.managementAgentId = managementAgentId;
            return this;
        }

        /**
         * @param managementAgentId The ManagementAgentID of the agent from which the named credentials are associated.
         * 
         * @return builder
         * 
         */
        public Builder managementAgentId(String managementAgentId) {
            return managementAgentId(Output.of(managementAgentId));
        }

        /**
         * @param names Filter list for these name items.
         * 
         * @return builder
         * 
         */
        public Builder names(@Nullable Output<List<String>> names) {
            $.names = names;
            return this;
        }

        /**
         * @param names Filter list for these name items.
         * 
         * @return builder
         * 
         */
        public Builder names(List<String> names) {
            return names(Output.of(names));
        }

        /**
         * @param names Filter list for these name items.
         * 
         * @return builder
         * 
         */
        public Builder names(String... names) {
            return names(List.of(names));
        }

        /**
         * @param states Filter list to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<List<String>> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states Filter list to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder states(List<String> states) {
            return states(Output.of(states));
        }

        /**
         * @param states Filter list to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        /**
         * @param types Filter list for these type values.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable Output<List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types Filter list for these type values.
         * 
         * @return builder
         * 
         */
        public Builder types(List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types Filter list for these type values.
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        public GetNamedCredentialsArgs build() {
            if ($.managementAgentId == null) {
                throw new MissingRequiredPropertyException("GetNamedCredentialsArgs", "managementAgentId");
            }
            return $;
        }
    }

}
