// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentDataSourceMetricDimension;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagementAgentDataSourceResult {
    /**
     * @return Comma separated metric name list. The complete set of desired scraped metrics. Use this property to limit the set of metrics uploaded if required.
     * 
     */
    private String allowMetrics;
    /**
     * @return Compartment owning this DataSource.
     * 
     */
    private String compartmentId;
    /**
     * @return Number in milliseconds. The timeout for connecting to the Prometheus Exporter&#39;s endpoint.
     * 
     */
    private Integer connectionTimeout;
    private String dataSourceKey;
    private String id;
    /**
     * @return If the Kubernetes cluster type is Daemon set then this will be set to true.
     * 
     */
    private Boolean isDaemonSet;
    private String managementAgentId;
    /**
     * @return The names of other user-supplied properties expressed as fixed values to be used as dimensions for every uploaded datapoint.
     * 
     */
    private List<GetManagementAgentDataSourceMetricDimension> metricDimensions;
    /**
     * @return Unique name of the DataSource.
     * 
     */
    private String name;
    /**
     * @return The Oracle Cloud Infrastructure monitoring namespace to which scraped metrics should be uploaded.
     * 
     */
    private String namespace;
    /**
     * @return The url of the network proxy that provides access to the Prometheus Exporter&#39;s endpoint (url required property).
     * 
     */
    private String proxyUrl;
    /**
     * @return Number in kilobytes. The limit on the data being sent, not to exceed the agent&#39;s fixed limit of 400 (KB).
     * 
     */
    private Integer readDataLimit;
    private Integer readDataLimitInKilobytes;
    /**
     * @return Number in milliseconds. The timeout for reading the response from the Prometheus Exporter&#39;s endpoint.
     * 
     */
    private Integer readTimeout;
    /**
     * @return Oracle Cloud Infrastructure monitoring resource group to assign the metric to.
     * 
     */
    private String resourceGroup;
    /**
     * @return Number in minutes. The scraping occurs at the specified interval.
     * 
     */
    private Integer scheduleMins;
    /**
     * @return State of the DataSource.
     * 
     */
    private String state;
    /**
     * @return The time the DataSource was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DataSource data was last received. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of the DataSource.
     * 
     */
    private String type;
    /**
     * @return The url through which the Prometheus Exporter publishes its metrics. (http only)
     * 
     */
    private String url;

    private GetManagementAgentDataSourceResult() {}
    /**
     * @return Comma separated metric name list. The complete set of desired scraped metrics. Use this property to limit the set of metrics uploaded if required.
     * 
     */
    public String allowMetrics() {
        return this.allowMetrics;
    }
    /**
     * @return Compartment owning this DataSource.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Number in milliseconds. The timeout for connecting to the Prometheus Exporter&#39;s endpoint.
     * 
     */
    public Integer connectionTimeout() {
        return this.connectionTimeout;
    }
    public String dataSourceKey() {
        return this.dataSourceKey;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return If the Kubernetes cluster type is Daemon set then this will be set to true.
     * 
     */
    public Boolean isDaemonSet() {
        return this.isDaemonSet;
    }
    public String managementAgentId() {
        return this.managementAgentId;
    }
    /**
     * @return The names of other user-supplied properties expressed as fixed values to be used as dimensions for every uploaded datapoint.
     * 
     */
    public List<GetManagementAgentDataSourceMetricDimension> metricDimensions() {
        return this.metricDimensions;
    }
    /**
     * @return Unique name of the DataSource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Oracle Cloud Infrastructure monitoring namespace to which scraped metrics should be uploaded.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The url of the network proxy that provides access to the Prometheus Exporter&#39;s endpoint (url required property).
     * 
     */
    public String proxyUrl() {
        return this.proxyUrl;
    }
    /**
     * @return Number in kilobytes. The limit on the data being sent, not to exceed the agent&#39;s fixed limit of 400 (KB).
     * 
     */
    public Integer readDataLimit() {
        return this.readDataLimit;
    }
    public Integer readDataLimitInKilobytes() {
        return this.readDataLimitInKilobytes;
    }
    /**
     * @return Number in milliseconds. The timeout for reading the response from the Prometheus Exporter&#39;s endpoint.
     * 
     */
    public Integer readTimeout() {
        return this.readTimeout;
    }
    /**
     * @return Oracle Cloud Infrastructure monitoring resource group to assign the metric to.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return Number in minutes. The scraping occurs at the specified interval.
     * 
     */
    public Integer scheduleMins() {
        return this.scheduleMins;
    }
    /**
     * @return State of the DataSource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the DataSource was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DataSource data was last received. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of the DataSource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The url through which the Prometheus Exporter publishes its metrics. (http only)
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allowMetrics;
        private String compartmentId;
        private Integer connectionTimeout;
        private String dataSourceKey;
        private String id;
        private Boolean isDaemonSet;
        private String managementAgentId;
        private List<GetManagementAgentDataSourceMetricDimension> metricDimensions;
        private String name;
        private String namespace;
        private String proxyUrl;
        private Integer readDataLimit;
        private Integer readDataLimitInKilobytes;
        private Integer readTimeout;
        private String resourceGroup;
        private Integer scheduleMins;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetManagementAgentDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowMetrics = defaults.allowMetrics;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionTimeout = defaults.connectionTimeout;
    	      this.dataSourceKey = defaults.dataSourceKey;
    	      this.id = defaults.id;
    	      this.isDaemonSet = defaults.isDaemonSet;
    	      this.managementAgentId = defaults.managementAgentId;
    	      this.metricDimensions = defaults.metricDimensions;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.proxyUrl = defaults.proxyUrl;
    	      this.readDataLimit = defaults.readDataLimit;
    	      this.readDataLimitInKilobytes = defaults.readDataLimitInKilobytes;
    	      this.readTimeout = defaults.readTimeout;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.scheduleMins = defaults.scheduleMins;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder allowMetrics(String allowMetrics) {
            if (allowMetrics == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "allowMetrics");
            }
            this.allowMetrics = allowMetrics;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionTimeout(Integer connectionTimeout) {
            if (connectionTimeout == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "connectionTimeout");
            }
            this.connectionTimeout = connectionTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceKey(String dataSourceKey) {
            if (dataSourceKey == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "dataSourceKey");
            }
            this.dataSourceKey = dataSourceKey;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDaemonSet(Boolean isDaemonSet) {
            if (isDaemonSet == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "isDaemonSet");
            }
            this.isDaemonSet = isDaemonSet;
            return this;
        }
        @CustomType.Setter
        public Builder managementAgentId(String managementAgentId) {
            if (managementAgentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "managementAgentId");
            }
            this.managementAgentId = managementAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder metricDimensions(List<GetManagementAgentDataSourceMetricDimension> metricDimensions) {
            if (metricDimensions == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "metricDimensions");
            }
            this.metricDimensions = metricDimensions;
            return this;
        }
        public Builder metricDimensions(GetManagementAgentDataSourceMetricDimension... metricDimensions) {
            return metricDimensions(List.of(metricDimensions));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder proxyUrl(String proxyUrl) {
            if (proxyUrl == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "proxyUrl");
            }
            this.proxyUrl = proxyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder readDataLimit(Integer readDataLimit) {
            if (readDataLimit == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "readDataLimit");
            }
            this.readDataLimit = readDataLimit;
            return this;
        }
        @CustomType.Setter
        public Builder readDataLimitInKilobytes(Integer readDataLimitInKilobytes) {
            if (readDataLimitInKilobytes == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "readDataLimitInKilobytes");
            }
            this.readDataLimitInKilobytes = readDataLimitInKilobytes;
            return this;
        }
        @CustomType.Setter
        public Builder readTimeout(Integer readTimeout) {
            if (readTimeout == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "readTimeout");
            }
            this.readTimeout = readTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder scheduleMins(Integer scheduleMins) {
            if (scheduleMins == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "scheduleMins");
            }
            this.scheduleMins = scheduleMins;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentDataSourceResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetManagementAgentDataSourceResult build() {
            final var _resultValue = new GetManagementAgentDataSourceResult();
            _resultValue.allowMetrics = allowMetrics;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionTimeout = connectionTimeout;
            _resultValue.dataSourceKey = dataSourceKey;
            _resultValue.id = id;
            _resultValue.isDaemonSet = isDaemonSet;
            _resultValue.managementAgentId = managementAgentId;
            _resultValue.metricDimensions = metricDimensions;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.proxyUrl = proxyUrl;
            _resultValue.readDataLimit = readDataLimit;
            _resultValue.readDataLimitInKilobytes = readDataLimitInKilobytes;
            _resultValue.readTimeout = readTimeout;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.scheduleMins = scheduleMins;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
