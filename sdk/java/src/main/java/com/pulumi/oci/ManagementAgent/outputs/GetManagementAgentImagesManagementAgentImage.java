// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagementAgentImagesManagementAgentImage {
    /**
     * @return Object content SHA256 Hash
     * 
     */
    private String checksum;
    /**
     * @return Agent image resource id
     * 
     */
    private String id;
    /**
     * @return Details of the Objectstorage object
     * 
     */
    private List<GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail> imageObjectStorageDetails;
    /**
     * @return Object storage URL for download
     * 
     */
    private String objectUrl;
    /**
     * @return The installation package target architecture type
     * 
     */
    private String packageArchitectureType;
    /**
     * @return The installation package type
     * 
     */
    private String packageType;
    /**
     * @return Agent image platform display name
     * 
     */
    private String platformName;
    /**
     * @return Agent image platform type
     * 
     */
    private String platformType;
    /**
     * @return Agent image size in bytes
     * 
     */
    private Double size;
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    private String state;
    /**
     * @return Agent image version
     * 
     */
    private String version;

    private GetManagementAgentImagesManagementAgentImage() {}
    /**
     * @return Object content SHA256 Hash
     * 
     */
    public String checksum() {
        return this.checksum;
    }
    /**
     * @return Agent image resource id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of the Objectstorage object
     * 
     */
    public List<GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail> imageObjectStorageDetails() {
        return this.imageObjectStorageDetails;
    }
    /**
     * @return Object storage URL for download
     * 
     */
    public String objectUrl() {
        return this.objectUrl;
    }
    /**
     * @return The installation package target architecture type
     * 
     */
    public String packageArchitectureType() {
        return this.packageArchitectureType;
    }
    /**
     * @return The installation package type
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return Agent image platform display name
     * 
     */
    public String platformName() {
        return this.platformName;
    }
    /**
     * @return Agent image platform type
     * 
     */
    public String platformType() {
        return this.platformType;
    }
    /**
     * @return Agent image size in bytes
     * 
     */
    public Double size() {
        return this.size;
    }
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Agent image version
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentImagesManagementAgentImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String checksum;
        private String id;
        private List<GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail> imageObjectStorageDetails;
        private String objectUrl;
        private String packageArchitectureType;
        private String packageType;
        private String platformName;
        private String platformType;
        private Double size;
        private String state;
        private String version;
        public Builder() {}
        public Builder(GetManagementAgentImagesManagementAgentImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checksum = defaults.checksum;
    	      this.id = defaults.id;
    	      this.imageObjectStorageDetails = defaults.imageObjectStorageDetails;
    	      this.objectUrl = defaults.objectUrl;
    	      this.packageArchitectureType = defaults.packageArchitectureType;
    	      this.packageType = defaults.packageType;
    	      this.platformName = defaults.platformName;
    	      this.platformType = defaults.platformType;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder checksum(String checksum) {
            if (checksum == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "checksum");
            }
            this.checksum = checksum;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageObjectStorageDetails(List<GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail> imageObjectStorageDetails) {
            if (imageObjectStorageDetails == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "imageObjectStorageDetails");
            }
            this.imageObjectStorageDetails = imageObjectStorageDetails;
            return this;
        }
        public Builder imageObjectStorageDetails(GetManagementAgentImagesManagementAgentImageImageObjectStorageDetail... imageObjectStorageDetails) {
            return imageObjectStorageDetails(List.of(imageObjectStorageDetails));
        }
        @CustomType.Setter
        public Builder objectUrl(String objectUrl) {
            if (objectUrl == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "objectUrl");
            }
            this.objectUrl = objectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder packageArchitectureType(String packageArchitectureType) {
            if (packageArchitectureType == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "packageArchitectureType");
            }
            this.packageArchitectureType = packageArchitectureType;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(String packageType) {
            if (packageType == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "packageType");
            }
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder platformName(String platformName) {
            if (platformName == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "platformName");
            }
            this.platformName = platformName;
            return this;
        }
        @CustomType.Setter
        public Builder platformType(String platformType) {
            if (platformType == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "platformType");
            }
            this.platformType = platformType;
            return this;
        }
        @CustomType.Setter
        public Builder size(Double size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentImagesManagementAgentImage", "version");
            }
            this.version = version;
            return this;
        }
        public GetManagementAgentImagesManagementAgentImage build() {
            final var _resultValue = new GetManagementAgentImagesManagementAgentImage();
            _resultValue.checksum = checksum;
            _resultValue.id = id;
            _resultValue.imageObjectStorageDetails = imageObjectStorageDetails;
            _resultValue.objectUrl = objectUrl;
            _resultValue.packageArchitectureType = packageArchitectureType;
            _resultValue.packageType = packageType;
            _resultValue.platformName = platformName;
            _resultValue.platformType = platformType;
            _resultValue.size = size;
            _resultValue.state = state;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
