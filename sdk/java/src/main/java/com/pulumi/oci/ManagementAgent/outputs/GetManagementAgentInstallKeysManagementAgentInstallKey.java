// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagementAgentInstallKeysManagementAgentInstallKey {
    /**
     * @return Total number of install for this keys
     * 
     */
    private Integer allowedKeyInstallCount;
    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    private String compartmentId;
    /**
     * @return Principal id of user who created the Agent Install key
     * 
     */
    private String createdByPrincipalId;
    /**
     * @return Total number of install for this keys
     * 
     */
    private Integer currentKeyInstallCount;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The display name for which the Key needs to be listed.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Agent install Key identifier
     * 
     */
    private String id;
    /**
     * @return If set to true, the install key has no expiration date or usage limit. Properties allowedKeyInstallCount and timeExpires are ignored if set to true. Defaults to false.
     * 
     */
    private Boolean isUnlimited;
    /**
     * @return Management Agent Install Key
     * 
     */
    private String key;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    private String timeCreated;
    /**
     * @return date after which key would expire after creation
     * 
     */
    private String timeExpires;
    /**
     * @return The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    private String timeUpdated;

    private GetManagementAgentInstallKeysManagementAgentInstallKey() {}
    /**
     * @return Total number of install for this keys
     * 
     */
    public Integer allowedKeyInstallCount() {
        return this.allowedKeyInstallCount;
    }
    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Principal id of user who created the Agent Install key
     * 
     */
    public String createdByPrincipalId() {
        return this.createdByPrincipalId;
    }
    /**
     * @return Total number of install for this keys
     * 
     */
    public Integer currentKeyInstallCount() {
        return this.currentKeyInstallCount;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The display name for which the Key needs to be listed.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Agent install Key identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If set to true, the install key has no expiration date or usage limit. Properties allowedKeyInstallCount and timeExpires are ignored if set to true. Defaults to false.
     * 
     */
    public Boolean isUnlimited() {
        return this.isUnlimited;
    }
    /**
     * @return Management Agent Install Key
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return date after which key would expire after creation
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }
    /**
     * @return The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentInstallKeysManagementAgentInstallKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer allowedKeyInstallCount;
        private String compartmentId;
        private String createdByPrincipalId;
        private Integer currentKeyInstallCount;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isUnlimited;
        private String key;
        private String lifecycleDetails;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeExpires;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetManagementAgentInstallKeysManagementAgentInstallKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedKeyInstallCount = defaults.allowedKeyInstallCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdByPrincipalId = defaults.createdByPrincipalId;
    	      this.currentKeyInstallCount = defaults.currentKeyInstallCount;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isUnlimited = defaults.isUnlimited;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpires = defaults.timeExpires;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder allowedKeyInstallCount(Integer allowedKeyInstallCount) {
            if (allowedKeyInstallCount == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "allowedKeyInstallCount");
            }
            this.allowedKeyInstallCount = allowedKeyInstallCount;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdByPrincipalId(String createdByPrincipalId) {
            if (createdByPrincipalId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "createdByPrincipalId");
            }
            this.createdByPrincipalId = createdByPrincipalId;
            return this;
        }
        @CustomType.Setter
        public Builder currentKeyInstallCount(Integer currentKeyInstallCount) {
            if (currentKeyInstallCount == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "currentKeyInstallCount");
            }
            this.currentKeyInstallCount = currentKeyInstallCount;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isUnlimited(Boolean isUnlimited) {
            if (isUnlimited == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "isUnlimited");
            }
            this.isUnlimited = isUnlimited;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(String timeExpires) {
            if (timeExpires == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "timeExpires");
            }
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentInstallKeysManagementAgentInstallKey", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetManagementAgentInstallKeysManagementAgentInstallKey build() {
            final var _resultValue = new GetManagementAgentInstallKeysManagementAgentInstallKey();
            _resultValue.allowedKeyInstallCount = allowedKeyInstallCount;
            _resultValue.compartmentId = compartmentId;
            _resultValue.createdByPrincipalId = createdByPrincipalId;
            _resultValue.currentKeyInstallCount = currentKeyInstallCount;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isUnlimited = isUnlimited;
            _resultValue.key = key;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpires = timeExpires;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
