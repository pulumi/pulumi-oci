// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagementAgentPluginsManagementAgentPlugin {
    /**
     * @return Management Agent Plugin description
     * 
     */
    private @Nullable String description;
    /**
     * @return Filter to return only Management Agent Plugins having the particular display name.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Management Agent Plugin Id
     * 
     */
    private @Nullable String id;
    /**
     * @return A flag to indicate whether a given plugin can be deployed from Agent Console UI or not.
     * 
     */
    private @Nullable Boolean isConsoleDeployable;
    /**
     * @return Management Agent Plugin Name
     * 
     */
    private @Nullable String name;
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    private @Nullable String state;
    /**
     * @return Supported Platform Types
     * 
     */
    private @Nullable List<String> supportedPlatformTypes;
    /**
     * @return Management Agent Plugin Version
     * 
     */
    private @Nullable Integer version;

    private GetManagementAgentPluginsManagementAgentPlugin() {}
    /**
     * @return Management Agent Plugin description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Filter to return only Management Agent Plugins having the particular display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Management Agent Plugin Id
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A flag to indicate whether a given plugin can be deployed from Agent Console UI or not.
     * 
     */
    public Optional<Boolean> isConsoleDeployable() {
        return Optional.ofNullable(this.isConsoleDeployable);
    }
    /**
     * @return Management Agent Plugin Name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Supported Platform Types
     * 
     */
    public List<String> supportedPlatformTypes() {
        return this.supportedPlatformTypes == null ? List.of() : this.supportedPlatformTypes;
    }
    /**
     * @return Management Agent Plugin Version
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentPluginsManagementAgentPlugin defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable Boolean isConsoleDeployable;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable List<String> supportedPlatformTypes;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(GetManagementAgentPluginsManagementAgentPlugin defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.isConsoleDeployable = defaults.isConsoleDeployable;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.supportedPlatformTypes = defaults.supportedPlatformTypes;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isConsoleDeployable(@Nullable Boolean isConsoleDeployable) {
            this.isConsoleDeployable = isConsoleDeployable;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder supportedPlatformTypes(@Nullable List<String> supportedPlatformTypes) {
            this.supportedPlatformTypes = supportedPlatformTypes;
            return this;
        }
        public Builder supportedPlatformTypes(String... supportedPlatformTypes) {
            return supportedPlatformTypes(List.of(supportedPlatformTypes));
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {
            this.version = version;
            return this;
        }
        public GetManagementAgentPluginsManagementAgentPlugin build() {
            final var o = new GetManagementAgentPluginsManagementAgentPlugin();
            o.description = description;
            o.displayName = displayName;
            o.id = id;
            o.isConsoleDeployable = isConsoleDeployable;
            o.name = name;
            o.state = state;
            o.supportedPlatformTypes = supportedPlatformTypes;
            o.version = version;
            return o;
        }
    }
}
