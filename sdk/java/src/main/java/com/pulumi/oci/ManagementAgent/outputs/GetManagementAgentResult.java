// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentDataSourceList;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentDataSourceSummaryList;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentManagementAgentProperty;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentPluginList;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagementAgentResult {
    /**
     * @return The current availability status of managementAgent
     * 
     */
    private String availabilityStatus;
    /**
     * @return Compartment owning this DataSource.
     * 
     */
    private String compartmentId;
    /**
     * @return list of dataSources associated with the agent
     * 
     */
    private List<GetManagementAgentDataSourceList> dataSourceLists;
    private List<GetManagementAgentDataSourceSummaryList> dataSourceSummaryLists;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    private List<String> deployPluginsIds;
    /**
     * @return Management Agent Name
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Management Agent host machine name
     * 
     */
    private String host;
    /**
     * @return Host resource ocid
     * 
     */
    private String hostId;
    /**
     * @return agent identifier
     * 
     */
    private String id;
    /**
     * @return agent install key identifier
     * 
     */
    private String installKeyId;
    /**
     * @return Path where Management Agent is installed
     * 
     */
    private String installPath;
    /**
     * @return The install type, either AGENT or GATEWAY
     * 
     */
    private String installType;
    /**
     * @return true if the agent can be upgraded automatically; false if it must be upgraded manually. This flag is derived from the tenancy level auto upgrade preference.
     * 
     */
    private Boolean isAgentAutoUpgradable;
    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    private Boolean isCustomerDeployed;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    private String managedAgentId;
    private String managementAgentId;
    /**
     * @return Additional properties for this Management Agent
     * 
     */
    private List<GetManagementAgentManagementAgentProperty> managementAgentProperties;
    /**
     * @return Platform Name
     * 
     */
    private String platformName;
    /**
     * @return Platform Type
     * 
     */
    private String platformType;
    /**
     * @return Platform Version
     * 
     */
    private String platformVersion;
    /**
     * @return list of managementAgentPlugins associated with the agent
     * 
     */
    private List<GetManagementAgentPluginList> pluginLists;
    /**
     * @return Version of the deployment artifact instantiated by this Management Agent. The format for Standalone resourceMode is YYMMDD.HHMM, and the format for other modes (whose artifacts are based upon Standalone but can advance independently) is YYMMDD.HHMM.VVVVVVVVVVVV. VVVVVVVVVVVV is always a numeric value between 000000000000 and 999999999999
     * 
     */
    private String resourceArtifactVersion;
    /**
     * @return The current state of managementAgent
     * 
     */
    private String state;
    /**
     * @return The time the Management Agent was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Management Agent has last recorded its health status in telemetry. This value will be null if the agent has not recorded its health status in last 7 days. An RFC3339 formatted datetime string
     * 
     */
    private String timeLastHeartbeat;
    /**
     * @return The time the Management Agent was last updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return Management Agent Version
     * 
     */
    private String version;

    private GetManagementAgentResult() {}
    /**
     * @return The current availability status of managementAgent
     * 
     */
    public String availabilityStatus() {
        return this.availabilityStatus;
    }
    /**
     * @return Compartment owning this DataSource.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return list of dataSources associated with the agent
     * 
     */
    public List<GetManagementAgentDataSourceList> dataSourceLists() {
        return this.dataSourceLists;
    }
    public List<GetManagementAgentDataSourceSummaryList> dataSourceSummaryLists() {
        return this.dataSourceSummaryLists;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    public List<String> deployPluginsIds() {
        return this.deployPluginsIds;
    }
    /**
     * @return Management Agent Name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Management Agent host machine name
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Host resource ocid
     * 
     */
    public String hostId() {
        return this.hostId;
    }
    /**
     * @return agent identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return agent install key identifier
     * 
     */
    public String installKeyId() {
        return this.installKeyId;
    }
    /**
     * @return Path where Management Agent is installed
     * 
     */
    public String installPath() {
        return this.installPath;
    }
    /**
     * @return The install type, either AGENT or GATEWAY
     * 
     */
    public String installType() {
        return this.installType;
    }
    /**
     * @return true if the agent can be upgraded automatically; false if it must be upgraded manually. This flag is derived from the tenancy level auto upgrade preference.
     * 
     */
    public Boolean isAgentAutoUpgradable() {
        return this.isAgentAutoUpgradable;
    }
    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    public Boolean isCustomerDeployed() {
        return this.isCustomerDeployed;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String managedAgentId() {
        return this.managedAgentId;
    }
    public String managementAgentId() {
        return this.managementAgentId;
    }
    /**
     * @return Additional properties for this Management Agent
     * 
     */
    public List<GetManagementAgentManagementAgentProperty> managementAgentProperties() {
        return this.managementAgentProperties;
    }
    /**
     * @return Platform Name
     * 
     */
    public String platformName() {
        return this.platformName;
    }
    /**
     * @return Platform Type
     * 
     */
    public String platformType() {
        return this.platformType;
    }
    /**
     * @return Platform Version
     * 
     */
    public String platformVersion() {
        return this.platformVersion;
    }
    /**
     * @return list of managementAgentPlugins associated with the agent
     * 
     */
    public List<GetManagementAgentPluginList> pluginLists() {
        return this.pluginLists;
    }
    /**
     * @return Version of the deployment artifact instantiated by this Management Agent. The format for Standalone resourceMode is YYMMDD.HHMM, and the format for other modes (whose artifacts are based upon Standalone but can advance independently) is YYMMDD.HHMM.VVVVVVVVVVVV. VVVVVVVVVVVV is always a numeric value between 000000000000 and 999999999999
     * 
     */
    public String resourceArtifactVersion() {
        return this.resourceArtifactVersion;
    }
    /**
     * @return The current state of managementAgent
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the Management Agent was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Management Agent has last recorded its health status in telemetry. This value will be null if the agent has not recorded its health status in last 7 days. An RFC3339 formatted datetime string
     * 
     */
    public String timeLastHeartbeat() {
        return this.timeLastHeartbeat;
    }
    /**
     * @return The time the Management Agent was last updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Management Agent Version
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityStatus;
        private String compartmentId;
        private List<GetManagementAgentDataSourceList> dataSourceLists;
        private List<GetManagementAgentDataSourceSummaryList> dataSourceSummaryLists;
        private Map<String,String> definedTags;
        private List<String> deployPluginsIds;
        private String displayName;
        private Map<String,String> freeformTags;
        private String host;
        private String hostId;
        private String id;
        private String installKeyId;
        private String installPath;
        private String installType;
        private Boolean isAgentAutoUpgradable;
        private Boolean isCustomerDeployed;
        private String lifecycleDetails;
        private String managedAgentId;
        private String managementAgentId;
        private List<GetManagementAgentManagementAgentProperty> managementAgentProperties;
        private String platformName;
        private String platformType;
        private String platformVersion;
        private List<GetManagementAgentPluginList> pluginLists;
        private String resourceArtifactVersion;
        private String state;
        private String timeCreated;
        private String timeLastHeartbeat;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetManagementAgentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityStatus = defaults.availabilityStatus;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dataSourceLists = defaults.dataSourceLists;
    	      this.dataSourceSummaryLists = defaults.dataSourceSummaryLists;
    	      this.definedTags = defaults.definedTags;
    	      this.deployPluginsIds = defaults.deployPluginsIds;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.host = defaults.host;
    	      this.hostId = defaults.hostId;
    	      this.id = defaults.id;
    	      this.installKeyId = defaults.installKeyId;
    	      this.installPath = defaults.installPath;
    	      this.installType = defaults.installType;
    	      this.isAgentAutoUpgradable = defaults.isAgentAutoUpgradable;
    	      this.isCustomerDeployed = defaults.isCustomerDeployed;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managedAgentId = defaults.managedAgentId;
    	      this.managementAgentId = defaults.managementAgentId;
    	      this.managementAgentProperties = defaults.managementAgentProperties;
    	      this.platformName = defaults.platformName;
    	      this.platformType = defaults.platformType;
    	      this.platformVersion = defaults.platformVersion;
    	      this.pluginLists = defaults.pluginLists;
    	      this.resourceArtifactVersion = defaults.resourceArtifactVersion;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastHeartbeat = defaults.timeLastHeartbeat;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder availabilityStatus(String availabilityStatus) {
            if (availabilityStatus == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "availabilityStatus");
            }
            this.availabilityStatus = availabilityStatus;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceLists(List<GetManagementAgentDataSourceList> dataSourceLists) {
            if (dataSourceLists == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "dataSourceLists");
            }
            this.dataSourceLists = dataSourceLists;
            return this;
        }
        public Builder dataSourceLists(GetManagementAgentDataSourceList... dataSourceLists) {
            return dataSourceLists(List.of(dataSourceLists));
        }
        @CustomType.Setter
        public Builder dataSourceSummaryLists(List<GetManagementAgentDataSourceSummaryList> dataSourceSummaryLists) {
            if (dataSourceSummaryLists == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "dataSourceSummaryLists");
            }
            this.dataSourceSummaryLists = dataSourceSummaryLists;
            return this;
        }
        public Builder dataSourceSummaryLists(GetManagementAgentDataSourceSummaryList... dataSourceSummaryLists) {
            return dataSourceSummaryLists(List.of(dataSourceSummaryLists));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deployPluginsIds(List<String> deployPluginsIds) {
            if (deployPluginsIds == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "deployPluginsIds");
            }
            this.deployPluginsIds = deployPluginsIds;
            return this;
        }
        public Builder deployPluginsIds(String... deployPluginsIds) {
            return deployPluginsIds(List.of(deployPluginsIds));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder hostId(String hostId) {
            if (hostId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "hostId");
            }
            this.hostId = hostId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder installKeyId(String installKeyId) {
            if (installKeyId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "installKeyId");
            }
            this.installKeyId = installKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder installPath(String installPath) {
            if (installPath == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "installPath");
            }
            this.installPath = installPath;
            return this;
        }
        @CustomType.Setter
        public Builder installType(String installType) {
            if (installType == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "installType");
            }
            this.installType = installType;
            return this;
        }
        @CustomType.Setter
        public Builder isAgentAutoUpgradable(Boolean isAgentAutoUpgradable) {
            if (isAgentAutoUpgradable == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "isAgentAutoUpgradable");
            }
            this.isAgentAutoUpgradable = isAgentAutoUpgradable;
            return this;
        }
        @CustomType.Setter
        public Builder isCustomerDeployed(Boolean isCustomerDeployed) {
            if (isCustomerDeployed == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "isCustomerDeployed");
            }
            this.isCustomerDeployed = isCustomerDeployed;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder managedAgentId(String managedAgentId) {
            if (managedAgentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "managedAgentId");
            }
            this.managedAgentId = managedAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder managementAgentId(String managementAgentId) {
            if (managementAgentId == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "managementAgentId");
            }
            this.managementAgentId = managementAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder managementAgentProperties(List<GetManagementAgentManagementAgentProperty> managementAgentProperties) {
            if (managementAgentProperties == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "managementAgentProperties");
            }
            this.managementAgentProperties = managementAgentProperties;
            return this;
        }
        public Builder managementAgentProperties(GetManagementAgentManagementAgentProperty... managementAgentProperties) {
            return managementAgentProperties(List.of(managementAgentProperties));
        }
        @CustomType.Setter
        public Builder platformName(String platformName) {
            if (platformName == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "platformName");
            }
            this.platformName = platformName;
            return this;
        }
        @CustomType.Setter
        public Builder platformType(String platformType) {
            if (platformType == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "platformType");
            }
            this.platformType = platformType;
            return this;
        }
        @CustomType.Setter
        public Builder platformVersion(String platformVersion) {
            if (platformVersion == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "platformVersion");
            }
            this.platformVersion = platformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pluginLists(List<GetManagementAgentPluginList> pluginLists) {
            if (pluginLists == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "pluginLists");
            }
            this.pluginLists = pluginLists;
            return this;
        }
        public Builder pluginLists(GetManagementAgentPluginList... pluginLists) {
            return pluginLists(List.of(pluginLists));
        }
        @CustomType.Setter
        public Builder resourceArtifactVersion(String resourceArtifactVersion) {
            if (resourceArtifactVersion == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "resourceArtifactVersion");
            }
            this.resourceArtifactVersion = resourceArtifactVersion;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastHeartbeat(String timeLastHeartbeat) {
            if (timeLastHeartbeat == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "timeLastHeartbeat");
            }
            this.timeLastHeartbeat = timeLastHeartbeat;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetManagementAgentResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetManagementAgentResult build() {
            final var _resultValue = new GetManagementAgentResult();
            _resultValue.availabilityStatus = availabilityStatus;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dataSourceLists = dataSourceLists;
            _resultValue.dataSourceSummaryLists = dataSourceSummaryLists;
            _resultValue.definedTags = definedTags;
            _resultValue.deployPluginsIds = deployPluginsIds;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.host = host;
            _resultValue.hostId = hostId;
            _resultValue.id = id;
            _resultValue.installKeyId = installKeyId;
            _resultValue.installPath = installPath;
            _resultValue.installType = installType;
            _resultValue.isAgentAutoUpgradable = isAgentAutoUpgradable;
            _resultValue.isCustomerDeployed = isCustomerDeployed;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.managedAgentId = managedAgentId;
            _resultValue.managementAgentId = managementAgentId;
            _resultValue.managementAgentProperties = managementAgentProperties;
            _resultValue.platformName = platformName;
            _resultValue.platformType = platformType;
            _resultValue.platformVersion = platformVersion;
            _resultValue.pluginLists = pluginLists;
            _resultValue.resourceArtifactVersion = resourceArtifactVersion;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastHeartbeat = timeLastHeartbeat;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
