// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentsFilter;
import com.pulumi.oci.ManagementAgent.outputs.GetManagementAgentsManagementAgent;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagementAgentsResult {
    private @Nullable String accessLevel;
    /**
     * @return The current availability status of managementAgent
     * 
     */
    private @Nullable String availabilityStatus;
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return Management Agent Name
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetManagementAgentsFilter> filters;
    private @Nullable List<String> gatewayIds;
    /**
     * @return Host resource ocid
     * 
     */
    private @Nullable String hostId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The install type, either AGENT or GATEWAY
     * 
     */
    private @Nullable String installType;
    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    private @Nullable Boolean isCustomerDeployed;
    /**
     * @return The list of management_agents.
     * 
     */
    private List<GetManagementAgentsManagementAgent> managementAgents;
    /**
     * @return Platform Type
     * 
     */
    private @Nullable List<String> platformTypes;
    /**
     * @return Management Agent Plugin Name
     * 
     */
    private @Nullable List<String> pluginNames;
    /**
     * @return The current state of managementAgent
     * 
     */
    private @Nullable String state;
    /**
     * @return Management Agent Version
     * 
     */
    private @Nullable List<String> versions;

    private GetManagementAgentsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The current availability status of managementAgent
     * 
     */
    public Optional<String> availabilityStatus() {
        return Optional.ofNullable(this.availabilityStatus);
    }
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return Management Agent Name
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetManagementAgentsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public List<String> gatewayIds() {
        return this.gatewayIds == null ? List.of() : this.gatewayIds;
    }
    /**
     * @return Host resource ocid
     * 
     */
    public Optional<String> hostId() {
        return Optional.ofNullable(this.hostId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The install type, either AGENT or GATEWAY
     * 
     */
    public Optional<String> installType() {
        return Optional.ofNullable(this.installType);
    }
    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    public Optional<Boolean> isCustomerDeployed() {
        return Optional.ofNullable(this.isCustomerDeployed);
    }
    /**
     * @return The list of management_agents.
     * 
     */
    public List<GetManagementAgentsManagementAgent> managementAgents() {
        return this.managementAgents;
    }
    /**
     * @return Platform Type
     * 
     */
    public List<String> platformTypes() {
        return this.platformTypes == null ? List.of() : this.platformTypes;
    }
    /**
     * @return Management Agent Plugin Name
     * 
     */
    public List<String> pluginNames() {
        return this.pluginNames == null ? List.of() : this.pluginNames;
    }
    /**
     * @return The current state of managementAgent
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Management Agent Version
     * 
     */
    public List<String> versions() {
        return this.versions == null ? List.of() : this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String availabilityStatus;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetManagementAgentsFilter> filters;
        private @Nullable List<String> gatewayIds;
        private @Nullable String hostId;
        private String id;
        private @Nullable String installType;
        private @Nullable Boolean isCustomerDeployed;
        private List<GetManagementAgentsManagementAgent> managementAgents;
        private @Nullable List<String> platformTypes;
        private @Nullable List<String> pluginNames;
        private @Nullable String state;
        private @Nullable List<String> versions;
        public Builder() {}
        public Builder(GetManagementAgentsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.availabilityStatus = defaults.availabilityStatus;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.gatewayIds = defaults.gatewayIds;
    	      this.hostId = defaults.hostId;
    	      this.id = defaults.id;
    	      this.installType = defaults.installType;
    	      this.isCustomerDeployed = defaults.isCustomerDeployed;
    	      this.managementAgents = defaults.managementAgents;
    	      this.platformTypes = defaults.platformTypes;
    	      this.pluginNames = defaults.pluginNames;
    	      this.state = defaults.state;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityStatus(@Nullable String availabilityStatus) {
            this.availabilityStatus = availabilityStatus;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagementAgentsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagementAgentsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder gatewayIds(@Nullable List<String> gatewayIds) {
            this.gatewayIds = gatewayIds;
            return this;
        }
        public Builder gatewayIds(String... gatewayIds) {
            return gatewayIds(List.of(gatewayIds));
        }
        @CustomType.Setter
        public Builder hostId(@Nullable String hostId) {
            this.hostId = hostId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder installType(@Nullable String installType) {
            this.installType = installType;
            return this;
        }
        @CustomType.Setter
        public Builder isCustomerDeployed(@Nullable Boolean isCustomerDeployed) {
            this.isCustomerDeployed = isCustomerDeployed;
            return this;
        }
        @CustomType.Setter
        public Builder managementAgents(List<GetManagementAgentsManagementAgent> managementAgents) {
            this.managementAgents = Objects.requireNonNull(managementAgents);
            return this;
        }
        public Builder managementAgents(GetManagementAgentsManagementAgent... managementAgents) {
            return managementAgents(List.of(managementAgents));
        }
        @CustomType.Setter
        public Builder platformTypes(@Nullable List<String> platformTypes) {
            this.platformTypes = platformTypes;
            return this;
        }
        public Builder platformTypes(String... platformTypes) {
            return platformTypes(List.of(platformTypes));
        }
        @CustomType.Setter
        public Builder pluginNames(@Nullable List<String> pluginNames) {
            this.pluginNames = pluginNames;
            return this;
        }
        public Builder pluginNames(String... pluginNames) {
            return pluginNames(List.of(pluginNames));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder versions(@Nullable List<String> versions) {
            this.versions = versions;
            return this;
        }
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }
        public GetManagementAgentsResult build() {
            final var _resultValue = new GetManagementAgentsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.availabilityStatus = availabilityStatus;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.gatewayIds = gatewayIds;
            _resultValue.hostId = hostId;
            _resultValue.id = id;
            _resultValue.installType = installType;
            _resultValue.isCustomerDeployed = isCustomerDeployed;
            _resultValue.managementAgents = managementAgents;
            _resultValue.platformTypes = platformTypes;
            _resultValue.pluginNames = pluginNames;
            _resultValue.state = state;
            _resultValue.versions = versions;
            return _resultValue;
        }
    }
}
