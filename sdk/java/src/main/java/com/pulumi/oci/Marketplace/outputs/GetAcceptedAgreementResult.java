// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAcceptedAgreementResult {
    private String acceptedAgreementId;
    /**
     * @return The unique identifier for the terms of use agreement itself.
     * 
     */
    private String agreementId;
    /**
     * @return The unique identifier for the compartment where the agreement was accepted.
     * 
     */
    private String compartmentId;
    /**
     * @return The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A display name for the accepted agreement.
     * 
     */
    private String displayName;
    /**
     * @return The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The unique identifier for the acceptance of the agreement within a specific compartment.
     * 
     */
    private String id;
    /**
     * @return The unique identifier for the listing associated with the agreement.
     * 
     */
    private String listingId;
    /**
     * @return The package version associated with the agreement.
     * 
     */
    private String packageVersion;
    private String signature;
    /**
     * @return The time the agreement was accepted.
     * 
     */
    private String timeAccepted;

    private GetAcceptedAgreementResult() {}
    public String acceptedAgreementId() {
        return this.acceptedAgreementId;
    }
    /**
     * @return The unique identifier for the terms of use agreement itself.
     * 
     */
    public String agreementId() {
        return this.agreementId;
    }
    /**
     * @return The unique identifier for the compartment where the agreement was accepted.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A display name for the accepted agreement.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The unique identifier for the acceptance of the agreement within a specific compartment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The unique identifier for the listing associated with the agreement.
     * 
     */
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return The package version associated with the agreement.
     * 
     */
    public String packageVersion() {
        return this.packageVersion;
    }
    public String signature() {
        return this.signature;
    }
    /**
     * @return The time the agreement was accepted.
     * 
     */
    public String timeAccepted() {
        return this.timeAccepted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAcceptedAgreementResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceptedAgreementId;
        private String agreementId;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String listingId;
        private String packageVersion;
        private String signature;
        private String timeAccepted;
        public Builder() {}
        public Builder(GetAcceptedAgreementResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptedAgreementId = defaults.acceptedAgreementId;
    	      this.agreementId = defaults.agreementId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.listingId = defaults.listingId;
    	      this.packageVersion = defaults.packageVersion;
    	      this.signature = defaults.signature;
    	      this.timeAccepted = defaults.timeAccepted;
        }

        @CustomType.Setter
        public Builder acceptedAgreementId(String acceptedAgreementId) {
            if (acceptedAgreementId == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "acceptedAgreementId");
            }
            this.acceptedAgreementId = acceptedAgreementId;
            return this;
        }
        @CustomType.Setter
        public Builder agreementId(String agreementId) {
            if (agreementId == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "agreementId");
            }
            this.agreementId = agreementId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            if (listingId == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "listingId");
            }
            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder packageVersion(String packageVersion) {
            if (packageVersion == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "packageVersion");
            }
            this.packageVersion = packageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder signature(String signature) {
            if (signature == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "signature");
            }
            this.signature = signature;
            return this;
        }
        @CustomType.Setter
        public Builder timeAccepted(String timeAccepted) {
            if (timeAccepted == null) {
              throw new MissingRequiredPropertyException("GetAcceptedAgreementResult", "timeAccepted");
            }
            this.timeAccepted = timeAccepted;
            return this;
        }
        public GetAcceptedAgreementResult build() {
            final var _resultValue = new GetAcceptedAgreementResult();
            _resultValue.acceptedAgreementId = acceptedAgreementId;
            _resultValue.agreementId = agreementId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.listingId = listingId;
            _resultValue.packageVersion = packageVersion;
            _resultValue.signature = signature;
            _resultValue.timeAccepted = timeAccepted;
            return _resultValue;
        }
    }
}
