// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Marketplace.outputs.GetListingPackagePricingInternationalMarketPrice;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListingPackagePricing {
    /**
     * @return The currency of the pricing model.
     * 
     */
    private String currency;
    /**
     * @return The model for international market pricing.
     * 
     */
    private List<GetListingPackagePricingInternationalMarketPrice> internationalMarketPrices;
    /**
     * @return The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
     * 
     */
    private String payGoStrategy;
    /**
     * @return The pricing rate.
     * 
     */
    private Double rate;
    /**
     * @return The type of the pricing model.
     * 
     */
    private String type;

    private GetListingPackagePricing() {}
    /**
     * @return The currency of the pricing model.
     * 
     */
    public String currency() {
        return this.currency;
    }
    /**
     * @return The model for international market pricing.
     * 
     */
    public List<GetListingPackagePricingInternationalMarketPrice> internationalMarketPrices() {
        return this.internationalMarketPrices;
    }
    /**
     * @return The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
     * 
     */
    public String payGoStrategy() {
        return this.payGoStrategy;
    }
    /**
     * @return The pricing rate.
     * 
     */
    public Double rate() {
        return this.rate;
    }
    /**
     * @return The type of the pricing model.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingPackagePricing defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String currency;
        private List<GetListingPackagePricingInternationalMarketPrice> internationalMarketPrices;
        private String payGoStrategy;
        private Double rate;
        private String type;
        public Builder() {}
        public Builder(GetListingPackagePricing defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currency = defaults.currency;
    	      this.internationalMarketPrices = defaults.internationalMarketPrices;
    	      this.payGoStrategy = defaults.payGoStrategy;
    	      this.rate = defaults.rate;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder currency(String currency) {
            if (currency == null) {
              throw new MissingRequiredPropertyException("GetListingPackagePricing", "currency");
            }
            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder internationalMarketPrices(List<GetListingPackagePricingInternationalMarketPrice> internationalMarketPrices) {
            if (internationalMarketPrices == null) {
              throw new MissingRequiredPropertyException("GetListingPackagePricing", "internationalMarketPrices");
            }
            this.internationalMarketPrices = internationalMarketPrices;
            return this;
        }
        public Builder internationalMarketPrices(GetListingPackagePricingInternationalMarketPrice... internationalMarketPrices) {
            return internationalMarketPrices(List.of(internationalMarketPrices));
        }
        @CustomType.Setter
        public Builder payGoStrategy(String payGoStrategy) {
            if (payGoStrategy == null) {
              throw new MissingRequiredPropertyException("GetListingPackagePricing", "payGoStrategy");
            }
            this.payGoStrategy = payGoStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder rate(Double rate) {
            if (rate == null) {
              throw new MissingRequiredPropertyException("GetListingPackagePricing", "rate");
            }
            this.rate = rate;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetListingPackagePricing", "type");
            }
            this.type = type;
            return this;
        }
        public GetListingPackagePricing build() {
            final var _resultValue = new GetListingPackagePricing();
            _resultValue.currency = currency;
            _resultValue.internationalMarketPrices = internationalMarketPrices;
            _resultValue.payGoStrategy = payGoStrategy;
            _resultValue.rate = rate;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
