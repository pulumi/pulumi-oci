// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Marketplace.outputs.GetListingBanner;
import com.pulumi.oci.Marketplace.outputs.GetListingDocumentationLink;
import com.pulumi.oci.Marketplace.outputs.GetListingIcon;
import com.pulumi.oci.Marketplace.outputs.GetListingLanguage;
import com.pulumi.oci.Marketplace.outputs.GetListingLink;
import com.pulumi.oci.Marketplace.outputs.GetListingPublisher;
import com.pulumi.oci.Marketplace.outputs.GetListingRegion;
import com.pulumi.oci.Marketplace.outputs.GetListingScreenshot;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportContact;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportLink;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportedOperatingSystem;
import com.pulumi.oci.Marketplace.outputs.GetListingVideo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetListingResult {
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private @Nullable List<GetListingBanner> banners;
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    private @Nullable List<String> categories;
    private @Nullable String compartmentId;
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    private @Nullable List<String> compatibleArchitectures;
    /**
     * @return The default package version.
     * 
     */
    private @Nullable String defaultPackageVersion;
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    private @Nullable List<GetListingDocumentationLink> documentationLinks;
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private @Nullable List<GetListingIcon> icons;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    private @Nullable Boolean isFeatured;
    /**
     * @return Keywords associated with the listing.
     * 
     */
    private @Nullable String keywords;
    /**
     * @return Languages supported by the listing.
     * 
     */
    private @Nullable List<GetListingLanguage> languages;
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    private @Nullable String licenseModelDescription;
    /**
     * @return Reference links.
     * 
     */
    private @Nullable List<GetListingLink> links;
    private String listingId;
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    private @Nullable String listingType;
    /**
     * @return A long description of the listing.
     * 
     */
    private @Nullable String longDescription;
    /**
     * @return Text that describes the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The listing&#39;s package type.
     * 
     */
    private @Nullable String packageType;
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    private @Nullable List<GetListingPublisher> publishers;
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    private @Nullable List<GetListingRegion> regions;
    /**
     * @return Release notes for the listing.
     * 
     */
    private @Nullable String releaseNotes;
    /**
     * @return Screenshots of the listing.
     * 
     */
    private @Nullable List<GetListingScreenshot> screenshots;
    /**
     * @return A short description of the listing.
     * 
     */
    private @Nullable String shortDescription;
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    private @Nullable List<GetListingSupportContact> supportContacts;
    /**
     * @return Links to support resources for the listing.
     * 
     */
    private @Nullable List<GetListingSupportLink> supportLinks;
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    private @Nullable List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
    /**
     * @return System requirements for the listing.
     * 
     */
    private @Nullable String systemRequirements;
    /**
     * @return The tagline of the listing.
     * 
     */
    private @Nullable String tagline;
    /**
     * @return The release date of the listing.
     * 
     */
    private @Nullable String timeReleased;
    /**
     * @return Usage information for the listing.
     * 
     */
    private @Nullable String usageInformation;
    /**
     * @return The version of the listing.
     * 
     */
    private @Nullable String version;
    /**
     * @return Videos of the listing.
     * 
     */
    private @Nullable List<GetListingVideo> videos;

    private GetListingResult() {}
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingBanner> banners() {
        return this.banners == null ? List.of() : this.banners;
    }
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    public List<String> categories() {
        return this.categories == null ? List.of() : this.categories;
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    public List<String> compatibleArchitectures() {
        return this.compatibleArchitectures == null ? List.of() : this.compatibleArchitectures;
    }
    /**
     * @return The default package version.
     * 
     */
    public Optional<String> defaultPackageVersion() {
        return Optional.ofNullable(this.defaultPackageVersion);
    }
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    public List<GetListingDocumentationLink> documentationLinks() {
        return this.documentationLinks == null ? List.of() : this.documentationLinks;
    }
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingIcon> icons() {
        return this.icons == null ? List.of() : this.icons;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    public Optional<Boolean> isFeatured() {
        return Optional.ofNullable(this.isFeatured);
    }
    /**
     * @return Keywords associated with the listing.
     * 
     */
    public Optional<String> keywords() {
        return Optional.ofNullable(this.keywords);
    }
    /**
     * @return Languages supported by the listing.
     * 
     */
    public List<GetListingLanguage> languages() {
        return this.languages == null ? List.of() : this.languages;
    }
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    public Optional<String> licenseModelDescription() {
        return Optional.ofNullable(this.licenseModelDescription);
    }
    /**
     * @return Reference links.
     * 
     */
    public List<GetListingLink> links() {
        return this.links == null ? List.of() : this.links;
    }
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    public Optional<String> listingType() {
        return Optional.ofNullable(this.listingType);
    }
    /**
     * @return A long description of the listing.
     * 
     */
    public Optional<String> longDescription() {
        return Optional.ofNullable(this.longDescription);
    }
    /**
     * @return Text that describes the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The listing&#39;s package type.
     * 
     */
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    public List<GetListingPublisher> publishers() {
        return this.publishers == null ? List.of() : this.publishers;
    }
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    public List<GetListingRegion> regions() {
        return this.regions == null ? List.of() : this.regions;
    }
    /**
     * @return Release notes for the listing.
     * 
     */
    public Optional<String> releaseNotes() {
        return Optional.ofNullable(this.releaseNotes);
    }
    /**
     * @return Screenshots of the listing.
     * 
     */
    public List<GetListingScreenshot> screenshots() {
        return this.screenshots == null ? List.of() : this.screenshots;
    }
    /**
     * @return A short description of the listing.
     * 
     */
    public Optional<String> shortDescription() {
        return Optional.ofNullable(this.shortDescription);
    }
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    public List<GetListingSupportContact> supportContacts() {
        return this.supportContacts == null ? List.of() : this.supportContacts;
    }
    /**
     * @return Links to support resources for the listing.
     * 
     */
    public List<GetListingSupportLink> supportLinks() {
        return this.supportLinks == null ? List.of() : this.supportLinks;
    }
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    public List<GetListingSupportedOperatingSystem> supportedOperatingSystems() {
        return this.supportedOperatingSystems == null ? List.of() : this.supportedOperatingSystems;
    }
    /**
     * @return System requirements for the listing.
     * 
     */
    public Optional<String> systemRequirements() {
        return Optional.ofNullable(this.systemRequirements);
    }
    /**
     * @return The tagline of the listing.
     * 
     */
    public Optional<String> tagline() {
        return Optional.ofNullable(this.tagline);
    }
    /**
     * @return The release date of the listing.
     * 
     */
    public Optional<String> timeReleased() {
        return Optional.ofNullable(this.timeReleased);
    }
    /**
     * @return Usage information for the listing.
     * 
     */
    public Optional<String> usageInformation() {
        return Optional.ofNullable(this.usageInformation);
    }
    /**
     * @return The version of the listing.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return Videos of the listing.
     * 
     */
    public List<GetListingVideo> videos() {
        return this.videos == null ? List.of() : this.videos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetListingBanner> banners;
        private @Nullable List<String> categories;
        private @Nullable String compartmentId;
        private @Nullable List<String> compatibleArchitectures;
        private @Nullable String defaultPackageVersion;
        private @Nullable List<GetListingDocumentationLink> documentationLinks;
        private @Nullable List<GetListingIcon> icons;
        private @Nullable String id;
        private @Nullable Boolean isFeatured;
        private @Nullable String keywords;
        private @Nullable List<GetListingLanguage> languages;
        private @Nullable String licenseModelDescription;
        private @Nullable List<GetListingLink> links;
        private String listingId;
        private @Nullable String listingType;
        private @Nullable String longDescription;
        private @Nullable String name;
        private @Nullable String packageType;
        private @Nullable List<GetListingPublisher> publishers;
        private @Nullable List<GetListingRegion> regions;
        private @Nullable String releaseNotes;
        private @Nullable List<GetListingScreenshot> screenshots;
        private @Nullable String shortDescription;
        private @Nullable List<GetListingSupportContact> supportContacts;
        private @Nullable List<GetListingSupportLink> supportLinks;
        private @Nullable List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
        private @Nullable String systemRequirements;
        private @Nullable String tagline;
        private @Nullable String timeReleased;
        private @Nullable String usageInformation;
        private @Nullable String version;
        private @Nullable List<GetListingVideo> videos;
        public Builder() {}
        public Builder(GetListingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banners = defaults.banners;
    	      this.categories = defaults.categories;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compatibleArchitectures = defaults.compatibleArchitectures;
    	      this.defaultPackageVersion = defaults.defaultPackageVersion;
    	      this.documentationLinks = defaults.documentationLinks;
    	      this.icons = defaults.icons;
    	      this.id = defaults.id;
    	      this.isFeatured = defaults.isFeatured;
    	      this.keywords = defaults.keywords;
    	      this.languages = defaults.languages;
    	      this.licenseModelDescription = defaults.licenseModelDescription;
    	      this.links = defaults.links;
    	      this.listingId = defaults.listingId;
    	      this.listingType = defaults.listingType;
    	      this.longDescription = defaults.longDescription;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.publishers = defaults.publishers;
    	      this.regions = defaults.regions;
    	      this.releaseNotes = defaults.releaseNotes;
    	      this.screenshots = defaults.screenshots;
    	      this.shortDescription = defaults.shortDescription;
    	      this.supportContacts = defaults.supportContacts;
    	      this.supportLinks = defaults.supportLinks;
    	      this.supportedOperatingSystems = defaults.supportedOperatingSystems;
    	      this.systemRequirements = defaults.systemRequirements;
    	      this.tagline = defaults.tagline;
    	      this.timeReleased = defaults.timeReleased;
    	      this.usageInformation = defaults.usageInformation;
    	      this.version = defaults.version;
    	      this.videos = defaults.videos;
        }

        @CustomType.Setter
        public Builder banners(@Nullable List<GetListingBanner> banners) {
            this.banners = banners;
            return this;
        }
        public Builder banners(GetListingBanner... banners) {
            return banners(List.of(banners));
        }
        @CustomType.Setter
        public Builder categories(@Nullable List<String> categories) {
            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compatibleArchitectures(@Nullable List<String> compatibleArchitectures) {
            this.compatibleArchitectures = compatibleArchitectures;
            return this;
        }
        public Builder compatibleArchitectures(String... compatibleArchitectures) {
            return compatibleArchitectures(List.of(compatibleArchitectures));
        }
        @CustomType.Setter
        public Builder defaultPackageVersion(@Nullable String defaultPackageVersion) {
            this.defaultPackageVersion = defaultPackageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder documentationLinks(@Nullable List<GetListingDocumentationLink> documentationLinks) {
            this.documentationLinks = documentationLinks;
            return this;
        }
        public Builder documentationLinks(GetListingDocumentationLink... documentationLinks) {
            return documentationLinks(List.of(documentationLinks));
        }
        @CustomType.Setter
        public Builder icons(@Nullable List<GetListingIcon> icons) {
            this.icons = icons;
            return this;
        }
        public Builder icons(GetListingIcon... icons) {
            return icons(List.of(icons));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFeatured(@Nullable Boolean isFeatured) {
            this.isFeatured = isFeatured;
            return this;
        }
        @CustomType.Setter
        public Builder keywords(@Nullable String keywords) {
            this.keywords = keywords;
            return this;
        }
        @CustomType.Setter
        public Builder languages(@Nullable List<GetListingLanguage> languages) {
            this.languages = languages;
            return this;
        }
        public Builder languages(GetListingLanguage... languages) {
            return languages(List.of(languages));
        }
        @CustomType.Setter
        public Builder licenseModelDescription(@Nullable String licenseModelDescription) {
            this.licenseModelDescription = licenseModelDescription;
            return this;
        }
        @CustomType.Setter
        public Builder links(@Nullable List<GetListingLink> links) {
            this.links = links;
            return this;
        }
        public Builder links(GetListingLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            this.listingId = Objects.requireNonNull(listingId);
            return this;
        }
        @CustomType.Setter
        public Builder listingType(@Nullable String listingType) {
            this.listingType = listingType;
            return this;
        }
        @CustomType.Setter
        public Builder longDescription(@Nullable String longDescription) {
            this.longDescription = longDescription;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(@Nullable String packageType) {
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder publishers(@Nullable List<GetListingPublisher> publishers) {
            this.publishers = publishers;
            return this;
        }
        public Builder publishers(GetListingPublisher... publishers) {
            return publishers(List.of(publishers));
        }
        @CustomType.Setter
        public Builder regions(@Nullable List<GetListingRegion> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(GetListingRegion... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder releaseNotes(@Nullable String releaseNotes) {
            this.releaseNotes = releaseNotes;
            return this;
        }
        @CustomType.Setter
        public Builder screenshots(@Nullable List<GetListingScreenshot> screenshots) {
            this.screenshots = screenshots;
            return this;
        }
        public Builder screenshots(GetListingScreenshot... screenshots) {
            return screenshots(List.of(screenshots));
        }
        @CustomType.Setter
        public Builder shortDescription(@Nullable String shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }
        @CustomType.Setter
        public Builder supportContacts(@Nullable List<GetListingSupportContact> supportContacts) {
            this.supportContacts = supportContacts;
            return this;
        }
        public Builder supportContacts(GetListingSupportContact... supportContacts) {
            return supportContacts(List.of(supportContacts));
        }
        @CustomType.Setter
        public Builder supportLinks(@Nullable List<GetListingSupportLink> supportLinks) {
            this.supportLinks = supportLinks;
            return this;
        }
        public Builder supportLinks(GetListingSupportLink... supportLinks) {
            return supportLinks(List.of(supportLinks));
        }
        @CustomType.Setter
        public Builder supportedOperatingSystems(@Nullable List<GetListingSupportedOperatingSystem> supportedOperatingSystems) {
            this.supportedOperatingSystems = supportedOperatingSystems;
            return this;
        }
        public Builder supportedOperatingSystems(GetListingSupportedOperatingSystem... supportedOperatingSystems) {
            return supportedOperatingSystems(List.of(supportedOperatingSystems));
        }
        @CustomType.Setter
        public Builder systemRequirements(@Nullable String systemRequirements) {
            this.systemRequirements = systemRequirements;
            return this;
        }
        @CustomType.Setter
        public Builder tagline(@Nullable String tagline) {
            this.tagline = tagline;
            return this;
        }
        @CustomType.Setter
        public Builder timeReleased(@Nullable String timeReleased) {
            this.timeReleased = timeReleased;
            return this;
        }
        @CustomType.Setter
        public Builder usageInformation(@Nullable String usageInformation) {
            this.usageInformation = usageInformation;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder videos(@Nullable List<GetListingVideo> videos) {
            this.videos = videos;
            return this;
        }
        public Builder videos(GetListingVideo... videos) {
            return videos(List.of(videos));
        }
        public GetListingResult build() {
            final var o = new GetListingResult();
            o.banners = banners;
            o.categories = categories;
            o.compartmentId = compartmentId;
            o.compatibleArchitectures = compatibleArchitectures;
            o.defaultPackageVersion = defaultPackageVersion;
            o.documentationLinks = documentationLinks;
            o.icons = icons;
            o.id = id;
            o.isFeatured = isFeatured;
            o.keywords = keywords;
            o.languages = languages;
            o.licenseModelDescription = licenseModelDescription;
            o.links = links;
            o.listingId = listingId;
            o.listingType = listingType;
            o.longDescription = longDescription;
            o.name = name;
            o.packageType = packageType;
            o.publishers = publishers;
            o.regions = regions;
            o.releaseNotes = releaseNotes;
            o.screenshots = screenshots;
            o.shortDescription = shortDescription;
            o.supportContacts = supportContacts;
            o.supportLinks = supportLinks;
            o.supportedOperatingSystems = supportedOperatingSystems;
            o.systemRequirements = systemRequirements;
            o.tagline = tagline;
            o.timeReleased = timeReleased;
            o.usageInformation = usageInformation;
            o.version = version;
            o.videos = videos;
            return o;
        }
    }
}
