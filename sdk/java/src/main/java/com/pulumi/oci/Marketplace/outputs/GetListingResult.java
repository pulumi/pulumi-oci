// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Marketplace.outputs.GetListingBanner;
import com.pulumi.oci.Marketplace.outputs.GetListingDocumentationLink;
import com.pulumi.oci.Marketplace.outputs.GetListingIcon;
import com.pulumi.oci.Marketplace.outputs.GetListingLanguage;
import com.pulumi.oci.Marketplace.outputs.GetListingLink;
import com.pulumi.oci.Marketplace.outputs.GetListingPublisher;
import com.pulumi.oci.Marketplace.outputs.GetListingRegion;
import com.pulumi.oci.Marketplace.outputs.GetListingScreenshot;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportContact;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportLink;
import com.pulumi.oci.Marketplace.outputs.GetListingSupportedOperatingSystem;
import com.pulumi.oci.Marketplace.outputs.GetListingVideo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetListingResult {
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private List<GetListingBanner> banners;
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    private List<String> categories;
    private @Nullable String compartmentId;
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    private List<String> compatibleArchitectures;
    /**
     * @return The default package version.
     * 
     */
    private String defaultPackageVersion;
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    private List<GetListingDocumentationLink> documentationLinks;
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private List<GetListingIcon> icons;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    private Boolean isFeatured;
    /**
     * @return Keywords associated with the listing.
     * 
     */
    private String keywords;
    /**
     * @return Languages supported by the listing.
     * 
     */
    private List<GetListingLanguage> languages;
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    private String licenseModelDescription;
    /**
     * @return Reference links.
     * 
     */
    private List<GetListingLink> links;
    private String listingId;
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    private String listingType;
    /**
     * @return A long description of the listing.
     * 
     */
    private String longDescription;
    /**
     * @return Text that describes the resource.
     * 
     */
    private String name;
    /**
     * @return The listing&#39;s package type.
     * 
     */
    private String packageType;
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    private List<GetListingPublisher> publishers;
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    private List<GetListingRegion> regions;
    /**
     * @return Release notes for the listing.
     * 
     */
    private String releaseNotes;
    /**
     * @return Screenshots of the listing.
     * 
     */
    private List<GetListingScreenshot> screenshots;
    /**
     * @return A short description of the listing.
     * 
     */
    private String shortDescription;
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    private List<GetListingSupportContact> supportContacts;
    /**
     * @return Links to support resources for the listing.
     * 
     */
    private List<GetListingSupportLink> supportLinks;
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    private List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
    /**
     * @return System requirements for the listing.
     * 
     */
    private String systemRequirements;
    /**
     * @return The tagline of the listing.
     * 
     */
    private String tagline;
    /**
     * @return The release date of the listing.
     * 
     */
    private String timeReleased;
    /**
     * @return Usage information for the listing.
     * 
     */
    private String usageInformation;
    /**
     * @return The version of the listing.
     * 
     */
    private String version;
    /**
     * @return Videos of the listing.
     * 
     */
    private List<GetListingVideo> videos;

    private GetListingResult() {}
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingBanner> banners() {
        return this.banners;
    }
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    public List<String> compatibleArchitectures() {
        return this.compatibleArchitectures;
    }
    /**
     * @return The default package version.
     * 
     */
    public String defaultPackageVersion() {
        return this.defaultPackageVersion;
    }
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    public List<GetListingDocumentationLink> documentationLinks() {
        return this.documentationLinks;
    }
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingIcon> icons() {
        return this.icons;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    public Boolean isFeatured() {
        return this.isFeatured;
    }
    /**
     * @return Keywords associated with the listing.
     * 
     */
    public String keywords() {
        return this.keywords;
    }
    /**
     * @return Languages supported by the listing.
     * 
     */
    public List<GetListingLanguage> languages() {
        return this.languages;
    }
    /**
     * @return A description of the publisher&#39;s licensing model for the listing.
     * 
     */
    public String licenseModelDescription() {
        return this.licenseModelDescription;
    }
    /**
     * @return Reference links.
     * 
     */
    public List<GetListingLink> links() {
        return this.links;
    }
    public String listingId() {
        return this.listingId;
    }
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    public String listingType() {
        return this.listingType;
    }
    /**
     * @return A long description of the listing.
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }
    /**
     * @return Text that describes the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The listing&#39;s package type.
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    public List<GetListingPublisher> publishers() {
        return this.publishers;
    }
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    public List<GetListingRegion> regions() {
        return this.regions;
    }
    /**
     * @return Release notes for the listing.
     * 
     */
    public String releaseNotes() {
        return this.releaseNotes;
    }
    /**
     * @return Screenshots of the listing.
     * 
     */
    public List<GetListingScreenshot> screenshots() {
        return this.screenshots;
    }
    /**
     * @return A short description of the listing.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }
    /**
     * @return Contact information to use to get support from the publisher for the listing.
     * 
     */
    public List<GetListingSupportContact> supportContacts() {
        return this.supportContacts;
    }
    /**
     * @return Links to support resources for the listing.
     * 
     */
    public List<GetListingSupportLink> supportLinks() {
        return this.supportLinks;
    }
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    public List<GetListingSupportedOperatingSystem> supportedOperatingSystems() {
        return this.supportedOperatingSystems;
    }
    /**
     * @return System requirements for the listing.
     * 
     */
    public String systemRequirements() {
        return this.systemRequirements;
    }
    /**
     * @return The tagline of the listing.
     * 
     */
    public String tagline() {
        return this.tagline;
    }
    /**
     * @return The release date of the listing.
     * 
     */
    public String timeReleased() {
        return this.timeReleased;
    }
    /**
     * @return Usage information for the listing.
     * 
     */
    public String usageInformation() {
        return this.usageInformation;
    }
    /**
     * @return The version of the listing.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Videos of the listing.
     * 
     */
    public List<GetListingVideo> videos() {
        return this.videos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetListingBanner> banners;
        private List<String> categories;
        private @Nullable String compartmentId;
        private List<String> compatibleArchitectures;
        private String defaultPackageVersion;
        private List<GetListingDocumentationLink> documentationLinks;
        private List<GetListingIcon> icons;
        private String id;
        private Boolean isFeatured;
        private String keywords;
        private List<GetListingLanguage> languages;
        private String licenseModelDescription;
        private List<GetListingLink> links;
        private String listingId;
        private String listingType;
        private String longDescription;
        private String name;
        private String packageType;
        private List<GetListingPublisher> publishers;
        private List<GetListingRegion> regions;
        private String releaseNotes;
        private List<GetListingScreenshot> screenshots;
        private String shortDescription;
        private List<GetListingSupportContact> supportContacts;
        private List<GetListingSupportLink> supportLinks;
        private List<GetListingSupportedOperatingSystem> supportedOperatingSystems;
        private String systemRequirements;
        private String tagline;
        private String timeReleased;
        private String usageInformation;
        private String version;
        private List<GetListingVideo> videos;
        public Builder() {}
        public Builder(GetListingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banners = defaults.banners;
    	      this.categories = defaults.categories;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compatibleArchitectures = defaults.compatibleArchitectures;
    	      this.defaultPackageVersion = defaults.defaultPackageVersion;
    	      this.documentationLinks = defaults.documentationLinks;
    	      this.icons = defaults.icons;
    	      this.id = defaults.id;
    	      this.isFeatured = defaults.isFeatured;
    	      this.keywords = defaults.keywords;
    	      this.languages = defaults.languages;
    	      this.licenseModelDescription = defaults.licenseModelDescription;
    	      this.links = defaults.links;
    	      this.listingId = defaults.listingId;
    	      this.listingType = defaults.listingType;
    	      this.longDescription = defaults.longDescription;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.publishers = defaults.publishers;
    	      this.regions = defaults.regions;
    	      this.releaseNotes = defaults.releaseNotes;
    	      this.screenshots = defaults.screenshots;
    	      this.shortDescription = defaults.shortDescription;
    	      this.supportContacts = defaults.supportContacts;
    	      this.supportLinks = defaults.supportLinks;
    	      this.supportedOperatingSystems = defaults.supportedOperatingSystems;
    	      this.systemRequirements = defaults.systemRequirements;
    	      this.tagline = defaults.tagline;
    	      this.timeReleased = defaults.timeReleased;
    	      this.usageInformation = defaults.usageInformation;
    	      this.version = defaults.version;
    	      this.videos = defaults.videos;
        }

        @CustomType.Setter
        public Builder banners(List<GetListingBanner> banners) {
            if (banners == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "banners");
            }
            this.banners = banners;
            return this;
        }
        public Builder banners(GetListingBanner... banners) {
            return banners(List.of(banners));
        }
        @CustomType.Setter
        public Builder categories(List<String> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compatibleArchitectures(List<String> compatibleArchitectures) {
            if (compatibleArchitectures == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "compatibleArchitectures");
            }
            this.compatibleArchitectures = compatibleArchitectures;
            return this;
        }
        public Builder compatibleArchitectures(String... compatibleArchitectures) {
            return compatibleArchitectures(List.of(compatibleArchitectures));
        }
        @CustomType.Setter
        public Builder defaultPackageVersion(String defaultPackageVersion) {
            if (defaultPackageVersion == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "defaultPackageVersion");
            }
            this.defaultPackageVersion = defaultPackageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder documentationLinks(List<GetListingDocumentationLink> documentationLinks) {
            if (documentationLinks == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "documentationLinks");
            }
            this.documentationLinks = documentationLinks;
            return this;
        }
        public Builder documentationLinks(GetListingDocumentationLink... documentationLinks) {
            return documentationLinks(List.of(documentationLinks));
        }
        @CustomType.Setter
        public Builder icons(List<GetListingIcon> icons) {
            if (icons == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "icons");
            }
            this.icons = icons;
            return this;
        }
        public Builder icons(GetListingIcon... icons) {
            return icons(List.of(icons));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFeatured(Boolean isFeatured) {
            if (isFeatured == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "isFeatured");
            }
            this.isFeatured = isFeatured;
            return this;
        }
        @CustomType.Setter
        public Builder keywords(String keywords) {
            if (keywords == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "keywords");
            }
            this.keywords = keywords;
            return this;
        }
        @CustomType.Setter
        public Builder languages(List<GetListingLanguage> languages) {
            if (languages == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "languages");
            }
            this.languages = languages;
            return this;
        }
        public Builder languages(GetListingLanguage... languages) {
            return languages(List.of(languages));
        }
        @CustomType.Setter
        public Builder licenseModelDescription(String licenseModelDescription) {
            if (licenseModelDescription == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "licenseModelDescription");
            }
            this.licenseModelDescription = licenseModelDescription;
            return this;
        }
        @CustomType.Setter
        public Builder links(List<GetListingLink> links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "links");
            }
            this.links = links;
            return this;
        }
        public Builder links(GetListingLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            if (listingId == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "listingId");
            }
            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder listingType(String listingType) {
            if (listingType == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "listingType");
            }
            this.listingType = listingType;
            return this;
        }
        @CustomType.Setter
        public Builder longDescription(String longDescription) {
            if (longDescription == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "longDescription");
            }
            this.longDescription = longDescription;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(String packageType) {
            if (packageType == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "packageType");
            }
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder publishers(List<GetListingPublisher> publishers) {
            if (publishers == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "publishers");
            }
            this.publishers = publishers;
            return this;
        }
        public Builder publishers(GetListingPublisher... publishers) {
            return publishers(List.of(publishers));
        }
        @CustomType.Setter
        public Builder regions(List<GetListingRegion> regions) {
            if (regions == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "regions");
            }
            this.regions = regions;
            return this;
        }
        public Builder regions(GetListingRegion... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder releaseNotes(String releaseNotes) {
            if (releaseNotes == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "releaseNotes");
            }
            this.releaseNotes = releaseNotes;
            return this;
        }
        @CustomType.Setter
        public Builder screenshots(List<GetListingScreenshot> screenshots) {
            if (screenshots == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "screenshots");
            }
            this.screenshots = screenshots;
            return this;
        }
        public Builder screenshots(GetListingScreenshot... screenshots) {
            return screenshots(List.of(screenshots));
        }
        @CustomType.Setter
        public Builder shortDescription(String shortDescription) {
            if (shortDescription == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "shortDescription");
            }
            this.shortDescription = shortDescription;
            return this;
        }
        @CustomType.Setter
        public Builder supportContacts(List<GetListingSupportContact> supportContacts) {
            if (supportContacts == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "supportContacts");
            }
            this.supportContacts = supportContacts;
            return this;
        }
        public Builder supportContacts(GetListingSupportContact... supportContacts) {
            return supportContacts(List.of(supportContacts));
        }
        @CustomType.Setter
        public Builder supportLinks(List<GetListingSupportLink> supportLinks) {
            if (supportLinks == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "supportLinks");
            }
            this.supportLinks = supportLinks;
            return this;
        }
        public Builder supportLinks(GetListingSupportLink... supportLinks) {
            return supportLinks(List.of(supportLinks));
        }
        @CustomType.Setter
        public Builder supportedOperatingSystems(List<GetListingSupportedOperatingSystem> supportedOperatingSystems) {
            if (supportedOperatingSystems == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "supportedOperatingSystems");
            }
            this.supportedOperatingSystems = supportedOperatingSystems;
            return this;
        }
        public Builder supportedOperatingSystems(GetListingSupportedOperatingSystem... supportedOperatingSystems) {
            return supportedOperatingSystems(List.of(supportedOperatingSystems));
        }
        @CustomType.Setter
        public Builder systemRequirements(String systemRequirements) {
            if (systemRequirements == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "systemRequirements");
            }
            this.systemRequirements = systemRequirements;
            return this;
        }
        @CustomType.Setter
        public Builder tagline(String tagline) {
            if (tagline == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "tagline");
            }
            this.tagline = tagline;
            return this;
        }
        @CustomType.Setter
        public Builder timeReleased(String timeReleased) {
            if (timeReleased == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "timeReleased");
            }
            this.timeReleased = timeReleased;
            return this;
        }
        @CustomType.Setter
        public Builder usageInformation(String usageInformation) {
            if (usageInformation == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "usageInformation");
            }
            this.usageInformation = usageInformation;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder videos(List<GetListingVideo> videos) {
            if (videos == null) {
              throw new MissingRequiredPropertyException("GetListingResult", "videos");
            }
            this.videos = videos;
            return this;
        }
        public Builder videos(GetListingVideo... videos) {
            return videos(List.of(videos));
        }
        public GetListingResult build() {
            final var _resultValue = new GetListingResult();
            _resultValue.banners = banners;
            _resultValue.categories = categories;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compatibleArchitectures = compatibleArchitectures;
            _resultValue.defaultPackageVersion = defaultPackageVersion;
            _resultValue.documentationLinks = documentationLinks;
            _resultValue.icons = icons;
            _resultValue.id = id;
            _resultValue.isFeatured = isFeatured;
            _resultValue.keywords = keywords;
            _resultValue.languages = languages;
            _resultValue.licenseModelDescription = licenseModelDescription;
            _resultValue.links = links;
            _resultValue.listingId = listingId;
            _resultValue.listingType = listingType;
            _resultValue.longDescription = longDescription;
            _resultValue.name = name;
            _resultValue.packageType = packageType;
            _resultValue.publishers = publishers;
            _resultValue.regions = regions;
            _resultValue.releaseNotes = releaseNotes;
            _resultValue.screenshots = screenshots;
            _resultValue.shortDescription = shortDescription;
            _resultValue.supportContacts = supportContacts;
            _resultValue.supportLinks = supportLinks;
            _resultValue.supportedOperatingSystems = supportedOperatingSystems;
            _resultValue.systemRequirements = systemRequirements;
            _resultValue.tagline = tagline;
            _resultValue.timeReleased = timeReleased;
            _resultValue.usageInformation = usageInformation;
            _resultValue.version = version;
            _resultValue.videos = videos;
            return _resultValue;
        }
    }
}
