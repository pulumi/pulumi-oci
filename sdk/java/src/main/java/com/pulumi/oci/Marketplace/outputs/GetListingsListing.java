// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingBanner;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingDocumentationLink;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingIcon;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingPublisher;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingRegion;
import com.pulumi.oci.Marketplace.outputs.GetListingsListingSupportedOperatingSystem;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetListingsListing {
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private @Nullable List<GetListingsListingBanner> banners;
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    private @Nullable List<String> categories;
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    private @Nullable List<String> compatibleArchitectures;
    /**
     * @return The default package version.
     * 
     */
    private @Nullable String defaultPackageVersion;
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    private @Nullable List<GetListingsListingDocumentationLink> documentationLinks;
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    private @Nullable List<GetListingsListingIcon> icons;
    /**
     * @return The unique identifier for the publisher.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
     * 
     */
    private @Nullable Boolean isFeatured;
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    private @Nullable String listingType;
    /**
     * @return The name of the listing.
     * 
     */
    private @Nullable String name;
    /**
     * @return A filter to return only packages that match the given package type exactly.
     * 
     */
    private @Nullable String packageType;
    private @Nullable List<String> pricingTypes;
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    private @Nullable List<GetListingsListingPublisher> publishers;
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    private @Nullable List<GetListingsListingRegion> regions;
    /**
     * @return A short description of the listing.
     * 
     */
    private @Nullable String shortDescription;
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    private @Nullable List<GetListingsListingSupportedOperatingSystem> supportedOperatingSystems;

    private GetListingsListing() {}
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingsListingBanner> banners() {
        return this.banners == null ? List.of() : this.banners;
    }
    /**
     * @return Product categories that the listing belongs to.
     * 
     */
    public List<String> categories() {
        return this.categories == null ? List.of() : this.categories;
    }
    /**
     * @return The list of compatible architectures supported by the listing
     * 
     */
    public List<String> compatibleArchitectures() {
        return this.compatibleArchitectures == null ? List.of() : this.compatibleArchitectures;
    }
    /**
     * @return The default package version.
     * 
     */
    public Optional<String> defaultPackageVersion() {
        return Optional.ofNullable(this.defaultPackageVersion);
    }
    /**
     * @return Links to additional documentation provided by the publisher specifically for the listing.
     * 
     */
    public List<GetListingsListingDocumentationLink> documentationLinks() {
        return this.documentationLinks == null ? List.of() : this.documentationLinks;
    }
    /**
     * @return The model for upload data for images and icons.
     * 
     */
    public List<GetListingsListingIcon> icons() {
        return this.icons == null ? List.of() : this.icons;
    }
    /**
     * @return The unique identifier for the publisher.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
     * 
     */
    public Optional<Boolean> isFeatured() {
        return Optional.ofNullable(this.isFeatured);
    }
    /**
     * @return The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
     * 
     */
    public Optional<String> listingType() {
        return Optional.ofNullable(this.listingType);
    }
    /**
     * @return The name of the listing.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A filter to return only packages that match the given package type exactly.
     * 
     */
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }
    public List<String> pricingTypes() {
        return this.pricingTypes == null ? List.of() : this.pricingTypes;
    }
    /**
     * @return Summary details about the publisher of the listing.
     * 
     */
    public List<GetListingsListingPublisher> publishers() {
        return this.publishers == null ? List.of() : this.publishers;
    }
    /**
     * @return The regions where the listing is eligible to be deployed.
     * 
     */
    public List<GetListingsListingRegion> regions() {
        return this.regions == null ? List.of() : this.regions;
    }
    /**
     * @return A short description of the listing.
     * 
     */
    public Optional<String> shortDescription() {
        return Optional.ofNullable(this.shortDescription);
    }
    /**
     * @return The list of operating systems supported by the listing.
     * 
     */
    public List<GetListingsListingSupportedOperatingSystem> supportedOperatingSystems() {
        return this.supportedOperatingSystems == null ? List.of() : this.supportedOperatingSystems;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingsListing defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetListingsListingBanner> banners;
        private @Nullable List<String> categories;
        private @Nullable List<String> compatibleArchitectures;
        private @Nullable String defaultPackageVersion;
        private @Nullable List<GetListingsListingDocumentationLink> documentationLinks;
        private @Nullable List<GetListingsListingIcon> icons;
        private @Nullable String id;
        private @Nullable Boolean isFeatured;
        private @Nullable String listingType;
        private @Nullable String name;
        private @Nullable String packageType;
        private @Nullable List<String> pricingTypes;
        private @Nullable List<GetListingsListingPublisher> publishers;
        private @Nullable List<GetListingsListingRegion> regions;
        private @Nullable String shortDescription;
        private @Nullable List<GetListingsListingSupportedOperatingSystem> supportedOperatingSystems;
        public Builder() {}
        public Builder(GetListingsListing defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banners = defaults.banners;
    	      this.categories = defaults.categories;
    	      this.compatibleArchitectures = defaults.compatibleArchitectures;
    	      this.defaultPackageVersion = defaults.defaultPackageVersion;
    	      this.documentationLinks = defaults.documentationLinks;
    	      this.icons = defaults.icons;
    	      this.id = defaults.id;
    	      this.isFeatured = defaults.isFeatured;
    	      this.listingType = defaults.listingType;
    	      this.name = defaults.name;
    	      this.packageType = defaults.packageType;
    	      this.pricingTypes = defaults.pricingTypes;
    	      this.publishers = defaults.publishers;
    	      this.regions = defaults.regions;
    	      this.shortDescription = defaults.shortDescription;
    	      this.supportedOperatingSystems = defaults.supportedOperatingSystems;
        }

        @CustomType.Setter
        public Builder banners(@Nullable List<GetListingsListingBanner> banners) {
            this.banners = banners;
            return this;
        }
        public Builder banners(GetListingsListingBanner... banners) {
            return banners(List.of(banners));
        }
        @CustomType.Setter
        public Builder categories(@Nullable List<String> categories) {
            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder compatibleArchitectures(@Nullable List<String> compatibleArchitectures) {
            this.compatibleArchitectures = compatibleArchitectures;
            return this;
        }
        public Builder compatibleArchitectures(String... compatibleArchitectures) {
            return compatibleArchitectures(List.of(compatibleArchitectures));
        }
        @CustomType.Setter
        public Builder defaultPackageVersion(@Nullable String defaultPackageVersion) {
            this.defaultPackageVersion = defaultPackageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder documentationLinks(@Nullable List<GetListingsListingDocumentationLink> documentationLinks) {
            this.documentationLinks = documentationLinks;
            return this;
        }
        public Builder documentationLinks(GetListingsListingDocumentationLink... documentationLinks) {
            return documentationLinks(List.of(documentationLinks));
        }
        @CustomType.Setter
        public Builder icons(@Nullable List<GetListingsListingIcon> icons) {
            this.icons = icons;
            return this;
        }
        public Builder icons(GetListingsListingIcon... icons) {
            return icons(List.of(icons));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFeatured(@Nullable Boolean isFeatured) {
            this.isFeatured = isFeatured;
            return this;
        }
        @CustomType.Setter
        public Builder listingType(@Nullable String listingType) {
            this.listingType = listingType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder packageType(@Nullable String packageType) {
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder pricingTypes(@Nullable List<String> pricingTypes) {
            this.pricingTypes = pricingTypes;
            return this;
        }
        public Builder pricingTypes(String... pricingTypes) {
            return pricingTypes(List.of(pricingTypes));
        }
        @CustomType.Setter
        public Builder publishers(@Nullable List<GetListingsListingPublisher> publishers) {
            this.publishers = publishers;
            return this;
        }
        public Builder publishers(GetListingsListingPublisher... publishers) {
            return publishers(List.of(publishers));
        }
        @CustomType.Setter
        public Builder regions(@Nullable List<GetListingsListingRegion> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(GetListingsListingRegion... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder shortDescription(@Nullable String shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }
        @CustomType.Setter
        public Builder supportedOperatingSystems(@Nullable List<GetListingsListingSupportedOperatingSystem> supportedOperatingSystems) {
            this.supportedOperatingSystems = supportedOperatingSystems;
            return this;
        }
        public Builder supportedOperatingSystems(GetListingsListingSupportedOperatingSystem... supportedOperatingSystems) {
            return supportedOperatingSystems(List.of(supportedOperatingSystems));
        }
        public GetListingsListing build() {
            final var o = new GetListingsListing();
            o.banners = banners;
            o.categories = categories;
            o.compatibleArchitectures = compatibleArchitectures;
            o.defaultPackageVersion = defaultPackageVersion;
            o.documentationLinks = documentationLinks;
            o.icons = icons;
            o.id = id;
            o.isFeatured = isFeatured;
            o.listingType = listingType;
            o.name = name;
            o.packageType = packageType;
            o.pricingTypes = pricingTypes;
            o.publishers = publishers;
            o.regions = regions;
            o.shortDescription = shortDescription;
            o.supportedOperatingSystems = supportedOperatingSystems;
            return o;
        }
    }
}
