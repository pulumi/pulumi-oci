// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Marketplace.outputs.GetListingsFilter;
import com.pulumi.oci.Marketplace.outputs.GetListingsListing;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetListingsResult {
    private @Nullable List<String> categories;
    private @Nullable String compartmentId;
    private @Nullable List<GetListingsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String imageId;
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    private @Nullable Boolean isFeatured;
    private @Nullable String listingId;
    private @Nullable List<String> listingTypes;
    /**
     * @return The list of listings.
     * 
     */
    private List<GetListingsListing> listings;
    /**
     * @return Text that describes the resource.
     * 
     */
    private @Nullable List<String> names;
    private @Nullable List<String> operatingSystems;
    /**
     * @return The listing&#39;s package type.
     * 
     */
    private @Nullable String packageType;
    private @Nullable List<String> pricings;
    private @Nullable String publisherId;

    private GetListingsResult() {}
    public List<String> categories() {
        return this.categories == null ? List.of() : this.categories;
    }
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetListingsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return Indicates whether the listing is included in Featured Listings.
     * 
     */
    public Optional<Boolean> isFeatured() {
        return Optional.ofNullable(this.isFeatured);
    }
    public Optional<String> listingId() {
        return Optional.ofNullable(this.listingId);
    }
    public List<String> listingTypes() {
        return this.listingTypes == null ? List.of() : this.listingTypes;
    }
    /**
     * @return The list of listings.
     * 
     */
    public List<GetListingsListing> listings() {
        return this.listings;
    }
    /**
     * @return Text that describes the resource.
     * 
     */
    public List<String> names() {
        return this.names == null ? List.of() : this.names;
    }
    public List<String> operatingSystems() {
        return this.operatingSystems == null ? List.of() : this.operatingSystems;
    }
    /**
     * @return The listing&#39;s package type.
     * 
     */
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }
    public List<String> pricings() {
        return this.pricings == null ? List.of() : this.pricings;
    }
    public Optional<String> publisherId() {
        return Optional.ofNullable(this.publisherId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> categories;
        private @Nullable String compartmentId;
        private @Nullable List<GetListingsFilter> filters;
        private String id;
        private @Nullable String imageId;
        private @Nullable Boolean isFeatured;
        private @Nullable String listingId;
        private @Nullable List<String> listingTypes;
        private List<GetListingsListing> listings;
        private @Nullable List<String> names;
        private @Nullable List<String> operatingSystems;
        private @Nullable String packageType;
        private @Nullable List<String> pricings;
        private @Nullable String publisherId;
        public Builder() {}
        public Builder(GetListingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.isFeatured = defaults.isFeatured;
    	      this.listingId = defaults.listingId;
    	      this.listingTypes = defaults.listingTypes;
    	      this.listings = defaults.listings;
    	      this.names = defaults.names;
    	      this.operatingSystems = defaults.operatingSystems;
    	      this.packageType = defaults.packageType;
    	      this.pricings = defaults.pricings;
    	      this.publisherId = defaults.publisherId;
        }

        @CustomType.Setter
        public Builder categories(@Nullable List<String> categories) {

            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetListingsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetListingsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListingsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {

            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder isFeatured(@Nullable Boolean isFeatured) {

            this.isFeatured = isFeatured;
            return this;
        }
        @CustomType.Setter
        public Builder listingId(@Nullable String listingId) {

            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder listingTypes(@Nullable List<String> listingTypes) {

            this.listingTypes = listingTypes;
            return this;
        }
        public Builder listingTypes(String... listingTypes) {
            return listingTypes(List.of(listingTypes));
        }
        @CustomType.Setter
        public Builder listings(List<GetListingsListing> listings) {
            if (listings == null) {
              throw new MissingRequiredPropertyException("GetListingsResult", "listings");
            }
            this.listings = listings;
            return this;
        }
        public Builder listings(GetListingsListing... listings) {
            return listings(List.of(listings));
        }
        @CustomType.Setter
        public Builder names(@Nullable List<String> names) {

            this.names = names;
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        @CustomType.Setter
        public Builder operatingSystems(@Nullable List<String> operatingSystems) {

            this.operatingSystems = operatingSystems;
            return this;
        }
        public Builder operatingSystems(String... operatingSystems) {
            return operatingSystems(List.of(operatingSystems));
        }
        @CustomType.Setter
        public Builder packageType(@Nullable String packageType) {

            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder pricings(@Nullable List<String> pricings) {

            this.pricings = pricings;
            return this;
        }
        public Builder pricings(String... pricings) {
            return pricings(List.of(pricings));
        }
        @CustomType.Setter
        public Builder publisherId(@Nullable String publisherId) {

            this.publisherId = publisherId;
            return this;
        }
        public GetListingsResult build() {
            final var _resultValue = new GetListingsResult();
            _resultValue.categories = categories;
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.isFeatured = isFeatured;
            _resultValue.listingId = listingId;
            _resultValue.listingTypes = listingTypes;
            _resultValue.listings = listings;
            _resultValue.names = names;
            _resultValue.operatingSystems = operatingSystems;
            _resultValue.packageType = packageType;
            _resultValue.pricings = pricings;
            _resultValue.publisherId = publisherId;
            return _resultValue;
        }
    }
}
