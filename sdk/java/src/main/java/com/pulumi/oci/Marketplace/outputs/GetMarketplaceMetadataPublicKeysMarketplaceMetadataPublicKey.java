// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey {
    /**
     * @return chain of certificates used to sign JWT
     * 
     */
    private List<String> certificateChains;
    /**
     * @return unique identifier of associated X509 certificate
     * 
     */
    private String certificateThumbprint;
    /**
     * @return base64 encoded exponent for public key
     * 
     */
    private String exponent;
    /**
     * @return algorithm for public key (i.e. RS256)
     * 
     */
    private String keyAlgorithm;
    /**
     * @return unique id that maps to public certificate, directs user which certificate to use to verfiy
     * 
     */
    private String keyId;
    /**
     * @return key type (i.e. RSA)
     * 
     */
    private String keyType;
    /**
     * @return how key is to be used
     * 
     */
    private String keyUse;
    /**
     * @return RSA public modulus
     * 
     */
    private String modulus;

    private GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey() {}
    /**
     * @return chain of certificates used to sign JWT
     * 
     */
    public List<String> certificateChains() {
        return this.certificateChains;
    }
    /**
     * @return unique identifier of associated X509 certificate
     * 
     */
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }
    /**
     * @return base64 encoded exponent for public key
     * 
     */
    public String exponent() {
        return this.exponent;
    }
    /**
     * @return algorithm for public key (i.e. RS256)
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return unique id that maps to public certificate, directs user which certificate to use to verfiy
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return key type (i.e. RSA)
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return how key is to be used
     * 
     */
    public String keyUse() {
        return this.keyUse;
    }
    /**
     * @return RSA public modulus
     * 
     */
    public String modulus() {
        return this.modulus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> certificateChains;
        private String certificateThumbprint;
        private String exponent;
        private String keyAlgorithm;
        private String keyId;
        private String keyType;
        private String keyUse;
        private String modulus;
        public Builder() {}
        public Builder(GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateChains = defaults.certificateChains;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.exponent = defaults.exponent;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keyId = defaults.keyId;
    	      this.keyType = defaults.keyType;
    	      this.keyUse = defaults.keyUse;
    	      this.modulus = defaults.modulus;
        }

        @CustomType.Setter
        public Builder certificateChains(List<String> certificateChains) {
            if (certificateChains == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "certificateChains");
            }
            this.certificateChains = certificateChains;
            return this;
        }
        public Builder certificateChains(String... certificateChains) {
            return certificateChains(List.of(certificateChains));
        }
        @CustomType.Setter
        public Builder certificateThumbprint(String certificateThumbprint) {
            if (certificateThumbprint == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "certificateThumbprint");
            }
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder exponent(String exponent) {
            if (exponent == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "exponent");
            }
            this.exponent = exponent;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(String keyAlgorithm) {
            if (keyAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "keyAlgorithm");
            }
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder keyUse(String keyUse) {
            if (keyUse == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "keyUse");
            }
            this.keyUse = keyUse;
            return this;
        }
        @CustomType.Setter
        public Builder modulus(String modulus) {
            if (modulus == null) {
              throw new MissingRequiredPropertyException("GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey", "modulus");
            }
            this.modulus = modulus;
            return this;
        }
        public GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey build() {
            final var _resultValue = new GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKey();
            _resultValue.certificateChains = certificateChains;
            _resultValue.certificateThumbprint = certificateThumbprint;
            _resultValue.exponent = exponent;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.keyId = keyId;
            _resultValue.keyType = keyType;
            _resultValue.keyUse = keyUse;
            _resultValue.modulus = modulus;
            return _resultValue;
        }
    }
}
