// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetMediaAssetDistributionChannelAttachmentLockArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetMediaAssetDistributionChannelAttachmentLockArgs Empty = new GetMediaAssetDistributionChannelAttachmentLockArgs();

    /**
     * The compartment ID of the lock.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The compartment ID of the lock.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
     * 
     */
    @Import(name="message", required=true)
    private Output<String> message;

    /**
     * @return A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
     * 
     */
    public Output<String> message() {
        return this.message;
    }

    /**
     * The ID of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
     * 
     */
    @Import(name="relatedResourceId", required=true)
    private Output<String> relatedResourceId;

    /**
     * @return The ID of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
     * 
     */
    public Output<String> relatedResourceId() {
        return this.relatedResourceId;
    }

    /**
     * When the lock was created.
     * 
     */
    @Import(name="timeCreated", required=true)
    private Output<String> timeCreated;

    /**
     * @return When the lock was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }

    /**
     * Type of the lock.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the lock.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GetMediaAssetDistributionChannelAttachmentLockArgs() {}

    private GetMediaAssetDistributionChannelAttachmentLockArgs(GetMediaAssetDistributionChannelAttachmentLockArgs $) {
        this.compartmentId = $.compartmentId;
        this.message = $.message;
        this.relatedResourceId = $.relatedResourceId;
        this.timeCreated = $.timeCreated;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMediaAssetDistributionChannelAttachmentLockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMediaAssetDistributionChannelAttachmentLockArgs $;

        public Builder() {
            $ = new GetMediaAssetDistributionChannelAttachmentLockArgs();
        }

        public Builder(GetMediaAssetDistributionChannelAttachmentLockArgs defaults) {
            $ = new GetMediaAssetDistributionChannelAttachmentLockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment ID of the lock.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment ID of the lock.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param message A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder message(Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A message added by the creator of the lock. This is typically used to give an indication of why the resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param relatedResourceId The ID of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
         * 
         * @return builder
         * 
         */
        public Builder relatedResourceId(Output<String> relatedResourceId) {
            $.relatedResourceId = relatedResourceId;
            return this;
        }

        /**
         * @param relatedResourceId The ID of the resource that is locking this resource. Indicates that deleting this resource will remove the lock.
         * 
         * @return builder
         * 
         */
        public Builder relatedResourceId(String relatedResourceId) {
            return relatedResourceId(Output.of(relatedResourceId));
        }

        /**
         * @param timeCreated When the lock was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated When the lock was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param type Type of the lock.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the lock.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetMediaAssetDistributionChannelAttachmentLockArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentLockArgs", "compartmentId");
            }
            if ($.message == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentLockArgs", "message");
            }
            if ($.relatedResourceId == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentLockArgs", "relatedResourceId");
            }
            if ($.timeCreated == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentLockArgs", "timeCreated");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentLockArgs", "type");
            }
            return $;
        }
    }

}
