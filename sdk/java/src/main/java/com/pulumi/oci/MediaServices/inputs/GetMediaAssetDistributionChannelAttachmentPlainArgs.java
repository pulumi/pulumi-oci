// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.inputs.GetMediaAssetDistributionChannelAttachmentLock;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMediaAssetDistributionChannelAttachmentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMediaAssetDistributionChannelAttachmentPlainArgs Empty = new GetMediaAssetDistributionChannelAttachmentPlainArgs();

    /**
     * Unique DistributionChannel identifier.
     * 
     */
    @Import(name="distributionChannelId", required=true)
    private String distributionChannelId;

    /**
     * @return Unique DistributionChannel identifier.
     * 
     */
    public String distributionChannelId() {
        return this.distributionChannelId;
    }

    @Import(name="isLockOverride")
    private @Nullable Boolean isLockOverride;

    public Optional<Boolean> isLockOverride() {
        return Optional.ofNullable(this.isLockOverride);
    }

    /**
     * Locks associated with this resource.
     * 
     */
    @Import(name="locks")
    private @Nullable List<GetMediaAssetDistributionChannelAttachmentLock> locks;

    /**
     * @return Locks associated with this resource.
     * 
     */
    public Optional<List<GetMediaAssetDistributionChannelAttachmentLock>> locks() {
        return Optional.ofNullable(this.locks);
    }

    /**
     * Unique MediaAsset identifier
     * 
     */
    @Import(name="mediaAssetId", required=true)
    private String mediaAssetId;

    /**
     * @return Unique MediaAsset identifier
     * 
     */
    public String mediaAssetId() {
        return this.mediaAssetId;
    }

    private GetMediaAssetDistributionChannelAttachmentPlainArgs() {}

    private GetMediaAssetDistributionChannelAttachmentPlainArgs(GetMediaAssetDistributionChannelAttachmentPlainArgs $) {
        this.distributionChannelId = $.distributionChannelId;
        this.isLockOverride = $.isLockOverride;
        this.locks = $.locks;
        this.mediaAssetId = $.mediaAssetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMediaAssetDistributionChannelAttachmentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMediaAssetDistributionChannelAttachmentPlainArgs $;

        public Builder() {
            $ = new GetMediaAssetDistributionChannelAttachmentPlainArgs();
        }

        public Builder(GetMediaAssetDistributionChannelAttachmentPlainArgs defaults) {
            $ = new GetMediaAssetDistributionChannelAttachmentPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param distributionChannelId Unique DistributionChannel identifier.
         * 
         * @return builder
         * 
         */
        public Builder distributionChannelId(String distributionChannelId) {
            $.distributionChannelId = distributionChannelId;
            return this;
        }

        public Builder isLockOverride(@Nullable Boolean isLockOverride) {
            $.isLockOverride = isLockOverride;
            return this;
        }

        /**
         * @param locks Locks associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder locks(@Nullable List<GetMediaAssetDistributionChannelAttachmentLock> locks) {
            $.locks = locks;
            return this;
        }

        /**
         * @param locks Locks associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder locks(GetMediaAssetDistributionChannelAttachmentLock... locks) {
            return locks(List.of(locks));
        }

        /**
         * @param mediaAssetId Unique MediaAsset identifier
         * 
         * @return builder
         * 
         */
        public Builder mediaAssetId(String mediaAssetId) {
            $.mediaAssetId = mediaAssetId;
            return this;
        }

        public GetMediaAssetDistributionChannelAttachmentPlainArgs build() {
            if ($.distributionChannelId == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentPlainArgs", "distributionChannelId");
            }
            if ($.mediaAssetId == null) {
                throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentPlainArgs", "mediaAssetId");
            }
            return $;
        }
    }

}
