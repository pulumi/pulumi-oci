// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MediaServices.inputs.GetMediaAssetsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMediaAssetsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMediaAssetsPlainArgs Empty = new GetMediaAssetsPlainArgs();

    /**
     * Filter MediaAsset by the bucket where the object is stored.
     * 
     */
    @Import(name="bucket")
    private @Nullable String bucket;

    /**
     * @return Filter MediaAsset by the bucket where the object is stored.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only the resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Unique DistributionChannel identifier.
     * 
     */
    @Import(name="distributionChannelId")
    private @Nullable String distributionChannelId;

    /**
     * @return Unique DistributionChannel identifier.
     * 
     */
    public Optional<String> distributionChannelId() {
        return Optional.ofNullable(this.distributionChannelId);
    }

    @Import(name="filters")
    private @Nullable List<GetMediaAssetsFilter> filters;

    public Optional<List<GetMediaAssetsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique MediaAsset identifier of the first asset upload.
     * 
     */
    @Import(name="masterMediaAssetId")
    private @Nullable String masterMediaAssetId;

    /**
     * @return Unique MediaAsset identifier of the first asset upload.
     * 
     */
    public Optional<String> masterMediaAssetId() {
        return Optional.ofNullable(this.masterMediaAssetId);
    }

    /**
     * The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
     * 
     */
    @Import(name="mediaWorkflowJobId")
    private @Nullable String mediaWorkflowJobId;

    /**
     * @return The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
     * 
     */
    public Optional<String> mediaWorkflowJobId() {
        return Optional.ofNullable(this.mediaWorkflowJobId);
    }

    /**
     * Filter MediaAsset by the name of the object in object storage.
     * 
     */
    @Import(name="object")
    private @Nullable String object;

    /**
     * @return Filter MediaAsset by the name of the object in object storage.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }

    /**
     * Unique MediaAsset identifier of the asset from which this asset is derived.
     * 
     */
    @Import(name="parentMediaAssetId")
    private @Nullable String parentMediaAssetId;

    /**
     * @return Unique MediaAsset identifier of the asset from which this asset is derived.
     * 
     */
    public Optional<String> parentMediaAssetId() {
        return Optional.ofNullable(this.parentMediaAssetId);
    }

    /**
     * The ID of the MediaWorkflow used to produce this asset.
     * 
     */
    @Import(name="sourceMediaWorkflowId")
    private @Nullable String sourceMediaWorkflowId;

    /**
     * @return The ID of the MediaWorkflow used to produce this asset.
     * 
     */
    public Optional<String> sourceMediaWorkflowId() {
        return Optional.ofNullable(this.sourceMediaWorkflowId);
    }

    /**
     * The version of the MediaWorkflow used to produce this asset.
     * 
     */
    @Import(name="sourceMediaWorkflowVersion")
    private @Nullable String sourceMediaWorkflowVersion;

    /**
     * @return The version of the MediaWorkflow used to produce this asset.
     * 
     */
    public Optional<String> sourceMediaWorkflowVersion() {
        return Optional.ofNullable(this.sourceMediaWorkflowVersion);
    }

    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Filter MediaAsset by the asset type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return Filter MediaAsset by the asset type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetMediaAssetsPlainArgs() {}

    private GetMediaAssetsPlainArgs(GetMediaAssetsPlainArgs $) {
        this.bucket = $.bucket;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.distributionChannelId = $.distributionChannelId;
        this.filters = $.filters;
        this.masterMediaAssetId = $.masterMediaAssetId;
        this.mediaWorkflowJobId = $.mediaWorkflowJobId;
        this.object = $.object;
        this.parentMediaAssetId = $.parentMediaAssetId;
        this.sourceMediaWorkflowId = $.sourceMediaWorkflowId;
        this.sourceMediaWorkflowVersion = $.sourceMediaWorkflowVersion;
        this.state = $.state;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMediaAssetsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMediaAssetsPlainArgs $;

        public Builder() {
            $ = new GetMediaAssetsPlainArgs();
        }

        public Builder(GetMediaAssetsPlainArgs defaults) {
            $ = new GetMediaAssetsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Filter MediaAsset by the bucket where the object is stored.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable String bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param distributionChannelId Unique DistributionChannel identifier.
         * 
         * @return builder
         * 
         */
        public Builder distributionChannelId(@Nullable String distributionChannelId) {
            $.distributionChannelId = distributionChannelId;
            return this;
        }

        public Builder filters(@Nullable List<GetMediaAssetsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMediaAssetsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param masterMediaAssetId Unique MediaAsset identifier of the first asset upload.
         * 
         * @return builder
         * 
         */
        public Builder masterMediaAssetId(@Nullable String masterMediaAssetId) {
            $.masterMediaAssetId = masterMediaAssetId;
            return this;
        }

        /**
         * @param mediaWorkflowJobId The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
         * 
         * @return builder
         * 
         */
        public Builder mediaWorkflowJobId(@Nullable String mediaWorkflowJobId) {
            $.mediaWorkflowJobId = mediaWorkflowJobId;
            return this;
        }

        /**
         * @param object Filter MediaAsset by the name of the object in object storage.
         * 
         * @return builder
         * 
         */
        public Builder object(@Nullable String object) {
            $.object = object;
            return this;
        }

        /**
         * @param parentMediaAssetId Unique MediaAsset identifier of the asset from which this asset is derived.
         * 
         * @return builder
         * 
         */
        public Builder parentMediaAssetId(@Nullable String parentMediaAssetId) {
            $.parentMediaAssetId = parentMediaAssetId;
            return this;
        }

        /**
         * @param sourceMediaWorkflowId The ID of the MediaWorkflow used to produce this asset.
         * 
         * @return builder
         * 
         */
        public Builder sourceMediaWorkflowId(@Nullable String sourceMediaWorkflowId) {
            $.sourceMediaWorkflowId = sourceMediaWorkflowId;
            return this;
        }

        /**
         * @param sourceMediaWorkflowVersion The version of the MediaWorkflow used to produce this asset.
         * 
         * @return builder
         * 
         */
        public Builder sourceMediaWorkflowVersion(@Nullable String sourceMediaWorkflowVersion) {
            $.sourceMediaWorkflowVersion = sourceMediaWorkflowVersion;
            return this;
        }

        /**
         * @param state A filter to return only the resources with lifecycleState matching the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param type Filter MediaAsset by the asset type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetMediaAssetsPlainArgs build() {
            return $;
        }
    }

}
