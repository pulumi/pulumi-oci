// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MediaServices.inputs.GetMediaWorkflowJobFactsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMediaWorkflowJobFactsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMediaWorkflowJobFactsPlainArgs Empty = new GetMediaWorkflowJobFactsPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetMediaWorkflowJobFactsFilter> filters;

    public Optional<List<GetMediaWorkflowJobFactsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter by MediaWorkflowJob ID and MediaWorkflowJobFact key.
     * 
     */
    @Import(name="key")
    private @Nullable String key;

    /**
     * @return Filter by MediaWorkflowJob ID and MediaWorkflowJobFact key.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Unique MediaWorkflowJob identifier.
     * 
     */
    @Import(name="mediaWorkflowJobId", required=true)
    private String mediaWorkflowJobId;

    /**
     * @return Unique MediaWorkflowJob identifier.
     * 
     */
    public String mediaWorkflowJobId() {
        return this.mediaWorkflowJobId;
    }

    /**
     * Types of details to include.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return Types of details to include.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetMediaWorkflowJobFactsPlainArgs() {}

    private GetMediaWorkflowJobFactsPlainArgs(GetMediaWorkflowJobFactsPlainArgs $) {
        this.filters = $.filters;
        this.key = $.key;
        this.mediaWorkflowJobId = $.mediaWorkflowJobId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMediaWorkflowJobFactsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMediaWorkflowJobFactsPlainArgs $;

        public Builder() {
            $ = new GetMediaWorkflowJobFactsPlainArgs();
        }

        public Builder(GetMediaWorkflowJobFactsPlainArgs defaults) {
            $ = new GetMediaWorkflowJobFactsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetMediaWorkflowJobFactsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMediaWorkflowJobFactsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param key Filter by MediaWorkflowJob ID and MediaWorkflowJobFact key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable String key) {
            $.key = key;
            return this;
        }

        /**
         * @param mediaWorkflowJobId Unique MediaWorkflowJob identifier.
         * 
         * @return builder
         * 
         */
        public Builder mediaWorkflowJobId(String mediaWorkflowJobId) {
            $.mediaWorkflowJobId = mediaWorkflowJobId;
            return this;
        }

        /**
         * @param type Types of details to include.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetMediaWorkflowJobFactsPlainArgs build() {
            $.mediaWorkflowJobId = Objects.requireNonNull($.mediaWorkflowJobId, "expected parameter 'mediaWorkflowJobId' to be non-null");
            return $;
        }
    }

}
