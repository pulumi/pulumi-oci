// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.inputs.GetStreamCdnConfigsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamCdnConfigsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamCdnConfigsArgs Empty = new GetStreamCdnConfigsArgs();

    /**
     * A filter to return only the resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The Stream Distribution Channel identifier this CdnConfig belongs to.
     * 
     */
    @Import(name="distributionChannelId", required=true)
    private Output<String> distributionChannelId;

    /**
     * @return The Stream Distribution Channel identifier this CdnConfig belongs to.
     * 
     */
    public Output<String> distributionChannelId() {
        return this.distributionChannelId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetStreamCdnConfigsFilterArgs>> filters;

    public Optional<Output<List<GetStreamCdnConfigsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique StreamCdnConfig identifier.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique StreamCdnConfig identifier.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetStreamCdnConfigsArgs() {}

    private GetStreamCdnConfigsArgs(GetStreamCdnConfigsArgs $) {
        this.displayName = $.displayName;
        this.distributionChannelId = $.distributionChannelId;
        this.filters = $.filters;
        this.id = $.id;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamCdnConfigsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamCdnConfigsArgs $;

        public Builder() {
            $ = new GetStreamCdnConfigsArgs();
        }

        public Builder(GetStreamCdnConfigsArgs defaults) {
            $ = new GetStreamCdnConfigsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param distributionChannelId The Stream Distribution Channel identifier this CdnConfig belongs to.
         * 
         * @return builder
         * 
         */
        public Builder distributionChannelId(Output<String> distributionChannelId) {
            $.distributionChannelId = distributionChannelId;
            return this;
        }

        /**
         * @param distributionChannelId The Stream Distribution Channel identifier this CdnConfig belongs to.
         * 
         * @return builder
         * 
         */
        public Builder distributionChannelId(String distributionChannelId) {
            return distributionChannelId(Output.of(distributionChannelId));
        }

        public Builder filters(@Nullable Output<List<GetStreamCdnConfigsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetStreamCdnConfigsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetStreamCdnConfigsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id Unique StreamCdnConfig identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique StreamCdnConfig identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param state A filter to return only the resources with lifecycleState matching the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only the resources with lifecycleState matching the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetStreamCdnConfigsArgs build() {
            if ($.distributionChannelId == null) {
                throw new MissingRequiredPropertyException("GetStreamCdnConfigsArgs", "distributionChannelId");
            }
            return $;
        }
    }

}
