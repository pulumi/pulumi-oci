// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.inputs.GetStreamPackagingConfigsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamPackagingConfigsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamPackagingConfigsPlainArgs Empty = new GetStreamPackagingConfigsPlainArgs();

    /**
     * A filter to return only the resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Unique Stream Distribution Channel identifier.
     * 
     */
    @Import(name="distributionChannelId", required=true)
    private String distributionChannelId;

    /**
     * @return Unique Stream Distribution Channel identifier.
     * 
     */
    public String distributionChannelId() {
        return this.distributionChannelId;
    }

    @Import(name="filters")
    private @Nullable List<GetStreamPackagingConfigsFilter> filters;

    public Optional<List<GetStreamPackagingConfigsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Unique Stream Packaging Configuration identifier.
     * 
     */
    @Import(name="streamPackagingConfigId")
    private @Nullable String streamPackagingConfigId;

    /**
     * @return Unique Stream Packaging Configuration identifier.
     * 
     */
    public Optional<String> streamPackagingConfigId() {
        return Optional.ofNullable(this.streamPackagingConfigId);
    }

    private GetStreamPackagingConfigsPlainArgs() {}

    private GetStreamPackagingConfigsPlainArgs(GetStreamPackagingConfigsPlainArgs $) {
        this.displayName = $.displayName;
        this.distributionChannelId = $.distributionChannelId;
        this.filters = $.filters;
        this.state = $.state;
        this.streamPackagingConfigId = $.streamPackagingConfigId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamPackagingConfigsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamPackagingConfigsPlainArgs $;

        public Builder() {
            $ = new GetStreamPackagingConfigsPlainArgs();
        }

        public Builder(GetStreamPackagingConfigsPlainArgs defaults) {
            $ = new GetStreamPackagingConfigsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param distributionChannelId Unique Stream Distribution Channel identifier.
         * 
         * @return builder
         * 
         */
        public Builder distributionChannelId(String distributionChannelId) {
            $.distributionChannelId = distributionChannelId;
            return this;
        }

        public Builder filters(@Nullable List<GetStreamPackagingConfigsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetStreamPackagingConfigsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only the resources with lifecycleState matching the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param streamPackagingConfigId Unique Stream Packaging Configuration identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamPackagingConfigId(@Nullable String streamPackagingConfigId) {
            $.streamPackagingConfigId = streamPackagingConfigId;
            return this;
        }

        public GetStreamPackagingConfigsPlainArgs build() {
            if ($.distributionChannelId == null) {
                throw new MissingRequiredPropertyException("GetStreamPackagingConfigsPlainArgs", "distributionChannelId");
            }
            return $;
        }
    }

}
