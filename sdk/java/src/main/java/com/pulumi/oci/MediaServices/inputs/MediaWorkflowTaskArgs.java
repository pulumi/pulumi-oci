// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MediaWorkflowTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final MediaWorkflowTaskArgs Empty = new MediaWorkflowTaskArgs();

    /**
     * (Updatable) Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
     * 
     */
    @Import(name="enableParameterReference")
    private @Nullable Output<String> enableParameterReference;

    /**
     * @return (Updatable) Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
     * 
     */
    public Optional<Output<String>> enableParameterReference() {
        return Optional.ofNullable(this.enableParameterReference);
    }

    /**
     * (Updatable) Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
     * 
     */
    @Import(name="enableWhenReferencedParameterEquals")
    private @Nullable Output<Map<String,String>> enableWhenReferencedParameterEquals;

    /**
     * @return (Updatable) Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
     * 
     */
    public Optional<Output<Map<String,String>>> enableWhenReferencedParameterEquals() {
        return Optional.ofNullable(this.enableWhenReferencedParameterEquals);
    }

    /**
     * (Updatable) A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return (Updatable) A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    @Import(name="parameters", required=true)
    private Output<String> parameters;

    /**
     * @return (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    public Output<String> parameters() {
        return this.parameters;
    }

    /**
     * (Updatable) Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
     * 
     */
    @Import(name="prerequisites")
    private @Nullable Output<List<String>> prerequisites;

    /**
     * @return (Updatable) Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
     * 
     */
    public Optional<Output<List<String>>> prerequisites() {
        return Optional.ofNullable(this.prerequisites);
    }

    /**
     * (Updatable) The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) The version of the MediaWorkflowTaskDeclaration.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return (Updatable) The version of the MediaWorkflowTaskDeclaration.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private MediaWorkflowTaskArgs() {}

    private MediaWorkflowTaskArgs(MediaWorkflowTaskArgs $) {
        this.enableParameterReference = $.enableParameterReference;
        this.enableWhenReferencedParameterEquals = $.enableWhenReferencedParameterEquals;
        this.key = $.key;
        this.parameters = $.parameters;
        this.prerequisites = $.prerequisites;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaWorkflowTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaWorkflowTaskArgs $;

        public Builder() {
            $ = new MediaWorkflowTaskArgs();
        }

        public Builder(MediaWorkflowTaskArgs defaults) {
            $ = new MediaWorkflowTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableParameterReference (Updatable) Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
         * 
         * @return builder
         * 
         */
        public Builder enableParameterReference(@Nullable Output<String> enableParameterReference) {
            $.enableParameterReference = enableParameterReference;
            return this;
        }

        /**
         * @param enableParameterReference (Updatable) Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
         * 
         * @return builder
         * 
         */
        public Builder enableParameterReference(String enableParameterReference) {
            return enableParameterReference(Output.of(enableParameterReference));
        }

        /**
         * @param enableWhenReferencedParameterEquals (Updatable) Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
         * 
         * @return builder
         * 
         */
        public Builder enableWhenReferencedParameterEquals(@Nullable Output<Map<String,String>> enableWhenReferencedParameterEquals) {
            $.enableWhenReferencedParameterEquals = enableWhenReferencedParameterEquals;
            return this;
        }

        /**
         * @param enableWhenReferencedParameterEquals (Updatable) Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
         * 
         * @return builder
         * 
         */
        public Builder enableWhenReferencedParameterEquals(Map<String,String> enableWhenReferencedParameterEquals) {
            return enableWhenReferencedParameterEquals(Output.of(enableWhenReferencedParameterEquals));
        }

        /**
         * @param key (Updatable) A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param parameters (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param prerequisites (Updatable) Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
         * 
         * @return builder
         * 
         */
        public Builder prerequisites(@Nullable Output<List<String>> prerequisites) {
            $.prerequisites = prerequisites;
            return this;
        }

        /**
         * @param prerequisites (Updatable) Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
         * 
         * @return builder
         * 
         */
        public Builder prerequisites(List<String> prerequisites) {
            return prerequisites(Output.of(prerequisites));
        }

        /**
         * @param prerequisites (Updatable) Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
         * 
         * @return builder
         * 
         */
        public Builder prerequisites(String... prerequisites) {
            return prerequisites(List.of(prerequisites));
        }

        /**
         * @param type (Updatable) The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version (Updatable) The version of the MediaWorkflowTaskDeclaration.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version (Updatable) The version of the MediaWorkflowTaskDeclaration.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public MediaWorkflowTaskArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("MediaWorkflowTaskArgs", "key");
            }
            if ($.parameters == null) {
                throw new MissingRequiredPropertyException("MediaWorkflowTaskArgs", "parameters");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("MediaWorkflowTaskArgs", "type");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("MediaWorkflowTaskArgs", "version");
            }
            return $;
        }
    }

}
