// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamCdnConfigConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamCdnConfigConfigArgs Empty = new StreamCdnConfigConfigArgs();

    /**
     * (Updatable) The hostname of the CDN edge server to use when building CDN URLs.
     * 
     */
    @Import(name="edgeHostname")
    private @Nullable Output<String> edgeHostname;

    /**
     * @return (Updatable) The hostname of the CDN edge server to use when building CDN URLs.
     * 
     */
    public Optional<Output<String>> edgeHostname() {
        return Optional.ofNullable(this.edgeHostname);
    }

    /**
     * (Updatable) The path to prepend when building CDN URLs.
     * 
     */
    @Import(name="edgePathPrefix")
    private @Nullable Output<String> edgePathPrefix;

    /**
     * @return (Updatable) The path to prepend when building CDN URLs.
     * 
     */
    public Optional<Output<String>> edgePathPrefix() {
        return Optional.ofNullable(this.edgePathPrefix);
    }

    /**
     * (Updatable) The encryption key to use for edge token authentication.
     * 
     */
    @Import(name="edgeTokenKey")
    private @Nullable Output<String> edgeTokenKey;

    /**
     * @return (Updatable) The encryption key to use for edge token authentication.
     * 
     */
    public Optional<Output<String>> edgeTokenKey() {
        return Optional.ofNullable(this.edgeTokenKey);
    }

    /**
     * (Updatable) Salt to use when encrypting authentication token.
     * 
     */
    @Import(name="edgeTokenSalt")
    private @Nullable Output<String> edgeTokenSalt;

    /**
     * @return (Updatable) Salt to use when encrypting authentication token.
     * 
     */
    public Optional<Output<String>> edgeTokenSalt() {
        return Optional.ofNullable(this.edgeTokenSalt);
    }

    /**
     * (Updatable) Whether token authentication should be used at the CDN edge.
     * 
     */
    @Import(name="isEdgeTokenAuth")
    private @Nullable Output<Boolean> isEdgeTokenAuth;

    /**
     * @return (Updatable) Whether token authentication should be used at the CDN edge.
     * 
     */
    public Optional<Output<Boolean>> isEdgeTokenAuth() {
        return Optional.ofNullable(this.isEdgeTokenAuth);
    }

    /**
     * (Updatable) The shared secret key A, two for errorless key rotation.
     * 
     */
    @Import(name="originAuthSecretKeyA")
    private @Nullable Output<String> originAuthSecretKeyA;

    /**
     * @return (Updatable) The shared secret key A, two for errorless key rotation.
     * 
     */
    public Optional<Output<String>> originAuthSecretKeyA() {
        return Optional.ofNullable(this.originAuthSecretKeyA);
    }

    /**
     * (Updatable) The shared secret key B, two for errorless key rotation.
     * 
     */
    @Import(name="originAuthSecretKeyB")
    private @Nullable Output<String> originAuthSecretKeyB;

    /**
     * @return (Updatable) The shared secret key B, two for errorless key rotation.
     * 
     */
    public Optional<Output<String>> originAuthSecretKeyB() {
        return Optional.ofNullable(this.originAuthSecretKeyB);
    }

    /**
     * (Updatable) Nonce identifier for originAuthSecretKeyA (used to determine key used to sign).
     * 
     */
    @Import(name="originAuthSecretKeyNonceA")
    private @Nullable Output<String> originAuthSecretKeyNonceA;

    /**
     * @return (Updatable) Nonce identifier for originAuthSecretKeyA (used to determine key used to sign).
     * 
     */
    public Optional<Output<String>> originAuthSecretKeyNonceA() {
        return Optional.ofNullable(this.originAuthSecretKeyNonceA);
    }

    /**
     * (Updatable) Nonce identifier for originAuthSecretKeyB (used to determine key used to sign).
     * 
     */
    @Import(name="originAuthSecretKeyNonceB")
    private @Nullable Output<String> originAuthSecretKeyNonceB;

    /**
     * @return (Updatable) Nonce identifier for originAuthSecretKeyB (used to determine key used to sign).
     * 
     */
    public Optional<Output<String>> originAuthSecretKeyNonceB() {
        return Optional.ofNullable(this.originAuthSecretKeyNonceB);
    }

    /**
     * (Updatable) The type of encryption used to compute the signature.
     * 
     */
    @Import(name="originAuthSignEncryption")
    private @Nullable Output<String> originAuthSignEncryption;

    /**
     * @return (Updatable) The type of encryption used to compute the signature.
     * 
     */
    public Optional<Output<String>> originAuthSignEncryption() {
        return Optional.ofNullable(this.originAuthSignEncryption);
    }

    /**
     * (Updatable) The type of data used to compute the signature.
     * 
     */
    @Import(name="originAuthSignType")
    private @Nullable Output<String> originAuthSignType;

    /**
     * @return (Updatable) The type of data used to compute the signature.
     * 
     */
    public Optional<Output<String>> originAuthSignType() {
        return Optional.ofNullable(this.originAuthSignType);
    }

    /**
     * (Updatable) The name of the CDN configuration type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The name of the CDN configuration type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private StreamCdnConfigConfigArgs() {}

    private StreamCdnConfigConfigArgs(StreamCdnConfigConfigArgs $) {
        this.edgeHostname = $.edgeHostname;
        this.edgePathPrefix = $.edgePathPrefix;
        this.edgeTokenKey = $.edgeTokenKey;
        this.edgeTokenSalt = $.edgeTokenSalt;
        this.isEdgeTokenAuth = $.isEdgeTokenAuth;
        this.originAuthSecretKeyA = $.originAuthSecretKeyA;
        this.originAuthSecretKeyB = $.originAuthSecretKeyB;
        this.originAuthSecretKeyNonceA = $.originAuthSecretKeyNonceA;
        this.originAuthSecretKeyNonceB = $.originAuthSecretKeyNonceB;
        this.originAuthSignEncryption = $.originAuthSignEncryption;
        this.originAuthSignType = $.originAuthSignType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamCdnConfigConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamCdnConfigConfigArgs $;

        public Builder() {
            $ = new StreamCdnConfigConfigArgs();
        }

        public Builder(StreamCdnConfigConfigArgs defaults) {
            $ = new StreamCdnConfigConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param edgeHostname (Updatable) The hostname of the CDN edge server to use when building CDN URLs.
         * 
         * @return builder
         * 
         */
        public Builder edgeHostname(@Nullable Output<String> edgeHostname) {
            $.edgeHostname = edgeHostname;
            return this;
        }

        /**
         * @param edgeHostname (Updatable) The hostname of the CDN edge server to use when building CDN URLs.
         * 
         * @return builder
         * 
         */
        public Builder edgeHostname(String edgeHostname) {
            return edgeHostname(Output.of(edgeHostname));
        }

        /**
         * @param edgePathPrefix (Updatable) The path to prepend when building CDN URLs.
         * 
         * @return builder
         * 
         */
        public Builder edgePathPrefix(@Nullable Output<String> edgePathPrefix) {
            $.edgePathPrefix = edgePathPrefix;
            return this;
        }

        /**
         * @param edgePathPrefix (Updatable) The path to prepend when building CDN URLs.
         * 
         * @return builder
         * 
         */
        public Builder edgePathPrefix(String edgePathPrefix) {
            return edgePathPrefix(Output.of(edgePathPrefix));
        }

        /**
         * @param edgeTokenKey (Updatable) The encryption key to use for edge token authentication.
         * 
         * @return builder
         * 
         */
        public Builder edgeTokenKey(@Nullable Output<String> edgeTokenKey) {
            $.edgeTokenKey = edgeTokenKey;
            return this;
        }

        /**
         * @param edgeTokenKey (Updatable) The encryption key to use for edge token authentication.
         * 
         * @return builder
         * 
         */
        public Builder edgeTokenKey(String edgeTokenKey) {
            return edgeTokenKey(Output.of(edgeTokenKey));
        }

        /**
         * @param edgeTokenSalt (Updatable) Salt to use when encrypting authentication token.
         * 
         * @return builder
         * 
         */
        public Builder edgeTokenSalt(@Nullable Output<String> edgeTokenSalt) {
            $.edgeTokenSalt = edgeTokenSalt;
            return this;
        }

        /**
         * @param edgeTokenSalt (Updatable) Salt to use when encrypting authentication token.
         * 
         * @return builder
         * 
         */
        public Builder edgeTokenSalt(String edgeTokenSalt) {
            return edgeTokenSalt(Output.of(edgeTokenSalt));
        }

        /**
         * @param isEdgeTokenAuth (Updatable) Whether token authentication should be used at the CDN edge.
         * 
         * @return builder
         * 
         */
        public Builder isEdgeTokenAuth(@Nullable Output<Boolean> isEdgeTokenAuth) {
            $.isEdgeTokenAuth = isEdgeTokenAuth;
            return this;
        }

        /**
         * @param isEdgeTokenAuth (Updatable) Whether token authentication should be used at the CDN edge.
         * 
         * @return builder
         * 
         */
        public Builder isEdgeTokenAuth(Boolean isEdgeTokenAuth) {
            return isEdgeTokenAuth(Output.of(isEdgeTokenAuth));
        }

        /**
         * @param originAuthSecretKeyA (Updatable) The shared secret key A, two for errorless key rotation.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyA(@Nullable Output<String> originAuthSecretKeyA) {
            $.originAuthSecretKeyA = originAuthSecretKeyA;
            return this;
        }

        /**
         * @param originAuthSecretKeyA (Updatable) The shared secret key A, two for errorless key rotation.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyA(String originAuthSecretKeyA) {
            return originAuthSecretKeyA(Output.of(originAuthSecretKeyA));
        }

        /**
         * @param originAuthSecretKeyB (Updatable) The shared secret key B, two for errorless key rotation.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyB(@Nullable Output<String> originAuthSecretKeyB) {
            $.originAuthSecretKeyB = originAuthSecretKeyB;
            return this;
        }

        /**
         * @param originAuthSecretKeyB (Updatable) The shared secret key B, two for errorless key rotation.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyB(String originAuthSecretKeyB) {
            return originAuthSecretKeyB(Output.of(originAuthSecretKeyB));
        }

        /**
         * @param originAuthSecretKeyNonceA (Updatable) Nonce identifier for originAuthSecretKeyA (used to determine key used to sign).
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyNonceA(@Nullable Output<String> originAuthSecretKeyNonceA) {
            $.originAuthSecretKeyNonceA = originAuthSecretKeyNonceA;
            return this;
        }

        /**
         * @param originAuthSecretKeyNonceA (Updatable) Nonce identifier for originAuthSecretKeyA (used to determine key used to sign).
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyNonceA(String originAuthSecretKeyNonceA) {
            return originAuthSecretKeyNonceA(Output.of(originAuthSecretKeyNonceA));
        }

        /**
         * @param originAuthSecretKeyNonceB (Updatable) Nonce identifier for originAuthSecretKeyB (used to determine key used to sign).
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyNonceB(@Nullable Output<String> originAuthSecretKeyNonceB) {
            $.originAuthSecretKeyNonceB = originAuthSecretKeyNonceB;
            return this;
        }

        /**
         * @param originAuthSecretKeyNonceB (Updatable) Nonce identifier for originAuthSecretKeyB (used to determine key used to sign).
         * 
         * @return builder
         * 
         */
        public Builder originAuthSecretKeyNonceB(String originAuthSecretKeyNonceB) {
            return originAuthSecretKeyNonceB(Output.of(originAuthSecretKeyNonceB));
        }

        /**
         * @param originAuthSignEncryption (Updatable) The type of encryption used to compute the signature.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSignEncryption(@Nullable Output<String> originAuthSignEncryption) {
            $.originAuthSignEncryption = originAuthSignEncryption;
            return this;
        }

        /**
         * @param originAuthSignEncryption (Updatable) The type of encryption used to compute the signature.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSignEncryption(String originAuthSignEncryption) {
            return originAuthSignEncryption(Output.of(originAuthSignEncryption));
        }

        /**
         * @param originAuthSignType (Updatable) The type of data used to compute the signature.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSignType(@Nullable Output<String> originAuthSignType) {
            $.originAuthSignType = originAuthSignType;
            return this;
        }

        /**
         * @param originAuthSignType (Updatable) The type of data used to compute the signature.
         * 
         * @return builder
         * 
         */
        public Builder originAuthSignType(String originAuthSignType) {
            return originAuthSignType(Output.of(originAuthSignType));
        }

        /**
         * @param type (Updatable) The name of the CDN configuration type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The name of the CDN configuration type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StreamCdnConfigConfigArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamCdnConfigConfigArgs", "type");
            }
            return $;
        }
    }

}
