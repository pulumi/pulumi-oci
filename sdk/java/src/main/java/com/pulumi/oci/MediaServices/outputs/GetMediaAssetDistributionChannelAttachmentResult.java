// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.outputs.GetMediaAssetDistributionChannelAttachmentLock;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMediaAssetDistributionChannelAttachmentResult {
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return OCID of associated Distribution Channel.
     * 
     */
    private String distributionChannelId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean isLockOverride;
    /**
     * @return Locks associated with this resource.
     * 
     */
    private List<GetMediaAssetDistributionChannelAttachmentLock> locks;
    private String mediaAssetId;
    /**
     * @return The ingest MediaWorkflowJob ID that created this attachment.
     * 
     */
    private String mediaWorkflowJobId;
    /**
     * @return The identifier for the metadata.
     * 
     */
    private String metadataRef;
    /**
     * @return Lifecycle state of the attachment.
     * 
     */
    private String state;
    /**
     * @return Version of the attachment.
     * 
     */
    private String version;

    private GetMediaAssetDistributionChannelAttachmentResult() {}
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return OCID of associated Distribution Channel.
     * 
     */
    public String distributionChannelId() {
        return this.distributionChannelId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isLockOverride() {
        return this.isLockOverride;
    }
    /**
     * @return Locks associated with this resource.
     * 
     */
    public List<GetMediaAssetDistributionChannelAttachmentLock> locks() {
        return this.locks;
    }
    public String mediaAssetId() {
        return this.mediaAssetId;
    }
    /**
     * @return The ingest MediaWorkflowJob ID that created this attachment.
     * 
     */
    public String mediaWorkflowJobId() {
        return this.mediaWorkflowJobId;
    }
    /**
     * @return The identifier for the metadata.
     * 
     */
    public String metadataRef() {
        return this.metadataRef;
    }
    /**
     * @return Lifecycle state of the attachment.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Version of the attachment.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMediaAssetDistributionChannelAttachmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String displayName;
        private String distributionChannelId;
        private String id;
        private Boolean isLockOverride;
        private List<GetMediaAssetDistributionChannelAttachmentLock> locks;
        private String mediaAssetId;
        private String mediaWorkflowJobId;
        private String metadataRef;
        private String state;
        private String version;
        public Builder() {}
        public Builder(GetMediaAssetDistributionChannelAttachmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.distributionChannelId = defaults.distributionChannelId;
    	      this.id = defaults.id;
    	      this.isLockOverride = defaults.isLockOverride;
    	      this.locks = defaults.locks;
    	      this.mediaAssetId = defaults.mediaAssetId;
    	      this.mediaWorkflowJobId = defaults.mediaWorkflowJobId;
    	      this.metadataRef = defaults.metadataRef;
    	      this.state = defaults.state;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder distributionChannelId(String distributionChannelId) {
            if (distributionChannelId == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "distributionChannelId");
            }
            this.distributionChannelId = distributionChannelId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isLockOverride(Boolean isLockOverride) {
            if (isLockOverride == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "isLockOverride");
            }
            this.isLockOverride = isLockOverride;
            return this;
        }
        @CustomType.Setter
        public Builder locks(List<GetMediaAssetDistributionChannelAttachmentLock> locks) {
            if (locks == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "locks");
            }
            this.locks = locks;
            return this;
        }
        public Builder locks(GetMediaAssetDistributionChannelAttachmentLock... locks) {
            return locks(List.of(locks));
        }
        @CustomType.Setter
        public Builder mediaAssetId(String mediaAssetId) {
            if (mediaAssetId == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "mediaAssetId");
            }
            this.mediaAssetId = mediaAssetId;
            return this;
        }
        @CustomType.Setter
        public Builder mediaWorkflowJobId(String mediaWorkflowJobId) {
            if (mediaWorkflowJobId == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "mediaWorkflowJobId");
            }
            this.mediaWorkflowJobId = mediaWorkflowJobId;
            return this;
        }
        @CustomType.Setter
        public Builder metadataRef(String metadataRef) {
            if (metadataRef == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "metadataRef");
            }
            this.metadataRef = metadataRef;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMediaAssetDistributionChannelAttachmentResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetMediaAssetDistributionChannelAttachmentResult build() {
            final var _resultValue = new GetMediaAssetDistributionChannelAttachmentResult();
            _resultValue.displayName = displayName;
            _resultValue.distributionChannelId = distributionChannelId;
            _resultValue.id = id;
            _resultValue.isLockOverride = isLockOverride;
            _resultValue.locks = locks;
            _resultValue.mediaAssetId = mediaAssetId;
            _resultValue.mediaWorkflowJobId = mediaWorkflowJobId;
            _resultValue.metadataRef = metadataRef;
            _resultValue.state = state;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
