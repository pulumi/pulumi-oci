// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.MediaServices.outputs.GetMediaAssetMediaAssetTag;
import com.pulumi.oci.MediaServices.outputs.GetMediaAssetMetadata;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMediaAssetResult {
    /**
     * @return The name of the object storage bucket where this represented asset is located.
     * 
     */
    private String bucket;
    /**
     * @return The ID of the compartment containing the MediaAsset.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return The ID of the senior most asset from which this asset is derived.
     * 
     */
    private String masterMediaAssetId;
    private String mediaAssetId;
    /**
     * @return List of tags for the MediaAsset.
     * 
     */
    private List<GetMediaAssetMediaAssetTag> mediaAssetTags;
    /**
     * @return The ID of the MediaWorkflowJob used to produce this asset.
     * 
     */
    private String mediaWorkflowJobId;
    /**
     * @return JSON string containing the technial metadata for the media asset.
     * 
     */
    private List<GetMediaAssetMetadata> metadatas;
    /**
     * @return The object storage namespace where this asset is located.
     * 
     */
    private String namespace;
    /**
     * @return The object storage object name that identifies this asset.
     * 
     */
    private String object;
    /**
     * @return eTag of the underlying object storage object.
     * 
     */
    private String objectEtag;
    /**
     * @return The ID of the parent asset from which this asset is derived.
     * 
     */
    private String parentMediaAssetId;
    /**
     * @return The end index of video segment files.
     * 
     */
    private String segmentRangeEndIndex;
    /**
     * @return The start index for video segment files.
     * 
     */
    private String segmentRangeStartIndex;
    /**
     * @return The ID of the MediaWorkflow used to produce this asset.
     * 
     */
    private String sourceMediaWorkflowId;
    /**
     * @return The version of the MediaWorkflow used to produce this asset.
     * 
     */
    private String sourceMediaWorkflowVersion;
    /**
     * @return The current state of the MediaAsset.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time when the MediaAsset was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the MediaAsset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of the media asset.
     * 
     */
    private String type;

    private GetMediaAssetResult() {}
    /**
     * @return The name of the object storage bucket where this represented asset is located.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return The ID of the compartment containing the MediaAsset.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the senior most asset from which this asset is derived.
     * 
     */
    public String masterMediaAssetId() {
        return this.masterMediaAssetId;
    }
    public String mediaAssetId() {
        return this.mediaAssetId;
    }
    /**
     * @return List of tags for the MediaAsset.
     * 
     */
    public List<GetMediaAssetMediaAssetTag> mediaAssetTags() {
        return this.mediaAssetTags;
    }
    /**
     * @return The ID of the MediaWorkflowJob used to produce this asset.
     * 
     */
    public String mediaWorkflowJobId() {
        return this.mediaWorkflowJobId;
    }
    /**
     * @return JSON string containing the technial metadata for the media asset.
     * 
     */
    public List<GetMediaAssetMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The object storage namespace where this asset is located.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The object storage object name that identifies this asset.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return eTag of the underlying object storage object.
     * 
     */
    public String objectEtag() {
        return this.objectEtag;
    }
    /**
     * @return The ID of the parent asset from which this asset is derived.
     * 
     */
    public String parentMediaAssetId() {
        return this.parentMediaAssetId;
    }
    /**
     * @return The end index of video segment files.
     * 
     */
    public String segmentRangeEndIndex() {
        return this.segmentRangeEndIndex;
    }
    /**
     * @return The start index for video segment files.
     * 
     */
    public String segmentRangeStartIndex() {
        return this.segmentRangeStartIndex;
    }
    /**
     * @return The ID of the MediaWorkflow used to produce this asset.
     * 
     */
    public String sourceMediaWorkflowId() {
        return this.sourceMediaWorkflowId;
    }
    /**
     * @return The version of the MediaWorkflow used to produce this asset.
     * 
     */
    public String sourceMediaWorkflowVersion() {
        return this.sourceMediaWorkflowVersion;
    }
    /**
     * @return The current state of the MediaAsset.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time when the MediaAsset was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the MediaAsset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of the media asset.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMediaAssetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String masterMediaAssetId;
        private String mediaAssetId;
        private List<GetMediaAssetMediaAssetTag> mediaAssetTags;
        private String mediaWorkflowJobId;
        private List<GetMediaAssetMetadata> metadatas;
        private String namespace;
        private String object;
        private String objectEtag;
        private String parentMediaAssetId;
        private String segmentRangeEndIndex;
        private String segmentRangeStartIndex;
        private String sourceMediaWorkflowId;
        private String sourceMediaWorkflowVersion;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetMediaAssetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.masterMediaAssetId = defaults.masterMediaAssetId;
    	      this.mediaAssetId = defaults.mediaAssetId;
    	      this.mediaAssetTags = defaults.mediaAssetTags;
    	      this.mediaWorkflowJobId = defaults.mediaWorkflowJobId;
    	      this.metadatas = defaults.metadatas;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.objectEtag = defaults.objectEtag;
    	      this.parentMediaAssetId = defaults.parentMediaAssetId;
    	      this.segmentRangeEndIndex = defaults.segmentRangeEndIndex;
    	      this.segmentRangeStartIndex = defaults.segmentRangeStartIndex;
    	      this.sourceMediaWorkflowId = defaults.sourceMediaWorkflowId;
    	      this.sourceMediaWorkflowVersion = defaults.sourceMediaWorkflowVersion;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder masterMediaAssetId(String masterMediaAssetId) {
            this.masterMediaAssetId = Objects.requireNonNull(masterMediaAssetId);
            return this;
        }
        @CustomType.Setter
        public Builder mediaAssetId(String mediaAssetId) {
            this.mediaAssetId = Objects.requireNonNull(mediaAssetId);
            return this;
        }
        @CustomType.Setter
        public Builder mediaAssetTags(List<GetMediaAssetMediaAssetTag> mediaAssetTags) {
            this.mediaAssetTags = Objects.requireNonNull(mediaAssetTags);
            return this;
        }
        public Builder mediaAssetTags(GetMediaAssetMediaAssetTag... mediaAssetTags) {
            return mediaAssetTags(List.of(mediaAssetTags));
        }
        @CustomType.Setter
        public Builder mediaWorkflowJobId(String mediaWorkflowJobId) {
            this.mediaWorkflowJobId = Objects.requireNonNull(mediaWorkflowJobId);
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetMediaAssetMetadata> metadatas) {
            this.metadatas = Objects.requireNonNull(metadatas);
            return this;
        }
        public Builder metadatas(GetMediaAssetMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        @CustomType.Setter
        public Builder objectEtag(String objectEtag) {
            this.objectEtag = Objects.requireNonNull(objectEtag);
            return this;
        }
        @CustomType.Setter
        public Builder parentMediaAssetId(String parentMediaAssetId) {
            this.parentMediaAssetId = Objects.requireNonNull(parentMediaAssetId);
            return this;
        }
        @CustomType.Setter
        public Builder segmentRangeEndIndex(String segmentRangeEndIndex) {
            this.segmentRangeEndIndex = Objects.requireNonNull(segmentRangeEndIndex);
            return this;
        }
        @CustomType.Setter
        public Builder segmentRangeStartIndex(String segmentRangeStartIndex) {
            this.segmentRangeStartIndex = Objects.requireNonNull(segmentRangeStartIndex);
            return this;
        }
        @CustomType.Setter
        public Builder sourceMediaWorkflowId(String sourceMediaWorkflowId) {
            this.sourceMediaWorkflowId = Objects.requireNonNull(sourceMediaWorkflowId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceMediaWorkflowVersion(String sourceMediaWorkflowVersion) {
            this.sourceMediaWorkflowVersion = Objects.requireNonNull(sourceMediaWorkflowVersion);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetMediaAssetResult build() {
            final var _resultValue = new GetMediaAssetResult();
            _resultValue.bucket = bucket;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.masterMediaAssetId = masterMediaAssetId;
            _resultValue.mediaAssetId = mediaAssetId;
            _resultValue.mediaAssetTags = mediaAssetTags;
            _resultValue.mediaWorkflowJobId = mediaWorkflowJobId;
            _resultValue.metadatas = metadatas;
            _resultValue.namespace = namespace;
            _resultValue.object = object;
            _resultValue.objectEtag = objectEtag;
            _resultValue.parentMediaAssetId = parentMediaAssetId;
            _resultValue.segmentRangeEndIndex = segmentRangeEndIndex;
            _resultValue.segmentRangeStartIndex = segmentRangeStartIndex;
            _resultValue.sourceMediaWorkflowId = sourceMediaWorkflowId;
            _resultValue.sourceMediaWorkflowVersion = sourceMediaWorkflowVersion;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
