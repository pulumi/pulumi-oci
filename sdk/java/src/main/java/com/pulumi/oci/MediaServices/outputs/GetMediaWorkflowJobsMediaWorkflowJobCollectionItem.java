// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.MediaServices.outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput;
import com.pulumi.oci.MediaServices.outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMediaWorkflowJobsMediaWorkflowJobCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return unique MediaWorkflowJob identifier
     * 
     */
    private String id;
    /**
     * @return The lifecycle details of MediaWorkflowJob task.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Configurations to be applied to this run of the workflow.
     * 
     */
    private List<String> mediaWorkflowConfigurationIds;
    /**
     * @return Unique MediaWorkflow identifier.
     * 
     */
    private String mediaWorkflowId;
    private String mediaWorkflowName;
    /**
     * @return A list of JobOutput for the workflowJob.
     * 
     */
    private List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput> outputs;
    /**
     * @return Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow&#39;s MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON.  The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task&#39;s key and the 2nd level keys refer to a parameter&#39;s name.
     * 
     */
    private String parameters;
    /**
     * @return A JSON representation of the job as it will be run by the system. All the task declarations, configurations and parameters are merged. Parameter values are all fully resolved.
     * 
     */
    private String runnable;
    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Status of each task.
     * 
     */
    private List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState> taskLifecycleStates;
    /**
     * @return Creation time of the job. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Time when the job finished. An RFC3339 formatted datetime string.
     * 
     */
    private String timeEnded;
    /**
     * @return Time when the job started to execute. An RFC3339 formatted datetime string.
     * 
     */
    private String timeStarted;
    /**
     * @return Updated time of the job. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    private String workflowIdentifierType;

    private GetMediaWorkflowJobsMediaWorkflowJobCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return unique MediaWorkflowJob identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The lifecycle details of MediaWorkflowJob task.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Configurations to be applied to this run of the workflow.
     * 
     */
    public List<String> mediaWorkflowConfigurationIds() {
        return this.mediaWorkflowConfigurationIds;
    }
    /**
     * @return Unique MediaWorkflow identifier.
     * 
     */
    public String mediaWorkflowId() {
        return this.mediaWorkflowId;
    }
    public String mediaWorkflowName() {
        return this.mediaWorkflowName;
    }
    /**
     * @return A list of JobOutput for the workflowJob.
     * 
     */
    public List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput> outputs() {
        return this.outputs;
    }
    /**
     * @return Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow&#39;s MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON.  The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task&#39;s key and the 2nd level keys refer to a parameter&#39;s name.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return A JSON representation of the job as it will be run by the system. All the task declarations, configurations and parameters are merged. Parameter values are all fully resolved.
     * 
     */
    public String runnable() {
        return this.runnable;
    }
    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Status of each task.
     * 
     */
    public List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState> taskLifecycleStates() {
        return this.taskLifecycleStates;
    }
    /**
     * @return Creation time of the job. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time when the job finished. An RFC3339 formatted datetime string.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return Time when the job started to execute. An RFC3339 formatted datetime string.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return Updated time of the job. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String workflowIdentifierType() {
        return this.workflowIdentifierType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMediaWorkflowJobsMediaWorkflowJobCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private List<String> mediaWorkflowConfigurationIds;
        private String mediaWorkflowId;
        private String mediaWorkflowName;
        private List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput> outputs;
        private String parameters;
        private String runnable;
        private String state;
        private Map<String,Object> systemTags;
        private List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState> taskLifecycleStates;
        private String timeCreated;
        private String timeEnded;
        private String timeStarted;
        private String timeUpdated;
        private String workflowIdentifierType;
        public Builder() {}
        public Builder(GetMediaWorkflowJobsMediaWorkflowJobCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.mediaWorkflowConfigurationIds = defaults.mediaWorkflowConfigurationIds;
    	      this.mediaWorkflowId = defaults.mediaWorkflowId;
    	      this.mediaWorkflowName = defaults.mediaWorkflowName;
    	      this.outputs = defaults.outputs;
    	      this.parameters = defaults.parameters;
    	      this.runnable = defaults.runnable;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.taskLifecycleStates = defaults.taskLifecycleStates;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.workflowIdentifierType = defaults.workflowIdentifierType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder mediaWorkflowConfigurationIds(List<String> mediaWorkflowConfigurationIds) {
            this.mediaWorkflowConfigurationIds = Objects.requireNonNull(mediaWorkflowConfigurationIds);
            return this;
        }
        public Builder mediaWorkflowConfigurationIds(String... mediaWorkflowConfigurationIds) {
            return mediaWorkflowConfigurationIds(List.of(mediaWorkflowConfigurationIds));
        }
        @CustomType.Setter
        public Builder mediaWorkflowId(String mediaWorkflowId) {
            this.mediaWorkflowId = Objects.requireNonNull(mediaWorkflowId);
            return this;
        }
        @CustomType.Setter
        public Builder mediaWorkflowName(String mediaWorkflowName) {
            this.mediaWorkflowName = Objects.requireNonNull(mediaWorkflowName);
            return this;
        }
        @CustomType.Setter
        public Builder outputs(List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput> outputs) {
            this.outputs = Objects.requireNonNull(outputs);
            return this;
        }
        public Builder outputs(GetMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput... outputs) {
            return outputs(List.of(outputs));
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        @CustomType.Setter
        public Builder runnable(String runnable) {
            this.runnable = Objects.requireNonNull(runnable);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder taskLifecycleStates(List<GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState> taskLifecycleStates) {
            this.taskLifecycleStates = Objects.requireNonNull(taskLifecycleStates);
            return this;
        }
        public Builder taskLifecycleStates(GetMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState... taskLifecycleStates) {
            return taskLifecycleStates(List.of(taskLifecycleStates));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder workflowIdentifierType(String workflowIdentifierType) {
            this.workflowIdentifierType = Objects.requireNonNull(workflowIdentifierType);
            return this;
        }
        public GetMediaWorkflowJobsMediaWorkflowJobCollectionItem build() {
            final var o = new GetMediaWorkflowJobsMediaWorkflowJobCollectionItem();
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.mediaWorkflowConfigurationIds = mediaWorkflowConfigurationIds;
            o.mediaWorkflowId = mediaWorkflowId;
            o.mediaWorkflowName = mediaWorkflowName;
            o.outputs = outputs;
            o.parameters = parameters;
            o.runnable = runnable;
            o.state = state;
            o.systemTags = systemTags;
            o.taskLifecycleStates = taskLifecycleStates;
            o.timeCreated = timeCreated;
            o.timeEnded = timeEnded;
            o.timeStarted = timeStarted;
            o.timeUpdated = timeUpdated;
            o.workflowIdentifierType = workflowIdentifierType;
            return o;
        }
    }
}
