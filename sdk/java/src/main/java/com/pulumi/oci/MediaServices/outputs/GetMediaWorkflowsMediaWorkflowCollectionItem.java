// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.outputs.GetMediaWorkflowsMediaWorkflowCollectionItemTask;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMediaWorkflowsMediaWorkflowCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique MediaWorkflow identifier.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecyleDetails;
    /**
     * @return Configurations to be applied to all the runs of this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob. If the same parameter appears in multiple configurations, the values that appear in the configuration at the highest index will be used.
     * 
     */
    private List<String> mediaWorkflowConfigurationIds;
    /**
     * @return Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    private String parameters;
    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array is unique within the array.  The order of the items is preserved from the order of the tasks array in CreateMediaWorkflowDetails or UpdateMediaWorkflowDetails.
     * 
     */
    private List<GetMediaWorkflowsMediaWorkflowCollectionItemTask> tasks;
    /**
     * @return The time when the MediaWorkflow was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the MediaWorkflow.
     * 
     */
    private String version;

    private GetMediaWorkflowsMediaWorkflowCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only the resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique MediaWorkflow identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecyleDetails() {
        return this.lifecyleDetails;
    }
    /**
     * @return Configurations to be applied to all the runs of this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob. If the same parameter appears in multiple configurations, the values that appear in the configuration at the highest index will be used.
     * 
     */
    public List<String> mediaWorkflowConfigurationIds() {
        return this.mediaWorkflowConfigurationIds;
    }
    /**
     * @return Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return A filter to return only the resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array is unique within the array.  The order of the items is preserved from the order of the tasks array in CreateMediaWorkflowDetails or UpdateMediaWorkflowDetails.
     * 
     */
    public List<GetMediaWorkflowsMediaWorkflowCollectionItemTask> tasks() {
        return this.tasks;
    }
    /**
     * @return The time when the MediaWorkflow was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the MediaWorkflow.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMediaWorkflowsMediaWorkflowCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecyleDetails;
        private List<String> mediaWorkflowConfigurationIds;
        private String parameters;
        private String state;
        private Map<String,Object> systemTags;
        private List<GetMediaWorkflowsMediaWorkflowCollectionItemTask> tasks;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetMediaWorkflowsMediaWorkflowCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecyleDetails = defaults.lifecyleDetails;
    	      this.mediaWorkflowConfigurationIds = defaults.mediaWorkflowConfigurationIds;
    	      this.parameters = defaults.parameters;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.tasks = defaults.tasks;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecyleDetails(String lifecyleDetails) {
            if (lifecyleDetails == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "lifecyleDetails");
            }
            this.lifecyleDetails = lifecyleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder mediaWorkflowConfigurationIds(List<String> mediaWorkflowConfigurationIds) {
            if (mediaWorkflowConfigurationIds == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "mediaWorkflowConfigurationIds");
            }
            this.mediaWorkflowConfigurationIds = mediaWorkflowConfigurationIds;
            return this;
        }
        public Builder mediaWorkflowConfigurationIds(String... mediaWorkflowConfigurationIds) {
            return mediaWorkflowConfigurationIds(List.of(mediaWorkflowConfigurationIds));
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder tasks(List<GetMediaWorkflowsMediaWorkflowCollectionItemTask> tasks) {
            if (tasks == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "tasks");
            }
            this.tasks = tasks;
            return this;
        }
        public Builder tasks(GetMediaWorkflowsMediaWorkflowCollectionItemTask... tasks) {
            return tasks(List.of(tasks));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetMediaWorkflowsMediaWorkflowCollectionItem build() {
            final var _resultValue = new GetMediaWorkflowsMediaWorkflowCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecyleDetails = lifecyleDetails;
            _resultValue.mediaWorkflowConfigurationIds = mediaWorkflowConfigurationIds;
            _resultValue.parameters = parameters;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.tasks = tasks;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
