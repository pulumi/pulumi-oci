// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMediaWorkflowsMediaWorkflowCollectionItemTask {
    /**
     * @return Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
     * 
     */
    private String enableParameterReference;
    /**
     * @return Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
     * 
     */
    private Map<String,String> enableWhenReferencedParameterEquals;
    /**
     * @return A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
     * 
     */
    private String key;
    /**
     * @return Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    private String parameters;
    /**
     * @return Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
     * 
     */
    private List<String> prerequisites;
    /**
     * @return The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
     * 
     */
    private String type;
    /**
     * @return The version of the MediaWorkflow.
     * 
     */
    private String version;

    private GetMediaWorkflowsMediaWorkflowCollectionItemTask() {}
    /**
     * @return Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task&#39;s workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
     * 
     */
    public String enableParameterReference() {
        return this.enableParameterReference;
    }
    /**
     * @return Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created from the workflow of this task, the task will only be enabled if the value of the parameter specified by enableParameterReference is equal to the value of this property. This property must be prenset if and only if a enableParameterReference is given. The value is a JSON node.
     * 
     */
    public Map<String,String> enableWhenReferencedParameterEquals() {
        return this.enableWhenReferencedParameterEquals;
    }
    /**
     * @return A unique identifier for this task within its workflow. Keys are used to reference a task within workflows and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
     * 
     */
    public List<String> prerequisites() {
        return this.prerequisites;
    }
    /**
     * @return The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The version of the MediaWorkflow.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMediaWorkflowsMediaWorkflowCollectionItemTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String enableParameterReference;
        private Map<String,String> enableWhenReferencedParameterEquals;
        private String key;
        private String parameters;
        private List<String> prerequisites;
        private String type;
        private String version;
        public Builder() {}
        public Builder(GetMediaWorkflowsMediaWorkflowCollectionItemTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableParameterReference = defaults.enableParameterReference;
    	      this.enableWhenReferencedParameterEquals = defaults.enableWhenReferencedParameterEquals;
    	      this.key = defaults.key;
    	      this.parameters = defaults.parameters;
    	      this.prerequisites = defaults.prerequisites;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder enableParameterReference(String enableParameterReference) {
            if (enableParameterReference == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "enableParameterReference");
            }
            this.enableParameterReference = enableParameterReference;
            return this;
        }
        @CustomType.Setter
        public Builder enableWhenReferencedParameterEquals(Map<String,String> enableWhenReferencedParameterEquals) {
            if (enableWhenReferencedParameterEquals == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "enableWhenReferencedParameterEquals");
            }
            this.enableWhenReferencedParameterEquals = enableWhenReferencedParameterEquals;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder prerequisites(List<String> prerequisites) {
            if (prerequisites == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "prerequisites");
            }
            this.prerequisites = prerequisites;
            return this;
        }
        public Builder prerequisites(String... prerequisites) {
            return prerequisites(List.of(prerequisites));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMediaWorkflowsMediaWorkflowCollectionItemTask", "version");
            }
            this.version = version;
            return this;
        }
        public GetMediaWorkflowsMediaWorkflowCollectionItemTask build() {
            final var _resultValue = new GetMediaWorkflowsMediaWorkflowCollectionItemTask();
            _resultValue.enableParameterReference = enableParameterReference;
            _resultValue.enableWhenReferencedParameterEquals = enableWhenReferencedParameterEquals;
            _resultValue.key = key;
            _resultValue.parameters = parameters;
            _resultValue.prerequisites = prerequisites;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
