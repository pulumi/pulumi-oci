// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MediaServices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MediaServices.outputs.GetStreamPackagingConfigEncryption;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamPackagingConfigResult {
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The name of the stream packaging configuration. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
     * 
     */
    private String distributionChannelId;
    /**
     * @return The encryption used by the stream packaging configuration.
     * 
     */
    private List<GetStreamPackagingConfigEncryption> encryptions;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return The duration in seconds for each fragment.
     * 
     */
    private Integer segmentTimeInSeconds;
    /**
     * @return The current state of the Packaging Configuration.
     * 
     */
    private String state;
    private String streamPackagingConfigId;
    /**
     * @return The output format for the package.
     * 
     */
    private String streamPackagingFormat;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetStreamPackagingConfigResult() {}
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The name of the stream packaging configuration. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
     * 
     */
    public String distributionChannelId() {
        return this.distributionChannelId;
    }
    /**
     * @return The encryption used by the stream packaging configuration.
     * 
     */
    public List<GetStreamPackagingConfigEncryption> encryptions() {
        return this.encryptions;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The duration in seconds for each fragment.
     * 
     */
    public Integer segmentTimeInSeconds() {
        return this.segmentTimeInSeconds;
    }
    /**
     * @return The current state of the Packaging Configuration.
     * 
     */
    public String state() {
        return this.state;
    }
    public String streamPackagingConfigId() {
        return this.streamPackagingConfigId;
    }
    /**
     * @return The output format for the package.
     * 
     */
    public String streamPackagingFormat() {
        return this.streamPackagingFormat;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamPackagingConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private String distributionChannelId;
        private List<GetStreamPackagingConfigEncryption> encryptions;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer segmentTimeInSeconds;
        private String state;
        private String streamPackagingConfigId;
        private String streamPackagingFormat;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetStreamPackagingConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.distributionChannelId = defaults.distributionChannelId;
    	      this.encryptions = defaults.encryptions;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.segmentTimeInSeconds = defaults.segmentTimeInSeconds;
    	      this.state = defaults.state;
    	      this.streamPackagingConfigId = defaults.streamPackagingConfigId;
    	      this.streamPackagingFormat = defaults.streamPackagingFormat;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder distributionChannelId(String distributionChannelId) {
            if (distributionChannelId == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "distributionChannelId");
            }
            this.distributionChannelId = distributionChannelId;
            return this;
        }
        @CustomType.Setter
        public Builder encryptions(List<GetStreamPackagingConfigEncryption> encryptions) {
            if (encryptions == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "encryptions");
            }
            this.encryptions = encryptions;
            return this;
        }
        public Builder encryptions(GetStreamPackagingConfigEncryption... encryptions) {
            return encryptions(List.of(encryptions));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder segmentTimeInSeconds(Integer segmentTimeInSeconds) {
            if (segmentTimeInSeconds == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "segmentTimeInSeconds");
            }
            this.segmentTimeInSeconds = segmentTimeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamPackagingConfigId(String streamPackagingConfigId) {
            if (streamPackagingConfigId == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "streamPackagingConfigId");
            }
            this.streamPackagingConfigId = streamPackagingConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder streamPackagingFormat(String streamPackagingFormat) {
            if (streamPackagingFormat == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "streamPackagingFormat");
            }
            this.streamPackagingFormat = streamPackagingFormat;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetStreamPackagingConfigResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetStreamPackagingConfigResult build() {
            final var _resultValue = new GetStreamPackagingConfigResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.distributionChannelId = distributionChannelId;
            _resultValue.encryptions = encryptions;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.segmentTimeInSeconds = segmentTimeInSeconds;
            _resultValue.state = state;
            _resultValue.streamPackagingConfigId = streamPackagingConfigId;
            _resultValue.streamPackagingFormat = streamPackagingFormat;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
