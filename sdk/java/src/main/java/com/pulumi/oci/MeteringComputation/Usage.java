// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.MeteringComputation.UsageArgs;
import com.pulumi.oci.MeteringComputation.inputs.UsageState;
import com.pulumi.oci.MeteringComputation.outputs.UsageForecast;
import com.pulumi.oci.MeteringComputation.outputs.UsageGroupByTag;
import com.pulumi.oci.MeteringComputation.outputs.UsageItem;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Usage resource in Oracle Cloud Infrastructure Metering Computation service.
 * 
 * Returns usage for the given account.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.MeteringComputation.Usage;
 * import com.pulumi.oci.MeteringComputation.UsageArgs;
 * import com.pulumi.oci.MeteringComputation.inputs.UsageForecastArgs;
 * import com.pulumi.oci.MeteringComputation.inputs.UsageGroupByTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testUsage = new Usage(&#34;testUsage&#34;, UsageArgs.builder()        
 *             .granularity(var_.usage_granularity())
 *             .tenantId(oci_metering_computation_tenant.test_tenant().id())
 *             .timeUsageEnded(var_.usage_time_usage_ended())
 *             .timeUsageStarted(var_.usage_time_usage_started())
 *             .compartmentDepth(var_.usage_compartment_depth())
 *             .filter(var_.usage_filter())
 *             .forecast(UsageForecastArgs.builder()
 *                 .timeForecastEnded(var_.usage_forecast_time_forecast_ended())
 *                 .forecastType(var_.usage_forecast_forecast_type())
 *                 .timeForecastStarted(var_.usage_forecast_time_forecast_started())
 *                 .build())
 *             .groupBies(var_.usage_group_by())
 *             .groupByTags(UsageGroupByTagArgs.builder()
 *                 .key(var_.usage_group_by_tag_key())
 *                 .namespace(var_.usage_group_by_tag_namespace())
 *                 .value(var_.usage_group_by_tag_value())
 *                 .build())
 *             .isAggregateByTime(var_.usage_is_aggregate_by_time())
 *             .queryType(var_.usage_query_type())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Import is not supported for this resource.
 * 
 */
@ResourceType(type="oci:MeteringComputation/usage:Usage")
public class Usage extends com.pulumi.resources.CustomResource {
    /**
     * The compartment depth level.
     * 
     */
    @Export(name="compartmentDepth", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> compartmentDepth;

    /**
     * @return The compartment depth level.
     * 
     */
    public Output<Optional<Double>> compartmentDepth() {
        return Codegen.optional(this.compartmentDepth);
    }
    /**
     * The filter object for query usage.
     * 
     */
    @Export(name="filter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filter;

    /**
     * @return The filter object for query usage.
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * Forecast configuration of usage/cost.
     * 
     */
    @Export(name="forecast", refs={UsageForecast.class}, tree="[0]")
    private Output</* @Nullable */ UsageForecast> forecast;

    /**
     * @return Forecast configuration of usage/cost.
     * 
     */
    public Output<Optional<UsageForecast>> forecast() {
        return Codegen.optional(this.forecast);
    }
    /**
     * The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
     * 
     */
    @Export(name="granularity", refs={String.class}, tree="[0]")
    private Output<String> granularity;

    /**
     * @return The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
     * 
     */
    public Output<String> granularity() {
        return this.granularity;
    }
    /**
     * Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    @Export(name="groupBies", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupBies;

    /**
     * @return Aggregate the result by. example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    public Output<Optional<List<String>>> groupBies() {
        return Codegen.optional(this.groupBies);
    }
    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    @Export(name="groupByTags", refs={List.class,UsageGroupByTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<UsageGroupByTag>> groupByTags;

    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public Output<Optional<List<UsageGroupByTag>>> groupByTags() {
        return Codegen.optional(this.groupByTags);
    }
    /**
     * Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    @Export(name="isAggregateByTime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isAggregateByTime;

    /**
     * @return Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    public Output<Optional<Boolean>> isAggregateByTime() {
        return Codegen.optional(this.isAggregateByTime);
    }
    /**
     * A list of usage items.
     * 
     */
    @Export(name="items", refs={List.class,UsageItem.class}, tree="[0,1]")
    private Output</* @Nullable */ List<UsageItem>> items;

    /**
     * @return A list of usage items.
     * 
     */
    public Output<Optional<List<UsageItem>>> items() {
        return Codegen.optional(this.items);
    }
    /**
     * The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
     * 
     */
    @Export(name="queryType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryType;

    /**
     * @return The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data. AllCredit - Query the credit adjustments and expired credit.
     * 
     */
    public Output<Optional<String>> queryType() {
        return Codegen.optional(this.queryType);
    }
    /**
     * Tenant ID.
     * 
     */
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }
    /**
     * The usage end time.
     * 
     */
    @Export(name="timeUsageEnded", refs={String.class}, tree="[0]")
    private Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Output<String> timeUsageEnded() {
        return this.timeUsageEnded;
    }
    /**
     * The usage start time.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="timeUsageStarted", refs={String.class}, tree="[0]")
    private Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> timeUsageStarted() {
        return this.timeUsageStarted;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Usage(String name) {
        this(name, UsageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Usage(String name, UsageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Usage(String name, UsageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:MeteringComputation/usage:Usage", name, args == null ? UsageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Usage(String name, Output<String> id, @Nullable UsageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:MeteringComputation/usage:Usage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Usage get(String name, Output<String> id, @Nullable UsageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Usage(name, id, state, options);
    }
}
