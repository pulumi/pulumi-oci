// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.MeteringComputation.UsageCarbonEmissionArgs;
import com.pulumi.oci.MeteringComputation.inputs.UsageCarbonEmissionState;
import com.pulumi.oci.MeteringComputation.outputs.UsageCarbonEmissionGroupByTag;
import com.pulumi.oci.MeteringComputation.outputs.UsageCarbonEmissionItem;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource provides the Usage Carbon Emission resource in Oracle Cloud Infrastructure Metering Computation service.
 * 
 * Returns usage carbon emission for the given account.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.MeteringComputation.UsageCarbonEmission;
 * import com.pulumi.oci.MeteringComputation.UsageCarbonEmissionArgs;
 * import com.pulumi.oci.MeteringComputation.inputs.UsageCarbonEmissionGroupByTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testUsageCarbonEmission = new UsageCarbonEmission(&#34;testUsageCarbonEmission&#34;, UsageCarbonEmissionArgs.builder()        
 *             .tenantId(oci_metering_computation_tenant.test_tenant().id())
 *             .timeUsageEnded(var_.usage_carbon_emission_time_usage_ended())
 *             .timeUsageStarted(var_.usage_carbon_emission_time_usage_started())
 *             .compartmentDepth(var_.usage_carbon_emission_compartment_depth())
 *             .groupBies(var_.usage_carbon_emission_group_by())
 *             .groupByTags(UsageCarbonEmissionGroupByTagArgs.builder()
 *                 .key(var_.usage_carbon_emission_group_by_tag_key())
 *                 .namespace(var_.usage_carbon_emission_group_by_tag_namespace())
 *                 .value(var_.usage_carbon_emission_group_by_tag_value())
 *                 .build())
 *             .isAggregateByTime(var_.usage_carbon_emission_is_aggregate_by_time())
 *             .usageCarbonEmissionFilter(var_.usage_carbon_emission_usage_carbon_emission_filter())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * UsageCarbonEmissions can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission test_usage_carbon_emission &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission")
public class UsageCarbonEmission extends com.pulumi.resources.CustomResource {
    /**
     * The compartment depth level.
     * 
     */
    @Export(name="compartmentDepth", refs={Integer.class}, tree="[0]")
    private Output<Integer> compartmentDepth;

    /**
     * @return The compartment depth level.
     * 
     */
    public Output<Integer> compartmentDepth() {
        return this.compartmentDepth;
    }
    /**
     * Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
     * 
     */
    @Export(name="groupBies", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> groupBies;

    /**
     * @return Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
     * 
     */
    public Output<List<String>> groupBies() {
        return this.groupBies;
    }
    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    @Export(name="groupByTags", refs={List.class,UsageCarbonEmissionGroupByTag.class}, tree="[0,1]")
    private Output<List<UsageCarbonEmissionGroupByTag>> groupByTags;

    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public Output<List<UsageCarbonEmissionGroupByTag>> groupByTags() {
        return this.groupByTags;
    }
    /**
     * Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
     * 
     */
    @Export(name="isAggregateByTime", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isAggregateByTime;

    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
     * 
     */
    public Output<Boolean> isAggregateByTime() {
        return this.isAggregateByTime;
    }
    /**
     * A list of usage carbon emission items.
     * 
     */
    @Export(name="items", refs={List.class,UsageCarbonEmissionItem.class}, tree="[0,1]")
    private Output<List<UsageCarbonEmissionItem>> items;

    /**
     * @return A list of usage carbon emission items.
     * 
     */
    public Output<List<UsageCarbonEmissionItem>> items() {
        return this.items;
    }
    /**
     * Tenant ID.
     * 
     */
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }
    /**
     * The usage end time.
     * 
     */
    @Export(name="timeUsageEnded", refs={String.class}, tree="[0]")
    private Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Output<String> timeUsageEnded() {
        return this.timeUsageEnded;
    }
    /**
     * The usage start time.
     * 
     */
    @Export(name="timeUsageStarted", refs={String.class}, tree="[0]")
    private Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     */
    public Output<String> timeUsageStarted() {
        return this.timeUsageStarted;
    }
    /**
     * The filter object for query usage.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="usageCarbonEmissionFilter", refs={String.class}, tree="[0]")
    private Output<String> usageCarbonEmissionFilter;

    /**
     * @return The filter object for query usage.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> usageCarbonEmissionFilter() {
        return this.usageCarbonEmissionFilter;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UsageCarbonEmission(String name) {
        this(name, UsageCarbonEmissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UsageCarbonEmission(String name, UsageCarbonEmissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UsageCarbonEmission(String name, UsageCarbonEmissionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission", name, args == null ? UsageCarbonEmissionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UsageCarbonEmission(String name, Output<String> id, @Nullable UsageCarbonEmissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UsageCarbonEmission get(String name, Output<String> id, @Nullable UsageCarbonEmissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UsageCarbonEmission(name, id, state, options);
    }
}
