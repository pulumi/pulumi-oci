// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MeteringComputation.inputs.UsageCarbonEmissionGroupByTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsageCarbonEmissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsageCarbonEmissionArgs Empty = new UsageCarbonEmissionArgs();

    /**
     * The compartment depth level.
     * 
     */
    @Import(name="compartmentDepth")
    private @Nullable Output<Integer> compartmentDepth;

    /**
     * @return The compartment depth level.
     * 
     */
    public Optional<Output<Integer>> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }

    /**
     * Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    @Import(name="groupByTags")
    private @Nullable Output<List<UsageCarbonEmissionGroupByTagArgs>> groupByTags;

    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public Optional<Output<List<UsageCarbonEmissionGroupByTagArgs>>> groupByTags() {
        return Optional.ofNullable(this.groupByTags);
    }

    /**
     * Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
     * 
     */
    @Import(name="isAggregateByTime")
    private @Nullable Output<Boolean> isAggregateByTime;

    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
     * 
     */
    public Optional<Output<Boolean>> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }

    /**
     * Tenant ID.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     * The usage end time.
     * 
     */
    @Import(name="timeUsageEnded", required=true)
    private Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Output<String> timeUsageEnded() {
        return this.timeUsageEnded;
    }

    /**
     * The usage start time.
     * 
     */
    @Import(name="timeUsageStarted", required=true)
    private Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     */
    public Output<String> timeUsageStarted() {
        return this.timeUsageStarted;
    }

    /**
     * The filter object for query usage.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="usageCarbonEmissionFilter")
    private @Nullable Output<String> usageCarbonEmissionFilter;

    /**
     * @return The filter object for query usage.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> usageCarbonEmissionFilter() {
        return Optional.ofNullable(this.usageCarbonEmissionFilter);
    }

    private UsageCarbonEmissionArgs() {}

    private UsageCarbonEmissionArgs(UsageCarbonEmissionArgs $) {
        this.compartmentDepth = $.compartmentDepth;
        this.groupBies = $.groupBies;
        this.groupByTags = $.groupByTags;
        this.isAggregateByTime = $.isAggregateByTime;
        this.tenantId = $.tenantId;
        this.timeUsageEnded = $.timeUsageEnded;
        this.timeUsageStarted = $.timeUsageStarted;
        this.usageCarbonEmissionFilter = $.usageCarbonEmissionFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageCarbonEmissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageCarbonEmissionArgs $;

        public Builder() {
            $ = new UsageCarbonEmissionArgs();
        }

        public Builder(UsageCarbonEmissionArgs defaults) {
            $ = new UsageCarbonEmissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentDepth The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(@Nullable Output<Integer> compartmentDepth) {
            $.compartmentDepth = compartmentDepth;
            return this;
        }

        /**
         * @param compartmentDepth The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(Integer compartmentDepth) {
            return compartmentDepth(Output.of(compartmentDepth));
        }

        /**
         * @param groupBies Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies Aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;resourceName&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;, &#34;subscriptionId&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(@Nullable Output<List<UsageCarbonEmissionGroupByTagArgs>> groupByTags) {
            $.groupByTags = groupByTags;
            return this;
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(List<UsageCarbonEmissionGroupByTagArgs> groupByTags) {
            return groupByTags(Output.of(groupByTags));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(UsageCarbonEmissionGroupByTagArgs... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }

        /**
         * @param isAggregateByTime Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(@Nullable Output<Boolean> isAggregateByTime) {
            $.isAggregateByTime = isAggregateByTime;
            return this;
        }

        /**
         * @param isAggregateByTime Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(Boolean isAggregateByTime) {
            return isAggregateByTime(Output.of(isAggregateByTime));
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(Output<String> timeUsageEnded) {
            $.timeUsageEnded = timeUsageEnded;
            return this;
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(String timeUsageEnded) {
            return timeUsageEnded(Output.of(timeUsageEnded));
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(Output<String> timeUsageStarted) {
            $.timeUsageStarted = timeUsageStarted;
            return this;
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(String timeUsageStarted) {
            return timeUsageStarted(Output.of(timeUsageStarted));
        }

        /**
         * @param usageCarbonEmissionFilter The filter object for query usage.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder usageCarbonEmissionFilter(@Nullable Output<String> usageCarbonEmissionFilter) {
            $.usageCarbonEmissionFilter = usageCarbonEmissionFilter;
            return this;
        }

        /**
         * @param usageCarbonEmissionFilter The filter object for query usage.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder usageCarbonEmissionFilter(String usageCarbonEmissionFilter) {
            return usageCarbonEmissionFilter(Output.of(usageCarbonEmissionFilter));
        }

        public UsageCarbonEmissionArgs build() {
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.timeUsageEnded = Objects.requireNonNull($.timeUsageEnded, "expected parameter 'timeUsageEnded' to be non-null");
            $.timeUsageStarted = Objects.requireNonNull($.timeUsageStarted, "expected parameter 'timeUsageStarted' to be non-null");
            return $;
        }
    }

}
