// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MeteringComputation.inputs.GetSchedulesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchedulesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSchedulesArgs Empty = new GetSchedulesArgs();

    /**
     * The compartment ID in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The compartment ID in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The filter object for query usage.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetSchedulesFilterArgs>> filters;

    /**
     * @return The filter object for query usage.
     * 
     */
    public Optional<Output<List<GetSchedulesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The query parameter for filtering by name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The query parameter for filtering by name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetSchedulesArgs() {}

    private GetSchedulesArgs(GetSchedulesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchedulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchedulesArgs $;

        public Builder() {
            $ = new GetSchedulesArgs();
        }

        public Builder(GetSchedulesArgs defaults) {
            $ = new GetSchedulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment ID in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment ID in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param filters The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetSchedulesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetSchedulesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetSchedulesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The query parameter for filtering by name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The query parameter for filtering by name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetSchedulesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSchedulesArgs", "compartmentId");
            }
            return $;
        }
    }

}
