// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetUsageStatementEmailRecipientsGroupPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsageStatementEmailRecipientsGroupPlainArgs Empty = new GetUsageStatementEmailRecipientsGroupPlainArgs();

    /**
     * The compartment ID in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The compartment ID in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The email recipients group OCID.
     * 
     */
    @Import(name="emailRecipientsGroupId", required=true)
    private String emailRecipientsGroupId;

    /**
     * @return The email recipients group OCID.
     * 
     */
    public String emailRecipientsGroupId() {
        return this.emailRecipientsGroupId;
    }

    /**
     * The usage statement subscription unique OCID.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private String subscriptionId;

    /**
     * @return The usage statement subscription unique OCID.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    private GetUsageStatementEmailRecipientsGroupPlainArgs() {}

    private GetUsageStatementEmailRecipientsGroupPlainArgs(GetUsageStatementEmailRecipientsGroupPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.emailRecipientsGroupId = $.emailRecipientsGroupId;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsageStatementEmailRecipientsGroupPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsageStatementEmailRecipientsGroupPlainArgs $;

        public Builder() {
            $ = new GetUsageStatementEmailRecipientsGroupPlainArgs();
        }

        public Builder(GetUsageStatementEmailRecipientsGroupPlainArgs defaults) {
            $ = new GetUsageStatementEmailRecipientsGroupPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment ID in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param emailRecipientsGroupId The email recipients group OCID.
         * 
         * @return builder
         * 
         */
        public Builder emailRecipientsGroupId(String emailRecipientsGroupId) {
            $.emailRecipientsGroupId = emailRecipientsGroupId;
            return this;
        }

        /**
         * @param subscriptionId The usage statement subscription unique OCID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public GetUsageStatementEmailRecipientsGroupPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetUsageStatementEmailRecipientsGroupPlainArgs", "compartmentId");
            }
            if ($.emailRecipientsGroupId == null) {
                throw new MissingRequiredPropertyException("GetUsageStatementEmailRecipientsGroupPlainArgs", "emailRecipientsGroupId");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("GetUsageStatementEmailRecipientsGroupPlainArgs", "subscriptionId");
            }
            return $;
        }
    }

}
