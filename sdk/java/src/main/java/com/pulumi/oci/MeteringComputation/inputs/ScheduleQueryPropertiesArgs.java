// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MeteringComputation.inputs.ScheduleQueryPropertiesDateRangeArgs;
import com.pulumi.oci.MeteringComputation.inputs.ScheduleQueryPropertiesGroupByTagArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleQueryPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleQueryPropertiesArgs Empty = new ScheduleQueryPropertiesArgs();

    /**
     * The depth level of the compartment.
     * 
     */
    @Import(name="compartmentDepth")
    private @Nullable Output<Double> compartmentDepth;

    /**
     * @return The depth level of the compartment.
     * 
     */
    public Optional<Output<Double>> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }

    /**
     * Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
     * 
     */
    @Import(name="dateRange", required=true)
    private Output<ScheduleQueryPropertiesDateRangeArgs> dateRange;

    /**
     * @return Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
     * 
     */
    public Output<ScheduleQueryPropertiesDateRangeArgs> dateRange() {
        return this.dateRange;
    }

    /**
     * The filter object for query usage.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return The filter object for query usage.
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. Allowed values are: DAILY MONTHLY
     * 
     */
    @Import(name="granularity", required=true)
    private Output<String> granularity;

    /**
     * @return The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. Allowed values are: DAILY MONTHLY
     * 
     */
    public Output<String> granularity() {
        return this.granularity;
    }

    /**
     * Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
     * 
     */
    @Import(name="groupByTags")
    private @Nullable Output<List<ScheduleQueryPropertiesGroupByTagArgs>> groupByTags;

    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
     * 
     */
    public Optional<Output<List<ScheduleQueryPropertiesGroupByTagArgs>>> groupByTags() {
        return Optional.ofNullable(this.groupByTags);
    }

    /**
     * Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    @Import(name="isAggregateByTime")
    private @Nullable Output<Boolean> isAggregateByTime;

    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    public Optional<Output<Boolean>> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }

    /**
     * The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Allowed values are: USAGE COST USAGE_AND_COST
     * 
     */
    @Import(name="queryType")
    private @Nullable Output<String> queryType;

    /**
     * @return The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Allowed values are: USAGE COST USAGE_AND_COST
     * 
     */
    public Optional<Output<String>> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    private ScheduleQueryPropertiesArgs() {}

    private ScheduleQueryPropertiesArgs(ScheduleQueryPropertiesArgs $) {
        this.compartmentDepth = $.compartmentDepth;
        this.dateRange = $.dateRange;
        this.filter = $.filter;
        this.granularity = $.granularity;
        this.groupBies = $.groupBies;
        this.groupByTags = $.groupByTags;
        this.isAggregateByTime = $.isAggregateByTime;
        this.queryType = $.queryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleQueryPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleQueryPropertiesArgs $;

        public Builder() {
            $ = new ScheduleQueryPropertiesArgs();
        }

        public Builder(ScheduleQueryPropertiesArgs defaults) {
            $ = new ScheduleQueryPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentDepth The depth level of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(@Nullable Output<Double> compartmentDepth) {
            $.compartmentDepth = compartmentDepth;
            return this;
        }

        /**
         * @param compartmentDepth The depth level of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(Double compartmentDepth) {
            return compartmentDepth(Output.of(compartmentDepth));
        }

        /**
         * @param dateRange Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
         * 
         * @return builder
         * 
         */
        public Builder dateRange(Output<ScheduleQueryPropertiesDateRangeArgs> dateRange) {
            $.dateRange = dateRange;
            return this;
        }

        /**
         * @param dateRange Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
         * 
         * @return builder
         * 
         */
        public Builder dateRange(ScheduleQueryPropertiesDateRangeArgs dateRange) {
            return dateRange(Output.of(dateRange));
        }

        /**
         * @param filter The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param granularity The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. Allowed values are: DAILY MONTHLY
         * 
         * @return builder
         * 
         */
        public Builder granularity(Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. Allowed values are: DAILY MONTHLY
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param groupBies Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(@Nullable Output<List<ScheduleQueryPropertiesGroupByTagArgs>> groupByTags) {
            $.groupByTags = groupByTags;
            return this;
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(List<ScheduleQueryPropertiesGroupByTagArgs> groupByTags) {
            return groupByTags(Output.of(groupByTags));
        }

        /**
         * @param groupByTags GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(ScheduleQueryPropertiesGroupByTagArgs... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }

        /**
         * @param isAggregateByTime Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(@Nullable Output<Boolean> isAggregateByTime) {
            $.isAggregateByTime = isAggregateByTime;
            return this;
        }

        /**
         * @param isAggregateByTime Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(Boolean isAggregateByTime) {
            return isAggregateByTime(Output.of(isAggregateByTime));
        }

        /**
         * @param queryType The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Allowed values are: USAGE COST USAGE_AND_COST
         * 
         * @return builder
         * 
         */
        public Builder queryType(@Nullable Output<String> queryType) {
            $.queryType = queryType;
            return this;
        }

        /**
         * @param queryType The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Allowed values are: USAGE COST USAGE_AND_COST
         * 
         * @return builder
         * 
         */
        public Builder queryType(String queryType) {
            return queryType(Output.of(queryType));
        }

        public ScheduleQueryPropertiesArgs build() {
            $.dateRange = Objects.requireNonNull($.dateRange, "expected parameter 'dateRange' to be non-null");
            $.granularity = Objects.requireNonNull($.granularity, "expected parameter 'granularity' to be non-null");
            return $;
        }
    }

}
