// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ScheduleResultLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleResultLocationArgs Empty = new ScheduleResultLocationArgs();

    /**
     * The bucket name where usage/cost CSVs will be uploaded
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The bucket name where usage/cost CSVs will be uploaded
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Defines the type of location where the usage/cost CSVs will be stored
     * 
     */
    @Import(name="locationType", required=true)
    private Output<String> locationType;

    /**
     * @return Defines the type of location where the usage/cost CSVs will be stored
     * 
     */
    public Output<String> locationType() {
        return this.locationType;
    }

    /**
     * The namespace needed to determine object storage bucket.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The namespace needed to determine object storage bucket.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The destination Object Store Region specified by customer
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The destination Object Store Region specified by customer
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private ScheduleResultLocationArgs() {}

    private ScheduleResultLocationArgs(ScheduleResultLocationArgs $) {
        this.bucket = $.bucket;
        this.locationType = $.locationType;
        this.namespace = $.namespace;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleResultLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleResultLocationArgs $;

        public Builder() {
            $ = new ScheduleResultLocationArgs();
        }

        public Builder(ScheduleResultLocationArgs defaults) {
            $ = new ScheduleResultLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The bucket name where usage/cost CSVs will be uploaded
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The bucket name where usage/cost CSVs will be uploaded
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param locationType Defines the type of location where the usage/cost CSVs will be stored
         * 
         * @return builder
         * 
         */
        public Builder locationType(Output<String> locationType) {
            $.locationType = locationType;
            return this;
        }

        /**
         * @param locationType Defines the type of location where the usage/cost CSVs will be stored
         * 
         * @return builder
         * 
         */
        public Builder locationType(String locationType) {
            return locationType(Output.of(locationType));
        }

        /**
         * @param namespace The namespace needed to determine object storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace needed to determine object storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param region The destination Object Store Region specified by customer
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The destination Object Store Region specified by customer
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ScheduleResultLocationArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.locationType = Objects.requireNonNull($.locationType, "expected parameter 'locationType' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
