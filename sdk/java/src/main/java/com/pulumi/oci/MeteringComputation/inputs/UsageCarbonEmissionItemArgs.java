// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MeteringComputation.inputs.UsageCarbonEmissionItemTagArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsageCarbonEmissionItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsageCarbonEmissionItemArgs Empty = new UsageCarbonEmissionItemArgs();

    /**
     * The availability domain of the usage.
     * 
     */
    @Import(name="ad")
    private @Nullable Output<String> ad;

    /**
     * @return The availability domain of the usage.
     * 
     */
    public Optional<Output<String>> ad() {
        return Optional.ofNullable(this.ad);
    }

    /**
     * The compartment OCID.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The compartment OCID.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The compartment name.
     * 
     */
    @Import(name="compartmentName")
    private @Nullable Output<String> compartmentName;

    /**
     * @return The compartment name.
     * 
     */
    public Optional<Output<String>> compartmentName() {
        return Optional.ofNullable(this.compartmentName);
    }

    /**
     * The compartment path, starting from root.
     * 
     */
    @Import(name="compartmentPath")
    private @Nullable Output<String> compartmentPath;

    /**
     * @return The compartment path, starting from root.
     * 
     */
    public Optional<Output<String>> compartmentPath() {
        return Optional.ofNullable(this.compartmentPath);
    }

    /**
     * The carbon emission usage in MTCO2 units.
     * 
     */
    @Import(name="computedCarbonEmission")
    private @Nullable Output<Double> computedCarbonEmission;

    /**
     * @return The carbon emission usage in MTCO2 units.
     * 
     */
    public Optional<Output<Double>> computedCarbonEmission() {
        return Optional.ofNullable(this.computedCarbonEmission);
    }

    /**
     * Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
     * 
     */
    @Import(name="emissionCalculationMethod")
    private @Nullable Output<String> emissionCalculationMethod;

    /**
     * @return Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
     * 
     */
    public Optional<Output<String>> emissionCalculationMethod() {
        return Optional.ofNullable(this.emissionCalculationMethod);
    }

    /**
     * Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
     * 
     */
    @Import(name="emissionType")
    private @Nullable Output<String> emissionType;

    /**
     * @return Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
     * 
     */
    public Optional<Output<String>> emissionType() {
        return Optional.ofNullable(this.emissionType);
    }

    /**
     * Platform for the cost.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return Platform for the cost.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The region of the usage.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the usage.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The resource OCID that is incurring the cost.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The resource OCID that is incurring the cost.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The resource name that is incurring the cost.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return The resource name that is incurring the cost.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The service name that is incurring the cost.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The service name that is incurring the cost.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The SKU friendly name.
     * 
     */
    @Import(name="skuName")
    private @Nullable Output<String> skuName;

    /**
     * @return The SKU friendly name.
     * 
     */
    public Optional<Output<String>> skuName() {
        return Optional.ofNullable(this.skuName);
    }

    /**
     * The SKU part number.
     * 
     */
    @Import(name="skuPartNumber")
    private @Nullable Output<String> skuPartNumber;

    /**
     * @return The SKU part number.
     * 
     */
    public Optional<Output<String>> skuPartNumber() {
        return Optional.ofNullable(this.skuPartNumber);
    }

    /**
     * The subscription ID.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The subscription ID.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<UsageCarbonEmissionItemTagArgs>> tags;

    /**
     * @return For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    public Optional<Output<List<UsageCarbonEmissionItemTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The tenancy name.
     * 
     */
    @Import(name="tenantName")
    private @Nullable Output<String> tenantName;

    /**
     * @return The tenancy name.
     * 
     */
    public Optional<Output<String>> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }

    /**
     * The usage end time.
     * 
     */
    @Import(name="timeUsageEnded")
    private @Nullable Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Optional<Output<String>> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }

    /**
     * The usage start time.
     * 
     */
    @Import(name="timeUsageStarted")
    private @Nullable Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     */
    public Optional<Output<String>> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }

    private UsageCarbonEmissionItemArgs() {}

    private UsageCarbonEmissionItemArgs(UsageCarbonEmissionItemArgs $) {
        this.ad = $.ad;
        this.compartmentId = $.compartmentId;
        this.compartmentName = $.compartmentName;
        this.compartmentPath = $.compartmentPath;
        this.computedCarbonEmission = $.computedCarbonEmission;
        this.emissionCalculationMethod = $.emissionCalculationMethod;
        this.emissionType = $.emissionType;
        this.platform = $.platform;
        this.region = $.region;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.service = $.service;
        this.skuName = $.skuName;
        this.skuPartNumber = $.skuPartNumber;
        this.subscriptionId = $.subscriptionId;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
        this.tenantName = $.tenantName;
        this.timeUsageEnded = $.timeUsageEnded;
        this.timeUsageStarted = $.timeUsageStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageCarbonEmissionItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageCarbonEmissionItemArgs $;

        public Builder() {
            $ = new UsageCarbonEmissionItemArgs();
        }

        public Builder(UsageCarbonEmissionItemArgs defaults) {
            $ = new UsageCarbonEmissionItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ad The availability domain of the usage.
         * 
         * @return builder
         * 
         */
        public Builder ad(@Nullable Output<String> ad) {
            $.ad = ad;
            return this;
        }

        /**
         * @param ad The availability domain of the usage.
         * 
         * @return builder
         * 
         */
        public Builder ad(String ad) {
            return ad(Output.of(ad));
        }

        /**
         * @param compartmentId The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentName The compartment name.
         * 
         * @return builder
         * 
         */
        public Builder compartmentName(@Nullable Output<String> compartmentName) {
            $.compartmentName = compartmentName;
            return this;
        }

        /**
         * @param compartmentName The compartment name.
         * 
         * @return builder
         * 
         */
        public Builder compartmentName(String compartmentName) {
            return compartmentName(Output.of(compartmentName));
        }

        /**
         * @param compartmentPath The compartment path, starting from root.
         * 
         * @return builder
         * 
         */
        public Builder compartmentPath(@Nullable Output<String> compartmentPath) {
            $.compartmentPath = compartmentPath;
            return this;
        }

        /**
         * @param compartmentPath The compartment path, starting from root.
         * 
         * @return builder
         * 
         */
        public Builder compartmentPath(String compartmentPath) {
            return compartmentPath(Output.of(compartmentPath));
        }

        /**
         * @param computedCarbonEmission The carbon emission usage in MTCO2 units.
         * 
         * @return builder
         * 
         */
        public Builder computedCarbonEmission(@Nullable Output<Double> computedCarbonEmission) {
            $.computedCarbonEmission = computedCarbonEmission;
            return this;
        }

        /**
         * @param computedCarbonEmission The carbon emission usage in MTCO2 units.
         * 
         * @return builder
         * 
         */
        public Builder computedCarbonEmission(Double computedCarbonEmission) {
            return computedCarbonEmission(Output.of(computedCarbonEmission));
        }

        /**
         * @param emissionCalculationMethod Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
         * 
         * @return builder
         * 
         */
        public Builder emissionCalculationMethod(@Nullable Output<String> emissionCalculationMethod) {
            $.emissionCalculationMethod = emissionCalculationMethod;
            return this;
        }

        /**
         * @param emissionCalculationMethod Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
         * 
         * @return builder
         * 
         */
        public Builder emissionCalculationMethod(String emissionCalculationMethod) {
            return emissionCalculationMethod(Output.of(emissionCalculationMethod));
        }

        /**
         * @param emissionType Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(@Nullable Output<String> emissionType) {
            $.emissionType = emissionType;
            return this;
        }

        /**
         * @param emissionType Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(String emissionType) {
            return emissionType(Output.of(emissionType));
        }

        /**
         * @param platform Platform for the cost.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform Platform for the cost.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param region The region of the usage.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the usage.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceId The resource OCID that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource OCID that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceName The resource name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The resource name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param service The service name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param skuName The SKU friendly name.
         * 
         * @return builder
         * 
         */
        public Builder skuName(@Nullable Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName The SKU friendly name.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param skuPartNumber The SKU part number.
         * 
         * @return builder
         * 
         */
        public Builder skuPartNumber(@Nullable Output<String> skuPartNumber) {
            $.skuPartNumber = skuPartNumber;
            return this;
        }

        /**
         * @param skuPartNumber The SKU part number.
         * 
         * @return builder
         * 
         */
        public Builder skuPartNumber(String skuPartNumber) {
            return skuPartNumber(Output.of(skuPartNumber));
        }

        /**
         * @param subscriptionId The subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<UsageCarbonEmissionItemTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<UsageCarbonEmissionItemTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(UsageCarbonEmissionItemTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param tenantName The tenancy name.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(@Nullable Output<String> tenantName) {
            $.tenantName = tenantName;
            return this;
        }

        /**
         * @param tenantName The tenancy name.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(String tenantName) {
            return tenantName(Output.of(tenantName));
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(@Nullable Output<String> timeUsageEnded) {
            $.timeUsageEnded = timeUsageEnded;
            return this;
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(String timeUsageEnded) {
            return timeUsageEnded(Output.of(timeUsageEnded));
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(@Nullable Output<String> timeUsageStarted) {
            $.timeUsageStarted = timeUsageStarted;
            return this;
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(String timeUsageStarted) {
            return timeUsageStarted(Output.of(timeUsageStarted));
        }

        public UsageCarbonEmissionItemArgs build() {
            return $;
        }
    }

}
