// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MeteringComputation.inputs.UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs Empty = new UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs();

    /**
     * (Updatable) The compartment depth level.
     * 
     */
    @Import(name="compartmentDepth")
    private @Nullable Output<Integer> compartmentDepth;

    /**
     * @return (Updatable) The compartment depth level.
     * 
     */
    public Optional<Output<Integer>> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }

    /**
     * (Updatable) The user interface date range, for example, LAST_THREE_MONTHS. Overrides the timeUsageStarted and timeUsageEnded properties.
     * 
     */
    @Import(name="dateRangeName")
    private @Nullable Output<String> dateRangeName;

    /**
     * @return (Updatable) The user interface date range, for example, LAST_THREE_MONTHS. Overrides the timeUsageStarted and timeUsageEnded properties.
     * 
     */
    public Optional<Output<String>> dateRangeName() {
        return Optional.ofNullable(this.dateRangeName);
    }

    /**
     * (Updatable) Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
     * 
     */
    @Import(name="emissionCalculationMethod")
    private @Nullable Output<String> emissionCalculationMethod;

    /**
     * @return (Updatable) Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
     * 
     */
    public Optional<Output<String>> emissionCalculationMethod() {
        return Optional.ofNullable(this.emissionCalculationMethod);
    }

    /**
     * (Updatable) Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
     * 
     */
    @Import(name="emissionType")
    private @Nullable Output<String> emissionType;

    /**
     * @return (Updatable) Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
     * 
     */
    public Optional<Output<String>> emissionType() {
        return Optional.ofNullable(this.emissionType);
    }

    /**
     * (Updatable) The carbon emission granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.
     * 
     */
    @Import(name="granularity")
    private @Nullable Output<String> granularity;

    /**
     * @return (Updatable) The carbon emission granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.
     * 
     */
    public Optional<Output<String>> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    /**
     * (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    @Import(name="groupByTags")
    private @Nullable Output<List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs>> groupByTags;

    /**
     * @return (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public Optional<Output<List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs>>> groupByTags() {
        return Optional.ofNullable(this.groupByTags);
    }

    /**
     * (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or costs over the query time period are summed.
     * 
     */
    @Import(name="isAggregateByTime")
    private @Nullable Output<Boolean> isAggregateByTime;

    /**
     * @return (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or costs over the query time period are summed.
     * 
     */
    public Optional<Output<Boolean>> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }

    /**
     * (Updatable) Tenant ID.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return (Updatable) Tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     * (Updatable) The usage end time.
     * 
     */
    @Import(name="timeUsageEnded")
    private @Nullable Output<String> timeUsageEnded;

    /**
     * @return (Updatable) The usage end time.
     * 
     */
    public Optional<Output<String>> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }

    /**
     * (Updatable) The usage start time.
     * 
     */
    @Import(name="timeUsageStarted")
    private @Nullable Output<String> timeUsageStarted;

    /**
     * @return (Updatable) The usage start time.
     * 
     */
    public Optional<Output<String>> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }

    /**
     * (Updatable) The filter object for query usage.
     * 
     */
    @Import(name="usageCarbonEmissionsQueryFilter")
    private @Nullable Output<String> usageCarbonEmissionsQueryFilter;

    /**
     * @return (Updatable) The filter object for query usage.
     * 
     */
    public Optional<Output<String>> usageCarbonEmissionsQueryFilter() {
        return Optional.ofNullable(this.usageCarbonEmissionsQueryFilter);
    }

    private UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs() {}

    private UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs(UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs $) {
        this.compartmentDepth = $.compartmentDepth;
        this.dateRangeName = $.dateRangeName;
        this.emissionCalculationMethod = $.emissionCalculationMethod;
        this.emissionType = $.emissionType;
        this.granularity = $.granularity;
        this.groupBies = $.groupBies;
        this.groupByTags = $.groupByTags;
        this.isAggregateByTime = $.isAggregateByTime;
        this.tenantId = $.tenantId;
        this.timeUsageEnded = $.timeUsageEnded;
        this.timeUsageStarted = $.timeUsageStarted;
        this.usageCarbonEmissionsQueryFilter = $.usageCarbonEmissionsQueryFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs $;

        public Builder() {
            $ = new UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs();
        }

        public Builder(UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs defaults) {
            $ = new UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentDepth (Updatable) The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(@Nullable Output<Integer> compartmentDepth) {
            $.compartmentDepth = compartmentDepth;
            return this;
        }

        /**
         * @param compartmentDepth (Updatable) The compartment depth level.
         * 
         * @return builder
         * 
         */
        public Builder compartmentDepth(Integer compartmentDepth) {
            return compartmentDepth(Output.of(compartmentDepth));
        }

        /**
         * @param dateRangeName (Updatable) The user interface date range, for example, LAST_THREE_MONTHS. Overrides the timeUsageStarted and timeUsageEnded properties.
         * 
         * @return builder
         * 
         */
        public Builder dateRangeName(@Nullable Output<String> dateRangeName) {
            $.dateRangeName = dateRangeName;
            return this;
        }

        /**
         * @param dateRangeName (Updatable) The user interface date range, for example, LAST_THREE_MONTHS. Overrides the timeUsageStarted and timeUsageEnded properties.
         * 
         * @return builder
         * 
         */
        public Builder dateRangeName(String dateRangeName) {
            return dateRangeName(Output.of(dateRangeName));
        }

        /**
         * @param emissionCalculationMethod (Updatable) Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
         * 
         * @return builder
         * 
         */
        public Builder emissionCalculationMethod(@Nullable Output<String> emissionCalculationMethod) {
            $.emissionCalculationMethod = emissionCalculationMethod;
            return this;
        }

        /**
         * @param emissionCalculationMethod (Updatable) Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
         * 
         * @return builder
         * 
         */
        public Builder emissionCalculationMethod(String emissionCalculationMethod) {
            return emissionCalculationMethod(Output.of(emissionCalculationMethod));
        }

        /**
         * @param emissionType (Updatable) Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(@Nullable Output<String> emissionType) {
            $.emissionType = emissionType;
            return this;
        }

        /**
         * @param emissionType (Updatable) Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(String emissionType) {
            return emissionType(Output.of(emissionType));
        }

        /**
         * @param granularity (Updatable) The carbon emission granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.
         * 
         * @return builder
         * 
         */
        public Builder granularity(@Nullable Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        /**
         * @param granularity (Updatable) The carbon emission granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.
         * 
         * @return builder
         * 
         */
        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        /**
         * @param groupBies (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param groupByTags (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(@Nullable Output<List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs>> groupByTags) {
            $.groupByTags = groupByTags;
            return this;
        }

        /**
         * @param groupByTags (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs> groupByTags) {
            return groupByTags(Output.of(groupByTags));
        }

        /**
         * @param groupByTags (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder groupByTags(UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }

        /**
         * @param isAggregateByTime (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or costs over the query time period are summed.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(@Nullable Output<Boolean> isAggregateByTime) {
            $.isAggregateByTime = isAggregateByTime;
            return this;
        }

        /**
         * @param isAggregateByTime (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or costs over the query time period are summed.
         * 
         * @return builder
         * 
         */
        public Builder isAggregateByTime(Boolean isAggregateByTime) {
            return isAggregateByTime(Output.of(isAggregateByTime));
        }

        /**
         * @param tenantId (Updatable) Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId (Updatable) Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param timeUsageEnded (Updatable) The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(@Nullable Output<String> timeUsageEnded) {
            $.timeUsageEnded = timeUsageEnded;
            return this;
        }

        /**
         * @param timeUsageEnded (Updatable) The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(String timeUsageEnded) {
            return timeUsageEnded(Output.of(timeUsageEnded));
        }

        /**
         * @param timeUsageStarted (Updatable) The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(@Nullable Output<String> timeUsageStarted) {
            $.timeUsageStarted = timeUsageStarted;
            return this;
        }

        /**
         * @param timeUsageStarted (Updatable) The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(String timeUsageStarted) {
            return timeUsageStarted(Output.of(timeUsageStarted));
        }

        /**
         * @param usageCarbonEmissionsQueryFilter (Updatable) The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder usageCarbonEmissionsQueryFilter(@Nullable Output<String> usageCarbonEmissionsQueryFilter) {
            $.usageCarbonEmissionsQueryFilter = usageCarbonEmissionsQueryFilter;
            return this;
        }

        /**
         * @param usageCarbonEmissionsQueryFilter (Updatable) The filter object for query usage.
         * 
         * @return builder
         * 
         */
        public Builder usageCarbonEmissionsQueryFilter(String usageCarbonEmissionsQueryFilter) {
            return usageCarbonEmissionsQueryFilter(Output.of(usageCarbonEmissionsQueryFilter));
        }

        public UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs build() {
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs", "tenantId");
            }
            return $;
        }
    }

}
