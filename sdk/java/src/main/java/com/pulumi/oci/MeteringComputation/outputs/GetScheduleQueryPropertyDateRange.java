// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetScheduleQueryPropertyDateRange {
    /**
     * @return Defines whether the schedule date range is STATIC or DYNAMIC.
     * 
     */
    private String dateRangeType;
    private String dynamicDateRangeType;
    /**
     * @return The usage end time.
     * 
     */
    private String timeUsageEnded;
    /**
     * @return The usage start time.
     * 
     */
    private String timeUsageStarted;

    private GetScheduleQueryPropertyDateRange() {}
    /**
     * @return Defines whether the schedule date range is STATIC or DYNAMIC.
     * 
     */
    public String dateRangeType() {
        return this.dateRangeType;
    }
    public String dynamicDateRangeType() {
        return this.dynamicDateRangeType;
    }
    /**
     * @return The usage end time.
     * 
     */
    public String timeUsageEnded() {
        return this.timeUsageEnded;
    }
    /**
     * @return The usage start time.
     * 
     */
    public String timeUsageStarted() {
        return this.timeUsageStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduleQueryPropertyDateRange defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dateRangeType;
        private String dynamicDateRangeType;
        private String timeUsageEnded;
        private String timeUsageStarted;
        public Builder() {}
        public Builder(GetScheduleQueryPropertyDateRange defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dateRangeType = defaults.dateRangeType;
    	      this.dynamicDateRangeType = defaults.dynamicDateRangeType;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
        }

        @CustomType.Setter
        public Builder dateRangeType(String dateRangeType) {
            if (dateRangeType == null) {
              throw new MissingRequiredPropertyException("GetScheduleQueryPropertyDateRange", "dateRangeType");
            }
            this.dateRangeType = dateRangeType;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicDateRangeType(String dynamicDateRangeType) {
            if (dynamicDateRangeType == null) {
              throw new MissingRequiredPropertyException("GetScheduleQueryPropertyDateRange", "dynamicDateRangeType");
            }
            this.dynamicDateRangeType = dynamicDateRangeType;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(String timeUsageEnded) {
            if (timeUsageEnded == null) {
              throw new MissingRequiredPropertyException("GetScheduleQueryPropertyDateRange", "timeUsageEnded");
            }
            this.timeUsageEnded = timeUsageEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(String timeUsageStarted) {
            if (timeUsageStarted == null) {
              throw new MissingRequiredPropertyException("GetScheduleQueryPropertyDateRange", "timeUsageStarted");
            }
            this.timeUsageStarted = timeUsageStarted;
            return this;
        }
        public GetScheduleQueryPropertyDateRange build() {
            final var _resultValue = new GetScheduleQueryPropertyDateRange();
            _resultValue.dateRangeType = dateRangeType;
            _resultValue.dynamicDateRangeType = dynamicDateRangeType;
            _resultValue.timeUsageEnded = timeUsageEnded;
            _resultValue.timeUsageStarted = timeUsageStarted;
            return _resultValue;
        }
    }
}
