// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.MeteringComputation.outputs.GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery {
    /**
     * @return The compartment depth level.
     * 
     */
    private Integer compartmentDepth;
    /**
     * @return The UI date range, for example, LAST_THREE_MONTHS. It will override timeUsageStarted and timeUsageEnded properties.
     * 
     */
    private String dateRangeName;
    /**
     * @return Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    private List<String> groupBies;
    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    private List<GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags;
    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    private Boolean isAggregateByTime;
    /**
     * @return Tenant ID.
     * 
     */
    private String tenantId;
    /**
     * @return The usage end time.
     * 
     */
    private String timeUsageEnded;
    /**
     * @return The usage start time.
     * 
     */
    private String timeUsageStarted;
    /**
     * @return The filter object for query usage.
     * 
     */
    private String usageCarbonEmissionsQueryFilter;

    private GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery() {}
    /**
     * @return The compartment depth level.
     * 
     */
    public Integer compartmentDepth() {
        return this.compartmentDepth;
    }
    /**
     * @return The UI date range, for example, LAST_THREE_MONTHS. It will override timeUsageStarted and timeUsageEnded properties.
     * 
     */
    public String dateRangeName() {
        return this.dateRangeName;
    }
    /**
     * @return Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    public List<String> groupBies() {
        return this.groupBies;
    }
    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public List<GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags() {
        return this.groupByTags;
    }
    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    public Boolean isAggregateByTime() {
        return this.isAggregateByTime;
    }
    /**
     * @return Tenant ID.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The usage end time.
     * 
     */
    public String timeUsageEnded() {
        return this.timeUsageEnded;
    }
    /**
     * @return The usage start time.
     * 
     */
    public String timeUsageStarted() {
        return this.timeUsageStarted;
    }
    /**
     * @return The filter object for query usage.
     * 
     */
    public String usageCarbonEmissionsQueryFilter() {
        return this.usageCarbonEmissionsQueryFilter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer compartmentDepth;
        private String dateRangeName;
        private List<String> groupBies;
        private List<GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags;
        private Boolean isAggregateByTime;
        private String tenantId;
        private String timeUsageEnded;
        private String timeUsageStarted;
        private String usageCarbonEmissionsQueryFilter;
        public Builder() {}
        public Builder(GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentDepth = defaults.compartmentDepth;
    	      this.dateRangeName = defaults.dateRangeName;
    	      this.groupBies = defaults.groupBies;
    	      this.groupByTags = defaults.groupByTags;
    	      this.isAggregateByTime = defaults.isAggregateByTime;
    	      this.tenantId = defaults.tenantId;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
    	      this.usageCarbonEmissionsQueryFilter = defaults.usageCarbonEmissionsQueryFilter;
        }

        @CustomType.Setter
        public Builder compartmentDepth(Integer compartmentDepth) {
            this.compartmentDepth = Objects.requireNonNull(compartmentDepth);
            return this;
        }
        @CustomType.Setter
        public Builder dateRangeName(String dateRangeName) {
            this.dateRangeName = Objects.requireNonNull(dateRangeName);
            return this;
        }
        @CustomType.Setter
        public Builder groupBies(List<String> groupBies) {
            this.groupBies = Objects.requireNonNull(groupBies);
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder groupByTags(List<GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags) {
            this.groupByTags = Objects.requireNonNull(groupByTags);
            return this;
        }
        public Builder groupByTags(GetUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }
        @CustomType.Setter
        public Builder isAggregateByTime(Boolean isAggregateByTime) {
            this.isAggregateByTime = Objects.requireNonNull(isAggregateByTime);
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(String timeUsageEnded) {
            this.timeUsageEnded = Objects.requireNonNull(timeUsageEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(String timeUsageStarted) {
            this.timeUsageStarted = Objects.requireNonNull(timeUsageStarted);
            return this;
        }
        @CustomType.Setter
        public Builder usageCarbonEmissionsQueryFilter(String usageCarbonEmissionsQueryFilter) {
            this.usageCarbonEmissionsQueryFilter = Objects.requireNonNull(usageCarbonEmissionsQueryFilter);
            return this;
        }
        public GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery build() {
            final var _resultValue = new GetUsageCarbonEmissionsQueryQueryDefinitionReportQuery();
            _resultValue.compartmentDepth = compartmentDepth;
            _resultValue.dateRangeName = dateRangeName;
            _resultValue.groupBies = groupBies;
            _resultValue.groupByTags = groupByTags;
            _resultValue.isAggregateByTime = isAggregateByTime;
            _resultValue.tenantId = tenantId;
            _resultValue.timeUsageEnded = timeUsageEnded;
            _resultValue.timeUsageStarted = timeUsageStarted;
            _resultValue.usageCarbonEmissionsQueryFilter = usageCarbonEmissionsQueryFilter;
            return _resultValue;
        }
    }
}
