// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.MeteringComputation.outputs.ScheduleQueryPropertiesDateRange;
import com.pulumi.oci.MeteringComputation.outputs.ScheduleQueryPropertiesGroupByTag;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ScheduleQueryProperties {
    /**
     * @return The depth level of the compartment.
     * 
     */
    private final @Nullable Double compartmentDepth;
    /**
     * @return Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
     * 
     */
    private final ScheduleQueryPropertiesDateRange dateRange;
    /**
     * @return The filter object for query usage.
     * 
     */
    private final @Nullable String filter;
    /**
     * @return The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.   Allowed values are: DAILY MONTHLY
     * 
     */
    private final String granularity;
    /**
     * @return Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
     * 
     */
    private final @Nullable List<String> groupBies;
    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
     * 
     */
    private final @Nullable List<ScheduleQueryPropertiesGroupByTag> groupByTags;
    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    private final @Nullable Boolean isAggregateByTime;
    /**
     * @return The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data.  Allowed values are: USAGE COST USAGE_AND_COST
     * 
     */
    private final @Nullable String queryType;

    @CustomType.Constructor
    private ScheduleQueryProperties(
        @CustomType.Parameter("compartmentDepth") @Nullable Double compartmentDepth,
        @CustomType.Parameter("dateRange") ScheduleQueryPropertiesDateRange dateRange,
        @CustomType.Parameter("filter") @Nullable String filter,
        @CustomType.Parameter("granularity") String granularity,
        @CustomType.Parameter("groupBies") @Nullable List<String> groupBies,
        @CustomType.Parameter("groupByTags") @Nullable List<ScheduleQueryPropertiesGroupByTag> groupByTags,
        @CustomType.Parameter("isAggregateByTime") @Nullable Boolean isAggregateByTime,
        @CustomType.Parameter("queryType") @Nullable String queryType) {
        this.compartmentDepth = compartmentDepth;
        this.dateRange = dateRange;
        this.filter = filter;
        this.granularity = granularity;
        this.groupBies = groupBies;
        this.groupByTags = groupByTags;
        this.isAggregateByTime = isAggregateByTime;
        this.queryType = queryType;
    }

    /**
     * @return The depth level of the compartment.
     * 
     */
    public Optional<Double> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }
    /**
     * @return Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
     * 
     */
    public ScheduleQueryPropertiesDateRange dateRange() {
        return this.dateRange;
    }
    /**
     * @return The filter object for query usage.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.   Allowed values are: DAILY MONTHLY
     * 
     */
    public String granularity() {
        return this.granularity;
    }
    /**
     * @return Aggregate the result by. For example: [ &#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34; ]
     * 
     */
    public List<String> groupBies() {
        return this.groupBies == null ? List.of() : this.groupBies;
    }
    /**
     * @return GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { &#34;namespace&#34;: &#34;oracle&#34;, &#34;key&#34;: &#34;createdBy&#34; ]
     * 
     */
    public List<ScheduleQueryPropertiesGroupByTag> groupByTags() {
        return this.groupByTags == null ? List.of() : this.groupByTags;
    }
    /**
     * @return Specifies whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
     * 
     */
    public Optional<Boolean> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }
    /**
     * @return The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data.  Allowed values are: USAGE COST USAGE_AND_COST
     * 
     */
    public Optional<String> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleQueryProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double compartmentDepth;
        private ScheduleQueryPropertiesDateRange dateRange;
        private @Nullable String filter;
        private String granularity;
        private @Nullable List<String> groupBies;
        private @Nullable List<ScheduleQueryPropertiesGroupByTag> groupByTags;
        private @Nullable Boolean isAggregateByTime;
        private @Nullable String queryType;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleQueryProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentDepth = defaults.compartmentDepth;
    	      this.dateRange = defaults.dateRange;
    	      this.filter = defaults.filter;
    	      this.granularity = defaults.granularity;
    	      this.groupBies = defaults.groupBies;
    	      this.groupByTags = defaults.groupByTags;
    	      this.isAggregateByTime = defaults.isAggregateByTime;
    	      this.queryType = defaults.queryType;
        }

        public Builder compartmentDepth(@Nullable Double compartmentDepth) {
            this.compartmentDepth = compartmentDepth;
            return this;
        }
        public Builder dateRange(ScheduleQueryPropertiesDateRange dateRange) {
            this.dateRange = Objects.requireNonNull(dateRange);
            return this;
        }
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        public Builder granularity(String granularity) {
            this.granularity = Objects.requireNonNull(granularity);
            return this;
        }
        public Builder groupBies(@Nullable List<String> groupBies) {
            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        public Builder groupByTags(@Nullable List<ScheduleQueryPropertiesGroupByTag> groupByTags) {
            this.groupByTags = groupByTags;
            return this;
        }
        public Builder groupByTags(ScheduleQueryPropertiesGroupByTag... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }
        public Builder isAggregateByTime(@Nullable Boolean isAggregateByTime) {
            this.isAggregateByTime = isAggregateByTime;
            return this;
        }
        public Builder queryType(@Nullable String queryType) {
            this.queryType = queryType;
            return this;
        }        public ScheduleQueryProperties build() {
            return new ScheduleQueryProperties(compartmentDepth, dateRange, filter, granularity, groupBies, groupByTags, isAggregateByTime, queryType);
        }
    }
}
