// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.MeteringComputation.outputs.UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UsageCarbonEmissionsQueryQueryDefinitionReportQuery {
    /**
     * @return (Updatable) The compartment depth level.
     * 
     */
    private @Nullable Integer compartmentDepth;
    /**
     * @return (Updatable) The UI date range, for example, LAST_THREE_MONTHS. It will override timeUsageStarted and timeUsageEnded properties.
     * 
     */
    private @Nullable String dateRangeName;
    /**
     * @return (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    private @Nullable List<String> groupBies;
    /**
     * @return (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    private @Nullable List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags;
    /**
     * @return (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    private @Nullable Boolean isAggregateByTime;
    /**
     * @return (Updatable) Tenant ID.
     * 
     */
    private String tenantId;
    /**
     * @return (Updatable) The usage end time.
     * 
     */
    private @Nullable String timeUsageEnded;
    /**
     * @return (Updatable) The usage start time.
     * 
     */
    private @Nullable String timeUsageStarted;
    /**
     * @return (Updatable) The filter object for query usage.
     * 
     */
    private @Nullable String usageCarbonEmissionsQueryFilter;

    private UsageCarbonEmissionsQueryQueryDefinitionReportQuery() {}
    /**
     * @return (Updatable) The compartment depth level.
     * 
     */
    public Optional<Integer> compartmentDepth() {
        return Optional.ofNullable(this.compartmentDepth);
    }
    /**
     * @return (Updatable) The UI date range, for example, LAST_THREE_MONTHS. It will override timeUsageStarted and timeUsageEnded properties.
     * 
     */
    public Optional<String> dateRangeName() {
        return Optional.ofNullable(this.dateRangeName);
    }
    /**
     * @return (Updatable) Specifies what to aggregate the result by. For example: `[&#34;tagNamespace&#34;, &#34;tagKey&#34;, &#34;tagValue&#34;, &#34;service&#34;, &#34;skuName&#34;, &#34;skuPartNumber&#34;, &#34;unit&#34;, &#34;compartmentName&#34;, &#34;compartmentPath&#34;, &#34;compartmentId&#34;, &#34;platform&#34;, &#34;region&#34;, &#34;logicalAd&#34;, &#34;resourceId&#34;, &#34;tenantId&#34;, &#34;tenantName&#34;]`
     * 
     */
    public List<String> groupBies() {
        return this.groupBies == null ? List.of() : this.groupBies;
    }
    /**
     * @return (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{&#34;namespace&#34;:&#34;oracle&#34;, &#34;key&#34;:&#34;createdBy&#34;]`
     * 
     */
    public List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags() {
        return this.groupByTags == null ? List.of() : this.groupByTags;
    }
    /**
     * @return (Updatable) Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     * 
     */
    public Optional<Boolean> isAggregateByTime() {
        return Optional.ofNullable(this.isAggregateByTime);
    }
    /**
     * @return (Updatable) Tenant ID.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return (Updatable) The usage end time.
     * 
     */
    public Optional<String> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }
    /**
     * @return (Updatable) The usage start time.
     * 
     */
    public Optional<String> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }
    /**
     * @return (Updatable) The filter object for query usage.
     * 
     */
    public Optional<String> usageCarbonEmissionsQueryFilter() {
        return Optional.ofNullable(this.usageCarbonEmissionsQueryFilter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsageCarbonEmissionsQueryQueryDefinitionReportQuery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer compartmentDepth;
        private @Nullable String dateRangeName;
        private @Nullable List<String> groupBies;
        private @Nullable List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags;
        private @Nullable Boolean isAggregateByTime;
        private String tenantId;
        private @Nullable String timeUsageEnded;
        private @Nullable String timeUsageStarted;
        private @Nullable String usageCarbonEmissionsQueryFilter;
        public Builder() {}
        public Builder(UsageCarbonEmissionsQueryQueryDefinitionReportQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentDepth = defaults.compartmentDepth;
    	      this.dateRangeName = defaults.dateRangeName;
    	      this.groupBies = defaults.groupBies;
    	      this.groupByTags = defaults.groupByTags;
    	      this.isAggregateByTime = defaults.isAggregateByTime;
    	      this.tenantId = defaults.tenantId;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
    	      this.usageCarbonEmissionsQueryFilter = defaults.usageCarbonEmissionsQueryFilter;
        }

        @CustomType.Setter
        public Builder compartmentDepth(@Nullable Integer compartmentDepth) {

            this.compartmentDepth = compartmentDepth;
            return this;
        }
        @CustomType.Setter
        public Builder dateRangeName(@Nullable String dateRangeName) {

            this.dateRangeName = dateRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder groupBies(@Nullable List<String> groupBies) {

            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder groupByTags(@Nullable List<UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag> groupByTags) {

            this.groupByTags = groupByTags;
            return this;
        }
        public Builder groupByTags(UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag... groupByTags) {
            return groupByTags(List.of(groupByTags));
        }
        @CustomType.Setter
        public Builder isAggregateByTime(@Nullable Boolean isAggregateByTime) {

            this.isAggregateByTime = isAggregateByTime;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("UsageCarbonEmissionsQueryQueryDefinitionReportQuery", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(@Nullable String timeUsageEnded) {

            this.timeUsageEnded = timeUsageEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(@Nullable String timeUsageStarted) {

            this.timeUsageStarted = timeUsageStarted;
            return this;
        }
        @CustomType.Setter
        public Builder usageCarbonEmissionsQueryFilter(@Nullable String usageCarbonEmissionsQueryFilter) {

            this.usageCarbonEmissionsQueryFilter = usageCarbonEmissionsQueryFilter;
            return this;
        }
        public UsageCarbonEmissionsQueryQueryDefinitionReportQuery build() {
            final var _resultValue = new UsageCarbonEmissionsQueryQueryDefinitionReportQuery();
            _resultValue.compartmentDepth = compartmentDepth;
            _resultValue.dateRangeName = dateRangeName;
            _resultValue.groupBies = groupBies;
            _resultValue.groupByTags = groupByTags;
            _resultValue.isAggregateByTime = isAggregateByTime;
            _resultValue.tenantId = tenantId;
            _resultValue.timeUsageEnded = timeUsageEnded;
            _resultValue.timeUsageStarted = timeUsageStarted;
            _resultValue.usageCarbonEmissionsQueryFilter = usageCarbonEmissionsQueryFilter;
            return _resultValue;
        }
    }
}
