// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UsageForecast {
    /**
     * @return BASIC uses the exponential smoothing (ETS) model to project future usage/costs based on history data. The basis for projections is a periodic set of equivalent historical days for which the projection is being made.
     * 
     */
    private @Nullable String forecastType;
    /**
     * @return The forecast end time.
     * 
     */
    private String timeForecastEnded;
    /**
     * @return The forecast start time. Defaults to UTC-1 if not specified.
     * 
     */
    private @Nullable String timeForecastStarted;

    private UsageForecast() {}
    /**
     * @return BASIC uses the exponential smoothing (ETS) model to project future usage/costs based on history data. The basis for projections is a periodic set of equivalent historical days for which the projection is being made.
     * 
     */
    public Optional<String> forecastType() {
        return Optional.ofNullable(this.forecastType);
    }
    /**
     * @return The forecast end time.
     * 
     */
    public String timeForecastEnded() {
        return this.timeForecastEnded;
    }
    /**
     * @return The forecast start time. Defaults to UTC-1 if not specified.
     * 
     */
    public Optional<String> timeForecastStarted() {
        return Optional.ofNullable(this.timeForecastStarted);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsageForecast defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String forecastType;
        private String timeForecastEnded;
        private @Nullable String timeForecastStarted;
        public Builder() {}
        public Builder(UsageForecast defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forecastType = defaults.forecastType;
    	      this.timeForecastEnded = defaults.timeForecastEnded;
    	      this.timeForecastStarted = defaults.timeForecastStarted;
        }

        @CustomType.Setter
        public Builder forecastType(@Nullable String forecastType) {

            this.forecastType = forecastType;
            return this;
        }
        @CustomType.Setter
        public Builder timeForecastEnded(String timeForecastEnded) {
            if (timeForecastEnded == null) {
              throw new MissingRequiredPropertyException("UsageForecast", "timeForecastEnded");
            }
            this.timeForecastEnded = timeForecastEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeForecastStarted(@Nullable String timeForecastStarted) {

            this.timeForecastStarted = timeForecastStarted;
            return this;
        }
        public UsageForecast build() {
            final var _resultValue = new UsageForecast();
            _resultValue.forecastType = forecastType;
            _resultValue.timeForecastEnded = timeForecastEnded;
            _resultValue.timeForecastStarted = timeForecastStarted;
            return _resultValue;
        }
    }
}
