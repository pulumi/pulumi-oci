// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.MeteringComputation.outputs.UsageItemTag;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UsageItem {
    /**
     * @return The availability domain of the usage.
     * 
     */
    private @Nullable String ad;
    /**
     * @return The attributed cost with a max value of 9999999999.999999999999 and a minimum value of 0.
     * 
     */
    private @Nullable String attributedCost;
    /**
     * @return The attributed usage with a max value of 9999999999.999999999999 and a minimum value of 0.
     * 
     */
    private @Nullable String attributedUsage;
    /**
     * @return The compartment OCID.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The compartment name.
     * 
     */
    private @Nullable String compartmentName;
    /**
     * @return The compartment path, starting from root.
     * 
     */
    private @Nullable String compartmentPath;
    /**
     * @return The computed cost.
     * 
     */
    private @Nullable Double computedAmount;
    /**
     * @return The usage number.
     * 
     */
    private @Nullable Double computedQuantity;
    /**
     * @return The price currency.
     * 
     */
    private @Nullable String currency;
    /**
     * @return The discretionary discount applied to the SKU.
     * 
     */
    private @Nullable Double discount;
    /**
     * @return The forecasted data.
     * 
     */
    private @Nullable Boolean isForecast;
    /**
     * @return The SKU list rate (not discount).
     * 
     */
    private @Nullable Double listRate;
    /**
     * @return The overage usage.
     * 
     */
    private @Nullable String overage;
    /**
     * @return The SPM OverageFlag.
     * 
     */
    private @Nullable String overagesFlag;
    /**
     * @return Platform for the cost.
     * 
     */
    private @Nullable String platform;
    /**
     * @return The region of the usage.
     * 
     */
    private @Nullable String region;
    /**
     * @return The resource OCID that is incurring the cost.
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return The resource name that is incurring the cost.
     * 
     */
    private @Nullable String resourceName;
    /**
     * @return The service name that is incurring the cost.
     * 
     */
    private @Nullable String service;
    /**
     * @return The resource shape.
     * 
     */
    private @Nullable String shape;
    /**
     * @return The SKU friendly name.
     * 
     */
    private @Nullable String skuName;
    /**
     * @return The SKU part number.
     * 
     */
    private @Nullable String skuPartNumber;
    /**
     * @return The subscription ID.
     * 
     */
    private @Nullable String subscriptionId;
    /**
     * @return For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    private @Nullable List<UsageItemTag> tags;
    /**
     * @return Tenant ID.
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return The tenancy name.
     * 
     */
    private @Nullable String tenantName;
    /**
     * @return The usage end time.
     * 
     */
    private @Nullable String timeUsageEnded;
    /**
     * @return The usage start time.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable String timeUsageStarted;
    /**
     * @return The usage unit.
     * 
     */
    private @Nullable String unit;
    /**
     * @return The price per unit.
     * 
     */
    private @Nullable Double unitPrice;
    /**
     * @return The resource size being metered.
     * 
     */
    private @Nullable Double weight;

    private UsageItem() {}
    /**
     * @return The availability domain of the usage.
     * 
     */
    public Optional<String> ad() {
        return Optional.ofNullable(this.ad);
    }
    /**
     * @return The attributed cost with a max value of 9999999999.999999999999 and a minimum value of 0.
     * 
     */
    public Optional<String> attributedCost() {
        return Optional.ofNullable(this.attributedCost);
    }
    /**
     * @return The attributed usage with a max value of 9999999999.999999999999 and a minimum value of 0.
     * 
     */
    public Optional<String> attributedUsage() {
        return Optional.ofNullable(this.attributedUsage);
    }
    /**
     * @return The compartment OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The compartment name.
     * 
     */
    public Optional<String> compartmentName() {
        return Optional.ofNullable(this.compartmentName);
    }
    /**
     * @return The compartment path, starting from root.
     * 
     */
    public Optional<String> compartmentPath() {
        return Optional.ofNullable(this.compartmentPath);
    }
    /**
     * @return The computed cost.
     * 
     */
    public Optional<Double> computedAmount() {
        return Optional.ofNullable(this.computedAmount);
    }
    /**
     * @return The usage number.
     * 
     */
    public Optional<Double> computedQuantity() {
        return Optional.ofNullable(this.computedQuantity);
    }
    /**
     * @return The price currency.
     * 
     */
    public Optional<String> currency() {
        return Optional.ofNullable(this.currency);
    }
    /**
     * @return The discretionary discount applied to the SKU.
     * 
     */
    public Optional<Double> discount() {
        return Optional.ofNullable(this.discount);
    }
    /**
     * @return The forecasted data.
     * 
     */
    public Optional<Boolean> isForecast() {
        return Optional.ofNullable(this.isForecast);
    }
    /**
     * @return The SKU list rate (not discount).
     * 
     */
    public Optional<Double> listRate() {
        return Optional.ofNullable(this.listRate);
    }
    /**
     * @return The overage usage.
     * 
     */
    public Optional<String> overage() {
        return Optional.ofNullable(this.overage);
    }
    /**
     * @return The SPM OverageFlag.
     * 
     */
    public Optional<String> overagesFlag() {
        return Optional.ofNullable(this.overagesFlag);
    }
    /**
     * @return Platform for the cost.
     * 
     */
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    /**
     * @return The region of the usage.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The resource OCID that is incurring the cost.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return The resource name that is incurring the cost.
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }
    /**
     * @return The service name that is incurring the cost.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return The resource shape.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The SKU friendly name.
     * 
     */
    public Optional<String> skuName() {
        return Optional.ofNullable(this.skuName);
    }
    /**
     * @return The SKU part number.
     * 
     */
    public Optional<String> skuPartNumber() {
        return Optional.ofNullable(this.skuPartNumber);
    }
    /**
     * @return The subscription ID.
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    public List<UsageItemTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Tenant ID.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return The tenancy name.
     * 
     */
    public Optional<String> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }
    /**
     * @return The usage end time.
     * 
     */
    public Optional<String> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }
    /**
     * @return The usage start time.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<String> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }
    /**
     * @return The usage unit.
     * 
     */
    public Optional<String> unit() {
        return Optional.ofNullable(this.unit);
    }
    /**
     * @return The price per unit.
     * 
     */
    public Optional<Double> unitPrice() {
        return Optional.ofNullable(this.unitPrice);
    }
    /**
     * @return The resource size being metered.
     * 
     */
    public Optional<Double> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsageItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ad;
        private @Nullable String attributedCost;
        private @Nullable String attributedUsage;
        private @Nullable String compartmentId;
        private @Nullable String compartmentName;
        private @Nullable String compartmentPath;
        private @Nullable Double computedAmount;
        private @Nullable Double computedQuantity;
        private @Nullable String currency;
        private @Nullable Double discount;
        private @Nullable Boolean isForecast;
        private @Nullable Double listRate;
        private @Nullable String overage;
        private @Nullable String overagesFlag;
        private @Nullable String platform;
        private @Nullable String region;
        private @Nullable String resourceId;
        private @Nullable String resourceName;
        private @Nullable String service;
        private @Nullable String shape;
        private @Nullable String skuName;
        private @Nullable String skuPartNumber;
        private @Nullable String subscriptionId;
        private @Nullable List<UsageItemTag> tags;
        private @Nullable String tenantId;
        private @Nullable String tenantName;
        private @Nullable String timeUsageEnded;
        private @Nullable String timeUsageStarted;
        private @Nullable String unit;
        private @Nullable Double unitPrice;
        private @Nullable Double weight;
        public Builder() {}
        public Builder(UsageItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ad = defaults.ad;
    	      this.attributedCost = defaults.attributedCost;
    	      this.attributedUsage = defaults.attributedUsage;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentName = defaults.compartmentName;
    	      this.compartmentPath = defaults.compartmentPath;
    	      this.computedAmount = defaults.computedAmount;
    	      this.computedQuantity = defaults.computedQuantity;
    	      this.currency = defaults.currency;
    	      this.discount = defaults.discount;
    	      this.isForecast = defaults.isForecast;
    	      this.listRate = defaults.listRate;
    	      this.overage = defaults.overage;
    	      this.overagesFlag = defaults.overagesFlag;
    	      this.platform = defaults.platform;
    	      this.region = defaults.region;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceName = defaults.resourceName;
    	      this.service = defaults.service;
    	      this.shape = defaults.shape;
    	      this.skuName = defaults.skuName;
    	      this.skuPartNumber = defaults.skuPartNumber;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.tenantName = defaults.tenantName;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
    	      this.unit = defaults.unit;
    	      this.unitPrice = defaults.unitPrice;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder ad(@Nullable String ad) {

            this.ad = ad;
            return this;
        }
        @CustomType.Setter
        public Builder attributedCost(@Nullable String attributedCost) {

            this.attributedCost = attributedCost;
            return this;
        }
        @CustomType.Setter
        public Builder attributedUsage(@Nullable String attributedUsage) {

            this.attributedUsage = attributedUsage;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentName(@Nullable String compartmentName) {

            this.compartmentName = compartmentName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentPath(@Nullable String compartmentPath) {

            this.compartmentPath = compartmentPath;
            return this;
        }
        @CustomType.Setter
        public Builder computedAmount(@Nullable Double computedAmount) {

            this.computedAmount = computedAmount;
            return this;
        }
        @CustomType.Setter
        public Builder computedQuantity(@Nullable Double computedQuantity) {

            this.computedQuantity = computedQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder currency(@Nullable String currency) {

            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder discount(@Nullable Double discount) {

            this.discount = discount;
            return this;
        }
        @CustomType.Setter
        public Builder isForecast(@Nullable Boolean isForecast) {

            this.isForecast = isForecast;
            return this;
        }
        @CustomType.Setter
        public Builder listRate(@Nullable Double listRate) {

            this.listRate = listRate;
            return this;
        }
        @CustomType.Setter
        public Builder overage(@Nullable String overage) {

            this.overage = overage;
            return this;
        }
        @CustomType.Setter
        public Builder overagesFlag(@Nullable String overagesFlag) {

            this.overagesFlag = overagesFlag;
            return this;
        }
        @CustomType.Setter
        public Builder platform(@Nullable String platform) {

            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {

            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(@Nullable String resourceName) {

            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {

            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(@Nullable String skuName) {

            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder skuPartNumber(@Nullable String skuPartNumber) {

            this.skuPartNumber = skuPartNumber;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {

            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<UsageItemTag> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(UsageItemTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantName(@Nullable String tenantName) {

            this.tenantName = tenantName;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(@Nullable String timeUsageEnded) {

            this.timeUsageEnded = timeUsageEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(@Nullable String timeUsageStarted) {

            this.timeUsageStarted = timeUsageStarted;
            return this;
        }
        @CustomType.Setter
        public Builder unit(@Nullable String unit) {

            this.unit = unit;
            return this;
        }
        @CustomType.Setter
        public Builder unitPrice(@Nullable Double unitPrice) {

            this.unitPrice = unitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Double weight) {

            this.weight = weight;
            return this;
        }
        public UsageItem build() {
            final var _resultValue = new UsageItem();
            _resultValue.ad = ad;
            _resultValue.attributedCost = attributedCost;
            _resultValue.attributedUsage = attributedUsage;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentName = compartmentName;
            _resultValue.compartmentPath = compartmentPath;
            _resultValue.computedAmount = computedAmount;
            _resultValue.computedQuantity = computedQuantity;
            _resultValue.currency = currency;
            _resultValue.discount = discount;
            _resultValue.isForecast = isForecast;
            _resultValue.listRate = listRate;
            _resultValue.overage = overage;
            _resultValue.overagesFlag = overagesFlag;
            _resultValue.platform = platform;
            _resultValue.region = region;
            _resultValue.resourceId = resourceId;
            _resultValue.resourceName = resourceName;
            _resultValue.service = service;
            _resultValue.shape = shape;
            _resultValue.skuName = skuName;
            _resultValue.skuPartNumber = skuPartNumber;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.tenantName = tenantName;
            _resultValue.timeUsageEnded = timeUsageEnded;
            _resultValue.timeUsageStarted = timeUsageStarted;
            _resultValue.unit = unit;
            _resultValue.unitPrice = unitPrice;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
