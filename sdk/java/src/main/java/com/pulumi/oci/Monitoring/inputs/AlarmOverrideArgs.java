// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlarmOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlarmOverrideArgs Empty = new AlarmOverrideArgs();

    /**
     * (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT1M. Maximum: PT1H. Default: PT1M.
     * 
     * Under the default value of PT1M, the first evaluation that breaches the alarm updates the state to &#34;FIRING&#34;.
     * 
     * The alarm updates its status to &#34;OK&#34; when the breaching condition has been clear for the most recent minute.
     * 
     * Example: `PT5M`
     * 
     */
    @Import(name="pendingDuration")
    private @Nullable Output<String> pendingDuration;

    /**
     * @return (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT1M. Maximum: PT1H. Default: PT1M.
     * 
     * Under the default value of PT1M, the first evaluation that breaches the alarm updates the state to &#34;FIRING&#34;.
     * 
     * The alarm updates its status to &#34;OK&#34; when the breaching condition has been clear for the most recent minute.
     * 
     * Example: `PT5M`
     * 
     */
    public Optional<Output<String>> pendingDuration() {
        return Optional.ofNullable(this.pendingDuration);
    }

    /**
     * (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     * Example of absence alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.absent()
     * 
     * ***
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     * Example of absence alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.absent()
     * 
     * ***
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * (Updatable) A user-friendly description for this alarm override. Must be unique across all `ruleName` values for the alarm.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return (Updatable) A user-friendly description for this alarm override. Must be unique across all `ruleName` values for the alarm.
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * (Updatable) The perceived severity of the alarm with regard to the affected system.  Example: `CRITICAL`
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return (Updatable) The perceived severity of the alarm with regard to the affected system.  Example: `CRITICAL`
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    private AlarmOverrideArgs() {}

    private AlarmOverrideArgs(AlarmOverrideArgs $) {
        this.body = $.body;
        this.pendingDuration = $.pendingDuration;
        this.query = $.query;
        this.ruleName = $.ruleName;
        this.severity = $.severity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlarmOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlarmOverrideArgs $;

        public Builder() {
            $ = new AlarmOverrideArgs();
        }

        public Builder(AlarmOverrideArgs defaults) {
            $ = new AlarmOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param pendingDuration (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
         * 
         * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT1M. Maximum: PT1H. Default: PT1M.
         * 
         * Under the default value of PT1M, the first evaluation that breaches the alarm updates the state to &#34;FIRING&#34;.
         * 
         * The alarm updates its status to &#34;OK&#34; when the breaching condition has been clear for the most recent minute.
         * 
         * Example: `PT5M`
         * 
         * @return builder
         * 
         */
        public Builder pendingDuration(@Nullable Output<String> pendingDuration) {
            $.pendingDuration = pendingDuration;
            return this;
        }

        /**
         * @param pendingDuration (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
         * 
         * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT1M. Maximum: PT1H. Default: PT1M.
         * 
         * Under the default value of PT1M, the first evaluation that breaches the alarm updates the state to &#34;FIRING&#34;.
         * 
         * The alarm updates its status to &#34;OK&#34; when the breaching condition has been clear for the most recent minute.
         * 
         * Example: `PT5M`
         * 
         * @return builder
         * 
         */
        public Builder pendingDuration(String pendingDuration) {
            return pendingDuration(Output.of(pendingDuration));
        }

        /**
         * @param query (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
         * 
         * Example of threshold alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
         * 
         * ***
         * 
         * Example of absence alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.absent()
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
         * 
         * Example of threshold alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
         * 
         * ***
         * 
         * Example of absence alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.absent()
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param ruleName (Updatable) A user-friendly description for this alarm override. Must be unique across all `ruleName` values for the alarm.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName (Updatable) A user-friendly description for this alarm override. Must be unique across all `ruleName` values for the alarm.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param severity (Updatable) The perceived severity of the alarm with regard to the affected system.  Example: `CRITICAL`
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity (Updatable) The perceived severity of the alarm with regard to the affected system.  Example: `CRITICAL`
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        public AlarmOverrideArgs build() {
            return $;
        }
    }

}
