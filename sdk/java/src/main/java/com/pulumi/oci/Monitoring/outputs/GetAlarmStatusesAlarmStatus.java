// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Monitoring.outputs.GetAlarmStatusesAlarmStatusSuppression;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAlarmStatusesAlarmStatus {
    /**
     * @return A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
     * 
     */
    private @Nullable String id;
    /**
     * @return The configured severity of the alarm.  Example: `CRITICAL`
     * 
     */
    private @Nullable String severity;
    /**
     * @return The status of the metric stream to use for alarm filtering. For example, set `StatusQueryParam` to &#34;FIRING&#34; to filter results to metric streams of the alarm with that status. Default behaviour is to return alarms irrespective of metric streams&#39; status.  Example: `FIRING`
     * 
     */
    private @Nullable String status;
    /**
     * @return The configuration details for suppressing an alarm.
     * 
     */
    private @Nullable List<GetAlarmStatusesAlarmStatusSuppression> suppressions;
    /**
     * @return Timestamp for the transition of the alarm state. For example, the time when the alarm transitioned from OK to Firing. Note: A three-minute lag for this value accounts for any late-arriving metrics.  Example: `2019-02-01T01:02:29.600Z`
     * 
     */
    private @Nullable String timestampTriggered;

    private GetAlarmStatusesAlarmStatus() {}
    /**
     * @return A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The configured severity of the alarm.  Example: `CRITICAL`
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return The status of the metric stream to use for alarm filtering. For example, set `StatusQueryParam` to &#34;FIRING&#34; to filter results to metric streams of the alarm with that status. Default behaviour is to return alarms irrespective of metric streams&#39; status.  Example: `FIRING`
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The configuration details for suppressing an alarm.
     * 
     */
    public List<GetAlarmStatusesAlarmStatusSuppression> suppressions() {
        return this.suppressions == null ? List.of() : this.suppressions;
    }
    /**
     * @return Timestamp for the transition of the alarm state. For example, the time when the alarm transitioned from OK to Firing. Note: A three-minute lag for this value accounts for any late-arriving metrics.  Example: `2019-02-01T01:02:29.600Z`
     * 
     */
    public Optional<String> timestampTriggered() {
        return Optional.ofNullable(this.timestampTriggered);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmStatusesAlarmStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable String severity;
        private @Nullable String status;
        private @Nullable List<GetAlarmStatusesAlarmStatusSuppression> suppressions;
        private @Nullable String timestampTriggered;
        public Builder() {}
        public Builder(GetAlarmStatusesAlarmStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.severity = defaults.severity;
    	      this.status = defaults.status;
    	      this.suppressions = defaults.suppressions;
    	      this.timestampTriggered = defaults.timestampTriggered;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder suppressions(@Nullable List<GetAlarmStatusesAlarmStatusSuppression> suppressions) {
            this.suppressions = suppressions;
            return this;
        }
        public Builder suppressions(GetAlarmStatusesAlarmStatusSuppression... suppressions) {
            return suppressions(List.of(suppressions));
        }
        @CustomType.Setter
        public Builder timestampTriggered(@Nullable String timestampTriggered) {
            this.timestampTriggered = timestampTriggered;
            return this;
        }
        public GetAlarmStatusesAlarmStatus build() {
            final var o = new GetAlarmStatusesAlarmStatus();
            o.displayName = displayName;
            o.id = id;
            o.severity = severity;
            o.status = status;
            o.suppressions = suppressions;
            o.timestampTriggered = timestampTriggered;
            return o;
        }
    }
}
