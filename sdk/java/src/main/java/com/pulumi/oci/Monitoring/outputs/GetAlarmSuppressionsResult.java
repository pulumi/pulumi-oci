// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Monitoring.outputs.GetAlarmSuppressionsAlarmSuppressionCollection;
import com.pulumi.oci.Monitoring.outputs.GetAlarmSuppressionsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAlarmSuppressionsResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm that is the target of the alarm suppression.
     * 
     */
    private @Nullable String alarmId;
    /**
     * @return The list of alarm_suppression_collection.
     * 
     */
    private List<GetAlarmSuppressionsAlarmSuppressionCollection> alarmSuppressionCollections;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm suppression.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return When true, the alarm suppression targets all alarms under all compartments and subcompartments of  the tenancy specified. The parameter can only be set to true when compartmentId is the tenancy OCID  (the tenancy is the root compartment). When false, the alarm suppression targets only the alarms under the specified compartment.
     * 
     */
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return A user-friendly name for the alarm suppression. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAlarmSuppressionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isAllSuppressions;
    /**
     * @return The level of this alarm suppression. `ALARM` indicates a suppression of the entire alarm, regardless of dimension. `DIMENSION` indicates a suppression configured for specified dimensions.
     * 
     */
    private @Nullable String level;
    /**
     * @return The current lifecycle state of the alarm suppression.  Example: `DELETED`
     * 
     */
    private @Nullable String state;
    /**
     * @return The type of the alarm suppression target.
     * 
     */
    private @Nullable String targetType;

    private GetAlarmSuppressionsResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm that is the target of the alarm suppression.
     * 
     */
    public Optional<String> alarmId() {
        return Optional.ofNullable(this.alarmId);
    }
    /**
     * @return The list of alarm_suppression_collection.
     * 
     */
    public List<GetAlarmSuppressionsAlarmSuppressionCollection> alarmSuppressionCollections() {
        return this.alarmSuppressionCollections;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm suppression.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return When true, the alarm suppression targets all alarms under all compartments and subcompartments of  the tenancy specified. The parameter can only be set to true when compartmentId is the tenancy OCID  (the tenancy is the root compartment). When false, the alarm suppression targets only the alarms under the specified compartment.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return A user-friendly name for the alarm suppression. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAlarmSuppressionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isAllSuppressions() {
        return Optional.ofNullable(this.isAllSuppressions);
    }
    /**
     * @return The level of this alarm suppression. `ALARM` indicates a suppression of the entire alarm, regardless of dimension. `DIMENSION` indicates a suppression configured for specified dimensions.
     * 
     */
    public Optional<String> level() {
        return Optional.ofNullable(this.level);
    }
    /**
     * @return The current lifecycle state of the alarm suppression.  Example: `DELETED`
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The type of the alarm suppression target.
     * 
     */
    public Optional<String> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmSuppressionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alarmId;
        private List<GetAlarmSuppressionsAlarmSuppressionCollection> alarmSuppressionCollections;
        private @Nullable String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAlarmSuppressionsFilter> filters;
        private String id;
        private @Nullable Boolean isAllSuppressions;
        private @Nullable String level;
        private @Nullable String state;
        private @Nullable String targetType;
        public Builder() {}
        public Builder(GetAlarmSuppressionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmId = defaults.alarmId;
    	      this.alarmSuppressionCollections = defaults.alarmSuppressionCollections;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isAllSuppressions = defaults.isAllSuppressions;
    	      this.level = defaults.level;
    	      this.state = defaults.state;
    	      this.targetType = defaults.targetType;
        }

        @CustomType.Setter
        public Builder alarmId(@Nullable String alarmId) {

            this.alarmId = alarmId;
            return this;
        }
        @CustomType.Setter
        public Builder alarmSuppressionCollections(List<GetAlarmSuppressionsAlarmSuppressionCollection> alarmSuppressionCollections) {
            if (alarmSuppressionCollections == null) {
              throw new MissingRequiredPropertyException("GetAlarmSuppressionsResult", "alarmSuppressionCollections");
            }
            this.alarmSuppressionCollections = alarmSuppressionCollections;
            return this;
        }
        public Builder alarmSuppressionCollections(GetAlarmSuppressionsAlarmSuppressionCollection... alarmSuppressionCollections) {
            return alarmSuppressionCollections(List.of(alarmSuppressionCollections));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAlarmSuppressionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAlarmSuppressionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAlarmSuppressionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAllSuppressions(@Nullable Boolean isAllSuppressions) {

            this.isAllSuppressions = isAllSuppressions;
            return this;
        }
        @CustomType.Setter
        public Builder level(@Nullable String level) {

            this.level = level;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(@Nullable String targetType) {

            this.targetType = targetType;
            return this;
        }
        public GetAlarmSuppressionsResult build() {
            final var _resultValue = new GetAlarmSuppressionsResult();
            _resultValue.alarmId = alarmId;
            _resultValue.alarmSuppressionCollections = alarmSuppressionCollections;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isAllSuppressions = isAllSuppressions;
            _resultValue.level = level;
            _resultValue.state = state;
            _resultValue.targetType = targetType;
            return _resultValue;
        }
    }
}
