// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Monitoring.outputs.GetAlarmsAlarmSuppression;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAlarmsAlarm {
    /**
     * @return The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
     * 
     */
    private String body;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    private String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A list of destinations for alarm notifications. Each destination is represented by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a related resource, such as a [topic](https://docs.cloud.oracle.com/iaas/api/#/en/notification/latest/NotificationTopic). Supported destination services: Notifications, Streaming. Limit: One destination per supported destination service.
     * 
     */
    private List<String> destinations;
    /**
     * @return A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
     * 
     */
    private String id;
    /**
     * @return Whether the alarm is enabled.  Example: `true`
     * 
     */
    private Boolean isEnabled;
    /**
     * @return Whether the alarm sends a separate message for each metric stream. See [Creating an Alarm That Splits Messages by Metric Stream](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-split.htm). Example: `true`
     * 
     */
    private Boolean isNotificationsPerMetricDimensionEnabled;
    /**
     * @return The format to use for alarm notifications. The formats are:
     * 
     */
    private String messageFormat;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
     * 
     */
    private String metricCompartmentId;
    /**
     * @return When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
     * 
     */
    private Boolean metricCompartmentIdInSubtree;
    /**
     * @return The source service or application emitting the metric that is evaluated by the alarm.  Example: `oci_computeagent`
     * 
     */
    private String namespace;
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
     * 
     */
    private String pendingDuration;
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     */
    private String query;
    /**
     * @return The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
     * 
     */
    private String repeatNotificationDuration;
    /**
     * @return The time between calculated aggregation windows for the alarm. Supported value: `1m`
     * 
     */
    private String resolution;
    /**
     * @return Resource group to match for metric data retrieved by the alarm. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    private String resourceGroup;
    /**
     * @return The perceived type of response required when the alarm is in the &#34;FIRING&#34; state.  Example: `CRITICAL`
     * 
     */
    private String severity;
    /**
     * @return A filter to return only alarms that match the given lifecycle state exactly. When not specified, only alarms in the ACTIVE lifecycle state are listed.
     * 
     */
    private String state;
    /**
     * @return The configuration details for suppressing an alarm.
     * 
     */
    private List<GetAlarmsAlarmSuppression> suppressions;
    /**
     * @return The date and time the alarm was created. Format defined by RFC3339.  Example: `2023-02-01T01:02:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2023-02-03T01:02:29.600Z`
     * 
     */
    private String timeUpdated;

    private GetAlarmsAlarm() {}
    /**
     * @return The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A list of destinations for alarm notifications. Each destination is represented by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a related resource, such as a [topic](https://docs.cloud.oracle.com/iaas/api/#/en/notification/latest/NotificationTopic). Supported destination services: Notifications, Streaming. Limit: One destination per supported destination service.
     * 
     */
    public List<String> destinations() {
        return this.destinations;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the alarm is enabled.  Example: `true`
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return Whether the alarm sends a separate message for each metric stream. See [Creating an Alarm That Splits Messages by Metric Stream](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-split.htm). Example: `true`
     * 
     */
    public Boolean isNotificationsPerMetricDimensionEnabled() {
        return this.isNotificationsPerMetricDimensionEnabled;
    }
    /**
     * @return The format to use for alarm notifications. The formats are:
     * 
     */
    public String messageFormat() {
        return this.messageFormat;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
     * 
     */
    public String metricCompartmentId() {
        return this.metricCompartmentId;
    }
    /**
     * @return When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
     * 
     */
    public Boolean metricCompartmentIdInSubtree() {
        return this.metricCompartmentIdInSubtree;
    }
    /**
     * @return The source service or application emitting the metric that is evaluated by the alarm.  Example: `oci_computeagent`
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;.
     * 
     */
    public String pendingDuration() {
        return this.pendingDuration;
    }
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
     * 
     */
    public String repeatNotificationDuration() {
        return this.repeatNotificationDuration;
    }
    /**
     * @return The time between calculated aggregation windows for the alarm. Supported value: `1m`
     * 
     */
    public String resolution() {
        return this.resolution;
    }
    /**
     * @return Resource group to match for metric data retrieved by the alarm. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return The perceived type of response required when the alarm is in the &#34;FIRING&#34; state.  Example: `CRITICAL`
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return A filter to return only alarms that match the given lifecycle state exactly. When not specified, only alarms in the ACTIVE lifecycle state are listed.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The configuration details for suppressing an alarm.
     * 
     */
    public List<GetAlarmsAlarmSuppression> suppressions() {
        return this.suppressions;
    }
    /**
     * @return The date and time the alarm was created. Format defined by RFC3339.  Example: `2023-02-01T01:02:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2023-02-03T01:02:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmsAlarm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String body;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private List<String> destinations;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isEnabled;
        private Boolean isNotificationsPerMetricDimensionEnabled;
        private String messageFormat;
        private String metricCompartmentId;
        private Boolean metricCompartmentIdInSubtree;
        private String namespace;
        private String pendingDuration;
        private String query;
        private String repeatNotificationDuration;
        private String resolution;
        private String resourceGroup;
        private String severity;
        private String state;
        private List<GetAlarmsAlarmSuppression> suppressions;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetAlarmsAlarm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.destinations = defaults.destinations;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isNotificationsPerMetricDimensionEnabled = defaults.isNotificationsPerMetricDimensionEnabled;
    	      this.messageFormat = defaults.messageFormat;
    	      this.metricCompartmentId = defaults.metricCompartmentId;
    	      this.metricCompartmentIdInSubtree = defaults.metricCompartmentIdInSubtree;
    	      this.namespace = defaults.namespace;
    	      this.pendingDuration = defaults.pendingDuration;
    	      this.query = defaults.query;
    	      this.repeatNotificationDuration = defaults.repeatNotificationDuration;
    	      this.resolution = defaults.resolution;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.severity = defaults.severity;
    	      this.state = defaults.state;
    	      this.suppressions = defaults.suppressions;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<String> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isNotificationsPerMetricDimensionEnabled(Boolean isNotificationsPerMetricDimensionEnabled) {
            if (isNotificationsPerMetricDimensionEnabled == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "isNotificationsPerMetricDimensionEnabled");
            }
            this.isNotificationsPerMetricDimensionEnabled = isNotificationsPerMetricDimensionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder messageFormat(String messageFormat) {
            if (messageFormat == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "messageFormat");
            }
            this.messageFormat = messageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder metricCompartmentId(String metricCompartmentId) {
            if (metricCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "metricCompartmentId");
            }
            this.metricCompartmentId = metricCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder metricCompartmentIdInSubtree(Boolean metricCompartmentIdInSubtree) {
            if (metricCompartmentIdInSubtree == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "metricCompartmentIdInSubtree");
            }
            this.metricCompartmentIdInSubtree = metricCompartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder pendingDuration(String pendingDuration) {
            if (pendingDuration == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "pendingDuration");
            }
            this.pendingDuration = pendingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder repeatNotificationDuration(String repeatNotificationDuration) {
            if (repeatNotificationDuration == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "repeatNotificationDuration");
            }
            this.repeatNotificationDuration = repeatNotificationDuration;
            return this;
        }
        @CustomType.Setter
        public Builder resolution(String resolution) {
            if (resolution == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "resolution");
            }
            this.resolution = resolution;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder suppressions(List<GetAlarmsAlarmSuppression> suppressions) {
            if (suppressions == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "suppressions");
            }
            this.suppressions = suppressions;
            return this;
        }
        public Builder suppressions(GetAlarmsAlarmSuppression... suppressions) {
            return suppressions(List.of(suppressions));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetAlarmsAlarm", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetAlarmsAlarm build() {
            final var _resultValue = new GetAlarmsAlarm();
            _resultValue.body = body;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.destinations = destinations;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.isNotificationsPerMetricDimensionEnabled = isNotificationsPerMetricDimensionEnabled;
            _resultValue.messageFormat = messageFormat;
            _resultValue.metricCompartmentId = metricCompartmentId;
            _resultValue.metricCompartmentIdInSubtree = metricCompartmentIdInSubtree;
            _resultValue.namespace = namespace;
            _resultValue.pendingDuration = pendingDuration;
            _resultValue.query = query;
            _resultValue.repeatNotificationDuration = repeatNotificationDuration;
            _resultValue.resolution = resolution;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.severity = severity;
            _resultValue.state = state;
            _resultValue.suppressions = suppressions;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
