// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Monitoring.outputs.GetMetricDataMetricDataAggregatedDatapoint;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMetricDataMetricData {
    /**
     * @return The list of timestamp-value pairs returned for the specified request. Metric values are rolled up to the start time specified in the request. For important limits information related to data points, see MetricData Reference at the top of this page.
     * 
     */
    private List<GetMetricDataMetricDataAggregatedDatapoint> aggregatedDatapoints;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    private String compartmentId;
    /**
     * @return When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     * 
     */
    private Boolean compartmentIdInSubtree;
    /**
     * @return Qualifiers provided in the definition of the returned metric. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    private Map<String,Object> dimensions;
    /**
     * @return The end of the time range to use when searching for metric data points. Format is defined by RFC3339. The response excludes metric data points for the endTime. Default value: the timestamp representing when the call was sent.  Example: `2023-02-01T02:02:29.600Z`
     * 
     */
    private String endTime;
    /**
     * @return The references provided in a metric definition to indicate extra information about the metric.  Example: `&#34;unit&#34;: &#34;bytes&#34;`
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return The name of the metric.  Example: `CpuUtilization`
     * 
     */
    private String name;
    /**
     * @return The source service or application to use when searching for metric data points to aggregate.  Example: `oci_computeagent`
     * 
     */
    private String namespace;
    /**
     * @return The Monitoring Query Language (MQL) expression to use when searching for metric data points to aggregate. The query must specify a metric, statistic, and interval. Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. When specifying a dimension value, surround it with double quotes, and escape each double quote with a backslash (`\`) character. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Construct your query to avoid exceeding limits on returned data. See [MetricData Reference](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData).
     * 
     * For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     * Example 1: `CpuUtilization[1m].sum()`
     * 
     * Example 2 (escaped double quotes for value string): `CpuUtilization[1m]{resourceId = \&#34;&lt;var&gt;&amp;lt;instance_OCID&amp;gt;&lt;/var&gt;\&#34;}.max()`
     * 
     */
    private String query;
    /**
     * @return The time between calculated aggregation windows. Use with the query interval to vary the frequency for returning aggregated data points. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m`, `1h`-`24h`, `1d`.  Example: `5m`
     * 
     */
    private String resolution;
    /**
     * @return Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    private String resourceGroup;
    /**
     * @return The beginning of the time range to use when searching for metric data points. Format is defined by RFC3339. The response includes metric data points for the startTime. Default value: the timestamp 3 hours before the call was sent.  Example: `2023-02-01T01:02:29.600Z`
     * 
     */
    private String startTime;

    private GetMetricDataMetricData() {}
    /**
     * @return The list of timestamp-value pairs returned for the specified request. Metric values are rolled up to the start time specified in the request. For important limits information related to data points, see MetricData Reference at the top of this page.
     * 
     */
    public List<GetMetricDataMetricDataAggregatedDatapoint> aggregatedDatapoints() {
        return this.aggregatedDatapoints;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     * 
     */
    public Boolean compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }
    /**
     * @return Qualifiers provided in the definition of the returned metric. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    public Map<String,Object> dimensions() {
        return this.dimensions;
    }
    /**
     * @return The end of the time range to use when searching for metric data points. Format is defined by RFC3339. The response excludes metric data points for the endTime. Default value: the timestamp representing when the call was sent.  Example: `2023-02-01T02:02:29.600Z`
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The references provided in a metric definition to indicate extra information about the metric.  Example: `&#34;unit&#34;: &#34;bytes&#34;`
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return The name of the metric.  Example: `CpuUtilization`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The source service or application to use when searching for metric data points to aggregate.  Example: `oci_computeagent`
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The Monitoring Query Language (MQL) expression to use when searching for metric data points to aggregate. The query must specify a metric, statistic, and interval. Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. When specifying a dimension value, surround it with double quotes, and escape each double quote with a backslash (`\`) character. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Construct your query to avoid exceeding limits on returned data. See [MetricData Reference](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData).
     * 
     * For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
     * 
     * Example 1: `CpuUtilization[1m].sum()`
     * 
     * Example 2 (escaped double quotes for value string): `CpuUtilization[1m]{resourceId = \&#34;&lt;var&gt;&amp;lt;instance_OCID&amp;gt;&lt;/var&gt;\&#34;}.max()`
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return The time between calculated aggregation windows. Use with the query interval to vary the frequency for returning aggregated data points. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m`, `1h`-`24h`, `1d`.  Example: `5m`
     * 
     */
    public String resolution() {
        return this.resolution;
    }
    /**
     * @return Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return The beginning of the time range to use when searching for metric data points. Format is defined by RFC3339. The response includes metric data points for the startTime. Default value: the timestamp 3 hours before the call was sent.  Example: `2023-02-01T01:02:29.600Z`
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricDataMetricData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMetricDataMetricDataAggregatedDatapoint> aggregatedDatapoints;
        private String compartmentId;
        private Boolean compartmentIdInSubtree;
        private Map<String,Object> dimensions;
        private String endTime;
        private Map<String,Object> metadata;
        private String name;
        private String namespace;
        private String query;
        private String resolution;
        private String resourceGroup;
        private String startTime;
        public Builder() {}
        public Builder(GetMetricDataMetricData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregatedDatapoints = defaults.aggregatedDatapoints;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.dimensions = defaults.dimensions;
    	      this.endTime = defaults.endTime;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.query = defaults.query;
    	      this.resolution = defaults.resolution;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.startTime = defaults.startTime;
        }

        @CustomType.Setter
        public Builder aggregatedDatapoints(List<GetMetricDataMetricDataAggregatedDatapoint> aggregatedDatapoints) {
            if (aggregatedDatapoints == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "aggregatedDatapoints");
            }
            this.aggregatedDatapoints = aggregatedDatapoints;
            return this;
        }
        public Builder aggregatedDatapoints(GetMetricDataMetricDataAggregatedDatapoint... aggregatedDatapoints) {
            return aggregatedDatapoints(List.of(aggregatedDatapoints));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            if (compartmentIdInSubtree == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "compartmentIdInSubtree");
            }
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(Map<String,Object> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder resolution(String resolution) {
            if (resolution == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "resolution");
            }
            this.resolution = resolution;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetMetricDataMetricData", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        public GetMetricDataMetricData build() {
            final var _resultValue = new GetMetricDataMetricData();
            _resultValue.aggregatedDatapoints = aggregatedDatapoints;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.dimensions = dimensions;
            _resultValue.endTime = endTime;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.query = query;
            _resultValue.resolution = resolution;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.startTime = startTime;
            return _resultValue;
        }
    }
}
