// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMetricsMetric {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    private String compartmentId;
    /**
     * @return When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     * 
     */
    private Boolean compartmentIdInSubtree;
    /**
     * @return Qualifiers that you want to use when searching for metric definitions. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    private Map<String,String> dimensionFilters;
    /**
     * @return Qualifiers provided in a metric definition. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    private Map<String,String> dimensions;
    /**
     * @return Group metrics by these fields in the response. For example, to list all metric namespaces available in a compartment, groupBy the &#34;namespace&#34; field. Supported fields: namespace, name, resourceGroup. If `groupBy` is used, then `dimensionFilters` is ignored.
     * 
     * Example - group by namespace: `[ &#34;namespace&#34; ]`
     * 
     */
    private List<String> groupBies;
    /**
     * @return The metric name to use when searching for metric definitions.  Example: `CpuUtilization`
     * 
     */
    private String name;
    /**
     * @return The source service or application to use when searching for metric definitions.  Example: `oci_computeagent`
     * 
     */
    private String namespace;
    /**
     * @return Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    private String resourceGroup;

    private GetMetricsMetric() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     * 
     */
    public Boolean compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }
    /**
     * @return Qualifiers that you want to use when searching for metric definitions. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    public Map<String,String> dimensionFilters() {
        return this.dimensionFilters;
    }
    /**
     * @return Qualifiers provided in a metric definition. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{&#34;resourceId&#34;: &#34;instance.region1.phx.exampleuniqueID&#34;}`
     * 
     */
    public Map<String,String> dimensions() {
        return this.dimensions;
    }
    /**
     * @return Group metrics by these fields in the response. For example, to list all metric namespaces available in a compartment, groupBy the &#34;namespace&#34; field. Supported fields: namespace, name, resourceGroup. If `groupBy` is used, then `dimensionFilters` is ignored.
     * 
     * Example - group by namespace: `[ &#34;namespace&#34; ]`
     * 
     */
    public List<String> groupBies() {
        return this.groupBies;
    }
    /**
     * @return The metric name to use when searching for metric definitions.  Example: `CpuUtilization`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The source service or application to use when searching for metric definitions.  Example: `oci_computeagent`
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricsMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Boolean compartmentIdInSubtree;
        private Map<String,String> dimensionFilters;
        private Map<String,String> dimensions;
        private List<String> groupBies;
        private String name;
        private String namespace;
        private String resourceGroup;
        public Builder() {}
        public Builder(GetMetricsMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.dimensionFilters = defaults.dimensionFilters;
    	      this.dimensions = defaults.dimensions;
    	      this.groupBies = defaults.groupBies;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroup = defaults.resourceGroup;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            if (compartmentIdInSubtree == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "compartmentIdInSubtree");
            }
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder dimensionFilters(Map<String,String> dimensionFilters) {
            if (dimensionFilters == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "dimensionFilters");
            }
            this.dimensionFilters = dimensionFilters;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(Map<String,String> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        @CustomType.Setter
        public Builder groupBies(List<String> groupBies) {
            if (groupBies == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "groupBies");
            }
            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetMetricsMetric", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        public GetMetricsMetric build() {
            final var _resultValue = new GetMetricsMetric();
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.dimensionFilters = dimensionFilters;
            _resultValue.dimensions = dimensions;
            _resultValue.groupBies = groupBies;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.resourceGroup = resourceGroup;
            return _resultValue;
        }
    }
}
