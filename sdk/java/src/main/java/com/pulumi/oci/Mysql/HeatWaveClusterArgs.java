// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HeatWaveClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final HeatWaveClusterArgs Empty = new HeatWaveClusterArgs();

    /**
     * (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
     * 
     */
    @Import(name="clusterSize", required=true)
    private Output<Integer> clusterSize;

    /**
     * @return (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
     * 
     */
    public Output<Integer> clusterSize() {
        return this.clusterSize;
    }

    /**
     * The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="dbSystemId", required=true)
    private Output<String> dbSystemId;

    /**
     * @return The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> dbSystemId() {
        return this.dbSystemId;
    }

    /**
     * (Updatable) Enable/disable Lakehouse for the HeatWave cluster.
     * 
     */
    @Import(name="isLakehouseEnabled")
    private @Nullable Output<Boolean> isLakehouseEnabled;

    /**
     * @return (Updatable) Enable/disable Lakehouse for the HeatWave cluster.
     * 
     */
    public Optional<Output<Boolean>> isLakehouseEnabled() {
        return Optional.ofNullable(this.isLakehouseEnabled);
    }

    /**
     * (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
     * 
     */
    @Import(name="shapeName", required=true)
    private Output<String> shapeName;

    /**
     * @return (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }

    /**
     * (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private HeatWaveClusterArgs() {}

    private HeatWaveClusterArgs(HeatWaveClusterArgs $) {
        this.clusterSize = $.clusterSize;
        this.dbSystemId = $.dbSystemId;
        this.isLakehouseEnabled = $.isLakehouseEnabled;
        this.shapeName = $.shapeName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HeatWaveClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HeatWaveClusterArgs $;

        public Builder() {
            $ = new HeatWaveClusterArgs();
        }

        public Builder(HeatWaveClusterArgs defaults) {
            $ = new HeatWaveClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterSize (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(Output<Integer> clusterSize) {
            $.clusterSize = clusterSize;
            return this;
        }

        /**
         * @param clusterSize (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(Integer clusterSize) {
            return clusterSize(Output.of(clusterSize));
        }

        /**
         * @param dbSystemId The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param isLakehouseEnabled (Updatable) Enable/disable Lakehouse for the HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder isLakehouseEnabled(@Nullable Output<Boolean> isLakehouseEnabled) {
            $.isLakehouseEnabled = isLakehouseEnabled;
            return this;
        }

        /**
         * @param isLakehouseEnabled (Updatable) Enable/disable Lakehouse for the HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder isLakehouseEnabled(Boolean isLakehouseEnabled) {
            return isLakehouseEnabled(Output.of(isLakehouseEnabled));
        }

        /**
         * @param shapeName (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param state (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public HeatWaveClusterArgs build() {
            $.clusterSize = Objects.requireNonNull($.clusterSize, "expected parameter 'clusterSize' to be non-null");
            $.dbSystemId = Objects.requireNonNull($.dbSystemId, "expected parameter 'dbSystemId' to be non-null");
            $.shapeName = Objects.requireNonNull($.shapeName, "expected parameter 'shapeName' to be non-null");
            return $;
        }
    }

}
