// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotSummaryArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupEncryptDataArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupSourceDetailsArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupValidateBackupDetailArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupArgs Empty = new MysqlBackupArgs();

    /**
     * The type of backup.
     * 
     */
    @Import(name="backupType")
    private @Nullable Output<String> backupType;

    /**
     * @return The type of backup.
     * 
     */
    public Optional<Output<String>> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the DB System the Backup is associated with.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return The OCID of the DB System the Backup is associated with.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    @Import(name="dbSystemSnapshotSummaries")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>> dbSystemSnapshotSummaries;

    public Optional<Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>>> dbSystemSnapshotSummaries() {
        return Optional.ofNullable(this.dbSystemSnapshotSummaries);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-supplied description for the backup.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user-supplied description for the backup.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-supplied display name for the backup.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-supplied display name for the backup.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Encrypt data details.
     * 
     */
    @Import(name="encryptData")
    private @Nullable Output<MysqlBackupEncryptDataArgs> encryptData;

    /**
     * @return Encrypt data details.
     * 
     */
    public Optional<Output<MysqlBackupEncryptDataArgs>> encryptData() {
        return Optional.ofNullable(this.encryptData);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Number of days to retain this backup.
     * 
     */
    @Import(name="retentionInDays")
    private @Nullable Output<Integer> retentionInDays;

    /**
     * @return (Updatable) Number of days to retain this backup.
     * 
     */
    public Optional<Output<Integer>> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }

    /**
     * (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    @Import(name="softDelete")
    private @Nullable Output<String> softDelete;

    /**
     * @return (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    public Optional<Output<String>> softDelete() {
        return Optional.ofNullable(this.softDelete);
    }

    /**
     * Details of backup source in the cloud.
     * 
     */
    @Import(name="sourceDetails")
    private @Nullable Output<MysqlBackupSourceDetailsArgs> sourceDetails;

    /**
     * @return Details of backup source in the cloud.
     * 
     */
    public Optional<Output<MysqlBackupSourceDetailsArgs>> sourceDetails() {
        return Optional.ofNullable(this.sourceDetails);
    }

    @Import(name="validateBackupDetails")
    private @Nullable Output<List<MysqlBackupValidateBackupDetailArgs>> validateBackupDetails;

    public Optional<Output<List<MysqlBackupValidateBackupDetailArgs>>> validateBackupDetails() {
        return Optional.ofNullable(this.validateBackupDetails);
    }

    /**
     * (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
     * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
     * 
     */
    @Import(name="validateTrigger")
    private @Nullable Output<Integer> validateTrigger;

    /**
     * @return (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
     * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
     * 
     */
    public Optional<Output<Integer>> validateTrigger() {
        return Optional.ofNullable(this.validateTrigger);
    }

    private MysqlBackupArgs() {}

    private MysqlBackupArgs(MysqlBackupArgs $) {
        this.backupType = $.backupType;
        this.compartmentId = $.compartmentId;
        this.dbSystemId = $.dbSystemId;
        this.dbSystemSnapshotSummaries = $.dbSystemSnapshotSummaries;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.encryptData = $.encryptData;
        this.freeformTags = $.freeformTags;
        this.retentionInDays = $.retentionInDays;
        this.softDelete = $.softDelete;
        this.sourceDetails = $.sourceDetails;
        this.validateBackupDetails = $.validateBackupDetails;
        this.validateTrigger = $.validateTrigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupArgs $;

        public Builder() {
            $ = new MysqlBackupArgs();
        }

        public Builder(MysqlBackupArgs defaults) {
            $ = new MysqlBackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupType The type of backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType The type of backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dbSystemId The OCID of the DB System the Backup is associated with.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The OCID of the DB System the Backup is associated with.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        public Builder dbSystemSnapshotSummaries(@Nullable Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>> dbSystemSnapshotSummaries) {
            $.dbSystemSnapshotSummaries = dbSystemSnapshotSummaries;
            return this;
        }

        public Builder dbSystemSnapshotSummaries(List<MysqlBackupDbSystemSnapshotSummaryArgs> dbSystemSnapshotSummaries) {
            return dbSystemSnapshotSummaries(Output.of(dbSystemSnapshotSummaries));
        }

        public Builder dbSystemSnapshotSummaries(MysqlBackupDbSystemSnapshotSummaryArgs... dbSystemSnapshotSummaries) {
            return dbSystemSnapshotSummaries(List.of(dbSystemSnapshotSummaries));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encryptData Encrypt data details.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(@Nullable Output<MysqlBackupEncryptDataArgs> encryptData) {
            $.encryptData = encryptData;
            return this;
        }

        /**
         * @param encryptData Encrypt data details.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(MysqlBackupEncryptDataArgs encryptData) {
            return encryptData(Output.of(encryptData));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(@Nullable Output<Integer> retentionInDays) {
            $.retentionInDays = retentionInDays;
            return this;
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(Integer retentionInDays) {
            return retentionInDays(Output.of(retentionInDays));
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(@Nullable Output<String> softDelete) {
            $.softDelete = softDelete;
            return this;
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(String softDelete) {
            return softDelete(Output.of(softDelete));
        }

        /**
         * @param sourceDetails Details of backup source in the cloud.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(@Nullable Output<MysqlBackupSourceDetailsArgs> sourceDetails) {
            $.sourceDetails = sourceDetails;
            return this;
        }

        /**
         * @param sourceDetails Details of backup source in the cloud.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(MysqlBackupSourceDetailsArgs sourceDetails) {
            return sourceDetails(Output.of(sourceDetails));
        }

        public Builder validateBackupDetails(@Nullable Output<List<MysqlBackupValidateBackupDetailArgs>> validateBackupDetails) {
            $.validateBackupDetails = validateBackupDetails;
            return this;
        }

        public Builder validateBackupDetails(List<MysqlBackupValidateBackupDetailArgs> validateBackupDetails) {
            return validateBackupDetails(Output.of(validateBackupDetails));
        }

        public Builder validateBackupDetails(MysqlBackupValidateBackupDetailArgs... validateBackupDetails) {
            return validateBackupDetails(List.of(validateBackupDetails));
        }

        /**
         * @param validateTrigger (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
         * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
         * 
         * @return builder
         * 
         */
        public Builder validateTrigger(@Nullable Output<Integer> validateTrigger) {
            $.validateTrigger = validateTrigger;
            return this;
        }

        /**
         * @param validateTrigger (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
         * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
         * 
         * @return builder
         * 
         */
        public Builder validateTrigger(Integer validateTrigger) {
            return validateTrigger(Output.of(validateTrigger));
        }

        public MysqlBackupArgs build() {
            return $;
        }
    }

}
