// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Mysql.MysqlConfigurationArgs;
import com.pulumi.oci.Mysql.inputs.MysqlConfigurationState;
import com.pulumi.oci.Mysql.outputs.MysqlConfigurationInitVariables;
import com.pulumi.oci.Mysql.outputs.MysqlConfigurationVariables;
import com.pulumi.oci.Utilities;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
 * 
 * Creates a new Configuration.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Mysql.MysqlConfiguration;
 * import com.pulumi.oci.Mysql.MysqlConfigurationArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlConfigurationInitVariablesArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlConfigurationVariablesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testMysqlConfiguration = new MysqlConfiguration("testMysqlConfiguration", MysqlConfigurationArgs.builder()
 *             .compartmentId(compartmentId)
 *             .shapeName(testShape.name())
 *             .definedTags(Map.of("foo-namespace.bar-key", "value"))
 *             .description(mysqlConfigurationDescription)
 *             .displayName(mysqlConfigurationDisplayName)
 *             .freeformTags(Map.of("bar-key", "value"))
 *             .initVariables(MysqlConfigurationInitVariablesArgs.builder()
 *                 .lowerCaseTableNames(mysqlConfigurationInitVariablesLowerCaseTableNames)
 *                 .build())
 *             .parentConfigurationId(testConfiguration.id())
 *             .variables(MysqlConfigurationVariablesArgs.builder()
 *                 .autoIncrementIncrement(mysqlConfigurationVariablesAutoIncrementIncrement)
 *                 .autoIncrementOffset(mysqlConfigurationVariablesAutoIncrementOffset)
 *                 .autocommit(mysqlConfigurationVariablesAutocommit)
 *                 .bigTables(mysqlConfigurationVariablesBigTables)
 *                 .binlogExpireLogsSeconds(mysqlConfigurationVariablesBinlogExpireLogsSeconds)
 *                 .binlogGroupCommitSyncDelay(mysqlConfigurationVariablesBinlogGroupCommitSyncDelay)
 *                 .binlogGroupCommitSyncNoDelayCount(mysqlConfigurationVariablesBinlogGroupCommitSyncNoDelayCount)
 *                 .binlogRowMetadata(mysqlConfigurationVariablesBinlogRowMetadata)
 *                 .binlogRowValueOptions(mysqlConfigurationVariablesBinlogRowValueOptions)
 *                 .binlogTransactionCompression(mysqlConfigurationVariablesBinlogTransactionCompression)
 *                 .blockEncryptionMode(mysqlConfigurationVariablesBlockEncryptionMode)
 *                 .characterSetServer(mysqlConfigurationVariablesCharacterSetServer)
 *                 .collationServer(mysqlConfigurationVariablesCollationServer)
 *                 .completionType(mysqlConfigurationVariablesCompletionType)
 *                 .connectTimeout(mysqlConfigurationVariablesConnectTimeout)
 *                 .connectionMemoryChunkSize(mysqlConfigurationVariablesConnectionMemoryChunkSize)
 *                 .connectionMemoryLimit(mysqlConfigurationVariablesConnectionMemoryLimit)
 *                 .cteMaxRecursionDepth(mysqlConfigurationVariablesCteMaxRecursionDepth)
 *                 .defaultAuthenticationPlugin(mysqlConfigurationVariablesDefaultAuthenticationPlugin)
 *                 .explainFormat(mysqlConfigurationVariablesExplainFormat)
 *                 .explicitDefaultsForTimestamp(mysqlConfigurationVariablesExplicitDefaultsForTimestamp)
 *                 .foreignKeyChecks(mysqlConfigurationVariablesForeignKeyChecks)
 *                 .generatedRandomPasswordLength(mysqlConfigurationVariablesGeneratedRandomPasswordLength)
 *                 .globalConnectionMemoryLimit(mysqlConfigurationVariablesGlobalConnectionMemoryLimit)
 *                 .globalConnectionMemoryTracking(mysqlConfigurationVariablesGlobalConnectionMemoryTracking)
 *                 .groupConcatMaxLen(mysqlConfigurationVariablesGroupConcatMaxLen)
 *                 .groupReplicationConsistency(mysqlConfigurationVariablesGroupReplicationConsistency)
 *                 .informationSchemaStatsExpiry(mysqlConfigurationVariablesInformationSchemaStatsExpiry)
 *                 .innodbAdaptiveHashIndex(mysqlConfigurationVariablesInnodbAdaptiveHashIndex)
 *                 .innodbAutoincLockMode(mysqlConfigurationVariablesInnodbAutoincLockMode)
 *                 .innodbBufferPoolDumpPct(mysqlConfigurationVariablesInnodbBufferPoolDumpPct)
 *                 .innodbBufferPoolInstances(mysqlConfigurationVariablesInnodbBufferPoolInstances)
 *                 .innodbBufferPoolSize(mysqlConfigurationVariablesInnodbBufferPoolSize)
 *                 .innodbChangeBuffering(mysqlConfigurationVariablesInnodbChangeBuffering)
 *                 .innodbDdlBufferSize(mysqlConfigurationVariablesInnodbDdlBufferSize)
 *                 .innodbDdlThreads(mysqlConfigurationVariablesInnodbDdlThreads)
 *                 .innodbFtEnableStopword(mysqlConfigurationVariablesInnodbFtEnableStopword)
 *                 .innodbFtMaxTokenSize(mysqlConfigurationVariablesInnodbFtMaxTokenSize)
 *                 .innodbFtMinTokenSize(mysqlConfigurationVariablesInnodbFtMinTokenSize)
 *                 .innodbFtNumWordOptimize(mysqlConfigurationVariablesInnodbFtNumWordOptimize)
 *                 .innodbFtResultCacheLimit(mysqlConfigurationVariablesInnodbFtResultCacheLimit)
 *                 .innodbFtServerStopwordTable(mysqlConfigurationVariablesInnodbFtServerStopwordTable)
 *                 .innodbLockWaitTimeout(mysqlConfigurationVariablesInnodbLockWaitTimeout)
 *                 .innodbLogWriterThreads(mysqlConfigurationVariablesInnodbLogWriterThreads)
 *                 .innodbMaxPurgeLag(mysqlConfigurationVariablesInnodbMaxPurgeLag)
 *                 .innodbMaxPurgeLagDelay(mysqlConfigurationVariablesInnodbMaxPurgeLagDelay)
 *                 .innodbNumaInterleave(mysqlConfigurationVariablesInnodbNumaInterleave)
 *                 .innodbOnlineAlterLogMaxSize(mysqlConfigurationVariablesInnodbOnlineAlterLogMaxSize)
 *                 .innodbRedoLogCapacity(mysqlConfigurationVariablesInnodbRedoLogCapacity)
 *                 .innodbRollbackOnTimeout(mysqlConfigurationVariablesInnodbRollbackOnTimeout)
 *                 .innodbSortBufferSize(mysqlConfigurationVariablesInnodbSortBufferSize)
 *                 .innodbStatsPersistentSamplePages(mysqlConfigurationVariablesInnodbStatsPersistentSamplePages)
 *                 .innodbStatsTransientSamplePages(mysqlConfigurationVariablesInnodbStatsTransientSamplePages)
 *                 .innodbStrictMode(mysqlConfigurationVariablesInnodbStrictMode)
 *                 .innodbUndoLogTruncate(mysqlConfigurationVariablesInnodbUndoLogTruncate)
 *                 .interactiveTimeout(mysqlConfigurationVariablesInteractiveTimeout)
 *                 .joinBufferSize(mysqlConfigurationVariablesJoinBufferSize)
 *                 .localInfile(mysqlConfigurationVariablesLocalInfile)
 *                 .longQueryTime(mysqlConfigurationVariablesLongQueryTime)
 *                 .mandatoryRoles(mysqlConfigurationVariablesMandatoryRoles)
 *                 .maxAllowedPacket(mysqlConfigurationVariablesMaxAllowedPacket)
 *                 .maxBinlogCacheSize(mysqlConfigurationVariablesMaxBinlogCacheSize)
 *                 .maxConnectErrors(mysqlConfigurationVariablesMaxConnectErrors)
 *                 .maxConnections(mysqlConfigurationVariablesMaxConnections)
 *                 .maxExecutionTime(mysqlConfigurationVariablesMaxExecutionTime)
 *                 .maxHeapTableSize(mysqlConfigurationVariablesMaxHeapTableSize)
 *                 .maxPreparedStmtCount(mysqlConfigurationVariablesMaxPreparedStmtCount)
 *                 .maxSeeksForKey(mysqlConfigurationVariablesMaxSeeksForKey)
 *                 .maxUserConnections(mysqlConfigurationVariablesMaxUserConnections)
 *                 .mysqlFirewallMode(mysqlConfigurationVariablesMysqlFirewallMode)
 *                 .mysqlZstdDefaultCompressionLevel(mysqlConfigurationVariablesMysqlZstdDefaultCompressionLevel)
 *                 .mysqlxConnectTimeout(mysqlConfigurationVariablesMysqlxConnectTimeout)
 *                 .mysqlxDeflateDefaultCompressionLevel(mysqlConfigurationVariablesMysqlxDeflateDefaultCompressionLevel)
 *                 .mysqlxDeflateMaxClientCompressionLevel(mysqlConfigurationVariablesMysqlxDeflateMaxClientCompressionLevel)
 *                 .mysqlxDocumentIdUniquePrefix(mysqlConfigurationVariablesMysqlxDocumentIdUniquePrefix)
 *                 .mysqlxEnableHelloNotice(mysqlConfigurationVariablesMysqlxEnableHelloNotice)
 *                 .mysqlxIdleWorkerThreadTimeout(mysqlConfigurationVariablesMysqlxIdleWorkerThreadTimeout)
 *                 .mysqlxInteractiveTimeout(mysqlConfigurationVariablesMysqlxInteractiveTimeout)
 *                 .mysqlxLz4defaultCompressionLevel(mysqlConfigurationVariablesMysqlxLz4defaultCompressionLevel)
 *                 .mysqlxLz4maxClientCompressionLevel(mysqlConfigurationVariablesMysqlxLz4maxClientCompressionLevel)
 *                 .mysqlxMaxAllowedPacket(mysqlConfigurationVariablesMysqlxMaxAllowedPacket)
 *                 .mysqlxMinWorkerThreads(mysqlConfigurationVariablesMysqlxMinWorkerThreads)
 *                 .mysqlxReadTimeout(mysqlConfigurationVariablesMysqlxReadTimeout)
 *                 .mysqlxWaitTimeout(mysqlConfigurationVariablesMysqlxWaitTimeout)
 *                 .mysqlxWriteTimeout(mysqlConfigurationVariablesMysqlxWriteTimeout)
 *                 .mysqlxZstdDefaultCompressionLevel(mysqlConfigurationVariablesMysqlxZstdDefaultCompressionLevel)
 *                 .mysqlxZstdMaxClientCompressionLevel(mysqlConfigurationVariablesMysqlxZstdMaxClientCompressionLevel)
 *                 .netReadTimeout(mysqlConfigurationVariablesNetReadTimeout)
 *                 .netWriteTimeout(mysqlConfigurationVariablesNetWriteTimeout)
 *                 .optimizerSwitch(mysqlConfigurationVariablesOptimizerSwitch)
 *                 .parserMaxMemSize(mysqlConfigurationVariablesParserMaxMemSize)
 *                 .queryAllocBlockSize(mysqlConfigurationVariablesQueryAllocBlockSize)
 *                 .queryPreallocSize(mysqlConfigurationVariablesQueryPreallocSize)
 *                 .rangeOptimizerMaxMemSize(mysqlConfigurationVariablesRangeOptimizerMaxMemSize)
 *                 .regexpTimeLimit(mysqlConfigurationVariablesRegexpTimeLimit)
 *                 .relayLogSpaceLimit(mysqlConfigurationVariablesRelayLogSpaceLimit)
 *                 .replicaNetTimeout(mysqlConfigurationVariablesReplicaNetTimeout)
 *                 .replicaParallelWorkers(mysqlConfigurationVariablesReplicaParallelWorkers)
 *                 .replicaTypeConversions(mysqlConfigurationVariablesReplicaTypeConversions)
 *                 .requireSecureTransport(mysqlConfigurationVariablesRequireSecureTransport)
 *                 .skipNameResolve(mysqlConfigurationVariablesSkipNameResolve)
 *                 .sortBufferSize(mysqlConfigurationVariablesSortBufferSize)
 *                 .sqlGenerateInvisiblePrimaryKey(mysqlConfigurationVariablesSqlGenerateInvisiblePrimaryKey)
 *                 .sqlMode(mysqlConfigurationVariablesSqlMode)
 *                 .sqlRequirePrimaryKey(mysqlConfigurationVariablesSqlRequirePrimaryKey)
 *                 .sqlWarnings(mysqlConfigurationVariablesSqlWarnings)
 *                 .tableDefinitionCache(mysqlConfigurationVariablesTableDefinitionCache)
 *                 .tableOpenCache(mysqlConfigurationVariablesTableOpenCache)
 *                 .temptableMaxRam(mysqlConfigurationVariablesTemptableMaxRam)
 *                 .threadPoolDedicatedListeners(mysqlConfigurationVariablesThreadPoolDedicatedListeners)
 *                 .threadPoolMaxTransactionsLimit(mysqlConfigurationVariablesThreadPoolMaxTransactionsLimit)
 *                 .threadPoolQueryThreadsPerGroup(mysqlConfigurationVariablesThreadPoolQueryThreadsPerGroup)
 *                 .threadPoolSize(mysqlConfigurationVariablesThreadPoolSize)
 *                 .threadPoolTransactionDelay(mysqlConfigurationVariablesThreadPoolTransactionDelay)
 *                 .timeZone(mysqlConfigurationVariablesTimeZone)
 *                 .tmpTableSize(mysqlConfigurationVariablesTmpTableSize)
 *                 .transactionIsolation(mysqlConfigurationVariablesTransactionIsolation)
 *                 .waitTimeout(mysqlConfigurationVariablesWaitTimeout)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * MysqlConfigurations can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration &#34;configurations/{configurationId}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Mysql/mysqlConfiguration:MysqlConfiguration")
public class MysqlConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * The OCID of the compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,String>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) User-provided data about the Configuration.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return (Updatable) User-provided data about the Configuration.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Updatable) The display name of the Configuration.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return (Updatable) The display name of the Configuration.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,String>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    @Export(name="initVariables", refs={MysqlConfigurationInitVariables.class}, tree="[0]")
    private Output<MysqlConfigurationInitVariables> initVariables;

    /**
     * @return User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    public Output<MysqlConfigurationInitVariables> initVariables() {
        return this.initVariables;
    }
    /**
     * The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     * 
     */
    @Export(name="parentConfigurationId", refs={String.class}, tree="[0]")
    private Output<String> parentConfigurationId;

    /**
     * @return The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     * 
     */
    public Output<String> parentConfigurationId() {
        return this.parentConfigurationId;
    }
    /**
     * The name of the associated Shape.
     * 
     */
    @Export(name="shapeName", refs={String.class}, tree="[0]")
    private Output<String> shapeName;

    /**
     * @return The name of the associated Shape.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }
    /**
     * The current state of the Configuration.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the Configuration.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Export(name="systemTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Output<Map<String,String>> systemTags() {
        return this.systemTags;
    }
    /**
     * The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeUpdated;

    /**
     * @return The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * User-defined service variables.
     * 
     */
    @Export(name="variables", refs={MysqlConfigurationVariables.class}, tree="[0]")
    private Output<MysqlConfigurationVariables> variables;

    /**
     * @return User-defined service variables.
     * 
     */
    public Output<MysqlConfigurationVariables> variables() {
        return this.variables;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MysqlConfiguration(java.lang.String name) {
        this(name, MysqlConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MysqlConfiguration(java.lang.String name, MysqlConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MysqlConfiguration(java.lang.String name, MysqlConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MysqlConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable MysqlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static MysqlConfigurationArgs makeArgs(MysqlConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MysqlConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MysqlConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable MysqlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MysqlConfiguration(name, id, state, options);
    }
}
