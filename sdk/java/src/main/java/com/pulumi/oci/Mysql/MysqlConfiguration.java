// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Mysql.MysqlConfigurationArgs;
import com.pulumi.oci.Mysql.inputs.MysqlConfigurationState;
import com.pulumi.oci.Mysql.outputs.MysqlConfigurationInitVariables;
import com.pulumi.oci.Mysql.outputs.MysqlConfigurationVariables;
import com.pulumi.oci.Utilities;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
 * 
 * Creates a new Configuration.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Mysql.MysqlConfiguration;
 * import com.pulumi.oci.Mysql.MysqlConfigurationArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlConfigurationInitVariablesArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlConfigurationVariablesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testMysqlConfiguration = new MysqlConfiguration(&#34;testMysqlConfiguration&#34;, MysqlConfigurationArgs.builder()        
 *             .compartmentId(var_.compartment_id())
 *             .shapeName(oci_mysql_shape.test_shape().name())
 *             .definedTags(Map.of(&#34;foo-namespace.bar-key&#34;, &#34;value&#34;))
 *             .description(var_.mysql_configuration_description())
 *             .displayName(var_.mysql_configuration_display_name())
 *             .freeformTags(Map.of(&#34;bar-key&#34;, &#34;value&#34;))
 *             .initVariables(MysqlConfigurationInitVariablesArgs.builder()
 *                 .lowerCaseTableNames(var_.mysql_configuration_init_variables_lower_case_table_names())
 *                 .build())
 *             .parentConfigurationId(oci_audit_configuration.test_configuration().id())
 *             .variables(MysqlConfigurationVariablesArgs.builder()
 *                 .autocommit(var_.mysql_configuration_variables_autocommit())
 *                 .bigTables(var_.mysql_configuration_variables_big_tables())
 *                 .binlogExpireLogsSeconds(var_.mysql_configuration_variables_binlog_expire_logs_seconds())
 *                 .binlogRowMetadata(var_.mysql_configuration_variables_binlog_row_metadata())
 *                 .binlogRowValueOptions(var_.mysql_configuration_variables_binlog_row_value_options())
 *                 .binlogTransactionCompression(var_.mysql_configuration_variables_binlog_transaction_compression())
 *                 .completionType(var_.mysql_configuration_variables_completion_type())
 *                 .connectTimeout(var_.mysql_configuration_variables_connect_timeout())
 *                 .connectionMemoryChunkSize(var_.mysql_configuration_variables_connection_memory_chunk_size())
 *                 .connectionMemoryLimit(var_.mysql_configuration_variables_connection_memory_limit())
 *                 .cteMaxRecursionDepth(var_.mysql_configuration_variables_cte_max_recursion_depth())
 *                 .defaultAuthenticationPlugin(var_.mysql_configuration_variables_default_authentication_plugin())
 *                 .foreignKeyChecks(var_.mysql_configuration_variables_foreign_key_checks())
 *                 .generatedRandomPasswordLength(var_.mysql_configuration_variables_generated_random_password_length())
 *                 .globalConnectionMemoryLimit(var_.mysql_configuration_variables_global_connection_memory_limit())
 *                 .globalConnectionMemoryTracking(var_.mysql_configuration_variables_global_connection_memory_tracking())
 *                 .groupReplicationConsistency(var_.mysql_configuration_variables_group_replication_consistency())
 *                 .informationSchemaStatsExpiry(var_.mysql_configuration_variables_information_schema_stats_expiry())
 *                 .innodbBufferPoolDumpPct(var_.mysql_configuration_variables_innodb_buffer_pool_dump_pct())
 *                 .innodbBufferPoolInstances(var_.mysql_configuration_variables_innodb_buffer_pool_instances())
 *                 .innodbBufferPoolSize(var_.mysql_configuration_variables_innodb_buffer_pool_size())
 *                 .innodbDdlBufferSize(var_.mysql_configuration_variables_innodb_ddl_buffer_size())
 *                 .innodbDdlThreads(var_.mysql_configuration_variables_innodb_ddl_threads())
 *                 .innodbFtEnableStopword(var_.mysql_configuration_variables_innodb_ft_enable_stopword())
 *                 .innodbFtMaxTokenSize(var_.mysql_configuration_variables_innodb_ft_max_token_size())
 *                 .innodbFtMinTokenSize(var_.mysql_configuration_variables_innodb_ft_min_token_size())
 *                 .innodbFtNumWordOptimize(var_.mysql_configuration_variables_innodb_ft_num_word_optimize())
 *                 .innodbFtResultCacheLimit(var_.mysql_configuration_variables_innodb_ft_result_cache_limit())
 *                 .innodbFtServerStopwordTable(var_.mysql_configuration_variables_innodb_ft_server_stopword_table())
 *                 .innodbLockWaitTimeout(var_.mysql_configuration_variables_innodb_lock_wait_timeout())
 *                 .innodbLogWriterThreads(var_.mysql_configuration_variables_innodb_log_writer_threads())
 *                 .innodbMaxPurgeLag(var_.mysql_configuration_variables_innodb_max_purge_lag())
 *                 .innodbMaxPurgeLagDelay(var_.mysql_configuration_variables_innodb_max_purge_lag_delay())
 *                 .innodbStatsPersistentSamplePages(var_.mysql_configuration_variables_innodb_stats_persistent_sample_pages())
 *                 .innodbStatsTransientSamplePages(var_.mysql_configuration_variables_innodb_stats_transient_sample_pages())
 *                 .interactiveTimeout(var_.mysql_configuration_variables_interactive_timeout())
 *                 .localInfile(var_.mysql_configuration_variables_local_infile())
 *                 .mandatoryRoles(var_.mysql_configuration_variables_mandatory_roles())
 *                 .maxAllowedPacket(var_.mysql_configuration_variables_max_allowed_packet())
 *                 .maxBinlogCacheSize(var_.mysql_configuration_variables_max_binlog_cache_size())
 *                 .maxConnectErrors(var_.mysql_configuration_variables_max_connect_errors())
 *                 .maxConnections(var_.mysql_configuration_variables_max_connections())
 *                 .maxExecutionTime(var_.mysql_configuration_variables_max_execution_time())
 *                 .maxHeapTableSize(var_.mysql_configuration_variables_max_heap_table_size())
 *                 .maxPreparedStmtCount(var_.mysql_configuration_variables_max_prepared_stmt_count())
 *                 .mysqlFirewallMode(var_.mysql_configuration_variables_mysql_firewall_mode())
 *                 .mysqlZstdDefaultCompressionLevel(var_.mysql_configuration_variables_mysql_zstd_default_compression_level())
 *                 .mysqlxConnectTimeout(var_.mysql_configuration_variables_mysqlx_connect_timeout())
 *                 .mysqlxDeflateDefaultCompressionLevel(var_.mysql_configuration_variables_mysqlx_deflate_default_compression_level())
 *                 .mysqlxDeflateMaxClientCompressionLevel(var_.mysql_configuration_variables_mysqlx_deflate_max_client_compression_level())
 *                 .mysqlxDocumentIdUniquePrefix(var_.mysql_configuration_variables_mysqlx_document_id_unique_prefix())
 *                 .mysqlxEnableHelloNotice(var_.mysql_configuration_variables_mysqlx_enable_hello_notice())
 *                 .mysqlxIdleWorkerThreadTimeout(var_.mysql_configuration_variables_mysqlx_idle_worker_thread_timeout())
 *                 .mysqlxInteractiveTimeout(var_.mysql_configuration_variables_mysqlx_interactive_timeout())
 *                 .mysqlxLz4defaultCompressionLevel(var_.mysql_configuration_variables_mysqlx_lz4default_compression_level())
 *                 .mysqlxLz4maxClientCompressionLevel(var_.mysql_configuration_variables_mysqlx_lz4max_client_compression_level())
 *                 .mysqlxMaxAllowedPacket(var_.mysql_configuration_variables_mysqlx_max_allowed_packet())
 *                 .mysqlxMinWorkerThreads(var_.mysql_configuration_variables_mysqlx_min_worker_threads())
 *                 .mysqlxReadTimeout(var_.mysql_configuration_variables_mysqlx_read_timeout())
 *                 .mysqlxWaitTimeout(var_.mysql_configuration_variables_mysqlx_wait_timeout())
 *                 .mysqlxWriteTimeout(var_.mysql_configuration_variables_mysqlx_write_timeout())
 *                 .mysqlxZstdDefaultCompressionLevel(var_.mysql_configuration_variables_mysqlx_zstd_default_compression_level())
 *                 .mysqlxZstdMaxClientCompressionLevel(var_.mysql_configuration_variables_mysqlx_zstd_max_client_compression_level())
 *                 .netReadTimeout(var_.mysql_configuration_variables_net_read_timeout())
 *                 .netWriteTimeout(var_.mysql_configuration_variables_net_write_timeout())
 *                 .parserMaxMemSize(var_.mysql_configuration_variables_parser_max_mem_size())
 *                 .queryAllocBlockSize(var_.mysql_configuration_variables_query_alloc_block_size())
 *                 .queryPreallocSize(var_.mysql_configuration_variables_query_prealloc_size())
 *                 .regexpTimeLimit(var_.mysql_configuration_variables_regexp_time_limit())
 *                 .sortBufferSize(var_.mysql_configuration_variables_sort_buffer_size())
 *                 .sqlMode(var_.mysql_configuration_variables_sql_mode())
 *                 .sqlRequirePrimaryKey(var_.mysql_configuration_variables_sql_require_primary_key())
 *                 .sqlWarnings(var_.mysql_configuration_variables_sql_warnings())
 *                 .threadPoolDedicatedListeners(var_.mysql_configuration_variables_thread_pool_dedicated_listeners())
 *                 .threadPoolMaxTransactionsLimit(var_.mysql_configuration_variables_thread_pool_max_transactions_limit())
 *                 .timeZone(var_.mysql_configuration_variables_time_zone())
 *                 .tmpTableSize(var_.mysql_configuration_variables_tmp_table_size())
 *                 .transactionIsolation(var_.mysql_configuration_variables_transaction_isolation())
 *                 .waitTimeout(var_.mysql_configuration_variables_wait_timeout())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * MysqlConfigurations can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration &#34;configurations/{configurationId}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Mysql/mysqlConfiguration:MysqlConfiguration")
public class MysqlConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * The OCID of the compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> definedTags() {
        return Codegen.optional(this.definedTags);
    }
    /**
     * (Updatable) User-provided data about the Configuration.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return (Updatable) User-provided data about the Configuration.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (Updatable) The display name of the Configuration.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return (Updatable) The display name of the Configuration.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> freeformTags() {
        return Codegen.optional(this.freeformTags);
    }
    /**
     * User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    @Export(name="initVariables", refs={MysqlConfigurationInitVariables.class}, tree="[0]")
    private Output</* @Nullable */ MysqlConfigurationInitVariables> initVariables;

    /**
     * @return User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    public Output<Optional<MysqlConfigurationInitVariables>> initVariables() {
        return Codegen.optional(this.initVariables);
    }
    /**
     * The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     * 
     */
    @Export(name="parentConfigurationId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parentConfigurationId;

    /**
     * @return The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     * 
     */
    public Output<Optional<String>> parentConfigurationId() {
        return Codegen.optional(this.parentConfigurationId);
    }
    /**
     * The name of the associated Shape.
     * 
     */
    @Export(name="shapeName", refs={String.class}, tree="[0]")
    private Output<String> shapeName;

    /**
     * @return The name of the associated Shape.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }
    /**
     * The current state of the Configuration.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return The current state of the Configuration.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeCreated;

    /**
     * @return The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<Optional<String>> timeCreated() {
        return Codegen.optional(this.timeCreated);
    }
    /**
     * The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeUpdated;

    /**
     * @return The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<Optional<String>> timeUpdated() {
        return Codegen.optional(this.timeUpdated);
    }
    /**
     * The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * User-defined service variables.
     * 
     */
    @Export(name="variables", refs={MysqlConfigurationVariables.class}, tree="[0]")
    private Output</* @Nullable */ MysqlConfigurationVariables> variables;

    /**
     * @return User-defined service variables.
     * 
     */
    public Output<Optional<MysqlConfigurationVariables>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MysqlConfiguration(String name) {
        this(name, MysqlConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MysqlConfiguration(String name, MysqlConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MysqlConfiguration(String name, MysqlConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, args == null ? MysqlConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MysqlConfiguration(String name, Output<String> id, @Nullable MysqlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MysqlConfiguration get(String name, Output<String> id, @Nullable MysqlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MysqlConfiguration(name, id, state, options);
    }
}
