// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Mysql.MysqlDbSystemArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemState;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemBackupPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemChannel;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemCurrentPlacement;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemEndpoint;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemHeatWaveCluster;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemMaintenance;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemPointInTimeRecoveryDetail;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemSource;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Mysql Db System resource in Oracle Cloud Infrastructure MySQL Database service.
 * 
 * Creates and launches a DB System.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Mysql.MysqlDbSystem;
 * import com.pulumi.oci.Mysql.MysqlDbSystemArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlDbSystemBackupPolicyArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlDbSystemBackupPolicyPitrPolicyArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlDbSystemDeletionPolicyArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlDbSystemMaintenanceArgs;
 * import com.pulumi.oci.Mysql.inputs.MysqlDbSystemSourceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testMysqlDbSystem = new MysqlDbSystem(&#34;testMysqlDbSystem&#34;, MysqlDbSystemArgs.builder()        
 *             .availabilityDomain(var_.mysql_db_system_availability_domain())
 *             .compartmentId(var_.compartment_id())
 *             .shapeName(var_.mysql_shape_name())
 *             .subnetId(oci_core_subnet.test_subnet().id())
 *             .adminPassword(var_.mysql_db_system_admin_password())
 *             .adminUsername(var_.mysql_db_system_admin_username())
 *             .backupPolicy(MysqlDbSystemBackupPolicyArgs.builder()
 *                 .definedTags(Map.of(&#34;foo-namespace.bar-key&#34;, &#34;value&#34;))
 *                 .freeformTags(Map.of(&#34;bar-key&#34;, &#34;value&#34;))
 *                 .isEnabled(var_.mysql_db_system_backup_policy_is_enabled())
 *                 .pitrPolicy(MysqlDbSystemBackupPolicyPitrPolicyArgs.builder()
 *                     .isEnabled(var_.mysql_db_system_backup_policy_pitr_policy_is_enabled())
 *                     .build())
 *                 .retentionInDays(var_.mysql_db_system_backup_policy_retention_in_days())
 *                 .windowStartTime(var_.mysql_db_system_backup_policy_window_start_time())
 *                 .build())
 *             .configurationId(oci_audit_configuration.test_configuration().id())
 *             .crashRecovery(var_.mysql_db_system_crash_recovery())
 *             .dataStorageSizeInGb(var_.mysql_db_system_data_storage_size_in_gb())
 *             .databaseManagement(var_.mysql_db_system_database_management())
 *             .definedTags(Map.of(&#34;foo-namespace.bar-key&#34;, &#34;value&#34;))
 *             .deletionPolicies(MysqlDbSystemDeletionPolicyArgs.builder()
 *                 .automaticBackupRetention(var_.mysql_db_system_deletion_policy_automatic_backup_retention())
 *                 .finalBackup(var_.mysql_db_system_deletion_policy_final_backup())
 *                 .isDeleteProtected(var_.mysql_db_system_deletion_policy_is_delete_protected())
 *                 .build())
 *             .description(var_.mysql_db_system_description())
 *             .displayName(var_.mysql_db_system_display_name())
 *             .faultDomain(var_.mysql_db_system_fault_domain())
 *             .freeformTags(Map.of(&#34;bar-key&#34;, &#34;value&#34;))
 *             .hostnameLabel(var_.mysql_db_system_hostname_label())
 *             .ipAddress(var_.mysql_db_system_ip_address())
 *             .isHighlyAvailable(var_.mysql_db_system_is_highly_available())
 *             .maintenance(MysqlDbSystemMaintenanceArgs.builder()
 *                 .windowStartTime(var_.mysql_db_system_maintenance_window_start_time())
 *                 .build())
 *             .port(var_.mysql_db_system_port())
 *             .portX(var_.mysql_db_system_port_x())
 *             .source(MysqlDbSystemSourceArgs.builder()
 *                 .sourceType(var_.mysql_db_system_source_source_type())
 *                 .backupId(oci_mysql_mysql_backup.test_backup().id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * MysqlDbSystems can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Mysql/mysqlDbSystem:MysqlDbSystem test_mysql_db_system &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Mysql/mysqlDbSystem:MysqlDbSystem")
public class MysqlDbSystem extends com.pulumi.resources.CustomResource {
    /**
     * The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    @Export(name="adminPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminPassword;

    /**
     * @return The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    public Output<Optional<String>> adminPassword() {
        return Codegen.optional(this.adminPassword);
    }
    /**
     * The username for the administrative user.
     * 
     */
    @Export(name="adminUsername", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminUsername;

    /**
     * @return The username for the administrative user.
     * 
     */
    public Output<Optional<String>> adminUsername() {
        return Codegen.optional(this.adminUsername);
    }
    /**
     * The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the availability domain in which the DB System is placed.
     * 
     */
    @Export(name="availabilityDomain", refs={String.class}, tree="[0]")
    private Output<String> availabilityDomain;

    /**
     * @return The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the availability domain in which the DB System is placed.
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    @Export(name="backupPolicy", refs={MysqlDbSystemBackupPolicy.class}, tree="[0]")
    private Output</* @Nullable */ MysqlDbSystemBackupPolicy> backupPolicy;

    /**
     * @return (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    public Output<Optional<MysqlDbSystemBackupPolicy>> backupPolicy() {
        return Codegen.optional(this.backupPolicy);
    }
    /**
     * A list with a summary of all the Channels attached to the DB System.
     * 
     */
    @Export(name="channels", refs={List.class,MysqlDbSystemChannel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemChannel>> channels;

    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public Output<Optional<List<MysqlDbSystemChannel>>> channels() {
        return Codegen.optional(this.channels);
    }
    /**
     * The OCID of the compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) The OCID of the Configuration to be used for this DB System.
     * 
     */
    @Export(name="configurationId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configurationId;

    /**
     * @return (Updatable) The OCID of the Configuration to be used for this DB System.
     * 
     */
    public Output<Optional<String>> configurationId() {
        return Codegen.optional(this.configurationId);
    }
    /**
     * (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    @Export(name="crashRecovery", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> crashRecovery;

    /**
     * @return (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Output<Optional<String>> crashRecovery() {
        return Codegen.optional(this.crashRecovery);
    }
    /**
     * The availability domain and fault domain a DB System is placed in.
     * 
     */
    @Export(name="currentPlacements", refs={List.class,MysqlDbSystemCurrentPlacement.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemCurrentPlacement>> currentPlacements;

    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public Output<Optional<List<MysqlDbSystemCurrentPlacement>>> currentPlacements() {
        return Codegen.optional(this.currentPlacements);
    }
    /**
     * (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    @Export(name="dataStorageSizeInGb", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dataStorageSizeInGb;

    /**
     * @return (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    public Output<Optional<Integer>> dataStorageSizeInGb() {
        return Codegen.optional(this.dataStorageSizeInGb);
    }
    /**
     * (Updatable) Whether to enable monitoring via the Database Management service.
     * 
     */
    @Export(name="databaseManagement", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> databaseManagement;

    /**
     * @return (Updatable) Whether to enable monitoring via the Database Management service.
     * 
     */
    public Output<Optional<String>> databaseManagement() {
        return Codegen.optional(this.databaseManagement);
    }
    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> definedTags() {
        return Codegen.optional(this.definedTags);
    }
    /**
     * (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    @Export(name="deletionPolicies", refs={List.class,MysqlDbSystemDeletionPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemDeletionPolicy>> deletionPolicies;

    /**
     * @return (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    public Output<Optional<List<MysqlDbSystemDeletionPolicy>>> deletionPolicies() {
        return Codegen.optional(this.deletionPolicies);
    }
    /**
     * (Updatable) User-provided data about the DB System.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return (Updatable) User-provided data about the DB System.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * The network endpoints available for this DB System.
     * 
     */
    @Export(name="endpoints", refs={List.class,MysqlDbSystemEndpoint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemEndpoint>> endpoints;

    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public Output<Optional<List<MysqlDbSystemEndpoint>>> endpoints() {
        return Codegen.optional(this.endpoints);
    }
    /**
     * The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the fault domain in which the DB System is placed.
     * 
     */
    @Export(name="faultDomain", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> faultDomain;

    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the fault domain in which the DB System is placed.
     * 
     */
    public Output<Optional<String>> faultDomain() {
        return Codegen.optional(this.faultDomain);
    }
    /**
     * (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> freeformTags() {
        return Codegen.optional(this.freeformTags);
    }
    /**
     * A summary of a HeatWave cluster.
     * 
     */
    @Export(name="heatWaveClusters", refs={List.class,MysqlDbSystemHeatWaveCluster.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemHeatWaveCluster>> heatWaveClusters;

    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public Output<Optional<List<MysqlDbSystemHeatWaveCluster>>> heatWaveClusters() {
        return Codegen.optional(this.heatWaveClusters);
    }
    /**
     * The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
     * 
     * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    @Export(name="hostnameLabel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostnameLabel;

    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
     * 
     * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public Output<Optional<String>> hostnameLabel() {
        return Codegen.optional(this.hostnameLabel);
    }
    /**
     * The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Export(name="ipAddress", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Output<Optional<String>> ipAddress() {
        return Codegen.optional(this.ipAddress);
    }
    /**
     * If the DB System has a HeatWave Cluster attached.
     * 
     */
    @Export(name="isHeatWaveClusterAttached", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isHeatWaveClusterAttached;

    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    public Output<Optional<Boolean>> isHeatWaveClusterAttached() {
        return Codegen.optional(this.isHeatWaveClusterAttached);
    }
    /**
     * (Updatable) Specifies if the DB System is highly available.
     * 
     * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
     * 
     */
    @Export(name="isHighlyAvailable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isHighlyAvailable;

    /**
     * @return (Updatable) Specifies if the DB System is highly available.
     * 
     * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
     * 
     */
    public Output<Optional<Boolean>> isHighlyAvailable() {
        return Codegen.optional(this.isHighlyAvailable);
    }
    /**
     * Additional information about the current lifecycleState.
     * 
     */
    @Export(name="lifecycleDetails", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Output<Optional<String>> lifecycleDetails() {
        return Codegen.optional(this.lifecycleDetails);
    }
    /**
     * (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    @Export(name="maintenance", refs={MysqlDbSystemMaintenance.class}, tree="[0]")
    private Output</* @Nullable */ MysqlDbSystemMaintenance> maintenance;

    /**
     * @return (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    public Output<Optional<MysqlDbSystemMaintenance>> maintenance() {
        return Codegen.optional(this.maintenance);
    }
    /**
     * The specific MySQL version identifier.
     * 
     */
    @Export(name="mysqlVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mysqlVersion;

    /**
     * @return The specific MySQL version identifier.
     * 
     */
    public Output<Optional<String>> mysqlVersion() {
        return Codegen.optional(this.mysqlVersion);
    }
    /**
     * Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    @Export(name="pointInTimeRecoveryDetails", refs={List.class,MysqlDbSystemPointInTimeRecoveryDetail.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MysqlDbSystemPointInTimeRecoveryDetail>> pointInTimeRecoveryDetails;

    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    public Output<Optional<List<MysqlDbSystemPointInTimeRecoveryDetail>>> pointInTimeRecoveryDetails() {
        return Codegen.optional(this.pointInTimeRecoveryDetails);
    }
    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    @Export(name="portX", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> portX;

    /**
     * @return The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    public Output<Optional<Integer>> portX() {
        return Codegen.optional(this.portX);
    }
    /**
     * (Updatable) The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    @Export(name="shapeName", refs={String.class}, tree="[0]")
    private Output<String> shapeName;

    /**
     * @return (Updatable) The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }
    /**
     * It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="shutdownType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownType;

    /**
     * @return It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<String>> shutdownType() {
        return Codegen.optional(this.shutdownType);
    }
    /**
     * Parameters detailing how to provision the initial data of the system.
     * 
     */
    @Export(name="source", refs={MysqlDbSystemSource.class}, tree="[0]")
    private Output</* @Nullable */ MysqlDbSystemSource> source;

    /**
     * @return Parameters detailing how to provision the initial data of the system.
     * 
     */
    public Output<Optional<MysqlDbSystemSource>> source() {
        return Codegen.optional(this.source);
    }
    /**
     * (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * The OCID of the subnet the DB System is associated with.
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * The date and time the DB System was created.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeCreated;

    /**
     * @return The date and time the DB System was created.
     * 
     */
    public Output<Optional<String>> timeCreated() {
        return Codegen.optional(this.timeCreated);
    }
    /**
     * The time the DB System was last updated.
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeUpdated;

    /**
     * @return The time the DB System was last updated.
     * 
     */
    public Output<Optional<String>> timeUpdated() {
        return Codegen.optional(this.timeUpdated);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MysqlDbSystem(String name) {
        this(name, MysqlDbSystemArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MysqlDbSystem(String name, MysqlDbSystemArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MysqlDbSystem(String name, MysqlDbSystemArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, args == null ? MysqlDbSystemArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MysqlDbSystem(String name, Output<String> id, @Nullable MysqlDbSystemState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "adminPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MysqlDbSystem get(String name, Output<String> id, @Nullable MysqlDbSystemState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MysqlDbSystem(name, id, state, options);
    }
}
