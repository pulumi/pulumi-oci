// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotBackupPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotDataStorageArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotDeletionPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotEndpointArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotMaintenanceArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotSecureConnectionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupDbSystemSnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupDbSystemSnapshotArgs Empty = new MysqlBackupDbSystemSnapshotArgs();

    /**
     * The username for the administrative user.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return The username for the administrative user.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * The Availability Domain where the primary DB System should be located.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The Availability Domain where the primary DB System should be located.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * The Backup policy for the DB System.
     * 
     */
    @Import(name="backupPolicies")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyArgs>> backupPolicies;

    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotBackupPolicyArgs>>> backupPolicies() {
        return Optional.ofNullable(this.backupPolicies);
    }

    /**
     * (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    @Import(name="crashRecovery")
    private @Nullable Output<String> crashRecovery;

    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Optional<Output<String>> crashRecovery() {
        return Optional.ofNullable(this.crashRecovery);
    }

    /**
     * DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    @Import(name="dataStorageSizeInGb")
    private @Nullable Output<Integer> dataStorageSizeInGb;

    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    public Optional<Output<Integer>> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }

    /**
     * Data Storage information.
     * 
     */
    @Import(name="dataStorages")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotDataStorageArgs>> dataStorages;

    /**
     * @return Data Storage information.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotDataStorageArgs>>> dataStorages() {
        return Optional.ofNullable(this.dataStorages);
    }

    /**
     * Whether to enable monitoring via the Database Management service.
     * 
     */
    @Import(name="databaseManagement")
    private @Nullable Output<String> databaseManagement;

    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    public Optional<Output<String>> databaseManagement() {
        return Optional.ofNullable(this.databaseManagement);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The Deletion policy for the DB System.
     * 
     */
    @Import(name="deletionPolicies")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotDeletionPolicyArgs>> deletionPolicies;

    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotDeletionPolicyArgs>>> deletionPolicies() {
        return Optional.ofNullable(this.deletionPolicies);
    }

    /**
     * (Updatable) A user-supplied description for the backup.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user-supplied description for the backup.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-supplied display name for the backup.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-supplied display name for the backup.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The network endpoints available for this DB System.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotEndpointArgs>> endpoints;

    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The name of the Fault Domain the DB System is located in.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The name of the Fault Domain the DB System is located in.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    @Import(name="hostnameLabel")
    private @Nullable Output<String> hostnameLabel;

    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public Optional<Output<String>> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }

    /**
     * OCID of the backup itself
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return OCID of the backup itself
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Specifies if the DB System is highly available.
     * 
     */
    @Import(name="isHighlyAvailable")
    private @Nullable Output<Boolean> isHighlyAvailable;

    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    public Optional<Output<Boolean>> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }

    /**
     * The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    @Import(name="maintenances")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotMaintenanceArgs>> maintenances;

    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotMaintenanceArgs>>> maintenances() {
        return Optional.ofNullable(this.maintenances);
    }

    /**
     * The MySQL server version of the DB System used for backup.
     * 
     */
    @Import(name="mysqlVersion")
    private @Nullable Output<String> mysqlVersion;

    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public Optional<Output<String>> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }

    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    @Import(name="portX")
    private @Nullable Output<Integer> portX;

    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Output<Integer>> portX() {
        return Optional.ofNullable(this.portX);
    }

    /**
     * The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Secure connection configuration details.
     * 
     */
    @Import(name="secureConnections")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotSecureConnectionArgs>> secureConnections;

    /**
     * @return Secure connection configuration details.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotSecureConnectionArgs>>> secureConnections() {
        return Optional.ofNullable(this.secureConnections);
    }

    /**
     * The shape of the DB System instance used for backup.
     * 
     */
    @Import(name="shapeName")
    private @Nullable Output<String> shapeName;

    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public Optional<Output<String>> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }

    /**
     * The OCID of the subnet the DB System is associated with.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private MysqlBackupDbSystemSnapshotArgs() {}

    private MysqlBackupDbSystemSnapshotArgs(MysqlBackupDbSystemSnapshotArgs $) {
        this.adminUsername = $.adminUsername;
        this.availabilityDomain = $.availabilityDomain;
        this.backupPolicies = $.backupPolicies;
        this.compartmentId = $.compartmentId;
        this.configurationId = $.configurationId;
        this.crashRecovery = $.crashRecovery;
        this.dataStorageSizeInGb = $.dataStorageSizeInGb;
        this.dataStorages = $.dataStorages;
        this.databaseManagement = $.databaseManagement;
        this.definedTags = $.definedTags;
        this.deletionPolicies = $.deletionPolicies;
        this.description = $.description;
        this.displayName = $.displayName;
        this.endpoints = $.endpoints;
        this.faultDomain = $.faultDomain;
        this.freeformTags = $.freeformTags;
        this.hostnameLabel = $.hostnameLabel;
        this.id = $.id;
        this.ipAddress = $.ipAddress;
        this.isHighlyAvailable = $.isHighlyAvailable;
        this.maintenances = $.maintenances;
        this.mysqlVersion = $.mysqlVersion;
        this.port = $.port;
        this.portX = $.portX;
        this.region = $.region;
        this.secureConnections = $.secureConnections;
        this.shapeName = $.shapeName;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupDbSystemSnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupDbSystemSnapshotArgs $;

        public Builder() {
            $ = new MysqlBackupDbSystemSnapshotArgs();
        }

        public Builder(MysqlBackupDbSystemSnapshotArgs defaults) {
            $ = new MysqlBackupDbSystemSnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param availabilityDomain The Availability Domain where the primary DB System should be located.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The Availability Domain where the primary DB System should be located.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param backupPolicies The Backup policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(@Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyArgs>> backupPolicies) {
            $.backupPolicies = backupPolicies;
            return this;
        }

        /**
         * @param backupPolicies The Backup policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(List<MysqlBackupDbSystemSnapshotBackupPolicyArgs> backupPolicies) {
            return backupPolicies(Output.of(backupPolicies));
        }

        /**
         * @param backupPolicies The Backup policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(MysqlBackupDbSystemSnapshotBackupPolicyArgs... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configurationId The OCID of the Configuration to be used for Instances in this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId The OCID of the Configuration to be used for Instances in this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param crashRecovery Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(@Nullable Output<String> crashRecovery) {
            $.crashRecovery = crashRecovery;
            return this;
        }

        /**
         * @param crashRecovery Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(String crashRecovery) {
            return crashRecovery(Output.of(crashRecovery));
        }

        /**
         * @param dataStorageSizeInGb DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(@Nullable Output<Integer> dataStorageSizeInGb) {
            $.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }

        /**
         * @param dataStorageSizeInGb DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            return dataStorageSizeInGb(Output.of(dataStorageSizeInGb));
        }

        /**
         * @param dataStorages Data Storage information.
         * 
         * @return builder
         * 
         */
        public Builder dataStorages(@Nullable Output<List<MysqlBackupDbSystemSnapshotDataStorageArgs>> dataStorages) {
            $.dataStorages = dataStorages;
            return this;
        }

        /**
         * @param dataStorages Data Storage information.
         * 
         * @return builder
         * 
         */
        public Builder dataStorages(List<MysqlBackupDbSystemSnapshotDataStorageArgs> dataStorages) {
            return dataStorages(Output.of(dataStorages));
        }

        /**
         * @param dataStorages Data Storage information.
         * 
         * @return builder
         * 
         */
        public Builder dataStorages(MysqlBackupDbSystemSnapshotDataStorageArgs... dataStorages) {
            return dataStorages(List.of(dataStorages));
        }

        /**
         * @param databaseManagement Whether to enable monitoring via the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagement(@Nullable Output<String> databaseManagement) {
            $.databaseManagement = databaseManagement;
            return this;
        }

        /**
         * @param databaseManagement Whether to enable monitoring via the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagement(String databaseManagement) {
            return databaseManagement(Output.of(databaseManagement));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param deletionPolicies The Deletion policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(@Nullable Output<List<MysqlBackupDbSystemSnapshotDeletionPolicyArgs>> deletionPolicies) {
            $.deletionPolicies = deletionPolicies;
            return this;
        }

        /**
         * @param deletionPolicies The Deletion policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(List<MysqlBackupDbSystemSnapshotDeletionPolicyArgs> deletionPolicies) {
            return deletionPolicies(Output.of(deletionPolicies));
        }

        /**
         * @param deletionPolicies The Deletion policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(MysqlBackupDbSystemSnapshotDeletionPolicyArgs... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<MysqlBackupDbSystemSnapshotEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<MysqlBackupDbSystemSnapshotEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(MysqlBackupDbSystemSnapshotEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param faultDomain The name of the Fault Domain the DB System is located in.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The name of the Fault Domain the DB System is located in.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param hostnameLabel The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(@Nullable Output<String> hostnameLabel) {
            $.hostnameLabel = hostnameLabel;
            return this;
        }

        /**
         * @param hostnameLabel The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(String hostnameLabel) {
            return hostnameLabel(Output.of(hostnameLabel));
        }

        /**
         * @param id OCID of the backup itself
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id OCID of the backup itself
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isHighlyAvailable Specifies if the DB System is highly available.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(@Nullable Output<Boolean> isHighlyAvailable) {
            $.isHighlyAvailable = isHighlyAvailable;
            return this;
        }

        /**
         * @param isHighlyAvailable Specifies if the DB System is highly available.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            return isHighlyAvailable(Output.of(isHighlyAvailable));
        }

        /**
         * @param maintenances The Maintenance Policy for the DB System or Read Replica that this model is included in.
         * 
         * @return builder
         * 
         */
        public Builder maintenances(@Nullable Output<List<MysqlBackupDbSystemSnapshotMaintenanceArgs>> maintenances) {
            $.maintenances = maintenances;
            return this;
        }

        /**
         * @param maintenances The Maintenance Policy for the DB System or Read Replica that this model is included in.
         * 
         * @return builder
         * 
         */
        public Builder maintenances(List<MysqlBackupDbSystemSnapshotMaintenanceArgs> maintenances) {
            return maintenances(Output.of(maintenances));
        }

        /**
         * @param maintenances The Maintenance Policy for the DB System or Read Replica that this model is included in.
         * 
         * @return builder
         * 
         */
        public Builder maintenances(MysqlBackupDbSystemSnapshotMaintenanceArgs... maintenances) {
            return maintenances(List.of(maintenances));
        }

        /**
         * @param mysqlVersion The MySQL server version of the DB System used for backup.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(@Nullable Output<String> mysqlVersion) {
            $.mysqlVersion = mysqlVersion;
            return this;
        }

        /**
         * @param mysqlVersion The MySQL server version of the DB System used for backup.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(String mysqlVersion) {
            return mysqlVersion(Output.of(mysqlVersion));
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portX The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(@Nullable Output<Integer> portX) {
            $.portX = portX;
            return this;
        }

        /**
         * @param portX The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(Integer portX) {
            return portX(Output.of(portX));
        }

        /**
         * @param region The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secureConnections Secure connection configuration details.
         * 
         * @return builder
         * 
         */
        public Builder secureConnections(@Nullable Output<List<MysqlBackupDbSystemSnapshotSecureConnectionArgs>> secureConnections) {
            $.secureConnections = secureConnections;
            return this;
        }

        /**
         * @param secureConnections Secure connection configuration details.
         * 
         * @return builder
         * 
         */
        public Builder secureConnections(List<MysqlBackupDbSystemSnapshotSecureConnectionArgs> secureConnections) {
            return secureConnections(Output.of(secureConnections));
        }

        /**
         * @param secureConnections Secure connection configuration details.
         * 
         * @return builder
         * 
         */
        public Builder secureConnections(MysqlBackupDbSystemSnapshotSecureConnectionArgs... secureConnections) {
            return secureConnections(List.of(secureConnections));
        }

        /**
         * @param shapeName The shape of the DB System instance used for backup.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The shape of the DB System instance used for backup.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public MysqlBackupDbSystemSnapshotArgs build() {
            return $;
        }
    }

}
