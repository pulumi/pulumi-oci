// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupDbSystemSnapshotBackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupDbSystemSnapshotBackupPolicyArgs Empty = new MysqlBackupDbSystemSnapshotBackupPolicyArgs();

    /**
     * List of policies of a DB system to schedule cross-region DB system backup copy.
     * 
     */
    @Import(name="copyPolicies")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs>> copyPolicies;

    /**
     * @return List of policies of a DB system to schedule cross-region DB system backup copy.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs>>> copyPolicies() {
        return Optional.ofNullable(this.copyPolicies);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Specifies if the DB System read endpoint is enabled or not.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Specifies if the DB System read endpoint is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * The PITR policy for the DB System.
     * 
     */
    @Import(name="pitrPolicies")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs>> pitrPolicies;

    /**
     * @return The PITR policy for the DB System.
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs>>> pitrPolicies() {
        return Optional.ofNullable(this.pitrPolicies);
    }

    /**
     * (Updatable) Number of days to retain this backup.
     * 
     */
    @Import(name="retentionInDays")
    private @Nullable Output<Integer> retentionInDays;

    /**
     * @return (Updatable) Number of days to retain this backup.
     * 
     */
    public Optional<Output<Integer>> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }

    /**
     * (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    @Import(name="softDelete")
    private @Nullable Output<String> softDelete;

    /**
     * @return (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    public Optional<Output<String>> softDelete() {
        return Optional.ofNullable(this.softDelete);
    }

    /**
     * The start time of the maintenance window.
     * 
     */
    @Import(name="windowStartTime")
    private @Nullable Output<String> windowStartTime;

    /**
     * @return The start time of the maintenance window.
     * 
     */
    public Optional<Output<String>> windowStartTime() {
        return Optional.ofNullable(this.windowStartTime);
    }

    private MysqlBackupDbSystemSnapshotBackupPolicyArgs() {}

    private MysqlBackupDbSystemSnapshotBackupPolicyArgs(MysqlBackupDbSystemSnapshotBackupPolicyArgs $) {
        this.copyPolicies = $.copyPolicies;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.isEnabled = $.isEnabled;
        this.pitrPolicies = $.pitrPolicies;
        this.retentionInDays = $.retentionInDays;
        this.softDelete = $.softDelete;
        this.windowStartTime = $.windowStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupDbSystemSnapshotBackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupDbSystemSnapshotBackupPolicyArgs $;

        public Builder() {
            $ = new MysqlBackupDbSystemSnapshotBackupPolicyArgs();
        }

        public Builder(MysqlBackupDbSystemSnapshotBackupPolicyArgs defaults) {
            $ = new MysqlBackupDbSystemSnapshotBackupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param copyPolicies List of policies of a DB system to schedule cross-region DB system backup copy.
         * 
         * @return builder
         * 
         */
        public Builder copyPolicies(@Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs>> copyPolicies) {
            $.copyPolicies = copyPolicies;
            return this;
        }

        /**
         * @param copyPolicies List of policies of a DB system to schedule cross-region DB system backup copy.
         * 
         * @return builder
         * 
         */
        public Builder copyPolicies(List<MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs> copyPolicies) {
            return copyPolicies(Output.of(copyPolicies));
        }

        /**
         * @param copyPolicies List of policies of a DB system to schedule cross-region DB system backup copy.
         * 
         * @return builder
         * 
         */
        public Builder copyPolicies(MysqlBackupDbSystemSnapshotBackupPolicyCopyPolicyArgs... copyPolicies) {
            return copyPolicies(List.of(copyPolicies));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isEnabled Specifies if the DB System read endpoint is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Specifies if the DB System read endpoint is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param pitrPolicies The PITR policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pitrPolicies(@Nullable Output<List<MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs>> pitrPolicies) {
            $.pitrPolicies = pitrPolicies;
            return this;
        }

        /**
         * @param pitrPolicies The PITR policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pitrPolicies(List<MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs> pitrPolicies) {
            return pitrPolicies(Output.of(pitrPolicies));
        }

        /**
         * @param pitrPolicies The PITR policy for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pitrPolicies(MysqlBackupDbSystemSnapshotBackupPolicyPitrPolicyArgs... pitrPolicies) {
            return pitrPolicies(List.of(pitrPolicies));
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(@Nullable Output<Integer> retentionInDays) {
            $.retentionInDays = retentionInDays;
            return this;
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(Integer retentionInDays) {
            return retentionInDays(Output.of(retentionInDays));
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(@Nullable Output<String> softDelete) {
            $.softDelete = softDelete;
            return this;
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(String softDelete) {
            return softDelete(Output.of(softDelete));
        }

        /**
         * @param windowStartTime The start time of the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder windowStartTime(@Nullable Output<String> windowStartTime) {
            $.windowStartTime = windowStartTime;
            return this;
        }

        /**
         * @param windowStartTime The start time of the maintenance window.
         * 
         * @return builder
         * 
         */
        public Builder windowStartTime(String windowStartTime) {
            return windowStartTime(Output.of(windowStartTime));
        }

        public MysqlBackupDbSystemSnapshotBackupPolicyArgs build() {
            return $;
        }
    }

}
