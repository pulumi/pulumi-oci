// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlBackupBackupValidationDetailArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupDbSystemSnapshotSummaryArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupEncryptDataArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupSourceDetailsArgs;
import com.pulumi.oci.Mysql.inputs.MysqlBackupValidateBackupDetailArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupState extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupState Empty = new MysqlBackupState();

    /**
     * The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    @Import(name="backupSizeInGbs")
    private @Nullable Output<Integer> backupSizeInGbs;

    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    public Optional<Output<Integer>> backupSizeInGbs() {
        return Optional.ofNullable(this.backupSizeInGbs);
    }

    /**
     * The type of backup.
     * 
     */
    @Import(name="backupType")
    private @Nullable Output<String> backupType;

    /**
     * @return The type of backup.
     * 
     */
    public Optional<Output<String>> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * Backup validation details.
     * 
     */
    @Import(name="backupValidationDetails")
    private @Nullable Output<List<MysqlBackupBackupValidationDetailArgs>> backupValidationDetails;

    /**
     * @return Backup validation details.
     * 
     */
    public Optional<Output<List<MysqlBackupBackupValidationDetailArgs>>> backupValidationDetails() {
        return Optional.ofNullable(this.backupValidationDetails);
    }

    /**
     * (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    @Import(name="creationType")
    private @Nullable Output<String> creationType;

    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    public Optional<Output<String>> creationType() {
        return Optional.ofNullable(this.creationType);
    }

    /**
     * DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    @Import(name="dataStorageSizeInGb")
    private @Nullable Output<Integer> dataStorageSizeInGb;

    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    public Optional<Output<Integer>> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }

    /**
     * The OCID of the DB System the Backup is associated with.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return The OCID of the DB System the Backup is associated with.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    @Import(name="dbSystemSnapshotSummaries")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>> dbSystemSnapshotSummaries;

    public Optional<Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>>> dbSystemSnapshotSummaries() {
        return Optional.ofNullable(this.dbSystemSnapshotSummaries);
    }

    /**
     * Snapshot of the DbSystem details at the time of the backup
     * 
     */
    @Import(name="dbSystemSnapshots")
    private @Nullable Output<List<MysqlBackupDbSystemSnapshotArgs>> dbSystemSnapshots;

    /**
     * @return Snapshot of the DbSystem details at the time of the backup
     * 
     */
    public Optional<Output<List<MysqlBackupDbSystemSnapshotArgs>>> dbSystemSnapshots() {
        return Optional.ofNullable(this.dbSystemSnapshots);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-supplied description for the backup.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user-supplied description for the backup.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-supplied display name for the backup.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-supplied display name for the backup.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Encrypt data details.
     * 
     */
    @Import(name="encryptData")
    private @Nullable Output<MysqlBackupEncryptDataArgs> encryptData;

    /**
     * @return Encrypt data details.
     * 
     */
    public Optional<Output<MysqlBackupEncryptDataArgs>> encryptData() {
        return Optional.ofNullable(this.encryptData);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the immediate source DB system backup from which this DB system backup was copied.
     * 
     */
    @Import(name="immediateSourceBackupId")
    private @Nullable Output<String> immediateSourceBackupId;

    /**
     * @return The OCID of the immediate source DB system backup from which this DB system backup was copied.
     * 
     */
    public Optional<Output<String>> immediateSourceBackupId() {
        return Optional.ofNullable(this.immediateSourceBackupId);
    }

    /**
     * Additional information about the current lifecycleState.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The MySQL server version of the DB System used for backup.
     * 
     */
    @Import(name="mysqlVersion")
    private @Nullable Output<String> mysqlVersion;

    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public Optional<Output<String>> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }

    /**
     * The OCID of the original source DB system backup from which this DB system backup was copied.
     * 
     */
    @Import(name="originalSourceBackupId")
    private @Nullable Output<String> originalSourceBackupId;

    /**
     * @return The OCID of the original source DB system backup from which this DB system backup was copied.
     * 
     */
    public Optional<Output<String>> originalSourceBackupId() {
        return Optional.ofNullable(this.originalSourceBackupId);
    }

    /**
     * (Updatable) Number of days to retain this backup.
     * 
     */
    @Import(name="retentionInDays")
    private @Nullable Output<Integer> retentionInDays;

    /**
     * @return (Updatable) Number of days to retain this backup.
     * 
     */
    public Optional<Output<Integer>> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }

    /**
     * The shape of the DB System instance used for backup.
     * 
     */
    @Import(name="shapeName")
    private @Nullable Output<String> shapeName;

    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public Optional<Output<String>> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }

    /**
     * (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    @Import(name="softDelete")
    private @Nullable Output<String> softDelete;

    /**
     * @return (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
     * 
     */
    public Optional<Output<String>> softDelete() {
        return Optional.ofNullable(this.softDelete);
    }

    /**
     * Details of backup source in the cloud.
     * 
     */
    @Import(name="sourceDetails")
    private @Nullable Output<MysqlBackupSourceDetailsArgs> sourceDetails;

    /**
     * @return Details of backup source in the cloud.
     * 
     */
    public Optional<Output<MysqlBackupSourceDetailsArgs>> sourceDetails() {
        return Optional.ofNullable(this.sourceDetails);
    }

    /**
     * The state of the backup.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the backup.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Import(name="timeCopyCreated")
    private @Nullable Output<String> timeCopyCreated;

    /**
     * @return The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<Output<String>> timeCopyCreated() {
        return Optional.ofNullable(this.timeCopyCreated);
    }

    /**
     * The time the backup record was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the backup record was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time at which the backup was updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time at which the backup was updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    @Import(name="validateBackupDetails")
    private @Nullable Output<List<MysqlBackupValidateBackupDetailArgs>> validateBackupDetails;

    public Optional<Output<List<MysqlBackupValidateBackupDetailArgs>>> validateBackupDetails() {
        return Optional.ofNullable(this.validateBackupDetails);
    }

    /**
     * (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
     * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
     * 
     */
    @Import(name="validateTrigger")
    private @Nullable Output<Integer> validateTrigger;

    /**
     * @return (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
     * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
     * 
     */
    public Optional<Output<Integer>> validateTrigger() {
        return Optional.ofNullable(this.validateTrigger);
    }

    private MysqlBackupState() {}

    private MysqlBackupState(MysqlBackupState $) {
        this.backupSizeInGbs = $.backupSizeInGbs;
        this.backupType = $.backupType;
        this.backupValidationDetails = $.backupValidationDetails;
        this.compartmentId = $.compartmentId;
        this.creationType = $.creationType;
        this.dataStorageSizeInGb = $.dataStorageSizeInGb;
        this.dbSystemId = $.dbSystemId;
        this.dbSystemSnapshotSummaries = $.dbSystemSnapshotSummaries;
        this.dbSystemSnapshots = $.dbSystemSnapshots;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.encryptData = $.encryptData;
        this.freeformTags = $.freeformTags;
        this.immediateSourceBackupId = $.immediateSourceBackupId;
        this.lifecycleDetails = $.lifecycleDetails;
        this.mysqlVersion = $.mysqlVersion;
        this.originalSourceBackupId = $.originalSourceBackupId;
        this.retentionInDays = $.retentionInDays;
        this.shapeName = $.shapeName;
        this.softDelete = $.softDelete;
        this.sourceDetails = $.sourceDetails;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeCopyCreated = $.timeCopyCreated;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.validateBackupDetails = $.validateBackupDetails;
        this.validateTrigger = $.validateTrigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupState $;

        public Builder() {
            $ = new MysqlBackupState();
        }

        public Builder(MysqlBackupState defaults) {
            $ = new MysqlBackupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSizeInGbs The size of the backup in base-2 (IEC) gibibytes. (GiB).
         * 
         * @return builder
         * 
         */
        public Builder backupSizeInGbs(@Nullable Output<Integer> backupSizeInGbs) {
            $.backupSizeInGbs = backupSizeInGbs;
            return this;
        }

        /**
         * @param backupSizeInGbs The size of the backup in base-2 (IEC) gibibytes. (GiB).
         * 
         * @return builder
         * 
         */
        public Builder backupSizeInGbs(Integer backupSizeInGbs) {
            return backupSizeInGbs(Output.of(backupSizeInGbs));
        }

        /**
         * @param backupType The type of backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType The type of backup.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param backupValidationDetails Backup validation details.
         * 
         * @return builder
         * 
         */
        public Builder backupValidationDetails(@Nullable Output<List<MysqlBackupBackupValidationDetailArgs>> backupValidationDetails) {
            $.backupValidationDetails = backupValidationDetails;
            return this;
        }

        /**
         * @param backupValidationDetails Backup validation details.
         * 
         * @return builder
         * 
         */
        public Builder backupValidationDetails(List<MysqlBackupBackupValidationDetailArgs> backupValidationDetails) {
            return backupValidationDetails(Output.of(backupValidationDetails));
        }

        /**
         * @param backupValidationDetails Backup validation details.
         * 
         * @return builder
         * 
         */
        public Builder backupValidationDetails(MysqlBackupBackupValidationDetailArgs... backupValidationDetails) {
            return backupValidationDetails(List.of(backupValidationDetails));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the backup exists in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param creationType Indicates how the backup was created: manually, automatic, or by an Operator.
         * 
         * @return builder
         * 
         */
        public Builder creationType(@Nullable Output<String> creationType) {
            $.creationType = creationType;
            return this;
        }

        /**
         * @param creationType Indicates how the backup was created: manually, automatic, or by an Operator.
         * 
         * @return builder
         * 
         */
        public Builder creationType(String creationType) {
            return creationType(Output.of(creationType));
        }

        /**
         * @param dataStorageSizeInGb DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(@Nullable Output<Integer> dataStorageSizeInGb) {
            $.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }

        /**
         * @param dataStorageSizeInGb DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            return dataStorageSizeInGb(Output.of(dataStorageSizeInGb));
        }

        /**
         * @param dbSystemId The OCID of the DB System the Backup is associated with.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The OCID of the DB System the Backup is associated with.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        public Builder dbSystemSnapshotSummaries(@Nullable Output<List<MysqlBackupDbSystemSnapshotSummaryArgs>> dbSystemSnapshotSummaries) {
            $.dbSystemSnapshotSummaries = dbSystemSnapshotSummaries;
            return this;
        }

        public Builder dbSystemSnapshotSummaries(List<MysqlBackupDbSystemSnapshotSummaryArgs> dbSystemSnapshotSummaries) {
            return dbSystemSnapshotSummaries(Output.of(dbSystemSnapshotSummaries));
        }

        public Builder dbSystemSnapshotSummaries(MysqlBackupDbSystemSnapshotSummaryArgs... dbSystemSnapshotSummaries) {
            return dbSystemSnapshotSummaries(List.of(dbSystemSnapshotSummaries));
        }

        /**
         * @param dbSystemSnapshots Snapshot of the DbSystem details at the time of the backup
         * 
         * @return builder
         * 
         */
        public Builder dbSystemSnapshots(@Nullable Output<List<MysqlBackupDbSystemSnapshotArgs>> dbSystemSnapshots) {
            $.dbSystemSnapshots = dbSystemSnapshots;
            return this;
        }

        /**
         * @param dbSystemSnapshots Snapshot of the DbSystem details at the time of the backup
         * 
         * @return builder
         * 
         */
        public Builder dbSystemSnapshots(List<MysqlBackupDbSystemSnapshotArgs> dbSystemSnapshots) {
            return dbSystemSnapshots(Output.of(dbSystemSnapshots));
        }

        /**
         * @param dbSystemSnapshots Snapshot of the DbSystem details at the time of the backup
         * 
         * @return builder
         * 
         */
        public Builder dbSystemSnapshots(MysqlBackupDbSystemSnapshotArgs... dbSystemSnapshots) {
            return dbSystemSnapshots(List.of(dbSystemSnapshots));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user-supplied description for the backup.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-supplied display name for the backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encryptData Encrypt data details.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(@Nullable Output<MysqlBackupEncryptDataArgs> encryptData) {
            $.encryptData = encryptData;
            return this;
        }

        /**
         * @param encryptData Encrypt data details.
         * 
         * @return builder
         * 
         */
        public Builder encryptData(MysqlBackupEncryptDataArgs encryptData) {
            return encryptData(Output.of(encryptData));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param immediateSourceBackupId The OCID of the immediate source DB system backup from which this DB system backup was copied.
         * 
         * @return builder
         * 
         */
        public Builder immediateSourceBackupId(@Nullable Output<String> immediateSourceBackupId) {
            $.immediateSourceBackupId = immediateSourceBackupId;
            return this;
        }

        /**
         * @param immediateSourceBackupId The OCID of the immediate source DB system backup from which this DB system backup was copied.
         * 
         * @return builder
         * 
         */
        public Builder immediateSourceBackupId(String immediateSourceBackupId) {
            return immediateSourceBackupId(Output.of(immediateSourceBackupId));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param mysqlVersion The MySQL server version of the DB System used for backup.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(@Nullable Output<String> mysqlVersion) {
            $.mysqlVersion = mysqlVersion;
            return this;
        }

        /**
         * @param mysqlVersion The MySQL server version of the DB System used for backup.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(String mysqlVersion) {
            return mysqlVersion(Output.of(mysqlVersion));
        }

        /**
         * @param originalSourceBackupId The OCID of the original source DB system backup from which this DB system backup was copied.
         * 
         * @return builder
         * 
         */
        public Builder originalSourceBackupId(@Nullable Output<String> originalSourceBackupId) {
            $.originalSourceBackupId = originalSourceBackupId;
            return this;
        }

        /**
         * @param originalSourceBackupId The OCID of the original source DB system backup from which this DB system backup was copied.
         * 
         * @return builder
         * 
         */
        public Builder originalSourceBackupId(String originalSourceBackupId) {
            return originalSourceBackupId(Output.of(originalSourceBackupId));
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(@Nullable Output<Integer> retentionInDays) {
            $.retentionInDays = retentionInDays;
            return this;
        }

        /**
         * @param retentionInDays (Updatable) Number of days to retain this backup.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(Integer retentionInDays) {
            return retentionInDays(Output.of(retentionInDays));
        }

        /**
         * @param shapeName The shape of the DB System instance used for backup.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The shape of the DB System instance used for backup.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(@Nullable Output<String> softDelete) {
            $.softDelete = softDelete;
            return this;
        }

        /**
         * @param softDelete (Updatable) Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
         * 
         * @return builder
         * 
         */
        public Builder softDelete(String softDelete) {
            return softDelete(Output.of(softDelete));
        }

        /**
         * @param sourceDetails Details of backup source in the cloud.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(@Nullable Output<MysqlBackupSourceDetailsArgs> sourceDetails) {
            $.sourceDetails = sourceDetails;
            return this;
        }

        /**
         * @param sourceDetails Details of backup source in the cloud.
         * 
         * @return builder
         * 
         */
        public Builder sourceDetails(MysqlBackupSourceDetailsArgs sourceDetails) {
            return sourceDetails(Output.of(sourceDetails));
        }

        /**
         * @param state The state of the backup.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the backup.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCopyCreated The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCopyCreated(@Nullable Output<String> timeCopyCreated) {
            $.timeCopyCreated = timeCopyCreated;
            return this;
        }

        /**
         * @param timeCopyCreated The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCopyCreated(String timeCopyCreated) {
            return timeCopyCreated(Output.of(timeCopyCreated));
        }

        /**
         * @param timeCreated The time the backup record was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the backup record was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time at which the backup was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time at which the backup was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public Builder validateBackupDetails(@Nullable Output<List<MysqlBackupValidateBackupDetailArgs>> validateBackupDetails) {
            $.validateBackupDetails = validateBackupDetails;
            return this;
        }

        public Builder validateBackupDetails(List<MysqlBackupValidateBackupDetailArgs> validateBackupDetails) {
            return validateBackupDetails(Output.of(validateBackupDetails));
        }

        public Builder validateBackupDetails(MysqlBackupValidateBackupDetailArgs... validateBackupDetails) {
            return validateBackupDetails(List.of(validateBackupDetails));
        }

        /**
         * @param validateTrigger (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
         * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
         * 
         * @return builder
         * 
         */
        public Builder validateTrigger(@Nullable Output<Integer> validateTrigger) {
            $.validateTrigger = validateTrigger;
            return this;
        }

        /**
         * @param validateTrigger (Updatable) An optional integer property when incremented will trigger a validation of the backup. Set the integer to 1 initially and increment it by 1 to re-trigger validation.
         * * `validate-backup-details` - Details required to validate backup. **Note:** Validate action can only be called from update resource operation.
         * 
         * @return builder
         * 
         */
        public Builder validateTrigger(Integer validateTrigger) {
            return validateTrigger(Output.of(validateTrigger));
        }

        public MysqlBackupState build() {
            return $;
        }
    }

}
