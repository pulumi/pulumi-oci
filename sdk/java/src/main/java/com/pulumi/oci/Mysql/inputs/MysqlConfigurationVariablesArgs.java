// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlConfigurationVariablesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlConfigurationVariablesArgs Empty = new MysqlConfigurationVariablesArgs();

    /**
     * auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
     * 
     * autoIncrementIncrement corresponds to the MySQL Replication Source Options variable [auto_increment_increment] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment).
     * 
     */
    @Import(name="autoIncrementIncrement")
    private @Nullable Output<Integer> autoIncrementIncrement;

    /**
     * @return auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
     * 
     * autoIncrementIncrement corresponds to the MySQL Replication Source Options variable [auto_increment_increment] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment).
     * 
     */
    public Optional<Output<Integer>> autoIncrementIncrement() {
        return Optional.ofNullable(this.autoIncrementIncrement);
    }

    /**
     * This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
     * 
     * autoIncrementOffset corresponds to the MySQL Replication Source Options variable [auto_increment_offset] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset).
     * 
     */
    @Import(name="autoIncrementOffset")
    private @Nullable Output<Integer> autoIncrementOffset;

    /**
     * @return This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
     * 
     * autoIncrementOffset corresponds to the MySQL Replication Source Options variable [auto_increment_offset] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset).
     * 
     */
    public Optional<Output<Integer>> autoIncrementOffset() {
        return Optional.ofNullable(this.autoIncrementOffset);
    }

    /**
     * (&#34;autocommit&#34;)
     * 
     */
    @Import(name="autocommit")
    private @Nullable Output<Boolean> autocommit;

    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Optional<Output<Boolean>> autocommit() {
        return Optional.ofNullable(this.autocommit);
    }

    /**
     * If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    @Import(name="bigTables")
    private @Nullable Output<Boolean> bigTables;

    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    public Optional<Output<Boolean>> bigTables() {
        return Optional.ofNullable(this.bigTables);
    }

    /**
     * Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    @Import(name="binlogExpireLogsSeconds")
    private @Nullable Output<Integer> binlogExpireLogsSeconds;

    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Optional<Output<Integer>> binlogExpireLogsSeconds() {
        return Optional.ofNullable(this.binlogExpireLogsSeconds);
    }

    /**
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
     * 
     * binlogGroupCommitSyncDelay corresponds to the MySQL Replication system variable [binlog_group_commit_sync_delay](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay)
     * 
     */
    @Import(name="binlogGroupCommitSyncDelay")
    private @Nullable Output<Integer> binlogGroupCommitSyncDelay;

    /**
     * @return Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
     * 
     * binlogGroupCommitSyncDelay corresponds to the MySQL Replication system variable [binlog_group_commit_sync_delay](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay)
     * 
     */
    public Optional<Output<Integer>> binlogGroupCommitSyncDelay() {
        return Optional.ofNullable(this.binlogGroupCommitSyncDelay);
    }

    /**
     * The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
     * 
     * binlogGroupCommitSyncNoDelayCount corresponds to the MySQL Replication system variable [binlog_group_commit_sync_no_delay_count](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_no_delay_count)
     * 
     */
    @Import(name="binlogGroupCommitSyncNoDelayCount")
    private @Nullable Output<Integer> binlogGroupCommitSyncNoDelayCount;

    /**
     * @return The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
     * 
     * binlogGroupCommitSyncNoDelayCount corresponds to the MySQL Replication system variable [binlog_group_commit_sync_no_delay_count](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_no_delay_count)
     * 
     */
    public Optional<Output<Integer>> binlogGroupCommitSyncNoDelayCount() {
        return Optional.ofNullable(this.binlogGroupCommitSyncNoDelayCount);
    }

    /**
     * Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    @Import(name="binlogRowMetadata")
    private @Nullable Output<String> binlogRowMetadata;

    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public Optional<Output<String>> binlogRowMetadata() {
        return Optional.ofNullable(this.binlogRowMetadata);
    }

    /**
     * When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    @Import(name="binlogRowValueOptions")
    private @Nullable Output<String> binlogRowValueOptions;

    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public Optional<Output<String>> binlogRowValueOptions() {
        return Optional.ofNullable(this.binlogRowValueOptions);
    }

    /**
     * Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    @Import(name="binlogTransactionCompression")
    private @Nullable Output<Boolean> binlogTransactionCompression;

    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Optional<Output<Boolean>> binlogTransactionCompression() {
        return Optional.ofNullable(this.binlogTransactionCompression);
    }

    /**
     * This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
     * 
     * block_encryption_mode corresponds to the MySQL Server Administration system variable [block_encryption_mode](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_block_encryption_mode)
     * 
     */
    @Import(name="blockEncryptionMode")
    private @Nullable Output<String> blockEncryptionMode;

    /**
     * @return This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
     * 
     * block_encryption_mode corresponds to the MySQL Server Administration system variable [block_encryption_mode](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_block_encryption_mode)
     * 
     */
    public Optional<Output<String>> blockEncryptionMode() {
        return Optional.ofNullable(this.blockEncryptionMode);
    }

    /**
     * The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
     * 
     * characterSetServer corresponds to the MySQL server variable [character_set_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_character_set_server).
     * 
     */
    @Import(name="characterSetServer")
    private @Nullable Output<String> characterSetServer;

    /**
     * @return The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
     * 
     * characterSetServer corresponds to the MySQL server variable [character_set_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_character_set_server).
     * 
     */
    public Optional<Output<String>> characterSetServer() {
        return Optional.ofNullable(this.characterSetServer);
    }

    /**
     * The server&#39;s default collation.
     * 
     * collationServer corresponds to the MySQL server variable [collation_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_collation_server).
     * 
     */
    @Import(name="collationServer")
    private @Nullable Output<String> collationServer;

    /**
     * @return The server&#39;s default collation.
     * 
     * collationServer corresponds to the MySQL server variable [collation_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_collation_server).
     * 
     */
    public Optional<Output<String>> collationServer() {
        return Optional.ofNullable(this.collationServer);
    }

    /**
     * (&#34;completion_type&#34;)
     * 
     */
    @Import(name="completionType")
    private @Nullable Output<String> completionType;

    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public Optional<Output<String>> completionType() {
        return Optional.ofNullable(this.completionType);
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    @Import(name="connectionMemoryChunkSize")
    private @Nullable Output<Integer> connectionMemoryChunkSize;

    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    public Optional<Output<Integer>> connectionMemoryChunkSize() {
        return Optional.ofNullable(this.connectionMemoryChunkSize);
    }

    /**
     * Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    @Import(name="connectionMemoryLimit")
    private @Nullable Output<String> connectionMemoryLimit;

    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    public Optional<Output<String>> connectionMemoryLimit() {
        return Optional.ofNullable(this.connectionMemoryLimit);
    }

    /**
     * (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    @Import(name="cteMaxRecursionDepth")
    private @Nullable Output<String> cteMaxRecursionDepth;

    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public Optional<Output<String>> cteMaxRecursionDepth() {
        return Optional.ofNullable(this.cteMaxRecursionDepth);
    }

    /**
     * The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
     * 
     * As of MySQL 8.0.27, which introduces multifactor authentication, default_authentication_plugin is still used, but in conjunction with and at a lower precedence than the authentication_policy system variable. For details, see The Default Authentication Plugin. Because of this diminished role, default_authentication_plugin is deprecated as of MySQL 8.0.27 and subject to removal in a future MySQL version.
     * 
     * defaultAuthenticationPlugin corresponds to the MySQL system variable [default_authentication_plugin](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin).
     * 
     */
    @Import(name="defaultAuthenticationPlugin")
    private @Nullable Output<String> defaultAuthenticationPlugin;

    /**
     * @return The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
     * 
     * As of MySQL 8.0.27, which introduces multifactor authentication, default_authentication_plugin is still used, but in conjunction with and at a lower precedence than the authentication_policy system variable. For details, see The Default Authentication Plugin. Because of this diminished role, default_authentication_plugin is deprecated as of MySQL 8.0.27 and subject to removal in a future MySQL version.
     * 
     * defaultAuthenticationPlugin corresponds to the MySQL system variable [default_authentication_plugin](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin).
     * 
     */
    public Optional<Output<String>> defaultAuthenticationPlugin() {
        return Optional.ofNullable(this.defaultAuthenticationPlugin);
    }

    /**
     * This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
     * 
     * explainFormat corresponds to the MySQL system variable [explain_format](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explain_format).
     * 
     */
    @Import(name="explainFormat")
    private @Nullable Output<String> explainFormat;

    /**
     * @return This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
     * 
     * explainFormat corresponds to the MySQL system variable [explain_format](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explain_format).
     * 
     */
    public Optional<Output<String>> explainFormat() {
        return Optional.ofNullable(this.explainFormat);
    }

    /**
     * This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
     * 
     * explicit_defaults_for_timestamp corresponds to the MySQL Server Administration system variable [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
     * 
     */
    @Import(name="explicitDefaultsForTimestamp")
    private @Nullable Output<Boolean> explicitDefaultsForTimestamp;

    /**
     * @return This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
     * 
     * explicit_defaults_for_timestamp corresponds to the MySQL Server Administration system variable [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
     * 
     */
    public Optional<Output<Boolean>> explicitDefaultsForTimestamp() {
        return Optional.ofNullable(this.explicitDefaultsForTimestamp);
    }

    /**
     * (&#34;foreign_key_checks&#34;)
     * 
     */
    @Import(name="foreignKeyChecks")
    private @Nullable Output<Boolean> foreignKeyChecks;

    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Optional<Output<Boolean>> foreignKeyChecks() {
        return Optional.ofNullable(this.foreignKeyChecks);
    }

    /**
     * (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="generatedRandomPasswordLength")
    private @Nullable Output<Integer> generatedRandomPasswordLength;

    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> generatedRandomPasswordLength() {
        return Optional.ofNullable(this.generatedRandomPasswordLength);
    }

    /**
     * Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    @Import(name="globalConnectionMemoryLimit")
    private @Nullable Output<String> globalConnectionMemoryLimit;

    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    public Optional<Output<String>> globalConnectionMemoryLimit() {
        return Optional.ofNullable(this.globalConnectionMemoryLimit);
    }

    /**
     * Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    @Import(name="globalConnectionMemoryTracking")
    private @Nullable Output<Boolean> globalConnectionMemoryTracking;

    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    public Optional<Output<Boolean>> globalConnectionMemoryTracking() {
        return Optional.ofNullable(this.globalConnectionMemoryTracking);
    }

    /**
     * Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     * This is the MySQL variable &#34;group_concat_max_len&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len)
     * 
     */
    @Import(name="groupConcatMaxLen")
    private @Nullable Output<String> groupConcatMaxLen;

    /**
     * @return Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     * This is the MySQL variable &#34;group_concat_max_len&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len)
     * 
     */
    public Optional<Output<String>> groupConcatMaxLen() {
        return Optional.ofNullable(this.groupConcatMaxLen);
    }

    /**
     * * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    @Import(name="groupReplicationConsistency")
    private @Nullable Output<String> groupReplicationConsistency;

    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public Optional<Output<String>> groupReplicationConsistency() {
        return Optional.ofNullable(this.groupReplicationConsistency);
    }

    /**
     * (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    @Import(name="informationSchemaStatsExpiry")
    private @Nullable Output<Integer> informationSchemaStatsExpiry;

    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Optional<Output<Integer>> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }

    /**
     * Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
     * 
     * innodbAdaptiveHashIndex corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_adaptive_hash_index] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index).
     * 
     */
    @Import(name="innodbAdaptiveHashIndex")
    private @Nullable Output<Boolean> innodbAdaptiveHashIndex;

    /**
     * @return Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
     * 
     * innodbAdaptiveHashIndex corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_adaptive_hash_index] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index).
     * 
     */
    public Optional<Output<Boolean>> innodbAdaptiveHashIndex() {
        return Optional.ofNullable(this.innodbAdaptiveHashIndex);
    }

    /**
     * The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
     * 
     * innodbAutoincLockMode corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_autoinc_lock_mode] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
     * 
     */
    @Import(name="innodbAutoincLockMode")
    private @Nullable Output<Integer> innodbAutoincLockMode;

    /**
     * @return The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
     * 
     * innodbAutoincLockMode corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_autoinc_lock_mode] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
     * 
     */
    public Optional<Output<Integer>> innodbAutoincLockMode() {
        return Optional.ofNullable(this.innodbAutoincLockMode);
    }

    /**
     * Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    @Import(name="innodbBufferPoolDumpPct")
    private @Nullable Output<Integer> innodbBufferPoolDumpPct;

    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    public Optional<Output<Integer>> innodbBufferPoolDumpPct() {
        return Optional.ofNullable(this.innodbBufferPoolDumpPct);
    }

    /**
     * (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    @Import(name="innodbBufferPoolInstances")
    private @Nullable Output<Integer> innodbBufferPoolInstances;

    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbBufferPoolInstances() {
        return Optional.ofNullable(this.innodbBufferPoolInstances);
    }

    /**
     * The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    @Import(name="innodbBufferPoolSize")
    private @Nullable Output<String> innodbBufferPoolSize;

    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    public Optional<Output<String>> innodbBufferPoolSize() {
        return Optional.ofNullable(this.innodbBufferPoolSize);
    }

    /**
     * Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
     * 
     * innodbChangeBuffering corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_change_buffering] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * 
     */
    @Import(name="innodbChangeBuffering")
    private @Nullable Output<String> innodbChangeBuffering;

    /**
     * @return Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
     * 
     * innodbChangeBuffering corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_change_buffering] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * 
     */
    public Optional<Output<String>> innodbChangeBuffering() {
        return Optional.ofNullable(this.innodbChangeBuffering);
    }

    /**
     * innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    @Import(name="innodbDdlBufferSize")
    private @Nullable Output<String> innodbDdlBufferSize;

    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    public Optional<Output<String>> innodbDdlBufferSize() {
        return Optional.ofNullable(this.innodbDdlBufferSize);
    }

    /**
     * innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    @Import(name="innodbDdlThreads")
    private @Nullable Output<Integer> innodbDdlThreads;

    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    public Optional<Output<Integer>> innodbDdlThreads() {
        return Optional.ofNullable(this.innodbDdlThreads);
    }

    /**
     * (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    @Import(name="innodbFtEnableStopword")
    private @Nullable Output<Boolean> innodbFtEnableStopword;

    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Optional<Output<Boolean>> innodbFtEnableStopword() {
        return Optional.ofNullable(this.innodbFtEnableStopword);
    }

    /**
     * (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    @Import(name="innodbFtMaxTokenSize")
    private @Nullable Output<Integer> innodbFtMaxTokenSize;

    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtMaxTokenSize() {
        return Optional.ofNullable(this.innodbFtMaxTokenSize);
    }

    /**
     * (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    @Import(name="innodbFtMinTokenSize")
    private @Nullable Output<Integer> innodbFtMinTokenSize;

    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }

    /**
     * (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    @Import(name="innodbFtNumWordOptimize")
    private @Nullable Output<Integer> innodbFtNumWordOptimize;

    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtNumWordOptimize() {
        return Optional.ofNullable(this.innodbFtNumWordOptimize);
    }

    /**
     * (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    @Import(name="innodbFtResultCacheLimit")
    private @Nullable Output<String> innodbFtResultCacheLimit;

    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public Optional<Output<String>> innodbFtResultCacheLimit() {
        return Optional.ofNullable(this.innodbFtResultCacheLimit);
    }

    /**
     * (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    @Import(name="innodbFtServerStopwordTable")
    private @Nullable Output<String> innodbFtServerStopwordTable;

    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public Optional<Output<String>> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }

    /**
     * (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    @Import(name="innodbLockWaitTimeout")
    private @Nullable Output<Integer> innodbLockWaitTimeout;

    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }

    /**
     * Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    @Import(name="innodbLogWriterThreads")
    private @Nullable Output<Boolean> innodbLogWriterThreads;

    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    public Optional<Output<Boolean>> innodbLogWriterThreads() {
        return Optional.ofNullable(this.innodbLogWriterThreads);
    }

    /**
     * The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    @Import(name="innodbMaxPurgeLag")
    private @Nullable Output<String> innodbMaxPurgeLag;

    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    public Optional<Output<String>> innodbMaxPurgeLag() {
        return Optional.ofNullable(this.innodbMaxPurgeLag);
    }

    /**
     * The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    @Import(name="innodbMaxPurgeLagDelay")
    private @Nullable Output<Integer> innodbMaxPurgeLagDelay;

    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    public Optional<Output<Integer>> innodbMaxPurgeLagDelay() {
        return Optional.ofNullable(this.innodbMaxPurgeLagDelay);
    }

    /**
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
     * 
     * innodbNumaInterleave corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_numa_interleave] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave).
     * 
     */
    @Import(name="innodbNumaInterleave")
    private @Nullable Output<Boolean> innodbNumaInterleave;

    /**
     * @return Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
     * 
     * innodbNumaInterleave corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_numa_interleave] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave).
     * 
     */
    public Optional<Output<Boolean>> innodbNumaInterleave() {
        return Optional.ofNullable(this.innodbNumaInterleave);
    }

    /**
     * Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
     * 
     * innodbOnlineAlterLogMaxSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_online_alter_log_max_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
     * 
     */
    @Import(name="innodbOnlineAlterLogMaxSize")
    private @Nullable Output<String> innodbOnlineAlterLogMaxSize;

    /**
     * @return Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
     * 
     * innodbOnlineAlterLogMaxSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_online_alter_log_max_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
     * 
     */
    public Optional<Output<String>> innodbOnlineAlterLogMaxSize() {
        return Optional.ofNullable(this.innodbOnlineAlterLogMaxSize);
    }

    /**
     * Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
     * 
     * innodbRedoLogCapacity corresponds to the InnoDB Startup Options and System Variables [innodb_redo_log_capacity](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_redo_log_capacity)
     * 
     */
    @Import(name="innodbRedoLogCapacity")
    private @Nullable Output<String> innodbRedoLogCapacity;

    /**
     * @return Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
     * 
     * innodbRedoLogCapacity corresponds to the InnoDB Startup Options and System Variables [innodb_redo_log_capacity](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_redo_log_capacity)
     * 
     */
    public Optional<Output<String>> innodbRedoLogCapacity() {
        return Optional.ofNullable(this.innodbRedoLogCapacity);
    }

    /**
     * InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
     * 
     * innodbRollbackOnTimeout corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_rollback_on_timeout] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_rollback_on_timeout).
     * 
     */
    @Import(name="innodbRollbackOnTimeout")
    private @Nullable Output<Boolean> innodbRollbackOnTimeout;

    /**
     * @return InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
     * 
     * innodbRollbackOnTimeout corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_rollback_on_timeout] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_rollback_on_timeout).
     * 
     */
    public Optional<Output<Boolean>> innodbRollbackOnTimeout() {
        return Optional.ofNullable(this.innodbRollbackOnTimeout);
    }

    /**
     * This variable defines:
     * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
     * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
     * 
     * innodbSortBufferSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_sort_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_sort_buffer_size).
     * 
     */
    @Import(name="innodbSortBufferSize")
    private @Nullable Output<Integer> innodbSortBufferSize;

    /**
     * @return This variable defines:
     * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
     * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
     * 
     * innodbSortBufferSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_sort_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_sort_buffer_size).
     * 
     */
    public Optional<Output<Integer>> innodbSortBufferSize() {
        return Optional.ofNullable(this.innodbSortBufferSize);
    }

    /**
     * The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    @Import(name="innodbStatsPersistentSamplePages")
    private @Nullable Output<String> innodbStatsPersistentSamplePages;

    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    public Optional<Output<String>> innodbStatsPersistentSamplePages() {
        return Optional.ofNullable(this.innodbStatsPersistentSamplePages);
    }

    /**
     * The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    @Import(name="innodbStatsTransientSamplePages")
    private @Nullable Output<String> innodbStatsTransientSamplePages;

    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    public Optional<Output<String>> innodbStatsTransientSamplePages() {
        return Optional.ofNullable(this.innodbStatsTransientSamplePages);
    }

    /**
     * When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
     * 
     * innodbStrictMode corresponds to the MySQL InnoDB system variable [innodb_strict_mode](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode)
     * 
     */
    @Import(name="innodbStrictMode")
    private @Nullable Output<Boolean> innodbStrictMode;

    /**
     * @return When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
     * 
     * innodbStrictMode corresponds to the MySQL InnoDB system variable [innodb_strict_mode](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode)
     * 
     */
    public Optional<Output<Boolean>> innodbStrictMode() {
        return Optional.ofNullable(this.innodbStrictMode);
    }

    /**
     * When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
     * 
     * innodbUndoLogTruncate corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_undo_log_truncate] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_undo_log_truncate).
     * 
     */
    @Import(name="innodbUndoLogTruncate")
    private @Nullable Output<Boolean> innodbUndoLogTruncate;

    /**
     * @return When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
     * 
     * innodbUndoLogTruncate corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_undo_log_truncate] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_undo_log_truncate).
     * 
     */
    public Optional<Output<Boolean>> innodbUndoLogTruncate() {
        return Optional.ofNullable(this.innodbUndoLogTruncate);
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    @Import(name="interactiveTimeout")
    private @Nullable Output<Integer> interactiveTimeout;

    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    public Optional<Output<Integer>> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }

    /**
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
     * 
     * joinBufferSize corresponds to the MySQL Server System variable [join_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size).
     * 
     */
    @Import(name="joinBufferSize")
    private @Nullable Output<String> joinBufferSize;

    /**
     * @return The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
     * 
     * joinBufferSize corresponds to the MySQL Server System variable [join_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size).
     * 
     */
    public Optional<Output<String>> joinBufferSize() {
        return Optional.ofNullable(this.joinBufferSize);
    }

    /**
     * This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
     * 
     * local_infile corresponds to the MySQL Server system variable [local_infile](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_local_infile)
     * 
     */
    @Import(name="localInfile")
    private @Nullable Output<Boolean> localInfile;

    /**
     * @return This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
     * 
     * local_infile corresponds to the MySQL Server system variable [local_infile](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_local_infile)
     * 
     */
    public Optional<Output<Boolean>> localInfile() {
        return Optional.ofNullable(this.localInfile);
    }

    /**
     * If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
     * 
     * longQueryTime corresponds to the MySQL Server System variable [long_query_time] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * 
     */
    @Import(name="longQueryTime")
    private @Nullable Output<Integer> longQueryTime;

    /**
     * @return If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
     * 
     * longQueryTime corresponds to the MySQL Server System variable [long_query_time] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
     * 
     */
    public Optional<Output<Integer>> longQueryTime() {
        return Optional.ofNullable(this.longQueryTime);
    }

    /**
     * (&#34;mandatory_roles&#34;)
     * 
     */
    @Import(name="mandatoryRoles")
    private @Nullable Output<String> mandatoryRoles;

    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public Optional<Output<String>> mandatoryRoles() {
        return Optional.ofNullable(this.mandatoryRoles);
    }

    /**
     * The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    @Import(name="maxAllowedPacket")
    private @Nullable Output<Integer> maxAllowedPacket;

    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    public Optional<Output<Integer>> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }

    /**
     * Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    @Import(name="maxBinlogCacheSize")
    private @Nullable Output<String> maxBinlogCacheSize;

    /**
     * @return Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    public Optional<Output<String>> maxBinlogCacheSize() {
        return Optional.ofNullable(this.maxBinlogCacheSize);
    }

    /**
     * (&#34;max_connect_errors&#34;)
     * 
     */
    @Import(name="maxConnectErrors")
    private @Nullable Output<String> maxConnectErrors;

    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    public Optional<Output<String>> maxConnectErrors() {
        return Optional.ofNullable(this.maxConnectErrors);
    }

    /**
     * (&#34;max_connections&#34;)
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * (&#34;max_execution_time&#34;)
     * 
     */
    @Import(name="maxExecutionTime")
    private @Nullable Output<String> maxExecutionTime;

    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public Optional<Output<String>> maxExecutionTime() {
        return Optional.ofNullable(this.maxExecutionTime);
    }

    /**
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    @Import(name="maxHeapTableSize")
    private @Nullable Output<String> maxHeapTableSize;

    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    public Optional<Output<String>> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }

    /**
     * (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    @Import(name="maxPreparedStmtCount")
    private @Nullable Output<Integer> maxPreparedStmtCount;

    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Optional<Output<Integer>> maxPreparedStmtCount() {
        return Optional.ofNullable(this.maxPreparedStmtCount);
    }

    /**
     * Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
     * 
     * maxSeeksForKey corresponds to the MySQL Server System variable [max_seeks_for_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_seeks_for_key).
     * 
     */
    @Import(name="maxSeeksForKey")
    private @Nullable Output<String> maxSeeksForKey;

    /**
     * @return Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
     * 
     * maxSeeksForKey corresponds to the MySQL Server System variable [max_seeks_for_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_seeks_for_key).
     * 
     */
    public Optional<Output<String>> maxSeeksForKey() {
        return Optional.ofNullable(this.maxSeeksForKey);
    }

    /**
     * The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
     * 
     * maxUserConnections corresponds to the MySQL Server System variable [max_user_connections] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_user_connections).
     * 
     */
    @Import(name="maxUserConnections")
    private @Nullable Output<String> maxUserConnections;

    /**
     * @return The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
     * 
     * maxUserConnections corresponds to the MySQL Server System variable [max_user_connections] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_user_connections).
     * 
     */
    public Optional<Output<String>> maxUserConnections() {
        return Optional.ofNullable(this.maxUserConnections);
    }

    /**
     * (&#34;mysql_firewall_mode&#34;)
     * 
     */
    @Import(name="mysqlFirewallMode")
    private @Nullable Output<Boolean> mysqlFirewallMode;

    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Optional<Output<Boolean>> mysqlFirewallMode() {
        return Optional.ofNullable(this.mysqlFirewallMode);
    }

    /**
     * DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlZstdDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlZstdDefaultCompressionLevel;

    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlZstdDefaultCompressionLevel);
    }

    /**
     * The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    @Import(name="mysqlxConnectTimeout")
    private @Nullable Output<Integer> mysqlxConnectTimeout;

    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxConnectTimeout() {
        return Optional.ofNullable(this.mysqlxConnectTimeout);
    }

    /**
     * Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxDeflateDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxDeflateDefaultCompressionLevel;

    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxDeflateDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateDefaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxDeflateMaxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxDeflateMaxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxDeflateMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateMaxClientCompressionLevel);
    }

    /**
     * (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxDocumentIdUniquePrefix")
    private @Nullable Output<Integer> mysqlxDocumentIdUniquePrefix;

    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxDocumentIdUniquePrefix() {
        return Optional.ofNullable(this.mysqlxDocumentIdUniquePrefix);
    }

    /**
     * (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    @Import(name="mysqlxEnableHelloNotice")
    private @Nullable Output<Boolean> mysqlxEnableHelloNotice;

    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Optional<Output<Boolean>> mysqlxEnableHelloNotice() {
        return Optional.ofNullable(this.mysqlxEnableHelloNotice);
    }

    /**
     * (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxIdleWorkerThreadTimeout")
    private @Nullable Output<Integer> mysqlxIdleWorkerThreadTimeout;

    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxIdleWorkerThreadTimeout() {
        return Optional.ofNullable(this.mysqlxIdleWorkerThreadTimeout);
    }

    /**
     * The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    @Import(name="mysqlxInteractiveTimeout")
    private @Nullable Output<Integer> mysqlxInteractiveTimeout;

    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxInteractiveTimeout() {
        return Optional.ofNullable(this.mysqlxInteractiveTimeout);
    }

    /**
     * Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxLz4defaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxLz4defaultCompressionLevel;

    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxLz4defaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4defaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxLz4maxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxLz4maxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxLz4maxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4maxClientCompressionLevel);
    }

    /**
     * The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    @Import(name="mysqlxMaxAllowedPacket")
    private @Nullable Output<Integer> mysqlxMaxAllowedPacket;

    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    public Optional<Output<Integer>> mysqlxMaxAllowedPacket() {
        return Optional.ofNullable(this.mysqlxMaxAllowedPacket);
    }

    /**
     * (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxMinWorkerThreads")
    private @Nullable Output<Integer> mysqlxMinWorkerThreads;

    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxMinWorkerThreads() {
        return Optional.ofNullable(this.mysqlxMinWorkerThreads);
    }

    /**
     * The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    @Import(name="mysqlxReadTimeout")
    private @Nullable Output<Integer> mysqlxReadTimeout;

    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxReadTimeout() {
        return Optional.ofNullable(this.mysqlxReadTimeout);
    }

    /**
     * The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    @Import(name="mysqlxWaitTimeout")
    private @Nullable Output<Integer> mysqlxWaitTimeout;

    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxWaitTimeout() {
        return Optional.ofNullable(this.mysqlxWaitTimeout);
    }

    /**
     * The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    @Import(name="mysqlxWriteTimeout")
    private @Nullable Output<Integer> mysqlxWriteTimeout;

    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxWriteTimeout() {
        return Optional.ofNullable(this.mysqlxWriteTimeout);
    }

    /**
     * Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxZstdDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxZstdDefaultCompressionLevel;

    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdDefaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxZstdMaxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxZstdMaxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxZstdMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdMaxClientCompressionLevel);
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    @Import(name="netReadTimeout")
    private @Nullable Output<Integer> netReadTimeout;

    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    public Optional<Output<Integer>> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    @Import(name="netWriteTimeout")
    private @Nullable Output<Integer> netWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    public Optional<Output<Integer>> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }

    /**
     * The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
     * 
     * Setting hypergraph_optimizer=on for cloud builds below 9.0.0 will fail.
     * 
     * optimizerSwitch corresponds to the MySQL Server System variable [optimizer_switch] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch).
     * 
     */
    @Import(name="optimizerSwitch")
    private @Nullable Output<String> optimizerSwitch;

    /**
     * @return The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
     * 
     * Setting hypergraph_optimizer=on for cloud builds below 9.0.0 will fail.
     * 
     * optimizerSwitch corresponds to the MySQL Server System variable [optimizer_switch] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch).
     * 
     */
    public Optional<Output<String>> optimizerSwitch() {
        return Optional.ofNullable(this.optimizerSwitch);
    }

    /**
     * (&#34;parser_max_mem_size&#34;)
     * 
     */
    @Import(name="parserMaxMemSize")
    private @Nullable Output<String> parserMaxMemSize;

    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public Optional<Output<String>> parserMaxMemSize() {
        return Optional.ofNullable(this.parserMaxMemSize);
    }

    /**
     * (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="queryAllocBlockSize")
    private @Nullable Output<String> queryAllocBlockSize;

    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<String>> queryAllocBlockSize() {
        return Optional.ofNullable(this.queryAllocBlockSize);
    }

    /**
     * (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    @Import(name="queryPreallocSize")
    private @Nullable Output<String> queryPreallocSize;

    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Optional<Output<String>> queryPreallocSize() {
        return Optional.ofNullable(this.queryPreallocSize);
    }

    /**
     * The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
     * 
     * rangeOptimizerMaxMemSize corresponds to the MySQL Server System variable [range_optimizer_max_mem_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size).
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="rangeOptimizerMaxMemSize")
    private @Nullable Output<String> rangeOptimizerMaxMemSize;

    /**
     * @return The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
     * 
     * rangeOptimizerMaxMemSize corresponds to the MySQL Server System variable [range_optimizer_max_mem_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size).
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<String>> rangeOptimizerMaxMemSize() {
        return Optional.ofNullable(this.rangeOptimizerMaxMemSize);
    }

    /**
     * regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    @Import(name="regexpTimeLimit")
    private @Nullable Output<Integer> regexpTimeLimit;

    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    public Optional<Output<Integer>> regexpTimeLimit() {
        return Optional.ofNullable(this.regexpTimeLimit);
    }

    /**
     * The maximum amount of space to use for all relay logs.
     * 
     * relayLogSpaceLimit corresponds to the MySQL Replica Server Options variable [relay_log_space_limit] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_relay_log_space_limit).
     * 
     */
    @Import(name="relayLogSpaceLimit")
    private @Nullable Output<String> relayLogSpaceLimit;

    /**
     * @return The maximum amount of space to use for all relay logs.
     * 
     * relayLogSpaceLimit corresponds to the MySQL Replica Server Options variable [relay_log_space_limit] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_relay_log_space_limit).
     * 
     */
    public Optional<Output<String>> relayLogSpaceLimit() {
        return Optional.ofNullable(this.relayLogSpaceLimit);
    }

    /**
     * Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
     * 
     * replicaNetTimeout corresponds to the MySQL Replica server system variable [replica_net_timeout](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_net_timeout)
     * 
     */
    @Import(name="replicaNetTimeout")
    private @Nullable Output<Integer> replicaNetTimeout;

    /**
     * @return Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
     * 
     * replicaNetTimeout corresponds to the MySQL Replica server system variable [replica_net_timeout](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_net_timeout)
     * 
     */
    public Optional<Output<Integer>> replicaNetTimeout() {
        return Optional.ofNullable(this.replicaNetTimeout);
    }

    /**
     * Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
     * 
     * replicaParallelWorkers corresponds to the MySQL Replica Server Options variable [replica_parallel_workers] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_parallel_workers).
     * 
     */
    @Import(name="replicaParallelWorkers")
    private @Nullable Output<Integer> replicaParallelWorkers;

    /**
     * @return Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
     * 
     * replicaParallelWorkers corresponds to the MySQL Replica Server Options variable [replica_parallel_workers] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_parallel_workers).
     * 
     */
    public Optional<Output<Integer>> replicaParallelWorkers() {
        return Optional.ofNullable(this.replicaParallelWorkers);
    }

    /**
     * From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
     * 
     * replica_type_conversions controls the type conversion mode in effect on the replica when using row-based replication. Its value is a comma-delimited set of zero or more elements from the list: ALL_LOSSY, ALL_NON_LOSSY, ALL_SIGNED, ALL_UNSIGNED. Set this variable to an empty string to disallow type conversions between the source and the replica. Setting this variable takes effect for all replication channels immediately, including running channels.
     * 
     * replica_type_conversions corresponds to the MySQL Replica Server Options variable [replica_type_conversions] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_type_conversions).
     * 
     */
    @Import(name="replicaTypeConversions")
    private @Nullable Output<String> replicaTypeConversions;

    /**
     * @return From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
     * 
     * replica_type_conversions controls the type conversion mode in effect on the replica when using row-based replication. Its value is a comma-delimited set of zero or more elements from the list: ALL_LOSSY, ALL_NON_LOSSY, ALL_SIGNED, ALL_UNSIGNED. Set this variable to an empty string to disallow type conversions between the source and the replica. Setting this variable takes effect for all replication channels immediately, including running channels.
     * 
     * replica_type_conversions corresponds to the MySQL Replica Server Options variable [replica_type_conversions] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_type_conversions).
     * 
     */
    public Optional<Output<String>> replicaTypeConversions() {
        return Optional.ofNullable(this.replicaTypeConversions);
    }

    /**
     * Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
     * 
     * require_secure_transport corresponds to the MySQL Server Administration system variable [require_secure_transport](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_require_secure_transport)
     * 
     */
    @Import(name="requireSecureTransport")
    private @Nullable Output<Boolean> requireSecureTransport;

    /**
     * @return Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
     * 
     * require_secure_transport corresponds to the MySQL Server Administration system variable [require_secure_transport](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_require_secure_transport)
     * 
     */
    public Optional<Output<Boolean>> requireSecureTransport() {
        return Optional.ofNullable(this.requireSecureTransport);
    }

    /**
     * Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
     * 
     * skipNameResolve corresponds to the MySQL Server System variable [skip_name_resolve] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_skip_name_resolve).
     * 
     */
    @Import(name="skipNameResolve")
    private @Nullable Output<Boolean> skipNameResolve;

    /**
     * @return Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
     * 
     * skipNameResolve corresponds to the MySQL Server System variable [skip_name_resolve] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_skip_name_resolve).
     * 
     */
    public Optional<Output<Boolean>> skipNameResolve() {
        return Optional.ofNullable(this.skipNameResolve);
    }

    /**
     * Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    @Import(name="sortBufferSize")
    private @Nullable Output<String> sortBufferSize;

    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    public Optional<Output<String>> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }

    /**
     * Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
     * 
     * sqlGenerateInvisiblePrimaryKey corresponds to the MySQL system variable [sql_generate_invisible_primary_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_generate_invisible_primary_key).
     * 
     */
    @Import(name="sqlGenerateInvisiblePrimaryKey")
    private @Nullable Output<Boolean> sqlGenerateInvisiblePrimaryKey;

    /**
     * @return Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
     * 
     * sqlGenerateInvisiblePrimaryKey corresponds to the MySQL system variable [sql_generate_invisible_primary_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_generate_invisible_primary_key).
     * 
     */
    public Optional<Output<Boolean>> sqlGenerateInvisiblePrimaryKey() {
        return Optional.ofNullable(this.sqlGenerateInvisiblePrimaryKey);
    }

    /**
     * (&#34;sql_mode&#34;)
     * 
     */
    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    /**
     * (&#34;sql_require_primary_key&#34;)
     * 
     */
    @Import(name="sqlRequirePrimaryKey")
    private @Nullable Output<Boolean> sqlRequirePrimaryKey;

    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Optional<Output<Boolean>> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }

    /**
     * (&#34;sql_warnings&#34;)
     * 
     */
    @Import(name="sqlWarnings")
    private @Nullable Output<Boolean> sqlWarnings;

    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Optional<Output<Boolean>> sqlWarnings() {
        return Optional.ofNullable(this.sqlWarnings);
    }

    /**
     * The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
     * 
     * table_definition_cache corresponds to the MySQL Server Administration system variable [table_definition_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache)
     * 
     */
    @Import(name="tableDefinitionCache")
    private @Nullable Output<Integer> tableDefinitionCache;

    /**
     * @return The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
     * 
     * table_definition_cache corresponds to the MySQL Server Administration system variable [table_definition_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache)
     * 
     */
    public Optional<Output<Integer>> tableDefinitionCache() {
        return Optional.ofNullable(this.tableDefinitionCache);
    }

    /**
     * The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
     * 
     * table_open_cache corresponds to the MySQL Server Administration system variable [table_open_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache)
     * 
     */
    @Import(name="tableOpenCache")
    private @Nullable Output<Integer> tableOpenCache;

    /**
     * @return The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
     * 
     * table_open_cache corresponds to the MySQL Server Administration system variable [table_open_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache)
     * 
     */
    public Optional<Output<Integer>> tableOpenCache() {
        return Optional.ofNullable(this.tableOpenCache);
    }

    /**
     * Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
     * 
     * temptableMaxRam corresponds to the MySQL system variable [temptable_max_ram] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_temptable_max_ram).
     * 
     */
    @Import(name="temptableMaxRam")
    private @Nullable Output<String> temptableMaxRam;

    /**
     * @return Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
     * 
     * temptableMaxRam corresponds to the MySQL system variable [temptable_max_ram] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_temptable_max_ram).
     * 
     */
    public Optional<Output<String>> temptableMaxRam() {
        return Optional.ofNullable(this.temptableMaxRam);
    }

    /**
     * Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    @Import(name="threadPoolDedicatedListeners")
    private @Nullable Output<Boolean> threadPoolDedicatedListeners;

    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    public Optional<Output<Boolean>> threadPoolDedicatedListeners() {
        return Optional.ofNullable(this.threadPoolDedicatedListeners);
    }

    /**
     * Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    @Import(name="threadPoolMaxTransactionsLimit")
    private @Nullable Output<Integer> threadPoolMaxTransactionsLimit;

    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    public Optional<Output<Integer>> threadPoolMaxTransactionsLimit() {
        return Optional.ofNullable(this.threadPoolMaxTransactionsLimit);
    }

    /**
     * The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
     * 
     * threadPoolQueryThreadsPerGroup corresponds to the MySQL Server system variable [thread_pool_query_threads_per_group](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_query_threads_per_group)
     * 
     */
    @Import(name="threadPoolQueryThreadsPerGroup")
    private @Nullable Output<Integer> threadPoolQueryThreadsPerGroup;

    /**
     * @return The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
     * 
     * threadPoolQueryThreadsPerGroup corresponds to the MySQL Server system variable [thread_pool_query_threads_per_group](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_query_threads_per_group)
     * 
     */
    public Optional<Output<Integer>> threadPoolQueryThreadsPerGroup() {
        return Optional.ofNullable(this.threadPoolQueryThreadsPerGroup);
    }

    /**
     * The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
     * 
     * threadPoolSize corresponds to the MySQL Server System variable [thread_pool_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_size).
     * 
     */
    @Import(name="threadPoolSize")
    private @Nullable Output<Integer> threadPoolSize;

    /**
     * @return The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
     * 
     * threadPoolSize corresponds to the MySQL Server System variable [thread_pool_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_size).
     * 
     */
    public Optional<Output<Integer>> threadPoolSize() {
        return Optional.ofNullable(this.threadPoolSize);
    }

    /**
     * The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
     * 
     * threadPoolTransactionDelay corresponds to the MySQL Server system variable [thread_pool_transaction_delay](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_transaction_delay)
     * 
     */
    @Import(name="threadPoolTransactionDelay")
    private @Nullable Output<Integer> threadPoolTransactionDelay;

    /**
     * @return The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
     * 
     * threadPoolTransactionDelay corresponds to the MySQL Server system variable [thread_pool_transaction_delay](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_transaction_delay)
     * 
     */
    public Optional<Output<Integer>> threadPoolTransactionDelay() {
        return Optional.ofNullable(this.threadPoolTransactionDelay);
    }

    /**
     * Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    @Import(name="tmpTableSize")
    private @Nullable Output<String> tmpTableSize;

    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    public Optional<Output<String>> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }

    /**
     * (&#34;transaction_isolation&#34;)
     * 
     */
    @Import(name="transactionIsolation")
    private @Nullable Output<String> transactionIsolation;

    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public Optional<Output<String>> transactionIsolation() {
        return Optional.ofNullable(this.transactionIsolation);
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="waitTimeout")
    private @Nullable Output<Integer> waitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    private MysqlConfigurationVariablesArgs() {}

    private MysqlConfigurationVariablesArgs(MysqlConfigurationVariablesArgs $) {
        this.autoIncrementIncrement = $.autoIncrementIncrement;
        this.autoIncrementOffset = $.autoIncrementOffset;
        this.autocommit = $.autocommit;
        this.bigTables = $.bigTables;
        this.binlogExpireLogsSeconds = $.binlogExpireLogsSeconds;
        this.binlogGroupCommitSyncDelay = $.binlogGroupCommitSyncDelay;
        this.binlogGroupCommitSyncNoDelayCount = $.binlogGroupCommitSyncNoDelayCount;
        this.binlogRowMetadata = $.binlogRowMetadata;
        this.binlogRowValueOptions = $.binlogRowValueOptions;
        this.binlogTransactionCompression = $.binlogTransactionCompression;
        this.blockEncryptionMode = $.blockEncryptionMode;
        this.characterSetServer = $.characterSetServer;
        this.collationServer = $.collationServer;
        this.completionType = $.completionType;
        this.connectTimeout = $.connectTimeout;
        this.connectionMemoryChunkSize = $.connectionMemoryChunkSize;
        this.connectionMemoryLimit = $.connectionMemoryLimit;
        this.cteMaxRecursionDepth = $.cteMaxRecursionDepth;
        this.defaultAuthenticationPlugin = $.defaultAuthenticationPlugin;
        this.explainFormat = $.explainFormat;
        this.explicitDefaultsForTimestamp = $.explicitDefaultsForTimestamp;
        this.foreignKeyChecks = $.foreignKeyChecks;
        this.generatedRandomPasswordLength = $.generatedRandomPasswordLength;
        this.globalConnectionMemoryLimit = $.globalConnectionMemoryLimit;
        this.globalConnectionMemoryTracking = $.globalConnectionMemoryTracking;
        this.groupConcatMaxLen = $.groupConcatMaxLen;
        this.groupReplicationConsistency = $.groupReplicationConsistency;
        this.informationSchemaStatsExpiry = $.informationSchemaStatsExpiry;
        this.innodbAdaptiveHashIndex = $.innodbAdaptiveHashIndex;
        this.innodbAutoincLockMode = $.innodbAutoincLockMode;
        this.innodbBufferPoolDumpPct = $.innodbBufferPoolDumpPct;
        this.innodbBufferPoolInstances = $.innodbBufferPoolInstances;
        this.innodbBufferPoolSize = $.innodbBufferPoolSize;
        this.innodbChangeBuffering = $.innodbChangeBuffering;
        this.innodbDdlBufferSize = $.innodbDdlBufferSize;
        this.innodbDdlThreads = $.innodbDdlThreads;
        this.innodbFtEnableStopword = $.innodbFtEnableStopword;
        this.innodbFtMaxTokenSize = $.innodbFtMaxTokenSize;
        this.innodbFtMinTokenSize = $.innodbFtMinTokenSize;
        this.innodbFtNumWordOptimize = $.innodbFtNumWordOptimize;
        this.innodbFtResultCacheLimit = $.innodbFtResultCacheLimit;
        this.innodbFtServerStopwordTable = $.innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = $.innodbLockWaitTimeout;
        this.innodbLogWriterThreads = $.innodbLogWriterThreads;
        this.innodbMaxPurgeLag = $.innodbMaxPurgeLag;
        this.innodbMaxPurgeLagDelay = $.innodbMaxPurgeLagDelay;
        this.innodbNumaInterleave = $.innodbNumaInterleave;
        this.innodbOnlineAlterLogMaxSize = $.innodbOnlineAlterLogMaxSize;
        this.innodbRedoLogCapacity = $.innodbRedoLogCapacity;
        this.innodbRollbackOnTimeout = $.innodbRollbackOnTimeout;
        this.innodbSortBufferSize = $.innodbSortBufferSize;
        this.innodbStatsPersistentSamplePages = $.innodbStatsPersistentSamplePages;
        this.innodbStatsTransientSamplePages = $.innodbStatsTransientSamplePages;
        this.innodbStrictMode = $.innodbStrictMode;
        this.innodbUndoLogTruncate = $.innodbUndoLogTruncate;
        this.interactiveTimeout = $.interactiveTimeout;
        this.joinBufferSize = $.joinBufferSize;
        this.localInfile = $.localInfile;
        this.longQueryTime = $.longQueryTime;
        this.mandatoryRoles = $.mandatoryRoles;
        this.maxAllowedPacket = $.maxAllowedPacket;
        this.maxBinlogCacheSize = $.maxBinlogCacheSize;
        this.maxConnectErrors = $.maxConnectErrors;
        this.maxConnections = $.maxConnections;
        this.maxExecutionTime = $.maxExecutionTime;
        this.maxHeapTableSize = $.maxHeapTableSize;
        this.maxPreparedStmtCount = $.maxPreparedStmtCount;
        this.maxSeeksForKey = $.maxSeeksForKey;
        this.maxUserConnections = $.maxUserConnections;
        this.mysqlFirewallMode = $.mysqlFirewallMode;
        this.mysqlZstdDefaultCompressionLevel = $.mysqlZstdDefaultCompressionLevel;
        this.mysqlxConnectTimeout = $.mysqlxConnectTimeout;
        this.mysqlxDeflateDefaultCompressionLevel = $.mysqlxDeflateDefaultCompressionLevel;
        this.mysqlxDeflateMaxClientCompressionLevel = $.mysqlxDeflateMaxClientCompressionLevel;
        this.mysqlxDocumentIdUniquePrefix = $.mysqlxDocumentIdUniquePrefix;
        this.mysqlxEnableHelloNotice = $.mysqlxEnableHelloNotice;
        this.mysqlxIdleWorkerThreadTimeout = $.mysqlxIdleWorkerThreadTimeout;
        this.mysqlxInteractiveTimeout = $.mysqlxInteractiveTimeout;
        this.mysqlxLz4defaultCompressionLevel = $.mysqlxLz4defaultCompressionLevel;
        this.mysqlxLz4maxClientCompressionLevel = $.mysqlxLz4maxClientCompressionLevel;
        this.mysqlxMaxAllowedPacket = $.mysqlxMaxAllowedPacket;
        this.mysqlxMinWorkerThreads = $.mysqlxMinWorkerThreads;
        this.mysqlxReadTimeout = $.mysqlxReadTimeout;
        this.mysqlxWaitTimeout = $.mysqlxWaitTimeout;
        this.mysqlxWriteTimeout = $.mysqlxWriteTimeout;
        this.mysqlxZstdDefaultCompressionLevel = $.mysqlxZstdDefaultCompressionLevel;
        this.mysqlxZstdMaxClientCompressionLevel = $.mysqlxZstdMaxClientCompressionLevel;
        this.netReadTimeout = $.netReadTimeout;
        this.netWriteTimeout = $.netWriteTimeout;
        this.optimizerSwitch = $.optimizerSwitch;
        this.parserMaxMemSize = $.parserMaxMemSize;
        this.queryAllocBlockSize = $.queryAllocBlockSize;
        this.queryPreallocSize = $.queryPreallocSize;
        this.rangeOptimizerMaxMemSize = $.rangeOptimizerMaxMemSize;
        this.regexpTimeLimit = $.regexpTimeLimit;
        this.relayLogSpaceLimit = $.relayLogSpaceLimit;
        this.replicaNetTimeout = $.replicaNetTimeout;
        this.replicaParallelWorkers = $.replicaParallelWorkers;
        this.replicaTypeConversions = $.replicaTypeConversions;
        this.requireSecureTransport = $.requireSecureTransport;
        this.skipNameResolve = $.skipNameResolve;
        this.sortBufferSize = $.sortBufferSize;
        this.sqlGenerateInvisiblePrimaryKey = $.sqlGenerateInvisiblePrimaryKey;
        this.sqlMode = $.sqlMode;
        this.sqlRequirePrimaryKey = $.sqlRequirePrimaryKey;
        this.sqlWarnings = $.sqlWarnings;
        this.tableDefinitionCache = $.tableDefinitionCache;
        this.tableOpenCache = $.tableOpenCache;
        this.temptableMaxRam = $.temptableMaxRam;
        this.threadPoolDedicatedListeners = $.threadPoolDedicatedListeners;
        this.threadPoolMaxTransactionsLimit = $.threadPoolMaxTransactionsLimit;
        this.threadPoolQueryThreadsPerGroup = $.threadPoolQueryThreadsPerGroup;
        this.threadPoolSize = $.threadPoolSize;
        this.threadPoolTransactionDelay = $.threadPoolTransactionDelay;
        this.timeZone = $.timeZone;
        this.tmpTableSize = $.tmpTableSize;
        this.transactionIsolation = $.transactionIsolation;
        this.waitTimeout = $.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlConfigurationVariablesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlConfigurationVariablesArgs $;

        public Builder() {
            $ = new MysqlConfigurationVariablesArgs();
        }

        public Builder(MysqlConfigurationVariablesArgs defaults) {
            $ = new MysqlConfigurationVariablesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoIncrementIncrement auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
         * 
         * autoIncrementIncrement corresponds to the MySQL Replication Source Options variable [auto_increment_increment] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment).
         * 
         * @return builder
         * 
         */
        public Builder autoIncrementIncrement(@Nullable Output<Integer> autoIncrementIncrement) {
            $.autoIncrementIncrement = autoIncrementIncrement;
            return this;
        }

        /**
         * @param autoIncrementIncrement auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
         * 
         * autoIncrementIncrement corresponds to the MySQL Replication Source Options variable [auto_increment_increment] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment).
         * 
         * @return builder
         * 
         */
        public Builder autoIncrementIncrement(Integer autoIncrementIncrement) {
            return autoIncrementIncrement(Output.of(autoIncrementIncrement));
        }

        /**
         * @param autoIncrementOffset This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
         * 
         * autoIncrementOffset corresponds to the MySQL Replication Source Options variable [auto_increment_offset] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset).
         * 
         * @return builder
         * 
         */
        public Builder autoIncrementOffset(@Nullable Output<Integer> autoIncrementOffset) {
            $.autoIncrementOffset = autoIncrementOffset;
            return this;
        }

        /**
         * @param autoIncrementOffset This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
         * 
         * autoIncrementOffset corresponds to the MySQL Replication Source Options variable [auto_increment_offset] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset).
         * 
         * @return builder
         * 
         */
        public Builder autoIncrementOffset(Integer autoIncrementOffset) {
            return autoIncrementOffset(Output.of(autoIncrementOffset));
        }

        /**
         * @param autocommit (&#34;autocommit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder autocommit(@Nullable Output<Boolean> autocommit) {
            $.autocommit = autocommit;
            return this;
        }

        /**
         * @param autocommit (&#34;autocommit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder autocommit(Boolean autocommit) {
            return autocommit(Output.of(autocommit));
        }

        /**
         * @param bigTables If enabled, the server stores all temporary tables on disk rather than in memory.
         * 
         * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
         * 
         * @return builder
         * 
         */
        public Builder bigTables(@Nullable Output<Boolean> bigTables) {
            $.bigTables = bigTables;
            return this;
        }

        /**
         * @param bigTables If enabled, the server stores all temporary tables on disk rather than in memory.
         * 
         * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
         * 
         * @return builder
         * 
         */
        public Builder bigTables(Boolean bigTables) {
            return bigTables(Output.of(bigTables));
        }

        /**
         * @param binlogExpireLogsSeconds Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
         * 
         * @return builder
         * 
         */
        public Builder binlogExpireLogsSeconds(@Nullable Output<Integer> binlogExpireLogsSeconds) {
            $.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            return this;
        }

        /**
         * @param binlogExpireLogsSeconds Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
         * 
         * @return builder
         * 
         */
        public Builder binlogExpireLogsSeconds(Integer binlogExpireLogsSeconds) {
            return binlogExpireLogsSeconds(Output.of(binlogExpireLogsSeconds));
        }

        /**
         * @param binlogGroupCommitSyncDelay Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
         * 
         * binlogGroupCommitSyncDelay corresponds to the MySQL Replication system variable [binlog_group_commit_sync_delay](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay)
         * 
         * @return builder
         * 
         */
        public Builder binlogGroupCommitSyncDelay(@Nullable Output<Integer> binlogGroupCommitSyncDelay) {
            $.binlogGroupCommitSyncDelay = binlogGroupCommitSyncDelay;
            return this;
        }

        /**
         * @param binlogGroupCommitSyncDelay Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
         * 
         * binlogGroupCommitSyncDelay corresponds to the MySQL Replication system variable [binlog_group_commit_sync_delay](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay)
         * 
         * @return builder
         * 
         */
        public Builder binlogGroupCommitSyncDelay(Integer binlogGroupCommitSyncDelay) {
            return binlogGroupCommitSyncDelay(Output.of(binlogGroupCommitSyncDelay));
        }

        /**
         * @param binlogGroupCommitSyncNoDelayCount The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
         * 
         * binlogGroupCommitSyncNoDelayCount corresponds to the MySQL Replication system variable [binlog_group_commit_sync_no_delay_count](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_no_delay_count)
         * 
         * @return builder
         * 
         */
        public Builder binlogGroupCommitSyncNoDelayCount(@Nullable Output<Integer> binlogGroupCommitSyncNoDelayCount) {
            $.binlogGroupCommitSyncNoDelayCount = binlogGroupCommitSyncNoDelayCount;
            return this;
        }

        /**
         * @param binlogGroupCommitSyncNoDelayCount The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
         * 
         * binlogGroupCommitSyncNoDelayCount corresponds to the MySQL Replication system variable [binlog_group_commit_sync_no_delay_count](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_no_delay_count)
         * 
         * @return builder
         * 
         */
        public Builder binlogGroupCommitSyncNoDelayCount(Integer binlogGroupCommitSyncNoDelayCount) {
            return binlogGroupCommitSyncNoDelayCount(Output.of(binlogGroupCommitSyncNoDelayCount));
        }

        /**
         * @param binlogRowMetadata Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowMetadata(@Nullable Output<String> binlogRowMetadata) {
            $.binlogRowMetadata = binlogRowMetadata;
            return this;
        }

        /**
         * @param binlogRowMetadata Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowMetadata(String binlogRowMetadata) {
            return binlogRowMetadata(Output.of(binlogRowMetadata));
        }

        /**
         * @param binlogRowValueOptions When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowValueOptions(@Nullable Output<String> binlogRowValueOptions) {
            $.binlogRowValueOptions = binlogRowValueOptions;
            return this;
        }

        /**
         * @param binlogRowValueOptions When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowValueOptions(String binlogRowValueOptions) {
            return binlogRowValueOptions(Output.of(binlogRowValueOptions));
        }

        /**
         * @param binlogTransactionCompression Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
         * 
         * @return builder
         * 
         */
        public Builder binlogTransactionCompression(@Nullable Output<Boolean> binlogTransactionCompression) {
            $.binlogTransactionCompression = binlogTransactionCompression;
            return this;
        }

        /**
         * @param binlogTransactionCompression Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
         * 
         * @return builder
         * 
         */
        public Builder binlogTransactionCompression(Boolean binlogTransactionCompression) {
            return binlogTransactionCompression(Output.of(binlogTransactionCompression));
        }

        /**
         * @param blockEncryptionMode This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
         * 
         * block_encryption_mode corresponds to the MySQL Server Administration system variable [block_encryption_mode](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_block_encryption_mode)
         * 
         * @return builder
         * 
         */
        public Builder blockEncryptionMode(@Nullable Output<String> blockEncryptionMode) {
            $.blockEncryptionMode = blockEncryptionMode;
            return this;
        }

        /**
         * @param blockEncryptionMode This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
         * 
         * block_encryption_mode corresponds to the MySQL Server Administration system variable [block_encryption_mode](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_block_encryption_mode)
         * 
         * @return builder
         * 
         */
        public Builder blockEncryptionMode(String blockEncryptionMode) {
            return blockEncryptionMode(Output.of(blockEncryptionMode));
        }

        /**
         * @param characterSetServer The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
         * 
         * characterSetServer corresponds to the MySQL server variable [character_set_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_character_set_server).
         * 
         * @return builder
         * 
         */
        public Builder characterSetServer(@Nullable Output<String> characterSetServer) {
            $.characterSetServer = characterSetServer;
            return this;
        }

        /**
         * @param characterSetServer The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
         * 
         * characterSetServer corresponds to the MySQL server variable [character_set_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_character_set_server).
         * 
         * @return builder
         * 
         */
        public Builder characterSetServer(String characterSetServer) {
            return characterSetServer(Output.of(characterSetServer));
        }

        /**
         * @param collationServer The server&#39;s default collation.
         * 
         * collationServer corresponds to the MySQL server variable [collation_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_collation_server).
         * 
         * @return builder
         * 
         */
        public Builder collationServer(@Nullable Output<String> collationServer) {
            $.collationServer = collationServer;
            return this;
        }

        /**
         * @param collationServer The server&#39;s default collation.
         * 
         * collationServer corresponds to the MySQL server variable [collation_server](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_collation_server).
         * 
         * @return builder
         * 
         */
        public Builder collationServer(String collationServer) {
            return collationServer(Output.of(collationServer));
        }

        /**
         * @param completionType (&#34;completion_type&#34;)
         * 
         * @return builder
         * 
         */
        public Builder completionType(@Nullable Output<String> completionType) {
            $.completionType = completionType;
            return this;
        }

        /**
         * @param completionType (&#34;completion_type&#34;)
         * 
         * @return builder
         * 
         */
        public Builder completionType(String completionType) {
            return completionType(Output.of(completionType));
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
         * 
         * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
         * 
         * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param connectionMemoryChunkSize Set the chunking size for updates to the global memory usage counter Global_connection_memory.
         * 
         * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryChunkSize(@Nullable Output<Integer> connectionMemoryChunkSize) {
            $.connectionMemoryChunkSize = connectionMemoryChunkSize;
            return this;
        }

        /**
         * @param connectionMemoryChunkSize Set the chunking size for updates to the global memory usage counter Global_connection_memory.
         * 
         * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryChunkSize(Integer connectionMemoryChunkSize) {
            return connectionMemoryChunkSize(Output.of(connectionMemoryChunkSize));
        }

        /**
         * @param connectionMemoryLimit Set the maximum amount of memory that can be used by a single user connection.
         * 
         * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryLimit(@Nullable Output<String> connectionMemoryLimit) {
            $.connectionMemoryLimit = connectionMemoryLimit;
            return this;
        }

        /**
         * @param connectionMemoryLimit Set the maximum amount of memory that can be used by a single user connection.
         * 
         * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryLimit(String connectionMemoryLimit) {
            return connectionMemoryLimit(Output.of(connectionMemoryLimit));
        }

        /**
         * @param cteMaxRecursionDepth (&#34;cte_max_recursion_depth&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cteMaxRecursionDepth(@Nullable Output<String> cteMaxRecursionDepth) {
            $.cteMaxRecursionDepth = cteMaxRecursionDepth;
            return this;
        }

        /**
         * @param cteMaxRecursionDepth (&#34;cte_max_recursion_depth&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cteMaxRecursionDepth(String cteMaxRecursionDepth) {
            return cteMaxRecursionDepth(Output.of(cteMaxRecursionDepth));
        }

        /**
         * @param defaultAuthenticationPlugin The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
         * 
         * As of MySQL 8.0.27, which introduces multifactor authentication, default_authentication_plugin is still used, but in conjunction with and at a lower precedence than the authentication_policy system variable. For details, see The Default Authentication Plugin. Because of this diminished role, default_authentication_plugin is deprecated as of MySQL 8.0.27 and subject to removal in a future MySQL version.
         * 
         * defaultAuthenticationPlugin corresponds to the MySQL system variable [default_authentication_plugin](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin).
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthenticationPlugin(@Nullable Output<String> defaultAuthenticationPlugin) {
            $.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            return this;
        }

        /**
         * @param defaultAuthenticationPlugin The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
         * 
         * As of MySQL 8.0.27, which introduces multifactor authentication, default_authentication_plugin is still used, but in conjunction with and at a lower precedence than the authentication_policy system variable. For details, see The Default Authentication Plugin. Because of this diminished role, default_authentication_plugin is deprecated as of MySQL 8.0.27 and subject to removal in a future MySQL version.
         * 
         * defaultAuthenticationPlugin corresponds to the MySQL system variable [default_authentication_plugin](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin).
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthenticationPlugin(String defaultAuthenticationPlugin) {
            return defaultAuthenticationPlugin(Output.of(defaultAuthenticationPlugin));
        }

        /**
         * @param explainFormat This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
         * 
         * explainFormat corresponds to the MySQL system variable [explain_format](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explain_format).
         * 
         * @return builder
         * 
         */
        public Builder explainFormat(@Nullable Output<String> explainFormat) {
            $.explainFormat = explainFormat;
            return this;
        }

        /**
         * @param explainFormat This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
         * 
         * explainFormat corresponds to the MySQL system variable [explain_format](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explain_format).
         * 
         * @return builder
         * 
         */
        public Builder explainFormat(String explainFormat) {
            return explainFormat(Output.of(explainFormat));
        }

        /**
         * @param explicitDefaultsForTimestamp This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
         * 
         * explicit_defaults_for_timestamp corresponds to the MySQL Server Administration system variable [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
         * 
         * @return builder
         * 
         */
        public Builder explicitDefaultsForTimestamp(@Nullable Output<Boolean> explicitDefaultsForTimestamp) {
            $.explicitDefaultsForTimestamp = explicitDefaultsForTimestamp;
            return this;
        }

        /**
         * @param explicitDefaultsForTimestamp This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
         * 
         * explicit_defaults_for_timestamp corresponds to the MySQL Server Administration system variable [explicit_defaults_for_timestamp](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
         * 
         * @return builder
         * 
         */
        public Builder explicitDefaultsForTimestamp(Boolean explicitDefaultsForTimestamp) {
            return explicitDefaultsForTimestamp(Output.of(explicitDefaultsForTimestamp));
        }

        /**
         * @param foreignKeyChecks (&#34;foreign_key_checks&#34;)
         * 
         * @return builder
         * 
         */
        public Builder foreignKeyChecks(@Nullable Output<Boolean> foreignKeyChecks) {
            $.foreignKeyChecks = foreignKeyChecks;
            return this;
        }

        /**
         * @param foreignKeyChecks (&#34;foreign_key_checks&#34;)
         * 
         * @return builder
         * 
         */
        public Builder foreignKeyChecks(Boolean foreignKeyChecks) {
            return foreignKeyChecks(Output.of(foreignKeyChecks));
        }

        /**
         * @param generatedRandomPasswordLength (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder generatedRandomPasswordLength(@Nullable Output<Integer> generatedRandomPasswordLength) {
            $.generatedRandomPasswordLength = generatedRandomPasswordLength;
            return this;
        }

        /**
         * @param generatedRandomPasswordLength (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder generatedRandomPasswordLength(Integer generatedRandomPasswordLength) {
            return generatedRandomPasswordLength(Output.of(generatedRandomPasswordLength));
        }

        /**
         * @param globalConnectionMemoryLimit Set the total amount of memory that can be used by all user connections.
         * 
         * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryLimit(@Nullable Output<String> globalConnectionMemoryLimit) {
            $.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            return this;
        }

        /**
         * @param globalConnectionMemoryLimit Set the total amount of memory that can be used by all user connections.
         * 
         * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryLimit(String globalConnectionMemoryLimit) {
            return globalConnectionMemoryLimit(Output.of(globalConnectionMemoryLimit));
        }

        /**
         * @param globalConnectionMemoryTracking Determines whether the MySQL server calculates Global_connection_memory.
         * 
         * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryTracking(@Nullable Output<Boolean> globalConnectionMemoryTracking) {
            $.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            return this;
        }

        /**
         * @param globalConnectionMemoryTracking Determines whether the MySQL server calculates Global_connection_memory.
         * 
         * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryTracking(Boolean globalConnectionMemoryTracking) {
            return globalConnectionMemoryTracking(Output.of(globalConnectionMemoryTracking));
        }

        /**
         * @param groupConcatMaxLen Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
         * 
         * This is the MySQL variable &#34;group_concat_max_len&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len)
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(@Nullable Output<String> groupConcatMaxLen) {
            $.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        /**
         * @param groupConcatMaxLen Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
         * 
         * This is the MySQL variable &#34;group_concat_max_len&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len)
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(String groupConcatMaxLen) {
            return groupConcatMaxLen(Output.of(groupConcatMaxLen));
        }

        /**
         * @param groupReplicationConsistency * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
         * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
         * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * 
         * @return builder
         * 
         */
        public Builder groupReplicationConsistency(@Nullable Output<String> groupReplicationConsistency) {
            $.groupReplicationConsistency = groupReplicationConsistency;
            return this;
        }

        /**
         * @param groupReplicationConsistency * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
         * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
         * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * 
         * @return builder
         * 
         */
        public Builder groupReplicationConsistency(String groupReplicationConsistency) {
            return groupReplicationConsistency(Output.of(groupReplicationConsistency));
        }

        /**
         * @param informationSchemaStatsExpiry (&#34;information_schema_stats_expiry&#34;)
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(@Nullable Output<Integer> informationSchemaStatsExpiry) {
            $.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * @param informationSchemaStatsExpiry (&#34;information_schema_stats_expiry&#34;)
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            return informationSchemaStatsExpiry(Output.of(informationSchemaStatsExpiry));
        }

        /**
         * @param innodbAdaptiveHashIndex Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
         * 
         * innodbAdaptiveHashIndex corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_adaptive_hash_index] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index).
         * 
         * @return builder
         * 
         */
        public Builder innodbAdaptiveHashIndex(@Nullable Output<Boolean> innodbAdaptiveHashIndex) {
            $.innodbAdaptiveHashIndex = innodbAdaptiveHashIndex;
            return this;
        }

        /**
         * @param innodbAdaptiveHashIndex Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
         * 
         * innodbAdaptiveHashIndex corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_adaptive_hash_index] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index).
         * 
         * @return builder
         * 
         */
        public Builder innodbAdaptiveHashIndex(Boolean innodbAdaptiveHashIndex) {
            return innodbAdaptiveHashIndex(Output.of(innodbAdaptiveHashIndex));
        }

        /**
         * @param innodbAutoincLockMode The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
         * 
         * innodbAutoincLockMode corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_autoinc_lock_mode] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
         * 
         * @return builder
         * 
         */
        public Builder innodbAutoincLockMode(@Nullable Output<Integer> innodbAutoincLockMode) {
            $.innodbAutoincLockMode = innodbAutoincLockMode;
            return this;
        }

        /**
         * @param innodbAutoincLockMode The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
         * 
         * innodbAutoincLockMode corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_autoinc_lock_mode] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
         * 
         * @return builder
         * 
         */
        public Builder innodbAutoincLockMode(Integer innodbAutoincLockMode) {
            return innodbAutoincLockMode(Output.of(innodbAutoincLockMode));
        }

        /**
         * @param innodbBufferPoolDumpPct Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
         * 
         * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
         * 
         * The range is 1 to 100. The default value is 25.
         * 
         * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolDumpPct(@Nullable Output<Integer> innodbBufferPoolDumpPct) {
            $.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            return this;
        }

        /**
         * @param innodbBufferPoolDumpPct Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
         * 
         * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
         * 
         * The range is 1 to 100. The default value is 25.
         * 
         * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolDumpPct(Integer innodbBufferPoolDumpPct) {
            return innodbBufferPoolDumpPct(Output.of(innodbBufferPoolDumpPct));
        }

        /**
         * @param innodbBufferPoolInstances (&#34;innodb_buffer_pool_instances&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolInstances(@Nullable Output<Integer> innodbBufferPoolInstances) {
            $.innodbBufferPoolInstances = innodbBufferPoolInstances;
            return this;
        }

        /**
         * @param innodbBufferPoolInstances (&#34;innodb_buffer_pool_instances&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolInstances(Integer innodbBufferPoolInstances) {
            return innodbBufferPoolInstances(Output.of(innodbBufferPoolInstances));
        }

        /**
         * @param innodbBufferPoolSize The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
         * 
         * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
         * 
         * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolSize(@Nullable Output<String> innodbBufferPoolSize) {
            $.innodbBufferPoolSize = innodbBufferPoolSize;
            return this;
        }

        /**
         * @param innodbBufferPoolSize The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
         * 
         * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
         * 
         * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolSize(String innodbBufferPoolSize) {
            return innodbBufferPoolSize(Output.of(innodbBufferPoolSize));
        }

        /**
         * @param innodbChangeBuffering Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
         * 
         * innodbChangeBuffering corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_change_buffering] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
         * 
         * @return builder
         * 
         */
        public Builder innodbChangeBuffering(@Nullable Output<String> innodbChangeBuffering) {
            $.innodbChangeBuffering = innodbChangeBuffering;
            return this;
        }

        /**
         * @param innodbChangeBuffering Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
         * 
         * innodbChangeBuffering corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_change_buffering] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
         * 
         * @return builder
         * 
         */
        public Builder innodbChangeBuffering(String innodbChangeBuffering) {
            return innodbChangeBuffering(Output.of(innodbChangeBuffering));
        }

        /**
         * @param innodbDdlBufferSize innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlBufferSize(@Nullable Output<String> innodbDdlBufferSize) {
            $.innodbDdlBufferSize = innodbDdlBufferSize;
            return this;
        }

        /**
         * @param innodbDdlBufferSize innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlBufferSize(String innodbDdlBufferSize) {
            return innodbDdlBufferSize(Output.of(innodbDdlBufferSize));
        }

        /**
         * @param innodbDdlThreads innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlThreads(@Nullable Output<Integer> innodbDdlThreads) {
            $.innodbDdlThreads = innodbDdlThreads;
            return this;
        }

        /**
         * @param innodbDdlThreads innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlThreads(Integer innodbDdlThreads) {
            return innodbDdlThreads(Output.of(innodbDdlThreads));
        }

        /**
         * @param innodbFtEnableStopword (&#34;innodb_ft_enable_stopword&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtEnableStopword(@Nullable Output<Boolean> innodbFtEnableStopword) {
            $.innodbFtEnableStopword = innodbFtEnableStopword;
            return this;
        }

        /**
         * @param innodbFtEnableStopword (&#34;innodb_ft_enable_stopword&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtEnableStopword(Boolean innodbFtEnableStopword) {
            return innodbFtEnableStopword(Output.of(innodbFtEnableStopword));
        }

        /**
         * @param innodbFtMaxTokenSize (&#34;innodb_ft_max_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMaxTokenSize(@Nullable Output<Integer> innodbFtMaxTokenSize) {
            $.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            return this;
        }

        /**
         * @param innodbFtMaxTokenSize (&#34;innodb_ft_max_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMaxTokenSize(Integer innodbFtMaxTokenSize) {
            return innodbFtMaxTokenSize(Output.of(innodbFtMaxTokenSize));
        }

        /**
         * @param innodbFtMinTokenSize (&#34;innodb_ft_min_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(@Nullable Output<Integer> innodbFtMinTokenSize) {
            $.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * @param innodbFtMinTokenSize (&#34;innodb_ft_min_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            return innodbFtMinTokenSize(Output.of(innodbFtMinTokenSize));
        }

        /**
         * @param innodbFtNumWordOptimize (&#34;innodb_ft_num_word_optimize&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtNumWordOptimize(@Nullable Output<Integer> innodbFtNumWordOptimize) {
            $.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            return this;
        }

        /**
         * @param innodbFtNumWordOptimize (&#34;innodb_ft_num_word_optimize&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtNumWordOptimize(Integer innodbFtNumWordOptimize) {
            return innodbFtNumWordOptimize(Output.of(innodbFtNumWordOptimize));
        }

        /**
         * @param innodbFtResultCacheLimit (&#34;innodb_ft_result_cache_limit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtResultCacheLimit(@Nullable Output<String> innodbFtResultCacheLimit) {
            $.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            return this;
        }

        /**
         * @param innodbFtResultCacheLimit (&#34;innodb_ft_result_cache_limit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtResultCacheLimit(String innodbFtResultCacheLimit) {
            return innodbFtResultCacheLimit(Output.of(innodbFtResultCacheLimit));
        }

        /**
         * @param innodbFtServerStopwordTable (&#34;innodb_ft_server_stopword_table&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(@Nullable Output<String> innodbFtServerStopwordTable) {
            $.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        /**
         * @param innodbFtServerStopwordTable (&#34;innodb_ft_server_stopword_table&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            return innodbFtServerStopwordTable(Output.of(innodbFtServerStopwordTable));
        }

        /**
         * @param innodbLockWaitTimeout (&#34;innodb_lock_wait_timeout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(@Nullable Output<Integer> innodbLockWaitTimeout) {
            $.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * @param innodbLockWaitTimeout (&#34;innodb_lock_wait_timeout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            return innodbLockWaitTimeout(Output.of(innodbLockWaitTimeout));
        }

        /**
         * @param innodbLogWriterThreads Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
         * 
         * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbLogWriterThreads(@Nullable Output<Boolean> innodbLogWriterThreads) {
            $.innodbLogWriterThreads = innodbLogWriterThreads;
            return this;
        }

        /**
         * @param innodbLogWriterThreads Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
         * 
         * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbLogWriterThreads(Boolean innodbLogWriterThreads) {
            return innodbLogWriterThreads(Output.of(innodbLogWriterThreads));
        }

        /**
         * @param innodbMaxPurgeLag The desired maximum purge lag in terms of transactions.
         * 
         * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
         * 
         * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
         * 
         * The default value is 0, which means there is no maximum purge lag and no delay.
         * 
         * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLag(@Nullable Output<String> innodbMaxPurgeLag) {
            $.innodbMaxPurgeLag = innodbMaxPurgeLag;
            return this;
        }

        /**
         * @param innodbMaxPurgeLag The desired maximum purge lag in terms of transactions.
         * 
         * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
         * 
         * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
         * 
         * The default value is 0, which means there is no maximum purge lag and no delay.
         * 
         * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLag(String innodbMaxPurgeLag) {
            return innodbMaxPurgeLag(Output.of(innodbMaxPurgeLag));
        }

        /**
         * @param innodbMaxPurgeLagDelay The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
         * 
         * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
         * 
         * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLagDelay(@Nullable Output<Integer> innodbMaxPurgeLagDelay) {
            $.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            return this;
        }

        /**
         * @param innodbMaxPurgeLagDelay The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
         * 
         * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
         * 
         * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLagDelay(Integer innodbMaxPurgeLagDelay) {
            return innodbMaxPurgeLagDelay(Output.of(innodbMaxPurgeLagDelay));
        }

        /**
         * @param innodbNumaInterleave Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
         * 
         * innodbNumaInterleave corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_numa_interleave] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave).
         * 
         * @return builder
         * 
         */
        public Builder innodbNumaInterleave(@Nullable Output<Boolean> innodbNumaInterleave) {
            $.innodbNumaInterleave = innodbNumaInterleave;
            return this;
        }

        /**
         * @param innodbNumaInterleave Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
         * 
         * innodbNumaInterleave corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_numa_interleave] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave).
         * 
         * @return builder
         * 
         */
        public Builder innodbNumaInterleave(Boolean innodbNumaInterleave) {
            return innodbNumaInterleave(Output.of(innodbNumaInterleave));
        }

        /**
         * @param innodbOnlineAlterLogMaxSize Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
         * 
         * innodbOnlineAlterLogMaxSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_online_alter_log_max_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(@Nullable Output<String> innodbOnlineAlterLogMaxSize) {
            $.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        /**
         * @param innodbOnlineAlterLogMaxSize Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
         * 
         * innodbOnlineAlterLogMaxSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_online_alter_log_max_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(String innodbOnlineAlterLogMaxSize) {
            return innodbOnlineAlterLogMaxSize(Output.of(innodbOnlineAlterLogMaxSize));
        }

        /**
         * @param innodbRedoLogCapacity Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
         * 
         * innodbRedoLogCapacity corresponds to the InnoDB Startup Options and System Variables [innodb_redo_log_capacity](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_redo_log_capacity)
         * 
         * @return builder
         * 
         */
        public Builder innodbRedoLogCapacity(@Nullable Output<String> innodbRedoLogCapacity) {
            $.innodbRedoLogCapacity = innodbRedoLogCapacity;
            return this;
        }

        /**
         * @param innodbRedoLogCapacity Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
         * 
         * innodbRedoLogCapacity corresponds to the InnoDB Startup Options and System Variables [innodb_redo_log_capacity](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_redo_log_capacity)
         * 
         * @return builder
         * 
         */
        public Builder innodbRedoLogCapacity(String innodbRedoLogCapacity) {
            return innodbRedoLogCapacity(Output.of(innodbRedoLogCapacity));
        }

        /**
         * @param innodbRollbackOnTimeout InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
         * 
         * innodbRollbackOnTimeout corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_rollback_on_timeout] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_rollback_on_timeout).
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(@Nullable Output<Boolean> innodbRollbackOnTimeout) {
            $.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        /**
         * @param innodbRollbackOnTimeout InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
         * 
         * innodbRollbackOnTimeout corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_rollback_on_timeout] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_rollback_on_timeout).
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            return innodbRollbackOnTimeout(Output.of(innodbRollbackOnTimeout));
        }

        /**
         * @param innodbSortBufferSize This variable defines:
         * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
         * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
         * 
         * innodbSortBufferSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_sort_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_sort_buffer_size).
         * 
         * @return builder
         * 
         */
        public Builder innodbSortBufferSize(@Nullable Output<Integer> innodbSortBufferSize) {
            $.innodbSortBufferSize = innodbSortBufferSize;
            return this;
        }

        /**
         * @param innodbSortBufferSize This variable defines:
         * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
         * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
         * 
         * innodbSortBufferSize corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_sort_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_sort_buffer_size).
         * 
         * @return builder
         * 
         */
        public Builder innodbSortBufferSize(Integer innodbSortBufferSize) {
            return innodbSortBufferSize(Output.of(innodbSortBufferSize));
        }

        /**
         * @param innodbStatsPersistentSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
         * 
         * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
         * 
         * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsPersistentSamplePages(@Nullable Output<String> innodbStatsPersistentSamplePages) {
            $.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            return this;
        }

        /**
         * @param innodbStatsPersistentSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
         * 
         * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
         * 
         * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsPersistentSamplePages(String innodbStatsPersistentSamplePages) {
            return innodbStatsPersistentSamplePages(Output.of(innodbStatsPersistentSamplePages));
        }

        /**
         * @param innodbStatsTransientSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
         * 
         * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
         * 
         * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
         * 
         * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsTransientSamplePages(@Nullable Output<String> innodbStatsTransientSamplePages) {
            $.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            return this;
        }

        /**
         * @param innodbStatsTransientSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
         * 
         * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
         * 
         * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
         * 
         * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsTransientSamplePages(String innodbStatsTransientSamplePages) {
            return innodbStatsTransientSamplePages(Output.of(innodbStatsTransientSamplePages));
        }

        /**
         * @param innodbStrictMode When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
         * 
         * innodbStrictMode corresponds to the MySQL InnoDB system variable [innodb_strict_mode](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode)
         * 
         * @return builder
         * 
         */
        public Builder innodbStrictMode(@Nullable Output<Boolean> innodbStrictMode) {
            $.innodbStrictMode = innodbStrictMode;
            return this;
        }

        /**
         * @param innodbStrictMode When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
         * 
         * innodbStrictMode corresponds to the MySQL InnoDB system variable [innodb_strict_mode](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode)
         * 
         * @return builder
         * 
         */
        public Builder innodbStrictMode(Boolean innodbStrictMode) {
            return innodbStrictMode(Output.of(innodbStrictMode));
        }

        /**
         * @param innodbUndoLogTruncate When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
         * 
         * innodbUndoLogTruncate corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_undo_log_truncate] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_undo_log_truncate).
         * 
         * @return builder
         * 
         */
        public Builder innodbUndoLogTruncate(@Nullable Output<Boolean> innodbUndoLogTruncate) {
            $.innodbUndoLogTruncate = innodbUndoLogTruncate;
            return this;
        }

        /**
         * @param innodbUndoLogTruncate When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
         * 
         * innodbUndoLogTruncate corresponds to the MySQL InnoDB Startup Options and System Variables [innodb_undo_log_truncate] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_undo_log_truncate).
         * 
         * @return builder
         * 
         */
        public Builder innodbUndoLogTruncate(Boolean innodbUndoLogTruncate) {
            return innodbUndoLogTruncate(Output.of(innodbUndoLogTruncate));
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(@Nullable Output<Integer> interactiveTimeout) {
            $.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            return interactiveTimeout(Output.of(interactiveTimeout));
        }

        /**
         * @param joinBufferSize The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
         * 
         * joinBufferSize corresponds to the MySQL Server System variable [join_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size).
         * 
         * @return builder
         * 
         */
        public Builder joinBufferSize(@Nullable Output<String> joinBufferSize) {
            $.joinBufferSize = joinBufferSize;
            return this;
        }

        /**
         * @param joinBufferSize The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
         * 
         * joinBufferSize corresponds to the MySQL Server System variable [join_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size).
         * 
         * @return builder
         * 
         */
        public Builder joinBufferSize(String joinBufferSize) {
            return joinBufferSize(Output.of(joinBufferSize));
        }

        /**
         * @param localInfile This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
         * 
         * local_infile corresponds to the MySQL Server system variable [local_infile](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_local_infile)
         * 
         * @return builder
         * 
         */
        public Builder localInfile(@Nullable Output<Boolean> localInfile) {
            $.localInfile = localInfile;
            return this;
        }

        /**
         * @param localInfile This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
         * 
         * local_infile corresponds to the MySQL Server system variable [local_infile](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_local_infile)
         * 
         * @return builder
         * 
         */
        public Builder localInfile(Boolean localInfile) {
            return localInfile(Output.of(localInfile));
        }

        /**
         * @param longQueryTime If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
         * 
         * longQueryTime corresponds to the MySQL Server System variable [long_query_time] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(@Nullable Output<Integer> longQueryTime) {
            $.longQueryTime = longQueryTime;
            return this;
        }

        /**
         * @param longQueryTime If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
         * 
         * longQueryTime corresponds to the MySQL Server System variable [long_query_time] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time).
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(Integer longQueryTime) {
            return longQueryTime(Output.of(longQueryTime));
        }

        /**
         * @param mandatoryRoles (&#34;mandatory_roles&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryRoles(@Nullable Output<String> mandatoryRoles) {
            $.mandatoryRoles = mandatoryRoles;
            return this;
        }

        /**
         * @param mandatoryRoles (&#34;mandatory_roles&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryRoles(String mandatoryRoles) {
            return mandatoryRoles(Output.of(mandatoryRoles));
        }

        /**
         * @param maxAllowedPacket The maximum size of one packet or any generated/intermediate string.
         * 
         * This is the mysql variable &#34;max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(@Nullable Output<Integer> maxAllowedPacket) {
            $.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * @param maxAllowedPacket The maximum size of one packet or any generated/intermediate string.
         * 
         * This is the mysql variable &#34;max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            return maxAllowedPacket(Output.of(maxAllowedPacket));
        }

        /**
         * @param maxBinlogCacheSize Sets the size of the transaction cache.
         * 
         * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
         * 
         * @return builder
         * 
         */
        public Builder maxBinlogCacheSize(@Nullable Output<String> maxBinlogCacheSize) {
            $.maxBinlogCacheSize = maxBinlogCacheSize;
            return this;
        }

        /**
         * @param maxBinlogCacheSize Sets the size of the transaction cache.
         * 
         * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
         * 
         * @return builder
         * 
         */
        public Builder maxBinlogCacheSize(String maxBinlogCacheSize) {
            return maxBinlogCacheSize(Output.of(maxBinlogCacheSize));
        }

        /**
         * @param maxConnectErrors (&#34;max_connect_errors&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnectErrors(@Nullable Output<String> maxConnectErrors) {
            $.maxConnectErrors = maxConnectErrors;
            return this;
        }

        /**
         * @param maxConnectErrors (&#34;max_connect_errors&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnectErrors(String maxConnectErrors) {
            return maxConnectErrors(Output.of(maxConnectErrors));
        }

        /**
         * @param maxConnections (&#34;max_connections&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections (&#34;max_connections&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxExecutionTime (&#34;max_execution_time&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxExecutionTime(@Nullable Output<String> maxExecutionTime) {
            $.maxExecutionTime = maxExecutionTime;
            return this;
        }

        /**
         * @param maxExecutionTime (&#34;max_execution_time&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxExecutionTime(String maxExecutionTime) {
            return maxExecutionTime(Output.of(maxExecutionTime));
        }

        /**
         * @param maxHeapTableSize This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
         * 
         * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(@Nullable Output<String> maxHeapTableSize) {
            $.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * @param maxHeapTableSize This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
         * 
         * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(String maxHeapTableSize) {
            return maxHeapTableSize(Output.of(maxHeapTableSize));
        }

        /**
         * @param maxPreparedStmtCount (&#34;max_prepared_stmt_count&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedStmtCount(@Nullable Output<Integer> maxPreparedStmtCount) {
            $.maxPreparedStmtCount = maxPreparedStmtCount;
            return this;
        }

        /**
         * @param maxPreparedStmtCount (&#34;max_prepared_stmt_count&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedStmtCount(Integer maxPreparedStmtCount) {
            return maxPreparedStmtCount(Output.of(maxPreparedStmtCount));
        }

        /**
         * @param maxSeeksForKey Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
         * 
         * maxSeeksForKey corresponds to the MySQL Server System variable [max_seeks_for_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_seeks_for_key).
         * 
         * @return builder
         * 
         */
        public Builder maxSeeksForKey(@Nullable Output<String> maxSeeksForKey) {
            $.maxSeeksForKey = maxSeeksForKey;
            return this;
        }

        /**
         * @param maxSeeksForKey Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
         * 
         * maxSeeksForKey corresponds to the MySQL Server System variable [max_seeks_for_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_seeks_for_key).
         * 
         * @return builder
         * 
         */
        public Builder maxSeeksForKey(String maxSeeksForKey) {
            return maxSeeksForKey(Output.of(maxSeeksForKey));
        }

        /**
         * @param maxUserConnections The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
         * 
         * maxUserConnections corresponds to the MySQL Server System variable [max_user_connections] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_user_connections).
         * 
         * @return builder
         * 
         */
        public Builder maxUserConnections(@Nullable Output<String> maxUserConnections) {
            $.maxUserConnections = maxUserConnections;
            return this;
        }

        /**
         * @param maxUserConnections The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
         * 
         * maxUserConnections corresponds to the MySQL Server System variable [max_user_connections] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_user_connections).
         * 
         * @return builder
         * 
         */
        public Builder maxUserConnections(String maxUserConnections) {
            return maxUserConnections(Output.of(maxUserConnections));
        }

        /**
         * @param mysqlFirewallMode (&#34;mysql_firewall_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlFirewallMode(@Nullable Output<Boolean> mysqlFirewallMode) {
            $.mysqlFirewallMode = mysqlFirewallMode;
            return this;
        }

        /**
         * @param mysqlFirewallMode (&#34;mysql_firewall_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlFirewallMode(Boolean mysqlFirewallMode) {
            return mysqlFirewallMode(Output.of(mysqlFirewallMode));
        }

        /**
         * @param mysqlZstdDefaultCompressionLevel DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlZstdDefaultCompressionLevel(@Nullable Output<Integer> mysqlZstdDefaultCompressionLevel) {
            $.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlZstdDefaultCompressionLevel DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlZstdDefaultCompressionLevel(Integer mysqlZstdDefaultCompressionLevel) {
            return mysqlZstdDefaultCompressionLevel(Output.of(mysqlZstdDefaultCompressionLevel));
        }

        /**
         * @param mysqlxConnectTimeout The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
         * 
         * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxConnectTimeout(@Nullable Output<Integer> mysqlxConnectTimeout) {
            $.mysqlxConnectTimeout = mysqlxConnectTimeout;
            return this;
        }

        /**
         * @param mysqlxConnectTimeout The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
         * 
         * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxConnectTimeout(Integer mysqlxConnectTimeout) {
            return mysqlxConnectTimeout(Output.of(mysqlxConnectTimeout));
        }

        /**
         * @param mysqlxDeflateDefaultCompressionLevel Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateDefaultCompressionLevel(@Nullable Output<Integer> mysqlxDeflateDefaultCompressionLevel) {
            $.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxDeflateDefaultCompressionLevel Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateDefaultCompressionLevel(Integer mysqlxDeflateDefaultCompressionLevel) {
            return mysqlxDeflateDefaultCompressionLevel(Output.of(mysqlxDeflateDefaultCompressionLevel));
        }

        /**
         * @param mysqlxDeflateMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateMaxClientCompressionLevel(@Nullable Output<Integer> mysqlxDeflateMaxClientCompressionLevel) {
            $.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxDeflateMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateMaxClientCompressionLevel(Integer mysqlxDeflateMaxClientCompressionLevel) {
            return mysqlxDeflateMaxClientCompressionLevel(Output.of(mysqlxDeflateMaxClientCompressionLevel));
        }

        /**
         * @param mysqlxDocumentIdUniquePrefix (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxDocumentIdUniquePrefix(@Nullable Output<Integer> mysqlxDocumentIdUniquePrefix) {
            $.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            return this;
        }

        /**
         * @param mysqlxDocumentIdUniquePrefix (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxDocumentIdUniquePrefix(Integer mysqlxDocumentIdUniquePrefix) {
            return mysqlxDocumentIdUniquePrefix(Output.of(mysqlxDocumentIdUniquePrefix));
        }

        /**
         * @param mysqlxEnableHelloNotice (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder mysqlxEnableHelloNotice(@Nullable Output<Boolean> mysqlxEnableHelloNotice) {
            $.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            return this;
        }

        /**
         * @param mysqlxEnableHelloNotice (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder mysqlxEnableHelloNotice(Boolean mysqlxEnableHelloNotice) {
            return mysqlxEnableHelloNotice(Output.of(mysqlxEnableHelloNotice));
        }

        /**
         * @param mysqlxIdleWorkerThreadTimeout (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxIdleWorkerThreadTimeout(@Nullable Output<Integer> mysqlxIdleWorkerThreadTimeout) {
            $.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            return this;
        }

        /**
         * @param mysqlxIdleWorkerThreadTimeout (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxIdleWorkerThreadTimeout(Integer mysqlxIdleWorkerThreadTimeout) {
            return mysqlxIdleWorkerThreadTimeout(Output.of(mysqlxIdleWorkerThreadTimeout));
        }

        /**
         * @param mysqlxInteractiveTimeout The number of seconds to wait for interactive clients to timeout.
         * 
         * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxInteractiveTimeout(@Nullable Output<Integer> mysqlxInteractiveTimeout) {
            $.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            return this;
        }

        /**
         * @param mysqlxInteractiveTimeout The number of seconds to wait for interactive clients to timeout.
         * 
         * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxInteractiveTimeout(Integer mysqlxInteractiveTimeout) {
            return mysqlxInteractiveTimeout(Output.of(mysqlxInteractiveTimeout));
        }

        /**
         * @param mysqlxLz4defaultCompressionLevel Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4defaultCompressionLevel(@Nullable Output<Integer> mysqlxLz4defaultCompressionLevel) {
            $.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxLz4defaultCompressionLevel Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4defaultCompressionLevel(Integer mysqlxLz4defaultCompressionLevel) {
            return mysqlxLz4defaultCompressionLevel(Output.of(mysqlxLz4defaultCompressionLevel));
        }

        /**
         * @param mysqlxLz4maxClientCompressionLevel Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4maxClientCompressionLevel(@Nullable Output<Integer> mysqlxLz4maxClientCompressionLevel) {
            $.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxLz4maxClientCompressionLevel Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4maxClientCompressionLevel(Integer mysqlxLz4maxClientCompressionLevel) {
            return mysqlxLz4maxClientCompressionLevel(Output.of(mysqlxLz4maxClientCompressionLevel));
        }

        /**
         * @param mysqlxMaxAllowedPacket The maximum size of network packets that can be received by X Plugin.
         * 
         * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mysqlxMaxAllowedPacket(@Nullable Output<Integer> mysqlxMaxAllowedPacket) {
            $.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            return this;
        }

        /**
         * @param mysqlxMaxAllowedPacket The maximum size of network packets that can be received by X Plugin.
         * 
         * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mysqlxMaxAllowedPacket(Integer mysqlxMaxAllowedPacket) {
            return mysqlxMaxAllowedPacket(Output.of(mysqlxMaxAllowedPacket));
        }

        /**
         * @param mysqlxMinWorkerThreads (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxMinWorkerThreads(@Nullable Output<Integer> mysqlxMinWorkerThreads) {
            $.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            return this;
        }

        /**
         * @param mysqlxMinWorkerThreads (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxMinWorkerThreads(Integer mysqlxMinWorkerThreads) {
            return mysqlxMinWorkerThreads(Output.of(mysqlxMinWorkerThreads));
        }

        /**
         * @param mysqlxReadTimeout The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
         * 
         * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxReadTimeout(@Nullable Output<Integer> mysqlxReadTimeout) {
            $.mysqlxReadTimeout = mysqlxReadTimeout;
            return this;
        }

        /**
         * @param mysqlxReadTimeout The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
         * 
         * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxReadTimeout(Integer mysqlxReadTimeout) {
            return mysqlxReadTimeout(Output.of(mysqlxReadTimeout));
        }

        /**
         * @param mysqlxWaitTimeout The number of seconds that X Plugin waits for activity on a connection.
         * 
         * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWaitTimeout(@Nullable Output<Integer> mysqlxWaitTimeout) {
            $.mysqlxWaitTimeout = mysqlxWaitTimeout;
            return this;
        }

        /**
         * @param mysqlxWaitTimeout The number of seconds that X Plugin waits for activity on a connection.
         * 
         * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWaitTimeout(Integer mysqlxWaitTimeout) {
            return mysqlxWaitTimeout(Output.of(mysqlxWaitTimeout));
        }

        /**
         * @param mysqlxWriteTimeout The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
         * 
         * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWriteTimeout(@Nullable Output<Integer> mysqlxWriteTimeout) {
            $.mysqlxWriteTimeout = mysqlxWriteTimeout;
            return this;
        }

        /**
         * @param mysqlxWriteTimeout The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
         * 
         * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWriteTimeout(Integer mysqlxWriteTimeout) {
            return mysqlxWriteTimeout(Output.of(mysqlxWriteTimeout));
        }

        /**
         * @param mysqlxZstdDefaultCompressionLevel Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdDefaultCompressionLevel(@Nullable Output<Integer> mysqlxZstdDefaultCompressionLevel) {
            $.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxZstdDefaultCompressionLevel Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdDefaultCompressionLevel(Integer mysqlxZstdDefaultCompressionLevel) {
            return mysqlxZstdDefaultCompressionLevel(Output.of(mysqlxZstdDefaultCompressionLevel));
        }

        /**
         * @param mysqlxZstdMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdMaxClientCompressionLevel(@Nullable Output<Integer> mysqlxZstdMaxClientCompressionLevel) {
            $.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxZstdMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdMaxClientCompressionLevel(Integer mysqlxZstdMaxClientCompressionLevel) {
            return mysqlxZstdMaxClientCompressionLevel(Output.of(mysqlxZstdMaxClientCompressionLevel));
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(@Nullable Output<Integer> netReadTimeout) {
            $.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(Integer netReadTimeout) {
            return netReadTimeout(Output.of(netReadTimeout));
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(@Nullable Output<Integer> netWriteTimeout) {
            $.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            return netWriteTimeout(Output.of(netWriteTimeout));
        }

        /**
         * @param optimizerSwitch The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
         * 
         * Setting hypergraph_optimizer=on for cloud builds below 9.0.0 will fail.
         * 
         * optimizerSwitch corresponds to the MySQL Server System variable [optimizer_switch] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch).
         * 
         * @return builder
         * 
         */
        public Builder optimizerSwitch(@Nullable Output<String> optimizerSwitch) {
            $.optimizerSwitch = optimizerSwitch;
            return this;
        }

        /**
         * @param optimizerSwitch The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
         * 
         * Setting hypergraph_optimizer=on for cloud builds below 9.0.0 will fail.
         * 
         * optimizerSwitch corresponds to the MySQL Server System variable [optimizer_switch] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch).
         * 
         * @return builder
         * 
         */
        public Builder optimizerSwitch(String optimizerSwitch) {
            return optimizerSwitch(Output.of(optimizerSwitch));
        }

        /**
         * @param parserMaxMemSize (&#34;parser_max_mem_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder parserMaxMemSize(@Nullable Output<String> parserMaxMemSize) {
            $.parserMaxMemSize = parserMaxMemSize;
            return this;
        }

        /**
         * @param parserMaxMemSize (&#34;parser_max_mem_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder parserMaxMemSize(String parserMaxMemSize) {
            return parserMaxMemSize(Output.of(parserMaxMemSize));
        }

        /**
         * @param queryAllocBlockSize (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryAllocBlockSize(@Nullable Output<String> queryAllocBlockSize) {
            $.queryAllocBlockSize = queryAllocBlockSize;
            return this;
        }

        /**
         * @param queryAllocBlockSize (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryAllocBlockSize(String queryAllocBlockSize) {
            return queryAllocBlockSize(Output.of(queryAllocBlockSize));
        }

        /**
         * @param queryPreallocSize (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder queryPreallocSize(@Nullable Output<String> queryPreallocSize) {
            $.queryPreallocSize = queryPreallocSize;
            return this;
        }

        /**
         * @param queryPreallocSize (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder queryPreallocSize(String queryPreallocSize) {
            return queryPreallocSize(Output.of(queryPreallocSize));
        }

        /**
         * @param rangeOptimizerMaxMemSize The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
         * 
         * rangeOptimizerMaxMemSize corresponds to the MySQL Server System variable [range_optimizer_max_mem_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size).
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder rangeOptimizerMaxMemSize(@Nullable Output<String> rangeOptimizerMaxMemSize) {
            $.rangeOptimizerMaxMemSize = rangeOptimizerMaxMemSize;
            return this;
        }

        /**
         * @param rangeOptimizerMaxMemSize The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
         * 
         * rangeOptimizerMaxMemSize corresponds to the MySQL Server System variable [range_optimizer_max_mem_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size).
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder rangeOptimizerMaxMemSize(String rangeOptimizerMaxMemSize) {
            return rangeOptimizerMaxMemSize(Output.of(rangeOptimizerMaxMemSize));
        }

        /**
         * @param regexpTimeLimit regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
         * 
         * @return builder
         * 
         */
        public Builder regexpTimeLimit(@Nullable Output<Integer> regexpTimeLimit) {
            $.regexpTimeLimit = regexpTimeLimit;
            return this;
        }

        /**
         * @param regexpTimeLimit regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
         * 
         * @return builder
         * 
         */
        public Builder regexpTimeLimit(Integer regexpTimeLimit) {
            return regexpTimeLimit(Output.of(regexpTimeLimit));
        }

        /**
         * @param relayLogSpaceLimit The maximum amount of space to use for all relay logs.
         * 
         * relayLogSpaceLimit corresponds to the MySQL Replica Server Options variable [relay_log_space_limit] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_relay_log_space_limit).
         * 
         * @return builder
         * 
         */
        public Builder relayLogSpaceLimit(@Nullable Output<String> relayLogSpaceLimit) {
            $.relayLogSpaceLimit = relayLogSpaceLimit;
            return this;
        }

        /**
         * @param relayLogSpaceLimit The maximum amount of space to use for all relay logs.
         * 
         * relayLogSpaceLimit corresponds to the MySQL Replica Server Options variable [relay_log_space_limit] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_relay_log_space_limit).
         * 
         * @return builder
         * 
         */
        public Builder relayLogSpaceLimit(String relayLogSpaceLimit) {
            return relayLogSpaceLimit(Output.of(relayLogSpaceLimit));
        }

        /**
         * @param replicaNetTimeout Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
         * 
         * replicaNetTimeout corresponds to the MySQL Replica server system variable [replica_net_timeout](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_net_timeout)
         * 
         * @return builder
         * 
         */
        public Builder replicaNetTimeout(@Nullable Output<Integer> replicaNetTimeout) {
            $.replicaNetTimeout = replicaNetTimeout;
            return this;
        }

        /**
         * @param replicaNetTimeout Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
         * 
         * replicaNetTimeout corresponds to the MySQL Replica server system variable [replica_net_timeout](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_net_timeout)
         * 
         * @return builder
         * 
         */
        public Builder replicaNetTimeout(Integer replicaNetTimeout) {
            return replicaNetTimeout(Output.of(replicaNetTimeout));
        }

        /**
         * @param replicaParallelWorkers Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
         * 
         * replicaParallelWorkers corresponds to the MySQL Replica Server Options variable [replica_parallel_workers] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder replicaParallelWorkers(@Nullable Output<Integer> replicaParallelWorkers) {
            $.replicaParallelWorkers = replicaParallelWorkers;
            return this;
        }

        /**
         * @param replicaParallelWorkers Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
         * 
         * replicaParallelWorkers corresponds to the MySQL Replica Server Options variable [replica_parallel_workers] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder replicaParallelWorkers(Integer replicaParallelWorkers) {
            return replicaParallelWorkers(Output.of(replicaParallelWorkers));
        }

        /**
         * @param replicaTypeConversions From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
         * 
         * replica_type_conversions controls the type conversion mode in effect on the replica when using row-based replication. Its value is a comma-delimited set of zero or more elements from the list: ALL_LOSSY, ALL_NON_LOSSY, ALL_SIGNED, ALL_UNSIGNED. Set this variable to an empty string to disallow type conversions between the source and the replica. Setting this variable takes effect for all replication channels immediately, including running channels.
         * 
         * replica_type_conversions corresponds to the MySQL Replica Server Options variable [replica_type_conversions] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_type_conversions).
         * 
         * @return builder
         * 
         */
        public Builder replicaTypeConversions(@Nullable Output<String> replicaTypeConversions) {
            $.replicaTypeConversions = replicaTypeConversions;
            return this;
        }

        /**
         * @param replicaTypeConversions From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
         * 
         * replica_type_conversions controls the type conversion mode in effect on the replica when using row-based replication. Its value is a comma-delimited set of zero or more elements from the list: ALL_LOSSY, ALL_NON_LOSSY, ALL_SIGNED, ALL_UNSIGNED. Set this variable to an empty string to disallow type conversions between the source and the replica. Setting this variable takes effect for all replication channels immediately, including running channels.
         * 
         * replica_type_conversions corresponds to the MySQL Replica Server Options variable [replica_type_conversions] (https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replica_type_conversions).
         * 
         * @return builder
         * 
         */
        public Builder replicaTypeConversions(String replicaTypeConversions) {
            return replicaTypeConversions(Output.of(replicaTypeConversions));
        }

        /**
         * @param requireSecureTransport Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
         * 
         * require_secure_transport corresponds to the MySQL Server Administration system variable [require_secure_transport](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_require_secure_transport)
         * 
         * @return builder
         * 
         */
        public Builder requireSecureTransport(@Nullable Output<Boolean> requireSecureTransport) {
            $.requireSecureTransport = requireSecureTransport;
            return this;
        }

        /**
         * @param requireSecureTransport Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
         * 
         * require_secure_transport corresponds to the MySQL Server Administration system variable [require_secure_transport](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_require_secure_transport)
         * 
         * @return builder
         * 
         */
        public Builder requireSecureTransport(Boolean requireSecureTransport) {
            return requireSecureTransport(Output.of(requireSecureTransport));
        }

        /**
         * @param skipNameResolve Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
         * 
         * skipNameResolve corresponds to the MySQL Server System variable [skip_name_resolve] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_skip_name_resolve).
         * 
         * @return builder
         * 
         */
        public Builder skipNameResolve(@Nullable Output<Boolean> skipNameResolve) {
            $.skipNameResolve = skipNameResolve;
            return this;
        }

        /**
         * @param skipNameResolve Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
         * 
         * skipNameResolve corresponds to the MySQL Server System variable [skip_name_resolve] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_skip_name_resolve).
         * 
         * @return builder
         * 
         */
        public Builder skipNameResolve(Boolean skipNameResolve) {
            return skipNameResolve(Output.of(skipNameResolve));
        }

        /**
         * @param sortBufferSize Each session that must perform a sort allocates a buffer of this size.
         * 
         * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(@Nullable Output<String> sortBufferSize) {
            $.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * @param sortBufferSize Each session that must perform a sort allocates a buffer of this size.
         * 
         * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(String sortBufferSize) {
            return sortBufferSize(Output.of(sortBufferSize));
        }

        /**
         * @param sqlGenerateInvisiblePrimaryKey Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
         * 
         * sqlGenerateInvisiblePrimaryKey corresponds to the MySQL system variable [sql_generate_invisible_primary_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_generate_invisible_primary_key).
         * 
         * @return builder
         * 
         */
        public Builder sqlGenerateInvisiblePrimaryKey(@Nullable Output<Boolean> sqlGenerateInvisiblePrimaryKey) {
            $.sqlGenerateInvisiblePrimaryKey = sqlGenerateInvisiblePrimaryKey;
            return this;
        }

        /**
         * @param sqlGenerateInvisiblePrimaryKey Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
         * 
         * sqlGenerateInvisiblePrimaryKey corresponds to the MySQL system variable [sql_generate_invisible_primary_key] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_generate_invisible_primary_key).
         * 
         * @return builder
         * 
         */
        public Builder sqlGenerateInvisiblePrimaryKey(Boolean sqlGenerateInvisiblePrimaryKey) {
            return sqlGenerateInvisiblePrimaryKey(Output.of(sqlGenerateInvisiblePrimaryKey));
        }

        /**
         * @param sqlMode (&#34;sql_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        /**
         * @param sqlMode (&#34;sql_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        /**
         * @param sqlRequirePrimaryKey (&#34;sql_require_primary_key&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(@Nullable Output<Boolean> sqlRequirePrimaryKey) {
            $.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * @param sqlRequirePrimaryKey (&#34;sql_require_primary_key&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            return sqlRequirePrimaryKey(Output.of(sqlRequirePrimaryKey));
        }

        /**
         * @param sqlWarnings (&#34;sql_warnings&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlWarnings(@Nullable Output<Boolean> sqlWarnings) {
            $.sqlWarnings = sqlWarnings;
            return this;
        }

        /**
         * @param sqlWarnings (&#34;sql_warnings&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlWarnings(Boolean sqlWarnings) {
            return sqlWarnings(Output.of(sqlWarnings));
        }

        /**
         * @param tableDefinitionCache The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
         * 
         * table_definition_cache corresponds to the MySQL Server Administration system variable [table_definition_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache)
         * 
         * @return builder
         * 
         */
        public Builder tableDefinitionCache(@Nullable Output<Integer> tableDefinitionCache) {
            $.tableDefinitionCache = tableDefinitionCache;
            return this;
        }

        /**
         * @param tableDefinitionCache The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
         * 
         * table_definition_cache corresponds to the MySQL Server Administration system variable [table_definition_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache)
         * 
         * @return builder
         * 
         */
        public Builder tableDefinitionCache(Integer tableDefinitionCache) {
            return tableDefinitionCache(Output.of(tableDefinitionCache));
        }

        /**
         * @param tableOpenCache The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
         * 
         * table_open_cache corresponds to the MySQL Server Administration system variable [table_open_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache)
         * 
         * @return builder
         * 
         */
        public Builder tableOpenCache(@Nullable Output<Integer> tableOpenCache) {
            $.tableOpenCache = tableOpenCache;
            return this;
        }

        /**
         * @param tableOpenCache The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
         * 
         * table_open_cache corresponds to the MySQL Server Administration system variable [table_open_cache](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache)
         * 
         * @return builder
         * 
         */
        public Builder tableOpenCache(Integer tableOpenCache) {
            return tableOpenCache(Output.of(tableOpenCache));
        }

        /**
         * @param temptableMaxRam Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
         * 
         * temptableMaxRam corresponds to the MySQL system variable [temptable_max_ram] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_temptable_max_ram).
         * 
         * @return builder
         * 
         */
        public Builder temptableMaxRam(@Nullable Output<String> temptableMaxRam) {
            $.temptableMaxRam = temptableMaxRam;
            return this;
        }

        /**
         * @param temptableMaxRam Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
         * 
         * temptableMaxRam corresponds to the MySQL system variable [temptable_max_ram] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_temptable_max_ram).
         * 
         * @return builder
         * 
         */
        public Builder temptableMaxRam(String temptableMaxRam) {
            return temptableMaxRam(Output.of(temptableMaxRam));
        }

        /**
         * @param threadPoolDedicatedListeners Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolDedicatedListeners(@Nullable Output<Boolean> threadPoolDedicatedListeners) {
            $.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            return this;
        }

        /**
         * @param threadPoolDedicatedListeners Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolDedicatedListeners(Boolean threadPoolDedicatedListeners) {
            return threadPoolDedicatedListeners(Output.of(threadPoolDedicatedListeners));
        }

        /**
         * @param threadPoolMaxTransactionsLimit Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolMaxTransactionsLimit(@Nullable Output<Integer> threadPoolMaxTransactionsLimit) {
            $.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            return this;
        }

        /**
         * @param threadPoolMaxTransactionsLimit Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolMaxTransactionsLimit(Integer threadPoolMaxTransactionsLimit) {
            return threadPoolMaxTransactionsLimit(Output.of(threadPoolMaxTransactionsLimit));
        }

        /**
         * @param threadPoolQueryThreadsPerGroup The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
         * 
         * threadPoolQueryThreadsPerGroup corresponds to the MySQL Server system variable [thread_pool_query_threads_per_group](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_query_threads_per_group)
         * 
         * @return builder
         * 
         */
        public Builder threadPoolQueryThreadsPerGroup(@Nullable Output<Integer> threadPoolQueryThreadsPerGroup) {
            $.threadPoolQueryThreadsPerGroup = threadPoolQueryThreadsPerGroup;
            return this;
        }

        /**
         * @param threadPoolQueryThreadsPerGroup The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
         * 
         * threadPoolQueryThreadsPerGroup corresponds to the MySQL Server system variable [thread_pool_query_threads_per_group](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_query_threads_per_group)
         * 
         * @return builder
         * 
         */
        public Builder threadPoolQueryThreadsPerGroup(Integer threadPoolQueryThreadsPerGroup) {
            return threadPoolQueryThreadsPerGroup(Output.of(threadPoolQueryThreadsPerGroup));
        }

        /**
         * @param threadPoolSize The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
         * 
         * threadPoolSize corresponds to the MySQL Server System variable [thread_pool_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_size).
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSize(@Nullable Output<Integer> threadPoolSize) {
            $.threadPoolSize = threadPoolSize;
            return this;
        }

        /**
         * @param threadPoolSize The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
         * 
         * threadPoolSize corresponds to the MySQL Server System variable [thread_pool_size] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_size).
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSize(Integer threadPoolSize) {
            return threadPoolSize(Output.of(threadPoolSize));
        }

        /**
         * @param threadPoolTransactionDelay The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
         * 
         * threadPoolTransactionDelay corresponds to the MySQL Server system variable [thread_pool_transaction_delay](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_transaction_delay)
         * 
         * @return builder
         * 
         */
        public Builder threadPoolTransactionDelay(@Nullable Output<Integer> threadPoolTransactionDelay) {
            $.threadPoolTransactionDelay = threadPoolTransactionDelay;
            return this;
        }

        /**
         * @param threadPoolTransactionDelay The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
         * 
         * threadPoolTransactionDelay corresponds to the MySQL Server system variable [thread_pool_transaction_delay](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_pool_transaction_delay)
         * 
         * @return builder
         * 
         */
        public Builder threadPoolTransactionDelay(Integer threadPoolTransactionDelay) {
            return threadPoolTransactionDelay(Output.of(threadPoolTransactionDelay));
        }

        /**
         * @param timeZone Initializes the time zone for each client that connects.
         * 
         * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
         * 
         * The values can be given in one of the following formats, none of which are case-sensitive:
         * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
         * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Initializes the time zone for each client that connects.
         * 
         * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
         * 
         * The values can be given in one of the following formats, none of which are case-sensitive:
         * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
         * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param tmpTableSize The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
         * 
         * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(@Nullable Output<String> tmpTableSize) {
            $.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * @param tmpTableSize The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
         * 
         * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(String tmpTableSize) {
            return tmpTableSize(Output.of(tmpTableSize));
        }

        /**
         * @param transactionIsolation (&#34;transaction_isolation&#34;)
         * 
         * @return builder
         * 
         */
        public Builder transactionIsolation(@Nullable Output<String> transactionIsolation) {
            $.transactionIsolation = transactionIsolation;
            return this;
        }

        /**
         * @param transactionIsolation (&#34;transaction_isolation&#34;)
         * 
         * @return builder
         * 
         */
        public Builder transactionIsolation(String transactionIsolation) {
            return transactionIsolation(Output.of(transactionIsolation));
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(@Nullable Output<Integer> waitTimeout) {
            $.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(Integer waitTimeout) {
            return waitTimeout(Output.of(waitTimeout));
        }

        public MysqlConfigurationVariablesArgs build() {
            return $;
        }
    }

}
