// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlConfigurationVariablesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlConfigurationVariablesArgs Empty = new MysqlConfigurationVariablesArgs();

    /**
     * (&#34;autocommit&#34;)
     * 
     */
    @Import(name="autocommit")
    private @Nullable Output<Boolean> autocommit;

    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Optional<Output<Boolean>> autocommit() {
        return Optional.ofNullable(this.autocommit);
    }

    /**
     * If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    @Import(name="bigTables")
    private @Nullable Output<Boolean> bigTables;

    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    public Optional<Output<Boolean>> bigTables() {
        return Optional.ofNullable(this.bigTables);
    }

    /**
     * Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    @Import(name="binlogExpireLogsSeconds")
    private @Nullable Output<Integer> binlogExpireLogsSeconds;

    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Optional<Output<Integer>> binlogExpireLogsSeconds() {
        return Optional.ofNullable(this.binlogExpireLogsSeconds);
    }

    /**
     * Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    @Import(name="binlogRowMetadata")
    private @Nullable Output<String> binlogRowMetadata;

    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public Optional<Output<String>> binlogRowMetadata() {
        return Optional.ofNullable(this.binlogRowMetadata);
    }

    /**
     * When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    @Import(name="binlogRowValueOptions")
    private @Nullable Output<String> binlogRowValueOptions;

    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public Optional<Output<String>> binlogRowValueOptions() {
        return Optional.ofNullable(this.binlogRowValueOptions);
    }

    /**
     * Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    @Import(name="binlogTransactionCompression")
    private @Nullable Output<Boolean> binlogTransactionCompression;

    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Optional<Output<Boolean>> binlogTransactionCompression() {
        return Optional.ofNullable(this.binlogTransactionCompression);
    }

    /**
     * (&#34;completion_type&#34;)
     * 
     */
    @Import(name="completionType")
    private @Nullable Output<String> completionType;

    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public Optional<Output<String>> completionType() {
        return Optional.ofNullable(this.completionType);
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    @Import(name="connectionMemoryChunkSize")
    private @Nullable Output<Integer> connectionMemoryChunkSize;

    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    public Optional<Output<Integer>> connectionMemoryChunkSize() {
        return Optional.ofNullable(this.connectionMemoryChunkSize);
    }

    /**
     * Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    @Import(name="connectionMemoryLimit")
    private @Nullable Output<String> connectionMemoryLimit;

    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    public Optional<Output<String>> connectionMemoryLimit() {
        return Optional.ofNullable(this.connectionMemoryLimit);
    }

    /**
     * (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    @Import(name="cteMaxRecursionDepth")
    private @Nullable Output<String> cteMaxRecursionDepth;

    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public Optional<Output<String>> cteMaxRecursionDepth() {
        return Optional.ofNullable(this.cteMaxRecursionDepth);
    }

    /**
     * (&#34;default_authentication_plugin&#34;)
     * 
     */
    @Import(name="defaultAuthenticationPlugin")
    private @Nullable Output<String> defaultAuthenticationPlugin;

    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    public Optional<Output<String>> defaultAuthenticationPlugin() {
        return Optional.ofNullable(this.defaultAuthenticationPlugin);
    }

    /**
     * (&#34;foreign_key_checks&#34;)
     * 
     */
    @Import(name="foreignKeyChecks")
    private @Nullable Output<Boolean> foreignKeyChecks;

    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Optional<Output<Boolean>> foreignKeyChecks() {
        return Optional.ofNullable(this.foreignKeyChecks);
    }

    /**
     * (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="generatedRandomPasswordLength")
    private @Nullable Output<Integer> generatedRandomPasswordLength;

    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> generatedRandomPasswordLength() {
        return Optional.ofNullable(this.generatedRandomPasswordLength);
    }

    /**
     * Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    @Import(name="globalConnectionMemoryLimit")
    private @Nullable Output<String> globalConnectionMemoryLimit;

    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    public Optional<Output<String>> globalConnectionMemoryLimit() {
        return Optional.ofNullable(this.globalConnectionMemoryLimit);
    }

    /**
     * Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    @Import(name="globalConnectionMemoryTracking")
    private @Nullable Output<Boolean> globalConnectionMemoryTracking;

    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    public Optional<Output<Boolean>> globalConnectionMemoryTracking() {
        return Optional.ofNullable(this.globalConnectionMemoryTracking);
    }

    /**
     * * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    @Import(name="groupReplicationConsistency")
    private @Nullable Output<String> groupReplicationConsistency;

    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public Optional<Output<String>> groupReplicationConsistency() {
        return Optional.ofNullable(this.groupReplicationConsistency);
    }

    /**
     * (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    @Import(name="informationSchemaStatsExpiry")
    private @Nullable Output<Integer> informationSchemaStatsExpiry;

    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Optional<Output<Integer>> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }

    /**
     * Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    @Import(name="innodbBufferPoolDumpPct")
    private @Nullable Output<Integer> innodbBufferPoolDumpPct;

    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    public Optional<Output<Integer>> innodbBufferPoolDumpPct() {
        return Optional.ofNullable(this.innodbBufferPoolDumpPct);
    }

    /**
     * (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    @Import(name="innodbBufferPoolInstances")
    private @Nullable Output<Integer> innodbBufferPoolInstances;

    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbBufferPoolInstances() {
        return Optional.ofNullable(this.innodbBufferPoolInstances);
    }

    /**
     * The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    @Import(name="innodbBufferPoolSize")
    private @Nullable Output<String> innodbBufferPoolSize;

    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    public Optional<Output<String>> innodbBufferPoolSize() {
        return Optional.ofNullable(this.innodbBufferPoolSize);
    }

    /**
     * innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    @Import(name="innodbDdlBufferSize")
    private @Nullable Output<String> innodbDdlBufferSize;

    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    public Optional<Output<String>> innodbDdlBufferSize() {
        return Optional.ofNullable(this.innodbDdlBufferSize);
    }

    /**
     * innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    @Import(name="innodbDdlThreads")
    private @Nullable Output<Integer> innodbDdlThreads;

    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    public Optional<Output<Integer>> innodbDdlThreads() {
        return Optional.ofNullable(this.innodbDdlThreads);
    }

    /**
     * (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    @Import(name="innodbFtEnableStopword")
    private @Nullable Output<Boolean> innodbFtEnableStopword;

    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Optional<Output<Boolean>> innodbFtEnableStopword() {
        return Optional.ofNullable(this.innodbFtEnableStopword);
    }

    /**
     * (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    @Import(name="innodbFtMaxTokenSize")
    private @Nullable Output<Integer> innodbFtMaxTokenSize;

    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtMaxTokenSize() {
        return Optional.ofNullable(this.innodbFtMaxTokenSize);
    }

    /**
     * (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    @Import(name="innodbFtMinTokenSize")
    private @Nullable Output<Integer> innodbFtMinTokenSize;

    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }

    /**
     * (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    @Import(name="innodbFtNumWordOptimize")
    private @Nullable Output<Integer> innodbFtNumWordOptimize;

    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbFtNumWordOptimize() {
        return Optional.ofNullable(this.innodbFtNumWordOptimize);
    }

    /**
     * (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    @Import(name="innodbFtResultCacheLimit")
    private @Nullable Output<String> innodbFtResultCacheLimit;

    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public Optional<Output<String>> innodbFtResultCacheLimit() {
        return Optional.ofNullable(this.innodbFtResultCacheLimit);
    }

    /**
     * (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    @Import(name="innodbFtServerStopwordTable")
    private @Nullable Output<String> innodbFtServerStopwordTable;

    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public Optional<Output<String>> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }

    /**
     * (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    @Import(name="innodbLockWaitTimeout")
    private @Nullable Output<Integer> innodbLockWaitTimeout;

    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Optional<Output<Integer>> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }

    /**
     * Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    @Import(name="innodbLogWriterThreads")
    private @Nullable Output<Boolean> innodbLogWriterThreads;

    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    public Optional<Output<Boolean>> innodbLogWriterThreads() {
        return Optional.ofNullable(this.innodbLogWriterThreads);
    }

    /**
     * The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    @Import(name="innodbMaxPurgeLag")
    private @Nullable Output<String> innodbMaxPurgeLag;

    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    public Optional<Output<String>> innodbMaxPurgeLag() {
        return Optional.ofNullable(this.innodbMaxPurgeLag);
    }

    /**
     * The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    @Import(name="innodbMaxPurgeLagDelay")
    private @Nullable Output<Integer> innodbMaxPurgeLagDelay;

    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    public Optional<Output<Integer>> innodbMaxPurgeLagDelay() {
        return Optional.ofNullable(this.innodbMaxPurgeLagDelay);
    }

    /**
     * The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    @Import(name="innodbStatsPersistentSamplePages")
    private @Nullable Output<String> innodbStatsPersistentSamplePages;

    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    public Optional<Output<String>> innodbStatsPersistentSamplePages() {
        return Optional.ofNullable(this.innodbStatsPersistentSamplePages);
    }

    /**
     * The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    @Import(name="innodbStatsTransientSamplePages")
    private @Nullable Output<String> innodbStatsTransientSamplePages;

    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    public Optional<Output<String>> innodbStatsTransientSamplePages() {
        return Optional.ofNullable(this.innodbStatsTransientSamplePages);
    }

    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    @Import(name="interactiveTimeout")
    private @Nullable Output<Integer> interactiveTimeout;

    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    public Optional<Output<Integer>> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }

    /**
     * (&#34;local_infile&#34;)
     * 
     */
    @Import(name="localInfile")
    private @Nullable Output<Boolean> localInfile;

    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    public Optional<Output<Boolean>> localInfile() {
        return Optional.ofNullable(this.localInfile);
    }

    /**
     * (&#34;mandatory_roles&#34;)
     * 
     */
    @Import(name="mandatoryRoles")
    private @Nullable Output<String> mandatoryRoles;

    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public Optional<Output<String>> mandatoryRoles() {
        return Optional.ofNullable(this.mandatoryRoles);
    }

    /**
     * The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    @Import(name="maxAllowedPacket")
    private @Nullable Output<Integer> maxAllowedPacket;

    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    public Optional<Output<Integer>> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }

    /**
     * Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    @Import(name="maxBinlogCacheSize")
    private @Nullable Output<String> maxBinlogCacheSize;

    /**
     * @return Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    public Optional<Output<String>> maxBinlogCacheSize() {
        return Optional.ofNullable(this.maxBinlogCacheSize);
    }

    /**
     * (&#34;max_connect_errors&#34;)
     * 
     */
    @Import(name="maxConnectErrors")
    private @Nullable Output<String> maxConnectErrors;

    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    public Optional<Output<String>> maxConnectErrors() {
        return Optional.ofNullable(this.maxConnectErrors);
    }

    /**
     * (&#34;max_connections&#34;)
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * (&#34;max_execution_time&#34;)
     * 
     */
    @Import(name="maxExecutionTime")
    private @Nullable Output<String> maxExecutionTime;

    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public Optional<Output<String>> maxExecutionTime() {
        return Optional.ofNullable(this.maxExecutionTime);
    }

    /**
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    @Import(name="maxHeapTableSize")
    private @Nullable Output<String> maxHeapTableSize;

    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    public Optional<Output<String>> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }

    /**
     * (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    @Import(name="maxPreparedStmtCount")
    private @Nullable Output<Integer> maxPreparedStmtCount;

    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Optional<Output<Integer>> maxPreparedStmtCount() {
        return Optional.ofNullable(this.maxPreparedStmtCount);
    }

    /**
     * (&#34;mysql_firewall_mode&#34;)
     * 
     */
    @Import(name="mysqlFirewallMode")
    private @Nullable Output<Boolean> mysqlFirewallMode;

    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Optional<Output<Boolean>> mysqlFirewallMode() {
        return Optional.ofNullable(this.mysqlFirewallMode);
    }

    /**
     * DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlZstdDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlZstdDefaultCompressionLevel;

    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlZstdDefaultCompressionLevel);
    }

    /**
     * The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    @Import(name="mysqlxConnectTimeout")
    private @Nullable Output<Integer> mysqlxConnectTimeout;

    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxConnectTimeout() {
        return Optional.ofNullable(this.mysqlxConnectTimeout);
    }

    /**
     * Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxDeflateDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxDeflateDefaultCompressionLevel;

    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxDeflateDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateDefaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxDeflateMaxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxDeflateMaxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxDeflateMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateMaxClientCompressionLevel);
    }

    /**
     * (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxDocumentIdUniquePrefix")
    private @Nullable Output<Integer> mysqlxDocumentIdUniquePrefix;

    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxDocumentIdUniquePrefix() {
        return Optional.ofNullable(this.mysqlxDocumentIdUniquePrefix);
    }

    /**
     * (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    @Import(name="mysqlxEnableHelloNotice")
    private @Nullable Output<Boolean> mysqlxEnableHelloNotice;

    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Optional<Output<Boolean>> mysqlxEnableHelloNotice() {
        return Optional.ofNullable(this.mysqlxEnableHelloNotice);
    }

    /**
     * (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxIdleWorkerThreadTimeout")
    private @Nullable Output<Integer> mysqlxIdleWorkerThreadTimeout;

    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxIdleWorkerThreadTimeout() {
        return Optional.ofNullable(this.mysqlxIdleWorkerThreadTimeout);
    }

    /**
     * The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    @Import(name="mysqlxInteractiveTimeout")
    private @Nullable Output<Integer> mysqlxInteractiveTimeout;

    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxInteractiveTimeout() {
        return Optional.ofNullable(this.mysqlxInteractiveTimeout);
    }

    /**
     * Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxLz4defaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxLz4defaultCompressionLevel;

    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxLz4defaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4defaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxLz4maxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxLz4maxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxLz4maxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4maxClientCompressionLevel);
    }

    /**
     * The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    @Import(name="mysqlxMaxAllowedPacket")
    private @Nullable Output<Integer> mysqlxMaxAllowedPacket;

    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    public Optional<Output<Integer>> mysqlxMaxAllowedPacket() {
        return Optional.ofNullable(this.mysqlxMaxAllowedPacket);
    }

    /**
     * (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlxMinWorkerThreads")
    private @Nullable Output<Integer> mysqlxMinWorkerThreads;

    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<Integer>> mysqlxMinWorkerThreads() {
        return Optional.ofNullable(this.mysqlxMinWorkerThreads);
    }

    /**
     * The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    @Import(name="mysqlxReadTimeout")
    private @Nullable Output<Integer> mysqlxReadTimeout;

    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxReadTimeout() {
        return Optional.ofNullable(this.mysqlxReadTimeout);
    }

    /**
     * The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    @Import(name="mysqlxWaitTimeout")
    private @Nullable Output<Integer> mysqlxWaitTimeout;

    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxWaitTimeout() {
        return Optional.ofNullable(this.mysqlxWaitTimeout);
    }

    /**
     * The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    @Import(name="mysqlxWriteTimeout")
    private @Nullable Output<Integer> mysqlxWriteTimeout;

    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    public Optional<Output<Integer>> mysqlxWriteTimeout() {
        return Optional.ofNullable(this.mysqlxWriteTimeout);
    }

    /**
     * Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxZstdDefaultCompressionLevel")
    private @Nullable Output<Integer> mysqlxZstdDefaultCompressionLevel;

    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdDefaultCompressionLevel);
    }

    /**
     * Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    @Import(name="mysqlxZstdMaxClientCompressionLevel")
    private @Nullable Output<Integer> mysqlxZstdMaxClientCompressionLevel;

    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Optional<Output<Integer>> mysqlxZstdMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdMaxClientCompressionLevel);
    }

    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    @Import(name="netReadTimeout")
    private @Nullable Output<Integer> netReadTimeout;

    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    public Optional<Output<Integer>> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    @Import(name="netWriteTimeout")
    private @Nullable Output<Integer> netWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    public Optional<Output<Integer>> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }

    /**
     * (&#34;parser_max_mem_size&#34;)
     * 
     */
    @Import(name="parserMaxMemSize")
    private @Nullable Output<String> parserMaxMemSize;

    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public Optional<Output<String>> parserMaxMemSize() {
        return Optional.ofNullable(this.parserMaxMemSize);
    }

    /**
     * (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="queryAllocBlockSize")
    private @Nullable Output<String> queryAllocBlockSize;

    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<String>> queryAllocBlockSize() {
        return Optional.ofNullable(this.queryAllocBlockSize);
    }

    /**
     * (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="queryPreallocSize")
    private @Nullable Output<String> queryPreallocSize;

    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<String>> queryPreallocSize() {
        return Optional.ofNullable(this.queryPreallocSize);
    }

    /**
     * regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    @Import(name="regexpTimeLimit")
    private @Nullable Output<Integer> regexpTimeLimit;

    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    public Optional<Output<Integer>> regexpTimeLimit() {
        return Optional.ofNullable(this.regexpTimeLimit);
    }

    /**
     * Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    @Import(name="sortBufferSize")
    private @Nullable Output<String> sortBufferSize;

    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    public Optional<Output<String>> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }

    /**
     * (&#34;sql_mode&#34;)
     * 
     */
    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    /**
     * (&#34;sql_require_primary_key&#34;)
     * 
     */
    @Import(name="sqlRequirePrimaryKey")
    private @Nullable Output<Boolean> sqlRequirePrimaryKey;

    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Optional<Output<Boolean>> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }

    /**
     * (&#34;sql_warnings&#34;)
     * 
     */
    @Import(name="sqlWarnings")
    private @Nullable Output<Boolean> sqlWarnings;

    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Optional<Output<Boolean>> sqlWarnings() {
        return Optional.ofNullable(this.sqlWarnings);
    }

    /**
     * Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    @Import(name="threadPoolDedicatedListeners")
    private @Nullable Output<Boolean> threadPoolDedicatedListeners;

    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    public Optional<Output<Boolean>> threadPoolDedicatedListeners() {
        return Optional.ofNullable(this.threadPoolDedicatedListeners);
    }

    /**
     * Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    @Import(name="threadPoolMaxTransactionsLimit")
    private @Nullable Output<Integer> threadPoolMaxTransactionsLimit;

    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    public Optional<Output<Integer>> threadPoolMaxTransactionsLimit() {
        return Optional.ofNullable(this.threadPoolMaxTransactionsLimit);
    }

    /**
     * Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    @Import(name="tmpTableSize")
    private @Nullable Output<String> tmpTableSize;

    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    public Optional<Output<String>> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }

    /**
     * (&#34;transaction_isolation&#34;)
     * 
     */
    @Import(name="transactionIsolation")
    private @Nullable Output<String> transactionIsolation;

    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public Optional<Output<String>> transactionIsolation() {
        return Optional.ofNullable(this.transactionIsolation);
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="waitTimeout")
    private @Nullable Output<Integer> waitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    private MysqlConfigurationVariablesArgs() {}

    private MysqlConfigurationVariablesArgs(MysqlConfigurationVariablesArgs $) {
        this.autocommit = $.autocommit;
        this.bigTables = $.bigTables;
        this.binlogExpireLogsSeconds = $.binlogExpireLogsSeconds;
        this.binlogRowMetadata = $.binlogRowMetadata;
        this.binlogRowValueOptions = $.binlogRowValueOptions;
        this.binlogTransactionCompression = $.binlogTransactionCompression;
        this.completionType = $.completionType;
        this.connectTimeout = $.connectTimeout;
        this.connectionMemoryChunkSize = $.connectionMemoryChunkSize;
        this.connectionMemoryLimit = $.connectionMemoryLimit;
        this.cteMaxRecursionDepth = $.cteMaxRecursionDepth;
        this.defaultAuthenticationPlugin = $.defaultAuthenticationPlugin;
        this.foreignKeyChecks = $.foreignKeyChecks;
        this.generatedRandomPasswordLength = $.generatedRandomPasswordLength;
        this.globalConnectionMemoryLimit = $.globalConnectionMemoryLimit;
        this.globalConnectionMemoryTracking = $.globalConnectionMemoryTracking;
        this.groupReplicationConsistency = $.groupReplicationConsistency;
        this.informationSchemaStatsExpiry = $.informationSchemaStatsExpiry;
        this.innodbBufferPoolDumpPct = $.innodbBufferPoolDumpPct;
        this.innodbBufferPoolInstances = $.innodbBufferPoolInstances;
        this.innodbBufferPoolSize = $.innodbBufferPoolSize;
        this.innodbDdlBufferSize = $.innodbDdlBufferSize;
        this.innodbDdlThreads = $.innodbDdlThreads;
        this.innodbFtEnableStopword = $.innodbFtEnableStopword;
        this.innodbFtMaxTokenSize = $.innodbFtMaxTokenSize;
        this.innodbFtMinTokenSize = $.innodbFtMinTokenSize;
        this.innodbFtNumWordOptimize = $.innodbFtNumWordOptimize;
        this.innodbFtResultCacheLimit = $.innodbFtResultCacheLimit;
        this.innodbFtServerStopwordTable = $.innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = $.innodbLockWaitTimeout;
        this.innodbLogWriterThreads = $.innodbLogWriterThreads;
        this.innodbMaxPurgeLag = $.innodbMaxPurgeLag;
        this.innodbMaxPurgeLagDelay = $.innodbMaxPurgeLagDelay;
        this.innodbStatsPersistentSamplePages = $.innodbStatsPersistentSamplePages;
        this.innodbStatsTransientSamplePages = $.innodbStatsTransientSamplePages;
        this.interactiveTimeout = $.interactiveTimeout;
        this.localInfile = $.localInfile;
        this.mandatoryRoles = $.mandatoryRoles;
        this.maxAllowedPacket = $.maxAllowedPacket;
        this.maxBinlogCacheSize = $.maxBinlogCacheSize;
        this.maxConnectErrors = $.maxConnectErrors;
        this.maxConnections = $.maxConnections;
        this.maxExecutionTime = $.maxExecutionTime;
        this.maxHeapTableSize = $.maxHeapTableSize;
        this.maxPreparedStmtCount = $.maxPreparedStmtCount;
        this.mysqlFirewallMode = $.mysqlFirewallMode;
        this.mysqlZstdDefaultCompressionLevel = $.mysqlZstdDefaultCompressionLevel;
        this.mysqlxConnectTimeout = $.mysqlxConnectTimeout;
        this.mysqlxDeflateDefaultCompressionLevel = $.mysqlxDeflateDefaultCompressionLevel;
        this.mysqlxDeflateMaxClientCompressionLevel = $.mysqlxDeflateMaxClientCompressionLevel;
        this.mysqlxDocumentIdUniquePrefix = $.mysqlxDocumentIdUniquePrefix;
        this.mysqlxEnableHelloNotice = $.mysqlxEnableHelloNotice;
        this.mysqlxIdleWorkerThreadTimeout = $.mysqlxIdleWorkerThreadTimeout;
        this.mysqlxInteractiveTimeout = $.mysqlxInteractiveTimeout;
        this.mysqlxLz4defaultCompressionLevel = $.mysqlxLz4defaultCompressionLevel;
        this.mysqlxLz4maxClientCompressionLevel = $.mysqlxLz4maxClientCompressionLevel;
        this.mysqlxMaxAllowedPacket = $.mysqlxMaxAllowedPacket;
        this.mysqlxMinWorkerThreads = $.mysqlxMinWorkerThreads;
        this.mysqlxReadTimeout = $.mysqlxReadTimeout;
        this.mysqlxWaitTimeout = $.mysqlxWaitTimeout;
        this.mysqlxWriteTimeout = $.mysqlxWriteTimeout;
        this.mysqlxZstdDefaultCompressionLevel = $.mysqlxZstdDefaultCompressionLevel;
        this.mysqlxZstdMaxClientCompressionLevel = $.mysqlxZstdMaxClientCompressionLevel;
        this.netReadTimeout = $.netReadTimeout;
        this.netWriteTimeout = $.netWriteTimeout;
        this.parserMaxMemSize = $.parserMaxMemSize;
        this.queryAllocBlockSize = $.queryAllocBlockSize;
        this.queryPreallocSize = $.queryPreallocSize;
        this.regexpTimeLimit = $.regexpTimeLimit;
        this.sortBufferSize = $.sortBufferSize;
        this.sqlMode = $.sqlMode;
        this.sqlRequirePrimaryKey = $.sqlRequirePrimaryKey;
        this.sqlWarnings = $.sqlWarnings;
        this.threadPoolDedicatedListeners = $.threadPoolDedicatedListeners;
        this.threadPoolMaxTransactionsLimit = $.threadPoolMaxTransactionsLimit;
        this.timeZone = $.timeZone;
        this.tmpTableSize = $.tmpTableSize;
        this.transactionIsolation = $.transactionIsolation;
        this.waitTimeout = $.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlConfigurationVariablesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlConfigurationVariablesArgs $;

        public Builder() {
            $ = new MysqlConfigurationVariablesArgs();
        }

        public Builder(MysqlConfigurationVariablesArgs defaults) {
            $ = new MysqlConfigurationVariablesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autocommit (&#34;autocommit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder autocommit(@Nullable Output<Boolean> autocommit) {
            $.autocommit = autocommit;
            return this;
        }

        /**
         * @param autocommit (&#34;autocommit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder autocommit(Boolean autocommit) {
            return autocommit(Output.of(autocommit));
        }

        /**
         * @param bigTables If enabled, the server stores all temporary tables on disk rather than in memory.
         * 
         * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
         * 
         * @return builder
         * 
         */
        public Builder bigTables(@Nullable Output<Boolean> bigTables) {
            $.bigTables = bigTables;
            return this;
        }

        /**
         * @param bigTables If enabled, the server stores all temporary tables on disk rather than in memory.
         * 
         * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
         * 
         * @return builder
         * 
         */
        public Builder bigTables(Boolean bigTables) {
            return bigTables(Output.of(bigTables));
        }

        /**
         * @param binlogExpireLogsSeconds Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
         * 
         * @return builder
         * 
         */
        public Builder binlogExpireLogsSeconds(@Nullable Output<Integer> binlogExpireLogsSeconds) {
            $.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            return this;
        }

        /**
         * @param binlogExpireLogsSeconds Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
         * 
         * @return builder
         * 
         */
        public Builder binlogExpireLogsSeconds(Integer binlogExpireLogsSeconds) {
            return binlogExpireLogsSeconds(Output.of(binlogExpireLogsSeconds));
        }

        /**
         * @param binlogRowMetadata Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowMetadata(@Nullable Output<String> binlogRowMetadata) {
            $.binlogRowMetadata = binlogRowMetadata;
            return this;
        }

        /**
         * @param binlogRowMetadata Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowMetadata(String binlogRowMetadata) {
            return binlogRowMetadata(Output.of(binlogRowMetadata));
        }

        /**
         * @param binlogRowValueOptions When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowValueOptions(@Nullable Output<String> binlogRowValueOptions) {
            $.binlogRowValueOptions = binlogRowValueOptions;
            return this;
        }

        /**
         * @param binlogRowValueOptions When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
         * 
         * @return builder
         * 
         */
        public Builder binlogRowValueOptions(String binlogRowValueOptions) {
            return binlogRowValueOptions(Output.of(binlogRowValueOptions));
        }

        /**
         * @param binlogTransactionCompression Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
         * 
         * @return builder
         * 
         */
        public Builder binlogTransactionCompression(@Nullable Output<Boolean> binlogTransactionCompression) {
            $.binlogTransactionCompression = binlogTransactionCompression;
            return this;
        }

        /**
         * @param binlogTransactionCompression Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
         * 
         * @return builder
         * 
         */
        public Builder binlogTransactionCompression(Boolean binlogTransactionCompression) {
            return binlogTransactionCompression(Output.of(binlogTransactionCompression));
        }

        /**
         * @param completionType (&#34;completion_type&#34;)
         * 
         * @return builder
         * 
         */
        public Builder completionType(@Nullable Output<String> completionType) {
            $.completionType = completionType;
            return this;
        }

        /**
         * @param completionType (&#34;completion_type&#34;)
         * 
         * @return builder
         * 
         */
        public Builder completionType(String completionType) {
            return completionType(Output.of(completionType));
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
         * 
         * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
         * 
         * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
         * 
         * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param connectionMemoryChunkSize Set the chunking size for updates to the global memory usage counter Global_connection_memory.
         * 
         * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryChunkSize(@Nullable Output<Integer> connectionMemoryChunkSize) {
            $.connectionMemoryChunkSize = connectionMemoryChunkSize;
            return this;
        }

        /**
         * @param connectionMemoryChunkSize Set the chunking size for updates to the global memory usage counter Global_connection_memory.
         * 
         * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryChunkSize(Integer connectionMemoryChunkSize) {
            return connectionMemoryChunkSize(Output.of(connectionMemoryChunkSize));
        }

        /**
         * @param connectionMemoryLimit Set the maximum amount of memory that can be used by a single user connection.
         * 
         * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryLimit(@Nullable Output<String> connectionMemoryLimit) {
            $.connectionMemoryLimit = connectionMemoryLimit;
            return this;
        }

        /**
         * @param connectionMemoryLimit Set the maximum amount of memory that can be used by a single user connection.
         * 
         * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder connectionMemoryLimit(String connectionMemoryLimit) {
            return connectionMemoryLimit(Output.of(connectionMemoryLimit));
        }

        /**
         * @param cteMaxRecursionDepth (&#34;cte_max_recursion_depth&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cteMaxRecursionDepth(@Nullable Output<String> cteMaxRecursionDepth) {
            $.cteMaxRecursionDepth = cteMaxRecursionDepth;
            return this;
        }

        /**
         * @param cteMaxRecursionDepth (&#34;cte_max_recursion_depth&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cteMaxRecursionDepth(String cteMaxRecursionDepth) {
            return cteMaxRecursionDepth(Output.of(cteMaxRecursionDepth));
        }

        /**
         * @param defaultAuthenticationPlugin (&#34;default_authentication_plugin&#34;)
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthenticationPlugin(@Nullable Output<String> defaultAuthenticationPlugin) {
            $.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            return this;
        }

        /**
         * @param defaultAuthenticationPlugin (&#34;default_authentication_plugin&#34;)
         * 
         * @return builder
         * 
         */
        public Builder defaultAuthenticationPlugin(String defaultAuthenticationPlugin) {
            return defaultAuthenticationPlugin(Output.of(defaultAuthenticationPlugin));
        }

        /**
         * @param foreignKeyChecks (&#34;foreign_key_checks&#34;)
         * 
         * @return builder
         * 
         */
        public Builder foreignKeyChecks(@Nullable Output<Boolean> foreignKeyChecks) {
            $.foreignKeyChecks = foreignKeyChecks;
            return this;
        }

        /**
         * @param foreignKeyChecks (&#34;foreign_key_checks&#34;)
         * 
         * @return builder
         * 
         */
        public Builder foreignKeyChecks(Boolean foreignKeyChecks) {
            return foreignKeyChecks(Output.of(foreignKeyChecks));
        }

        /**
         * @param generatedRandomPasswordLength (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder generatedRandomPasswordLength(@Nullable Output<Integer> generatedRandomPasswordLength) {
            $.generatedRandomPasswordLength = generatedRandomPasswordLength;
            return this;
        }

        /**
         * @param generatedRandomPasswordLength (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder generatedRandomPasswordLength(Integer generatedRandomPasswordLength) {
            return generatedRandomPasswordLength(Output.of(generatedRandomPasswordLength));
        }

        /**
         * @param globalConnectionMemoryLimit Set the total amount of memory that can be used by all user connections.
         * 
         * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryLimit(@Nullable Output<String> globalConnectionMemoryLimit) {
            $.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            return this;
        }

        /**
         * @param globalConnectionMemoryLimit Set the total amount of memory that can be used by all user connections.
         * 
         * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryLimit(String globalConnectionMemoryLimit) {
            return globalConnectionMemoryLimit(Output.of(globalConnectionMemoryLimit));
        }

        /**
         * @param globalConnectionMemoryTracking Determines whether the MySQL server calculates Global_connection_memory.
         * 
         * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryTracking(@Nullable Output<Boolean> globalConnectionMemoryTracking) {
            $.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            return this;
        }

        /**
         * @param globalConnectionMemoryTracking Determines whether the MySQL server calculates Global_connection_memory.
         * 
         * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
         * 
         * @return builder
         * 
         */
        public Builder globalConnectionMemoryTracking(Boolean globalConnectionMemoryTracking) {
            return globalConnectionMemoryTracking(Output.of(globalConnectionMemoryTracking));
        }

        /**
         * @param groupReplicationConsistency * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
         * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
         * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * 
         * @return builder
         * 
         */
        public Builder groupReplicationConsistency(@Nullable Output<String> groupReplicationConsistency) {
            $.groupReplicationConsistency = groupReplicationConsistency;
            return this;
        }

        /**
         * @param groupReplicationConsistency * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
         * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
         * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
         * 
         * @return builder
         * 
         */
        public Builder groupReplicationConsistency(String groupReplicationConsistency) {
            return groupReplicationConsistency(Output.of(groupReplicationConsistency));
        }

        /**
         * @param informationSchemaStatsExpiry (&#34;information_schema_stats_expiry&#34;)
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(@Nullable Output<Integer> informationSchemaStatsExpiry) {
            $.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * @param informationSchemaStatsExpiry (&#34;information_schema_stats_expiry&#34;)
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            return informationSchemaStatsExpiry(Output.of(informationSchemaStatsExpiry));
        }

        /**
         * @param innodbBufferPoolDumpPct Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
         * 
         * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
         * 
         * The range is 1 to 100. The default value is 25.
         * 
         * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolDumpPct(@Nullable Output<Integer> innodbBufferPoolDumpPct) {
            $.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            return this;
        }

        /**
         * @param innodbBufferPoolDumpPct Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
         * 
         * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
         * 
         * The range is 1 to 100. The default value is 25.
         * 
         * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolDumpPct(Integer innodbBufferPoolDumpPct) {
            return innodbBufferPoolDumpPct(Output.of(innodbBufferPoolDumpPct));
        }

        /**
         * @param innodbBufferPoolInstances (&#34;innodb_buffer_pool_instances&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolInstances(@Nullable Output<Integer> innodbBufferPoolInstances) {
            $.innodbBufferPoolInstances = innodbBufferPoolInstances;
            return this;
        }

        /**
         * @param innodbBufferPoolInstances (&#34;innodb_buffer_pool_instances&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolInstances(Integer innodbBufferPoolInstances) {
            return innodbBufferPoolInstances(Output.of(innodbBufferPoolInstances));
        }

        /**
         * @param innodbBufferPoolSize The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
         * 
         * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
         * 
         * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolSize(@Nullable Output<String> innodbBufferPoolSize) {
            $.innodbBufferPoolSize = innodbBufferPoolSize;
            return this;
        }

        /**
         * @param innodbBufferPoolSize The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
         * 
         * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
         * 
         * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
         * 
         * @return builder
         * 
         */
        public Builder innodbBufferPoolSize(String innodbBufferPoolSize) {
            return innodbBufferPoolSize(Output.of(innodbBufferPoolSize));
        }

        /**
         * @param innodbDdlBufferSize innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlBufferSize(@Nullable Output<String> innodbDdlBufferSize) {
            $.innodbDdlBufferSize = innodbDdlBufferSize;
            return this;
        }

        /**
         * @param innodbDdlBufferSize innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlBufferSize(String innodbDdlBufferSize) {
            return innodbDdlBufferSize(Output.of(innodbDdlBufferSize));
        }

        /**
         * @param innodbDdlThreads innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlThreads(@Nullable Output<Integer> innodbDdlThreads) {
            $.innodbDdlThreads = innodbDdlThreads;
            return this;
        }

        /**
         * @param innodbDdlThreads innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbDdlThreads(Integer innodbDdlThreads) {
            return innodbDdlThreads(Output.of(innodbDdlThreads));
        }

        /**
         * @param innodbFtEnableStopword (&#34;innodb_ft_enable_stopword&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtEnableStopword(@Nullable Output<Boolean> innodbFtEnableStopword) {
            $.innodbFtEnableStopword = innodbFtEnableStopword;
            return this;
        }

        /**
         * @param innodbFtEnableStopword (&#34;innodb_ft_enable_stopword&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtEnableStopword(Boolean innodbFtEnableStopword) {
            return innodbFtEnableStopword(Output.of(innodbFtEnableStopword));
        }

        /**
         * @param innodbFtMaxTokenSize (&#34;innodb_ft_max_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMaxTokenSize(@Nullable Output<Integer> innodbFtMaxTokenSize) {
            $.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            return this;
        }

        /**
         * @param innodbFtMaxTokenSize (&#34;innodb_ft_max_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMaxTokenSize(Integer innodbFtMaxTokenSize) {
            return innodbFtMaxTokenSize(Output.of(innodbFtMaxTokenSize));
        }

        /**
         * @param innodbFtMinTokenSize (&#34;innodb_ft_min_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(@Nullable Output<Integer> innodbFtMinTokenSize) {
            $.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * @param innodbFtMinTokenSize (&#34;innodb_ft_min_token_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            return innodbFtMinTokenSize(Output.of(innodbFtMinTokenSize));
        }

        /**
         * @param innodbFtNumWordOptimize (&#34;innodb_ft_num_word_optimize&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtNumWordOptimize(@Nullable Output<Integer> innodbFtNumWordOptimize) {
            $.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            return this;
        }

        /**
         * @param innodbFtNumWordOptimize (&#34;innodb_ft_num_word_optimize&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtNumWordOptimize(Integer innodbFtNumWordOptimize) {
            return innodbFtNumWordOptimize(Output.of(innodbFtNumWordOptimize));
        }

        /**
         * @param innodbFtResultCacheLimit (&#34;innodb_ft_result_cache_limit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtResultCacheLimit(@Nullable Output<String> innodbFtResultCacheLimit) {
            $.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            return this;
        }

        /**
         * @param innodbFtResultCacheLimit (&#34;innodb_ft_result_cache_limit&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtResultCacheLimit(String innodbFtResultCacheLimit) {
            return innodbFtResultCacheLimit(Output.of(innodbFtResultCacheLimit));
        }

        /**
         * @param innodbFtServerStopwordTable (&#34;innodb_ft_server_stopword_table&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(@Nullable Output<String> innodbFtServerStopwordTable) {
            $.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        /**
         * @param innodbFtServerStopwordTable (&#34;innodb_ft_server_stopword_table&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            return innodbFtServerStopwordTable(Output.of(innodbFtServerStopwordTable));
        }

        /**
         * @param innodbLockWaitTimeout (&#34;innodb_lock_wait_timeout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(@Nullable Output<Integer> innodbLockWaitTimeout) {
            $.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * @param innodbLockWaitTimeout (&#34;innodb_lock_wait_timeout&#34;)
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            return innodbLockWaitTimeout(Output.of(innodbLockWaitTimeout));
        }

        /**
         * @param innodbLogWriterThreads Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
         * 
         * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbLogWriterThreads(@Nullable Output<Boolean> innodbLogWriterThreads) {
            $.innodbLogWriterThreads = innodbLogWriterThreads;
            return this;
        }

        /**
         * @param innodbLogWriterThreads Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
         * 
         * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
         * 
         * @return builder
         * 
         */
        public Builder innodbLogWriterThreads(Boolean innodbLogWriterThreads) {
            return innodbLogWriterThreads(Output.of(innodbLogWriterThreads));
        }

        /**
         * @param innodbMaxPurgeLag The desired maximum purge lag in terms of transactions.
         * 
         * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
         * 
         * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
         * 
         * The default value is 0, which means there is no maximum purge lag and no delay.
         * 
         * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLag(@Nullable Output<String> innodbMaxPurgeLag) {
            $.innodbMaxPurgeLag = innodbMaxPurgeLag;
            return this;
        }

        /**
         * @param innodbMaxPurgeLag The desired maximum purge lag in terms of transactions.
         * 
         * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
         * 
         * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
         * 
         * The default value is 0, which means there is no maximum purge lag and no delay.
         * 
         * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLag(String innodbMaxPurgeLag) {
            return innodbMaxPurgeLag(Output.of(innodbMaxPurgeLag));
        }

        /**
         * @param innodbMaxPurgeLagDelay The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
         * 
         * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
         * 
         * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLagDelay(@Nullable Output<Integer> innodbMaxPurgeLagDelay) {
            $.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            return this;
        }

        /**
         * @param innodbMaxPurgeLagDelay The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
         * 
         * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
         * 
         * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
         * 
         * @return builder
         * 
         */
        public Builder innodbMaxPurgeLagDelay(Integer innodbMaxPurgeLagDelay) {
            return innodbMaxPurgeLagDelay(Output.of(innodbMaxPurgeLagDelay));
        }

        /**
         * @param innodbStatsPersistentSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
         * 
         * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
         * 
         * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsPersistentSamplePages(@Nullable Output<String> innodbStatsPersistentSamplePages) {
            $.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            return this;
        }

        /**
         * @param innodbStatsPersistentSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
         * 
         * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
         * 
         * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsPersistentSamplePages(String innodbStatsPersistentSamplePages) {
            return innodbStatsPersistentSamplePages(Output.of(innodbStatsPersistentSamplePages));
        }

        /**
         * @param innodbStatsTransientSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
         * 
         * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
         * 
         * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
         * 
         * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsTransientSamplePages(@Nullable Output<String> innodbStatsTransientSamplePages) {
            $.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            return this;
        }

        /**
         * @param innodbStatsTransientSamplePages The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
         * 
         * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
         * 
         * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
         * 
         * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
         * 
         * @return builder
         * 
         */
        public Builder innodbStatsTransientSamplePages(String innodbStatsTransientSamplePages) {
            return innodbStatsTransientSamplePages(Output.of(innodbStatsTransientSamplePages));
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(@Nullable Output<Integer> interactiveTimeout) {
            $.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * @param interactiveTimeout The number of seconds the server waits for activity on an interactive connection before closing it.
         * 
         * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            return interactiveTimeout(Output.of(interactiveTimeout));
        }

        /**
         * @param localInfile (&#34;local_infile&#34;)
         * 
         * @return builder
         * 
         */
        public Builder localInfile(@Nullable Output<Boolean> localInfile) {
            $.localInfile = localInfile;
            return this;
        }

        /**
         * @param localInfile (&#34;local_infile&#34;)
         * 
         * @return builder
         * 
         */
        public Builder localInfile(Boolean localInfile) {
            return localInfile(Output.of(localInfile));
        }

        /**
         * @param mandatoryRoles (&#34;mandatory_roles&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryRoles(@Nullable Output<String> mandatoryRoles) {
            $.mandatoryRoles = mandatoryRoles;
            return this;
        }

        /**
         * @param mandatoryRoles (&#34;mandatory_roles&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryRoles(String mandatoryRoles) {
            return mandatoryRoles(Output.of(mandatoryRoles));
        }

        /**
         * @param maxAllowedPacket The maximum size of one packet or any generated/intermediate string.
         * 
         * This is the mysql variable &#34;max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(@Nullable Output<Integer> maxAllowedPacket) {
            $.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * @param maxAllowedPacket The maximum size of one packet or any generated/intermediate string.
         * 
         * This is the mysql variable &#34;max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            return maxAllowedPacket(Output.of(maxAllowedPacket));
        }

        /**
         * @param maxBinlogCacheSize Sets the size of the transaction cache.
         * 
         * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
         * 
         * @return builder
         * 
         */
        public Builder maxBinlogCacheSize(@Nullable Output<String> maxBinlogCacheSize) {
            $.maxBinlogCacheSize = maxBinlogCacheSize;
            return this;
        }

        /**
         * @param maxBinlogCacheSize Sets the size of the transaction cache.
         * 
         * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
         * 
         * @return builder
         * 
         */
        public Builder maxBinlogCacheSize(String maxBinlogCacheSize) {
            return maxBinlogCacheSize(Output.of(maxBinlogCacheSize));
        }

        /**
         * @param maxConnectErrors (&#34;max_connect_errors&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnectErrors(@Nullable Output<String> maxConnectErrors) {
            $.maxConnectErrors = maxConnectErrors;
            return this;
        }

        /**
         * @param maxConnectErrors (&#34;max_connect_errors&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnectErrors(String maxConnectErrors) {
            return maxConnectErrors(Output.of(maxConnectErrors));
        }

        /**
         * @param maxConnections (&#34;max_connections&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections (&#34;max_connections&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxExecutionTime (&#34;max_execution_time&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxExecutionTime(@Nullable Output<String> maxExecutionTime) {
            $.maxExecutionTime = maxExecutionTime;
            return this;
        }

        /**
         * @param maxExecutionTime (&#34;max_execution_time&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxExecutionTime(String maxExecutionTime) {
            return maxExecutionTime(Output.of(maxExecutionTime));
        }

        /**
         * @param maxHeapTableSize This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
         * 
         * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(@Nullable Output<String> maxHeapTableSize) {
            $.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * @param maxHeapTableSize This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
         * 
         * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(String maxHeapTableSize) {
            return maxHeapTableSize(Output.of(maxHeapTableSize));
        }

        /**
         * @param maxPreparedStmtCount (&#34;max_prepared_stmt_count&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedStmtCount(@Nullable Output<Integer> maxPreparedStmtCount) {
            $.maxPreparedStmtCount = maxPreparedStmtCount;
            return this;
        }

        /**
         * @param maxPreparedStmtCount (&#34;max_prepared_stmt_count&#34;)
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedStmtCount(Integer maxPreparedStmtCount) {
            return maxPreparedStmtCount(Output.of(maxPreparedStmtCount));
        }

        /**
         * @param mysqlFirewallMode (&#34;mysql_firewall_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlFirewallMode(@Nullable Output<Boolean> mysqlFirewallMode) {
            $.mysqlFirewallMode = mysqlFirewallMode;
            return this;
        }

        /**
         * @param mysqlFirewallMode (&#34;mysql_firewall_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlFirewallMode(Boolean mysqlFirewallMode) {
            return mysqlFirewallMode(Output.of(mysqlFirewallMode));
        }

        /**
         * @param mysqlZstdDefaultCompressionLevel DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlZstdDefaultCompressionLevel(@Nullable Output<Integer> mysqlZstdDefaultCompressionLevel) {
            $.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlZstdDefaultCompressionLevel DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlZstdDefaultCompressionLevel(Integer mysqlZstdDefaultCompressionLevel) {
            return mysqlZstdDefaultCompressionLevel(Output.of(mysqlZstdDefaultCompressionLevel));
        }

        /**
         * @param mysqlxConnectTimeout The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
         * 
         * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxConnectTimeout(@Nullable Output<Integer> mysqlxConnectTimeout) {
            $.mysqlxConnectTimeout = mysqlxConnectTimeout;
            return this;
        }

        /**
         * @param mysqlxConnectTimeout The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
         * 
         * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxConnectTimeout(Integer mysqlxConnectTimeout) {
            return mysqlxConnectTimeout(Output.of(mysqlxConnectTimeout));
        }

        /**
         * @param mysqlxDeflateDefaultCompressionLevel Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateDefaultCompressionLevel(@Nullable Output<Integer> mysqlxDeflateDefaultCompressionLevel) {
            $.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxDeflateDefaultCompressionLevel Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateDefaultCompressionLevel(Integer mysqlxDeflateDefaultCompressionLevel) {
            return mysqlxDeflateDefaultCompressionLevel(Output.of(mysqlxDeflateDefaultCompressionLevel));
        }

        /**
         * @param mysqlxDeflateMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateMaxClientCompressionLevel(@Nullable Output<Integer> mysqlxDeflateMaxClientCompressionLevel) {
            $.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxDeflateMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxDeflateMaxClientCompressionLevel(Integer mysqlxDeflateMaxClientCompressionLevel) {
            return mysqlxDeflateMaxClientCompressionLevel(Output.of(mysqlxDeflateMaxClientCompressionLevel));
        }

        /**
         * @param mysqlxDocumentIdUniquePrefix (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxDocumentIdUniquePrefix(@Nullable Output<Integer> mysqlxDocumentIdUniquePrefix) {
            $.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            return this;
        }

        /**
         * @param mysqlxDocumentIdUniquePrefix (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxDocumentIdUniquePrefix(Integer mysqlxDocumentIdUniquePrefix) {
            return mysqlxDocumentIdUniquePrefix(Output.of(mysqlxDocumentIdUniquePrefix));
        }

        /**
         * @param mysqlxEnableHelloNotice (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder mysqlxEnableHelloNotice(@Nullable Output<Boolean> mysqlxEnableHelloNotice) {
            $.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            return this;
        }

        /**
         * @param mysqlxEnableHelloNotice (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         */
        public Builder mysqlxEnableHelloNotice(Boolean mysqlxEnableHelloNotice) {
            return mysqlxEnableHelloNotice(Output.of(mysqlxEnableHelloNotice));
        }

        /**
         * @param mysqlxIdleWorkerThreadTimeout (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxIdleWorkerThreadTimeout(@Nullable Output<Integer> mysqlxIdleWorkerThreadTimeout) {
            $.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            return this;
        }

        /**
         * @param mysqlxIdleWorkerThreadTimeout (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxIdleWorkerThreadTimeout(Integer mysqlxIdleWorkerThreadTimeout) {
            return mysqlxIdleWorkerThreadTimeout(Output.of(mysqlxIdleWorkerThreadTimeout));
        }

        /**
         * @param mysqlxInteractiveTimeout The number of seconds to wait for interactive clients to timeout.
         * 
         * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxInteractiveTimeout(@Nullable Output<Integer> mysqlxInteractiveTimeout) {
            $.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            return this;
        }

        /**
         * @param mysqlxInteractiveTimeout The number of seconds to wait for interactive clients to timeout.
         * 
         * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxInteractiveTimeout(Integer mysqlxInteractiveTimeout) {
            return mysqlxInteractiveTimeout(Output.of(mysqlxInteractiveTimeout));
        }

        /**
         * @param mysqlxLz4defaultCompressionLevel Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4defaultCompressionLevel(@Nullable Output<Integer> mysqlxLz4defaultCompressionLevel) {
            $.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxLz4defaultCompressionLevel Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4defaultCompressionLevel(Integer mysqlxLz4defaultCompressionLevel) {
            return mysqlxLz4defaultCompressionLevel(Output.of(mysqlxLz4defaultCompressionLevel));
        }

        /**
         * @param mysqlxLz4maxClientCompressionLevel Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4maxClientCompressionLevel(@Nullable Output<Integer> mysqlxLz4maxClientCompressionLevel) {
            $.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxLz4maxClientCompressionLevel Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxLz4maxClientCompressionLevel(Integer mysqlxLz4maxClientCompressionLevel) {
            return mysqlxLz4maxClientCompressionLevel(Output.of(mysqlxLz4maxClientCompressionLevel));
        }

        /**
         * @param mysqlxMaxAllowedPacket The maximum size of network packets that can be received by X Plugin.
         * 
         * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mysqlxMaxAllowedPacket(@Nullable Output<Integer> mysqlxMaxAllowedPacket) {
            $.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            return this;
        }

        /**
         * @param mysqlxMaxAllowedPacket The maximum size of network packets that can be received by X Plugin.
         * 
         * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mysqlxMaxAllowedPacket(Integer mysqlxMaxAllowedPacket) {
            return mysqlxMaxAllowedPacket(Output.of(mysqlxMaxAllowedPacket));
        }

        /**
         * @param mysqlxMinWorkerThreads (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxMinWorkerThreads(@Nullable Output<Integer> mysqlxMinWorkerThreads) {
            $.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            return this;
        }

        /**
         * @param mysqlxMinWorkerThreads (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlxMinWorkerThreads(Integer mysqlxMinWorkerThreads) {
            return mysqlxMinWorkerThreads(Output.of(mysqlxMinWorkerThreads));
        }

        /**
         * @param mysqlxReadTimeout The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
         * 
         * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxReadTimeout(@Nullable Output<Integer> mysqlxReadTimeout) {
            $.mysqlxReadTimeout = mysqlxReadTimeout;
            return this;
        }

        /**
         * @param mysqlxReadTimeout The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
         * 
         * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxReadTimeout(Integer mysqlxReadTimeout) {
            return mysqlxReadTimeout(Output.of(mysqlxReadTimeout));
        }

        /**
         * @param mysqlxWaitTimeout The number of seconds that X Plugin waits for activity on a connection.
         * 
         * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWaitTimeout(@Nullable Output<Integer> mysqlxWaitTimeout) {
            $.mysqlxWaitTimeout = mysqlxWaitTimeout;
            return this;
        }

        /**
         * @param mysqlxWaitTimeout The number of seconds that X Plugin waits for activity on a connection.
         * 
         * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWaitTimeout(Integer mysqlxWaitTimeout) {
            return mysqlxWaitTimeout(Output.of(mysqlxWaitTimeout));
        }

        /**
         * @param mysqlxWriteTimeout The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
         * 
         * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWriteTimeout(@Nullable Output<Integer> mysqlxWriteTimeout) {
            $.mysqlxWriteTimeout = mysqlxWriteTimeout;
            return this;
        }

        /**
         * @param mysqlxWriteTimeout The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
         * 
         * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxWriteTimeout(Integer mysqlxWriteTimeout) {
            return mysqlxWriteTimeout(Output.of(mysqlxWriteTimeout));
        }

        /**
         * @param mysqlxZstdDefaultCompressionLevel Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdDefaultCompressionLevel(@Nullable Output<Integer> mysqlxZstdDefaultCompressionLevel) {
            $.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxZstdDefaultCompressionLevel Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdDefaultCompressionLevel(Integer mysqlxZstdDefaultCompressionLevel) {
            return mysqlxZstdDefaultCompressionLevel(Output.of(mysqlxZstdDefaultCompressionLevel));
        }

        /**
         * @param mysqlxZstdMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdMaxClientCompressionLevel(@Nullable Output<Integer> mysqlxZstdMaxClientCompressionLevel) {
            $.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            return this;
        }

        /**
         * @param mysqlxZstdMaxClientCompressionLevel Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mysqlxZstdMaxClientCompressionLevel(Integer mysqlxZstdMaxClientCompressionLevel) {
            return mysqlxZstdMaxClientCompressionLevel(Output.of(mysqlxZstdMaxClientCompressionLevel));
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(@Nullable Output<Integer> netReadTimeout) {
            $.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * @param netReadTimeout The number of seconds to wait for more data from a connection before aborting the read.
         * 
         * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(Integer netReadTimeout) {
            return netReadTimeout(Output.of(netReadTimeout));
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(@Nullable Output<Integer> netWriteTimeout) {
            $.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            return netWriteTimeout(Output.of(netWriteTimeout));
        }

        /**
         * @param parserMaxMemSize (&#34;parser_max_mem_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder parserMaxMemSize(@Nullable Output<String> parserMaxMemSize) {
            $.parserMaxMemSize = parserMaxMemSize;
            return this;
        }

        /**
         * @param parserMaxMemSize (&#34;parser_max_mem_size&#34;)
         * 
         * @return builder
         * 
         */
        public Builder parserMaxMemSize(String parserMaxMemSize) {
            return parserMaxMemSize(Output.of(parserMaxMemSize));
        }

        /**
         * @param queryAllocBlockSize (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryAllocBlockSize(@Nullable Output<String> queryAllocBlockSize) {
            $.queryAllocBlockSize = queryAllocBlockSize;
            return this;
        }

        /**
         * @param queryAllocBlockSize (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryAllocBlockSize(String queryAllocBlockSize) {
            return queryAllocBlockSize(Output.of(queryAllocBlockSize));
        }

        /**
         * @param queryPreallocSize (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryPreallocSize(@Nullable Output<String> queryPreallocSize) {
            $.queryPreallocSize = queryPreallocSize;
            return this;
        }

        /**
         * @param queryPreallocSize (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder queryPreallocSize(String queryPreallocSize) {
            return queryPreallocSize(Output.of(queryPreallocSize));
        }

        /**
         * @param regexpTimeLimit regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
         * 
         * @return builder
         * 
         */
        public Builder regexpTimeLimit(@Nullable Output<Integer> regexpTimeLimit) {
            $.regexpTimeLimit = regexpTimeLimit;
            return this;
        }

        /**
         * @param regexpTimeLimit regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
         * 
         * @return builder
         * 
         */
        public Builder regexpTimeLimit(Integer regexpTimeLimit) {
            return regexpTimeLimit(Output.of(regexpTimeLimit));
        }

        /**
         * @param sortBufferSize Each session that must perform a sort allocates a buffer of this size.
         * 
         * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(@Nullable Output<String> sortBufferSize) {
            $.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * @param sortBufferSize Each session that must perform a sort allocates a buffer of this size.
         * 
         * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(String sortBufferSize) {
            return sortBufferSize(Output.of(sortBufferSize));
        }

        /**
         * @param sqlMode (&#34;sql_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        /**
         * @param sqlMode (&#34;sql_mode&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        /**
         * @param sqlRequirePrimaryKey (&#34;sql_require_primary_key&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(@Nullable Output<Boolean> sqlRequirePrimaryKey) {
            $.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * @param sqlRequirePrimaryKey (&#34;sql_require_primary_key&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            return sqlRequirePrimaryKey(Output.of(sqlRequirePrimaryKey));
        }

        /**
         * @param sqlWarnings (&#34;sql_warnings&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlWarnings(@Nullable Output<Boolean> sqlWarnings) {
            $.sqlWarnings = sqlWarnings;
            return this;
        }

        /**
         * @param sqlWarnings (&#34;sql_warnings&#34;)
         * 
         * @return builder
         * 
         */
        public Builder sqlWarnings(Boolean sqlWarnings) {
            return sqlWarnings(Output.of(sqlWarnings));
        }

        /**
         * @param threadPoolDedicatedListeners Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolDedicatedListeners(@Nullable Output<Boolean> threadPoolDedicatedListeners) {
            $.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            return this;
        }

        /**
         * @param threadPoolDedicatedListeners Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolDedicatedListeners(Boolean threadPoolDedicatedListeners) {
            return threadPoolDedicatedListeners(Output.of(threadPoolDedicatedListeners));
        }

        /**
         * @param threadPoolMaxTransactionsLimit Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolMaxTransactionsLimit(@Nullable Output<Integer> threadPoolMaxTransactionsLimit) {
            $.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            return this;
        }

        /**
         * @param threadPoolMaxTransactionsLimit Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolMaxTransactionsLimit(Integer threadPoolMaxTransactionsLimit) {
            return threadPoolMaxTransactionsLimit(Output.of(threadPoolMaxTransactionsLimit));
        }

        /**
         * @param timeZone Initializes the time zone for each client that connects.
         * 
         * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
         * 
         * The values can be given in one of the following formats, none of which are case-sensitive:
         * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
         * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Initializes the time zone for each client that connects.
         * 
         * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
         * 
         * The values can be given in one of the following formats, none of which are case-sensitive:
         * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
         * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param tmpTableSize The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
         * 
         * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(@Nullable Output<String> tmpTableSize) {
            $.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * @param tmpTableSize The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
         * 
         * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(String tmpTableSize) {
            return tmpTableSize(Output.of(tmpTableSize));
        }

        /**
         * @param transactionIsolation (&#34;transaction_isolation&#34;)
         * 
         * @return builder
         * 
         */
        public Builder transactionIsolation(@Nullable Output<String> transactionIsolation) {
            $.transactionIsolation = transactionIsolation;
            return this;
        }

        /**
         * @param transactionIsolation (&#34;transaction_isolation&#34;)
         * 
         * @return builder
         * 
         */
        public Builder transactionIsolation(String transactionIsolation) {
            return transactionIsolation(Output.of(transactionIsolation));
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(@Nullable Output<Integer> waitTimeout) {
            $.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(Integer waitTimeout) {
            return waitTimeout(Output.of(waitTimeout));
        }

        public MysqlConfigurationVariablesArgs build() {
            return $;
        }
    }

}
