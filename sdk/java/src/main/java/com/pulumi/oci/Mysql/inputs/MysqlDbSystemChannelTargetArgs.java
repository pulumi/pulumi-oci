// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemChannelTargetFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlDbSystemChannelTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlDbSystemChannelTargetArgs Empty = new MysqlDbSystemChannelTargetArgs();

    /**
     * The username for the replication applier of the target MySQL DB System.
     * 
     */
    @Import(name="applierUsername")
    private @Nullable Output<String> applierUsername;

    /**
     * @return The username for the replication applier of the target MySQL DB System.
     * 
     */
    public Optional<Output<String>> applierUsername() {
        return Optional.ofNullable(this.applierUsername);
    }

    /**
     * The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
     * 
     */
    @Import(name="channelName")
    private @Nullable Output<String> channelName;

    /**
     * @return The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
     * 
     */
    public Optional<Output<String>> channelName() {
        return Optional.ofNullable(this.channelName);
    }

    /**
     * The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * Specifies the amount of time, in seconds, that the channel waits before  applying a transaction received from the source.
     * 
     */
    @Import(name="delayInSeconds")
    private @Nullable Output<Integer> delayInSeconds;

    /**
     * @return Specifies the amount of time, in seconds, that the channel waits before  applying a transaction received from the source.
     * 
     */
    public Optional<Output<Integer>> delayInSeconds() {
        return Optional.ofNullable(this.delayInSeconds);
    }

    /**
     * Replication filter rules to be applied at the DB System Channel target.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<MysqlDbSystemChannelTargetFilterArgs>> filters;

    /**
     * @return Replication filter rules to be applied at the DB System Channel target.
     * 
     */
    public Optional<Output<List<MysqlDbSystemChannelTargetFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Specifies how a replication channel handles the creation and alteration of tables  that do not have a primary key.
     * 
     */
    @Import(name="tablesWithoutPrimaryKeyHandling")
    private @Nullable Output<String> tablesWithoutPrimaryKeyHandling;

    /**
     * @return Specifies how a replication channel handles the creation and alteration of tables  that do not have a primary key.
     * 
     */
    public Optional<Output<String>> tablesWithoutPrimaryKeyHandling() {
        return Optional.ofNullable(this.tablesWithoutPrimaryKeyHandling);
    }

    /**
     * The specific target identifier.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return The specific target identifier.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    private MysqlDbSystemChannelTargetArgs() {}

    private MysqlDbSystemChannelTargetArgs(MysqlDbSystemChannelTargetArgs $) {
        this.applierUsername = $.applierUsername;
        this.channelName = $.channelName;
        this.dbSystemId = $.dbSystemId;
        this.delayInSeconds = $.delayInSeconds;
        this.filters = $.filters;
        this.tablesWithoutPrimaryKeyHandling = $.tablesWithoutPrimaryKeyHandling;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDbSystemChannelTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDbSystemChannelTargetArgs $;

        public Builder() {
            $ = new MysqlDbSystemChannelTargetArgs();
        }

        public Builder(MysqlDbSystemChannelTargetArgs defaults) {
            $ = new MysqlDbSystemChannelTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applierUsername The username for the replication applier of the target MySQL DB System.
         * 
         * @return builder
         * 
         */
        public Builder applierUsername(@Nullable Output<String> applierUsername) {
            $.applierUsername = applierUsername;
            return this;
        }

        /**
         * @param applierUsername The username for the replication applier of the target MySQL DB System.
         * 
         * @return builder
         * 
         */
        public Builder applierUsername(String applierUsername) {
            return applierUsername(Output.of(applierUsername));
        }

        /**
         * @param channelName The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
         * 
         * @return builder
         * 
         */
        public Builder channelName(@Nullable Output<String> channelName) {
            $.channelName = channelName;
            return this;
        }

        /**
         * @param channelName The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
         * 
         * @return builder
         * 
         */
        public Builder channelName(String channelName) {
            return channelName(Output.of(channelName));
        }

        /**
         * @param dbSystemId The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param delayInSeconds Specifies the amount of time, in seconds, that the channel waits before  applying a transaction received from the source.
         * 
         * @return builder
         * 
         */
        public Builder delayInSeconds(@Nullable Output<Integer> delayInSeconds) {
            $.delayInSeconds = delayInSeconds;
            return this;
        }

        /**
         * @param delayInSeconds Specifies the amount of time, in seconds, that the channel waits before  applying a transaction received from the source.
         * 
         * @return builder
         * 
         */
        public Builder delayInSeconds(Integer delayInSeconds) {
            return delayInSeconds(Output.of(delayInSeconds));
        }

        /**
         * @param filters Replication filter rules to be applied at the DB System Channel target.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<MysqlDbSystemChannelTargetFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Replication filter rules to be applied at the DB System Channel target.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<MysqlDbSystemChannelTargetFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Replication filter rules to be applied at the DB System Channel target.
         * 
         * @return builder
         * 
         */
        public Builder filters(MysqlDbSystemChannelTargetFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param tablesWithoutPrimaryKeyHandling Specifies how a replication channel handles the creation and alteration of tables  that do not have a primary key.
         * 
         * @return builder
         * 
         */
        public Builder tablesWithoutPrimaryKeyHandling(@Nullable Output<String> tablesWithoutPrimaryKeyHandling) {
            $.tablesWithoutPrimaryKeyHandling = tablesWithoutPrimaryKeyHandling;
            return this;
        }

        /**
         * @param tablesWithoutPrimaryKeyHandling Specifies how a replication channel handles the creation and alteration of tables  that do not have a primary key.
         * 
         * @return builder
         * 
         */
        public Builder tablesWithoutPrimaryKeyHandling(String tablesWithoutPrimaryKeyHandling) {
            return tablesWithoutPrimaryKeyHandling(Output.of(tablesWithoutPrimaryKeyHandling));
        }

        /**
         * @param targetType The specific target identifier.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType The specific target identifier.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public MysqlDbSystemChannelTargetArgs build() {
            return $;
        }
    }

}
