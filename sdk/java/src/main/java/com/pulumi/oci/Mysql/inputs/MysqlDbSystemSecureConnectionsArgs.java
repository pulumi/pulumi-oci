// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlDbSystemSecureConnectionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlDbSystemSecureConnectionsArgs Empty = new MysqlDbSystemSecureConnectionsArgs();

    /**
     * (Updatable) Select whether to use MySQL Database Service-managed certificate (SYSTEM) or your own certificate (BYOC).
     * 
     */
    @Import(name="certificateGenerationType", required=true)
    private Output<String> certificateGenerationType;

    /**
     * @return (Updatable) Select whether to use MySQL Database Service-managed certificate (SYSTEM) or your own certificate (BYOC).
     * 
     */
    public Output<String> certificateGenerationType() {
        return this.certificateGenerationType;
    }

    /**
     * (Updatable) The OCID of the certificate to use.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return (Updatable) The OCID of the certificate to use.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    private MysqlDbSystemSecureConnectionsArgs() {}

    private MysqlDbSystemSecureConnectionsArgs(MysqlDbSystemSecureConnectionsArgs $) {
        this.certificateGenerationType = $.certificateGenerationType;
        this.certificateId = $.certificateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDbSystemSecureConnectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDbSystemSecureConnectionsArgs $;

        public Builder() {
            $ = new MysqlDbSystemSecureConnectionsArgs();
        }

        public Builder(MysqlDbSystemSecureConnectionsArgs defaults) {
            $ = new MysqlDbSystemSecureConnectionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateGenerationType (Updatable) Select whether to use MySQL Database Service-managed certificate (SYSTEM) or your own certificate (BYOC).
         * 
         * @return builder
         * 
         */
        public Builder certificateGenerationType(Output<String> certificateGenerationType) {
            $.certificateGenerationType = certificateGenerationType;
            return this;
        }

        /**
         * @param certificateGenerationType (Updatable) Select whether to use MySQL Database Service-managed certificate (SYSTEM) or your own certificate (BYOC).
         * 
         * @return builder
         * 
         */
        public Builder certificateGenerationType(String certificateGenerationType) {
            return certificateGenerationType(Output.of(certificateGenerationType));
        }

        /**
         * @param certificateId (Updatable) The OCID of the certificate to use.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId (Updatable) The OCID of the certificate to use.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        public MysqlDbSystemSecureConnectionsArgs build() {
            if ($.certificateGenerationType == null) {
                throw new MissingRequiredPropertyException("MysqlDbSystemSecureConnectionsArgs", "certificateGenerationType");
            }
            return $;
        }
    }

}
