// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemBackupPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemChannelArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemCurrentPlacementArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemCustomerContactArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemDataStorageArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemDeletionPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemEndpointArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemHeatWaveClusterArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemMaintenanceArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemPointInTimeRecoveryDetailArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemReadEndpointArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemRestArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemSecureConnectionsArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemSourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlDbSystemState extends com.pulumi.resources.ResourceArgs {

    public static final MysqlDbSystemState Empty = new MysqlDbSystemState();

    /**
     * (Updatable) The access mode indicating if the database access will be restricted only to administrators or not:
     * * UNRESTRICTED (default): the access to the database is not restricted;
     * * RESTRICTED: the access will be allowed only to users with specific privileges; RESTRICTED will correspond to setting the MySQL system variable  [offline_mode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<String> accessMode;

    /**
     * @return (Updatable) The access mode indicating if the database access will be restricted only to administrators or not:
     * * UNRESTRICTED (default): the access to the database is not restricted;
     * * RESTRICTED: the access will be allowed only to users with specific privileges; RESTRICTED will correspond to setting the MySQL system variable  [offline_mode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
     * 
     */
    public Optional<Output<String>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * The username for the administrative user.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return The username for the administrative user.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the availability domain in which the DB System is placed.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the availability domain in which the DB System is placed.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    @Import(name="backupPolicy")
    private @Nullable Output<MysqlDbSystemBackupPolicyArgs> backupPolicy;

    /**
     * @return (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    public Optional<Output<MysqlDbSystemBackupPolicyArgs>> backupPolicy() {
        return Optional.ofNullable(this.backupPolicy);
    }

    /**
     * A list with a summary of all the Channels attached to the DB System.
     * 
     */
    @Import(name="channels")
    private @Nullable Output<List<MysqlDbSystemChannelArgs>> channels;

    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemChannelArgs>>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The OCID of the Configuration to be used for this DB System.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return (Updatable) The OCID of the Configuration to be used for this DB System.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    @Import(name="crashRecovery")
    private @Nullable Output<String> crashRecovery;

    /**
     * @return (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Optional<Output<String>> crashRecovery() {
        return Optional.ofNullable(this.crashRecovery);
    }

    /**
     * The availability domain and fault domain a DB System is placed in.
     * 
     */
    @Import(name="currentPlacements")
    private @Nullable Output<List<MysqlDbSystemCurrentPlacementArgs>> currentPlacements;

    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public Optional<Output<List<MysqlDbSystemCurrentPlacementArgs>>> currentPlacements() {
        return Optional.ofNullable(this.currentPlacements);
    }

    /**
     * (Updatable) The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
     * 
     */
    @Import(name="customerContacts")
    private @Nullable Output<List<MysqlDbSystemCustomerContactArgs>> customerContacts;

    /**
     * @return (Updatable) The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemCustomerContactArgs>>> customerContacts() {
        return Optional.ofNullable(this.customerContacts);
    }

    /**
     * (Updatable) Data Storage configuration properties.
     * 
     */
    @Import(name="dataStorage")
    private @Nullable Output<MysqlDbSystemDataStorageArgs> dataStorage;

    /**
     * @return (Updatable) Data Storage configuration properties.
     * 
     */
    public Optional<Output<MysqlDbSystemDataStorageArgs>> dataStorage() {
        return Optional.ofNullable(this.dataStorage);
    }

    /**
     * (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    @Import(name="dataStorageSizeInGb")
    private @Nullable Output<Integer> dataStorageSizeInGb;

    /**
     * @return (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    public Optional<Output<Integer>> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }

    /**
     * (Updatable) Whether to enable monitoring via the Database Management service.
     * 
     */
    @Import(name="databaseManagement")
    private @Nullable Output<String> databaseManagement;

    /**
     * @return (Updatable) Whether to enable monitoring via the Database Management service.
     * 
     */
    public Optional<Output<String>> databaseManagement() {
        return Optional.ofNullable(this.databaseManagement);
    }

    /**
     * (Updatable) The database mode indicating the types of statements that will be allowed to run in the DB system. This mode will apply only to statements run by user connections. Replicated write statements will continue  to be allowed regardless of the DatabaseMode.
     * * READ_WRITE (default): allow running read and write statements on the DB system;
     * * READ_ONLY: only allow running read statements on the DB system.
     * 
     */
    @Import(name="databaseMode")
    private @Nullable Output<String> databaseMode;

    /**
     * @return (Updatable) The database mode indicating the types of statements that will be allowed to run in the DB system. This mode will apply only to statements run by user connections. Replicated write statements will continue  to be allowed regardless of the DatabaseMode.
     * * READ_WRITE (default): allow running read and write statements on the DB system;
     * * READ_ONLY: only allow running read statements on the DB system.
     * 
     */
    public Optional<Output<String>> databaseMode() {
        return Optional.ofNullable(this.databaseMode);
    }

    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    @Import(name="deletionPolicies")
    private @Nullable Output<List<MysqlDbSystemDeletionPolicyArgs>> deletionPolicies;

    /**
     * @return (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    public Optional<Output<List<MysqlDbSystemDeletionPolicyArgs>>> deletionPolicies() {
        return Optional.ofNullable(this.deletionPolicies);
    }

    /**
     * (Updatable) User-provided data about the DB System.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) User-provided data about the DB System.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The network endpoints available for this DB System.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<MysqlDbSystemEndpointArgs>> endpoints;

    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the fault domain in which the DB System is placed.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
     * 
     * For a standalone DB System, this defines the fault domain in which the DB System is placed.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A summary of a HeatWave cluster.
     * 
     */
    @Import(name="heatWaveClusters")
    private @Nullable Output<List<MysqlDbSystemHeatWaveClusterArgs>> heatWaveClusters;

    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public Optional<Output<List<MysqlDbSystemHeatWaveClusterArgs>>> heatWaveClusters() {
        return Optional.ofNullable(this.heatWaveClusters);
    }

    /**
     * (Updatable) The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
     * 
     * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    @Import(name="hostnameLabel")
    private @Nullable Output<String> hostnameLabel;

    /**
     * @return (Updatable) The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
     * 
     * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public Optional<Output<String>> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }

    /**
     * The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * If the DB System has a HeatWave Cluster attached.
     * 
     */
    @Import(name="isHeatWaveClusterAttached")
    private @Nullable Output<Boolean> isHeatWaveClusterAttached;

    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    public Optional<Output<Boolean>> isHeatWaveClusterAttached() {
        return Optional.ofNullable(this.isHeatWaveClusterAttached);
    }

    /**
     * (Updatable) Specifies if the DB System is highly available.
     * 
     * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
     * 
     */
    @Import(name="isHighlyAvailable")
    private @Nullable Output<Boolean> isHighlyAvailable;

    /**
     * @return (Updatable) Specifies if the DB System is highly available.
     * 
     * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
     * 
     */
    public Optional<Output<Boolean>> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }

    /**
     * Additional information about the current lifecycleState.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    @Import(name="maintenance")
    private @Nullable Output<MysqlDbSystemMaintenanceArgs> maintenance;

    /**
     * @return (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    public Optional<Output<MysqlDbSystemMaintenanceArgs>> maintenance() {
        return Optional.ofNullable(this.maintenance);
    }

    /**
     * The specific MySQL version identifier.
     * 
     */
    @Import(name="mysqlVersion")
    private @Nullable Output<String> mysqlVersion;

    /**
     * @return The specific MySQL version identifier.
     * 
     */
    public Optional<Output<String>> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }

    /**
     * (Updatable) Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return (Updatable) Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    @Import(name="pointInTimeRecoveryDetails")
    private @Nullable Output<List<MysqlDbSystemPointInTimeRecoveryDetailArgs>> pointInTimeRecoveryDetails;

    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemPointInTimeRecoveryDetailArgs>>> pointInTimeRecoveryDetails() {
        return Optional.ofNullable(this.pointInTimeRecoveryDetails);
    }

    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    @Import(name="portX")
    private @Nullable Output<Integer> portX;

    /**
     * @return The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Output<Integer>> portX() {
        return Optional.ofNullable(this.portX);
    }

    /**
     * (Updatable) Details required to create a Read Endpoint.
     * 
     */
    @Import(name="readEndpoint")
    private @Nullable Output<MysqlDbSystemReadEndpointArgs> readEndpoint;

    /**
     * @return (Updatable) Details required to create a Read Endpoint.
     * 
     */
    public Optional<Output<MysqlDbSystemReadEndpointArgs>> readEndpoint() {
        return Optional.ofNullable(this.readEndpoint);
    }

    /**
     * (Updatable) Details required to configure REST while creating a DB System.
     * 
     */
    @Import(name="rest")
    private @Nullable Output<MysqlDbSystemRestArgs> rest;

    /**
     * @return (Updatable) Details required to configure REST while creating a DB System.
     * 
     */
    public Optional<Output<MysqlDbSystemRestArgs>> rest() {
        return Optional.ofNullable(this.rest);
    }

    /**
     * (Updatable) Secure connection configuration details.
     * 
     */
    @Import(name="secureConnections")
    private @Nullable Output<MysqlDbSystemSecureConnectionsArgs> secureConnections;

    /**
     * @return (Updatable) Secure connection configuration details.
     * 
     */
    public Optional<Output<MysqlDbSystemSecureConnectionsArgs>> secureConnections() {
        return Optional.ofNullable(this.secureConnections);
    }

    /**
     * (Updatable) The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    @Import(name="shapeName")
    private @Nullable Output<String> shapeName;

    /**
     * @return (Updatable) The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    public Optional<Output<String>> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }

    /**
     * It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="shutdownType")
    private @Nullable Output<String> shutdownType;

    /**
     * @return It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> shutdownType() {
        return Optional.ofNullable(this.shutdownType);
    }

    /**
     * Parameters detailing how to provision the initial data of the system.
     * 
     */
    @Import(name="source")
    private @Nullable Output<MysqlDbSystemSourceArgs> source;

    /**
     * @return Parameters detailing how to provision the initial data of the system.
     * 
     */
    public Optional<Output<MysqlDbSystemSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID of the subnet the DB System is associated with.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The date and time the DB System was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the DB System was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the DB System was last updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the DB System was last updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private MysqlDbSystemState() {}

    private MysqlDbSystemState(MysqlDbSystemState $) {
        this.accessMode = $.accessMode;
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.availabilityDomain = $.availabilityDomain;
        this.backupPolicy = $.backupPolicy;
        this.channels = $.channels;
        this.compartmentId = $.compartmentId;
        this.configurationId = $.configurationId;
        this.crashRecovery = $.crashRecovery;
        this.currentPlacements = $.currentPlacements;
        this.customerContacts = $.customerContacts;
        this.dataStorage = $.dataStorage;
        this.dataStorageSizeInGb = $.dataStorageSizeInGb;
        this.databaseManagement = $.databaseManagement;
        this.databaseMode = $.databaseMode;
        this.definedTags = $.definedTags;
        this.deletionPolicies = $.deletionPolicies;
        this.description = $.description;
        this.displayName = $.displayName;
        this.endpoints = $.endpoints;
        this.faultDomain = $.faultDomain;
        this.freeformTags = $.freeformTags;
        this.heatWaveClusters = $.heatWaveClusters;
        this.hostnameLabel = $.hostnameLabel;
        this.ipAddress = $.ipAddress;
        this.isHeatWaveClusterAttached = $.isHeatWaveClusterAttached;
        this.isHighlyAvailable = $.isHighlyAvailable;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maintenance = $.maintenance;
        this.mysqlVersion = $.mysqlVersion;
        this.nsgIds = $.nsgIds;
        this.pointInTimeRecoveryDetails = $.pointInTimeRecoveryDetails;
        this.port = $.port;
        this.portX = $.portX;
        this.readEndpoint = $.readEndpoint;
        this.rest = $.rest;
        this.secureConnections = $.secureConnections;
        this.shapeName = $.shapeName;
        this.shutdownType = $.shutdownType;
        this.source = $.source;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDbSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDbSystemState $;

        public Builder() {
            $ = new MysqlDbSystemState();
        }

        public Builder(MysqlDbSystemState defaults) {
            $ = new MysqlDbSystemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode (Updatable) The access mode indicating if the database access will be restricted only to administrators or not:
         * * UNRESTRICTED (default): the access to the database is not restricted;
         * * RESTRICTED: the access will be allowed only to users with specific privileges; RESTRICTED will correspond to setting the MySQL system variable  [offline_mode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode (Updatable) The access mode indicating if the database access will be restricted only to administrators or not:
         * * UNRESTRICTED (default): the access to the database is not restricted;
         * * RESTRICTED: the access will be allowed only to users with specific privileges; RESTRICTED will correspond to setting the MySQL system variable  [offline_mode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param adminPassword The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param availabilityDomain The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
         * 
         * For a standalone DB System, this defines the availability domain in which the DB System is placed.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
         * 
         * For a standalone DB System, this defines the availability domain in which the DB System is placed.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param backupPolicy (Updatable) Backup policy as optionally used for DB System Creation.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicy(@Nullable Output<MysqlDbSystemBackupPolicyArgs> backupPolicy) {
            $.backupPolicy = backupPolicy;
            return this;
        }

        /**
         * @param backupPolicy (Updatable) Backup policy as optionally used for DB System Creation.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicy(MysqlDbSystemBackupPolicyArgs backupPolicy) {
            return backupPolicy(Output.of(backupPolicy));
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<List<MysqlDbSystemChannelArgs>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(List<MysqlDbSystemChannelArgs> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(MysqlDbSystemChannelArgs... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configurationId (Updatable) The OCID of the Configuration to be used for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId (Updatable) The OCID of the Configuration to be used for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param crashRecovery (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(@Nullable Output<String> crashRecovery) {
            $.crashRecovery = crashRecovery;
            return this;
        }

        /**
         * @param crashRecovery (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(String crashRecovery) {
            return crashRecovery(Output.of(crashRecovery));
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(@Nullable Output<List<MysqlDbSystemCurrentPlacementArgs>> currentPlacements) {
            $.currentPlacements = currentPlacements;
            return this;
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(List<MysqlDbSystemCurrentPlacementArgs> currentPlacements) {
            return currentPlacements(Output.of(currentPlacements));
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(MysqlDbSystemCurrentPlacementArgs... currentPlacements) {
            return currentPlacements(List.of(currentPlacements));
        }

        /**
         * @param customerContacts (Updatable) The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(@Nullable Output<List<MysqlDbSystemCustomerContactArgs>> customerContacts) {
            $.customerContacts = customerContacts;
            return this;
        }

        /**
         * @param customerContacts (Updatable) The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(List<MysqlDbSystemCustomerContactArgs> customerContacts) {
            return customerContacts(Output.of(customerContacts));
        }

        /**
         * @param customerContacts (Updatable) The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(MysqlDbSystemCustomerContactArgs... customerContacts) {
            return customerContacts(List.of(customerContacts));
        }

        /**
         * @param dataStorage (Updatable) Data Storage configuration properties.
         * 
         * @return builder
         * 
         */
        public Builder dataStorage(@Nullable Output<MysqlDbSystemDataStorageArgs> dataStorage) {
            $.dataStorage = dataStorage;
            return this;
        }

        /**
         * @param dataStorage (Updatable) Data Storage configuration properties.
         * 
         * @return builder
         * 
         */
        public Builder dataStorage(MysqlDbSystemDataStorageArgs dataStorage) {
            return dataStorage(Output.of(dataStorage));
        }

        /**
         * @param dataStorageSizeInGb (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(@Nullable Output<Integer> dataStorageSizeInGb) {
            $.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }

        /**
         * @param dataStorageSizeInGb (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            return dataStorageSizeInGb(Output.of(dataStorageSizeInGb));
        }

        /**
         * @param databaseManagement (Updatable) Whether to enable monitoring via the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagement(@Nullable Output<String> databaseManagement) {
            $.databaseManagement = databaseManagement;
            return this;
        }

        /**
         * @param databaseManagement (Updatable) Whether to enable monitoring via the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagement(String databaseManagement) {
            return databaseManagement(Output.of(databaseManagement));
        }

        /**
         * @param databaseMode (Updatable) The database mode indicating the types of statements that will be allowed to run in the DB system. This mode will apply only to statements run by user connections. Replicated write statements will continue  to be allowed regardless of the DatabaseMode.
         * * READ_WRITE (default): allow running read and write statements on the DB system;
         * * READ_ONLY: only allow running read statements on the DB system.
         * 
         * @return builder
         * 
         */
        public Builder databaseMode(@Nullable Output<String> databaseMode) {
            $.databaseMode = databaseMode;
            return this;
        }

        /**
         * @param databaseMode (Updatable) The database mode indicating the types of statements that will be allowed to run in the DB system. This mode will apply only to statements run by user connections. Replicated write statements will continue  to be allowed regardless of the DatabaseMode.
         * * READ_WRITE (default): allow running read and write statements on the DB system;
         * * READ_ONLY: only allow running read statements on the DB system.
         * 
         * @return builder
         * 
         */
        public Builder databaseMode(String databaseMode) {
            return databaseMode(Output.of(databaseMode));
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(@Nullable Output<List<MysqlDbSystemDeletionPolicyArgs>> deletionPolicies) {
            $.deletionPolicies = deletionPolicies;
            return this;
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(List<MysqlDbSystemDeletionPolicyArgs> deletionPolicies) {
            return deletionPolicies(Output.of(deletionPolicies));
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(MysqlDbSystemDeletionPolicyArgs... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }

        /**
         * @param description (Updatable) User-provided data about the DB System.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) User-provided data about the DB System.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB System. It does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB System. It does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<MysqlDbSystemEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<MysqlDbSystemEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(MysqlDbSystemEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param faultDomain The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
         * 
         * For a standalone DB System, this defines the fault domain in which the DB System is placed.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
         * 
         * For a standalone DB System, this defines the fault domain in which the DB System is placed.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(@Nullable Output<List<MysqlDbSystemHeatWaveClusterArgs>> heatWaveClusters) {
            $.heatWaveClusters = heatWaveClusters;
            return this;
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(List<MysqlDbSystemHeatWaveClusterArgs> heatWaveClusters) {
            return heatWaveClusters(Output.of(heatWaveClusters));
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(MysqlDbSystemHeatWaveClusterArgs... heatWaveClusters) {
            return heatWaveClusters(List.of(heatWaveClusters));
        }

        /**
         * @param hostnameLabel (Updatable) The hostname for the primary endpoint of the DB System. Used for DNS.
         * 
         * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
         * 
         * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(@Nullable Output<String> hostnameLabel) {
            $.hostnameLabel = hostnameLabel;
            return this;
        }

        /**
         * @param hostnameLabel (Updatable) The hostname for the primary endpoint of the DB System. Used for DNS.
         * 
         * The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;).
         * 
         * Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(String hostnameLabel) {
            return hostnameLabel(Output.of(hostnameLabel));
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isHeatWaveClusterAttached If the DB System has a HeatWave Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isHeatWaveClusterAttached(@Nullable Output<Boolean> isHeatWaveClusterAttached) {
            $.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }

        /**
         * @param isHeatWaveClusterAttached If the DB System has a HeatWave Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isHeatWaveClusterAttached(Boolean isHeatWaveClusterAttached) {
            return isHeatWaveClusterAttached(Output.of(isHeatWaveClusterAttached));
        }

        /**
         * @param isHighlyAvailable (Updatable) Specifies if the DB System is highly available.
         * 
         * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(@Nullable Output<Boolean> isHighlyAvailable) {
            $.isHighlyAvailable = isHighlyAvailable;
            return this;
        }

        /**
         * @param isHighlyAvailable (Updatable) Specifies if the DB System is highly available.
         * 
         * When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            return isHighlyAvailable(Output.of(isHighlyAvailable));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param maintenance (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(@Nullable Output<MysqlDbSystemMaintenanceArgs> maintenance) {
            $.maintenance = maintenance;
            return this;
        }

        /**
         * @param maintenance (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(MysqlDbSystemMaintenanceArgs maintenance) {
            return maintenance(Output.of(maintenance));
        }

        /**
         * @param mysqlVersion The specific MySQL version identifier.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(@Nullable Output<String> mysqlVersion) {
            $.mysqlVersion = mysqlVersion;
            return this;
        }

        /**
         * @param mysqlVersion The specific MySQL version identifier.
         * 
         * @return builder
         * 
         */
        public Builder mysqlVersion(String mysqlVersion) {
            return mysqlVersion(Output.of(mysqlVersion));
        }

        /**
         * @param nsgIds (Updatable) Network Security Group OCIDs used for the VNIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds (Updatable) Network Security Group OCIDs used for the VNIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds (Updatable) Network Security Group OCIDs used for the VNIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param pointInTimeRecoveryDetails Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecoveryDetails(@Nullable Output<List<MysqlDbSystemPointInTimeRecoveryDetailArgs>> pointInTimeRecoveryDetails) {
            $.pointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            return this;
        }

        /**
         * @param pointInTimeRecoveryDetails Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecoveryDetails(List<MysqlDbSystemPointInTimeRecoveryDetailArgs> pointInTimeRecoveryDetails) {
            return pointInTimeRecoveryDetails(Output.of(pointInTimeRecoveryDetails));
        }

        /**
         * @param pointInTimeRecoveryDetails Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecoveryDetails(MysqlDbSystemPointInTimeRecoveryDetailArgs... pointInTimeRecoveryDetails) {
            return pointInTimeRecoveryDetails(List.of(pointInTimeRecoveryDetails));
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portX The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(@Nullable Output<Integer> portX) {
            $.portX = portX;
            return this;
        }

        /**
         * @param portX The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(Integer portX) {
            return portX(Output.of(portX));
        }

        /**
         * @param readEndpoint (Updatable) Details required to create a Read Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder readEndpoint(@Nullable Output<MysqlDbSystemReadEndpointArgs> readEndpoint) {
            $.readEndpoint = readEndpoint;
            return this;
        }

        /**
         * @param readEndpoint (Updatable) Details required to create a Read Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder readEndpoint(MysqlDbSystemReadEndpointArgs readEndpoint) {
            return readEndpoint(Output.of(readEndpoint));
        }

        /**
         * @param rest (Updatable) Details required to configure REST while creating a DB System.
         * 
         * @return builder
         * 
         */
        public Builder rest(@Nullable Output<MysqlDbSystemRestArgs> rest) {
            $.rest = rest;
            return this;
        }

        /**
         * @param rest (Updatable) Details required to configure REST while creating a DB System.
         * 
         * @return builder
         * 
         */
        public Builder rest(MysqlDbSystemRestArgs rest) {
            return rest(Output.of(rest));
        }

        /**
         * @param secureConnections (Updatable) Secure connection configuration details.
         * 
         * @return builder
         * 
         */
        public Builder secureConnections(@Nullable Output<MysqlDbSystemSecureConnectionsArgs> secureConnections) {
            $.secureConnections = secureConnections;
            return this;
        }

        /**
         * @param secureConnections (Updatable) Secure connection configuration details.
         * 
         * @return builder
         * 
         */
        public Builder secureConnections(MysqlDbSystemSecureConnectionsArgs secureConnections) {
            return secureConnections(Output.of(secureConnections));
        }

        /**
         * @param shapeName (Updatable) The name of the shape. The shape determines the resources allocated
         * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName (Updatable) The name of the shape. The shape determines the resources allocated
         * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param shutdownType It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shutdownType(@Nullable Output<String> shutdownType) {
            $.shutdownType = shutdownType;
            return this;
        }

        /**
         * @param shutdownType It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shutdownType(String shutdownType) {
            return shutdownType(Output.of(shutdownType));
        }

        /**
         * @param source Parameters detailing how to provision the initial data of the system.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<MysqlDbSystemSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Parameters detailing how to provision the initial data of the system.
         * 
         * @return builder
         * 
         */
        public Builder source(MysqlDbSystemSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The date and time the DB System was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the DB System was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the DB System was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the DB System was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public MysqlDbSystemState build() {
            return $;
        }
    }

}
