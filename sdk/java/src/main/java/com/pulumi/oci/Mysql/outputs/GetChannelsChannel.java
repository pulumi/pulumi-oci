// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetChannelsChannelSource;
import com.pulumi.oci.Mysql.outputs.GetChannelsChannelTarget;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetChannelsChannel {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return User provided description of the Channel.
     * 
     */
    private String description;
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the Channel.
     * 
     */
    private String id;
    /**
     * @return If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return A message describing the state of the Channel.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Parameters detailing how to provision the source for the given Channel.
     * 
     */
    private List<GetChannelsChannelSource> sources;
    /**
     * @return The LifecycleState of the Channel.
     * 
     */
    private String state;
    /**
     * @return Details about the Channel target.
     * 
     */
    private List<GetChannelsChannelTarget> targets;
    /**
     * @return The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeUpdated;

    private GetChannelsChannel() {}
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return User provided description of the Channel.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the Channel.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return A message describing the state of the Channel.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Parameters detailing how to provision the source for the given Channel.
     * 
     */
    public List<GetChannelsChannelSource> sources() {
        return this.sources;
    }
    /**
     * @return The LifecycleState of the Channel.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Details about the Channel target.
     * 
     */
    public List<GetChannelsChannelTarget> targets() {
        return this.targets;
    }
    /**
     * @return The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetChannelsChannel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isEnabled;
        private String lifecycleDetails;
        private List<GetChannelsChannelSource> sources;
        private String state;
        private List<GetChannelsChannelTarget> targets;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetChannelsChannel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.targets = defaults.targets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetChannelsChannelSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetChannelsChannelSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targets(List<GetChannelsChannelTarget> targets) {
            if (targets == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "targets");
            }
            this.targets = targets;
            return this;
        }
        public Builder targets(GetChannelsChannelTarget... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetChannelsChannel", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetChannelsChannel build() {
            final var _resultValue = new GetChannelsChannel();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.sources = sources;
            _resultValue.state = state;
            _resultValue.targets = targets;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
