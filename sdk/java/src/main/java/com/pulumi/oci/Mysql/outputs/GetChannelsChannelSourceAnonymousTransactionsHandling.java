// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetChannelsChannelSourceAnonymousTransactionsHandling {
    /**
     * @return Specifies one of the coordinates (file) at which the replica should begin reading the source&#39;s log. As this value specifies the point where replication starts from, it is only used once, when it starts. It is never used again, unless a new UpdateChannel operation modifies it.
     * 
     */
    private String lastConfiguredLogFilename;
    /**
     * @return Specifies one of the coordinates (offset) at which the replica should begin reading the source&#39;s log. As this value specifies the point where replication starts from, it is only used once, when it starts. It is never used again, unless a new UpdateChannel operation modifies it.
     * 
     */
    private String lastConfiguredLogOffset;
    /**
     * @return Specifies how the replication channel handles anonymous transactions.
     * 
     */
    private String policy;
    /**
     * @return The UUID that is used as a prefix when generating transaction identifiers for anonymous transactions coming from the source. You can change the UUID later.
     * 
     */
    private String uuid;

    private GetChannelsChannelSourceAnonymousTransactionsHandling() {}
    /**
     * @return Specifies one of the coordinates (file) at which the replica should begin reading the source&#39;s log. As this value specifies the point where replication starts from, it is only used once, when it starts. It is never used again, unless a new UpdateChannel operation modifies it.
     * 
     */
    public String lastConfiguredLogFilename() {
        return this.lastConfiguredLogFilename;
    }
    /**
     * @return Specifies one of the coordinates (offset) at which the replica should begin reading the source&#39;s log. As this value specifies the point where replication starts from, it is only used once, when it starts. It is never used again, unless a new UpdateChannel operation modifies it.
     * 
     */
    public String lastConfiguredLogOffset() {
        return this.lastConfiguredLogOffset;
    }
    /**
     * @return Specifies how the replication channel handles anonymous transactions.
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return The UUID that is used as a prefix when generating transaction identifiers for anonymous transactions coming from the source. You can change the UUID later.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetChannelsChannelSourceAnonymousTransactionsHandling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String lastConfiguredLogFilename;
        private String lastConfiguredLogOffset;
        private String policy;
        private String uuid;
        public Builder() {}
        public Builder(GetChannelsChannelSourceAnonymousTransactionsHandling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lastConfiguredLogFilename = defaults.lastConfiguredLogFilename;
    	      this.lastConfiguredLogOffset = defaults.lastConfiguredLogOffset;
    	      this.policy = defaults.policy;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder lastConfiguredLogFilename(String lastConfiguredLogFilename) {
            this.lastConfiguredLogFilename = Objects.requireNonNull(lastConfiguredLogFilename);
            return this;
        }
        @CustomType.Setter
        public Builder lastConfiguredLogOffset(String lastConfiguredLogOffset) {
            this.lastConfiguredLogOffset = Objects.requireNonNull(lastConfiguredLogOffset);
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            this.policy = Objects.requireNonNull(policy);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            this.uuid = Objects.requireNonNull(uuid);
            return this;
        }
        public GetChannelsChannelSourceAnonymousTransactionsHandling build() {
            final var o = new GetChannelsChannelSourceAnonymousTransactionsHandling();
            o.lastConfiguredLogFilename = lastConfiguredLogFilename;
            o.lastConfiguredLogOffset = lastConfiguredLogOffset;
            o.policy = policy;
            o.uuid = uuid;
            return o;
        }
    }
}
