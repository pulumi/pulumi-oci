// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetHeatWaveClusterClusterNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHeatWaveClusterResult {
    /**
     * @return A HeatWave node is a compute host that is part of a HeatWave cluster.
     * 
     */
    private @Nullable List<GetHeatWaveClusterClusterNode> clusterNodes;
    /**
     * @return The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
     * 
     */
    private @Nullable Integer clusterSize;
    /**
     * @return The OCID of the parent DB System this HeatWave cluster is attached to.
     * 
     */
    private String dbSystemId;
    private @Nullable String id;
    /**
     * @return Lakehouse enabled status for the HeatWave cluster.
     * 
     */
    private @Nullable Boolean isLakehouseEnabled;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The shape determines resources to allocate to the HeatWave nodes - CPU cores, memory.
     * 
     */
    private @Nullable String shapeName;
    /**
     * @return The current state of the HeatWave cluster.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeUpdated;

    private GetHeatWaveClusterResult() {}
    /**
     * @return A HeatWave node is a compute host that is part of a HeatWave cluster.
     * 
     */
    public List<GetHeatWaveClusterClusterNode> clusterNodes() {
        return this.clusterNodes == null ? List.of() : this.clusterNodes;
    }
    /**
     * @return The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
     * 
     */
    public Optional<Integer> clusterSize() {
        return Optional.ofNullable(this.clusterSize);
    }
    /**
     * @return The OCID of the parent DB System this HeatWave cluster is attached to.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Lakehouse enabled status for the HeatWave cluster.
     * 
     */
    public Optional<Boolean> isLakehouseEnabled() {
        return Optional.ofNullable(this.isLakehouseEnabled);
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The shape determines resources to allocate to the HeatWave nodes - CPU cores, memory.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    /**
     * @return The current state of the HeatWave cluster.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHeatWaveClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetHeatWaveClusterClusterNode> clusterNodes;
        private @Nullable Integer clusterSize;
        private String dbSystemId;
        private @Nullable String id;
        private @Nullable Boolean isLakehouseEnabled;
        private @Nullable String lifecycleDetails;
        private @Nullable String shapeName;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetHeatWaveClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterNodes = defaults.clusterNodes;
    	      this.clusterSize = defaults.clusterSize;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.id = defaults.id;
    	      this.isLakehouseEnabled = defaults.isLakehouseEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder clusterNodes(@Nullable List<GetHeatWaveClusterClusterNode> clusterNodes) {
            this.clusterNodes = clusterNodes;
            return this;
        }
        public Builder clusterNodes(GetHeatWaveClusterClusterNode... clusterNodes) {
            return clusterNodes(List.of(clusterNodes));
        }
        @CustomType.Setter
        public Builder clusterSize(@Nullable Integer clusterSize) {
            this.clusterSize = clusterSize;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isLakehouseEnabled(@Nullable Boolean isLakehouseEnabled) {
            this.isLakehouseEnabled = isLakehouseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(@Nullable String shapeName) {
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetHeatWaveClusterResult build() {
            final var o = new GetHeatWaveClusterResult();
            o.clusterNodes = clusterNodes;
            o.clusterSize = clusterSize;
            o.dbSystemId = dbSystemId;
            o.id = id;
            o.isLakehouseEnabled = isLakehouseEnabled;
            o.lifecycleDetails = lifecycleDetails;
            o.shapeName = shapeName;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
