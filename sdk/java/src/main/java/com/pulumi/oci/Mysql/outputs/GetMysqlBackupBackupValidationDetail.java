// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupBackupValidationDetailPreparedBackupDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupBackupValidationDetail {
    /**
     * @return Indicates whether the backup has been prepared successfully.  PREPARED: The backup is prepared one. NOT_PREPARED: The backup is not prepared.
     * 
     */
    private String backupPreparationStatus;
    /**
     * @return Error message if the backup validation has failed.
     * 
     */
    private String errorMessage;
    /**
     * @return The estimated restore duration of the backup.
     * 
     */
    private String estimatedRestoreDuration;
    /**
     * @return Prepared backup details.
     * 
     */
    private List<GetMysqlBackupBackupValidationDetailPreparedBackupDetail> preparedBackupDetails;
    /**
     * @return The date and time of the most recent validation performed on the backup.
     * 
     */
    private String timeLastValidated;
    /**
     * @return The status of backup validation:  NOT_VALIDATED (Default): The backup has not been validated.  VALIDATED: The backup has been validated successfully.  NEEDS_ATTENTION: The backup validation failed due to a transient issue. Validation should be retried.  FAILED: The backup cannot be restored.
     * 
     */
    private String validationStatus;

    private GetMysqlBackupBackupValidationDetail() {}
    /**
     * @return Indicates whether the backup has been prepared successfully.  PREPARED: The backup is prepared one. NOT_PREPARED: The backup is not prepared.
     * 
     */
    public String backupPreparationStatus() {
        return this.backupPreparationStatus;
    }
    /**
     * @return Error message if the backup validation has failed.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The estimated restore duration of the backup.
     * 
     */
    public String estimatedRestoreDuration() {
        return this.estimatedRestoreDuration;
    }
    /**
     * @return Prepared backup details.
     * 
     */
    public List<GetMysqlBackupBackupValidationDetailPreparedBackupDetail> preparedBackupDetails() {
        return this.preparedBackupDetails;
    }
    /**
     * @return The date and time of the most recent validation performed on the backup.
     * 
     */
    public String timeLastValidated() {
        return this.timeLastValidated;
    }
    /**
     * @return The status of backup validation:  NOT_VALIDATED (Default): The backup has not been validated.  VALIDATED: The backup has been validated successfully.  NEEDS_ATTENTION: The backup validation failed due to a transient issue. Validation should be retried.  FAILED: The backup cannot be restored.
     * 
     */
    public String validationStatus() {
        return this.validationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupBackupValidationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupPreparationStatus;
        private String errorMessage;
        private String estimatedRestoreDuration;
        private List<GetMysqlBackupBackupValidationDetailPreparedBackupDetail> preparedBackupDetails;
        private String timeLastValidated;
        private String validationStatus;
        public Builder() {}
        public Builder(GetMysqlBackupBackupValidationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPreparationStatus = defaults.backupPreparationStatus;
    	      this.errorMessage = defaults.errorMessage;
    	      this.estimatedRestoreDuration = defaults.estimatedRestoreDuration;
    	      this.preparedBackupDetails = defaults.preparedBackupDetails;
    	      this.timeLastValidated = defaults.timeLastValidated;
    	      this.validationStatus = defaults.validationStatus;
        }

        @CustomType.Setter
        public Builder backupPreparationStatus(String backupPreparationStatus) {
            if (backupPreparationStatus == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "backupPreparationStatus");
            }
            this.backupPreparationStatus = backupPreparationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedRestoreDuration(String estimatedRestoreDuration) {
            if (estimatedRestoreDuration == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "estimatedRestoreDuration");
            }
            this.estimatedRestoreDuration = estimatedRestoreDuration;
            return this;
        }
        @CustomType.Setter
        public Builder preparedBackupDetails(List<GetMysqlBackupBackupValidationDetailPreparedBackupDetail> preparedBackupDetails) {
            if (preparedBackupDetails == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "preparedBackupDetails");
            }
            this.preparedBackupDetails = preparedBackupDetails;
            return this;
        }
        public Builder preparedBackupDetails(GetMysqlBackupBackupValidationDetailPreparedBackupDetail... preparedBackupDetails) {
            return preparedBackupDetails(List.of(preparedBackupDetails));
        }
        @CustomType.Setter
        public Builder timeLastValidated(String timeLastValidated) {
            if (timeLastValidated == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "timeLastValidated");
            }
            this.timeLastValidated = timeLastValidated;
            return this;
        }
        @CustomType.Setter
        public Builder validationStatus(String validationStatus) {
            if (validationStatus == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupBackupValidationDetail", "validationStatus");
            }
            this.validationStatus = validationStatus;
            return this;
        }
        public GetMysqlBackupBackupValidationDetail build() {
            final var _resultValue = new GetMysqlBackupBackupValidationDetail();
            _resultValue.backupPreparationStatus = backupPreparationStatus;
            _resultValue.errorMessage = errorMessage;
            _resultValue.estimatedRestoreDuration = estimatedRestoreDuration;
            _resultValue.preparedBackupDetails = preparedBackupDetails;
            _resultValue.timeLastValidated = timeLastValidated;
            _resultValue.validationStatus = validationStatus;
            return _resultValue;
        }
    }
}
