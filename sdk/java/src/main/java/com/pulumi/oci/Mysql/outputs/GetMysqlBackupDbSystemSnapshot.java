// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshotBackupPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshotDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshotEndpoint;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshotMaintenance;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupDbSystemSnapshot {
    /**
     * @return The username for the administrative user.
     * 
     */
    private String adminUsername;
    /**
     * @return The Availability Domain where the primary DB System should be located.
     * 
     */
    private String availabilityDomain;
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    private List<GetMysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies;
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    private String configurationId;
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    private String crashRecovery;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private Integer dataStorageSizeInGb;
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    private String databaseManagement;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    private List<GetMysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies;
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    private String description;
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    private String displayName;
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    private List<GetMysqlBackupDbSystemSnapshotEndpoint> endpoints;
    /**
     * @return The name of the Fault Domain the DB System is located in.
     * 
     */
    private String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    private String hostnameLabel;
    /**
     * @return OCID of the backup itself
     * 
     */
    private String id;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private String ipAddress;
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    private Boolean isHighlyAvailable;
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    private List<GetMysqlBackupDbSystemSnapshotMaintenance> maintenances;
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    private String mysqlVersion;
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    private Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private Integer portX;
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    private String shapeName;
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    private String subnetId;

    private GetMysqlBackupDbSystemSnapshot() {}
    /**
     * @return The username for the administrative user.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return The Availability Domain where the primary DB System should be located.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies() {
        return this.backupPolicies;
    }
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public String crashRecovery() {
        return this.crashRecovery;
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    public String databaseManagement() {
        return this.databaseManagement;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies() {
        return this.deletionPolicies;
    }
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshotEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The name of the Fault Domain the DB System is located in.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return OCID of the backup itself
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    public Boolean isHighlyAvailable() {
        return this.isHighlyAvailable;
    }
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshotMaintenance> maintenances() {
        return this.maintenances;
    }
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Integer portX() {
        return this.portX;
    }
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupDbSystemSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminUsername;
        private String availabilityDomain;
        private List<GetMysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies;
        private String compartmentId;
        private String configurationId;
        private String crashRecovery;
        private Integer dataStorageSizeInGb;
        private String databaseManagement;
        private Map<String,Object> definedTags;
        private List<GetMysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies;
        private String description;
        private String displayName;
        private List<GetMysqlBackupDbSystemSnapshotEndpoint> endpoints;
        private String faultDomain;
        private Map<String,Object> freeformTags;
        private String hostnameLabel;
        private String id;
        private String ipAddress;
        private Boolean isHighlyAvailable;
        private List<GetMysqlBackupDbSystemSnapshotMaintenance> maintenances;
        private String mysqlVersion;
        private Integer port;
        private Integer portX;
        private String shapeName;
        private String subnetId;
        public Builder() {}
        public Builder(GetMysqlBackupDbSystemSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupPolicies = defaults.backupPolicies;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.crashRecovery = defaults.crashRecovery;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.databaseManagement = defaults.databaseManagement;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionPolicies = defaults.deletionPolicies;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.maintenances = defaults.maintenances;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.shapeName = defaults.shapeName;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder backupPolicies(List<GetMysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies) {
            this.backupPolicies = Objects.requireNonNull(backupPolicies);
            return this;
        }
        public Builder backupPolicies(GetMysqlBackupDbSystemSnapshotBackupPolicy... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(String configurationId) {
            this.configurationId = Objects.requireNonNull(configurationId);
            return this;
        }
        @CustomType.Setter
        public Builder crashRecovery(String crashRecovery) {
            this.crashRecovery = Objects.requireNonNull(crashRecovery);
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            this.dataStorageSizeInGb = Objects.requireNonNull(dataStorageSizeInGb);
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagement(String databaseManagement) {
            this.databaseManagement = Objects.requireNonNull(databaseManagement);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder deletionPolicies(List<GetMysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies) {
            this.deletionPolicies = Objects.requireNonNull(deletionPolicies);
            return this;
        }
        public Builder deletionPolicies(GetMysqlBackupDbSystemSnapshotDeletionPolicy... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetMysqlBackupDbSystemSnapshotEndpoint> endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }
        public Builder endpoints(GetMysqlBackupDbSystemSnapshotEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            this.faultDomain = Objects.requireNonNull(faultDomain);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            this.hostnameLabel = Objects.requireNonNull(hostnameLabel);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            this.isHighlyAvailable = Objects.requireNonNull(isHighlyAvailable);
            return this;
        }
        @CustomType.Setter
        public Builder maintenances(List<GetMysqlBackupDbSystemSnapshotMaintenance> maintenances) {
            this.maintenances = Objects.requireNonNull(maintenances);
            return this;
        }
        public Builder maintenances(GetMysqlBackupDbSystemSnapshotMaintenance... maintenances) {
            return maintenances(List.of(maintenances));
        }
        @CustomType.Setter
        public Builder mysqlVersion(String mysqlVersion) {
            this.mysqlVersion = Objects.requireNonNull(mysqlVersion);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder portX(Integer portX) {
            this.portX = Objects.requireNonNull(portX);
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            this.shapeName = Objects.requireNonNull(shapeName);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public GetMysqlBackupDbSystemSnapshot build() {
            final var o = new GetMysqlBackupDbSystemSnapshot();
            o.adminUsername = adminUsername;
            o.availabilityDomain = availabilityDomain;
            o.backupPolicies = backupPolicies;
            o.compartmentId = compartmentId;
            o.configurationId = configurationId;
            o.crashRecovery = crashRecovery;
            o.dataStorageSizeInGb = dataStorageSizeInGb;
            o.databaseManagement = databaseManagement;
            o.definedTags = definedTags;
            o.deletionPolicies = deletionPolicies;
            o.description = description;
            o.displayName = displayName;
            o.endpoints = endpoints;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.hostnameLabel = hostnameLabel;
            o.id = id;
            o.ipAddress = ipAddress;
            o.isHighlyAvailable = isHighlyAvailable;
            o.maintenances = maintenances;
            o.mysqlVersion = mysqlVersion;
            o.port = port;
            o.portX = portX;
            o.shapeName = shapeName;
            o.subnetId = subnetId;
            return o;
        }
    }
}
