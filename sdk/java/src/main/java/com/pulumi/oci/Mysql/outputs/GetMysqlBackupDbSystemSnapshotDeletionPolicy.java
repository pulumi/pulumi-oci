// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupDbSystemSnapshotDeletionPolicy {
    /**
     * @return Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    private String automaticBackupRetention;
    /**
     * @return Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    private String finalBackup;
    /**
     * @return Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    private Boolean isDeleteProtected;

    private GetMysqlBackupDbSystemSnapshotDeletionPolicy() {}
    /**
     * @return Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    public String automaticBackupRetention() {
        return this.automaticBackupRetention;
    }
    /**
     * @return Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    public String finalBackup() {
        return this.finalBackup;
    }
    /**
     * @return Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    public Boolean isDeleteProtected() {
        return this.isDeleteProtected;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupDbSystemSnapshotDeletionPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String automaticBackupRetention;
        private String finalBackup;
        private Boolean isDeleteProtected;
        public Builder() {}
        public Builder(GetMysqlBackupDbSystemSnapshotDeletionPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticBackupRetention = defaults.automaticBackupRetention;
    	      this.finalBackup = defaults.finalBackup;
    	      this.isDeleteProtected = defaults.isDeleteProtected;
        }

        @CustomType.Setter
        public Builder automaticBackupRetention(String automaticBackupRetention) {
            if (automaticBackupRetention == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupDbSystemSnapshotDeletionPolicy", "automaticBackupRetention");
            }
            this.automaticBackupRetention = automaticBackupRetention;
            return this;
        }
        @CustomType.Setter
        public Builder finalBackup(String finalBackup) {
            if (finalBackup == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupDbSystemSnapshotDeletionPolicy", "finalBackup");
            }
            this.finalBackup = finalBackup;
            return this;
        }
        @CustomType.Setter
        public Builder isDeleteProtected(Boolean isDeleteProtected) {
            if (isDeleteProtected == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupDbSystemSnapshotDeletionPolicy", "isDeleteProtected");
            }
            this.isDeleteProtected = isDeleteProtected;
            return this;
        }
        public GetMysqlBackupDbSystemSnapshotDeletionPolicy build() {
            final var _resultValue = new GetMysqlBackupDbSystemSnapshotDeletionPolicy();
            _resultValue.automaticBackupRetention = automaticBackupRetention;
            _resultValue.finalBackup = finalBackup;
            _resultValue.isDeleteProtected = isDeleteProtected;
            return _resultValue;
        }
    }
}
