// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshot;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMysqlBackupResult {
    private String backupId;
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    private @Nullable Integer backupSizeInGbs;
    /**
     * @return The type of backup.
     * 
     */
    private @Nullable String backupType;
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    private @Nullable String creationType;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private @Nullable Integer dataStorageSizeInGb;
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return Snapshot of the DbSystem details at the time of the backup
     * 
     */
    private @Nullable List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    private @Nullable String description;
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return OCID of the backup itself
     * 
     */
    private @Nullable String id;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    private @Nullable String mysqlVersion;
    /**
     * @return Number of days to retain this backup.
     * 
     */
    private @Nullable Integer retentionInDays;
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    private @Nullable String shapeName;
    /**
     * @return The state of the backup.
     * 
     */
    private @Nullable String state;
    /**
     * @return The time the backup record was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time at which the backup was updated.
     * 
     */
    private @Nullable String timeUpdated;

    private GetMysqlBackupResult() {}
    public String backupId() {
        return this.backupId;
    }
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    public Optional<Integer> backupSizeInGbs() {
        return Optional.ofNullable(this.backupSizeInGbs);
    }
    /**
     * @return The type of backup.
     * 
     */
    public Optional<String> backupType() {
        return Optional.ofNullable(this.backupType);
    }
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    public Optional<String> creationType() {
        return Optional.ofNullable(this.creationType);
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Optional<Integer> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return Snapshot of the DbSystem details at the time of the backup
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots() {
        return this.dbSystemSnapshots == null ? List.of() : this.dbSystemSnapshots;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return OCID of the backup itself
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    /**
     * @return Number of days to retain this backup.
     * 
     */
    public Optional<Integer> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    /**
     * @return The state of the backup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The time the backup record was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time at which the backup was updated.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupId;
        private @Nullable Integer backupSizeInGbs;
        private @Nullable String backupType;
        private @Nullable String compartmentId;
        private @Nullable String creationType;
        private @Nullable Integer dataStorageSizeInGb;
        private @Nullable String dbSystemId;
        private @Nullable List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private @Nullable String mysqlVersion;
        private @Nullable Integer retentionInDays;
        private @Nullable String shapeName;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetMysqlBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupId = defaults.backupId;
    	      this.backupSizeInGbs = defaults.backupSizeInGbs;
    	      this.backupType = defaults.backupType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.creationType = defaults.creationType;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbSystemSnapshots = defaults.dbSystemSnapshots;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.retentionInDays = defaults.retentionInDays;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder backupId(String backupId) {
            this.backupId = Objects.requireNonNull(backupId);
            return this;
        }
        @CustomType.Setter
        public Builder backupSizeInGbs(@Nullable Integer backupSizeInGbs) {
            this.backupSizeInGbs = backupSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder backupType(@Nullable String backupType) {
            this.backupType = backupType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder creationType(@Nullable String creationType) {
            this.creationType = creationType;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(@Nullable Integer dataStorageSizeInGb) {
            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemSnapshots(@Nullable List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots) {
            this.dbSystemSnapshots = dbSystemSnapshots;
            return this;
        }
        public Builder dbSystemSnapshots(GetMysqlBackupDbSystemSnapshot... dbSystemSnapshots) {
            return dbSystemSnapshots(List.of(dbSystemSnapshots));
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlVersion(@Nullable String mysqlVersion) {
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder retentionInDays(@Nullable Integer retentionInDays) {
            this.retentionInDays = retentionInDays;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(@Nullable String shapeName) {
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMysqlBackupResult build() {
            final var o = new GetMysqlBackupResult();
            o.backupId = backupId;
            o.backupSizeInGbs = backupSizeInGbs;
            o.backupType = backupType;
            o.compartmentId = compartmentId;
            o.creationType = creationType;
            o.dataStorageSizeInGb = dataStorageSizeInGb;
            o.dbSystemId = dbSystemId;
            o.dbSystemSnapshots = dbSystemSnapshots;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.mysqlVersion = mysqlVersion;
            o.retentionInDays = retentionInDays;
            o.shapeName = shapeName;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
