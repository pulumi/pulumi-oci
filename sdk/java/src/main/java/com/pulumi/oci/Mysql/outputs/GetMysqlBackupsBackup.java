// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupsBackupDbSystemSnapshotSummary;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupsBackupEncryptData;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupsBackup {
    /**
     * @return Indicates whether the backup has been prepared successfully.  PREPARED: The backup is prepared one. NOT_PREPARED: The backup is not prepared.
     * 
     */
    private String backupPreparationStatus;
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    private Integer backupSizeInGbs;
    /**
     * @return The type of backup.
     * 
     */
    private String backupType;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return Backup creationType
     * 
     */
    private String creationType;
    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    private Integer dataStorageSizeInGb;
    /**
     * @return The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String dbSystemId;
    private List<GetMysqlBackupsBackupDbSystemSnapshotSummary> dbSystemSnapshotSummaries;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    private String description;
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Encrypt data details.
     * 
     */
    private List<GetMysqlBackupsBackupEncryptData> encryptDatas;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return OCID of the backup itself
     * 
     */
    private String id;
    /**
     * @return The OCID of the immediate source DB system backup from which this DB system backup was copied.
     * 
     */
    private String immediateSourceBackupId;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    private String mysqlVersion;
    /**
     * @return The OCID of the original source DB system backup from which this DB system backup was copied.
     * 
     */
    private String originalSourceBackupId;
    /**
     * @return Number of days to retain this backup.
     * 
     */
    private Integer retentionInDays;
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    private String shapeName;
    /**
     * @return Backup Soft Delete
     * 
     */
    private String softDelete;
    /**
     * @return Backup Lifecycle State
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeCopyCreated;
    /**
     * @return The time the backup record was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The status of backup validation:  NOT_VALIDATED (Default): The backup has not been validated.  VALIDATED: The backup has been validated successfully.  NEEDS_ATTENTION: The backup validation failed due to a transient issue. Validation should be retried.  FAILED: The backup cannot be restored.
     * 
     */
    private String validationStatus;

    private GetMysqlBackupsBackup() {}
    /**
     * @return Indicates whether the backup has been prepared successfully.  PREPARED: The backup is prepared one. NOT_PREPARED: The backup is not prepared.
     * 
     */
    public String backupPreparationStatus() {
        return this.backupPreparationStatus;
    }
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    public Integer backupSizeInGbs() {
        return this.backupSizeInGbs;
    }
    /**
     * @return The type of backup.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Backup creationType
     * 
     */
    public String creationType() {
        return this.creationType;
    }
    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    public List<GetMysqlBackupsBackupDbSystemSnapshotSummary> dbSystemSnapshotSummaries() {
        return this.dbSystemSnapshotSummaries;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Encrypt data details.
     * 
     */
    public List<GetMysqlBackupsBackupEncryptData> encryptDatas() {
        return this.encryptDatas;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID of the backup itself
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the immediate source DB system backup from which this DB system backup was copied.
     * 
     */
    public String immediateSourceBackupId() {
        return this.immediateSourceBackupId;
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * @return The OCID of the original source DB system backup from which this DB system backup was copied.
     * 
     */
    public String originalSourceBackupId() {
        return this.originalSourceBackupId;
    }
    /**
     * @return Number of days to retain this backup.
     * 
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return Backup Soft Delete
     * 
     */
    public String softDelete() {
        return this.softDelete;
    }
    /**
     * @return Backup Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeCopyCreated() {
        return this.timeCopyCreated;
    }
    /**
     * @return The time the backup record was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The status of backup validation:  NOT_VALIDATED (Default): The backup has not been validated.  VALIDATED: The backup has been validated successfully.  NEEDS_ATTENTION: The backup validation failed due to a transient issue. Validation should be retried.  FAILED: The backup cannot be restored.
     * 
     */
    public String validationStatus() {
        return this.validationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupsBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupPreparationStatus;
        private Integer backupSizeInGbs;
        private String backupType;
        private String compartmentId;
        private String creationType;
        private Integer dataStorageSizeInGb;
        private String dbSystemId;
        private List<GetMysqlBackupsBackupDbSystemSnapshotSummary> dbSystemSnapshotSummaries;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private List<GetMysqlBackupsBackupEncryptData> encryptDatas;
        private Map<String,String> freeformTags;
        private String id;
        private String immediateSourceBackupId;
        private String lifecycleDetails;
        private String mysqlVersion;
        private String originalSourceBackupId;
        private Integer retentionInDays;
        private String shapeName;
        private String softDelete;
        private String state;
        private Map<String,String> systemTags;
        private String timeCopyCreated;
        private String timeCreated;
        private String validationStatus;
        public Builder() {}
        public Builder(GetMysqlBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPreparationStatus = defaults.backupPreparationStatus;
    	      this.backupSizeInGbs = defaults.backupSizeInGbs;
    	      this.backupType = defaults.backupType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.creationType = defaults.creationType;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbSystemSnapshotSummaries = defaults.dbSystemSnapshotSummaries;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.encryptDatas = defaults.encryptDatas;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.immediateSourceBackupId = defaults.immediateSourceBackupId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.originalSourceBackupId = defaults.originalSourceBackupId;
    	      this.retentionInDays = defaults.retentionInDays;
    	      this.shapeName = defaults.shapeName;
    	      this.softDelete = defaults.softDelete;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCopyCreated = defaults.timeCopyCreated;
    	      this.timeCreated = defaults.timeCreated;
    	      this.validationStatus = defaults.validationStatus;
        }

        @CustomType.Setter
        public Builder backupPreparationStatus(String backupPreparationStatus) {
            if (backupPreparationStatus == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "backupPreparationStatus");
            }
            this.backupPreparationStatus = backupPreparationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder backupSizeInGbs(Integer backupSizeInGbs) {
            if (backupSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "backupSizeInGbs");
            }
            this.backupSizeInGbs = backupSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder backupType(String backupType) {
            if (backupType == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "backupType");
            }
            this.backupType = backupType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder creationType(String creationType) {
            if (creationType == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "creationType");
            }
            this.creationType = creationType;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            if (dataStorageSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "dataStorageSizeInGb");
            }
            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemSnapshotSummaries(List<GetMysqlBackupsBackupDbSystemSnapshotSummary> dbSystemSnapshotSummaries) {
            if (dbSystemSnapshotSummaries == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "dbSystemSnapshotSummaries");
            }
            this.dbSystemSnapshotSummaries = dbSystemSnapshotSummaries;
            return this;
        }
        public Builder dbSystemSnapshotSummaries(GetMysqlBackupsBackupDbSystemSnapshotSummary... dbSystemSnapshotSummaries) {
            return dbSystemSnapshotSummaries(List.of(dbSystemSnapshotSummaries));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder encryptDatas(List<GetMysqlBackupsBackupEncryptData> encryptDatas) {
            if (encryptDatas == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "encryptDatas");
            }
            this.encryptDatas = encryptDatas;
            return this;
        }
        public Builder encryptDatas(GetMysqlBackupsBackupEncryptData... encryptDatas) {
            return encryptDatas(List.of(encryptDatas));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder immediateSourceBackupId(String immediateSourceBackupId) {
            if (immediateSourceBackupId == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "immediateSourceBackupId");
            }
            this.immediateSourceBackupId = immediateSourceBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlVersion(String mysqlVersion) {
            if (mysqlVersion == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "mysqlVersion");
            }
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder originalSourceBackupId(String originalSourceBackupId) {
            if (originalSourceBackupId == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "originalSourceBackupId");
            }
            this.originalSourceBackupId = originalSourceBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder retentionInDays(Integer retentionInDays) {
            if (retentionInDays == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "retentionInDays");
            }
            this.retentionInDays = retentionInDays;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            if (shapeName == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "shapeName");
            }
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder softDelete(String softDelete) {
            if (softDelete == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "softDelete");
            }
            this.softDelete = softDelete;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCopyCreated(String timeCopyCreated) {
            if (timeCopyCreated == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "timeCopyCreated");
            }
            this.timeCopyCreated = timeCopyCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder validationStatus(String validationStatus) {
            if (validationStatus == null) {
              throw new MissingRequiredPropertyException("GetMysqlBackupsBackup", "validationStatus");
            }
            this.validationStatus = validationStatus;
            return this;
        }
        public GetMysqlBackupsBackup build() {
            final var _resultValue = new GetMysqlBackupsBackup();
            _resultValue.backupPreparationStatus = backupPreparationStatus;
            _resultValue.backupSizeInGbs = backupSizeInGbs;
            _resultValue.backupType = backupType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.creationType = creationType;
            _resultValue.dataStorageSizeInGb = dataStorageSizeInGb;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.dbSystemSnapshotSummaries = dbSystemSnapshotSummaries;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.encryptDatas = encryptDatas;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.immediateSourceBackupId = immediateSourceBackupId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.mysqlVersion = mysqlVersion;
            _resultValue.originalSourceBackupId = originalSourceBackupId;
            _resultValue.retentionInDays = retentionInDays;
            _resultValue.shapeName = shapeName;
            _resultValue.softDelete = softDelete;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCopyCreated = timeCopyCreated;
            _resultValue.timeCreated = timeCreated;
            _resultValue.validationStatus = validationStatus;
            return _resultValue;
        }
    }
}
