// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupsBackup;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMysqlBackupsResult {
    private @Nullable String backupId;
    /**
     * @return The list of backups.
     * 
     */
    private @Nullable List<GetMysqlBackupsBackup> backups;
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    private String compartmentId;
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    private @Nullable String creationType;
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetMysqlBackupsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The state of the backup.
     * 
     */
    private @Nullable String state;

    private GetMysqlBackupsResult() {}
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    /**
     * @return The list of backups.
     * 
     */
    public List<GetMysqlBackupsBackup> backups() {
        return this.backups == null ? List.of() : this.backups;
    }
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    public Optional<String> creationType() {
        return Optional.ofNullable(this.creationType);
    }
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetMysqlBackupsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The state of the backup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backupId;
        private @Nullable List<GetMysqlBackupsBackup> backups;
        private String compartmentId;
        private @Nullable String creationType;
        private @Nullable String dbSystemId;
        private @Nullable String displayName;
        private @Nullable List<GetMysqlBackupsFilter> filters;
        private @Nullable String id;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetMysqlBackupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupId = defaults.backupId;
    	      this.backups = defaults.backups;
    	      this.compartmentId = defaults.compartmentId;
    	      this.creationType = defaults.creationType;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder backupId(@Nullable String backupId) {
            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder backups(@Nullable List<GetMysqlBackupsBackup> backups) {
            this.backups = backups;
            return this;
        }
        public Builder backups(GetMysqlBackupsBackup... backups) {
            return backups(List.of(backups));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder creationType(@Nullable String creationType) {
            this.creationType = creationType;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetMysqlBackupsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetMysqlBackupsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetMysqlBackupsResult build() {
            final var o = new GetMysqlBackupsResult();
            o.backupId = backupId;
            o.backups = backups;
            o.compartmentId = compartmentId;
            o.creationType = creationType;
            o.dbSystemId = dbSystemId;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.state = state;
            return o;
        }
    }
}
