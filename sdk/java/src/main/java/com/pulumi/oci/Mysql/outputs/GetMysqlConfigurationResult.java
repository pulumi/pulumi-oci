// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetMysqlConfigurationInitVariable;
import com.pulumi.oci.Mysql.outputs.GetMysqlConfigurationVariable;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlConfigurationResult {
    /**
     * @return OCID of the Compartment the Configuration exists in.
     * 
     */
    private String compartmentId;
    private String configurationId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return User-provided data about the Configuration.
     * 
     */
    private String description;
    /**
     * @return The display name of the Configuration.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the Configuration.
     * 
     */
    private String id;
    /**
     * @return User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    private List<GetMysqlConfigurationInitVariable> initVariables;
    /**
     * @return The OCID of the Configuration from which this Configuration is &#34;derived&#34;. This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
     * 
     */
    private String parentConfigurationId;
    /**
     * @return The name of the associated Shape.
     * 
     */
    private String shapeName;
    /**
     * @return The current state of the Configuration.
     * 
     */
    private String state;
    /**
     * @return The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    private String type;
    /**
     * @return User-defined service variables.
     * 
     */
    private List<GetMysqlConfigurationVariable> variables;

    private GetMysqlConfigurationResult() {}
    /**
     * @return OCID of the Compartment the Configuration exists in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return User-provided data about the Configuration.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the Configuration.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the Configuration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     * 
     */
    public List<GetMysqlConfigurationInitVariable> initVariables() {
        return this.initVariables;
    }
    /**
     * @return The OCID of the Configuration from which this Configuration is &#34;derived&#34;. This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
     * 
     */
    public String parentConfigurationId() {
        return this.parentConfigurationId;
    }
    /**
     * @return The name of the associated Shape.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return The current state of the Configuration.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return User-defined service variables.
     * 
     */
    public List<GetMysqlConfigurationVariable> variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String configurationId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetMysqlConfigurationInitVariable> initVariables;
        private String parentConfigurationId;
        private String shapeName;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private List<GetMysqlConfigurationVariable> variables;
        public Builder() {}
        public Builder(GetMysqlConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.initVariables = defaults.initVariables;
    	      this.parentConfigurationId = defaults.parentConfigurationId;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(String configurationId) {
            if (configurationId == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "configurationId");
            }
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initVariables(List<GetMysqlConfigurationInitVariable> initVariables) {
            if (initVariables == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "initVariables");
            }
            this.initVariables = initVariables;
            return this;
        }
        public Builder initVariables(GetMysqlConfigurationInitVariable... initVariables) {
            return initVariables(List.of(initVariables));
        }
        @CustomType.Setter
        public Builder parentConfigurationId(String parentConfigurationId) {
            if (parentConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "parentConfigurationId");
            }
            this.parentConfigurationId = parentConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            if (shapeName == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "shapeName");
            }
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder variables(List<GetMysqlConfigurationVariable> variables) {
            if (variables == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationResult", "variables");
            }
            this.variables = variables;
            return this;
        }
        public Builder variables(GetMysqlConfigurationVariable... variables) {
            return variables(List.of(variables));
        }
        public GetMysqlConfigurationResult build() {
            final var _resultValue = new GetMysqlConfigurationResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.configurationId = configurationId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.initVariables = initVariables;
            _resultValue.parentConfigurationId = parentConfigurationId;
            _resultValue.shapeName = shapeName;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
