// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlConfigurationVariable {
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    private Boolean autocommit;
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     */
    private Boolean bigTables;
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    private Integer binlogExpireLogsSeconds;
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    private String binlogRowMetadata;
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    private String binlogRowValueOptions;
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    private Boolean binlogTransactionCompression;
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    private String completionType;
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    private Integer connectTimeout;
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     */
    private Integer connectionMemoryChunkSize;
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     */
    private String connectionMemoryLimit;
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    private String cteMaxRecursionDepth;
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    private String defaultAuthenticationPlugin;
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    private Boolean foreignKeyChecks;
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer generatedRandomPasswordLength;
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     */
    private String globalConnectionMemoryLimit;
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     */
    private Boolean globalConnectionMemoryTracking;
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    private String groupReplicationConsistency;
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    private Integer informationSchemaStatsExpiry;
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     */
    private Integer innodbBufferPoolDumpPct;
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    private Integer innodbBufferPoolInstances;
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     */
    private String innodbBufferPoolSize;
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    private String innodbDdlBufferSize;
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    private Integer innodbDdlThreads;
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    private Boolean innodbFtEnableStopword;
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    private Integer innodbFtMaxTokenSize;
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    private Integer innodbFtMinTokenSize;
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    private Integer innodbFtNumWordOptimize;
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    private String innodbFtResultCacheLimit;
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    private String innodbFtServerStopwordTable;
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    private Integer innodbLockWaitTimeout;
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     */
    private Boolean innodbLogWriterThreads;
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     */
    private String innodbMaxPurgeLag;
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     */
    private Integer innodbMaxPurgeLagDelay;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     */
    private String innodbStatsPersistentSamplePages;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     */
    private String innodbStatsTransientSamplePages;
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    private Integer interactiveTimeout;
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    private Boolean localInfile;
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    private String mandatoryRoles;
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     */
    private Integer maxAllowedPacket;
    /**
     * @return Sets the size of the transaction cache.
     * 
     */
    private String maxBinlogCacheSize;
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    private String maxConnectErrors;
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    private Integer maxConnections;
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    private String maxExecutionTime;
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     */
    private String maxHeapTableSize;
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    private Integer maxPreparedStmtCount;
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    private Boolean mysqlFirewallMode;
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlZstdDefaultCompressionLevel;
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     */
    private Integer mysqlxConnectTimeout;
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxDeflateDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxDeflateMaxClientCompressionLevel;
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxDocumentIdUniquePrefix;
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private Boolean mysqlxEnableHelloNotice;
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxIdleWorkerThreadTimeout;
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     */
    private Integer mysqlxInteractiveTimeout;
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxLz4defaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxLz4maxClientCompressionLevel;
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     */
    private Integer mysqlxMaxAllowedPacket;
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxMinWorkerThreads;
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     */
    private Integer mysqlxReadTimeout;
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     */
    private Integer mysqlxWaitTimeout;
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     */
    private Integer mysqlxWriteTimeout;
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxZstdDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxZstdMaxClientCompressionLevel;
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    private Integer netReadTimeout;
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    private Integer netWriteTimeout;
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    private String parserMaxMemSize;
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String queryAllocBlockSize;
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String queryPreallocSize;
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    private Integer regexpTimeLimit;
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     */
    private String sortBufferSize;
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    private String sqlMode;
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    private Boolean sqlRequirePrimaryKey;
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    private Boolean sqlWarnings;
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    private Boolean threadPoolDedicatedListeners;
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    private Integer threadPoolMaxTransactionsLimit;
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     */
    private String timeZone;
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     */
    private String tmpTableSize;
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    private String transactionIsolation;
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    private Integer waitTimeout;

    private GetMysqlConfigurationVariable() {}
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Boolean autocommit() {
        return this.autocommit;
    }
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     */
    public Boolean bigTables() {
        return this.bigTables;
    }
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Integer binlogExpireLogsSeconds() {
        return this.binlogExpireLogsSeconds;
    }
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public String binlogRowMetadata() {
        return this.binlogRowMetadata;
    }
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public String binlogRowValueOptions() {
        return this.binlogRowValueOptions;
    }
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Boolean binlogTransactionCompression() {
        return this.binlogTransactionCompression;
    }
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public String completionType() {
        return this.completionType;
    }
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    public Integer connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     */
    public Integer connectionMemoryChunkSize() {
        return this.connectionMemoryChunkSize;
    }
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     */
    public String connectionMemoryLimit() {
        return this.connectionMemoryLimit;
    }
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public String cteMaxRecursionDepth() {
        return this.cteMaxRecursionDepth;
    }
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    public String defaultAuthenticationPlugin() {
        return this.defaultAuthenticationPlugin;
    }
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Boolean foreignKeyChecks() {
        return this.foreignKeyChecks;
    }
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer generatedRandomPasswordLength() {
        return this.generatedRandomPasswordLength;
    }
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     */
    public String globalConnectionMemoryLimit() {
        return this.globalConnectionMemoryLimit;
    }
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     */
    public Boolean globalConnectionMemoryTracking() {
        return this.globalConnectionMemoryTracking;
    }
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public String groupReplicationConsistency() {
        return this.groupReplicationConsistency;
    }
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Integer informationSchemaStatsExpiry() {
        return this.informationSchemaStatsExpiry;
    }
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     */
    public Integer innodbBufferPoolDumpPct() {
        return this.innodbBufferPoolDumpPct;
    }
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Integer innodbBufferPoolInstances() {
        return this.innodbBufferPoolInstances;
    }
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     */
    public String innodbBufferPoolSize() {
        return this.innodbBufferPoolSize;
    }
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    public String innodbDdlBufferSize() {
        return this.innodbDdlBufferSize;
    }
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    public Integer innodbDdlThreads() {
        return this.innodbDdlThreads;
    }
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Boolean innodbFtEnableStopword() {
        return this.innodbFtEnableStopword;
    }
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Integer innodbFtMaxTokenSize() {
        return this.innodbFtMaxTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Integer innodbFtMinTokenSize() {
        return this.innodbFtMinTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Integer innodbFtNumWordOptimize() {
        return this.innodbFtNumWordOptimize;
    }
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public String innodbFtResultCacheLimit() {
        return this.innodbFtResultCacheLimit;
    }
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public String innodbFtServerStopwordTable() {
        return this.innodbFtServerStopwordTable;
    }
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Integer innodbLockWaitTimeout() {
        return this.innodbLockWaitTimeout;
    }
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     */
    public Boolean innodbLogWriterThreads() {
        return this.innodbLogWriterThreads;
    }
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     */
    public String innodbMaxPurgeLag() {
        return this.innodbMaxPurgeLag;
    }
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     */
    public Integer innodbMaxPurgeLagDelay() {
        return this.innodbMaxPurgeLagDelay;
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     */
    public String innodbStatsPersistentSamplePages() {
        return this.innodbStatsPersistentSamplePages;
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     */
    public String innodbStatsTransientSamplePages() {
        return this.innodbStatsTransientSamplePages;
    }
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    public Integer interactiveTimeout() {
        return this.interactiveTimeout;
    }
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    public Boolean localInfile() {
        return this.localInfile;
    }
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public String mandatoryRoles() {
        return this.mandatoryRoles;
    }
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     */
    public Integer maxAllowedPacket() {
        return this.maxAllowedPacket;
    }
    /**
     * @return Sets the size of the transaction cache.
     * 
     */
    public String maxBinlogCacheSize() {
        return this.maxBinlogCacheSize;
    }
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    public String maxConnectErrors() {
        return this.maxConnectErrors;
    }
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public String maxExecutionTime() {
        return this.maxExecutionTime;
    }
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     */
    public String maxHeapTableSize() {
        return this.maxHeapTableSize;
    }
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Integer maxPreparedStmtCount() {
        return this.maxPreparedStmtCount;
    }
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Boolean mysqlFirewallMode() {
        return this.mysqlFirewallMode;
    }
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlZstdDefaultCompressionLevel() {
        return this.mysqlZstdDefaultCompressionLevel;
    }
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     */
    public Integer mysqlxConnectTimeout() {
        return this.mysqlxConnectTimeout;
    }
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateDefaultCompressionLevel() {
        return this.mysqlxDeflateDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateMaxClientCompressionLevel() {
        return this.mysqlxDeflateMaxClientCompressionLevel;
    }
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxDocumentIdUniquePrefix() {
        return this.mysqlxDocumentIdUniquePrefix;
    }
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Boolean mysqlxEnableHelloNotice() {
        return this.mysqlxEnableHelloNotice;
    }
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxIdleWorkerThreadTimeout() {
        return this.mysqlxIdleWorkerThreadTimeout;
    }
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     */
    public Integer mysqlxInteractiveTimeout() {
        return this.mysqlxInteractiveTimeout;
    }
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4defaultCompressionLevel() {
        return this.mysqlxLz4defaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4maxClientCompressionLevel() {
        return this.mysqlxLz4maxClientCompressionLevel;
    }
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     */
    public Integer mysqlxMaxAllowedPacket() {
        return this.mysqlxMaxAllowedPacket;
    }
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxMinWorkerThreads() {
        return this.mysqlxMinWorkerThreads;
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     */
    public Integer mysqlxReadTimeout() {
        return this.mysqlxReadTimeout;
    }
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     */
    public Integer mysqlxWaitTimeout() {
        return this.mysqlxWaitTimeout;
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     */
    public Integer mysqlxWriteTimeout() {
        return this.mysqlxWriteTimeout;
    }
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdDefaultCompressionLevel() {
        return this.mysqlxZstdDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdMaxClientCompressionLevel() {
        return this.mysqlxZstdMaxClientCompressionLevel;
    }
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    public Integer netReadTimeout() {
        return this.netReadTimeout;
    }
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Integer netWriteTimeout() {
        return this.netWriteTimeout;
    }
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public String parserMaxMemSize() {
        return this.parserMaxMemSize;
    }
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String queryAllocBlockSize() {
        return this.queryAllocBlockSize;
    }
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String queryPreallocSize() {
        return this.queryPreallocSize;
    }
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    public Integer regexpTimeLimit() {
        return this.regexpTimeLimit;
    }
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     */
    public String sortBufferSize() {
        return this.sortBufferSize;
    }
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public String sqlMode() {
        return this.sqlMode;
    }
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Boolean sqlRequirePrimaryKey() {
        return this.sqlRequirePrimaryKey;
    }
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Boolean sqlWarnings() {
        return this.sqlWarnings;
    }
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    public Boolean threadPoolDedicatedListeners() {
        return this.threadPoolDedicatedListeners;
    }
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    public Integer threadPoolMaxTransactionsLimit() {
        return this.threadPoolMaxTransactionsLimit;
    }
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     */
    public String tmpTableSize() {
        return this.tmpTableSize;
    }
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public String transactionIsolation() {
        return this.transactionIsolation;
    }
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Integer waitTimeout() {
        return this.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlConfigurationVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autocommit;
        private Boolean bigTables;
        private Integer binlogExpireLogsSeconds;
        private String binlogRowMetadata;
        private String binlogRowValueOptions;
        private Boolean binlogTransactionCompression;
        private String completionType;
        private Integer connectTimeout;
        private Integer connectionMemoryChunkSize;
        private String connectionMemoryLimit;
        private String cteMaxRecursionDepth;
        private String defaultAuthenticationPlugin;
        private Boolean foreignKeyChecks;
        private Integer generatedRandomPasswordLength;
        private String globalConnectionMemoryLimit;
        private Boolean globalConnectionMemoryTracking;
        private String groupReplicationConsistency;
        private Integer informationSchemaStatsExpiry;
        private Integer innodbBufferPoolDumpPct;
        private Integer innodbBufferPoolInstances;
        private String innodbBufferPoolSize;
        private String innodbDdlBufferSize;
        private Integer innodbDdlThreads;
        private Boolean innodbFtEnableStopword;
        private Integer innodbFtMaxTokenSize;
        private Integer innodbFtMinTokenSize;
        private Integer innodbFtNumWordOptimize;
        private String innodbFtResultCacheLimit;
        private String innodbFtServerStopwordTable;
        private Integer innodbLockWaitTimeout;
        private Boolean innodbLogWriterThreads;
        private String innodbMaxPurgeLag;
        private Integer innodbMaxPurgeLagDelay;
        private String innodbStatsPersistentSamplePages;
        private String innodbStatsTransientSamplePages;
        private Integer interactiveTimeout;
        private Boolean localInfile;
        private String mandatoryRoles;
        private Integer maxAllowedPacket;
        private String maxBinlogCacheSize;
        private String maxConnectErrors;
        private Integer maxConnections;
        private String maxExecutionTime;
        private String maxHeapTableSize;
        private Integer maxPreparedStmtCount;
        private Boolean mysqlFirewallMode;
        private Integer mysqlZstdDefaultCompressionLevel;
        private Integer mysqlxConnectTimeout;
        private Integer mysqlxDeflateDefaultCompressionLevel;
        private Integer mysqlxDeflateMaxClientCompressionLevel;
        private Integer mysqlxDocumentIdUniquePrefix;
        private Boolean mysqlxEnableHelloNotice;
        private Integer mysqlxIdleWorkerThreadTimeout;
        private Integer mysqlxInteractiveTimeout;
        private Integer mysqlxLz4defaultCompressionLevel;
        private Integer mysqlxLz4maxClientCompressionLevel;
        private Integer mysqlxMaxAllowedPacket;
        private Integer mysqlxMinWorkerThreads;
        private Integer mysqlxReadTimeout;
        private Integer mysqlxWaitTimeout;
        private Integer mysqlxWriteTimeout;
        private Integer mysqlxZstdDefaultCompressionLevel;
        private Integer mysqlxZstdMaxClientCompressionLevel;
        private Integer netReadTimeout;
        private Integer netWriteTimeout;
        private String parserMaxMemSize;
        private String queryAllocBlockSize;
        private String queryPreallocSize;
        private Integer regexpTimeLimit;
        private String sortBufferSize;
        private String sqlMode;
        private Boolean sqlRequirePrimaryKey;
        private Boolean sqlWarnings;
        private Boolean threadPoolDedicatedListeners;
        private Integer threadPoolMaxTransactionsLimit;
        private String timeZone;
        private String tmpTableSize;
        private String transactionIsolation;
        private Integer waitTimeout;
        public Builder() {}
        public Builder(GetMysqlConfigurationVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autocommit = defaults.autocommit;
    	      this.bigTables = defaults.bigTables;
    	      this.binlogExpireLogsSeconds = defaults.binlogExpireLogsSeconds;
    	      this.binlogRowMetadata = defaults.binlogRowMetadata;
    	      this.binlogRowValueOptions = defaults.binlogRowValueOptions;
    	      this.binlogTransactionCompression = defaults.binlogTransactionCompression;
    	      this.completionType = defaults.completionType;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.connectionMemoryChunkSize = defaults.connectionMemoryChunkSize;
    	      this.connectionMemoryLimit = defaults.connectionMemoryLimit;
    	      this.cteMaxRecursionDepth = defaults.cteMaxRecursionDepth;
    	      this.defaultAuthenticationPlugin = defaults.defaultAuthenticationPlugin;
    	      this.foreignKeyChecks = defaults.foreignKeyChecks;
    	      this.generatedRandomPasswordLength = defaults.generatedRandomPasswordLength;
    	      this.globalConnectionMemoryLimit = defaults.globalConnectionMemoryLimit;
    	      this.globalConnectionMemoryTracking = defaults.globalConnectionMemoryTracking;
    	      this.groupReplicationConsistency = defaults.groupReplicationConsistency;
    	      this.informationSchemaStatsExpiry = defaults.informationSchemaStatsExpiry;
    	      this.innodbBufferPoolDumpPct = defaults.innodbBufferPoolDumpPct;
    	      this.innodbBufferPoolInstances = defaults.innodbBufferPoolInstances;
    	      this.innodbBufferPoolSize = defaults.innodbBufferPoolSize;
    	      this.innodbDdlBufferSize = defaults.innodbDdlBufferSize;
    	      this.innodbDdlThreads = defaults.innodbDdlThreads;
    	      this.innodbFtEnableStopword = defaults.innodbFtEnableStopword;
    	      this.innodbFtMaxTokenSize = defaults.innodbFtMaxTokenSize;
    	      this.innodbFtMinTokenSize = defaults.innodbFtMinTokenSize;
    	      this.innodbFtNumWordOptimize = defaults.innodbFtNumWordOptimize;
    	      this.innodbFtResultCacheLimit = defaults.innodbFtResultCacheLimit;
    	      this.innodbFtServerStopwordTable = defaults.innodbFtServerStopwordTable;
    	      this.innodbLockWaitTimeout = defaults.innodbLockWaitTimeout;
    	      this.innodbLogWriterThreads = defaults.innodbLogWriterThreads;
    	      this.innodbMaxPurgeLag = defaults.innodbMaxPurgeLag;
    	      this.innodbMaxPurgeLagDelay = defaults.innodbMaxPurgeLagDelay;
    	      this.innodbStatsPersistentSamplePages = defaults.innodbStatsPersistentSamplePages;
    	      this.innodbStatsTransientSamplePages = defaults.innodbStatsTransientSamplePages;
    	      this.interactiveTimeout = defaults.interactiveTimeout;
    	      this.localInfile = defaults.localInfile;
    	      this.mandatoryRoles = defaults.mandatoryRoles;
    	      this.maxAllowedPacket = defaults.maxAllowedPacket;
    	      this.maxBinlogCacheSize = defaults.maxBinlogCacheSize;
    	      this.maxConnectErrors = defaults.maxConnectErrors;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxExecutionTime = defaults.maxExecutionTime;
    	      this.maxHeapTableSize = defaults.maxHeapTableSize;
    	      this.maxPreparedStmtCount = defaults.maxPreparedStmtCount;
    	      this.mysqlFirewallMode = defaults.mysqlFirewallMode;
    	      this.mysqlZstdDefaultCompressionLevel = defaults.mysqlZstdDefaultCompressionLevel;
    	      this.mysqlxConnectTimeout = defaults.mysqlxConnectTimeout;
    	      this.mysqlxDeflateDefaultCompressionLevel = defaults.mysqlxDeflateDefaultCompressionLevel;
    	      this.mysqlxDeflateMaxClientCompressionLevel = defaults.mysqlxDeflateMaxClientCompressionLevel;
    	      this.mysqlxDocumentIdUniquePrefix = defaults.mysqlxDocumentIdUniquePrefix;
    	      this.mysqlxEnableHelloNotice = defaults.mysqlxEnableHelloNotice;
    	      this.mysqlxIdleWorkerThreadTimeout = defaults.mysqlxIdleWorkerThreadTimeout;
    	      this.mysqlxInteractiveTimeout = defaults.mysqlxInteractiveTimeout;
    	      this.mysqlxLz4defaultCompressionLevel = defaults.mysqlxLz4defaultCompressionLevel;
    	      this.mysqlxLz4maxClientCompressionLevel = defaults.mysqlxLz4maxClientCompressionLevel;
    	      this.mysqlxMaxAllowedPacket = defaults.mysqlxMaxAllowedPacket;
    	      this.mysqlxMinWorkerThreads = defaults.mysqlxMinWorkerThreads;
    	      this.mysqlxReadTimeout = defaults.mysqlxReadTimeout;
    	      this.mysqlxWaitTimeout = defaults.mysqlxWaitTimeout;
    	      this.mysqlxWriteTimeout = defaults.mysqlxWriteTimeout;
    	      this.mysqlxZstdDefaultCompressionLevel = defaults.mysqlxZstdDefaultCompressionLevel;
    	      this.mysqlxZstdMaxClientCompressionLevel = defaults.mysqlxZstdMaxClientCompressionLevel;
    	      this.netReadTimeout = defaults.netReadTimeout;
    	      this.netWriteTimeout = defaults.netWriteTimeout;
    	      this.parserMaxMemSize = defaults.parserMaxMemSize;
    	      this.queryAllocBlockSize = defaults.queryAllocBlockSize;
    	      this.queryPreallocSize = defaults.queryPreallocSize;
    	      this.regexpTimeLimit = defaults.regexpTimeLimit;
    	      this.sortBufferSize = defaults.sortBufferSize;
    	      this.sqlMode = defaults.sqlMode;
    	      this.sqlRequirePrimaryKey = defaults.sqlRequirePrimaryKey;
    	      this.sqlWarnings = defaults.sqlWarnings;
    	      this.threadPoolDedicatedListeners = defaults.threadPoolDedicatedListeners;
    	      this.threadPoolMaxTransactionsLimit = defaults.threadPoolMaxTransactionsLimit;
    	      this.timeZone = defaults.timeZone;
    	      this.tmpTableSize = defaults.tmpTableSize;
    	      this.transactionIsolation = defaults.transactionIsolation;
    	      this.waitTimeout = defaults.waitTimeout;
        }

        @CustomType.Setter
        public Builder autocommit(Boolean autocommit) {
            if (autocommit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "autocommit");
            }
            this.autocommit = autocommit;
            return this;
        }
        @CustomType.Setter
        public Builder bigTables(Boolean bigTables) {
            if (bigTables == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "bigTables");
            }
            this.bigTables = bigTables;
            return this;
        }
        @CustomType.Setter
        public Builder binlogExpireLogsSeconds(Integer binlogExpireLogsSeconds) {
            if (binlogExpireLogsSeconds == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "binlogExpireLogsSeconds");
            }
            this.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowMetadata(String binlogRowMetadata) {
            if (binlogRowMetadata == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "binlogRowMetadata");
            }
            this.binlogRowMetadata = binlogRowMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowValueOptions(String binlogRowValueOptions) {
            if (binlogRowValueOptions == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "binlogRowValueOptions");
            }
            this.binlogRowValueOptions = binlogRowValueOptions;
            return this;
        }
        @CustomType.Setter
        public Builder binlogTransactionCompression(Boolean binlogTransactionCompression) {
            if (binlogTransactionCompression == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "binlogTransactionCompression");
            }
            this.binlogTransactionCompression = binlogTransactionCompression;
            return this;
        }
        @CustomType.Setter
        public Builder completionType(String completionType) {
            if (completionType == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "completionType");
            }
            this.completionType = completionType;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(Integer connectTimeout) {
            if (connectTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "connectTimeout");
            }
            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryChunkSize(Integer connectionMemoryChunkSize) {
            if (connectionMemoryChunkSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "connectionMemoryChunkSize");
            }
            this.connectionMemoryChunkSize = connectionMemoryChunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryLimit(String connectionMemoryLimit) {
            if (connectionMemoryLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "connectionMemoryLimit");
            }
            this.connectionMemoryLimit = connectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder cteMaxRecursionDepth(String cteMaxRecursionDepth) {
            if (cteMaxRecursionDepth == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "cteMaxRecursionDepth");
            }
            this.cteMaxRecursionDepth = cteMaxRecursionDepth;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAuthenticationPlugin(String defaultAuthenticationPlugin) {
            if (defaultAuthenticationPlugin == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "defaultAuthenticationPlugin");
            }
            this.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder foreignKeyChecks(Boolean foreignKeyChecks) {
            if (foreignKeyChecks == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "foreignKeyChecks");
            }
            this.foreignKeyChecks = foreignKeyChecks;
            return this;
        }
        @CustomType.Setter
        public Builder generatedRandomPasswordLength(Integer generatedRandomPasswordLength) {
            if (generatedRandomPasswordLength == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "generatedRandomPasswordLength");
            }
            this.generatedRandomPasswordLength = generatedRandomPasswordLength;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryLimit(String globalConnectionMemoryLimit) {
            if (globalConnectionMemoryLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "globalConnectionMemoryLimit");
            }
            this.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryTracking(Boolean globalConnectionMemoryTracking) {
            if (globalConnectionMemoryTracking == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "globalConnectionMemoryTracking");
            }
            this.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            return this;
        }
        @CustomType.Setter
        public Builder groupReplicationConsistency(String groupReplicationConsistency) {
            if (groupReplicationConsistency == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "groupReplicationConsistency");
            }
            this.groupReplicationConsistency = groupReplicationConsistency;
            return this;
        }
        @CustomType.Setter
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            if (informationSchemaStatsExpiry == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "informationSchemaStatsExpiry");
            }
            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolDumpPct(Integer innodbBufferPoolDumpPct) {
            if (innodbBufferPoolDumpPct == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbBufferPoolDumpPct");
            }
            this.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolInstances(Integer innodbBufferPoolInstances) {
            if (innodbBufferPoolInstances == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbBufferPoolInstances");
            }
            this.innodbBufferPoolInstances = innodbBufferPoolInstances;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolSize(String innodbBufferPoolSize) {
            if (innodbBufferPoolSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbBufferPoolSize");
            }
            this.innodbBufferPoolSize = innodbBufferPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlBufferSize(String innodbDdlBufferSize) {
            if (innodbDdlBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbDdlBufferSize");
            }
            this.innodbDdlBufferSize = innodbDdlBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlThreads(Integer innodbDdlThreads) {
            if (innodbDdlThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbDdlThreads");
            }
            this.innodbDdlThreads = innodbDdlThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtEnableStopword(Boolean innodbFtEnableStopword) {
            if (innodbFtEnableStopword == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtEnableStopword");
            }
            this.innodbFtEnableStopword = innodbFtEnableStopword;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMaxTokenSize(Integer innodbFtMaxTokenSize) {
            if (innodbFtMaxTokenSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtMaxTokenSize");
            }
            this.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            if (innodbFtMinTokenSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtMinTokenSize");
            }
            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtNumWordOptimize(Integer innodbFtNumWordOptimize) {
            if (innodbFtNumWordOptimize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtNumWordOptimize");
            }
            this.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtResultCacheLimit(String innodbFtResultCacheLimit) {
            if (innodbFtResultCacheLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtResultCacheLimit");
            }
            this.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            if (innodbFtServerStopwordTable == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbFtServerStopwordTable");
            }
            this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            if (innodbLockWaitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbLockWaitTimeout");
            }
            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLogWriterThreads(Boolean innodbLogWriterThreads) {
            if (innodbLogWriterThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbLogWriterThreads");
            }
            this.innodbLogWriterThreads = innodbLogWriterThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLag(String innodbMaxPurgeLag) {
            if (innodbMaxPurgeLag == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbMaxPurgeLag");
            }
            this.innodbMaxPurgeLag = innodbMaxPurgeLag;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLagDelay(Integer innodbMaxPurgeLagDelay) {
            if (innodbMaxPurgeLagDelay == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbMaxPurgeLagDelay");
            }
            this.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsPersistentSamplePages(String innodbStatsPersistentSamplePages) {
            if (innodbStatsPersistentSamplePages == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbStatsPersistentSamplePages");
            }
            this.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsTransientSamplePages(String innodbStatsTransientSamplePages) {
            if (innodbStatsTransientSamplePages == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "innodbStatsTransientSamplePages");
            }
            this.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            if (interactiveTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "interactiveTimeout");
            }
            this.interactiveTimeout = interactiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder localInfile(Boolean localInfile) {
            if (localInfile == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "localInfile");
            }
            this.localInfile = localInfile;
            return this;
        }
        @CustomType.Setter
        public Builder mandatoryRoles(String mandatoryRoles) {
            if (mandatoryRoles == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mandatoryRoles");
            }
            this.mandatoryRoles = mandatoryRoles;
            return this;
        }
        @CustomType.Setter
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            if (maxAllowedPacket == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxAllowedPacket");
            }
            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder maxBinlogCacheSize(String maxBinlogCacheSize) {
            if (maxBinlogCacheSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxBinlogCacheSize");
            }
            this.maxBinlogCacheSize = maxBinlogCacheSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectErrors(String maxConnectErrors) {
            if (maxConnectErrors == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxConnectErrors");
            }
            this.maxConnectErrors = maxConnectErrors;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxExecutionTime(String maxExecutionTime) {
            if (maxExecutionTime == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxExecutionTime");
            }
            this.maxExecutionTime = maxExecutionTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxHeapTableSize(String maxHeapTableSize) {
            if (maxHeapTableSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxHeapTableSize");
            }
            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxPreparedStmtCount(Integer maxPreparedStmtCount) {
            if (maxPreparedStmtCount == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "maxPreparedStmtCount");
            }
            this.maxPreparedStmtCount = maxPreparedStmtCount;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlFirewallMode(Boolean mysqlFirewallMode) {
            if (mysqlFirewallMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlFirewallMode");
            }
            this.mysqlFirewallMode = mysqlFirewallMode;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlZstdDefaultCompressionLevel(Integer mysqlZstdDefaultCompressionLevel) {
            if (mysqlZstdDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlZstdDefaultCompressionLevel");
            }
            this.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxConnectTimeout(Integer mysqlxConnectTimeout) {
            if (mysqlxConnectTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxConnectTimeout");
            }
            this.mysqlxConnectTimeout = mysqlxConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateDefaultCompressionLevel(Integer mysqlxDeflateDefaultCompressionLevel) {
            if (mysqlxDeflateDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxDeflateDefaultCompressionLevel");
            }
            this.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateMaxClientCompressionLevel(Integer mysqlxDeflateMaxClientCompressionLevel) {
            if (mysqlxDeflateMaxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxDeflateMaxClientCompressionLevel");
            }
            this.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDocumentIdUniquePrefix(Integer mysqlxDocumentIdUniquePrefix) {
            if (mysqlxDocumentIdUniquePrefix == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxDocumentIdUniquePrefix");
            }
            this.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxEnableHelloNotice(Boolean mysqlxEnableHelloNotice) {
            if (mysqlxEnableHelloNotice == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxEnableHelloNotice");
            }
            this.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxIdleWorkerThreadTimeout(Integer mysqlxIdleWorkerThreadTimeout) {
            if (mysqlxIdleWorkerThreadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxIdleWorkerThreadTimeout");
            }
            this.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxInteractiveTimeout(Integer mysqlxInteractiveTimeout) {
            if (mysqlxInteractiveTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxInteractiveTimeout");
            }
            this.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4defaultCompressionLevel(Integer mysqlxLz4defaultCompressionLevel) {
            if (mysqlxLz4defaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxLz4defaultCompressionLevel");
            }
            this.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4maxClientCompressionLevel(Integer mysqlxLz4maxClientCompressionLevel) {
            if (mysqlxLz4maxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxLz4maxClientCompressionLevel");
            }
            this.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMaxAllowedPacket(Integer mysqlxMaxAllowedPacket) {
            if (mysqlxMaxAllowedPacket == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxMaxAllowedPacket");
            }
            this.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMinWorkerThreads(Integer mysqlxMinWorkerThreads) {
            if (mysqlxMinWorkerThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxMinWorkerThreads");
            }
            this.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxReadTimeout(Integer mysqlxReadTimeout) {
            if (mysqlxReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxReadTimeout");
            }
            this.mysqlxReadTimeout = mysqlxReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWaitTimeout(Integer mysqlxWaitTimeout) {
            if (mysqlxWaitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxWaitTimeout");
            }
            this.mysqlxWaitTimeout = mysqlxWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWriteTimeout(Integer mysqlxWriteTimeout) {
            if (mysqlxWriteTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxWriteTimeout");
            }
            this.mysqlxWriteTimeout = mysqlxWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdDefaultCompressionLevel(Integer mysqlxZstdDefaultCompressionLevel) {
            if (mysqlxZstdDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxZstdDefaultCompressionLevel");
            }
            this.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdMaxClientCompressionLevel(Integer mysqlxZstdMaxClientCompressionLevel) {
            if (mysqlxZstdMaxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "mysqlxZstdMaxClientCompressionLevel");
            }
            this.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder netReadTimeout(Integer netReadTimeout) {
            if (netReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "netReadTimeout");
            }
            this.netReadTimeout = netReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            if (netWriteTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "netWriteTimeout");
            }
            this.netWriteTimeout = netWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder parserMaxMemSize(String parserMaxMemSize) {
            if (parserMaxMemSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "parserMaxMemSize");
            }
            this.parserMaxMemSize = parserMaxMemSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryAllocBlockSize(String queryAllocBlockSize) {
            if (queryAllocBlockSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "queryAllocBlockSize");
            }
            this.queryAllocBlockSize = queryAllocBlockSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryPreallocSize(String queryPreallocSize) {
            if (queryPreallocSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "queryPreallocSize");
            }
            this.queryPreallocSize = queryPreallocSize;
            return this;
        }
        @CustomType.Setter
        public Builder regexpTimeLimit(Integer regexpTimeLimit) {
            if (regexpTimeLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "regexpTimeLimit");
            }
            this.regexpTimeLimit = regexpTimeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder sortBufferSize(String sortBufferSize) {
            if (sortBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "sortBufferSize");
            }
            this.sortBufferSize = sortBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder sqlMode(String sqlMode) {
            if (sqlMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "sqlMode");
            }
            this.sqlMode = sqlMode;
            return this;
        }
        @CustomType.Setter
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            if (sqlRequirePrimaryKey == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "sqlRequirePrimaryKey");
            }
            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder sqlWarnings(Boolean sqlWarnings) {
            if (sqlWarnings == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "sqlWarnings");
            }
            this.sqlWarnings = sqlWarnings;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolDedicatedListeners(Boolean threadPoolDedicatedListeners) {
            if (threadPoolDedicatedListeners == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "threadPoolDedicatedListeners");
            }
            this.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolMaxTransactionsLimit(Integer threadPoolMaxTransactionsLimit) {
            if (threadPoolMaxTransactionsLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "threadPoolMaxTransactionsLimit");
            }
            this.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder tmpTableSize(String tmpTableSize) {
            if (tmpTableSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "tmpTableSize");
            }
            this.tmpTableSize = tmpTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder transactionIsolation(String transactionIsolation) {
            if (transactionIsolation == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "transactionIsolation");
            }
            this.transactionIsolation = transactionIsolation;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeout(Integer waitTimeout) {
            if (waitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationVariable", "waitTimeout");
            }
            this.waitTimeout = waitTimeout;
            return this;
        }
        public GetMysqlConfigurationVariable build() {
            final var _resultValue = new GetMysqlConfigurationVariable();
            _resultValue.autocommit = autocommit;
            _resultValue.bigTables = bigTables;
            _resultValue.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            _resultValue.binlogRowMetadata = binlogRowMetadata;
            _resultValue.binlogRowValueOptions = binlogRowValueOptions;
            _resultValue.binlogTransactionCompression = binlogTransactionCompression;
            _resultValue.completionType = completionType;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.connectionMemoryChunkSize = connectionMemoryChunkSize;
            _resultValue.connectionMemoryLimit = connectionMemoryLimit;
            _resultValue.cteMaxRecursionDepth = cteMaxRecursionDepth;
            _resultValue.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            _resultValue.foreignKeyChecks = foreignKeyChecks;
            _resultValue.generatedRandomPasswordLength = generatedRandomPasswordLength;
            _resultValue.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            _resultValue.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            _resultValue.groupReplicationConsistency = groupReplicationConsistency;
            _resultValue.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            _resultValue.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            _resultValue.innodbBufferPoolInstances = innodbBufferPoolInstances;
            _resultValue.innodbBufferPoolSize = innodbBufferPoolSize;
            _resultValue.innodbDdlBufferSize = innodbDdlBufferSize;
            _resultValue.innodbDdlThreads = innodbDdlThreads;
            _resultValue.innodbFtEnableStopword = innodbFtEnableStopword;
            _resultValue.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            _resultValue.innodbFtMinTokenSize = innodbFtMinTokenSize;
            _resultValue.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            _resultValue.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            _resultValue.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            _resultValue.innodbLockWaitTimeout = innodbLockWaitTimeout;
            _resultValue.innodbLogWriterThreads = innodbLogWriterThreads;
            _resultValue.innodbMaxPurgeLag = innodbMaxPurgeLag;
            _resultValue.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            _resultValue.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            _resultValue.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            _resultValue.interactiveTimeout = interactiveTimeout;
            _resultValue.localInfile = localInfile;
            _resultValue.mandatoryRoles = mandatoryRoles;
            _resultValue.maxAllowedPacket = maxAllowedPacket;
            _resultValue.maxBinlogCacheSize = maxBinlogCacheSize;
            _resultValue.maxConnectErrors = maxConnectErrors;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxExecutionTime = maxExecutionTime;
            _resultValue.maxHeapTableSize = maxHeapTableSize;
            _resultValue.maxPreparedStmtCount = maxPreparedStmtCount;
            _resultValue.mysqlFirewallMode = mysqlFirewallMode;
            _resultValue.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            _resultValue.mysqlxConnectTimeout = mysqlxConnectTimeout;
            _resultValue.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            _resultValue.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            _resultValue.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            _resultValue.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            _resultValue.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            _resultValue.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            _resultValue.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            _resultValue.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            _resultValue.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            _resultValue.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            _resultValue.mysqlxReadTimeout = mysqlxReadTimeout;
            _resultValue.mysqlxWaitTimeout = mysqlxWaitTimeout;
            _resultValue.mysqlxWriteTimeout = mysqlxWriteTimeout;
            _resultValue.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            _resultValue.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            _resultValue.netReadTimeout = netReadTimeout;
            _resultValue.netWriteTimeout = netWriteTimeout;
            _resultValue.parserMaxMemSize = parserMaxMemSize;
            _resultValue.queryAllocBlockSize = queryAllocBlockSize;
            _resultValue.queryPreallocSize = queryPreallocSize;
            _resultValue.regexpTimeLimit = regexpTimeLimit;
            _resultValue.sortBufferSize = sortBufferSize;
            _resultValue.sqlMode = sqlMode;
            _resultValue.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            _resultValue.sqlWarnings = sqlWarnings;
            _resultValue.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            _resultValue.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            _resultValue.timeZone = timeZone;
            _resultValue.tmpTableSize = tmpTableSize;
            _resultValue.transactionIsolation = transactionIsolation;
            _resultValue.waitTimeout = waitTimeout;
            return _resultValue;
        }
    }
}
