// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlConfigurationsConfigurationVariable {
    /**
     * @return auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
     * 
     */
    private Integer autoIncrementIncrement;
    /**
     * @return This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
     * 
     */
    private Integer autoIncrementOffset;
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    private Boolean autocommit;
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     */
    private Boolean bigTables;
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    private Integer binlogExpireLogsSeconds;
    /**
     * @return Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
     * 
     */
    private Integer binlogGroupCommitSyncDelay;
    /**
     * @return The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
     * 
     */
    private Integer binlogGroupCommitSyncNoDelayCount;
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    private String binlogRowMetadata;
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    private String binlogRowValueOptions;
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    private Boolean binlogTransactionCompression;
    /**
     * @return This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
     * 
     */
    private String blockEncryptionMode;
    /**
     * @return The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
     * 
     */
    private String characterSetServer;
    /**
     * @return The server&#39;s default collation.
     * 
     */
    private String collationServer;
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    private String completionType;
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    private Integer connectTimeout;
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     */
    private Integer connectionMemoryChunkSize;
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     */
    private String connectionMemoryLimit;
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    private String cteMaxRecursionDepth;
    /**
     * @return The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
     * 
     */
    private String defaultAuthenticationPlugin;
    /**
     * @return This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
     * 
     */
    private String explainFormat;
    /**
     * @return This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
     * 
     */
    private Boolean explicitDefaultsForTimestamp;
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    private Boolean foreignKeyChecks;
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer generatedRandomPasswordLength;
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     */
    private String globalConnectionMemoryLimit;
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     */
    private Boolean globalConnectionMemoryTracking;
    /**
     * @return Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     */
    private String groupConcatMaxLen;
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    private String groupReplicationConsistency;
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    private Integer informationSchemaStatsExpiry;
    /**
     * @return Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
     * 
     */
    private Boolean innodbAdaptiveHashIndex;
    /**
     * @return The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
     * 
     */
    private Integer innodbAutoincLockMode;
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     */
    private Integer innodbBufferPoolDumpPct;
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    private Integer innodbBufferPoolInstances;
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     */
    private String innodbBufferPoolSize;
    /**
     * @return Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
     * 
     */
    private String innodbChangeBuffering;
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    private String innodbDdlBufferSize;
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    private Integer innodbDdlThreads;
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    private Boolean innodbFtEnableStopword;
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    private Integer innodbFtMaxTokenSize;
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    private Integer innodbFtMinTokenSize;
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    private Integer innodbFtNumWordOptimize;
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    private String innodbFtResultCacheLimit;
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    private String innodbFtServerStopwordTable;
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    private Integer innodbLockWaitTimeout;
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     */
    private Boolean innodbLogWriterThreads;
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     */
    private String innodbMaxPurgeLag;
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     */
    private Integer innodbMaxPurgeLagDelay;
    /**
     * @return Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
     * 
     */
    private Boolean innodbNumaInterleave;
    /**
     * @return Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
     * 
     */
    private String innodbOnlineAlterLogMaxSize;
    /**
     * @return Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
     * 
     */
    private String innodbRedoLogCapacity;
    /**
     * @return InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
     * 
     */
    private Boolean innodbRollbackOnTimeout;
    /**
     * @return This variable defines:
     * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
     * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
     * 
     */
    private Integer innodbSortBufferSize;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     */
    private String innodbStatsPersistentSamplePages;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     */
    private String innodbStatsTransientSamplePages;
    /**
     * @return When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
     * 
     */
    private Boolean innodbStrictMode;
    /**
     * @return When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
     * 
     */
    private Boolean innodbUndoLogTruncate;
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    private Integer interactiveTimeout;
    /**
     * @return The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
     * 
     */
    private String joinBufferSize;
    /**
     * @return This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
     * 
     */
    private Boolean localInfile;
    /**
     * @return If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
     * 
     */
    private Integer longQueryTime;
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    private String mandatoryRoles;
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     */
    private Integer maxAllowedPacket;
    /**
     * @return Sets the size of the transaction cache.
     * 
     */
    private String maxBinlogCacheSize;
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    private String maxConnectErrors;
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    private Integer maxConnections;
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    private String maxExecutionTime;
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     */
    private String maxHeapTableSize;
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    private Integer maxPreparedStmtCount;
    /**
     * @return Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
     * 
     */
    private String maxSeeksForKey;
    /**
     * @return The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
     * 
     */
    private String maxUserConnections;
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    private Boolean mysqlFirewallMode;
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlZstdDefaultCompressionLevel;
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     */
    private Integer mysqlxConnectTimeout;
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxDeflateDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxDeflateMaxClientCompressionLevel;
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxDocumentIdUniquePrefix;
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private Boolean mysqlxEnableHelloNotice;
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxIdleWorkerThreadTimeout;
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     */
    private Integer mysqlxInteractiveTimeout;
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxLz4defaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxLz4maxClientCompressionLevel;
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     */
    private Integer mysqlxMaxAllowedPacket;
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Integer mysqlxMinWorkerThreads;
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     */
    private Integer mysqlxReadTimeout;
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     */
    private Integer mysqlxWaitTimeout;
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     */
    private Integer mysqlxWriteTimeout;
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    private Integer mysqlxZstdDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    private Integer mysqlxZstdMaxClientCompressionLevel;
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    private Integer netReadTimeout;
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    private Integer netWriteTimeout;
    /**
     * @return The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
     * 
     */
    private String optimizerSwitch;
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    private String parserMaxMemSize;
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String queryAllocBlockSize;
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private String queryPreallocSize;
    /**
     * @return The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String rangeOptimizerMaxMemSize;
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    private Integer regexpTimeLimit;
    /**
     * @return The maximum amount of space to use for all relay logs.
     * 
     */
    private String relayLogSpaceLimit;
    /**
     * @return Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
     * 
     */
    private Integer replicaNetTimeout;
    /**
     * @return Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
     * 
     */
    private Integer replicaParallelWorkers;
    /**
     * @return From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
     * 
     */
    private String replicaTypeConversions;
    /**
     * @return Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
     * 
     */
    private Boolean requireSecureTransport;
    /**
     * @return Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
     * 
     */
    private Boolean skipNameResolve;
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     */
    private String sortBufferSize;
    /**
     * @return Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
     * 
     */
    private Boolean sqlGenerateInvisiblePrimaryKey;
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    private String sqlMode;
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    private Boolean sqlRequirePrimaryKey;
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    private Boolean sqlWarnings;
    /**
     * @return The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
     * 
     */
    private Integer tableDefinitionCache;
    /**
     * @return The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
     * 
     */
    private Integer tableOpenCache;
    /**
     * @return Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
     * 
     */
    private String temptableMaxRam;
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    private Boolean threadPoolDedicatedListeners;
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    private Integer threadPoolMaxTransactionsLimit;
    /**
     * @return The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
     * 
     */
    private Integer threadPoolQueryThreadsPerGroup;
    /**
     * @return The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
     * 
     */
    private Integer threadPoolSize;
    /**
     * @return The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
     * 
     */
    private Integer threadPoolTransactionDelay;
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     */
    private String timeZone;
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     */
    private String tmpTableSize;
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    private String transactionIsolation;
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    private Integer waitTimeout;

    private GetMysqlConfigurationsConfigurationVariable() {}
    /**
     * @return auto_increment_increment and auto_increment_offset are intended for use with circular (source-to-source) replication, and can be used to control the operation of AUTO_INCREMENT columns. Both variables have global and session values, and each can assume an integer value between 1 and 65,535 inclusive.
     * 
     */
    public Integer autoIncrementIncrement() {
        return this.autoIncrementIncrement;
    }
    /**
     * @return This variable has a default value of 1. If it is left with its default value, and Group Replication is started on the server in multi-primary mode, it is changed to the server ID.
     * 
     */
    public Integer autoIncrementOffset() {
        return this.autoIncrementOffset;
    }
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Boolean autocommit() {
        return this.autocommit;
    }
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     */
    public Boolean bigTables() {
        return this.bigTables;
    }
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Integer binlogExpireLogsSeconds() {
        return this.binlogExpireLogsSeconds;
    }
    /**
     * @return Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk. There is no delay by default. Setting this variable to a microsecond delay enables more transactions to be synchronized together to disk at once, reducing the overall time to commit a group of transactions because the larger groups required fewer time units per group.
     * 
     */
    public Integer binlogGroupCommitSyncDelay() {
        return this.binlogGroupCommitSyncDelay;
    }
    /**
     * @return The maximum number of transactions to wait for before aborting the current delay as specified by binlog_group_commit_sync_delay. If binlog_group_commit_sync_delay is set to 0, then this option has no effect.
     * 
     */
    public Integer binlogGroupCommitSyncNoDelayCount() {
        return this.binlogGroupCommitSyncNoDelayCount;
    }
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public String binlogRowMetadata() {
        return this.binlogRowMetadata;
    }
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public String binlogRowValueOptions() {
        return this.binlogRowValueOptions;
    }
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Boolean binlogTransactionCompression() {
        return this.binlogTransactionCompression;
    }
    /**
     * @return This variable controls the block encryption mode for block-based algorithms such as AES. It affects encryption for AES_ENCRYPT() and AES_DECRYPT(). block_encryption_mode takes a value in aes-keylen-mode format, where keylen is the key length in bits and mode is the encryption mode. The value is not case-sensitive. Permitted keylen values are 128, 192, and 256. Permitted mode values are ECB, CBC, CFB1, CFB8, CFB128, and OFB.
     * 
     */
    public String blockEncryptionMode() {
        return this.blockEncryptionMode;
    }
    /**
     * @return The server&#39;s default character set. If you set this variable, you should also set collation_server to specify the collation for the character set.
     * 
     */
    public String characterSetServer() {
        return this.characterSetServer;
    }
    /**
     * @return The server&#39;s default collation.
     * 
     */
    public String collationServer() {
        return this.collationServer;
    }
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public String completionType() {
        return this.completionType;
    }
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     */
    public Integer connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     */
    public Integer connectionMemoryChunkSize() {
        return this.connectionMemoryChunkSize;
    }
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     */
    public String connectionMemoryLimit() {
        return this.connectionMemoryLimit;
    }
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public String cteMaxRecursionDepth() {
        return this.cteMaxRecursionDepth;
    }
    /**
     * @return The default authentication plugin. This must be a plugin that uses internal credentials storage, so these values are permitted: mysql_native_password, sha256_password, caching_sha2_password.
     * 
     */
    public String defaultAuthenticationPlugin() {
        return this.defaultAuthenticationPlugin;
    }
    /**
     * @return This variable determines the default output format used by EXPLAIN in the absence of a FORMAT option when displaying a query execution plan.
     * 
     */
    public String explainFormat() {
        return this.explainFormat;
    }
    /**
     * @return This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns. By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors. Disabling explicit_defaults_for_timestamp results in a warning.
     * 
     */
    public Boolean explicitDefaultsForTimestamp() {
        return this.explicitDefaultsForTimestamp;
    }
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Boolean foreignKeyChecks() {
        return this.foreignKeyChecks;
    }
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer generatedRandomPasswordLength() {
        return this.generatedRandomPasswordLength;
    }
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     */
    public String globalConnectionMemoryLimit() {
        return this.globalConnectionMemoryLimit;
    }
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     */
    public Boolean globalConnectionMemoryTracking() {
        return this.globalConnectionMemoryTracking;
    }
    /**
     * @return Specifies the maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * 
     */
    public String groupConcatMaxLen() {
        return this.groupConcatMaxLen;
    }
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public String groupReplicationConsistency() {
        return this.groupReplicationConsistency;
    }
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Integer informationSchemaStatsExpiry() {
        return this.informationSchemaStatsExpiry;
    }
    /**
     * @return Whether the InnoDB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.
     * 
     */
    public Boolean innodbAdaptiveHashIndex() {
        return this.innodbAdaptiveHashIndex;
    }
    /**
     * @return The lock mode to use for generating auto-increment values. Permissible values are 0, 1, or 2, for traditional, consecutive, or interleaved, respectively.
     * 
     */
    public Integer innodbAutoincLockMode() {
        return this.innodbAutoincLockMode;
    }
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     */
    public Integer innodbBufferPoolDumpPct() {
        return this.innodbBufferPoolDumpPct;
    }
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Integer innodbBufferPoolInstances() {
        return this.innodbBufferPoolInstances;
    }
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     */
    public String innodbBufferPoolSize() {
        return this.innodbBufferPoolSize;
    }
    /**
     * @return Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially. Permitted values are described in the following table. Values may also be specified numerically.
     * 
     */
    public String innodbChangeBuffering() {
        return this.innodbChangeBuffering;
    }
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    public String innodbDdlBufferSize() {
        return this.innodbDdlBufferSize;
    }
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    public Integer innodbDdlThreads() {
        return this.innodbDdlThreads;
    }
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Boolean innodbFtEnableStopword() {
        return this.innodbFtEnableStopword;
    }
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Integer innodbFtMaxTokenSize() {
        return this.innodbFtMaxTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Integer innodbFtMinTokenSize() {
        return this.innodbFtMinTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Integer innodbFtNumWordOptimize() {
        return this.innodbFtNumWordOptimize;
    }
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public String innodbFtResultCacheLimit() {
        return this.innodbFtResultCacheLimit;
    }
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public String innodbFtServerStopwordTable() {
        return this.innodbFtServerStopwordTable;
    }
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Integer innodbLockWaitTimeout() {
        return this.innodbLockWaitTimeout;
    }
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     */
    public Boolean innodbLogWriterThreads() {
        return this.innodbLogWriterThreads;
    }
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     */
    public String innodbMaxPurgeLag() {
        return this.innodbMaxPurgeLag;
    }
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     */
    public Integer innodbMaxPurgeLagDelay() {
        return this.innodbMaxPurgeLagDelay;
    }
    /**
     * @return Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool. When innodb_numa_interleave is enabled, the NUMA memory policy is set to MPOL_INTERLEAVE for the mysqld process. After the InnoDB buffer pool is allocated, the NUMA memory policy is set back to MPOL_DEFAULT. For the innodb_numa_interleave option to be available, MySQL must be compiled on a NUMA-enabled Linux system.
     * 
     */
    public Boolean innodbNumaInterleave() {
        return this.innodbNumaInterleave;
    }
    /**
     * @return Specifies an upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables. There is one such log file for each index being created or table being altered. This log file stores data inserted, updated, or deleted in the table during the DDL operation.
     * 
     */
    public String innodbOnlineAlterLogMaxSize() {
        return this.innodbOnlineAlterLogMaxSize;
    }
    /**
     * @return Defines the amount of disk space occupied by redo log files. innodb_redo_log_capacity supercedes the innodb_log_files_in_group and innodb_log_file_size variables, which are both ignored if innodb_redo_log_capacity is defined. If innodb_redo_log_capacity is not defined, and if neither innodb_log_file_size or innodb_log_files_in_group are defined, then the default innodb_redo_log_capacity value is used.
     * 
     */
    public String innodbRedoLogCapacity() {
        return this.innodbRedoLogCapacity;
    }
    /**
     * @return InnoDB rolls back only the last statement on a transaction timeout by default. If --innodb-rollback-on-timeout is specified, a transaction timeout causes InnoDB to abort and roll back the entire transaction.
     * 
     */
    public Boolean innodbRollbackOnTimeout() {
        return this.innodbRollbackOnTimeout;
    }
    /**
     * @return This variable defines:
     * * The sort buffer size for online DDL operations that create or rebuild secondary indexes. However, as of MySQL 8.0.27, this responsibility is subsumed by the innodb_ddl_buffer_size variable.
     * * The amount by which the temporary log file is extended when recording concurrent DML during an online DDL operation, and the size of the temporary log file read buffer and write buffer.
     * 
     */
    public Integer innodbSortBufferSize() {
        return this.innodbSortBufferSize;
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     */
    public String innodbStatsPersistentSamplePages() {
        return this.innodbStatsPersistentSamplePages;
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     */
    public String innodbStatsTransientSamplePages() {
        return this.innodbStatsTransientSamplePages;
    }
    /**
     * @return When you enable innodbStrictMode, the InnoDB storage engine returns errors instead of warnings for invalid or incompatible table options.
     * 
     */
    public Boolean innodbStrictMode() {
        return this.innodbStrictMode;
    }
    /**
     * @return When enabled, undo tablespaces that exceed the threshold value defined by innodb_max_undo_log_size are marked for truncation. Only undo tablespaces can be truncated. Truncating undo logs that reside in the system tablespace is not supported. For truncation to occur, there must be at least two undo tablespaces.
     * 
     */
    public Boolean innodbUndoLogTruncate() {
        return this.innodbUndoLogTruncate;
    }
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    public Integer interactiveTimeout() {
        return this.interactiveTimeout;
    }
    /**
     * @return The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. In MySQL 8.0.18 and later, this variable also controls the amount of memory used for hash joins. Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
     * 
     */
    public String joinBufferSize() {
        return this.joinBufferSize;
    }
    /**
     * @return This variable controls server-side LOCAL capability for LOAD DATA statements. Depending on the local_infile setting, the server refuses or permits local data loading by clients that have LOCAL enabled on the client side.
     * 
     */
    public Boolean localInfile() {
        return this.localInfile;
    }
    /**
     * @return If a query takes longer than this many seconds, the server increments the Slow_queries status variable. If the slow query log is enabled, the query is logged to the slow query log file. This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
     * 
     */
    public Integer longQueryTime() {
        return this.longQueryTime;
    }
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public String mandatoryRoles() {
        return this.mandatoryRoles;
    }
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     */
    public Integer maxAllowedPacket() {
        return this.maxAllowedPacket;
    }
    /**
     * @return Sets the size of the transaction cache.
     * 
     */
    public String maxBinlogCacheSize() {
        return this.maxBinlogCacheSize;
    }
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    public String maxConnectErrors() {
        return this.maxConnectErrors;
    }
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public String maxExecutionTime() {
        return this.maxExecutionTime;
    }
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     */
    public String maxHeapTableSize() {
        return this.maxHeapTableSize;
    }
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Integer maxPreparedStmtCount() {
        return this.maxPreparedStmtCount;
    }
    /**
     * @return Limit the assumed maximum number of seeks when looking up rows based on a key. The MySQL optimizer assumes that no more than this number of key seeks are required when searching for matching rows in a table by scanning an index, regardless of the actual cardinality of the index (see Section 15.7.7.22, “SHOW INDEX Statement”). By setting this to a low value (say, 100), you can force MySQL to prefer indexes instead of table scans.
     * 
     */
    public String maxSeeksForKey() {
        return this.maxSeeksForKey;
    }
    /**
     * @return The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means “no limit.” This variable has a global value that can be set at server startup or runtime. It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
     * 
     */
    public String maxUserConnections() {
        return this.maxUserConnections;
    }
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Boolean mysqlFirewallMode() {
        return this.mysqlFirewallMode;
    }
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlZstdDefaultCompressionLevel() {
        return this.mysqlZstdDefaultCompressionLevel;
    }
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     */
    public Integer mysqlxConnectTimeout() {
        return this.mysqlxConnectTimeout;
    }
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateDefaultCompressionLevel() {
        return this.mysqlxDeflateDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateMaxClientCompressionLevel() {
        return this.mysqlxDeflateMaxClientCompressionLevel;
    }
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxDocumentIdUniquePrefix() {
        return this.mysqlxDocumentIdUniquePrefix;
    }
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Boolean mysqlxEnableHelloNotice() {
        return this.mysqlxEnableHelloNotice;
    }
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxIdleWorkerThreadTimeout() {
        return this.mysqlxIdleWorkerThreadTimeout;
    }
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     */
    public Integer mysqlxInteractiveTimeout() {
        return this.mysqlxInteractiveTimeout;
    }
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4defaultCompressionLevel() {
        return this.mysqlxLz4defaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4maxClientCompressionLevel() {
        return this.mysqlxLz4maxClientCompressionLevel;
    }
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     */
    public Integer mysqlxMaxAllowedPacket() {
        return this.mysqlxMaxAllowedPacket;
    }
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Integer mysqlxMinWorkerThreads() {
        return this.mysqlxMinWorkerThreads;
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     */
    public Integer mysqlxReadTimeout() {
        return this.mysqlxReadTimeout;
    }
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     */
    public Integer mysqlxWaitTimeout() {
        return this.mysqlxWaitTimeout;
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     */
    public Integer mysqlxWriteTimeout() {
        return this.mysqlxWriteTimeout;
    }
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdDefaultCompressionLevel() {
        return this.mysqlxZstdDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdMaxClientCompressionLevel() {
        return this.mysqlxZstdMaxClientCompressionLevel;
    }
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    public Integer netReadTimeout() {
        return this.netReadTimeout;
    }
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Integer netWriteTimeout() {
        return this.netWriteTimeout;
    }
    /**
     * @return The optimizer_switch system variable enables control over optimizer behavior. The value of this variable is a set of flags, each of which has a value of on or off to indicate whether the corresponding optimizer behavior is enabled or disabled. This variable has global and session values and can be changed at runtime. The global default can be set at server startup.
     * 
     */
    public String optimizerSwitch() {
        return this.optimizerSwitch;
    }
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public String parserMaxMemSize() {
        return this.parserMaxMemSize;
    }
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String queryAllocBlockSize() {
        return this.queryAllocBlockSize;
    }
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public String queryPreallocSize() {
        return this.queryPreallocSize;
    }
    /**
     * @return The limit on memory consumption for the range optimizer. A value of 0 means “no limit.” If an execution plan considered by the optimizer uses the range access method but the optimizer estimates that the amount of memory needed for this method would exceed the limit, it abandons the plan and considers other plans.
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String rangeOptimizerMaxMemSize() {
        return this.rangeOptimizerMaxMemSize;
    }
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    public Integer regexpTimeLimit() {
        return this.regexpTimeLimit;
    }
    /**
     * @return The maximum amount of space to use for all relay logs.
     * 
     */
    public String relayLogSpaceLimit() {
        return this.relayLogSpaceLimit;
    }
    /**
     * @return Specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken, aborts the read, and tries to reconnect. Setting this variable has no immediate effect. The state of the variable applies on all subsequent START REPLICA commands.
     * 
     */
    public Integer replicaNetTimeout() {
        return this.replicaNetTimeout;
    }
    /**
     * @return Beginning with MySQL 8.0.26, slave_parallel_workers is deprecated, and you should use replica_parallel_workers instead. (Prior to MySQL 8.0.26, you must use slave_parallel_workers to set the number of applier threads.)
     * 
     */
    public Integer replicaParallelWorkers() {
        return this.replicaParallelWorkers;
    }
    /**
     * @return From MySQL 8.0.26, use replica_type_conversions in place of slave_type_conversions, which is deprecated from that release. In releases before MySQL 8.0.26, use slave_type_conversions.
     * 
     */
    public String replicaTypeConversions() {
        return this.replicaTypeConversions;
    }
    /**
     * @return Whether client connections to the server are required to use some form of secure transport. When this variable is enabled, the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file or shared memory. The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
     * 
     */
    public Boolean requireSecureTransport() {
        return this.requireSecureTransport;
    }
    /**
     * @return Whether to resolve host names when checking client connections. If this variable is OFF, mysqld resolves host names when checking client connections. If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses. See Section 7.1.12.3, “DNS Lookups and the Host Cache”.
     * 
     */
    public Boolean skipNameResolve() {
        return this.skipNameResolve;
    }
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     */
    public String sortBufferSize() {
        return this.sortBufferSize;
    }
    /**
     * @return Whether GIPK mode is in effect, in which case a MySQL replication source server adds a generated invisible primary key to any InnoDB table that is created without one.
     * 
     */
    public Boolean sqlGenerateInvisiblePrimaryKey() {
        return this.sqlGenerateInvisiblePrimaryKey;
    }
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public String sqlMode() {
        return this.sqlMode;
    }
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Boolean sqlRequirePrimaryKey() {
        return this.sqlRequirePrimaryKey;
    }
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Boolean sqlWarnings() {
        return this.sqlWarnings;
    }
    /**
     * @return The number of table definitions that can be stored in the table definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
     * 
     */
    public Integer tableDefinitionCache() {
        return this.tableDefinitionCache;
    }
    /**
     * @return The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
     * 
     */
    public Integer tableOpenCache() {
        return this.tableOpenCache;
    }
    /**
     * @return Defines the maximum amount of memory that can be occupied by the TempTable storage engine before it starts storing data on disk. The default value is 1073741824 bytes (1GiB). For more information, see Section 10.4.4, “Internal Temporary Table Use in MySQL”.
     * 
     */
    public String temptableMaxRam() {
        return this.temptableMaxRam;
    }
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    public Boolean threadPoolDedicatedListeners() {
        return this.threadPoolDedicatedListeners;
    }
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    public Integer threadPoolMaxTransactionsLimit() {
        return this.threadPoolMaxTransactionsLimit;
    }
    /**
     * @return The maximum number of query threads permitted in a thread group. The maximum value is 4096, but if thread_pool_max_transactions_limit is set, thread_pool_query_threads_per_group must not exceed that value. The default value of 1 means there is one active query thread in each thread group, which works well for many loads. When you are using the high concurrency thread pool algorithm (thread_pool_algorithm = 1), consider increasing the value if you experience slower response times due to long-running transactions.
     * 
     */
    public Integer threadPoolQueryThreadsPerGroup() {
        return this.threadPoolQueryThreadsPerGroup;
    }
    /**
     * @return The number of thread groups in the thread pool. This is the most important parameter controlling thread pool performance. It affects how many statements can execute simultaneously. If a value outside the range of permissible values is specified, the thread pool plugin does not load and the server writes a message to the error log.
     * 
     */
    public Integer threadPoolSize() {
        return this.threadPoolSize;
    }
    /**
     * @return The delay period before executing a new transaction, in milliseconds. The maximum value is 300000 (5 minutes). A transaction delay can be used in cases where parallel transactions affect the performance of other operations due to resource contention. For example, if parallel transactions affect index creation or an online buffer pool resizing operation, you can configure a transaction delay to reduce resource contention while those operations are running.
     * 
     */
    public Integer threadPoolTransactionDelay() {
        return this.threadPoolTransactionDelay;
    }
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     */
    public String tmpTableSize() {
        return this.tmpTableSize;
    }
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public String transactionIsolation() {
        return this.transactionIsolation;
    }
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Integer waitTimeout() {
        return this.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlConfigurationsConfigurationVariable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer autoIncrementIncrement;
        private Integer autoIncrementOffset;
        private Boolean autocommit;
        private Boolean bigTables;
        private Integer binlogExpireLogsSeconds;
        private Integer binlogGroupCommitSyncDelay;
        private Integer binlogGroupCommitSyncNoDelayCount;
        private String binlogRowMetadata;
        private String binlogRowValueOptions;
        private Boolean binlogTransactionCompression;
        private String blockEncryptionMode;
        private String characterSetServer;
        private String collationServer;
        private String completionType;
        private Integer connectTimeout;
        private Integer connectionMemoryChunkSize;
        private String connectionMemoryLimit;
        private String cteMaxRecursionDepth;
        private String defaultAuthenticationPlugin;
        private String explainFormat;
        private Boolean explicitDefaultsForTimestamp;
        private Boolean foreignKeyChecks;
        private Integer generatedRandomPasswordLength;
        private String globalConnectionMemoryLimit;
        private Boolean globalConnectionMemoryTracking;
        private String groupConcatMaxLen;
        private String groupReplicationConsistency;
        private Integer informationSchemaStatsExpiry;
        private Boolean innodbAdaptiveHashIndex;
        private Integer innodbAutoincLockMode;
        private Integer innodbBufferPoolDumpPct;
        private Integer innodbBufferPoolInstances;
        private String innodbBufferPoolSize;
        private String innodbChangeBuffering;
        private String innodbDdlBufferSize;
        private Integer innodbDdlThreads;
        private Boolean innodbFtEnableStopword;
        private Integer innodbFtMaxTokenSize;
        private Integer innodbFtMinTokenSize;
        private Integer innodbFtNumWordOptimize;
        private String innodbFtResultCacheLimit;
        private String innodbFtServerStopwordTable;
        private Integer innodbLockWaitTimeout;
        private Boolean innodbLogWriterThreads;
        private String innodbMaxPurgeLag;
        private Integer innodbMaxPurgeLagDelay;
        private Boolean innodbNumaInterleave;
        private String innodbOnlineAlterLogMaxSize;
        private String innodbRedoLogCapacity;
        private Boolean innodbRollbackOnTimeout;
        private Integer innodbSortBufferSize;
        private String innodbStatsPersistentSamplePages;
        private String innodbStatsTransientSamplePages;
        private Boolean innodbStrictMode;
        private Boolean innodbUndoLogTruncate;
        private Integer interactiveTimeout;
        private String joinBufferSize;
        private Boolean localInfile;
        private Integer longQueryTime;
        private String mandatoryRoles;
        private Integer maxAllowedPacket;
        private String maxBinlogCacheSize;
        private String maxConnectErrors;
        private Integer maxConnections;
        private String maxExecutionTime;
        private String maxHeapTableSize;
        private Integer maxPreparedStmtCount;
        private String maxSeeksForKey;
        private String maxUserConnections;
        private Boolean mysqlFirewallMode;
        private Integer mysqlZstdDefaultCompressionLevel;
        private Integer mysqlxConnectTimeout;
        private Integer mysqlxDeflateDefaultCompressionLevel;
        private Integer mysqlxDeflateMaxClientCompressionLevel;
        private Integer mysqlxDocumentIdUniquePrefix;
        private Boolean mysqlxEnableHelloNotice;
        private Integer mysqlxIdleWorkerThreadTimeout;
        private Integer mysqlxInteractiveTimeout;
        private Integer mysqlxLz4defaultCompressionLevel;
        private Integer mysqlxLz4maxClientCompressionLevel;
        private Integer mysqlxMaxAllowedPacket;
        private Integer mysqlxMinWorkerThreads;
        private Integer mysqlxReadTimeout;
        private Integer mysqlxWaitTimeout;
        private Integer mysqlxWriteTimeout;
        private Integer mysqlxZstdDefaultCompressionLevel;
        private Integer mysqlxZstdMaxClientCompressionLevel;
        private Integer netReadTimeout;
        private Integer netWriteTimeout;
        private String optimizerSwitch;
        private String parserMaxMemSize;
        private String queryAllocBlockSize;
        private String queryPreallocSize;
        private String rangeOptimizerMaxMemSize;
        private Integer regexpTimeLimit;
        private String relayLogSpaceLimit;
        private Integer replicaNetTimeout;
        private Integer replicaParallelWorkers;
        private String replicaTypeConversions;
        private Boolean requireSecureTransport;
        private Boolean skipNameResolve;
        private String sortBufferSize;
        private Boolean sqlGenerateInvisiblePrimaryKey;
        private String sqlMode;
        private Boolean sqlRequirePrimaryKey;
        private Boolean sqlWarnings;
        private Integer tableDefinitionCache;
        private Integer tableOpenCache;
        private String temptableMaxRam;
        private Boolean threadPoolDedicatedListeners;
        private Integer threadPoolMaxTransactionsLimit;
        private Integer threadPoolQueryThreadsPerGroup;
        private Integer threadPoolSize;
        private Integer threadPoolTransactionDelay;
        private String timeZone;
        private String tmpTableSize;
        private String transactionIsolation;
        private Integer waitTimeout;
        public Builder() {}
        public Builder(GetMysqlConfigurationsConfigurationVariable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoIncrementIncrement = defaults.autoIncrementIncrement;
    	      this.autoIncrementOffset = defaults.autoIncrementOffset;
    	      this.autocommit = defaults.autocommit;
    	      this.bigTables = defaults.bigTables;
    	      this.binlogExpireLogsSeconds = defaults.binlogExpireLogsSeconds;
    	      this.binlogGroupCommitSyncDelay = defaults.binlogGroupCommitSyncDelay;
    	      this.binlogGroupCommitSyncNoDelayCount = defaults.binlogGroupCommitSyncNoDelayCount;
    	      this.binlogRowMetadata = defaults.binlogRowMetadata;
    	      this.binlogRowValueOptions = defaults.binlogRowValueOptions;
    	      this.binlogTransactionCompression = defaults.binlogTransactionCompression;
    	      this.blockEncryptionMode = defaults.blockEncryptionMode;
    	      this.characterSetServer = defaults.characterSetServer;
    	      this.collationServer = defaults.collationServer;
    	      this.completionType = defaults.completionType;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.connectionMemoryChunkSize = defaults.connectionMemoryChunkSize;
    	      this.connectionMemoryLimit = defaults.connectionMemoryLimit;
    	      this.cteMaxRecursionDepth = defaults.cteMaxRecursionDepth;
    	      this.defaultAuthenticationPlugin = defaults.defaultAuthenticationPlugin;
    	      this.explainFormat = defaults.explainFormat;
    	      this.explicitDefaultsForTimestamp = defaults.explicitDefaultsForTimestamp;
    	      this.foreignKeyChecks = defaults.foreignKeyChecks;
    	      this.generatedRandomPasswordLength = defaults.generatedRandomPasswordLength;
    	      this.globalConnectionMemoryLimit = defaults.globalConnectionMemoryLimit;
    	      this.globalConnectionMemoryTracking = defaults.globalConnectionMemoryTracking;
    	      this.groupConcatMaxLen = defaults.groupConcatMaxLen;
    	      this.groupReplicationConsistency = defaults.groupReplicationConsistency;
    	      this.informationSchemaStatsExpiry = defaults.informationSchemaStatsExpiry;
    	      this.innodbAdaptiveHashIndex = defaults.innodbAdaptiveHashIndex;
    	      this.innodbAutoincLockMode = defaults.innodbAutoincLockMode;
    	      this.innodbBufferPoolDumpPct = defaults.innodbBufferPoolDumpPct;
    	      this.innodbBufferPoolInstances = defaults.innodbBufferPoolInstances;
    	      this.innodbBufferPoolSize = defaults.innodbBufferPoolSize;
    	      this.innodbChangeBuffering = defaults.innodbChangeBuffering;
    	      this.innodbDdlBufferSize = defaults.innodbDdlBufferSize;
    	      this.innodbDdlThreads = defaults.innodbDdlThreads;
    	      this.innodbFtEnableStopword = defaults.innodbFtEnableStopword;
    	      this.innodbFtMaxTokenSize = defaults.innodbFtMaxTokenSize;
    	      this.innodbFtMinTokenSize = defaults.innodbFtMinTokenSize;
    	      this.innodbFtNumWordOptimize = defaults.innodbFtNumWordOptimize;
    	      this.innodbFtResultCacheLimit = defaults.innodbFtResultCacheLimit;
    	      this.innodbFtServerStopwordTable = defaults.innodbFtServerStopwordTable;
    	      this.innodbLockWaitTimeout = defaults.innodbLockWaitTimeout;
    	      this.innodbLogWriterThreads = defaults.innodbLogWriterThreads;
    	      this.innodbMaxPurgeLag = defaults.innodbMaxPurgeLag;
    	      this.innodbMaxPurgeLagDelay = defaults.innodbMaxPurgeLagDelay;
    	      this.innodbNumaInterleave = defaults.innodbNumaInterleave;
    	      this.innodbOnlineAlterLogMaxSize = defaults.innodbOnlineAlterLogMaxSize;
    	      this.innodbRedoLogCapacity = defaults.innodbRedoLogCapacity;
    	      this.innodbRollbackOnTimeout = defaults.innodbRollbackOnTimeout;
    	      this.innodbSortBufferSize = defaults.innodbSortBufferSize;
    	      this.innodbStatsPersistentSamplePages = defaults.innodbStatsPersistentSamplePages;
    	      this.innodbStatsTransientSamplePages = defaults.innodbStatsTransientSamplePages;
    	      this.innodbStrictMode = defaults.innodbStrictMode;
    	      this.innodbUndoLogTruncate = defaults.innodbUndoLogTruncate;
    	      this.interactiveTimeout = defaults.interactiveTimeout;
    	      this.joinBufferSize = defaults.joinBufferSize;
    	      this.localInfile = defaults.localInfile;
    	      this.longQueryTime = defaults.longQueryTime;
    	      this.mandatoryRoles = defaults.mandatoryRoles;
    	      this.maxAllowedPacket = defaults.maxAllowedPacket;
    	      this.maxBinlogCacheSize = defaults.maxBinlogCacheSize;
    	      this.maxConnectErrors = defaults.maxConnectErrors;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxExecutionTime = defaults.maxExecutionTime;
    	      this.maxHeapTableSize = defaults.maxHeapTableSize;
    	      this.maxPreparedStmtCount = defaults.maxPreparedStmtCount;
    	      this.maxSeeksForKey = defaults.maxSeeksForKey;
    	      this.maxUserConnections = defaults.maxUserConnections;
    	      this.mysqlFirewallMode = defaults.mysqlFirewallMode;
    	      this.mysqlZstdDefaultCompressionLevel = defaults.mysqlZstdDefaultCompressionLevel;
    	      this.mysqlxConnectTimeout = defaults.mysqlxConnectTimeout;
    	      this.mysqlxDeflateDefaultCompressionLevel = defaults.mysqlxDeflateDefaultCompressionLevel;
    	      this.mysqlxDeflateMaxClientCompressionLevel = defaults.mysqlxDeflateMaxClientCompressionLevel;
    	      this.mysqlxDocumentIdUniquePrefix = defaults.mysqlxDocumentIdUniquePrefix;
    	      this.mysqlxEnableHelloNotice = defaults.mysqlxEnableHelloNotice;
    	      this.mysqlxIdleWorkerThreadTimeout = defaults.mysqlxIdleWorkerThreadTimeout;
    	      this.mysqlxInteractiveTimeout = defaults.mysqlxInteractiveTimeout;
    	      this.mysqlxLz4defaultCompressionLevel = defaults.mysqlxLz4defaultCompressionLevel;
    	      this.mysqlxLz4maxClientCompressionLevel = defaults.mysqlxLz4maxClientCompressionLevel;
    	      this.mysqlxMaxAllowedPacket = defaults.mysqlxMaxAllowedPacket;
    	      this.mysqlxMinWorkerThreads = defaults.mysqlxMinWorkerThreads;
    	      this.mysqlxReadTimeout = defaults.mysqlxReadTimeout;
    	      this.mysqlxWaitTimeout = defaults.mysqlxWaitTimeout;
    	      this.mysqlxWriteTimeout = defaults.mysqlxWriteTimeout;
    	      this.mysqlxZstdDefaultCompressionLevel = defaults.mysqlxZstdDefaultCompressionLevel;
    	      this.mysqlxZstdMaxClientCompressionLevel = defaults.mysqlxZstdMaxClientCompressionLevel;
    	      this.netReadTimeout = defaults.netReadTimeout;
    	      this.netWriteTimeout = defaults.netWriteTimeout;
    	      this.optimizerSwitch = defaults.optimizerSwitch;
    	      this.parserMaxMemSize = defaults.parserMaxMemSize;
    	      this.queryAllocBlockSize = defaults.queryAllocBlockSize;
    	      this.queryPreallocSize = defaults.queryPreallocSize;
    	      this.rangeOptimizerMaxMemSize = defaults.rangeOptimizerMaxMemSize;
    	      this.regexpTimeLimit = defaults.regexpTimeLimit;
    	      this.relayLogSpaceLimit = defaults.relayLogSpaceLimit;
    	      this.replicaNetTimeout = defaults.replicaNetTimeout;
    	      this.replicaParallelWorkers = defaults.replicaParallelWorkers;
    	      this.replicaTypeConversions = defaults.replicaTypeConversions;
    	      this.requireSecureTransport = defaults.requireSecureTransport;
    	      this.skipNameResolve = defaults.skipNameResolve;
    	      this.sortBufferSize = defaults.sortBufferSize;
    	      this.sqlGenerateInvisiblePrimaryKey = defaults.sqlGenerateInvisiblePrimaryKey;
    	      this.sqlMode = defaults.sqlMode;
    	      this.sqlRequirePrimaryKey = defaults.sqlRequirePrimaryKey;
    	      this.sqlWarnings = defaults.sqlWarnings;
    	      this.tableDefinitionCache = defaults.tableDefinitionCache;
    	      this.tableOpenCache = defaults.tableOpenCache;
    	      this.temptableMaxRam = defaults.temptableMaxRam;
    	      this.threadPoolDedicatedListeners = defaults.threadPoolDedicatedListeners;
    	      this.threadPoolMaxTransactionsLimit = defaults.threadPoolMaxTransactionsLimit;
    	      this.threadPoolQueryThreadsPerGroup = defaults.threadPoolQueryThreadsPerGroup;
    	      this.threadPoolSize = defaults.threadPoolSize;
    	      this.threadPoolTransactionDelay = defaults.threadPoolTransactionDelay;
    	      this.timeZone = defaults.timeZone;
    	      this.tmpTableSize = defaults.tmpTableSize;
    	      this.transactionIsolation = defaults.transactionIsolation;
    	      this.waitTimeout = defaults.waitTimeout;
        }

        @CustomType.Setter
        public Builder autoIncrementIncrement(Integer autoIncrementIncrement) {
            if (autoIncrementIncrement == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "autoIncrementIncrement");
            }
            this.autoIncrementIncrement = autoIncrementIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder autoIncrementOffset(Integer autoIncrementOffset) {
            if (autoIncrementOffset == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "autoIncrementOffset");
            }
            this.autoIncrementOffset = autoIncrementOffset;
            return this;
        }
        @CustomType.Setter
        public Builder autocommit(Boolean autocommit) {
            if (autocommit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "autocommit");
            }
            this.autocommit = autocommit;
            return this;
        }
        @CustomType.Setter
        public Builder bigTables(Boolean bigTables) {
            if (bigTables == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "bigTables");
            }
            this.bigTables = bigTables;
            return this;
        }
        @CustomType.Setter
        public Builder binlogExpireLogsSeconds(Integer binlogExpireLogsSeconds) {
            if (binlogExpireLogsSeconds == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogExpireLogsSeconds");
            }
            this.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder binlogGroupCommitSyncDelay(Integer binlogGroupCommitSyncDelay) {
            if (binlogGroupCommitSyncDelay == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogGroupCommitSyncDelay");
            }
            this.binlogGroupCommitSyncDelay = binlogGroupCommitSyncDelay;
            return this;
        }
        @CustomType.Setter
        public Builder binlogGroupCommitSyncNoDelayCount(Integer binlogGroupCommitSyncNoDelayCount) {
            if (binlogGroupCommitSyncNoDelayCount == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogGroupCommitSyncNoDelayCount");
            }
            this.binlogGroupCommitSyncNoDelayCount = binlogGroupCommitSyncNoDelayCount;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowMetadata(String binlogRowMetadata) {
            if (binlogRowMetadata == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogRowMetadata");
            }
            this.binlogRowMetadata = binlogRowMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowValueOptions(String binlogRowValueOptions) {
            if (binlogRowValueOptions == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogRowValueOptions");
            }
            this.binlogRowValueOptions = binlogRowValueOptions;
            return this;
        }
        @CustomType.Setter
        public Builder binlogTransactionCompression(Boolean binlogTransactionCompression) {
            if (binlogTransactionCompression == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "binlogTransactionCompression");
            }
            this.binlogTransactionCompression = binlogTransactionCompression;
            return this;
        }
        @CustomType.Setter
        public Builder blockEncryptionMode(String blockEncryptionMode) {
            if (blockEncryptionMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "blockEncryptionMode");
            }
            this.blockEncryptionMode = blockEncryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder characterSetServer(String characterSetServer) {
            if (characterSetServer == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "characterSetServer");
            }
            this.characterSetServer = characterSetServer;
            return this;
        }
        @CustomType.Setter
        public Builder collationServer(String collationServer) {
            if (collationServer == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "collationServer");
            }
            this.collationServer = collationServer;
            return this;
        }
        @CustomType.Setter
        public Builder completionType(String completionType) {
            if (completionType == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "completionType");
            }
            this.completionType = completionType;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(Integer connectTimeout) {
            if (connectTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "connectTimeout");
            }
            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryChunkSize(Integer connectionMemoryChunkSize) {
            if (connectionMemoryChunkSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "connectionMemoryChunkSize");
            }
            this.connectionMemoryChunkSize = connectionMemoryChunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryLimit(String connectionMemoryLimit) {
            if (connectionMemoryLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "connectionMemoryLimit");
            }
            this.connectionMemoryLimit = connectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder cteMaxRecursionDepth(String cteMaxRecursionDepth) {
            if (cteMaxRecursionDepth == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "cteMaxRecursionDepth");
            }
            this.cteMaxRecursionDepth = cteMaxRecursionDepth;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAuthenticationPlugin(String defaultAuthenticationPlugin) {
            if (defaultAuthenticationPlugin == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "defaultAuthenticationPlugin");
            }
            this.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder explainFormat(String explainFormat) {
            if (explainFormat == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "explainFormat");
            }
            this.explainFormat = explainFormat;
            return this;
        }
        @CustomType.Setter
        public Builder explicitDefaultsForTimestamp(Boolean explicitDefaultsForTimestamp) {
            if (explicitDefaultsForTimestamp == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "explicitDefaultsForTimestamp");
            }
            this.explicitDefaultsForTimestamp = explicitDefaultsForTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder foreignKeyChecks(Boolean foreignKeyChecks) {
            if (foreignKeyChecks == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "foreignKeyChecks");
            }
            this.foreignKeyChecks = foreignKeyChecks;
            return this;
        }
        @CustomType.Setter
        public Builder generatedRandomPasswordLength(Integer generatedRandomPasswordLength) {
            if (generatedRandomPasswordLength == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "generatedRandomPasswordLength");
            }
            this.generatedRandomPasswordLength = generatedRandomPasswordLength;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryLimit(String globalConnectionMemoryLimit) {
            if (globalConnectionMemoryLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "globalConnectionMemoryLimit");
            }
            this.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryTracking(Boolean globalConnectionMemoryTracking) {
            if (globalConnectionMemoryTracking == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "globalConnectionMemoryTracking");
            }
            this.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            return this;
        }
        @CustomType.Setter
        public Builder groupConcatMaxLen(String groupConcatMaxLen) {
            if (groupConcatMaxLen == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "groupConcatMaxLen");
            }
            this.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }
        @CustomType.Setter
        public Builder groupReplicationConsistency(String groupReplicationConsistency) {
            if (groupReplicationConsistency == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "groupReplicationConsistency");
            }
            this.groupReplicationConsistency = groupReplicationConsistency;
            return this;
        }
        @CustomType.Setter
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            if (informationSchemaStatsExpiry == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "informationSchemaStatsExpiry");
            }
            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder innodbAdaptiveHashIndex(Boolean innodbAdaptiveHashIndex) {
            if (innodbAdaptiveHashIndex == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbAdaptiveHashIndex");
            }
            this.innodbAdaptiveHashIndex = innodbAdaptiveHashIndex;
            return this;
        }
        @CustomType.Setter
        public Builder innodbAutoincLockMode(Integer innodbAutoincLockMode) {
            if (innodbAutoincLockMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbAutoincLockMode");
            }
            this.innodbAutoincLockMode = innodbAutoincLockMode;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolDumpPct(Integer innodbBufferPoolDumpPct) {
            if (innodbBufferPoolDumpPct == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbBufferPoolDumpPct");
            }
            this.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolInstances(Integer innodbBufferPoolInstances) {
            if (innodbBufferPoolInstances == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbBufferPoolInstances");
            }
            this.innodbBufferPoolInstances = innodbBufferPoolInstances;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolSize(String innodbBufferPoolSize) {
            if (innodbBufferPoolSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbBufferPoolSize");
            }
            this.innodbBufferPoolSize = innodbBufferPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbChangeBuffering(String innodbChangeBuffering) {
            if (innodbChangeBuffering == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbChangeBuffering");
            }
            this.innodbChangeBuffering = innodbChangeBuffering;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlBufferSize(String innodbDdlBufferSize) {
            if (innodbDdlBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbDdlBufferSize");
            }
            this.innodbDdlBufferSize = innodbDdlBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlThreads(Integer innodbDdlThreads) {
            if (innodbDdlThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbDdlThreads");
            }
            this.innodbDdlThreads = innodbDdlThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtEnableStopword(Boolean innodbFtEnableStopword) {
            if (innodbFtEnableStopword == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtEnableStopword");
            }
            this.innodbFtEnableStopword = innodbFtEnableStopword;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMaxTokenSize(Integer innodbFtMaxTokenSize) {
            if (innodbFtMaxTokenSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtMaxTokenSize");
            }
            this.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            if (innodbFtMinTokenSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtMinTokenSize");
            }
            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtNumWordOptimize(Integer innodbFtNumWordOptimize) {
            if (innodbFtNumWordOptimize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtNumWordOptimize");
            }
            this.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtResultCacheLimit(String innodbFtResultCacheLimit) {
            if (innodbFtResultCacheLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtResultCacheLimit");
            }
            this.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            if (innodbFtServerStopwordTable == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbFtServerStopwordTable");
            }
            this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            if (innodbLockWaitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbLockWaitTimeout");
            }
            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLogWriterThreads(Boolean innodbLogWriterThreads) {
            if (innodbLogWriterThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbLogWriterThreads");
            }
            this.innodbLogWriterThreads = innodbLogWriterThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLag(String innodbMaxPurgeLag) {
            if (innodbMaxPurgeLag == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbMaxPurgeLag");
            }
            this.innodbMaxPurgeLag = innodbMaxPurgeLag;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLagDelay(Integer innodbMaxPurgeLagDelay) {
            if (innodbMaxPurgeLagDelay == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbMaxPurgeLagDelay");
            }
            this.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            return this;
        }
        @CustomType.Setter
        public Builder innodbNumaInterleave(Boolean innodbNumaInterleave) {
            if (innodbNumaInterleave == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbNumaInterleave");
            }
            this.innodbNumaInterleave = innodbNumaInterleave;
            return this;
        }
        @CustomType.Setter
        public Builder innodbOnlineAlterLogMaxSize(String innodbOnlineAlterLogMaxSize) {
            if (innodbOnlineAlterLogMaxSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbOnlineAlterLogMaxSize");
            }
            this.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbRedoLogCapacity(String innodbRedoLogCapacity) {
            if (innodbRedoLogCapacity == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbRedoLogCapacity");
            }
            this.innodbRedoLogCapacity = innodbRedoLogCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            if (innodbRollbackOnTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbRollbackOnTimeout");
            }
            this.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbSortBufferSize(Integer innodbSortBufferSize) {
            if (innodbSortBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbSortBufferSize");
            }
            this.innodbSortBufferSize = innodbSortBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsPersistentSamplePages(String innodbStatsPersistentSamplePages) {
            if (innodbStatsPersistentSamplePages == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbStatsPersistentSamplePages");
            }
            this.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsTransientSamplePages(String innodbStatsTransientSamplePages) {
            if (innodbStatsTransientSamplePages == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbStatsTransientSamplePages");
            }
            this.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStrictMode(Boolean innodbStrictMode) {
            if (innodbStrictMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbStrictMode");
            }
            this.innodbStrictMode = innodbStrictMode;
            return this;
        }
        @CustomType.Setter
        public Builder innodbUndoLogTruncate(Boolean innodbUndoLogTruncate) {
            if (innodbUndoLogTruncate == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "innodbUndoLogTruncate");
            }
            this.innodbUndoLogTruncate = innodbUndoLogTruncate;
            return this;
        }
        @CustomType.Setter
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            if (interactiveTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "interactiveTimeout");
            }
            this.interactiveTimeout = interactiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder joinBufferSize(String joinBufferSize) {
            if (joinBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "joinBufferSize");
            }
            this.joinBufferSize = joinBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder localInfile(Boolean localInfile) {
            if (localInfile == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "localInfile");
            }
            this.localInfile = localInfile;
            return this;
        }
        @CustomType.Setter
        public Builder longQueryTime(Integer longQueryTime) {
            if (longQueryTime == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "longQueryTime");
            }
            this.longQueryTime = longQueryTime;
            return this;
        }
        @CustomType.Setter
        public Builder mandatoryRoles(String mandatoryRoles) {
            if (mandatoryRoles == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mandatoryRoles");
            }
            this.mandatoryRoles = mandatoryRoles;
            return this;
        }
        @CustomType.Setter
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            if (maxAllowedPacket == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxAllowedPacket");
            }
            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder maxBinlogCacheSize(String maxBinlogCacheSize) {
            if (maxBinlogCacheSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxBinlogCacheSize");
            }
            this.maxBinlogCacheSize = maxBinlogCacheSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectErrors(String maxConnectErrors) {
            if (maxConnectErrors == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxConnectErrors");
            }
            this.maxConnectErrors = maxConnectErrors;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxExecutionTime(String maxExecutionTime) {
            if (maxExecutionTime == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxExecutionTime");
            }
            this.maxExecutionTime = maxExecutionTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxHeapTableSize(String maxHeapTableSize) {
            if (maxHeapTableSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxHeapTableSize");
            }
            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxPreparedStmtCount(Integer maxPreparedStmtCount) {
            if (maxPreparedStmtCount == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxPreparedStmtCount");
            }
            this.maxPreparedStmtCount = maxPreparedStmtCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxSeeksForKey(String maxSeeksForKey) {
            if (maxSeeksForKey == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxSeeksForKey");
            }
            this.maxSeeksForKey = maxSeeksForKey;
            return this;
        }
        @CustomType.Setter
        public Builder maxUserConnections(String maxUserConnections) {
            if (maxUserConnections == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "maxUserConnections");
            }
            this.maxUserConnections = maxUserConnections;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlFirewallMode(Boolean mysqlFirewallMode) {
            if (mysqlFirewallMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlFirewallMode");
            }
            this.mysqlFirewallMode = mysqlFirewallMode;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlZstdDefaultCompressionLevel(Integer mysqlZstdDefaultCompressionLevel) {
            if (mysqlZstdDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlZstdDefaultCompressionLevel");
            }
            this.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxConnectTimeout(Integer mysqlxConnectTimeout) {
            if (mysqlxConnectTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxConnectTimeout");
            }
            this.mysqlxConnectTimeout = mysqlxConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateDefaultCompressionLevel(Integer mysqlxDeflateDefaultCompressionLevel) {
            if (mysqlxDeflateDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxDeflateDefaultCompressionLevel");
            }
            this.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateMaxClientCompressionLevel(Integer mysqlxDeflateMaxClientCompressionLevel) {
            if (mysqlxDeflateMaxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxDeflateMaxClientCompressionLevel");
            }
            this.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDocumentIdUniquePrefix(Integer mysqlxDocumentIdUniquePrefix) {
            if (mysqlxDocumentIdUniquePrefix == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxDocumentIdUniquePrefix");
            }
            this.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxEnableHelloNotice(Boolean mysqlxEnableHelloNotice) {
            if (mysqlxEnableHelloNotice == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxEnableHelloNotice");
            }
            this.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxIdleWorkerThreadTimeout(Integer mysqlxIdleWorkerThreadTimeout) {
            if (mysqlxIdleWorkerThreadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxIdleWorkerThreadTimeout");
            }
            this.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxInteractiveTimeout(Integer mysqlxInteractiveTimeout) {
            if (mysqlxInteractiveTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxInteractiveTimeout");
            }
            this.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4defaultCompressionLevel(Integer mysqlxLz4defaultCompressionLevel) {
            if (mysqlxLz4defaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxLz4defaultCompressionLevel");
            }
            this.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4maxClientCompressionLevel(Integer mysqlxLz4maxClientCompressionLevel) {
            if (mysqlxLz4maxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxLz4maxClientCompressionLevel");
            }
            this.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMaxAllowedPacket(Integer mysqlxMaxAllowedPacket) {
            if (mysqlxMaxAllowedPacket == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxMaxAllowedPacket");
            }
            this.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMinWorkerThreads(Integer mysqlxMinWorkerThreads) {
            if (mysqlxMinWorkerThreads == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxMinWorkerThreads");
            }
            this.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxReadTimeout(Integer mysqlxReadTimeout) {
            if (mysqlxReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxReadTimeout");
            }
            this.mysqlxReadTimeout = mysqlxReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWaitTimeout(Integer mysqlxWaitTimeout) {
            if (mysqlxWaitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxWaitTimeout");
            }
            this.mysqlxWaitTimeout = mysqlxWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWriteTimeout(Integer mysqlxWriteTimeout) {
            if (mysqlxWriteTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxWriteTimeout");
            }
            this.mysqlxWriteTimeout = mysqlxWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdDefaultCompressionLevel(Integer mysqlxZstdDefaultCompressionLevel) {
            if (mysqlxZstdDefaultCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxZstdDefaultCompressionLevel");
            }
            this.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdMaxClientCompressionLevel(Integer mysqlxZstdMaxClientCompressionLevel) {
            if (mysqlxZstdMaxClientCompressionLevel == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "mysqlxZstdMaxClientCompressionLevel");
            }
            this.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder netReadTimeout(Integer netReadTimeout) {
            if (netReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "netReadTimeout");
            }
            this.netReadTimeout = netReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            if (netWriteTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "netWriteTimeout");
            }
            this.netWriteTimeout = netWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder optimizerSwitch(String optimizerSwitch) {
            if (optimizerSwitch == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "optimizerSwitch");
            }
            this.optimizerSwitch = optimizerSwitch;
            return this;
        }
        @CustomType.Setter
        public Builder parserMaxMemSize(String parserMaxMemSize) {
            if (parserMaxMemSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "parserMaxMemSize");
            }
            this.parserMaxMemSize = parserMaxMemSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryAllocBlockSize(String queryAllocBlockSize) {
            if (queryAllocBlockSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "queryAllocBlockSize");
            }
            this.queryAllocBlockSize = queryAllocBlockSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryPreallocSize(String queryPreallocSize) {
            if (queryPreallocSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "queryPreallocSize");
            }
            this.queryPreallocSize = queryPreallocSize;
            return this;
        }
        @CustomType.Setter
        public Builder rangeOptimizerMaxMemSize(String rangeOptimizerMaxMemSize) {
            if (rangeOptimizerMaxMemSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "rangeOptimizerMaxMemSize");
            }
            this.rangeOptimizerMaxMemSize = rangeOptimizerMaxMemSize;
            return this;
        }
        @CustomType.Setter
        public Builder regexpTimeLimit(Integer regexpTimeLimit) {
            if (regexpTimeLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "regexpTimeLimit");
            }
            this.regexpTimeLimit = regexpTimeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder relayLogSpaceLimit(String relayLogSpaceLimit) {
            if (relayLogSpaceLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "relayLogSpaceLimit");
            }
            this.relayLogSpaceLimit = relayLogSpaceLimit;
            return this;
        }
        @CustomType.Setter
        public Builder replicaNetTimeout(Integer replicaNetTimeout) {
            if (replicaNetTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "replicaNetTimeout");
            }
            this.replicaNetTimeout = replicaNetTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder replicaParallelWorkers(Integer replicaParallelWorkers) {
            if (replicaParallelWorkers == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "replicaParallelWorkers");
            }
            this.replicaParallelWorkers = replicaParallelWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder replicaTypeConversions(String replicaTypeConversions) {
            if (replicaTypeConversions == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "replicaTypeConversions");
            }
            this.replicaTypeConversions = replicaTypeConversions;
            return this;
        }
        @CustomType.Setter
        public Builder requireSecureTransport(Boolean requireSecureTransport) {
            if (requireSecureTransport == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "requireSecureTransport");
            }
            this.requireSecureTransport = requireSecureTransport;
            return this;
        }
        @CustomType.Setter
        public Builder skipNameResolve(Boolean skipNameResolve) {
            if (skipNameResolve == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "skipNameResolve");
            }
            this.skipNameResolve = skipNameResolve;
            return this;
        }
        @CustomType.Setter
        public Builder sortBufferSize(String sortBufferSize) {
            if (sortBufferSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "sortBufferSize");
            }
            this.sortBufferSize = sortBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder sqlGenerateInvisiblePrimaryKey(Boolean sqlGenerateInvisiblePrimaryKey) {
            if (sqlGenerateInvisiblePrimaryKey == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "sqlGenerateInvisiblePrimaryKey");
            }
            this.sqlGenerateInvisiblePrimaryKey = sqlGenerateInvisiblePrimaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder sqlMode(String sqlMode) {
            if (sqlMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "sqlMode");
            }
            this.sqlMode = sqlMode;
            return this;
        }
        @CustomType.Setter
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            if (sqlRequirePrimaryKey == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "sqlRequirePrimaryKey");
            }
            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder sqlWarnings(Boolean sqlWarnings) {
            if (sqlWarnings == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "sqlWarnings");
            }
            this.sqlWarnings = sqlWarnings;
            return this;
        }
        @CustomType.Setter
        public Builder tableDefinitionCache(Integer tableDefinitionCache) {
            if (tableDefinitionCache == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "tableDefinitionCache");
            }
            this.tableDefinitionCache = tableDefinitionCache;
            return this;
        }
        @CustomType.Setter
        public Builder tableOpenCache(Integer tableOpenCache) {
            if (tableOpenCache == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "tableOpenCache");
            }
            this.tableOpenCache = tableOpenCache;
            return this;
        }
        @CustomType.Setter
        public Builder temptableMaxRam(String temptableMaxRam) {
            if (temptableMaxRam == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "temptableMaxRam");
            }
            this.temptableMaxRam = temptableMaxRam;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolDedicatedListeners(Boolean threadPoolDedicatedListeners) {
            if (threadPoolDedicatedListeners == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "threadPoolDedicatedListeners");
            }
            this.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolMaxTransactionsLimit(Integer threadPoolMaxTransactionsLimit) {
            if (threadPoolMaxTransactionsLimit == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "threadPoolMaxTransactionsLimit");
            }
            this.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolQueryThreadsPerGroup(Integer threadPoolQueryThreadsPerGroup) {
            if (threadPoolQueryThreadsPerGroup == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "threadPoolQueryThreadsPerGroup");
            }
            this.threadPoolQueryThreadsPerGroup = threadPoolQueryThreadsPerGroup;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolSize(Integer threadPoolSize) {
            if (threadPoolSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "threadPoolSize");
            }
            this.threadPoolSize = threadPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolTransactionDelay(Integer threadPoolTransactionDelay) {
            if (threadPoolTransactionDelay == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "threadPoolTransactionDelay");
            }
            this.threadPoolTransactionDelay = threadPoolTransactionDelay;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder tmpTableSize(String tmpTableSize) {
            if (tmpTableSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "tmpTableSize");
            }
            this.tmpTableSize = tmpTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder transactionIsolation(String transactionIsolation) {
            if (transactionIsolation == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "transactionIsolation");
            }
            this.transactionIsolation = transactionIsolation;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeout(Integer waitTimeout) {
            if (waitTimeout == null) {
              throw new MissingRequiredPropertyException("GetMysqlConfigurationsConfigurationVariable", "waitTimeout");
            }
            this.waitTimeout = waitTimeout;
            return this;
        }
        public GetMysqlConfigurationsConfigurationVariable build() {
            final var _resultValue = new GetMysqlConfigurationsConfigurationVariable();
            _resultValue.autoIncrementIncrement = autoIncrementIncrement;
            _resultValue.autoIncrementOffset = autoIncrementOffset;
            _resultValue.autocommit = autocommit;
            _resultValue.bigTables = bigTables;
            _resultValue.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            _resultValue.binlogGroupCommitSyncDelay = binlogGroupCommitSyncDelay;
            _resultValue.binlogGroupCommitSyncNoDelayCount = binlogGroupCommitSyncNoDelayCount;
            _resultValue.binlogRowMetadata = binlogRowMetadata;
            _resultValue.binlogRowValueOptions = binlogRowValueOptions;
            _resultValue.binlogTransactionCompression = binlogTransactionCompression;
            _resultValue.blockEncryptionMode = blockEncryptionMode;
            _resultValue.characterSetServer = characterSetServer;
            _resultValue.collationServer = collationServer;
            _resultValue.completionType = completionType;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.connectionMemoryChunkSize = connectionMemoryChunkSize;
            _resultValue.connectionMemoryLimit = connectionMemoryLimit;
            _resultValue.cteMaxRecursionDepth = cteMaxRecursionDepth;
            _resultValue.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            _resultValue.explainFormat = explainFormat;
            _resultValue.explicitDefaultsForTimestamp = explicitDefaultsForTimestamp;
            _resultValue.foreignKeyChecks = foreignKeyChecks;
            _resultValue.generatedRandomPasswordLength = generatedRandomPasswordLength;
            _resultValue.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            _resultValue.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            _resultValue.groupConcatMaxLen = groupConcatMaxLen;
            _resultValue.groupReplicationConsistency = groupReplicationConsistency;
            _resultValue.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            _resultValue.innodbAdaptiveHashIndex = innodbAdaptiveHashIndex;
            _resultValue.innodbAutoincLockMode = innodbAutoincLockMode;
            _resultValue.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            _resultValue.innodbBufferPoolInstances = innodbBufferPoolInstances;
            _resultValue.innodbBufferPoolSize = innodbBufferPoolSize;
            _resultValue.innodbChangeBuffering = innodbChangeBuffering;
            _resultValue.innodbDdlBufferSize = innodbDdlBufferSize;
            _resultValue.innodbDdlThreads = innodbDdlThreads;
            _resultValue.innodbFtEnableStopword = innodbFtEnableStopword;
            _resultValue.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            _resultValue.innodbFtMinTokenSize = innodbFtMinTokenSize;
            _resultValue.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            _resultValue.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            _resultValue.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            _resultValue.innodbLockWaitTimeout = innodbLockWaitTimeout;
            _resultValue.innodbLogWriterThreads = innodbLogWriterThreads;
            _resultValue.innodbMaxPurgeLag = innodbMaxPurgeLag;
            _resultValue.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            _resultValue.innodbNumaInterleave = innodbNumaInterleave;
            _resultValue.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            _resultValue.innodbRedoLogCapacity = innodbRedoLogCapacity;
            _resultValue.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            _resultValue.innodbSortBufferSize = innodbSortBufferSize;
            _resultValue.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            _resultValue.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            _resultValue.innodbStrictMode = innodbStrictMode;
            _resultValue.innodbUndoLogTruncate = innodbUndoLogTruncate;
            _resultValue.interactiveTimeout = interactiveTimeout;
            _resultValue.joinBufferSize = joinBufferSize;
            _resultValue.localInfile = localInfile;
            _resultValue.longQueryTime = longQueryTime;
            _resultValue.mandatoryRoles = mandatoryRoles;
            _resultValue.maxAllowedPacket = maxAllowedPacket;
            _resultValue.maxBinlogCacheSize = maxBinlogCacheSize;
            _resultValue.maxConnectErrors = maxConnectErrors;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxExecutionTime = maxExecutionTime;
            _resultValue.maxHeapTableSize = maxHeapTableSize;
            _resultValue.maxPreparedStmtCount = maxPreparedStmtCount;
            _resultValue.maxSeeksForKey = maxSeeksForKey;
            _resultValue.maxUserConnections = maxUserConnections;
            _resultValue.mysqlFirewallMode = mysqlFirewallMode;
            _resultValue.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            _resultValue.mysqlxConnectTimeout = mysqlxConnectTimeout;
            _resultValue.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            _resultValue.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            _resultValue.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            _resultValue.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            _resultValue.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            _resultValue.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            _resultValue.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            _resultValue.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            _resultValue.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            _resultValue.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            _resultValue.mysqlxReadTimeout = mysqlxReadTimeout;
            _resultValue.mysqlxWaitTimeout = mysqlxWaitTimeout;
            _resultValue.mysqlxWriteTimeout = mysqlxWriteTimeout;
            _resultValue.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            _resultValue.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            _resultValue.netReadTimeout = netReadTimeout;
            _resultValue.netWriteTimeout = netWriteTimeout;
            _resultValue.optimizerSwitch = optimizerSwitch;
            _resultValue.parserMaxMemSize = parserMaxMemSize;
            _resultValue.queryAllocBlockSize = queryAllocBlockSize;
            _resultValue.queryPreallocSize = queryPreallocSize;
            _resultValue.rangeOptimizerMaxMemSize = rangeOptimizerMaxMemSize;
            _resultValue.regexpTimeLimit = regexpTimeLimit;
            _resultValue.relayLogSpaceLimit = relayLogSpaceLimit;
            _resultValue.replicaNetTimeout = replicaNetTimeout;
            _resultValue.replicaParallelWorkers = replicaParallelWorkers;
            _resultValue.replicaTypeConversions = replicaTypeConversions;
            _resultValue.requireSecureTransport = requireSecureTransport;
            _resultValue.skipNameResolve = skipNameResolve;
            _resultValue.sortBufferSize = sortBufferSize;
            _resultValue.sqlGenerateInvisiblePrimaryKey = sqlGenerateInvisiblePrimaryKey;
            _resultValue.sqlMode = sqlMode;
            _resultValue.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            _resultValue.sqlWarnings = sqlWarnings;
            _resultValue.tableDefinitionCache = tableDefinitionCache;
            _resultValue.tableOpenCache = tableOpenCache;
            _resultValue.temptableMaxRam = temptableMaxRam;
            _resultValue.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            _resultValue.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            _resultValue.threadPoolQueryThreadsPerGroup = threadPoolQueryThreadsPerGroup;
            _resultValue.threadPoolSize = threadPoolSize;
            _resultValue.threadPoolTransactionDelay = threadPoolTransactionDelay;
            _resultValue.timeZone = timeZone;
            _resultValue.tmpTableSize = tmpTableSize;
            _resultValue.transactionIsolation = transactionIsolation;
            _resultValue.waitTimeout = waitTimeout;
            return _resultValue;
        }
    }
}
