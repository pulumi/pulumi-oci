// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemBackupPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemChannel;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemCurrentPlacement;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemCustomerContact;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemDataStorage;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemEncryptData;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemEndpoint;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemHeatWaveCluster;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemMaintenance;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemReadEndpoint;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemRest;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemSecureConnection;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlDbSystemsDbSystem {
    /**
     * @return The access mode indicating if the database access is unrestricted (to all MySQL user accounts),  or restricted (to only certain users with specific privileges):
     * * UNRESTRICTED: the access to the database is not restricted;
     * * RESTRICTED: the access is allowed only to users with specific privileges;  RESTRICTED will correspond to setting the MySQL system variable  [offlineMode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
     * 
     */
    private String accessMode;
    private String adminPassword;
    private String adminUsername;
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    private String availabilityDomain;
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemChannel> channels;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The requested Configuration instance.
     * 
     */
    private String configurationId;
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    private String crashRecovery;
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
    /**
     * @return The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemCustomerContact> customerContacts;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private Integer dataStorageSizeInGb;
    /**
     * @return Data Storage information.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemDataStorage> dataStorages;
    /**
     * @return Filter DB Systems by their Database Management configuration.
     * 
     */
    private String databaseManagement;
    /**
     * @return The database mode indicating the types of statements that are allowed to run in the the DB system. This mode applies only to statements run by user connections. Replicated write statements continue  to be allowed regardless of the DatabaseMode.
     * * READ_WRITE: allow running read and write statements on the DB system;
     * * READ_ONLY: only allow running read statements on the DB system.
     * 
     */
    private String databaseMode;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
    /**
     * @return User-provided data about the DB System.
     * 
     */
    private String description;
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Encrypt data details.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemEncryptData> encryptDatas;
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    private String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    private String hostnameLabel;
    /**
     * @return The OCID of the DB System.
     * 
     */
    private String id;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private String ipAddress;
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    private Boolean isHeatWaveClusterAttached;
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    private Boolean isHighlyAvailable;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     */
    private String mysqlVersion;
    /**
     * @return Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails;
    /**
     * @return The port for REST to listen on. Supported port numbers are 443 and from 1024 to 65535.
     * 
     */
    private Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private Integer portX;
    /**
     * @return The read endpoint of a DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemReadEndpoint> readEndpoints;
    /**
     * @return REST configuration details.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemRest> rests;
    /**
     * @return Secure connection configuration details.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemSecureConnection> secureConnections;
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    private String shapeName;
    private String shutdownType;
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    private List<GetMysqlDbSystemsDbSystemSource> sources;
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    private String state;
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    private String subnetId;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the DB System was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DB System was last updated.
     * 
     */
    private String timeUpdated;

    private GetMysqlDbSystemsDbSystem() {}
    /**
     * @return The access mode indicating if the database access is unrestricted (to all MySQL user accounts),  or restricted (to only certain users with specific privileges):
     * * UNRESTRICTED: the access to the database is not restricted;
     * * RESTRICTED: the access is allowed only to users with specific privileges;  RESTRICTED will correspond to setting the MySQL system variable  [offlineMode](https://dev.mysql.com/doc/en/server-system-variables.html#sysvar_offline_mode) to ON.
     * 
     */
    public String accessMode() {
        return this.accessMode;
    }
    public String adminPassword() {
        return this.adminPassword;
    }
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies() {
        return this.backupPolicies;
    }
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemChannel> channels() {
        return this.channels;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The requested Configuration instance.
     * 
     */
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public String crashRecovery() {
        return this.crashRecovery;
    }
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements() {
        return this.currentPlacements;
    }
    /**
     * @return The list of customer email addresses that receive information from Oracle about the specified Oracle Cloud Infrastructure DB System resource.  Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators.  Up to 10 email addresses can be added to the customer contacts for a DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemCustomerContact> customerContacts() {
        return this.customerContacts;
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return Data Storage information.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemDataStorage> dataStorages() {
        return this.dataStorages;
    }
    /**
     * @return Filter DB Systems by their Database Management configuration.
     * 
     */
    public String databaseManagement() {
        return this.databaseManagement;
    }
    /**
     * @return The database mode indicating the types of statements that are allowed to run in the the DB system. This mode applies only to statements run by user connections. Replicated write statements continue  to be allowed regardless of the DatabaseMode.
     * * READ_WRITE: allow running read and write statements on the DB system;
     * * READ_ONLY: only allow running read statements on the DB system.
     * 
     */
    public String databaseMode() {
        return this.databaseMode;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies() {
        return this.deletionPolicies;
    }
    /**
     * @return User-provided data about the DB System.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Encrypt data details.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemEncryptData> encryptDatas() {
        return this.encryptDatas;
    }
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters() {
        return this.heatWaveClusters;
    }
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return The OCID of the DB System.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    public Boolean isHeatWaveClusterAttached() {
        return this.isHeatWaveClusterAttached;
    }
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    public Boolean isHighlyAvailable() {
        return this.isHighlyAvailable;
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemMaintenance> maintenances() {
        return this.maintenances;
    }
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * @return Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails() {
        return this.pointInTimeRecoveryDetails;
    }
    /**
     * @return The port for REST to listen on. Supported port numbers are 443 and from 1024 to 65535.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Integer portX() {
        return this.portX;
    }
    /**
     * @return The read endpoint of a DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemReadEndpoint> readEndpoints() {
        return this.readEndpoints;
    }
    /**
     * @return REST configuration details.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemRest> rests() {
        return this.rests;
    }
    /**
     * @return Secure connection configuration details.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemSecureConnection> secureConnections() {
        return this.secureConnections;
    }
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    public String shutdownType() {
        return this.shutdownType;
    }
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemSource> sources() {
        return this.sources;
    }
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the DB System was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DB System was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsDbSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessMode;
        private String adminPassword;
        private String adminUsername;
        private String availabilityDomain;
        private List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
        private List<GetMysqlDbSystemsDbSystemChannel> channels;
        private String compartmentId;
        private String configurationId;
        private String crashRecovery;
        private List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
        private List<GetMysqlDbSystemsDbSystemCustomerContact> customerContacts;
        private Integer dataStorageSizeInGb;
        private List<GetMysqlDbSystemsDbSystemDataStorage> dataStorages;
        private String databaseManagement;
        private String databaseMode;
        private Map<String,String> definedTags;
        private List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
        private String description;
        private String displayName;
        private List<GetMysqlDbSystemsDbSystemEncryptData> encryptDatas;
        private List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
        private String faultDomain;
        private Map<String,String> freeformTags;
        private List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
        private String hostnameLabel;
        private String id;
        private String ipAddress;
        private Boolean isHeatWaveClusterAttached;
        private Boolean isHighlyAvailable;
        private String lifecycleDetails;
        private List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
        private String mysqlVersion;
        private List<String> nsgIds;
        private List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails;
        private Integer port;
        private Integer portX;
        private List<GetMysqlDbSystemsDbSystemReadEndpoint> readEndpoints;
        private List<GetMysqlDbSystemsDbSystemRest> rests;
        private List<GetMysqlDbSystemsDbSystemSecureConnection> secureConnections;
        private String shapeName;
        private String shutdownType;
        private List<GetMysqlDbSystemsDbSystemSource> sources;
        private String state;
        private String subnetId;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetMysqlDbSystemsDbSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessMode = defaults.accessMode;
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupPolicies = defaults.backupPolicies;
    	      this.channels = defaults.channels;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.crashRecovery = defaults.crashRecovery;
    	      this.currentPlacements = defaults.currentPlacements;
    	      this.customerContacts = defaults.customerContacts;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dataStorages = defaults.dataStorages;
    	      this.databaseManagement = defaults.databaseManagement;
    	      this.databaseMode = defaults.databaseMode;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionPolicies = defaults.deletionPolicies;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.encryptDatas = defaults.encryptDatas;
    	      this.endpoints = defaults.endpoints;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.heatWaveClusters = defaults.heatWaveClusters;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isHeatWaveClusterAttached = defaults.isHeatWaveClusterAttached;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenances = defaults.maintenances;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.nsgIds = defaults.nsgIds;
    	      this.pointInTimeRecoveryDetails = defaults.pointInTimeRecoveryDetails;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.readEndpoints = defaults.readEndpoints;
    	      this.rests = defaults.rests;
    	      this.secureConnections = defaults.secureConnections;
    	      this.shapeName = defaults.shapeName;
    	      this.shutdownType = defaults.shutdownType;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder accessMode(String accessMode) {
            if (accessMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "accessMode");
            }
            this.accessMode = accessMode;
            return this;
        }
        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            if (adminPassword == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "adminPassword");
            }
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            if (adminUsername == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "adminUsername");
            }
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder backupPolicies(List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies) {
            if (backupPolicies == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "backupPolicies");
            }
            this.backupPolicies = backupPolicies;
            return this;
        }
        public Builder backupPolicies(GetMysqlDbSystemsDbSystemBackupPolicy... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }
        @CustomType.Setter
        public Builder channels(List<GetMysqlDbSystemsDbSystemChannel> channels) {
            if (channels == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "channels");
            }
            this.channels = channels;
            return this;
        }
        public Builder channels(GetMysqlDbSystemsDbSystemChannel... channels) {
            return channels(List.of(channels));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(String configurationId) {
            if (configurationId == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "configurationId");
            }
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder crashRecovery(String crashRecovery) {
            if (crashRecovery == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "crashRecovery");
            }
            this.crashRecovery = crashRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder currentPlacements(List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements) {
            if (currentPlacements == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "currentPlacements");
            }
            this.currentPlacements = currentPlacements;
            return this;
        }
        public Builder currentPlacements(GetMysqlDbSystemsDbSystemCurrentPlacement... currentPlacements) {
            return currentPlacements(List.of(currentPlacements));
        }
        @CustomType.Setter
        public Builder customerContacts(List<GetMysqlDbSystemsDbSystemCustomerContact> customerContacts) {
            if (customerContacts == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "customerContacts");
            }
            this.customerContacts = customerContacts;
            return this;
        }
        public Builder customerContacts(GetMysqlDbSystemsDbSystemCustomerContact... customerContacts) {
            return customerContacts(List.of(customerContacts));
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            if (dataStorageSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "dataStorageSizeInGb");
            }
            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorages(List<GetMysqlDbSystemsDbSystemDataStorage> dataStorages) {
            if (dataStorages == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "dataStorages");
            }
            this.dataStorages = dataStorages;
            return this;
        }
        public Builder dataStorages(GetMysqlDbSystemsDbSystemDataStorage... dataStorages) {
            return dataStorages(List.of(dataStorages));
        }
        @CustomType.Setter
        public Builder databaseManagement(String databaseManagement) {
            if (databaseManagement == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "databaseManagement");
            }
            this.databaseManagement = databaseManagement;
            return this;
        }
        @CustomType.Setter
        public Builder databaseMode(String databaseMode) {
            if (databaseMode == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "databaseMode");
            }
            this.databaseMode = databaseMode;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deletionPolicies(List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies) {
            if (deletionPolicies == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "deletionPolicies");
            }
            this.deletionPolicies = deletionPolicies;
            return this;
        }
        public Builder deletionPolicies(GetMysqlDbSystemsDbSystemDeletionPolicy... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder encryptDatas(List<GetMysqlDbSystemsDbSystemEncryptData> encryptDatas) {
            if (encryptDatas == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "encryptDatas");
            }
            this.encryptDatas = encryptDatas;
            return this;
        }
        public Builder encryptDatas(GetMysqlDbSystemsDbSystemEncryptData... encryptDatas) {
            return encryptDatas(List.of(encryptDatas));
        }
        @CustomType.Setter
        public Builder endpoints(List<GetMysqlDbSystemsDbSystemEndpoint> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetMysqlDbSystemsDbSystemEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveClusters(List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters) {
            if (heatWaveClusters == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "heatWaveClusters");
            }
            this.heatWaveClusters = heatWaveClusters;
            return this;
        }
        public Builder heatWaveClusters(GetMysqlDbSystemsDbSystemHeatWaveCluster... heatWaveClusters) {
            return heatWaveClusters(List.of(heatWaveClusters));
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            if (hostnameLabel == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "hostnameLabel");
            }
            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isHeatWaveClusterAttached(Boolean isHeatWaveClusterAttached) {
            if (isHeatWaveClusterAttached == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "isHeatWaveClusterAttached");
            }
            this.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }
        @CustomType.Setter
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            if (isHighlyAvailable == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "isHighlyAvailable");
            }
            this.isHighlyAvailable = isHighlyAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maintenances(List<GetMysqlDbSystemsDbSystemMaintenance> maintenances) {
            if (maintenances == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "maintenances");
            }
            this.maintenances = maintenances;
            return this;
        }
        public Builder maintenances(GetMysqlDbSystemsDbSystemMaintenance... maintenances) {
            return maintenances(List.of(maintenances));
        }
        @CustomType.Setter
        public Builder mysqlVersion(String mysqlVersion) {
            if (mysqlVersion == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "mysqlVersion");
            }
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder pointInTimeRecoveryDetails(List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails) {
            if (pointInTimeRecoveryDetails == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "pointInTimeRecoveryDetails");
            }
            this.pointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            return this;
        }
        public Builder pointInTimeRecoveryDetails(GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail... pointInTimeRecoveryDetails) {
            return pointInTimeRecoveryDetails(List.of(pointInTimeRecoveryDetails));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portX(Integer portX) {
            if (portX == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "portX");
            }
            this.portX = portX;
            return this;
        }
        @CustomType.Setter
        public Builder readEndpoints(List<GetMysqlDbSystemsDbSystemReadEndpoint> readEndpoints) {
            if (readEndpoints == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "readEndpoints");
            }
            this.readEndpoints = readEndpoints;
            return this;
        }
        public Builder readEndpoints(GetMysqlDbSystemsDbSystemReadEndpoint... readEndpoints) {
            return readEndpoints(List.of(readEndpoints));
        }
        @CustomType.Setter
        public Builder rests(List<GetMysqlDbSystemsDbSystemRest> rests) {
            if (rests == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "rests");
            }
            this.rests = rests;
            return this;
        }
        public Builder rests(GetMysqlDbSystemsDbSystemRest... rests) {
            return rests(List.of(rests));
        }
        @CustomType.Setter
        public Builder secureConnections(List<GetMysqlDbSystemsDbSystemSecureConnection> secureConnections) {
            if (secureConnections == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "secureConnections");
            }
            this.secureConnections = secureConnections;
            return this;
        }
        public Builder secureConnections(GetMysqlDbSystemsDbSystemSecureConnection... secureConnections) {
            return secureConnections(List.of(secureConnections));
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            if (shapeName == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "shapeName");
            }
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownType(String shutdownType) {
            if (shutdownType == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "shutdownType");
            }
            this.shutdownType = shutdownType;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetMysqlDbSystemsDbSystemSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetMysqlDbSystemsDbSystemSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMysqlDbSystemsDbSystem build() {
            final var _resultValue = new GetMysqlDbSystemsDbSystem();
            _resultValue.accessMode = accessMode;
            _resultValue.adminPassword = adminPassword;
            _resultValue.adminUsername = adminUsername;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.backupPolicies = backupPolicies;
            _resultValue.channels = channels;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configurationId = configurationId;
            _resultValue.crashRecovery = crashRecovery;
            _resultValue.currentPlacements = currentPlacements;
            _resultValue.customerContacts = customerContacts;
            _resultValue.dataStorageSizeInGb = dataStorageSizeInGb;
            _resultValue.dataStorages = dataStorages;
            _resultValue.databaseManagement = databaseManagement;
            _resultValue.databaseMode = databaseMode;
            _resultValue.definedTags = definedTags;
            _resultValue.deletionPolicies = deletionPolicies;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.encryptDatas = encryptDatas;
            _resultValue.endpoints = endpoints;
            _resultValue.faultDomain = faultDomain;
            _resultValue.freeformTags = freeformTags;
            _resultValue.heatWaveClusters = heatWaveClusters;
            _resultValue.hostnameLabel = hostnameLabel;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            _resultValue.isHighlyAvailable = isHighlyAvailable;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maintenances = maintenances;
            _resultValue.mysqlVersion = mysqlVersion;
            _resultValue.nsgIds = nsgIds;
            _resultValue.pointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            _resultValue.port = port;
            _resultValue.portX = portX;
            _resultValue.readEndpoints = readEndpoints;
            _resultValue.rests = rests;
            _resultValue.secureConnections = secureConnections;
            _resultValue.shapeName = shapeName;
            _resultValue.shutdownType = shutdownType;
            _resultValue.sources = sources;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
