// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemBackupPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemChannel;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemCurrentPlacement;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemEndpoint;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemHeatWaveCluster;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemMaintenance;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMysqlDbSystemsDbSystem {
    private @Nullable String adminPassword;
    private @Nullable String adminUsername;
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemChannel> channels;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The requested Configuration instance.
     * 
     */
    private @Nullable String configurationId;
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    private @Nullable String crashRecovery;
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private @Nullable Integer dataStorageSizeInGb;
    /**
     * @return Filter DB Systems by their Database Management configuration.
     * 
     */
    private @Nullable String databaseManagement;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
    /**
     * @return User-provided data about the DB System.
     * 
     */
    private @Nullable String description;
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    private @Nullable String hostnameLabel;
    /**
     * @return The OCID of the DB System.
     * 
     */
    private @Nullable String id;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    private @Nullable Boolean isHeatWaveClusterAttached;
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    private @Nullable Boolean isHighlyAvailable;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     */
    private @Nullable String mysqlVersion;
    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails;
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private @Nullable Integer portX;
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    private @Nullable String shapeName;
    private @Nullable String shutdownType;
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    private @Nullable List<GetMysqlDbSystemsDbSystemSource> sources;
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    private @Nullable String state;
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The date and time the DB System was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the DB System was last updated.
     * 
     */
    private @Nullable String timeUpdated;

    private GetMysqlDbSystemsDbSystem() {}
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies() {
        return this.backupPolicies == null ? List.of() : this.backupPolicies;
    }
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemChannel> channels() {
        return this.channels == null ? List.of() : this.channels;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The requested Configuration instance.
     * 
     */
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Optional<String> crashRecovery() {
        return Optional.ofNullable(this.crashRecovery);
    }
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements() {
        return this.currentPlacements == null ? List.of() : this.currentPlacements;
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Optional<Integer> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }
    /**
     * @return Filter DB Systems by their Database Management configuration.
     * 
     */
    public Optional<String> databaseManagement() {
        return Optional.ofNullable(this.databaseManagement);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies() {
        return this.deletionPolicies == null ? List.of() : this.deletionPolicies;
    }
    /**
     * @return User-provided data about the DB System.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemEndpoint> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters() {
        return this.heatWaveClusters == null ? List.of() : this.heatWaveClusters;
    }
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public Optional<String> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }
    /**
     * @return The OCID of the DB System.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    public Optional<Boolean> isHeatWaveClusterAttached() {
        return Optional.ofNullable(this.isHeatWaveClusterAttached);
    }
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    public Optional<Boolean> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemMaintenance> maintenances() {
        return this.maintenances == null ? List.of() : this.maintenances;
    }
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     */
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    /**
     * @return Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails() {
        return this.pointInTimeRecoveryDetails == null ? List.of() : this.pointInTimeRecoveryDetails;
    }
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Integer> portX() {
        return Optional.ofNullable(this.portX);
    }
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    public Optional<String> shutdownType() {
        return Optional.ofNullable(this.shutdownType);
    }
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemSource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The date and time the DB System was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the DB System was last updated.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsDbSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminUsername;
        private @Nullable String availabilityDomain;
        private @Nullable List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
        private @Nullable List<GetMysqlDbSystemsDbSystemChannel> channels;
        private @Nullable String compartmentId;
        private @Nullable String configurationId;
        private @Nullable String crashRecovery;
        private @Nullable List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
        private @Nullable Integer dataStorageSizeInGb;
        private @Nullable String databaseManagement;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
        private @Nullable String faultDomain;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
        private @Nullable String hostnameLabel;
        private @Nullable String id;
        private @Nullable String ipAddress;
        private @Nullable Boolean isHeatWaveClusterAttached;
        private @Nullable Boolean isHighlyAvailable;
        private @Nullable String lifecycleDetails;
        private @Nullable List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
        private @Nullable String mysqlVersion;
        private @Nullable List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails;
        private @Nullable Integer port;
        private @Nullable Integer portX;
        private @Nullable String shapeName;
        private @Nullable String shutdownType;
        private @Nullable List<GetMysqlDbSystemsDbSystemSource> sources;
        private @Nullable String state;
        private @Nullable String subnetId;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetMysqlDbSystemsDbSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupPolicies = defaults.backupPolicies;
    	      this.channels = defaults.channels;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.crashRecovery = defaults.crashRecovery;
    	      this.currentPlacements = defaults.currentPlacements;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.databaseManagement = defaults.databaseManagement;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionPolicies = defaults.deletionPolicies;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.heatWaveClusters = defaults.heatWaveClusters;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isHeatWaveClusterAttached = defaults.isHeatWaveClusterAttached;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenances = defaults.maintenances;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.pointInTimeRecoveryDetails = defaults.pointInTimeRecoveryDetails;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.shapeName = defaults.shapeName;
    	      this.shutdownType = defaults.shutdownType;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder backupPolicies(@Nullable List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies) {
            this.backupPolicies = backupPolicies;
            return this;
        }
        public Builder backupPolicies(GetMysqlDbSystemsDbSystemBackupPolicy... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }
        @CustomType.Setter
        public Builder channels(@Nullable List<GetMysqlDbSystemsDbSystemChannel> channels) {
            this.channels = channels;
            return this;
        }
        public Builder channels(GetMysqlDbSystemsDbSystemChannel... channels) {
            return channels(List.of(channels));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(@Nullable String configurationId) {
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder crashRecovery(@Nullable String crashRecovery) {
            this.crashRecovery = crashRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder currentPlacements(@Nullable List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements) {
            this.currentPlacements = currentPlacements;
            return this;
        }
        public Builder currentPlacements(GetMysqlDbSystemsDbSystemCurrentPlacement... currentPlacements) {
            return currentPlacements(List.of(currentPlacements));
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(@Nullable Integer dataStorageSizeInGb) {
            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagement(@Nullable String databaseManagement) {
            this.databaseManagement = databaseManagement;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deletionPolicies(@Nullable List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies) {
            this.deletionPolicies = deletionPolicies;
            return this;
        }
        public Builder deletionPolicies(GetMysqlDbSystemsDbSystemDeletionPolicy... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<GetMysqlDbSystemsDbSystemEndpoint> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetMysqlDbSystemsDbSystemEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveClusters(@Nullable List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters) {
            this.heatWaveClusters = heatWaveClusters;
            return this;
        }
        public Builder heatWaveClusters(GetMysqlDbSystemsDbSystemHeatWaveCluster... heatWaveClusters) {
            return heatWaveClusters(List.of(heatWaveClusters));
        }
        @CustomType.Setter
        public Builder hostnameLabel(@Nullable String hostnameLabel) {
            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isHeatWaveClusterAttached(@Nullable Boolean isHeatWaveClusterAttached) {
            this.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }
        @CustomType.Setter
        public Builder isHighlyAvailable(@Nullable Boolean isHighlyAvailable) {
            this.isHighlyAvailable = isHighlyAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maintenances(@Nullable List<GetMysqlDbSystemsDbSystemMaintenance> maintenances) {
            this.maintenances = maintenances;
            return this;
        }
        public Builder maintenances(GetMysqlDbSystemsDbSystemMaintenance... maintenances) {
            return maintenances(List.of(maintenances));
        }
        @CustomType.Setter
        public Builder mysqlVersion(@Nullable String mysqlVersion) {
            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pointInTimeRecoveryDetails(@Nullable List<GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail> pointInTimeRecoveryDetails) {
            this.pointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            return this;
        }
        public Builder pointInTimeRecoveryDetails(GetMysqlDbSystemsDbSystemPointInTimeRecoveryDetail... pointInTimeRecoveryDetails) {
            return pointInTimeRecoveryDetails(List.of(pointInTimeRecoveryDetails));
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portX(@Nullable Integer portX) {
            this.portX = portX;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(@Nullable String shapeName) {
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownType(@Nullable String shutdownType) {
            this.shutdownType = shutdownType;
            return this;
        }
        @CustomType.Setter
        public Builder sources(@Nullable List<GetMysqlDbSystemsDbSystemSource> sources) {
            this.sources = sources;
            return this;
        }
        public Builder sources(GetMysqlDbSystemsDbSystemSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMysqlDbSystemsDbSystem build() {
            final var o = new GetMysqlDbSystemsDbSystem();
            o.adminPassword = adminPassword;
            o.adminUsername = adminUsername;
            o.availabilityDomain = availabilityDomain;
            o.backupPolicies = backupPolicies;
            o.channels = channels;
            o.compartmentId = compartmentId;
            o.configurationId = configurationId;
            o.crashRecovery = crashRecovery;
            o.currentPlacements = currentPlacements;
            o.dataStorageSizeInGb = dataStorageSizeInGb;
            o.databaseManagement = databaseManagement;
            o.definedTags = definedTags;
            o.deletionPolicies = deletionPolicies;
            o.description = description;
            o.displayName = displayName;
            o.endpoints = endpoints;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.heatWaveClusters = heatWaveClusters;
            o.hostnameLabel = hostnameLabel;
            o.id = id;
            o.ipAddress = ipAddress;
            o.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            o.isHighlyAvailable = isHighlyAvailable;
            o.lifecycleDetails = lifecycleDetails;
            o.maintenances = maintenances;
            o.mysqlVersion = mysqlVersion;
            o.pointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            o.port = port;
            o.portX = portX;
            o.shapeName = shapeName;
            o.shutdownType = shutdownType;
            o.sources = sources;
            o.state = state;
            o.subnetId = subnetId;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
