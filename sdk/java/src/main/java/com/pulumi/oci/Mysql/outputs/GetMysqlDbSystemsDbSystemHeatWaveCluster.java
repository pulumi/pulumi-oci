// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlDbSystemsDbSystemHeatWaveCluster {
    /**
     * @return The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
     * 
     */
    private Integer clusterSize;
    /**
     * @return Lakehouse enabled status for the HeatWave cluster.
     * 
     */
    private Boolean isLakehouseEnabled;
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    private String shapeName;
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    private String state;
    /**
     * @return The date and time the DB System was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DB System was last updated.
     * 
     */
    private String timeUpdated;

    private GetMysqlDbSystemsDbSystemHeatWaveCluster() {}
    /**
     * @return The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
     * 
     */
    public Integer clusterSize() {
        return this.clusterSize;
    }
    /**
     * @return Lakehouse enabled status for the HeatWave cluster.
     * 
     */
    public Boolean isLakehouseEnabled() {
        return this.isLakehouseEnabled;
    }
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the DB System was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DB System was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsDbSystemHeatWaveCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer clusterSize;
        private Boolean isLakehouseEnabled;
        private String shapeName;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetMysqlDbSystemsDbSystemHeatWaveCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterSize = defaults.clusterSize;
    	      this.isLakehouseEnabled = defaults.isLakehouseEnabled;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder clusterSize(Integer clusterSize) {
            if (clusterSize == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "clusterSize");
            }
            this.clusterSize = clusterSize;
            return this;
        }
        @CustomType.Setter
        public Builder isLakehouseEnabled(Boolean isLakehouseEnabled) {
            if (isLakehouseEnabled == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "isLakehouseEnabled");
            }
            this.isLakehouseEnabled = isLakehouseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            if (shapeName == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "shapeName");
            }
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsDbSystemHeatWaveCluster", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMysqlDbSystemsDbSystemHeatWaveCluster build() {
            final var _resultValue = new GetMysqlDbSystemsDbSystemHeatWaveCluster();
            _resultValue.clusterSize = clusterSize;
            _resultValue.isLakehouseEnabled = isLakehouseEnabled;
            _resultValue.shapeName = shapeName;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
