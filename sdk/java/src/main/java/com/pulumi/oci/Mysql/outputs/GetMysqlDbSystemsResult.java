// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystem;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMysqlDbSystemsResult {
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    private @Nullable String configurationId;
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    private @Nullable List<String> databaseManagements;
    /**
     * @return The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return The list of db_systems.
     * 
     */
    private List<GetMysqlDbSystemsDbSystem> dbSystems;
    /**
     * @return The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetMysqlDbSystemsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    private @Nullable Boolean isHeatWaveClusterAttached;
    private @Nullable Boolean isUpToDate;
    /**
     * @return The current state of the DB System.
     * 
     */
    private @Nullable String state;

    private GetMysqlDbSystemsResult() {}
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    public List<String> databaseManagements() {
        return this.databaseManagements == null ? List.of() : this.databaseManagements;
    }
    /**
     * @return The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return The list of db_systems.
     * 
     */
    public List<GetMysqlDbSystemsDbSystem> dbSystems() {
        return this.dbSystems;
    }
    /**
     * @return The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetMysqlDbSystemsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    public Optional<Boolean> isHeatWaveClusterAttached() {
        return Optional.ofNullable(this.isHeatWaveClusterAttached);
    }
    public Optional<Boolean> isUpToDate() {
        return Optional.ofNullable(this.isUpToDate);
    }
    /**
     * @return The current state of the DB System.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String configurationId;
        private @Nullable List<String> databaseManagements;
        private @Nullable String dbSystemId;
        private List<GetMysqlDbSystemsDbSystem> dbSystems;
        private @Nullable String displayName;
        private @Nullable List<GetMysqlDbSystemsFilter> filters;
        private String id;
        private @Nullable Boolean isHeatWaveClusterAttached;
        private @Nullable Boolean isUpToDate;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetMysqlDbSystemsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.databaseManagements = defaults.databaseManagements;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbSystems = defaults.dbSystems;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isHeatWaveClusterAttached = defaults.isHeatWaveClusterAttached;
    	      this.isUpToDate = defaults.isUpToDate;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(@Nullable String configurationId) {

            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagements(@Nullable List<String> databaseManagements) {

            this.databaseManagements = databaseManagements;
            return this;
        }
        public Builder databaseManagements(String... databaseManagements) {
            return databaseManagements(List.of(databaseManagements));
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {

            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystems(List<GetMysqlDbSystemsDbSystem> dbSystems) {
            if (dbSystems == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsResult", "dbSystems");
            }
            this.dbSystems = dbSystems;
            return this;
        }
        public Builder dbSystems(GetMysqlDbSystemsDbSystem... dbSystems) {
            return dbSystems(List.of(dbSystems));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetMysqlDbSystemsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetMysqlDbSystemsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMysqlDbSystemsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isHeatWaveClusterAttached(@Nullable Boolean isHeatWaveClusterAttached) {

            this.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }
        @CustomType.Setter
        public Builder isUpToDate(@Nullable Boolean isUpToDate) {

            this.isUpToDate = isUpToDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetMysqlDbSystemsResult build() {
            final var _resultValue = new GetMysqlDbSystemsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.configurationId = configurationId;
            _resultValue.databaseManagements = databaseManagements;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.dbSystems = dbSystems;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            _resultValue.isUpToDate = isUpToDate;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
