// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotBackupPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotDataStorage;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotEndpoint;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotMaintenance;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotReadEndpoint;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotRest;
import com.pulumi.oci.Mysql.outputs.MysqlBackupDbSystemSnapshotSecureConnection;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MysqlBackupDbSystemSnapshot {
    /**
     * @return The username for the administrative user.
     * 
     */
    private @Nullable String adminUsername;
    /**
     * @return The Availability Domain where the primary DB System should be located.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies;
    /**
     * @return (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    private @Nullable String configurationId;
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    private @Nullable String crashRecovery;
    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    private @Nullable Integer dataStorageSizeInGb;
    /**
     * @return Data Storage information.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotDataStorage> dataStorages;
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    private @Nullable String databaseManagement;
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,String> definedTags;
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies;
    /**
     * @return (Updatable) A user-supplied description for the backup.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) A user-supplied display name for the backup.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotEndpoint> endpoints;
    /**
     * @return The name of the Fault Domain the DB System is located in.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,String> freeformTags;
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    private @Nullable String hostnameLabel;
    /**
     * @return OCID of the backup itself
     * 
     */
    private @Nullable String id;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    private @Nullable Boolean isHighlyAvailable;
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotMaintenance> maintenances;
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    private @Nullable String mysqlVersion;
    /**
     * @return Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    private @Nullable List<String> nsgIds;
    /**
     * @return The port for REST to listen on. Supported port numbers are 443 and from 1024 to 65535.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private @Nullable Integer portX;
    /**
     * @return The read endpoint of a DB System.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotReadEndpoint> readEndpoints;
    /**
     * @return The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     * 
     */
    private @Nullable String region;
    /**
     * @return REST configuration details.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotRest> rests;
    /**
     * @return Secure connection configuration details.
     * 
     */
    private @Nullable List<MysqlBackupDbSystemSnapshotSecureConnection> secureConnections;
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    private @Nullable String shapeName;
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    private @Nullable String subnetId;

    private MysqlBackupDbSystemSnapshot() {}
    /**
     * @return The username for the administrative user.
     * 
     */
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return The Availability Domain where the primary DB System should be located.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies() {
        return this.backupPolicies == null ? List.of() : this.backupPolicies;
    }
    /**
     * @return (Updatable) The OCID of the compartment the backup exists in.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The OCID of the Configuration to be used for Instances in this DB System.
     * 
     */
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Optional<String> crashRecovery() {
        return Optional.ofNullable(this.crashRecovery);
    }
    /**
     * @return DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
     * 
     */
    public Optional<Integer> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }
    /**
     * @return Data Storage information.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotDataStorage> dataStorages() {
        return this.dataStorages == null ? List.of() : this.dataStorages;
    }
    /**
     * @return Whether to enable monitoring via the Database Management service.
     * 
     */
    public Optional<String> databaseManagement() {
        return Optional.ofNullable(this.databaseManagement);
    }
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies() {
        return this.deletionPolicies == null ? List.of() : this.deletionPolicies;
    }
    /**
     * @return (Updatable) A user-supplied description for the backup.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) A user-supplied display name for the backup.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotEndpoint> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return The name of the Fault Domain the DB System is located in.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public Optional<String> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }
    /**
     * @return OCID of the backup itself
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return Specifies if the DB System is highly available.
     * 
     */
    public Optional<Boolean> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }
    /**
     * @return The Maintenance Policy for the DB System or Read Replica that this model is included in.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotMaintenance> maintenances() {
        return this.maintenances == null ? List.of() : this.maintenances;
    }
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public Optional<String> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }
    /**
     * @return Network Security Group OCIDs used for the VNIC attachment.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds == null ? List.of() : this.nsgIds;
    }
    /**
     * @return The port for REST to listen on. Supported port numbers are 443 and from 1024 to 65535.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Integer> portX() {
        return Optional.ofNullable(this.portX);
    }
    /**
     * @return The read endpoint of a DB System.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotReadEndpoint> readEndpoints() {
        return this.readEndpoints == null ? List.of() : this.readEndpoints;
    }
    /**
     * @return The region identifier of the region where the DB system exists. For more information, please see [Regions and Availability Domains](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return REST configuration details.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotRest> rests() {
        return this.rests == null ? List.of() : this.rests;
    }
    /**
     * @return Secure connection configuration details.
     * 
     */
    public List<MysqlBackupDbSystemSnapshotSecureConnection> secureConnections() {
        return this.secureConnections == null ? List.of() : this.secureConnections;
    }
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlBackupDbSystemSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminUsername;
        private @Nullable String availabilityDomain;
        private @Nullable List<MysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies;
        private @Nullable String compartmentId;
        private @Nullable String configurationId;
        private @Nullable String crashRecovery;
        private @Nullable Integer dataStorageSizeInGb;
        private @Nullable List<MysqlBackupDbSystemSnapshotDataStorage> dataStorages;
        private @Nullable String databaseManagement;
        private @Nullable Map<String,String> definedTags;
        private @Nullable List<MysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable List<MysqlBackupDbSystemSnapshotEndpoint> endpoints;
        private @Nullable String faultDomain;
        private @Nullable Map<String,String> freeformTags;
        private @Nullable String hostnameLabel;
        private @Nullable String id;
        private @Nullable String ipAddress;
        private @Nullable Boolean isHighlyAvailable;
        private @Nullable List<MysqlBackupDbSystemSnapshotMaintenance> maintenances;
        private @Nullable String mysqlVersion;
        private @Nullable List<String> nsgIds;
        private @Nullable Integer port;
        private @Nullable Integer portX;
        private @Nullable List<MysqlBackupDbSystemSnapshotReadEndpoint> readEndpoints;
        private @Nullable String region;
        private @Nullable List<MysqlBackupDbSystemSnapshotRest> rests;
        private @Nullable List<MysqlBackupDbSystemSnapshotSecureConnection> secureConnections;
        private @Nullable String shapeName;
        private @Nullable String subnetId;
        public Builder() {}
        public Builder(MysqlBackupDbSystemSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupPolicies = defaults.backupPolicies;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.crashRecovery = defaults.crashRecovery;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dataStorages = defaults.dataStorages;
    	      this.databaseManagement = defaults.databaseManagement;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionPolicies = defaults.deletionPolicies;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.maintenances = defaults.maintenances;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.nsgIds = defaults.nsgIds;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.readEndpoints = defaults.readEndpoints;
    	      this.region = defaults.region;
    	      this.rests = defaults.rests;
    	      this.secureConnections = defaults.secureConnections;
    	      this.shapeName = defaults.shapeName;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {

            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder backupPolicies(@Nullable List<MysqlBackupDbSystemSnapshotBackupPolicy> backupPolicies) {

            this.backupPolicies = backupPolicies;
            return this;
        }
        public Builder backupPolicies(MysqlBackupDbSystemSnapshotBackupPolicy... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(@Nullable String configurationId) {

            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder crashRecovery(@Nullable String crashRecovery) {

            this.crashRecovery = crashRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(@Nullable Integer dataStorageSizeInGb) {

            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorages(@Nullable List<MysqlBackupDbSystemSnapshotDataStorage> dataStorages) {

            this.dataStorages = dataStorages;
            return this;
        }
        public Builder dataStorages(MysqlBackupDbSystemSnapshotDataStorage... dataStorages) {
            return dataStorages(List.of(dataStorages));
        }
        @CustomType.Setter
        public Builder databaseManagement(@Nullable String databaseManagement) {

            this.databaseManagement = databaseManagement;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,String> definedTags) {

            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deletionPolicies(@Nullable List<MysqlBackupDbSystemSnapshotDeletionPolicy> deletionPolicies) {

            this.deletionPolicies = deletionPolicies;
            return this;
        }
        public Builder deletionPolicies(MysqlBackupDbSystemSnapshotDeletionPolicy... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<MysqlBackupDbSystemSnapshotEndpoint> endpoints) {

            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(MysqlBackupDbSystemSnapshotEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {

            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,String> freeformTags) {

            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(@Nullable String hostnameLabel) {

            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {

            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isHighlyAvailable(@Nullable Boolean isHighlyAvailable) {

            this.isHighlyAvailable = isHighlyAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder maintenances(@Nullable List<MysqlBackupDbSystemSnapshotMaintenance> maintenances) {

            this.maintenances = maintenances;
            return this;
        }
        public Builder maintenances(MysqlBackupDbSystemSnapshotMaintenance... maintenances) {
            return maintenances(List.of(maintenances));
        }
        @CustomType.Setter
        public Builder mysqlVersion(@Nullable String mysqlVersion) {

            this.mysqlVersion = mysqlVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(@Nullable List<String> nsgIds) {

            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portX(@Nullable Integer portX) {

            this.portX = portX;
            return this;
        }
        @CustomType.Setter
        public Builder readEndpoints(@Nullable List<MysqlBackupDbSystemSnapshotReadEndpoint> readEndpoints) {

            this.readEndpoints = readEndpoints;
            return this;
        }
        public Builder readEndpoints(MysqlBackupDbSystemSnapshotReadEndpoint... readEndpoints) {
            return readEndpoints(List.of(readEndpoints));
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder rests(@Nullable List<MysqlBackupDbSystemSnapshotRest> rests) {

            this.rests = rests;
            return this;
        }
        public Builder rests(MysqlBackupDbSystemSnapshotRest... rests) {
            return rests(List.of(rests));
        }
        @CustomType.Setter
        public Builder secureConnections(@Nullable List<MysqlBackupDbSystemSnapshotSecureConnection> secureConnections) {

            this.secureConnections = secureConnections;
            return this;
        }
        public Builder secureConnections(MysqlBackupDbSystemSnapshotSecureConnection... secureConnections) {
            return secureConnections(List.of(secureConnections));
        }
        @CustomType.Setter
        public Builder shapeName(@Nullable String shapeName) {

            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {

            this.subnetId = subnetId;
            return this;
        }
        public MysqlBackupDbSystemSnapshot build() {
            final var _resultValue = new MysqlBackupDbSystemSnapshot();
            _resultValue.adminUsername = adminUsername;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.backupPolicies = backupPolicies;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configurationId = configurationId;
            _resultValue.crashRecovery = crashRecovery;
            _resultValue.dataStorageSizeInGb = dataStorageSizeInGb;
            _resultValue.dataStorages = dataStorages;
            _resultValue.databaseManagement = databaseManagement;
            _resultValue.definedTags = definedTags;
            _resultValue.deletionPolicies = deletionPolicies;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.endpoints = endpoints;
            _resultValue.faultDomain = faultDomain;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostnameLabel = hostnameLabel;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isHighlyAvailable = isHighlyAvailable;
            _resultValue.maintenances = maintenances;
            _resultValue.mysqlVersion = mysqlVersion;
            _resultValue.nsgIds = nsgIds;
            _resultValue.port = port;
            _resultValue.portX = portX;
            _resultValue.readEndpoints = readEndpoints;
            _resultValue.region = region;
            _resultValue.rests = rests;
            _resultValue.secureConnections = secureConnections;
            _resultValue.shapeName = shapeName;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
