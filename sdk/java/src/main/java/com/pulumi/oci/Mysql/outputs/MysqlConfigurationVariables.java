// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MysqlConfigurationVariables {
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    private @Nullable Boolean autocommit;
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    private @Nullable Boolean bigTables;
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    private @Nullable Integer binlogExpireLogsSeconds;
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    private @Nullable String binlogRowMetadata;
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    private @Nullable String binlogRowValueOptions;
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    private @Nullable Boolean binlogTransactionCompression;
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    private @Nullable String completionType;
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    private @Nullable Integer connectionMemoryChunkSize;
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    private @Nullable String connectionMemoryLimit;
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    private @Nullable String cteMaxRecursionDepth;
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    private @Nullable String defaultAuthenticationPlugin;
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    private @Nullable Boolean foreignKeyChecks;
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable Integer generatedRandomPasswordLength;
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    private @Nullable String globalConnectionMemoryLimit;
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    private @Nullable Boolean globalConnectionMemoryTracking;
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    private @Nullable String groupReplicationConsistency;
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    private @Nullable Integer informationSchemaStatsExpiry;
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    private @Nullable Integer innodbBufferPoolDumpPct;
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    private @Nullable Integer innodbBufferPoolInstances;
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    private @Nullable String innodbBufferPoolSize;
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    private @Nullable String innodbDdlBufferSize;
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    private @Nullable Integer innodbDdlThreads;
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    private @Nullable Boolean innodbFtEnableStopword;
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    private @Nullable Integer innodbFtMaxTokenSize;
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    private @Nullable Integer innodbFtMinTokenSize;
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    private @Nullable Integer innodbFtNumWordOptimize;
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    private @Nullable String innodbFtResultCacheLimit;
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    private @Nullable String innodbFtServerStopwordTable;
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    private @Nullable Integer innodbLockWaitTimeout;
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    private @Nullable Boolean innodbLogWriterThreads;
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    private @Nullable String innodbMaxPurgeLag;
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    private @Nullable Integer innodbMaxPurgeLagDelay;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    private @Nullable String innodbStatsPersistentSamplePages;
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    private @Nullable String innodbStatsTransientSamplePages;
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    private @Nullable Integer interactiveTimeout;
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    private @Nullable Boolean localInfile;
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    private @Nullable String mandatoryRoles;
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    private @Nullable Integer maxAllowedPacket;
    /**
     * @return Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    private @Nullable String maxBinlogCacheSize;
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    private @Nullable String maxConnectErrors;
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    private @Nullable Integer maxConnections;
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    private @Nullable String maxExecutionTime;
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    private @Nullable String maxHeapTableSize;
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    private @Nullable Integer maxPreparedStmtCount;
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    private @Nullable Boolean mysqlFirewallMode;
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable Integer mysqlZstdDefaultCompressionLevel;
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    private @Nullable Integer mysqlxConnectTimeout;
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxDeflateDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxDeflateMaxClientCompressionLevel;
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable Integer mysqlxDocumentIdUniquePrefix;
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private @Nullable Boolean mysqlxEnableHelloNotice;
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable Integer mysqlxIdleWorkerThreadTimeout;
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    private @Nullable Integer mysqlxInteractiveTimeout;
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxLz4defaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxLz4maxClientCompressionLevel;
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    private @Nullable Integer mysqlxMaxAllowedPacket;
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable Integer mysqlxMinWorkerThreads;
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    private @Nullable Integer mysqlxReadTimeout;
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    private @Nullable Integer mysqlxWaitTimeout;
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    private @Nullable Integer mysqlxWriteTimeout;
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxZstdDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    private @Nullable Integer mysqlxZstdMaxClientCompressionLevel;
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    private @Nullable Integer netReadTimeout;
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    private @Nullable Integer netWriteTimeout;
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    private @Nullable String parserMaxMemSize;
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable String queryAllocBlockSize;
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    private @Nullable String queryPreallocSize;
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    private @Nullable Integer regexpTimeLimit;
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    private @Nullable String sortBufferSize;
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    private @Nullable String sqlMode;
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    private @Nullable Boolean sqlRequirePrimaryKey;
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    private @Nullable Boolean sqlWarnings;
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    private @Nullable Boolean threadPoolDedicatedListeners;
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    private @Nullable Integer threadPoolMaxTransactionsLimit;
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    private @Nullable String timeZone;
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    private @Nullable String tmpTableSize;
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    private @Nullable String transactionIsolation;
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable Integer waitTimeout;

    private MysqlConfigurationVariables() {}
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Optional<Boolean> autocommit() {
        return Optional.ofNullable(this.autocommit);
    }
    /**
     * @return If enabled, the server stores all temporary tables on disk rather than in memory.
     * 
     * bigTables corresponds to the MySQL server variable [big_tables](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_big_tables).
     * 
     */
    public Optional<Boolean> bigTables() {
        return Optional.ofNullable(this.bigTables);
    }
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Optional<Integer> binlogExpireLogsSeconds() {
        return Optional.ofNullable(this.binlogExpireLogsSeconds);
    }
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public Optional<String> binlogRowMetadata() {
        return Optional.ofNullable(this.binlogRowMetadata);
    }
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public Optional<String> binlogRowValueOptions() {
        return Optional.ofNullable(this.binlogRowValueOptions);
    }
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Optional<Boolean> binlogTransactionCompression() {
        return Optional.ofNullable(this.binlogTransactionCompression);
    }
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public Optional<String> completionType() {
        return Optional.ofNullable(this.completionType);
    }
    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     * 
     * connectTimeout corresponds to the MySQL system variable [connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_connect_timeout)
     * 
     * Increasing the connect_timeout value might help if clients frequently encounter errors of the form &#34;Lost connection to MySQL server at &#39;XXX&#39;, system error: errno&#34;.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return Set the chunking size for updates to the global memory usage counter Global_connection_memory.
     * 
     * connectionMemoryChunkSize corresponds to the MySQL system variable [connection_memory_chunk_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_chunk_size).
     * 
     */
    public Optional<Integer> connectionMemoryChunkSize() {
        return Optional.ofNullable(this.connectionMemoryChunkSize);
    }
    /**
     * @return Set the maximum amount of memory that can be used by a single user connection.
     * 
     * connectionMemoryLimit corresponds to the MySQL system variable [connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_connection_memory_limit).
     * 
     */
    public Optional<String> connectionMemoryLimit() {
        return Optional.ofNullable(this.connectionMemoryLimit);
    }
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public Optional<String> cteMaxRecursionDepth() {
        return Optional.ofNullable(this.cteMaxRecursionDepth);
    }
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    public Optional<String> defaultAuthenticationPlugin() {
        return Optional.ofNullable(this.defaultAuthenticationPlugin);
    }
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Optional<Boolean> foreignKeyChecks() {
        return Optional.ofNullable(this.foreignKeyChecks);
    }
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;generated_random_password_length&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'generated_random_password_length' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Integer> generatedRandomPasswordLength() {
        return Optional.ofNullable(this.generatedRandomPasswordLength);
    }
    /**
     * @return Set the total amount of memory that can be used by all user connections.
     * 
     * globalConnectionMemoryLimit corresponds to the MySQL system variable [global_connection_memory_limit](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_limit).
     * 
     */
    public Optional<String> globalConnectionMemoryLimit() {
        return Optional.ofNullable(this.globalConnectionMemoryLimit);
    }
    /**
     * @return Determines whether the MySQL server calculates Global_connection_memory.
     * 
     * globalConnectionMemoryTracking corresponds to the MySQL system variable [global_connection_memory_tracking](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_global_connection_memory_tracking).
     * 
     */
    public Optional<Boolean> globalConnectionMemoryTracking() {
        return Optional.ofNullable(this.globalConnectionMemoryTracking);
    }
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public Optional<String> groupReplicationConsistency() {
        return Optional.ofNullable(this.groupReplicationConsistency);
    }
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Optional<Integer> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }
    /**
     * @return Specifies the percentage of the most recently used pages for each buffer pool to read out and dump.
     * 
     * innodbBufferPoolDumpPct corresponds to the MySQL InnoDB system variable [innodb_buffer_pool_dump_pct](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_dump_pct).
     * 
     * The range is 1 to 100. The default value is 25.
     * 
     * For example, if there are 4 buffer pools with 100 pages each, and innodb_buffer_pool_dump_pct is set to 25, the 25 most recently used pages from each buffer pool are dumped.
     * 
     */
    public Optional<Integer> innodbBufferPoolDumpPct() {
        return Optional.ofNullable(this.innodbBufferPoolDumpPct);
    }
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Optional<Integer> innodbBufferPoolInstances() {
        return Optional.ofNullable(this.innodbBufferPoolInstances);
    }
    /**
     * @return The size (in bytes) of the buffer pool, that is, the memory area where InnoDB caches table and index data.
     * 
     * innodbBufferPoolSize corresponds to the MySQL server system variable [innodb_buffer_pool_size](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
     * 
     * The default and maximum values depend on the amount of RAM provisioned by the shape. See [Default User Variables](https://www.terraform.io/mysql-database/doc/configuring-db-system.html#GUID-B5504C19-F6F4-4DAB-8506-189A4E8F4A6A).
     * 
     */
    public Optional<String> innodbBufferPoolSize() {
        return Optional.ofNullable(this.innodbBufferPoolSize);
    }
    /**
     * @return innodbDdlBufferSize corresponds to the MySQL system variable [innodb_ddl_buffer_size] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_buffer_size)
     * 
     */
    public Optional<String> innodbDdlBufferSize() {
        return Optional.ofNullable(this.innodbDdlBufferSize);
    }
    /**
     * @return innodbDdlThreads corresponds to the MySQL system variable [innodb_ddl_threads] (https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ddl_threads)
     * 
     */
    public Optional<Integer> innodbDdlThreads() {
        return Optional.ofNullable(this.innodbDdlThreads);
    }
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Optional<Boolean> innodbFtEnableStopword() {
        return Optional.ofNullable(this.innodbFtEnableStopword);
    }
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Optional<Integer> innodbFtMaxTokenSize() {
        return Optional.ofNullable(this.innodbFtMaxTokenSize);
    }
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Optional<Integer> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Optional<Integer> innodbFtNumWordOptimize() {
        return Optional.ofNullable(this.innodbFtNumWordOptimize);
    }
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public Optional<String> innodbFtResultCacheLimit() {
        return Optional.ofNullable(this.innodbFtResultCacheLimit);
    }
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public Optional<String> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Optional<Integer> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }
    /**
     * @return Enables dedicated log writer threads for writing redo log records from the log buffer to the system buffers and flushing the system buffers to the redo log files.
     * 
     * This is the MySQL variable &#34;innodb_log_writer_threads&#34;. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_writer_threads)
     * 
     */
    public Optional<Boolean> innodbLogWriterThreads() {
        return Optional.ofNullable(this.innodbLogWriterThreads);
    }
    /**
     * @return The desired maximum purge lag in terms of transactions.
     * 
     * InnoDB maintains a list of transactions that have index records delete-marked by UPDATE or DELETE operations. The length of the list is the purge lag.
     * 
     * If this value is exceeded, a delay is imposed on INSERT, UPDATE, and DELETE operations to allow time for purge to catch up.
     * 
     * The default value is 0, which means there is no maximum purge lag and no delay.
     * 
     * innodbMaxPurgeLag corresponds to the MySQL server system variable [innodb_max_purge_lag](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag).
     * 
     */
    public Optional<String> innodbMaxPurgeLag() {
        return Optional.ofNullable(this.innodbMaxPurgeLag);
    }
    /**
     * @return The maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag threshold is exceeded.
     * 
     * The specified innodb_max_purge_lag_delay value is an upper limit on the delay period.
     * 
     * innodbMaxPurgeLagDelay corresponds to the MySQL server system variable [innodb_max_purge_lag_delay](https://dev.mysql.com/doc/refman/en/innodb-parameters.html#sysvar_innodb_max_purge_lag_delay).
     * 
     */
    public Optional<Integer> innodbMaxPurgeLagDelay() {
        return Optional.ofNullable(this.innodbMaxPurgeLagDelay);
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by ANALYZE TABLE.
     * 
     * innodbStatsPersistentSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_persistent_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_persistent_sample_pages)
     * 
     * innodb_stats_persistent_sample_pages only applies when innodb_stats_persistent is enabled for a table; when innodb_stats_persistent is disabled, innodb_stats_transient_sample_pages applies instead.
     * 
     */
    public Optional<String> innodbStatsPersistentSamplePages() {
        return Optional.ofNullable(this.innodbStatsPersistentSamplePages);
    }
    /**
     * @return The number of index pages to sample when estimating cardinality and other statistics for an indexed column, such as those calculated by [ANALYZE TABLE](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html).
     * 
     * innodbStatsTransientSamplePages corresponds to the MySQL InnoDB system variable [innodb_stats_transient_sample_pages](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_stats_transient_sample_pages)
     * 
     * innodb_stats_transient_sample_pages only applies when innodb_stats_persistent is disabled for a table; when innodb_stats_persistent is enabled, innodb_stats_persistent_sample_pages applies instead.
     * 
     * innodb_stats_persistent is ON by default and cannot be changed. It is possible to override it using the STATS_PERSISTENT clause of the [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) and [ALTER TABLE](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html) statements.
     * 
     */
    public Optional<String> innodbStatsTransientSamplePages() {
        return Optional.ofNullable(this.innodbStatsTransientSamplePages);
    }
    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     * interactiveTimeout corresponds to the MySQL system variable. [interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout)
     * 
     */
    public Optional<Integer> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    public Optional<Boolean> localInfile() {
        return Optional.ofNullable(this.localInfile);
    }
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public Optional<String> mandatoryRoles() {
        return Optional.ofNullable(this.mandatoryRoles);
    }
    /**
     * @return The maximum size of one packet or any generated/intermediate string.
     * 
     * This is the mysql variable &#34;max_allowed_packet&#34;.
     * 
     */
    public Optional<Integer> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }
    /**
     * @return Sets the size of the transaction cache.
     * 
     * maxBinlogCacheSize corresponds to the MySQL server system variable [max_binlog_cache_size](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_max_binlog_cache_size).
     * 
     */
    public Optional<String> maxBinlogCacheSize() {
        return Optional.ofNullable(this.maxBinlogCacheSize);
    }
    /**
     * @return (&#34;max_connect_errors&#34;)
     * 
     */
    public Optional<String> maxConnectErrors() {
        return Optional.ofNullable(this.maxConnectErrors);
    }
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Optional<Integer> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public Optional<String> maxExecutionTime() {
        return Optional.ofNullable(this.maxExecutionTime);
    }
    /**
     * @return This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * 
     * maxHeapTableSize corresponds to the MySQL system variable [max_heap_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size)
     * 
     */
    public Optional<String> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Optional<Integer> maxPreparedStmtCount() {
        return Optional.ofNullable(this.maxPreparedStmtCount);
    }
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Optional<Boolean> mysqlFirewallMode() {
        return Optional.ofNullable(this.mysqlFirewallMode);
    }
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     * @deprecated
     * The &#39;mysql_zstd_default_compression_level&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_zstd_default_compression_level' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Integer> mysqlZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlZstdDefaultCompressionLevel);
    }
    /**
     * @return The number of seconds X Plugin waits for the first packet to be received from newly connected clients.
     * 
     * mysqlxConnectTimeout corresponds to the MySQL X Plugin system variable [mysqlx_connect_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_connect_timeout)
     * 
     */
    public Optional<Integer> mysqlxConnectTimeout() {
        return Optional.ofNullable(this.mysqlxConnectTimeout);
    }
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxDeflateDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateDefaultCompressionLevel);
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxDeflateMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxDeflateMaxClientCompressionLevel);
    }
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_document_id_unique_prefix&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_document_id_unique_prefix' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Integer> mysqlxDocumentIdUniquePrefix() {
        return Optional.ofNullable(this.mysqlxDocumentIdUniquePrefix);
    }
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Optional<Boolean> mysqlxEnableHelloNotice() {
        return Optional.ofNullable(this.mysqlxEnableHelloNotice);
    }
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_idle_worker_thread_timeout&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_idle_worker_thread_timeout' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Integer> mysqlxIdleWorkerThreadTimeout() {
        return Optional.ofNullable(this.mysqlxIdleWorkerThreadTimeout);
    }
    /**
     * @return The number of seconds to wait for interactive clients to timeout.
     * 
     * mysqlxInteractiveTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_interactive_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_interactive_timeout)
     * 
     */
    public Optional<Integer> mysqlxInteractiveTimeout() {
        return Optional.ofNullable(this.mysqlxInteractiveTimeout);
    }
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxLz4defaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4defaultCompressionLevel);
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxLz4maxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxLz4maxClientCompressionLevel);
    }
    /**
     * @return The maximum size of network packets that can be received by X Plugin.
     * 
     * This is the mysql variable &#34;mysqlx_max_allowed_packet&#34;.
     * 
     */
    public Optional<Integer> mysqlxMaxAllowedPacket() {
        return Optional.ofNullable(this.mysqlxMaxAllowedPacket);
    }
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;mysqlx_min_worker_threads&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysqlx_min_worker_threads' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Integer> mysqlxMinWorkerThreads() {
        return Optional.ofNullable(this.mysqlxMinWorkerThreads);
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking read operations to complete. After this time, if the read operation is not successful, X Plugin closes the connection and returns a warning notice with the error code ER_IO_READ_ERROR to the client application.
     * 
     * mysqlxReadTimeout corresponds to the MySQL X Plugin system variable [mysqlx_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_read_timeout)
     * 
     */
    public Optional<Integer> mysqlxReadTimeout() {
        return Optional.ofNullable(this.mysqlxReadTimeout);
    }
    /**
     * @return The number of seconds that X Plugin waits for activity on a connection.
     * 
     * mysqlxWaitTimeout corresponds to the MySQL X Plugin system variable. [mysqlx_wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_wait_timeout)
     * 
     */
    public Optional<Integer> mysqlxWaitTimeout() {
        return Optional.ofNullable(this.mysqlxWaitTimeout);
    }
    /**
     * @return The number of seconds that X Plugin waits for blocking write operations to complete. After this time, if the write operation is not successful, X Plugin closes the connection.
     * 
     * mysqlxReadmysqlxWriteTimeoutTimeout corresponds to the MySQL X Plugin system variable [mysqlx_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/x-plugin-options-system-variables.html#sysvar_mysqlx_write_timeout)
     * 
     */
    public Optional<Integer> mysqlxWriteTimeout() {
        return Optional.ofNullable(this.mysqlxWriteTimeout);
    }
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxZstdDefaultCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdDefaultCompressionLevel);
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Optional<Integer> mysqlxZstdMaxClientCompressionLevel() {
        return Optional.ofNullable(this.mysqlxZstdMaxClientCompressionLevel);
    }
    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     * netReadTimeout corresponds to the MySQL system variable [net_read_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout)
     * 
     */
    public Optional<Integer> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }
    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     * netWriteTimeout corresponds to the MySQL system variable [net_write_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout)
     * 
     */
    public Optional<Integer> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public Optional<String> parserMaxMemSize() {
        return Optional.ofNullable(this.parserMaxMemSize);
    }
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_alloc_block_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_alloc_block_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<String> queryAllocBlockSize() {
        return Optional.ofNullable(this.queryAllocBlockSize);
    }
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     * @deprecated
     * The &#39;query_prealloc_size&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'query_prealloc_size' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<String> queryPreallocSize() {
        return Optional.ofNullable(this.queryPreallocSize);
    }
    /**
     * @return regexpTimeLimit corresponds to the MySQL system variable [regexp_time_limit] (https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_regexp_time_limit)
     * 
     */
    public Optional<Integer> regexpTimeLimit() {
        return Optional.ofNullable(this.regexpTimeLimit);
    }
    /**
     * @return Each session that must perform a sort allocates a buffer of this size.
     * 
     * sortBufferSize corresponds to the MySQL system variable [sort_buffer_size](https://dev.mysql.com/doc/refman/en/server-system-variables.html#sysvar_sort_buffer_size)
     * 
     */
    public Optional<String> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public Optional<String> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Optional<Boolean> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Optional<Boolean> sqlWarnings() {
        return Optional.ofNullable(this.sqlWarnings);
    }
    /**
     * @return Controls whether the thread pool uses dedicated listener threads. If enabled, a listener thread in each thread group is dedicated to the task of listening for network events from clients, ensuring that the maximum number of query worker threads is no more than the value specified by threadPoolMaxTransactionsLimit. threadPoolDedicatedListeners corresponds to the MySQL Database Service-specific system variable thread_pool_dedicated_listeners.
     * 
     */
    public Optional<Boolean> threadPoolDedicatedListeners() {
        return Optional.ofNullable(this.threadPoolDedicatedListeners);
    }
    /**
     * @return Limits the maximum number of open transactions to the defined value. The default value is 0, which enforces no limit. threadPoolMaxTransactionsLimit corresponds to the MySQL Database Service-specific system variable thread_pool_max_transactions_limit.
     * 
     */
    public Optional<Integer> threadPoolMaxTransactionsLimit() {
        return Optional.ofNullable(this.threadPoolMaxTransactionsLimit);
    }
    /**
     * @return Initializes the time zone for each client that connects.
     * 
     * This corresponds to the MySQL System Variable &#34;time_zone&#34;.
     * 
     * The values can be given in one of the following formats, none of which are case-sensitive:
     * * As a string indicating an offset from UTC of the form [H]H:MM, prefixed with a + or -, such as &#39;+10:00&#39;, &#39;-6:00&#39;, or &#39;+05:30&#39;. The permitted range is &#39;-13:59&#39; to &#39;+14:00&#39;, inclusive.
     * * As a named time zone, as defined by the &#34;IANA Time Zone database&#34;, such as &#39;Europe/Helsinki&#39;, &#39;US/Eastern&#39;, &#39;MET&#39;, or &#39;UTC&#39;.
     * 
     */
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }
    /**
     * @return The maximum size of internal in-memory temporary tables. This variable does not apply to user-created MEMORY tables.
     * 
     * tmp_table_size corresponds to the MySQL system variable [tmp_table_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size)
     * 
     */
    public Optional<String> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public Optional<String> transactionIsolation() {
        return Optional.ofNullable(this.transactionIsolation);
    }
    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     * waitTimeout corresponds to the MySQL system variable. [wait_timeout](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout)
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Integer> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlConfigurationVariables defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autocommit;
        private @Nullable Boolean bigTables;
        private @Nullable Integer binlogExpireLogsSeconds;
        private @Nullable String binlogRowMetadata;
        private @Nullable String binlogRowValueOptions;
        private @Nullable Boolean binlogTransactionCompression;
        private @Nullable String completionType;
        private @Nullable Integer connectTimeout;
        private @Nullable Integer connectionMemoryChunkSize;
        private @Nullable String connectionMemoryLimit;
        private @Nullable String cteMaxRecursionDepth;
        private @Nullable String defaultAuthenticationPlugin;
        private @Nullable Boolean foreignKeyChecks;
        private @Nullable Integer generatedRandomPasswordLength;
        private @Nullable String globalConnectionMemoryLimit;
        private @Nullable Boolean globalConnectionMemoryTracking;
        private @Nullable String groupReplicationConsistency;
        private @Nullable Integer informationSchemaStatsExpiry;
        private @Nullable Integer innodbBufferPoolDumpPct;
        private @Nullable Integer innodbBufferPoolInstances;
        private @Nullable String innodbBufferPoolSize;
        private @Nullable String innodbDdlBufferSize;
        private @Nullable Integer innodbDdlThreads;
        private @Nullable Boolean innodbFtEnableStopword;
        private @Nullable Integer innodbFtMaxTokenSize;
        private @Nullable Integer innodbFtMinTokenSize;
        private @Nullable Integer innodbFtNumWordOptimize;
        private @Nullable String innodbFtResultCacheLimit;
        private @Nullable String innodbFtServerStopwordTable;
        private @Nullable Integer innodbLockWaitTimeout;
        private @Nullable Boolean innodbLogWriterThreads;
        private @Nullable String innodbMaxPurgeLag;
        private @Nullable Integer innodbMaxPurgeLagDelay;
        private @Nullable String innodbStatsPersistentSamplePages;
        private @Nullable String innodbStatsTransientSamplePages;
        private @Nullable Integer interactiveTimeout;
        private @Nullable Boolean localInfile;
        private @Nullable String mandatoryRoles;
        private @Nullable Integer maxAllowedPacket;
        private @Nullable String maxBinlogCacheSize;
        private @Nullable String maxConnectErrors;
        private @Nullable Integer maxConnections;
        private @Nullable String maxExecutionTime;
        private @Nullable String maxHeapTableSize;
        private @Nullable Integer maxPreparedStmtCount;
        private @Nullable Boolean mysqlFirewallMode;
        private @Nullable Integer mysqlZstdDefaultCompressionLevel;
        private @Nullable Integer mysqlxConnectTimeout;
        private @Nullable Integer mysqlxDeflateDefaultCompressionLevel;
        private @Nullable Integer mysqlxDeflateMaxClientCompressionLevel;
        private @Nullable Integer mysqlxDocumentIdUniquePrefix;
        private @Nullable Boolean mysqlxEnableHelloNotice;
        private @Nullable Integer mysqlxIdleWorkerThreadTimeout;
        private @Nullable Integer mysqlxInteractiveTimeout;
        private @Nullable Integer mysqlxLz4defaultCompressionLevel;
        private @Nullable Integer mysqlxLz4maxClientCompressionLevel;
        private @Nullable Integer mysqlxMaxAllowedPacket;
        private @Nullable Integer mysqlxMinWorkerThreads;
        private @Nullable Integer mysqlxReadTimeout;
        private @Nullable Integer mysqlxWaitTimeout;
        private @Nullable Integer mysqlxWriteTimeout;
        private @Nullable Integer mysqlxZstdDefaultCompressionLevel;
        private @Nullable Integer mysqlxZstdMaxClientCompressionLevel;
        private @Nullable Integer netReadTimeout;
        private @Nullable Integer netWriteTimeout;
        private @Nullable String parserMaxMemSize;
        private @Nullable String queryAllocBlockSize;
        private @Nullable String queryPreallocSize;
        private @Nullable Integer regexpTimeLimit;
        private @Nullable String sortBufferSize;
        private @Nullable String sqlMode;
        private @Nullable Boolean sqlRequirePrimaryKey;
        private @Nullable Boolean sqlWarnings;
        private @Nullable Boolean threadPoolDedicatedListeners;
        private @Nullable Integer threadPoolMaxTransactionsLimit;
        private @Nullable String timeZone;
        private @Nullable String tmpTableSize;
        private @Nullable String transactionIsolation;
        private @Nullable Integer waitTimeout;
        public Builder() {}
        public Builder(MysqlConfigurationVariables defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autocommit = defaults.autocommit;
    	      this.bigTables = defaults.bigTables;
    	      this.binlogExpireLogsSeconds = defaults.binlogExpireLogsSeconds;
    	      this.binlogRowMetadata = defaults.binlogRowMetadata;
    	      this.binlogRowValueOptions = defaults.binlogRowValueOptions;
    	      this.binlogTransactionCompression = defaults.binlogTransactionCompression;
    	      this.completionType = defaults.completionType;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.connectionMemoryChunkSize = defaults.connectionMemoryChunkSize;
    	      this.connectionMemoryLimit = defaults.connectionMemoryLimit;
    	      this.cteMaxRecursionDepth = defaults.cteMaxRecursionDepth;
    	      this.defaultAuthenticationPlugin = defaults.defaultAuthenticationPlugin;
    	      this.foreignKeyChecks = defaults.foreignKeyChecks;
    	      this.generatedRandomPasswordLength = defaults.generatedRandomPasswordLength;
    	      this.globalConnectionMemoryLimit = defaults.globalConnectionMemoryLimit;
    	      this.globalConnectionMemoryTracking = defaults.globalConnectionMemoryTracking;
    	      this.groupReplicationConsistency = defaults.groupReplicationConsistency;
    	      this.informationSchemaStatsExpiry = defaults.informationSchemaStatsExpiry;
    	      this.innodbBufferPoolDumpPct = defaults.innodbBufferPoolDumpPct;
    	      this.innodbBufferPoolInstances = defaults.innodbBufferPoolInstances;
    	      this.innodbBufferPoolSize = defaults.innodbBufferPoolSize;
    	      this.innodbDdlBufferSize = defaults.innodbDdlBufferSize;
    	      this.innodbDdlThreads = defaults.innodbDdlThreads;
    	      this.innodbFtEnableStopword = defaults.innodbFtEnableStopword;
    	      this.innodbFtMaxTokenSize = defaults.innodbFtMaxTokenSize;
    	      this.innodbFtMinTokenSize = defaults.innodbFtMinTokenSize;
    	      this.innodbFtNumWordOptimize = defaults.innodbFtNumWordOptimize;
    	      this.innodbFtResultCacheLimit = defaults.innodbFtResultCacheLimit;
    	      this.innodbFtServerStopwordTable = defaults.innodbFtServerStopwordTable;
    	      this.innodbLockWaitTimeout = defaults.innodbLockWaitTimeout;
    	      this.innodbLogWriterThreads = defaults.innodbLogWriterThreads;
    	      this.innodbMaxPurgeLag = defaults.innodbMaxPurgeLag;
    	      this.innodbMaxPurgeLagDelay = defaults.innodbMaxPurgeLagDelay;
    	      this.innodbStatsPersistentSamplePages = defaults.innodbStatsPersistentSamplePages;
    	      this.innodbStatsTransientSamplePages = defaults.innodbStatsTransientSamplePages;
    	      this.interactiveTimeout = defaults.interactiveTimeout;
    	      this.localInfile = defaults.localInfile;
    	      this.mandatoryRoles = defaults.mandatoryRoles;
    	      this.maxAllowedPacket = defaults.maxAllowedPacket;
    	      this.maxBinlogCacheSize = defaults.maxBinlogCacheSize;
    	      this.maxConnectErrors = defaults.maxConnectErrors;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxExecutionTime = defaults.maxExecutionTime;
    	      this.maxHeapTableSize = defaults.maxHeapTableSize;
    	      this.maxPreparedStmtCount = defaults.maxPreparedStmtCount;
    	      this.mysqlFirewallMode = defaults.mysqlFirewallMode;
    	      this.mysqlZstdDefaultCompressionLevel = defaults.mysqlZstdDefaultCompressionLevel;
    	      this.mysqlxConnectTimeout = defaults.mysqlxConnectTimeout;
    	      this.mysqlxDeflateDefaultCompressionLevel = defaults.mysqlxDeflateDefaultCompressionLevel;
    	      this.mysqlxDeflateMaxClientCompressionLevel = defaults.mysqlxDeflateMaxClientCompressionLevel;
    	      this.mysqlxDocumentIdUniquePrefix = defaults.mysqlxDocumentIdUniquePrefix;
    	      this.mysqlxEnableHelloNotice = defaults.mysqlxEnableHelloNotice;
    	      this.mysqlxIdleWorkerThreadTimeout = defaults.mysqlxIdleWorkerThreadTimeout;
    	      this.mysqlxInteractiveTimeout = defaults.mysqlxInteractiveTimeout;
    	      this.mysqlxLz4defaultCompressionLevel = defaults.mysqlxLz4defaultCompressionLevel;
    	      this.mysqlxLz4maxClientCompressionLevel = defaults.mysqlxLz4maxClientCompressionLevel;
    	      this.mysqlxMaxAllowedPacket = defaults.mysqlxMaxAllowedPacket;
    	      this.mysqlxMinWorkerThreads = defaults.mysqlxMinWorkerThreads;
    	      this.mysqlxReadTimeout = defaults.mysqlxReadTimeout;
    	      this.mysqlxWaitTimeout = defaults.mysqlxWaitTimeout;
    	      this.mysqlxWriteTimeout = defaults.mysqlxWriteTimeout;
    	      this.mysqlxZstdDefaultCompressionLevel = defaults.mysqlxZstdDefaultCompressionLevel;
    	      this.mysqlxZstdMaxClientCompressionLevel = defaults.mysqlxZstdMaxClientCompressionLevel;
    	      this.netReadTimeout = defaults.netReadTimeout;
    	      this.netWriteTimeout = defaults.netWriteTimeout;
    	      this.parserMaxMemSize = defaults.parserMaxMemSize;
    	      this.queryAllocBlockSize = defaults.queryAllocBlockSize;
    	      this.queryPreallocSize = defaults.queryPreallocSize;
    	      this.regexpTimeLimit = defaults.regexpTimeLimit;
    	      this.sortBufferSize = defaults.sortBufferSize;
    	      this.sqlMode = defaults.sqlMode;
    	      this.sqlRequirePrimaryKey = defaults.sqlRequirePrimaryKey;
    	      this.sqlWarnings = defaults.sqlWarnings;
    	      this.threadPoolDedicatedListeners = defaults.threadPoolDedicatedListeners;
    	      this.threadPoolMaxTransactionsLimit = defaults.threadPoolMaxTransactionsLimit;
    	      this.timeZone = defaults.timeZone;
    	      this.tmpTableSize = defaults.tmpTableSize;
    	      this.transactionIsolation = defaults.transactionIsolation;
    	      this.waitTimeout = defaults.waitTimeout;
        }

        @CustomType.Setter
        public Builder autocommit(@Nullable Boolean autocommit) {

            this.autocommit = autocommit;
            return this;
        }
        @CustomType.Setter
        public Builder bigTables(@Nullable Boolean bigTables) {

            this.bigTables = bigTables;
            return this;
        }
        @CustomType.Setter
        public Builder binlogExpireLogsSeconds(@Nullable Integer binlogExpireLogsSeconds) {

            this.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowMetadata(@Nullable String binlogRowMetadata) {

            this.binlogRowMetadata = binlogRowMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder binlogRowValueOptions(@Nullable String binlogRowValueOptions) {

            this.binlogRowValueOptions = binlogRowValueOptions;
            return this;
        }
        @CustomType.Setter
        public Builder binlogTransactionCompression(@Nullable Boolean binlogTransactionCompression) {

            this.binlogTransactionCompression = binlogTransactionCompression;
            return this;
        }
        @CustomType.Setter
        public Builder completionType(@Nullable String completionType) {

            this.completionType = completionType;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryChunkSize(@Nullable Integer connectionMemoryChunkSize) {

            this.connectionMemoryChunkSize = connectionMemoryChunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMemoryLimit(@Nullable String connectionMemoryLimit) {

            this.connectionMemoryLimit = connectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder cteMaxRecursionDepth(@Nullable String cteMaxRecursionDepth) {

            this.cteMaxRecursionDepth = cteMaxRecursionDepth;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAuthenticationPlugin(@Nullable String defaultAuthenticationPlugin) {

            this.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder foreignKeyChecks(@Nullable Boolean foreignKeyChecks) {

            this.foreignKeyChecks = foreignKeyChecks;
            return this;
        }
        @CustomType.Setter
        public Builder generatedRandomPasswordLength(@Nullable Integer generatedRandomPasswordLength) {

            this.generatedRandomPasswordLength = generatedRandomPasswordLength;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryLimit(@Nullable String globalConnectionMemoryLimit) {

            this.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder globalConnectionMemoryTracking(@Nullable Boolean globalConnectionMemoryTracking) {

            this.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            return this;
        }
        @CustomType.Setter
        public Builder groupReplicationConsistency(@Nullable String groupReplicationConsistency) {

            this.groupReplicationConsistency = groupReplicationConsistency;
            return this;
        }
        @CustomType.Setter
        public Builder informationSchemaStatsExpiry(@Nullable Integer informationSchemaStatsExpiry) {

            this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolDumpPct(@Nullable Integer innodbBufferPoolDumpPct) {

            this.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolInstances(@Nullable Integer innodbBufferPoolInstances) {

            this.innodbBufferPoolInstances = innodbBufferPoolInstances;
            return this;
        }
        @CustomType.Setter
        public Builder innodbBufferPoolSize(@Nullable String innodbBufferPoolSize) {

            this.innodbBufferPoolSize = innodbBufferPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlBufferSize(@Nullable String innodbDdlBufferSize) {

            this.innodbDdlBufferSize = innodbDdlBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbDdlThreads(@Nullable Integer innodbDdlThreads) {

            this.innodbDdlThreads = innodbDdlThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtEnableStopword(@Nullable Boolean innodbFtEnableStopword) {

            this.innodbFtEnableStopword = innodbFtEnableStopword;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMaxTokenSize(@Nullable Integer innodbFtMaxTokenSize) {

            this.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtMinTokenSize(@Nullable Integer innodbFtMinTokenSize) {

            this.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtNumWordOptimize(@Nullable Integer innodbFtNumWordOptimize) {

            this.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtResultCacheLimit(@Nullable String innodbFtResultCacheLimit) {

            this.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            return this;
        }
        @CustomType.Setter
        public Builder innodbFtServerStopwordTable(@Nullable String innodbFtServerStopwordTable) {

            this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLockWaitTimeout(@Nullable Integer innodbLockWaitTimeout) {

            this.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder innodbLogWriterThreads(@Nullable Boolean innodbLogWriterThreads) {

            this.innodbLogWriterThreads = innodbLogWriterThreads;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLag(@Nullable String innodbMaxPurgeLag) {

            this.innodbMaxPurgeLag = innodbMaxPurgeLag;
            return this;
        }
        @CustomType.Setter
        public Builder innodbMaxPurgeLagDelay(@Nullable Integer innodbMaxPurgeLagDelay) {

            this.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsPersistentSamplePages(@Nullable String innodbStatsPersistentSamplePages) {

            this.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder innodbStatsTransientSamplePages(@Nullable String innodbStatsTransientSamplePages) {

            this.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            return this;
        }
        @CustomType.Setter
        public Builder interactiveTimeout(@Nullable Integer interactiveTimeout) {

            this.interactiveTimeout = interactiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder localInfile(@Nullable Boolean localInfile) {

            this.localInfile = localInfile;
            return this;
        }
        @CustomType.Setter
        public Builder mandatoryRoles(@Nullable String mandatoryRoles) {

            this.mandatoryRoles = mandatoryRoles;
            return this;
        }
        @CustomType.Setter
        public Builder maxAllowedPacket(@Nullable Integer maxAllowedPacket) {

            this.maxAllowedPacket = maxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder maxBinlogCacheSize(@Nullable String maxBinlogCacheSize) {

            this.maxBinlogCacheSize = maxBinlogCacheSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectErrors(@Nullable String maxConnectErrors) {

            this.maxConnectErrors = maxConnectErrors;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(@Nullable Integer maxConnections) {

            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxExecutionTime(@Nullable String maxExecutionTime) {

            this.maxExecutionTime = maxExecutionTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxHeapTableSize(@Nullable String maxHeapTableSize) {

            this.maxHeapTableSize = maxHeapTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxPreparedStmtCount(@Nullable Integer maxPreparedStmtCount) {

            this.maxPreparedStmtCount = maxPreparedStmtCount;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlFirewallMode(@Nullable Boolean mysqlFirewallMode) {

            this.mysqlFirewallMode = mysqlFirewallMode;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlZstdDefaultCompressionLevel(@Nullable Integer mysqlZstdDefaultCompressionLevel) {

            this.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxConnectTimeout(@Nullable Integer mysqlxConnectTimeout) {

            this.mysqlxConnectTimeout = mysqlxConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateDefaultCompressionLevel(@Nullable Integer mysqlxDeflateDefaultCompressionLevel) {

            this.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDeflateMaxClientCompressionLevel(@Nullable Integer mysqlxDeflateMaxClientCompressionLevel) {

            this.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxDocumentIdUniquePrefix(@Nullable Integer mysqlxDocumentIdUniquePrefix) {

            this.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxEnableHelloNotice(@Nullable Boolean mysqlxEnableHelloNotice) {

            this.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxIdleWorkerThreadTimeout(@Nullable Integer mysqlxIdleWorkerThreadTimeout) {

            this.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxInteractiveTimeout(@Nullable Integer mysqlxInteractiveTimeout) {

            this.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4defaultCompressionLevel(@Nullable Integer mysqlxLz4defaultCompressionLevel) {

            this.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxLz4maxClientCompressionLevel(@Nullable Integer mysqlxLz4maxClientCompressionLevel) {

            this.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMaxAllowedPacket(@Nullable Integer mysqlxMaxAllowedPacket) {

            this.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxMinWorkerThreads(@Nullable Integer mysqlxMinWorkerThreads) {

            this.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxReadTimeout(@Nullable Integer mysqlxReadTimeout) {

            this.mysqlxReadTimeout = mysqlxReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWaitTimeout(@Nullable Integer mysqlxWaitTimeout) {

            this.mysqlxWaitTimeout = mysqlxWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxWriteTimeout(@Nullable Integer mysqlxWriteTimeout) {

            this.mysqlxWriteTimeout = mysqlxWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdDefaultCompressionLevel(@Nullable Integer mysqlxZstdDefaultCompressionLevel) {

            this.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlxZstdMaxClientCompressionLevel(@Nullable Integer mysqlxZstdMaxClientCompressionLevel) {

            this.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder netReadTimeout(@Nullable Integer netReadTimeout) {

            this.netReadTimeout = netReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder netWriteTimeout(@Nullable Integer netWriteTimeout) {

            this.netWriteTimeout = netWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder parserMaxMemSize(@Nullable String parserMaxMemSize) {

            this.parserMaxMemSize = parserMaxMemSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryAllocBlockSize(@Nullable String queryAllocBlockSize) {

            this.queryAllocBlockSize = queryAllocBlockSize;
            return this;
        }
        @CustomType.Setter
        public Builder queryPreallocSize(@Nullable String queryPreallocSize) {

            this.queryPreallocSize = queryPreallocSize;
            return this;
        }
        @CustomType.Setter
        public Builder regexpTimeLimit(@Nullable Integer regexpTimeLimit) {

            this.regexpTimeLimit = regexpTimeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder sortBufferSize(@Nullable String sortBufferSize) {

            this.sortBufferSize = sortBufferSize;
            return this;
        }
        @CustomType.Setter
        public Builder sqlMode(@Nullable String sqlMode) {

            this.sqlMode = sqlMode;
            return this;
        }
        @CustomType.Setter
        public Builder sqlRequirePrimaryKey(@Nullable Boolean sqlRequirePrimaryKey) {

            this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder sqlWarnings(@Nullable Boolean sqlWarnings) {

            this.sqlWarnings = sqlWarnings;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolDedicatedListeners(@Nullable Boolean threadPoolDedicatedListeners) {

            this.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            return this;
        }
        @CustomType.Setter
        public Builder threadPoolMaxTransactionsLimit(@Nullable Integer threadPoolMaxTransactionsLimit) {

            this.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {

            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder tmpTableSize(@Nullable String tmpTableSize) {

            this.tmpTableSize = tmpTableSize;
            return this;
        }
        @CustomType.Setter
        public Builder transactionIsolation(@Nullable String transactionIsolation) {

            this.transactionIsolation = transactionIsolation;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeout(@Nullable Integer waitTimeout) {

            this.waitTimeout = waitTimeout;
            return this;
        }
        public MysqlConfigurationVariables build() {
            final var _resultValue = new MysqlConfigurationVariables();
            _resultValue.autocommit = autocommit;
            _resultValue.bigTables = bigTables;
            _resultValue.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
            _resultValue.binlogRowMetadata = binlogRowMetadata;
            _resultValue.binlogRowValueOptions = binlogRowValueOptions;
            _resultValue.binlogTransactionCompression = binlogTransactionCompression;
            _resultValue.completionType = completionType;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.connectionMemoryChunkSize = connectionMemoryChunkSize;
            _resultValue.connectionMemoryLimit = connectionMemoryLimit;
            _resultValue.cteMaxRecursionDepth = cteMaxRecursionDepth;
            _resultValue.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
            _resultValue.foreignKeyChecks = foreignKeyChecks;
            _resultValue.generatedRandomPasswordLength = generatedRandomPasswordLength;
            _resultValue.globalConnectionMemoryLimit = globalConnectionMemoryLimit;
            _resultValue.globalConnectionMemoryTracking = globalConnectionMemoryTracking;
            _resultValue.groupReplicationConsistency = groupReplicationConsistency;
            _resultValue.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            _resultValue.innodbBufferPoolDumpPct = innodbBufferPoolDumpPct;
            _resultValue.innodbBufferPoolInstances = innodbBufferPoolInstances;
            _resultValue.innodbBufferPoolSize = innodbBufferPoolSize;
            _resultValue.innodbDdlBufferSize = innodbDdlBufferSize;
            _resultValue.innodbDdlThreads = innodbDdlThreads;
            _resultValue.innodbFtEnableStopword = innodbFtEnableStopword;
            _resultValue.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
            _resultValue.innodbFtMinTokenSize = innodbFtMinTokenSize;
            _resultValue.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
            _resultValue.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
            _resultValue.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            _resultValue.innodbLockWaitTimeout = innodbLockWaitTimeout;
            _resultValue.innodbLogWriterThreads = innodbLogWriterThreads;
            _resultValue.innodbMaxPurgeLag = innodbMaxPurgeLag;
            _resultValue.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
            _resultValue.innodbStatsPersistentSamplePages = innodbStatsPersistentSamplePages;
            _resultValue.innodbStatsTransientSamplePages = innodbStatsTransientSamplePages;
            _resultValue.interactiveTimeout = interactiveTimeout;
            _resultValue.localInfile = localInfile;
            _resultValue.mandatoryRoles = mandatoryRoles;
            _resultValue.maxAllowedPacket = maxAllowedPacket;
            _resultValue.maxBinlogCacheSize = maxBinlogCacheSize;
            _resultValue.maxConnectErrors = maxConnectErrors;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxExecutionTime = maxExecutionTime;
            _resultValue.maxHeapTableSize = maxHeapTableSize;
            _resultValue.maxPreparedStmtCount = maxPreparedStmtCount;
            _resultValue.mysqlFirewallMode = mysqlFirewallMode;
            _resultValue.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
            _resultValue.mysqlxConnectTimeout = mysqlxConnectTimeout;
            _resultValue.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
            _resultValue.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
            _resultValue.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
            _resultValue.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
            _resultValue.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
            _resultValue.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
            _resultValue.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
            _resultValue.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
            _resultValue.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
            _resultValue.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
            _resultValue.mysqlxReadTimeout = mysqlxReadTimeout;
            _resultValue.mysqlxWaitTimeout = mysqlxWaitTimeout;
            _resultValue.mysqlxWriteTimeout = mysqlxWriteTimeout;
            _resultValue.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
            _resultValue.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
            _resultValue.netReadTimeout = netReadTimeout;
            _resultValue.netWriteTimeout = netWriteTimeout;
            _resultValue.parserMaxMemSize = parserMaxMemSize;
            _resultValue.queryAllocBlockSize = queryAllocBlockSize;
            _resultValue.queryPreallocSize = queryPreallocSize;
            _resultValue.regexpTimeLimit = regexpTimeLimit;
            _resultValue.sortBufferSize = sortBufferSize;
            _resultValue.sqlMode = sqlMode;
            _resultValue.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            _resultValue.sqlWarnings = sqlWarnings;
            _resultValue.threadPoolDedicatedListeners = threadPoolDedicatedListeners;
            _resultValue.threadPoolMaxTransactionsLimit = threadPoolMaxTransactionsLimit;
            _resultValue.timeZone = timeZone;
            _resultValue.tmpTableSize = tmpTableSize;
            _resultValue.transactionIsolation = transactionIsolation;
            _resultValue.waitTimeout = waitTimeout;
            return _resultValue;
        }
    }
}
