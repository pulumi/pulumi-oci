// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MysqlDbSystemDataStorage {
    /**
     * @return The actual allocated storage size for the DB System. This may be higher than dataStorageSizeInGBs if an automatic storage expansion has occurred.
     * 
     */
    private @Nullable Integer allocatedStorageSizeInGbs;
    /**
     * @return (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    private @Nullable Integer dataStorageSizeInGb;
    /**
     * @return The absolute limit the DB System&#39;s storage size may ever expand to, either manually or automatically. This limit is based based on the initial dataStorageSizeInGBs when the DB System was first created. Both dataStorageSizeInGBs and maxDataStorageSizeInGBs can not exceed this value.
     * 
     */
    private @Nullable Integer dataStorageSizeLimitInGbs;
    /**
     * @return (Updatable) Enable/disable automatic storage expansion. When set to true, the DB System will automatically add storage incrementally up to the value specified in maxStorageSizeInGBs.
     * 
     */
    private @Nullable Boolean isAutoExpandStorageEnabled;
    /**
     * @return (Updatable) Maximum storage size this DB System can expand to. When isAutoExpandStorageEnabled is set to true, the DB System will add storage incrementally up to this value.
     * 
     * DB Systems with an initial storage size of 400 GB or less can be expanded up to 32 TB. DB Systems with an initial storage size between 401-800 GB can be expanded up to 64 TB. DB Systems with an initial storage size between 801-1200 GB can be expanded up to 96 TB. DB Systems with an initial storage size of 1201 GB or more can be expanded up to 128 TB.
     * 
     * It is not possible to decrease data storage size. You cannot set the maximum data storage size to less than either current DB System dataStorageSizeInGBs or allocatedStorageSizeInGBs.
     * 
     */
    private @Nullable Integer maxStorageSizeInGbs;

    private MysqlDbSystemDataStorage() {}
    /**
     * @return The actual allocated storage size for the DB System. This may be higher than dataStorageSizeInGBs if an automatic storage expansion has occurred.
     * 
     */
    public Optional<Integer> allocatedStorageSizeInGbs() {
        return Optional.ofNullable(this.allocatedStorageSizeInGbs);
    }
    /**
     * @return (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    public Optional<Integer> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }
    /**
     * @return The absolute limit the DB System&#39;s storage size may ever expand to, either manually or automatically. This limit is based based on the initial dataStorageSizeInGBs when the DB System was first created. Both dataStorageSizeInGBs and maxDataStorageSizeInGBs can not exceed this value.
     * 
     */
    public Optional<Integer> dataStorageSizeLimitInGbs() {
        return Optional.ofNullable(this.dataStorageSizeLimitInGbs);
    }
    /**
     * @return (Updatable) Enable/disable automatic storage expansion. When set to true, the DB System will automatically add storage incrementally up to the value specified in maxStorageSizeInGBs.
     * 
     */
    public Optional<Boolean> isAutoExpandStorageEnabled() {
        return Optional.ofNullable(this.isAutoExpandStorageEnabled);
    }
    /**
     * @return (Updatable) Maximum storage size this DB System can expand to. When isAutoExpandStorageEnabled is set to true, the DB System will add storage incrementally up to this value.
     * 
     * DB Systems with an initial storage size of 400 GB or less can be expanded up to 32 TB. DB Systems with an initial storage size between 401-800 GB can be expanded up to 64 TB. DB Systems with an initial storage size between 801-1200 GB can be expanded up to 96 TB. DB Systems with an initial storage size of 1201 GB or more can be expanded up to 128 TB.
     * 
     * It is not possible to decrease data storage size. You cannot set the maximum data storage size to less than either current DB System dataStorageSizeInGBs or allocatedStorageSizeInGBs.
     * 
     */
    public Optional<Integer> maxStorageSizeInGbs() {
        return Optional.ofNullable(this.maxStorageSizeInGbs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MysqlDbSystemDataStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer allocatedStorageSizeInGbs;
        private @Nullable Integer dataStorageSizeInGb;
        private @Nullable Integer dataStorageSizeLimitInGbs;
        private @Nullable Boolean isAutoExpandStorageEnabled;
        private @Nullable Integer maxStorageSizeInGbs;
        public Builder() {}
        public Builder(MysqlDbSystemDataStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorageSizeInGbs = defaults.allocatedStorageSizeInGbs;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dataStorageSizeLimitInGbs = defaults.dataStorageSizeLimitInGbs;
    	      this.isAutoExpandStorageEnabled = defaults.isAutoExpandStorageEnabled;
    	      this.maxStorageSizeInGbs = defaults.maxStorageSizeInGbs;
        }

        @CustomType.Setter
        public Builder allocatedStorageSizeInGbs(@Nullable Integer allocatedStorageSizeInGbs) {

            this.allocatedStorageSizeInGbs = allocatedStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(@Nullable Integer dataStorageSizeInGb) {

            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeLimitInGbs(@Nullable Integer dataStorageSizeLimitInGbs) {

            this.dataStorageSizeLimitInGbs = dataStorageSizeLimitInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoExpandStorageEnabled(@Nullable Boolean isAutoExpandStorageEnabled) {

            this.isAutoExpandStorageEnabled = isAutoExpandStorageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxStorageSizeInGbs(@Nullable Integer maxStorageSizeInGbs) {

            this.maxStorageSizeInGbs = maxStorageSizeInGbs;
            return this;
        }
        public MysqlDbSystemDataStorage build() {
            final var _resultValue = new MysqlDbSystemDataStorage();
            _resultValue.allocatedStorageSizeInGbs = allocatedStorageSizeInGbs;
            _resultValue.dataStorageSizeInGb = dataStorageSizeInGb;
            _resultValue.dataStorageSizeLimitInGbs = dataStorageSizeLimitInGbs;
            _resultValue.isAutoExpandStorageEnabled = isAutoExpandStorageEnabled;
            _resultValue.maxStorageSizeInGbs = maxStorageSizeInGbs;
            return _resultValue;
        }
    }
}
