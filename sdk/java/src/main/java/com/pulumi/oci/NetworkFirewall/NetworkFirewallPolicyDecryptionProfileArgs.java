// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyDecryptionProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyDecryptionProfileArgs Empty = new NetworkFirewallPolicyDecryptionProfileArgs();

    /**
     * (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    @Import(name="areCertificateExtensionsRestricted")
    private @Nullable Output<Boolean> areCertificateExtensionsRestricted;

    /**
     * @return (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    public Optional<Output<Boolean>> areCertificateExtensionsRestricted() {
        return Optional.ofNullable(this.areCertificateExtensionsRestricted);
    }

    /**
     * (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    @Import(name="isAutoIncludeAltName")
    private @Nullable Output<Boolean> isAutoIncludeAltName;

    /**
     * @return (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    public Optional<Output<Boolean>> isAutoIncludeAltName() {
        return Optional.ofNullable(this.isAutoIncludeAltName);
    }

    /**
     * (Updatable) Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    @Import(name="isExpiredCertificateBlocked")
    private @Nullable Output<Boolean> isExpiredCertificateBlocked;

    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    public Optional<Output<Boolean>> isExpiredCertificateBlocked() {
        return Optional.ofNullable(this.isExpiredCertificateBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    @Import(name="isOutOfCapacityBlocked")
    private @Nullable Output<Boolean> isOutOfCapacityBlocked;

    /**
     * @return (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    public Optional<Output<Boolean>> isOutOfCapacityBlocked() {
        return Optional.ofNullable(this.isOutOfCapacityBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    @Import(name="isRevocationStatusTimeoutBlocked")
    private @Nullable Output<Boolean> isRevocationStatusTimeoutBlocked;

    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    public Optional<Output<Boolean>> isRevocationStatusTimeoutBlocked() {
        return Optional.ofNullable(this.isRevocationStatusTimeoutBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    @Import(name="isUnknownRevocationStatusBlocked")
    private @Nullable Output<Boolean> isUnknownRevocationStatusBlocked;

    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    public Optional<Output<Boolean>> isUnknownRevocationStatusBlocked() {
        return Optional.ofNullable(this.isUnknownRevocationStatusBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    @Import(name="isUnsupportedCipherBlocked")
    private @Nullable Output<Boolean> isUnsupportedCipherBlocked;

    /**
     * @return (Updatable) Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    public Optional<Output<Boolean>> isUnsupportedCipherBlocked() {
        return Optional.ofNullable(this.isUnsupportedCipherBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if SSL version is not supported.
     * 
     */
    @Import(name="isUnsupportedVersionBlocked")
    private @Nullable Output<Boolean> isUnsupportedVersionBlocked;

    /**
     * @return (Updatable) Whether to block sessions if SSL version is not supported.
     * 
     */
    public Optional<Output<Boolean>> isUnsupportedVersionBlocked() {
        return Optional.ofNullable(this.isUnsupportedVersionBlocked);
    }

    /**
     * (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    @Import(name="isUntrustedIssuerBlocked")
    private @Nullable Output<Boolean> isUntrustedIssuerBlocked;

    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    public Optional<Output<Boolean>> isUntrustedIssuerBlocked() {
        return Optional.ofNullable(this.isUntrustedIssuerBlocked);
    }

    /**
     * Name of the decryption profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the decryption profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique Network Firewall Policy identifier
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="networkFirewallPolicyId", required=true)
    private Output<String> networkFirewallPolicyId;

    /**
     * @return Unique Network Firewall Policy identifier
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }

    /**
     * Describes the type of decryption profile. The accepted values are - * SSL_FORWARD_PROXY * SSL_INBOUND_INSPECTION
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Describes the type of decryption profile. The accepted values are - * SSL_FORWARD_PROXY * SSL_INBOUND_INSPECTION
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NetworkFirewallPolicyDecryptionProfileArgs() {}

    private NetworkFirewallPolicyDecryptionProfileArgs(NetworkFirewallPolicyDecryptionProfileArgs $) {
        this.areCertificateExtensionsRestricted = $.areCertificateExtensionsRestricted;
        this.isAutoIncludeAltName = $.isAutoIncludeAltName;
        this.isExpiredCertificateBlocked = $.isExpiredCertificateBlocked;
        this.isOutOfCapacityBlocked = $.isOutOfCapacityBlocked;
        this.isRevocationStatusTimeoutBlocked = $.isRevocationStatusTimeoutBlocked;
        this.isUnknownRevocationStatusBlocked = $.isUnknownRevocationStatusBlocked;
        this.isUnsupportedCipherBlocked = $.isUnsupportedCipherBlocked;
        this.isUnsupportedVersionBlocked = $.isUnsupportedVersionBlocked;
        this.isUntrustedIssuerBlocked = $.isUntrustedIssuerBlocked;
        this.name = $.name;
        this.networkFirewallPolicyId = $.networkFirewallPolicyId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyDecryptionProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyDecryptionProfileArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyDecryptionProfileArgs();
        }

        public Builder(NetworkFirewallPolicyDecryptionProfileArgs defaults) {
            $ = new NetworkFirewallPolicyDecryptionProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param areCertificateExtensionsRestricted (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
         * 
         * @return builder
         * 
         */
        public Builder areCertificateExtensionsRestricted(@Nullable Output<Boolean> areCertificateExtensionsRestricted) {
            $.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
            return this;
        }

        /**
         * @param areCertificateExtensionsRestricted (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
         * 
         * @return builder
         * 
         */
        public Builder areCertificateExtensionsRestricted(Boolean areCertificateExtensionsRestricted) {
            return areCertificateExtensionsRestricted(Output.of(areCertificateExtensionsRestricted));
        }

        /**
         * @param isAutoIncludeAltName (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
         * 
         * @return builder
         * 
         */
        public Builder isAutoIncludeAltName(@Nullable Output<Boolean> isAutoIncludeAltName) {
            $.isAutoIncludeAltName = isAutoIncludeAltName;
            return this;
        }

        /**
         * @param isAutoIncludeAltName (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
         * 
         * @return builder
         * 
         */
        public Builder isAutoIncludeAltName(Boolean isAutoIncludeAltName) {
            return isAutoIncludeAltName(Output.of(isAutoIncludeAltName));
        }

        /**
         * @param isExpiredCertificateBlocked (Updatable) Whether to block sessions if server&#39;s certificate is expired.
         * 
         * @return builder
         * 
         */
        public Builder isExpiredCertificateBlocked(@Nullable Output<Boolean> isExpiredCertificateBlocked) {
            $.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
            return this;
        }

        /**
         * @param isExpiredCertificateBlocked (Updatable) Whether to block sessions if server&#39;s certificate is expired.
         * 
         * @return builder
         * 
         */
        public Builder isExpiredCertificateBlocked(Boolean isExpiredCertificateBlocked) {
            return isExpiredCertificateBlocked(Output.of(isExpiredCertificateBlocked));
        }

        /**
         * @param isOutOfCapacityBlocked (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
         * 
         * @return builder
         * 
         */
        public Builder isOutOfCapacityBlocked(@Nullable Output<Boolean> isOutOfCapacityBlocked) {
            $.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
            return this;
        }

        /**
         * @param isOutOfCapacityBlocked (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
         * 
         * @return builder
         * 
         */
        public Builder isOutOfCapacityBlocked(Boolean isOutOfCapacityBlocked) {
            return isOutOfCapacityBlocked(Output.of(isOutOfCapacityBlocked));
        }

        /**
         * @param isRevocationStatusTimeoutBlocked (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
         * 
         * @return builder
         * 
         */
        public Builder isRevocationStatusTimeoutBlocked(@Nullable Output<Boolean> isRevocationStatusTimeoutBlocked) {
            $.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
            return this;
        }

        /**
         * @param isRevocationStatusTimeoutBlocked (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
         * 
         * @return builder
         * 
         */
        public Builder isRevocationStatusTimeoutBlocked(Boolean isRevocationStatusTimeoutBlocked) {
            return isRevocationStatusTimeoutBlocked(Output.of(isRevocationStatusTimeoutBlocked));
        }

        /**
         * @param isUnknownRevocationStatusBlocked (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isUnknownRevocationStatusBlocked(@Nullable Output<Boolean> isUnknownRevocationStatusBlocked) {
            $.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
            return this;
        }

        /**
         * @param isUnknownRevocationStatusBlocked (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isUnknownRevocationStatusBlocked(Boolean isUnknownRevocationStatusBlocked) {
            return isUnknownRevocationStatusBlocked(Output.of(isUnknownRevocationStatusBlocked));
        }

        /**
         * @param isUnsupportedCipherBlocked (Updatable) Whether to block sessions if SSL cipher suite is not supported.
         * 
         * @return builder
         * 
         */
        public Builder isUnsupportedCipherBlocked(@Nullable Output<Boolean> isUnsupportedCipherBlocked) {
            $.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
            return this;
        }

        /**
         * @param isUnsupportedCipherBlocked (Updatable) Whether to block sessions if SSL cipher suite is not supported.
         * 
         * @return builder
         * 
         */
        public Builder isUnsupportedCipherBlocked(Boolean isUnsupportedCipherBlocked) {
            return isUnsupportedCipherBlocked(Output.of(isUnsupportedCipherBlocked));
        }

        /**
         * @param isUnsupportedVersionBlocked (Updatable) Whether to block sessions if SSL version is not supported.
         * 
         * @return builder
         * 
         */
        public Builder isUnsupportedVersionBlocked(@Nullable Output<Boolean> isUnsupportedVersionBlocked) {
            $.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
            return this;
        }

        /**
         * @param isUnsupportedVersionBlocked (Updatable) Whether to block sessions if SSL version is not supported.
         * 
         * @return builder
         * 
         */
        public Builder isUnsupportedVersionBlocked(Boolean isUnsupportedVersionBlocked) {
            return isUnsupportedVersionBlocked(Output.of(isUnsupportedVersionBlocked));
        }

        /**
         * @param isUntrustedIssuerBlocked (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder isUntrustedIssuerBlocked(@Nullable Output<Boolean> isUntrustedIssuerBlocked) {
            $.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
            return this;
        }

        /**
         * @param isUntrustedIssuerBlocked (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder isUntrustedIssuerBlocked(Boolean isUntrustedIssuerBlocked) {
            return isUntrustedIssuerBlocked(Output.of(isUntrustedIssuerBlocked));
        }

        /**
         * @param name Name of the decryption profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the decryption profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(Output<String> networkFirewallPolicyId) {
            $.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            return networkFirewallPolicyId(Output.of(networkFirewallPolicyId));
        }

        /**
         * @param type Describes the type of decryption profile. The accepted values are - * SSL_FORWARD_PROXY * SSL_INBOUND_INSPECTION
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Describes the type of decryption profile. The accepted values are - * SSL_FORWARD_PROXY * SSL_INBOUND_INSPECTION
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NetworkFirewallPolicyDecryptionProfileArgs build() {
            if ($.networkFirewallPolicyId == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyDecryptionProfileArgs", "networkFirewallPolicyId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyDecryptionProfileArgs", "type");
            }
            return $;
        }
    }

}
