// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicyDecryptionRuleConditionArgs;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicyDecryptionRulePositionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyDecryptionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyDecryptionRuleArgs Empty = new NetworkFirewallPolicyDecryptionRuleArgs();

    /**
     * (Updatable) Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return (Updatable) Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
     * 
     */
    @Import(name="condition", required=true)
    private Output<NetworkFirewallPolicyDecryptionRuleConditionArgs> condition;

    /**
     * @return (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
     * 
     */
    public Output<NetworkFirewallPolicyDecryptionRuleConditionArgs> condition() {
        return this.condition;
    }

    /**
     * (Updatable) The name of the decryption profile to use.
     * 
     */
    @Import(name="decryptionProfile")
    private @Nullable Output<String> decryptionProfile;

    /**
     * @return (Updatable) The name of the decryption profile to use.
     * 
     */
    public Optional<Output<String>> decryptionProfile() {
        return Optional.ofNullable(this.decryptionProfile);
    }

    /**
     * Name for the decryption rule, must be unique within the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the decryption rule, must be unique within the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique Network Firewall Policy identifier
     * 
     */
    @Import(name="networkFirewallPolicyId", required=true)
    private Output<String> networkFirewallPolicyId;

    /**
     * @return Unique Network Firewall Policy identifier
     * 
     */
    public Output<String> networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }

    /**
     * (Updatable) An object which defines the position of the rule. Only one of `after_rule` or `before_rule` should be provided.
     * 
     */
    @Import(name="position")
    private @Nullable Output<NetworkFirewallPolicyDecryptionRulePositionArgs> position;

    /**
     * @return (Updatable) An object which defines the position of the rule. Only one of `after_rule` or `before_rule` should be provided.
     * 
     */
    public Optional<Output<NetworkFirewallPolicyDecryptionRulePositionArgs>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="priorityOrder")
    private @Nullable Output<String> priorityOrder;

    public Optional<Output<String>> priorityOrder() {
        return Optional.ofNullable(this.priorityOrder);
    }

    /**
     * (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private NetworkFirewallPolicyDecryptionRuleArgs() {}

    private NetworkFirewallPolicyDecryptionRuleArgs(NetworkFirewallPolicyDecryptionRuleArgs $) {
        this.action = $.action;
        this.condition = $.condition;
        this.decryptionProfile = $.decryptionProfile;
        this.name = $.name;
        this.networkFirewallPolicyId = $.networkFirewallPolicyId;
        this.position = $.position;
        this.priorityOrder = $.priorityOrder;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyDecryptionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyDecryptionRuleArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyDecryptionRuleArgs();
        }

        public Builder(NetworkFirewallPolicyDecryptionRuleArgs defaults) {
            $ = new NetworkFirewallPolicyDecryptionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) Action:
         * * NO_DECRYPT - Matching traffic is not decrypted.
         * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) Action:
         * * NO_DECRYPT - Matching traffic is not decrypted.
         * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param condition (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<NetworkFirewallPolicyDecryptionRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
         * 
         * @return builder
         * 
         */
        public Builder condition(NetworkFirewallPolicyDecryptionRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param decryptionProfile (Updatable) The name of the decryption profile to use.
         * 
         * @return builder
         * 
         */
        public Builder decryptionProfile(@Nullable Output<String> decryptionProfile) {
            $.decryptionProfile = decryptionProfile;
            return this;
        }

        /**
         * @param decryptionProfile (Updatable) The name of the decryption profile to use.
         * 
         * @return builder
         * 
         */
        public Builder decryptionProfile(String decryptionProfile) {
            return decryptionProfile(Output.of(decryptionProfile));
        }

        /**
         * @param name Name for the decryption rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the decryption rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(Output<String> networkFirewallPolicyId) {
            $.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            return networkFirewallPolicyId(Output.of(networkFirewallPolicyId));
        }

        /**
         * @param position (Updatable) An object which defines the position of the rule. Only one of `after_rule` or `before_rule` should be provided.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<NetworkFirewallPolicyDecryptionRulePositionArgs> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position (Updatable) An object which defines the position of the rule. Only one of `after_rule` or `before_rule` should be provided.
         * 
         * @return builder
         * 
         */
        public Builder position(NetworkFirewallPolicyDecryptionRulePositionArgs position) {
            return position(Output.of(position));
        }

        public Builder priorityOrder(@Nullable Output<String> priorityOrder) {
            $.priorityOrder = priorityOrder;
            return this;
        }

        public Builder priorityOrder(String priorityOrder) {
            return priorityOrder(Output.of(priorityOrder));
        }

        /**
         * @param secret (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public NetworkFirewallPolicyDecryptionRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyDecryptionRuleArgs", "action");
            }
            if ($.condition == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyDecryptionRuleArgs", "condition");
            }
            if ($.networkFirewallPolicyId == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyDecryptionRuleArgs", "networkFirewallPolicyId");
            }
            return $;
        }
    }

}
