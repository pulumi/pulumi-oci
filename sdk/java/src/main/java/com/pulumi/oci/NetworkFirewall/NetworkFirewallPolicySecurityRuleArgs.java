// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicySecurityRuleConditionArgs;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicySecurityRulePositionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicySecurityRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicySecurityRuleArgs Empty = new NetworkFirewallPolicySecurityRuleArgs();

    /**
     * (Updatable) Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return (Updatable) Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
     * 
     */
    @Import(name="condition", required=true)
    private Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition;

    /**
     * @return (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
     * 
     */
    public Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition() {
        return this.condition;
    }

    /**
     * (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
     * * INTRUSION_DETECTION - Intrusion Detection.
     * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
     * 
     */
    @Import(name="inspection")
    private @Nullable Output<String> inspection;

    /**
     * @return (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
     * * INTRUSION_DETECTION - Intrusion Detection.
     * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
     * 
     */
    public Optional<Output<String>> inspection() {
        return Optional.ofNullable(this.inspection);
    }

    /**
     * Name for the Security rule, must be unique within the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the Security rule, must be unique within the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique Network Firewall Policy identifier
     * 
     */
    @Import(name="networkFirewallPolicyId", required=true)
    private Output<String> networkFirewallPolicyId;

    /**
     * @return Unique Network Firewall Policy identifier
     * 
     */
    public Output<String> networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }

    /**
     * (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
     * 
     */
    @Import(name="positions")
    private @Nullable Output<List<NetworkFirewallPolicySecurityRulePositionArgs>> positions;

    /**
     * @return (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
     * 
     */
    public Optional<Output<List<NetworkFirewallPolicySecurityRulePositionArgs>>> positions() {
        return Optional.ofNullable(this.positions);
    }

    @Import(name="priorityOrder")
    private @Nullable Output<String> priorityOrder;

    public Optional<Output<String>> priorityOrder() {
        return Optional.ofNullable(this.priorityOrder);
    }

    private NetworkFirewallPolicySecurityRuleArgs() {}

    private NetworkFirewallPolicySecurityRuleArgs(NetworkFirewallPolicySecurityRuleArgs $) {
        this.action = $.action;
        this.condition = $.condition;
        this.inspection = $.inspection;
        this.name = $.name;
        this.networkFirewallPolicyId = $.networkFirewallPolicyId;
        this.positions = $.positions;
        this.priorityOrder = $.priorityOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicySecurityRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicySecurityRuleArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicySecurityRuleArgs();
        }

        public Builder(NetworkFirewallPolicySecurityRuleArgs defaults) {
            $ = new NetworkFirewallPolicySecurityRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) Types of Action on the Traffic flow.
         * * ALLOW - Allows the traffic.
         * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
         * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
         * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) Types of Action on the Traffic flow.
         * * ALLOW - Allows the traffic.
         * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
         * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
         * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param condition (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
         * 
         * @return builder
         * 
         */
        public Builder condition(NetworkFirewallPolicySecurityRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param inspection (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
         * * INTRUSION_DETECTION - Intrusion Detection.
         * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
         * 
         * @return builder
         * 
         */
        public Builder inspection(@Nullable Output<String> inspection) {
            $.inspection = inspection;
            return this;
        }

        /**
         * @param inspection (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
         * * INTRUSION_DETECTION - Intrusion Detection.
         * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
         * 
         * @return builder
         * 
         */
        public Builder inspection(String inspection) {
            return inspection(Output.of(inspection));
        }

        /**
         * @param name Name for the Security rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the Security rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(Output<String> networkFirewallPolicyId) {
            $.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            return networkFirewallPolicyId(Output.of(networkFirewallPolicyId));
        }

        /**
         * @param positions (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
         * 
         * @return builder
         * 
         */
        public Builder positions(@Nullable Output<List<NetworkFirewallPolicySecurityRulePositionArgs>> positions) {
            $.positions = positions;
            return this;
        }

        /**
         * @param positions (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
         * 
         * @return builder
         * 
         */
        public Builder positions(List<NetworkFirewallPolicySecurityRulePositionArgs> positions) {
            return positions(Output.of(positions));
        }

        /**
         * @param positions (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
         * 
         * @return builder
         * 
         */
        public Builder positions(NetworkFirewallPolicySecurityRulePositionArgs... positions) {
            return positions(List.of(positions));
        }

        public Builder priorityOrder(@Nullable Output<String> priorityOrder) {
            $.priorityOrder = priorityOrder;
            return this;
        }

        public Builder priorityOrder(String priorityOrder) {
            return priorityOrder(Output.of(priorityOrder));
        }

        public NetworkFirewallPolicySecurityRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.networkFirewallPolicyId = Objects.requireNonNull($.networkFirewallPolicyId, "expected parameter 'networkFirewallPolicyId' to be non-null");
            return $;
        }
    }

}
