// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallNatConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallNatConfigurationArgs Empty = new NetworkFirewallNatConfigurationArgs();

    /**
     * (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
     * 
     */
    @Import(name="mustEnablePrivateNat", required=true)
    private Output<Boolean> mustEnablePrivateNat;

    /**
     * @return (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
     * 
     */
    public Output<Boolean> mustEnablePrivateNat() {
        return this.mustEnablePrivateNat;
    }

    /**
     * An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    @Import(name="natIpAddressLists")
    private @Nullable Output<List<String>> natIpAddressLists;

    /**
     * @return An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    public Optional<Output<List<String>>> natIpAddressLists() {
        return Optional.ofNullable(this.natIpAddressLists);
    }

    private NetworkFirewallNatConfigurationArgs() {}

    private NetworkFirewallNatConfigurationArgs(NetworkFirewallNatConfigurationArgs $) {
        this.mustEnablePrivateNat = $.mustEnablePrivateNat;
        this.natIpAddressLists = $.natIpAddressLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallNatConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallNatConfigurationArgs $;

        public Builder() {
            $ = new NetworkFirewallNatConfigurationArgs();
        }

        public Builder(NetworkFirewallNatConfigurationArgs defaults) {
            $ = new NetworkFirewallNatConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mustEnablePrivateNat (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
         * 
         * @return builder
         * 
         */
        public Builder mustEnablePrivateNat(Output<Boolean> mustEnablePrivateNat) {
            $.mustEnablePrivateNat = mustEnablePrivateNat;
            return this;
        }

        /**
         * @param mustEnablePrivateNat (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
         * 
         * @return builder
         * 
         */
        public Builder mustEnablePrivateNat(Boolean mustEnablePrivateNat) {
            return mustEnablePrivateNat(Output.of(mustEnablePrivateNat));
        }

        /**
         * @param natIpAddressLists An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder natIpAddressLists(@Nullable Output<List<String>> natIpAddressLists) {
            $.natIpAddressLists = natIpAddressLists;
            return this;
        }

        /**
         * @param natIpAddressLists An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder natIpAddressLists(List<String> natIpAddressLists) {
            return natIpAddressLists(Output.of(natIpAddressLists));
        }

        /**
         * @param natIpAddressLists An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder natIpAddressLists(String... natIpAddressLists) {
            return natIpAddressLists(List.of(natIpAddressLists));
        }

        public NetworkFirewallNatConfigurationArgs build() {
            if ($.mustEnablePrivateNat == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallNatConfigurationArgs", "mustEnablePrivateNat");
            }
            return $;
        }
    }

}
