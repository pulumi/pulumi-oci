// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyApplicationListArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyApplicationListArgs Empty = new NetworkFirewallPolicyApplicationListArgs();

    @Import(name="icmpCode")
    private @Nullable Output<Integer> icmpCode;

    public Optional<Output<Integer>> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }

    @Import(name="icmpType")
    private @Nullable Output<Integer> icmpType;

    public Optional<Output<Integer>> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    @Import(name="maximumPort")
    private @Nullable Output<Integer> maximumPort;

    public Optional<Output<Integer>> maximumPort() {
        return Optional.ofNullable(this.maximumPort);
    }

    @Import(name="minimumPort")
    private @Nullable Output<Integer> minimumPort;

    public Optional<Output<Integer>> minimumPort() {
        return Optional.ofNullable(this.minimumPort);
    }

    /**
     * (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NetworkFirewallPolicyApplicationListArgs() {}

    private NetworkFirewallPolicyApplicationListArgs(NetworkFirewallPolicyApplicationListArgs $) {
        this.icmpCode = $.icmpCode;
        this.icmpType = $.icmpType;
        this.key = $.key;
        this.maximumPort = $.maximumPort;
        this.minimumPort = $.minimumPort;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyApplicationListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyApplicationListArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyApplicationListArgs();
        }

        public Builder(NetworkFirewallPolicyApplicationListArgs defaults) {
            $ = new NetworkFirewallPolicyApplicationListArgs(Objects.requireNonNull(defaults));
        }

        public Builder icmpCode(@Nullable Output<Integer> icmpCode) {
            $.icmpCode = icmpCode;
            return this;
        }

        public Builder icmpCode(Integer icmpCode) {
            return icmpCode(Output.of(icmpCode));
        }

        public Builder icmpType(@Nullable Output<Integer> icmpType) {
            $.icmpType = icmpType;
            return this;
        }

        public Builder icmpType(Integer icmpType) {
            return icmpType(Output.of(icmpType));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder maximumPort(@Nullable Output<Integer> maximumPort) {
            $.maximumPort = maximumPort;
            return this;
        }

        public Builder maximumPort(Integer maximumPort) {
            return maximumPort(Output.of(maximumPort));
        }

        public Builder minimumPort(@Nullable Output<Integer> minimumPort) {
            $.minimumPort = minimumPort;
            return this;
        }

        public Builder minimumPort(Integer minimumPort) {
            return minimumPort(Output.of(minimumPort));
        }

        /**
         * @param type (Updatable) Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NetworkFirewallPolicyApplicationListArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
