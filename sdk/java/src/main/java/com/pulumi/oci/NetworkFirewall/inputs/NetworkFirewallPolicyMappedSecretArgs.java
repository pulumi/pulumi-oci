// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyMappedSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyMappedSecretArgs Empty = new NetworkFirewallPolicyMappedSecretArgs();

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    /**
     * (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) OCID for the Vault Secret to be used.
     * 
     */
    @Import(name="vaultSecretId")
    private @Nullable Output<String> vaultSecretId;

    /**
     * @return (Updatable) OCID for the Vault Secret to be used.
     * 
     */
    public Optional<Output<String>> vaultSecretId() {
        return Optional.ofNullable(this.vaultSecretId);
    }

    /**
     * (Updatable) Version number of the secret to be used.
     * 
     */
    @Import(name="versionNumber")
    private @Nullable Output<Integer> versionNumber;

    /**
     * @return (Updatable) Version number of the secret to be used.
     * 
     */
    public Optional<Output<Integer>> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private NetworkFirewallPolicyMappedSecretArgs() {}

    private NetworkFirewallPolicyMappedSecretArgs(NetworkFirewallPolicyMappedSecretArgs $) {
        this.key = $.key;
        this.type = $.type;
        this.vaultSecretId = $.vaultSecretId;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyMappedSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyMappedSecretArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyMappedSecretArgs();
        }

        public Builder(NetworkFirewallPolicyMappedSecretArgs defaults) {
            $ = new NetworkFirewallPolicyMappedSecretArgs(Objects.requireNonNull(defaults));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param type (Updatable) Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultSecretId (Updatable) OCID for the Vault Secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(@Nullable Output<String> vaultSecretId) {
            $.vaultSecretId = vaultSecretId;
            return this;
        }

        /**
         * @param vaultSecretId (Updatable) OCID for the Vault Secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(String vaultSecretId) {
            return vaultSecretId(Output.of(vaultSecretId));
        }

        /**
         * @param versionNumber (Updatable) Version number of the secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(@Nullable Output<Integer> versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        /**
         * @param versionNumber (Updatable) Version number of the secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(Integer versionNumber) {
            return versionNumber(Output.of(versionNumber));
        }

        public NetworkFirewallPolicyMappedSecretArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
