// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyMappedSecretState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyMappedSecretState Empty = new NetworkFirewallPolicyMappedSecretState();

    /**
     * Unique name to identify the group of urls to be used in the policy rules.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name to identify the group of urls to be used in the policy rules.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique Network Firewall Policy identifier
     * 
     */
    @Import(name="networkFirewallPolicyId")
    private @Nullable Output<String> networkFirewallPolicyId;

    /**
     * @return Unique Network Firewall Policy identifier
     * 
     */
    public Optional<Output<String>> networkFirewallPolicyId() {
        return Optional.ofNullable(this.networkFirewallPolicyId);
    }

    /**
     * OCID of the Network Firewall Policy this Mapped Secret belongs to.
     * 
     */
    @Import(name="parentResourceId")
    private @Nullable Output<String> parentResourceId;

    /**
     * @return OCID of the Network Firewall Policy this Mapped Secret belongs to.
     * 
     */
    public Optional<Output<String>> parentResourceId() {
        return Optional.ofNullable(this.parentResourceId);
    }

    /**
     * Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Updatable) OCID for the Vault Secret to be used.
     * 
     */
    @Import(name="vaultSecretId")
    private @Nullable Output<String> vaultSecretId;

    /**
     * @return (Updatable) OCID for the Vault Secret to be used.
     * 
     */
    public Optional<Output<String>> vaultSecretId() {
        return Optional.ofNullable(this.vaultSecretId);
    }

    /**
     * (Updatable) Version number of the secret to be used.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="versionNumber")
    private @Nullable Output<Integer> versionNumber;

    /**
     * @return (Updatable) Version number of the secret to be used.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private NetworkFirewallPolicyMappedSecretState() {}

    private NetworkFirewallPolicyMappedSecretState(NetworkFirewallPolicyMappedSecretState $) {
        this.name = $.name;
        this.networkFirewallPolicyId = $.networkFirewallPolicyId;
        this.parentResourceId = $.parentResourceId;
        this.source = $.source;
        this.type = $.type;
        this.vaultSecretId = $.vaultSecretId;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyMappedSecretState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyMappedSecretState $;

        public Builder() {
            $ = new NetworkFirewallPolicyMappedSecretState();
        }

        public Builder(NetworkFirewallPolicyMappedSecretState defaults) {
            $ = new NetworkFirewallPolicyMappedSecretState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Unique name to identify the group of urls to be used in the policy rules.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name to identify the group of urls to be used in the policy rules.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(@Nullable Output<String> networkFirewallPolicyId) {
            $.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            return networkFirewallPolicyId(Output.of(networkFirewallPolicyId));
        }

        /**
         * @param parentResourceId OCID of the Network Firewall Policy this Mapped Secret belongs to.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceId(@Nullable Output<String> parentResourceId) {
            $.parentResourceId = parentResourceId;
            return this;
        }

        /**
         * @param parentResourceId OCID of the Network Firewall Policy this Mapped Secret belongs to.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceId(String parentResourceId) {
            return parentResourceId(Output.of(parentResourceId));
        }

        /**
         * @param source Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param type Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the secrets mapped based on the policy.
         * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
         * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultSecretId (Updatable) OCID for the Vault Secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(@Nullable Output<String> vaultSecretId) {
            $.vaultSecretId = vaultSecretId;
            return this;
        }

        /**
         * @param vaultSecretId (Updatable) OCID for the Vault Secret to be used.
         * 
         * @return builder
         * 
         */
        public Builder vaultSecretId(String vaultSecretId) {
            return vaultSecretId(Output.of(vaultSecretId));
        }

        /**
         * @param versionNumber (Updatable) Version number of the secret to be used.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(@Nullable Output<Integer> versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        /**
         * @param versionNumber (Updatable) Version number of the secret to be used.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(Integer versionNumber) {
            return versionNumber(Output.of(versionNumber));
        }

        public NetworkFirewallPolicyMappedSecretState build() {
            return $;
        }
    }

}
