// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicyNatRuleConditionArgs;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicyNatRulePositionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyNatRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyNatRuleState Empty = new NetworkFirewallPolicyNatRuleState();

    /**
     * (Updatable) action:
     * * DIPP_SRC_NAT - Dynamic-ip-port source NAT.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return (Updatable) action:
     * * DIPP_SRC_NAT - Dynamic-ip-port source NAT.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * (Updatable) Match criteria used in NAT Rule used on the firewall policy.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<NetworkFirewallPolicyNatRuleConditionArgs> condition;

    /**
     * @return (Updatable) Match criteria used in NAT Rule used on the firewall policy.
     * 
     */
    public Optional<Output<NetworkFirewallPolicyNatRuleConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * (Updatable) Description of a NAT rule. This field can be used to add additional info.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Description of a NAT rule. This field can be used to add additional info.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name for the NAT rule, must be unique within the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the NAT rule, must be unique within the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique Network Firewall Policy identifier
     * 
     */
    @Import(name="networkFirewallPolicyId")
    private @Nullable Output<String> networkFirewallPolicyId;

    /**
     * @return Unique Network Firewall Policy identifier
     * 
     */
    public Optional<Output<String>> networkFirewallPolicyId() {
        return Optional.ofNullable(this.networkFirewallPolicyId);
    }

    /**
     * OCID of the Network Firewall Policy this decryption profile belongs to.
     * 
     */
    @Import(name="parentResourceId")
    private @Nullable Output<String> parentResourceId;

    /**
     * @return OCID of the Network Firewall Policy this decryption profile belongs to.
     * 
     */
    public Optional<Output<String>> parentResourceId() {
        return Optional.ofNullable(this.parentResourceId);
    }

    /**
     * (Updatable) An object which defines the position of the rule.
     * 
     */
    @Import(name="position")
    private @Nullable Output<NetworkFirewallPolicyNatRulePositionArgs> position;

    /**
     * @return (Updatable) An object which defines the position of the rule.
     * 
     */
    public Optional<Output<NetworkFirewallPolicyNatRulePositionArgs>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The priority order in which this rule should be evaluated
     * 
     */
    @Import(name="priorityOrder")
    private @Nullable Output<String> priorityOrder;

    /**
     * @return The priority order in which this rule should be evaluated
     * 
     */
    public Optional<Output<String>> priorityOrder() {
        return Optional.ofNullable(this.priorityOrder);
    }

    /**
     * (Updatable) NAT type:
     * * NATV4 - NATV4 type NAT.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Updatable) NAT type:
     * * NATV4 - NATV4 type NAT.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private NetworkFirewallPolicyNatRuleState() {}

    private NetworkFirewallPolicyNatRuleState(NetworkFirewallPolicyNatRuleState $) {
        this.action = $.action;
        this.condition = $.condition;
        this.description = $.description;
        this.name = $.name;
        this.networkFirewallPolicyId = $.networkFirewallPolicyId;
        this.parentResourceId = $.parentResourceId;
        this.position = $.position;
        this.priorityOrder = $.priorityOrder;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyNatRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyNatRuleState $;

        public Builder() {
            $ = new NetworkFirewallPolicyNatRuleState();
        }

        public Builder(NetworkFirewallPolicyNatRuleState defaults) {
            $ = new NetworkFirewallPolicyNatRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) action:
         * * DIPP_SRC_NAT - Dynamic-ip-port source NAT.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) action:
         * * DIPP_SRC_NAT - Dynamic-ip-port source NAT.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param condition (Updatable) Match criteria used in NAT Rule used on the firewall policy.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<NetworkFirewallPolicyNatRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) Match criteria used in NAT Rule used on the firewall policy.
         * 
         * @return builder
         * 
         */
        public Builder condition(NetworkFirewallPolicyNatRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param description (Updatable) Description of a NAT rule. This field can be used to add additional info.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Description of a NAT rule. This field can be used to add additional info.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name for the NAT rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the NAT rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(@Nullable Output<String> networkFirewallPolicyId) {
            $.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }

        /**
         * @param networkFirewallPolicyId Unique Network Firewall Policy identifier
         * 
         * @return builder
         * 
         */
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            return networkFirewallPolicyId(Output.of(networkFirewallPolicyId));
        }

        /**
         * @param parentResourceId OCID of the Network Firewall Policy this decryption profile belongs to.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceId(@Nullable Output<String> parentResourceId) {
            $.parentResourceId = parentResourceId;
            return this;
        }

        /**
         * @param parentResourceId OCID of the Network Firewall Policy this decryption profile belongs to.
         * 
         * @return builder
         * 
         */
        public Builder parentResourceId(String parentResourceId) {
            return parentResourceId(Output.of(parentResourceId));
        }

        /**
         * @param position (Updatable) An object which defines the position of the rule.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<NetworkFirewallPolicyNatRulePositionArgs> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position (Updatable) An object which defines the position of the rule.
         * 
         * @return builder
         * 
         */
        public Builder position(NetworkFirewallPolicyNatRulePositionArgs position) {
            return position(Output.of(position));
        }

        /**
         * @param priorityOrder The priority order in which this rule should be evaluated
         * 
         * @return builder
         * 
         */
        public Builder priorityOrder(@Nullable Output<String> priorityOrder) {
            $.priorityOrder = priorityOrder;
            return this;
        }

        /**
         * @param priorityOrder The priority order in which this rule should be evaluated
         * 
         * @return builder
         * 
         */
        public Builder priorityOrder(String priorityOrder) {
            return priorityOrder(Output.of(priorityOrder));
        }

        /**
         * @param type (Updatable) NAT type:
         * * NATV4 - NATV4 type NAT.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) NAT type:
         * * NATV4 - NATV4 type NAT.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NetworkFirewallPolicyNatRuleState build() {
            return $;
        }
    }

}
