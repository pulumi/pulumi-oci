// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.NetworkFirewall.inputs.NetworkFirewallPolicySecurityRuleConditionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicySecurityRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicySecurityRuleArgs Empty = new NetworkFirewallPolicySecurityRuleArgs();

    /**
     * (Updatable) Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return (Updatable) Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    @Import(name="condition", required=true)
    private Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition;

    /**
     * @return (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    public Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition() {
        return this.condition;
    }

    /**
     * (Updatable) Type of inspection to affect the Traffic flow. This is only applicable if action is INSPECT.
     * * INTRUSION_DETECTION - Intrusion Detection.
     * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
     * 
     */
    @Import(name="inspection")
    private @Nullable Output<String> inspection;

    /**
     * @return (Updatable) Type of inspection to affect the Traffic flow. This is only applicable if action is INSPECT.
     * * INTRUSION_DETECTION - Intrusion Detection.
     * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
     * 
     */
    public Optional<Output<String>> inspection() {
        return Optional.ofNullable(this.inspection);
    }

    /**
     * (Updatable) Name for the Security rule, must be unique within the policy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name for the Security rule, must be unique within the policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private NetworkFirewallPolicySecurityRuleArgs() {}

    private NetworkFirewallPolicySecurityRuleArgs(NetworkFirewallPolicySecurityRuleArgs $) {
        this.action = $.action;
        this.condition = $.condition;
        this.inspection = $.inspection;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicySecurityRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicySecurityRuleArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicySecurityRuleArgs();
        }

        public Builder(NetworkFirewallPolicySecurityRuleArgs defaults) {
            $ = new NetworkFirewallPolicySecurityRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) Types of Action on the Traffic flow.
         * * ALLOW - Allows the traffic.
         * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
         * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
         * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) Types of Action on the Traffic flow.
         * * ALLOW - Allows the traffic.
         * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
         * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
         * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param condition (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<NetworkFirewallPolicySecurityRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
         * 
         * @return builder
         * 
         */
        public Builder condition(NetworkFirewallPolicySecurityRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param inspection (Updatable) Type of inspection to affect the Traffic flow. This is only applicable if action is INSPECT.
         * * INTRUSION_DETECTION - Intrusion Detection.
         * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
         * 
         * @return builder
         * 
         */
        public Builder inspection(@Nullable Output<String> inspection) {
            $.inspection = inspection;
            return this;
        }

        /**
         * @param inspection (Updatable) Type of inspection to affect the Traffic flow. This is only applicable if action is INSPECT.
         * * INTRUSION_DETECTION - Intrusion Detection.
         * * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
         * 
         * @return builder
         * 
         */
        public Builder inspection(String inspection) {
            return inspection(Output.of(inspection));
        }

        /**
         * @param name (Updatable) Name for the Security rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name for the Security rule, must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public NetworkFirewallPolicySecurityRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
