// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallPolicyApplicationList {
    private final Integer icmpCode;
    private final Integer icmpType;
    private final String key;
    private final Integer maximumPort;
    private final Integer minimumPort;
    /**
     * @return Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetNetworkFirewallPolicyApplicationList(
        @CustomType.Parameter("icmpCode") Integer icmpCode,
        @CustomType.Parameter("icmpType") Integer icmpType,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("maximumPort") Integer maximumPort,
        @CustomType.Parameter("minimumPort") Integer minimumPort,
        @CustomType.Parameter("type") String type) {
        this.icmpCode = icmpCode;
        this.icmpType = icmpType;
        this.key = key;
        this.maximumPort = maximumPort;
        this.minimumPort = minimumPort;
        this.type = type;
    }

    public Integer icmpCode() {
        return this.icmpCode;
    }
    public Integer icmpType() {
        return this.icmpType;
    }
    public String key() {
        return this.key;
    }
    public Integer maximumPort() {
        return this.maximumPort;
    }
    public Integer minimumPort() {
        return this.minimumPort;
    }
    /**
     * @return Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyApplicationList defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer icmpCode;
        private Integer icmpType;
        private String key;
        private Integer maximumPort;
        private Integer minimumPort;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNetworkFirewallPolicyApplicationList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.icmpCode = defaults.icmpCode;
    	      this.icmpType = defaults.icmpType;
    	      this.key = defaults.key;
    	      this.maximumPort = defaults.maximumPort;
    	      this.minimumPort = defaults.minimumPort;
    	      this.type = defaults.type;
        }

        public Builder icmpCode(Integer icmpCode) {
            this.icmpCode = Objects.requireNonNull(icmpCode);
            return this;
        }
        public Builder icmpType(Integer icmpType) {
            this.icmpType = Objects.requireNonNull(icmpType);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder maximumPort(Integer maximumPort) {
            this.maximumPort = Objects.requireNonNull(maximumPort);
            return this;
        }
        public Builder minimumPort(Integer minimumPort) {
            this.minimumPort = Objects.requireNonNull(minimumPort);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetNetworkFirewallPolicyApplicationList build() {
            return new GetNetworkFirewallPolicyApplicationList(icmpCode, icmpType, key, maximumPort, minimumPort, type);
        }
    }
}
