// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallPolicyDecryptionProfile {
    /**
     * @return Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    private final Boolean areCertificateExtensionsRestricted;
    /**
     * @return Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    private final Boolean isAutoIncludeAltName;
    /**
     * @return Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    private final Boolean isExpiredCertificateBlocked;
    /**
     * @return Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    private final Boolean isOutOfCapacityBlocked;
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    private final Boolean isRevocationStatusTimeoutBlocked;
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    private final Boolean isUnknownRevocationStatusBlocked;
    /**
     * @return Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    private final Boolean isUnsupportedCipherBlocked;
    /**
     * @return Whether to block sessions if SSL version is not supported.
     * 
     */
    private final Boolean isUnsupportedVersionBlocked;
    /**
     * @return Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    private final Boolean isUntrustedIssuerBlocked;
    private final String key;
    /**
     * @return Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetNetworkFirewallPolicyDecryptionProfile(
        @CustomType.Parameter("areCertificateExtensionsRestricted") Boolean areCertificateExtensionsRestricted,
        @CustomType.Parameter("isAutoIncludeAltName") Boolean isAutoIncludeAltName,
        @CustomType.Parameter("isExpiredCertificateBlocked") Boolean isExpiredCertificateBlocked,
        @CustomType.Parameter("isOutOfCapacityBlocked") Boolean isOutOfCapacityBlocked,
        @CustomType.Parameter("isRevocationStatusTimeoutBlocked") Boolean isRevocationStatusTimeoutBlocked,
        @CustomType.Parameter("isUnknownRevocationStatusBlocked") Boolean isUnknownRevocationStatusBlocked,
        @CustomType.Parameter("isUnsupportedCipherBlocked") Boolean isUnsupportedCipherBlocked,
        @CustomType.Parameter("isUnsupportedVersionBlocked") Boolean isUnsupportedVersionBlocked,
        @CustomType.Parameter("isUntrustedIssuerBlocked") Boolean isUntrustedIssuerBlocked,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("type") String type) {
        this.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
        this.isAutoIncludeAltName = isAutoIncludeAltName;
        this.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
        this.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
        this.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
        this.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
        this.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
        this.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
        this.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
        this.key = key;
        this.type = type;
    }

    /**
     * @return Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    public Boolean areCertificateExtensionsRestricted() {
        return this.areCertificateExtensionsRestricted;
    }
    /**
     * @return Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    public Boolean isAutoIncludeAltName() {
        return this.isAutoIncludeAltName;
    }
    /**
     * @return Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    public Boolean isExpiredCertificateBlocked() {
        return this.isExpiredCertificateBlocked;
    }
    /**
     * @return Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    public Boolean isOutOfCapacityBlocked() {
        return this.isOutOfCapacityBlocked;
    }
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    public Boolean isRevocationStatusTimeoutBlocked() {
        return this.isRevocationStatusTimeoutBlocked;
    }
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    public Boolean isUnknownRevocationStatusBlocked() {
        return this.isUnknownRevocationStatusBlocked;
    }
    /**
     * @return Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    public Boolean isUnsupportedCipherBlocked() {
        return this.isUnsupportedCipherBlocked;
    }
    /**
     * @return Whether to block sessions if SSL version is not supported.
     * 
     */
    public Boolean isUnsupportedVersionBlocked() {
        return this.isUnsupportedVersionBlocked;
    }
    /**
     * @return Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    public Boolean isUntrustedIssuerBlocked() {
        return this.isUntrustedIssuerBlocked;
    }
    public String key() {
        return this.key;
    }
    /**
     * @return Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyDecryptionProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean areCertificateExtensionsRestricted;
        private Boolean isAutoIncludeAltName;
        private Boolean isExpiredCertificateBlocked;
        private Boolean isOutOfCapacityBlocked;
        private Boolean isRevocationStatusTimeoutBlocked;
        private Boolean isUnknownRevocationStatusBlocked;
        private Boolean isUnsupportedCipherBlocked;
        private Boolean isUnsupportedVersionBlocked;
        private Boolean isUntrustedIssuerBlocked;
        private String key;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNetworkFirewallPolicyDecryptionProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areCertificateExtensionsRestricted = defaults.areCertificateExtensionsRestricted;
    	      this.isAutoIncludeAltName = defaults.isAutoIncludeAltName;
    	      this.isExpiredCertificateBlocked = defaults.isExpiredCertificateBlocked;
    	      this.isOutOfCapacityBlocked = defaults.isOutOfCapacityBlocked;
    	      this.isRevocationStatusTimeoutBlocked = defaults.isRevocationStatusTimeoutBlocked;
    	      this.isUnknownRevocationStatusBlocked = defaults.isUnknownRevocationStatusBlocked;
    	      this.isUnsupportedCipherBlocked = defaults.isUnsupportedCipherBlocked;
    	      this.isUnsupportedVersionBlocked = defaults.isUnsupportedVersionBlocked;
    	      this.isUntrustedIssuerBlocked = defaults.isUntrustedIssuerBlocked;
    	      this.key = defaults.key;
    	      this.type = defaults.type;
        }

        public Builder areCertificateExtensionsRestricted(Boolean areCertificateExtensionsRestricted) {
            this.areCertificateExtensionsRestricted = Objects.requireNonNull(areCertificateExtensionsRestricted);
            return this;
        }
        public Builder isAutoIncludeAltName(Boolean isAutoIncludeAltName) {
            this.isAutoIncludeAltName = Objects.requireNonNull(isAutoIncludeAltName);
            return this;
        }
        public Builder isExpiredCertificateBlocked(Boolean isExpiredCertificateBlocked) {
            this.isExpiredCertificateBlocked = Objects.requireNonNull(isExpiredCertificateBlocked);
            return this;
        }
        public Builder isOutOfCapacityBlocked(Boolean isOutOfCapacityBlocked) {
            this.isOutOfCapacityBlocked = Objects.requireNonNull(isOutOfCapacityBlocked);
            return this;
        }
        public Builder isRevocationStatusTimeoutBlocked(Boolean isRevocationStatusTimeoutBlocked) {
            this.isRevocationStatusTimeoutBlocked = Objects.requireNonNull(isRevocationStatusTimeoutBlocked);
            return this;
        }
        public Builder isUnknownRevocationStatusBlocked(Boolean isUnknownRevocationStatusBlocked) {
            this.isUnknownRevocationStatusBlocked = Objects.requireNonNull(isUnknownRevocationStatusBlocked);
            return this;
        }
        public Builder isUnsupportedCipherBlocked(Boolean isUnsupportedCipherBlocked) {
            this.isUnsupportedCipherBlocked = Objects.requireNonNull(isUnsupportedCipherBlocked);
            return this;
        }
        public Builder isUnsupportedVersionBlocked(Boolean isUnsupportedVersionBlocked) {
            this.isUnsupportedVersionBlocked = Objects.requireNonNull(isUnsupportedVersionBlocked);
            return this;
        }
        public Builder isUntrustedIssuerBlocked(Boolean isUntrustedIssuerBlocked) {
            this.isUntrustedIssuerBlocked = Objects.requireNonNull(isUntrustedIssuerBlocked);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetNetworkFirewallPolicyDecryptionProfile build() {
            return new GetNetworkFirewallPolicyDecryptionProfile(areCertificateExtensionsRestricted, isAutoIncludeAltName, isExpiredCertificateBlocked, isOutOfCapacityBlocked, isRevocationStatusTimeoutBlocked, isUnknownRevocationStatusBlocked, isUnsupportedCipherBlocked, isUnsupportedVersionBlocked, isUntrustedIssuerBlocked, key, type);
        }
    }
}
