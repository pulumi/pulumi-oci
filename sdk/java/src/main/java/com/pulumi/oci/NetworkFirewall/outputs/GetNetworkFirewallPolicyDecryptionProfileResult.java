// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkFirewallPolicyDecryptionProfileResult {
    /**
     * @return Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    private @Nullable Boolean areCertificateExtensionsRestricted;
    private @Nullable String id;
    /**
     * @return Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    private @Nullable Boolean isAutoIncludeAltName;
    /**
     * @return Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    private @Nullable Boolean isExpiredCertificateBlocked;
    /**
     * @return Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    private @Nullable Boolean isOutOfCapacityBlocked;
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    private @Nullable Boolean isRevocationStatusTimeoutBlocked;
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    private @Nullable Boolean isUnknownRevocationStatusBlocked;
    /**
     * @return Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    private @Nullable Boolean isUnsupportedCipherBlocked;
    /**
     * @return Whether to block sessions if SSL version is not supported.
     * 
     */
    private @Nullable Boolean isUnsupportedVersionBlocked;
    /**
     * @return Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    private @Nullable Boolean isUntrustedIssuerBlocked;
    /**
     * @return Unique Name of the decryption profile.
     * 
     */
    private String name;
    private String networkFirewallPolicyId;
    /**
     * @return OCID of the Network Firewall Policy this decryption profile belongs to.
     * 
     */
    private @Nullable String parentResourceId;
    /**
     * @return Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
     * 
     */
    private @Nullable String type;

    private GetNetworkFirewallPolicyDecryptionProfileResult() {}
    /**
     * @return Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    public Optional<Boolean> areCertificateExtensionsRestricted() {
        return Optional.ofNullable(this.areCertificateExtensionsRestricted);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    public Optional<Boolean> isAutoIncludeAltName() {
        return Optional.ofNullable(this.isAutoIncludeAltName);
    }
    /**
     * @return Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    public Optional<Boolean> isExpiredCertificateBlocked() {
        return Optional.ofNullable(this.isExpiredCertificateBlocked);
    }
    /**
     * @return Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    public Optional<Boolean> isOutOfCapacityBlocked() {
        return Optional.ofNullable(this.isOutOfCapacityBlocked);
    }
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    public Optional<Boolean> isRevocationStatusTimeoutBlocked() {
        return Optional.ofNullable(this.isRevocationStatusTimeoutBlocked);
    }
    /**
     * @return Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    public Optional<Boolean> isUnknownRevocationStatusBlocked() {
        return Optional.ofNullable(this.isUnknownRevocationStatusBlocked);
    }
    /**
     * @return Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    public Optional<Boolean> isUnsupportedCipherBlocked() {
        return Optional.ofNullable(this.isUnsupportedCipherBlocked);
    }
    /**
     * @return Whether to block sessions if SSL version is not supported.
     * 
     */
    public Optional<Boolean> isUnsupportedVersionBlocked() {
        return Optional.ofNullable(this.isUnsupportedVersionBlocked);
    }
    /**
     * @return Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    public Optional<Boolean> isUntrustedIssuerBlocked() {
        return Optional.ofNullable(this.isUntrustedIssuerBlocked);
    }
    /**
     * @return Unique Name of the decryption profile.
     * 
     */
    public String name() {
        return this.name;
    }
    public String networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }
    /**
     * @return OCID of the Network Firewall Policy this decryption profile belongs to.
     * 
     */
    public Optional<String> parentResourceId() {
        return Optional.ofNullable(this.parentResourceId);
    }
    /**
     * @return Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyDecryptionProfileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean areCertificateExtensionsRestricted;
        private @Nullable String id;
        private @Nullable Boolean isAutoIncludeAltName;
        private @Nullable Boolean isExpiredCertificateBlocked;
        private @Nullable Boolean isOutOfCapacityBlocked;
        private @Nullable Boolean isRevocationStatusTimeoutBlocked;
        private @Nullable Boolean isUnknownRevocationStatusBlocked;
        private @Nullable Boolean isUnsupportedCipherBlocked;
        private @Nullable Boolean isUnsupportedVersionBlocked;
        private @Nullable Boolean isUntrustedIssuerBlocked;
        private String name;
        private String networkFirewallPolicyId;
        private @Nullable String parentResourceId;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetNetworkFirewallPolicyDecryptionProfileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areCertificateExtensionsRestricted = defaults.areCertificateExtensionsRestricted;
    	      this.id = defaults.id;
    	      this.isAutoIncludeAltName = defaults.isAutoIncludeAltName;
    	      this.isExpiredCertificateBlocked = defaults.isExpiredCertificateBlocked;
    	      this.isOutOfCapacityBlocked = defaults.isOutOfCapacityBlocked;
    	      this.isRevocationStatusTimeoutBlocked = defaults.isRevocationStatusTimeoutBlocked;
    	      this.isUnknownRevocationStatusBlocked = defaults.isUnknownRevocationStatusBlocked;
    	      this.isUnsupportedCipherBlocked = defaults.isUnsupportedCipherBlocked;
    	      this.isUnsupportedVersionBlocked = defaults.isUnsupportedVersionBlocked;
    	      this.isUntrustedIssuerBlocked = defaults.isUntrustedIssuerBlocked;
    	      this.name = defaults.name;
    	      this.networkFirewallPolicyId = defaults.networkFirewallPolicyId;
    	      this.parentResourceId = defaults.parentResourceId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder areCertificateExtensionsRestricted(@Nullable Boolean areCertificateExtensionsRestricted) {
            this.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoIncludeAltName(@Nullable Boolean isAutoIncludeAltName) {
            this.isAutoIncludeAltName = isAutoIncludeAltName;
            return this;
        }
        @CustomType.Setter
        public Builder isExpiredCertificateBlocked(@Nullable Boolean isExpiredCertificateBlocked) {
            this.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isOutOfCapacityBlocked(@Nullable Boolean isOutOfCapacityBlocked) {
            this.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isRevocationStatusTimeoutBlocked(@Nullable Boolean isRevocationStatusTimeoutBlocked) {
            this.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isUnknownRevocationStatusBlocked(@Nullable Boolean isUnknownRevocationStatusBlocked) {
            this.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isUnsupportedCipherBlocked(@Nullable Boolean isUnsupportedCipherBlocked) {
            this.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isUnsupportedVersionBlocked(@Nullable Boolean isUnsupportedVersionBlocked) {
            this.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isUntrustedIssuerBlocked(@Nullable Boolean isUntrustedIssuerBlocked) {
            this.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            this.networkFirewallPolicyId = Objects.requireNonNull(networkFirewallPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder parentResourceId(@Nullable String parentResourceId) {
            this.parentResourceId = parentResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetNetworkFirewallPolicyDecryptionProfileResult build() {
            final var o = new GetNetworkFirewallPolicyDecryptionProfileResult();
            o.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
            o.id = id;
            o.isAutoIncludeAltName = isAutoIncludeAltName;
            o.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
            o.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
            o.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
            o.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
            o.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
            o.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
            o.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
            o.name = name;
            o.networkFirewallPolicyId = networkFirewallPolicyId;
            o.parentResourceId = parentResourceId;
            o.type = type;
            return o;
        }
    }
}
