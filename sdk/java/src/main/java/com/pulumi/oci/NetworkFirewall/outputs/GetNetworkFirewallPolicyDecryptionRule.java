// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyDecryptionRuleCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallPolicyDecryptionRule {
    /**
     * @return Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    private final String action;
    /**
     * @return Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    private final List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions;
    /**
     * @return The name of the decryption profile to use.
     * 
     */
    private final String decryptionProfile;
    /**
     * @return Name for the Security rule, must be unique within the policy.
     * 
     */
    private final String name;
    /**
     * @return The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    private final String secret;

    @CustomType.Constructor
    private GetNetworkFirewallPolicyDecryptionRule(
        @CustomType.Parameter("action") String action,
        @CustomType.Parameter("conditions") List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions,
        @CustomType.Parameter("decryptionProfile") String decryptionProfile,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("secret") String secret) {
        this.action = action;
        this.conditions = conditions;
        this.decryptionProfile = decryptionProfile;
        this.name = name;
        this.secret = secret;
    }

    /**
     * @return Types of Action on the Traffic flow.
     * * ALLOW - Allows the traffic.
     * * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
     * * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
     * * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    public List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return The name of the decryption profile to use.
     * 
     */
    public String decryptionProfile() {
        return this.decryptionProfile;
    }
    /**
     * @return Name for the Security rule, must be unique within the policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    public String secret() {
        return this.secret;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyDecryptionRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions;
        private String decryptionProfile;
        private String name;
        private String secret;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNetworkFirewallPolicyDecryptionRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.conditions = defaults.conditions;
    	      this.decryptionProfile = defaults.decryptionProfile;
    	      this.name = defaults.name;
    	      this.secret = defaults.secret;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder conditions(List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(GetNetworkFirewallPolicyDecryptionRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder decryptionProfile(String decryptionProfile) {
            this.decryptionProfile = Objects.requireNonNull(decryptionProfile);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder secret(String secret) {
            this.secret = Objects.requireNonNull(secret);
            return this;
        }        public GetNetworkFirewallPolicyDecryptionRule build() {
            return new GetNetworkFirewallPolicyDecryptionRule(action, conditions, decryptionProfile, name, secret);
        }
    }
}
