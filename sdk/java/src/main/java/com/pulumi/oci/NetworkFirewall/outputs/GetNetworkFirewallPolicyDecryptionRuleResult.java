// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyDecryptionRuleCondition;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyDecryptionRulePosition;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallPolicyDecryptionRuleResult {
    /**
     * @return Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     * 
     */
    private String action;
    /**
     * @return Match criteria used in Decryption Rule used on the firewall policy rules.
     * 
     */
    private List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions;
    /**
     * @return The name of the decryption profile to use.
     * 
     */
    private String decryptionProfile;
    private String id;
    /**
     * @return Name for the decryption rule, must be unique within the policy.
     * 
     */
    private String name;
    private String networkFirewallPolicyId;
    /**
     * @return OCID of the Network Firewall Policy this decryption rule belongs to.
     * 
     */
    private String parentResourceId;
    /**
     * @return An object which defines the position of the rule.
     * 
     */
    private List<GetNetworkFirewallPolicyDecryptionRulePosition> positions;
    private String priorityOrder;
    /**
     * @return The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    private String secret;

    private GetNetworkFirewallPolicyDecryptionRuleResult() {}
    /**
     * @return Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Match criteria used in Decryption Rule used on the firewall policy rules.
     * 
     */
    public List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return The name of the decryption profile to use.
     * 
     */
    public String decryptionProfile() {
        return this.decryptionProfile;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Name for the decryption rule, must be unique within the policy.
     * 
     */
    public String name() {
        return this.name;
    }
    public String networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }
    /**
     * @return OCID of the Network Firewall Policy this decryption rule belongs to.
     * 
     */
    public String parentResourceId() {
        return this.parentResourceId;
    }
    /**
     * @return An object which defines the position of the rule.
     * 
     */
    public List<GetNetworkFirewallPolicyDecryptionRulePosition> positions() {
        return this.positions;
    }
    public String priorityOrder() {
        return this.priorityOrder;
    }
    /**
     * @return The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     * 
     */
    public String secret() {
        return this.secret;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyDecryptionRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions;
        private String decryptionProfile;
        private String id;
        private String name;
        private String networkFirewallPolicyId;
        private String parentResourceId;
        private List<GetNetworkFirewallPolicyDecryptionRulePosition> positions;
        private String priorityOrder;
        private String secret;
        public Builder() {}
        public Builder(GetNetworkFirewallPolicyDecryptionRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.conditions = defaults.conditions;
    	      this.decryptionProfile = defaults.decryptionProfile;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkFirewallPolicyId = defaults.networkFirewallPolicyId;
    	      this.parentResourceId = defaults.parentResourceId;
    	      this.positions = defaults.positions;
    	      this.priorityOrder = defaults.priorityOrder;
    	      this.secret = defaults.secret;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetNetworkFirewallPolicyDecryptionRuleCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetNetworkFirewallPolicyDecryptionRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder decryptionProfile(String decryptionProfile) {
            if (decryptionProfile == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "decryptionProfile");
            }
            this.decryptionProfile = decryptionProfile;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            if (networkFirewallPolicyId == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "networkFirewallPolicyId");
            }
            this.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder parentResourceId(String parentResourceId) {
            if (parentResourceId == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "parentResourceId");
            }
            this.parentResourceId = parentResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder positions(List<GetNetworkFirewallPolicyDecryptionRulePosition> positions) {
            if (positions == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "positions");
            }
            this.positions = positions;
            return this;
        }
        public Builder positions(GetNetworkFirewallPolicyDecryptionRulePosition... positions) {
            return positions(List.of(positions));
        }
        @CustomType.Setter
        public Builder priorityOrder(String priorityOrder) {
            if (priorityOrder == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "priorityOrder");
            }
            this.priorityOrder = priorityOrder;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyDecryptionRuleResult", "secret");
            }
            this.secret = secret;
            return this;
        }
        public GetNetworkFirewallPolicyDecryptionRuleResult build() {
            final var _resultValue = new GetNetworkFirewallPolicyDecryptionRuleResult();
            _resultValue.action = action;
            _resultValue.conditions = conditions;
            _resultValue.decryptionProfile = decryptionProfile;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.networkFirewallPolicyId = networkFirewallPolicyId;
            _resultValue.parentResourceId = parentResourceId;
            _resultValue.positions = positions;
            _resultValue.priorityOrder = priorityOrder;
            _resultValue.secret = secret;
            return _resultValue;
        }
    }
}
