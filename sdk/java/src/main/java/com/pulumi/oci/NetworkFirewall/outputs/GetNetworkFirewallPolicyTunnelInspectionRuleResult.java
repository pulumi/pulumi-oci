// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyTunnelInspectionRuleCondition;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyTunnelInspectionRulePosition;
import com.pulumi.oci.NetworkFirewall.outputs.GetNetworkFirewallPolicyTunnelInspectionRuleProfile;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallPolicyTunnelInspectionRuleResult {
    /**
     * @return Types of Inspect Action on the Traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     * 
     */
    private String action;
    /**
     * @return Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    private List<GetNetworkFirewallPolicyTunnelInspectionRuleCondition> conditions;
    private String id;
    /**
     * @return Name for the Tunnel Inspection Rule, must be unique within the policy.
     * 
     */
    private String name;
    private String networkFirewallPolicyId;
    /**
     * @return OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
     * 
     */
    private String parentResourceId;
    /**
     * @return An object which defines the position of the rule.
     * 
     */
    private List<GetNetworkFirewallPolicyTunnelInspectionRulePosition> positions;
    /**
     * @return The priority order in which this rule should be evaluated
     * 
     */
    private String priorityOrder;
    /**
     * @return Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     * 
     */
    private List<GetNetworkFirewallPolicyTunnelInspectionRuleProfile> profiles;
    /**
     * @return Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     * 
     */
    private String protocol;
    private String tunnelInspectionRuleName;

    private GetNetworkFirewallPolicyTunnelInspectionRuleResult() {}
    /**
     * @return Types of Inspect Action on the Traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     * 
     */
    public List<GetNetworkFirewallPolicyTunnelInspectionRuleCondition> conditions() {
        return this.conditions;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Name for the Tunnel Inspection Rule, must be unique within the policy.
     * 
     */
    public String name() {
        return this.name;
    }
    public String networkFirewallPolicyId() {
        return this.networkFirewallPolicyId;
    }
    /**
     * @return OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
     * 
     */
    public String parentResourceId() {
        return this.parentResourceId;
    }
    /**
     * @return An object which defines the position of the rule.
     * 
     */
    public List<GetNetworkFirewallPolicyTunnelInspectionRulePosition> positions() {
        return this.positions;
    }
    /**
     * @return The priority order in which this rule should be evaluated
     * 
     */
    public String priorityOrder() {
        return this.priorityOrder;
    }
    /**
     * @return Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     * 
     */
    public List<GetNetworkFirewallPolicyTunnelInspectionRuleProfile> profiles() {
        return this.profiles;
    }
    /**
     * @return Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    public String tunnelInspectionRuleName() {
        return this.tunnelInspectionRuleName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallPolicyTunnelInspectionRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<GetNetworkFirewallPolicyTunnelInspectionRuleCondition> conditions;
        private String id;
        private String name;
        private String networkFirewallPolicyId;
        private String parentResourceId;
        private List<GetNetworkFirewallPolicyTunnelInspectionRulePosition> positions;
        private String priorityOrder;
        private List<GetNetworkFirewallPolicyTunnelInspectionRuleProfile> profiles;
        private String protocol;
        private String tunnelInspectionRuleName;
        public Builder() {}
        public Builder(GetNetworkFirewallPolicyTunnelInspectionRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.conditions = defaults.conditions;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkFirewallPolicyId = defaults.networkFirewallPolicyId;
    	      this.parentResourceId = defaults.parentResourceId;
    	      this.positions = defaults.positions;
    	      this.priorityOrder = defaults.priorityOrder;
    	      this.profiles = defaults.profiles;
    	      this.protocol = defaults.protocol;
    	      this.tunnelInspectionRuleName = defaults.tunnelInspectionRuleName;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GetNetworkFirewallPolicyTunnelInspectionRuleCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetNetworkFirewallPolicyTunnelInspectionRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkFirewallPolicyId(String networkFirewallPolicyId) {
            if (networkFirewallPolicyId == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "networkFirewallPolicyId");
            }
            this.networkFirewallPolicyId = networkFirewallPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder parentResourceId(String parentResourceId) {
            if (parentResourceId == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "parentResourceId");
            }
            this.parentResourceId = parentResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder positions(List<GetNetworkFirewallPolicyTunnelInspectionRulePosition> positions) {
            if (positions == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "positions");
            }
            this.positions = positions;
            return this;
        }
        public Builder positions(GetNetworkFirewallPolicyTunnelInspectionRulePosition... positions) {
            return positions(List.of(positions));
        }
        @CustomType.Setter
        public Builder priorityOrder(String priorityOrder) {
            if (priorityOrder == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "priorityOrder");
            }
            this.priorityOrder = priorityOrder;
            return this;
        }
        @CustomType.Setter
        public Builder profiles(List<GetNetworkFirewallPolicyTunnelInspectionRuleProfile> profiles) {
            if (profiles == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "profiles");
            }
            this.profiles = profiles;
            return this;
        }
        public Builder profiles(GetNetworkFirewallPolicyTunnelInspectionRuleProfile... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInspectionRuleName(String tunnelInspectionRuleName) {
            if (tunnelInspectionRuleName == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallPolicyTunnelInspectionRuleResult", "tunnelInspectionRuleName");
            }
            this.tunnelInspectionRuleName = tunnelInspectionRuleName;
            return this;
        }
        public GetNetworkFirewallPolicyTunnelInspectionRuleResult build() {
            final var _resultValue = new GetNetworkFirewallPolicyTunnelInspectionRuleResult();
            _resultValue.action = action;
            _resultValue.conditions = conditions;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.networkFirewallPolicyId = networkFirewallPolicyId;
            _resultValue.parentResourceId = parentResourceId;
            _resultValue.positions = positions;
            _resultValue.priorityOrder = priorityOrder;
            _resultValue.profiles = profiles;
            _resultValue.protocol = protocol;
            _resultValue.tunnelInspectionRuleName = tunnelInspectionRuleName;
            return _resultValue;
        }
    }
}
