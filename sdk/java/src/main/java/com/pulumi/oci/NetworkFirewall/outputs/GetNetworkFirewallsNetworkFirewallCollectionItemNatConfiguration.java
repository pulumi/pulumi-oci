// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration {
    /**
     * @return To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall.
     * 
     */
    private Boolean mustEnablePrivateNat;
    /**
     * @return An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    private List<String> natIpAddressLists;

    private GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration() {}
    /**
     * @return To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall.
     * 
     */
    public Boolean mustEnablePrivateNat() {
        return this.mustEnablePrivateNat;
    }
    /**
     * @return An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    public List<String> natIpAddressLists() {
        return this.natIpAddressLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean mustEnablePrivateNat;
        private List<String> natIpAddressLists;
        public Builder() {}
        public Builder(GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mustEnablePrivateNat = defaults.mustEnablePrivateNat;
    	      this.natIpAddressLists = defaults.natIpAddressLists;
        }

        @CustomType.Setter
        public Builder mustEnablePrivateNat(Boolean mustEnablePrivateNat) {
            if (mustEnablePrivateNat == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration", "mustEnablePrivateNat");
            }
            this.mustEnablePrivateNat = mustEnablePrivateNat;
            return this;
        }
        @CustomType.Setter
        public Builder natIpAddressLists(List<String> natIpAddressLists) {
            if (natIpAddressLists == null) {
              throw new MissingRequiredPropertyException("GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration", "natIpAddressLists");
            }
            this.natIpAddressLists = natIpAddressLists;
            return this;
        }
        public Builder natIpAddressLists(String... natIpAddressLists) {
            return natIpAddressLists(List.of(natIpAddressLists));
        }
        public GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration build() {
            final var _resultValue = new GetNetworkFirewallsNetworkFirewallCollectionItemNatConfiguration();
            _resultValue.mustEnablePrivateNat = mustEnablePrivateNat;
            _resultValue.natIpAddressLists = natIpAddressLists;
            return _resultValue;
        }
    }
}
