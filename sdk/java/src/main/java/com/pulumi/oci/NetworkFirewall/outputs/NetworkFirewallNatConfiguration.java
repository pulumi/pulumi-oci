// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class NetworkFirewallNatConfiguration {
    /**
     * @return (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
     * 
     */
    private Boolean mustEnablePrivateNat;
    /**
     * @return An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    private @Nullable List<String> natIpAddressLists;

    private NetworkFirewallNatConfiguration() {}
    /**
     * @return (Updatable) To allocate private NAT IPs to the firewall. The attached network firewall policy must also have NAT rules to enable NAT on any traffic passing through the firewall. The value of this field can not be false to release the NAT IPs given that the attached network firewall policy does not contains any NAT rules. The value of this field should be set to true if the network firewall policy being applied contains NAT rules.
     * 
     */
    public Boolean mustEnablePrivateNat() {
        return this.mustEnablePrivateNat;
    }
    /**
     * @return An array of NAT IP addresses that are associated with the Network Firewall. These IPs are reserved for NAT and shouldn&#39;t be used for any other purpose in the subnet.
     * 
     */
    public List<String> natIpAddressLists() {
        return this.natIpAddressLists == null ? List.of() : this.natIpAddressLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkFirewallNatConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean mustEnablePrivateNat;
        private @Nullable List<String> natIpAddressLists;
        public Builder() {}
        public Builder(NetworkFirewallNatConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mustEnablePrivateNat = defaults.mustEnablePrivateNat;
    	      this.natIpAddressLists = defaults.natIpAddressLists;
        }

        @CustomType.Setter
        public Builder mustEnablePrivateNat(Boolean mustEnablePrivateNat) {
            if (mustEnablePrivateNat == null) {
              throw new MissingRequiredPropertyException("NetworkFirewallNatConfiguration", "mustEnablePrivateNat");
            }
            this.mustEnablePrivateNat = mustEnablePrivateNat;
            return this;
        }
        @CustomType.Setter
        public Builder natIpAddressLists(@Nullable List<String> natIpAddressLists) {

            this.natIpAddressLists = natIpAddressLists;
            return this;
        }
        public Builder natIpAddressLists(String... natIpAddressLists) {
            return natIpAddressLists(List.of(natIpAddressLists));
        }
        public NetworkFirewallNatConfiguration build() {
            final var _resultValue = new NetworkFirewallNatConfiguration();
            _resultValue.mustEnablePrivateNat = mustEnablePrivateNat;
            _resultValue.natIpAddressLists = natIpAddressLists;
            return _resultValue;
        }
    }
}
