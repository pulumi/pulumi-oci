// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkFirewallPolicyApplicationList {
    private @Nullable Integer icmpCode;
    private @Nullable Integer icmpType;
    private String key;
    private @Nullable Integer maximumPort;
    private @Nullable Integer minimumPort;
    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    private String type;

    private NetworkFirewallPolicyApplicationList() {}
    public Optional<Integer> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }
    public Optional<Integer> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }
    public String key() {
        return this.key;
    }
    public Optional<Integer> maximumPort() {
        return Optional.ofNullable(this.maximumPort);
    }
    public Optional<Integer> minimumPort() {
        return Optional.ofNullable(this.minimumPort);
    }
    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkFirewallPolicyApplicationList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer icmpCode;
        private @Nullable Integer icmpType;
        private String key;
        private @Nullable Integer maximumPort;
        private @Nullable Integer minimumPort;
        private String type;
        public Builder() {}
        public Builder(NetworkFirewallPolicyApplicationList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.icmpCode = defaults.icmpCode;
    	      this.icmpType = defaults.icmpType;
    	      this.key = defaults.key;
    	      this.maximumPort = defaults.maximumPort;
    	      this.minimumPort = defaults.minimumPort;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder icmpCode(@Nullable Integer icmpCode) {
            this.icmpCode = icmpCode;
            return this;
        }
        @CustomType.Setter
        public Builder icmpType(@Nullable Integer icmpType) {
            this.icmpType = icmpType;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder maximumPort(@Nullable Integer maximumPort) {
            this.maximumPort = maximumPort;
            return this;
        }
        @CustomType.Setter
        public Builder minimumPort(@Nullable Integer minimumPort) {
            this.minimumPort = minimumPort;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public NetworkFirewallPolicyApplicationList build() {
            final var o = new NetworkFirewallPolicyApplicationList();
            o.icmpCode = icmpCode;
            o.icmpType = icmpType;
            o.key = key;
            o.maximumPort = maximumPort;
            o.minimumPort = minimumPort;
            o.type = type;
            return o;
        }
    }
}
