// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkFirewall.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkFirewallPolicyDecryptionProfile {
    /**
     * @return (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    private final @Nullable Boolean areCertificateExtensionsRestricted;
    /**
     * @return (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    private final @Nullable Boolean isAutoIncludeAltName;
    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    private final @Nullable Boolean isExpiredCertificateBlocked;
    /**
     * @return (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    private final @Nullable Boolean isOutOfCapacityBlocked;
    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    private final @Nullable Boolean isRevocationStatusTimeoutBlocked;
    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    private final @Nullable Boolean isUnknownRevocationStatusBlocked;
    /**
     * @return (Updatable) Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    private final @Nullable Boolean isUnsupportedCipherBlocked;
    /**
     * @return (Updatable) Whether to block sessions if SSL version is not supported.
     * 
     */
    private final @Nullable Boolean isUnsupportedVersionBlocked;
    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    private final @Nullable Boolean isUntrustedIssuerBlocked;
    private final String key;
    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private NetworkFirewallPolicyDecryptionProfile(
        @CustomType.Parameter("areCertificateExtensionsRestricted") @Nullable Boolean areCertificateExtensionsRestricted,
        @CustomType.Parameter("isAutoIncludeAltName") @Nullable Boolean isAutoIncludeAltName,
        @CustomType.Parameter("isExpiredCertificateBlocked") @Nullable Boolean isExpiredCertificateBlocked,
        @CustomType.Parameter("isOutOfCapacityBlocked") @Nullable Boolean isOutOfCapacityBlocked,
        @CustomType.Parameter("isRevocationStatusTimeoutBlocked") @Nullable Boolean isRevocationStatusTimeoutBlocked,
        @CustomType.Parameter("isUnknownRevocationStatusBlocked") @Nullable Boolean isUnknownRevocationStatusBlocked,
        @CustomType.Parameter("isUnsupportedCipherBlocked") @Nullable Boolean isUnsupportedCipherBlocked,
        @CustomType.Parameter("isUnsupportedVersionBlocked") @Nullable Boolean isUnsupportedVersionBlocked,
        @CustomType.Parameter("isUntrustedIssuerBlocked") @Nullable Boolean isUntrustedIssuerBlocked,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("type") String type) {
        this.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
        this.isAutoIncludeAltName = isAutoIncludeAltName;
        this.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
        this.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
        this.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
        this.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
        this.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
        this.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
        this.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
        this.key = key;
        this.type = type;
    }

    /**
     * @return (Updatable) Whether to block sessions if the server&#39;s certificate uses extensions other than key usage and/or extended key usage.
     * 
     */
    public Optional<Boolean> areCertificateExtensionsRestricted() {
        return Optional.ofNullable(this.areCertificateExtensionsRestricted);
    }
    /**
     * @return (Updatable) Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     * 
     */
    public Optional<Boolean> isAutoIncludeAltName() {
        return Optional.ofNullable(this.isAutoIncludeAltName);
    }
    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is expired.
     * 
     */
    public Optional<Boolean> isExpiredCertificateBlocked() {
        return Optional.ofNullable(this.isExpiredCertificateBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     * 
     */
    public Optional<Boolean> isOutOfCapacityBlocked() {
        return Optional.ofNullable(this.isOutOfCapacityBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     * 
     */
    public Optional<Boolean> isRevocationStatusTimeoutBlocked() {
        return Optional.ofNullable(this.isRevocationStatusTimeoutBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if the revocation status check for server&#39;s certificate results in &#34;unknown&#34;.
     * 
     */
    public Optional<Boolean> isUnknownRevocationStatusBlocked() {
        return Optional.ofNullable(this.isUnknownRevocationStatusBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if SSL cipher suite is not supported.
     * 
     */
    public Optional<Boolean> isUnsupportedCipherBlocked() {
        return Optional.ofNullable(this.isUnsupportedCipherBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if SSL version is not supported.
     * 
     */
    public Optional<Boolean> isUnsupportedVersionBlocked() {
        return Optional.ofNullable(this.isUnsupportedVersionBlocked);
    }
    /**
     * @return (Updatable) Whether to block sessions if server&#39;s certificate is issued by an untrusted certificate authority (CA).
     * 
     */
    public Optional<Boolean> isUntrustedIssuerBlocked() {
        return Optional.ofNullable(this.isUntrustedIssuerBlocked);
    }
    public String key() {
        return this.key;
    }
    /**
     * @return (Updatable) Type of the secrets mapped based on the policy.
     * * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
     * * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkFirewallPolicyDecryptionProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean areCertificateExtensionsRestricted;
        private @Nullable Boolean isAutoIncludeAltName;
        private @Nullable Boolean isExpiredCertificateBlocked;
        private @Nullable Boolean isOutOfCapacityBlocked;
        private @Nullable Boolean isRevocationStatusTimeoutBlocked;
        private @Nullable Boolean isUnknownRevocationStatusBlocked;
        private @Nullable Boolean isUnsupportedCipherBlocked;
        private @Nullable Boolean isUnsupportedVersionBlocked;
        private @Nullable Boolean isUntrustedIssuerBlocked;
        private String key;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkFirewallPolicyDecryptionProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areCertificateExtensionsRestricted = defaults.areCertificateExtensionsRestricted;
    	      this.isAutoIncludeAltName = defaults.isAutoIncludeAltName;
    	      this.isExpiredCertificateBlocked = defaults.isExpiredCertificateBlocked;
    	      this.isOutOfCapacityBlocked = defaults.isOutOfCapacityBlocked;
    	      this.isRevocationStatusTimeoutBlocked = defaults.isRevocationStatusTimeoutBlocked;
    	      this.isUnknownRevocationStatusBlocked = defaults.isUnknownRevocationStatusBlocked;
    	      this.isUnsupportedCipherBlocked = defaults.isUnsupportedCipherBlocked;
    	      this.isUnsupportedVersionBlocked = defaults.isUnsupportedVersionBlocked;
    	      this.isUntrustedIssuerBlocked = defaults.isUntrustedIssuerBlocked;
    	      this.key = defaults.key;
    	      this.type = defaults.type;
        }

        public Builder areCertificateExtensionsRestricted(@Nullable Boolean areCertificateExtensionsRestricted) {
            this.areCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
            return this;
        }
        public Builder isAutoIncludeAltName(@Nullable Boolean isAutoIncludeAltName) {
            this.isAutoIncludeAltName = isAutoIncludeAltName;
            return this;
        }
        public Builder isExpiredCertificateBlocked(@Nullable Boolean isExpiredCertificateBlocked) {
            this.isExpiredCertificateBlocked = isExpiredCertificateBlocked;
            return this;
        }
        public Builder isOutOfCapacityBlocked(@Nullable Boolean isOutOfCapacityBlocked) {
            this.isOutOfCapacityBlocked = isOutOfCapacityBlocked;
            return this;
        }
        public Builder isRevocationStatusTimeoutBlocked(@Nullable Boolean isRevocationStatusTimeoutBlocked) {
            this.isRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
            return this;
        }
        public Builder isUnknownRevocationStatusBlocked(@Nullable Boolean isUnknownRevocationStatusBlocked) {
            this.isUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
            return this;
        }
        public Builder isUnsupportedCipherBlocked(@Nullable Boolean isUnsupportedCipherBlocked) {
            this.isUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
            return this;
        }
        public Builder isUnsupportedVersionBlocked(@Nullable Boolean isUnsupportedVersionBlocked) {
            this.isUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
            return this;
        }
        public Builder isUntrustedIssuerBlocked(@Nullable Boolean isUntrustedIssuerBlocked) {
            this.isUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public NetworkFirewallPolicyDecryptionProfile build() {
            return new NetworkFirewallPolicyDecryptionProfile(areCertificateExtensionsRestricted, isAutoIncludeAltName, isExpiredCertificateBlocked, isOutOfCapacityBlocked, isRevocationStatusTimeoutBlocked, isUnknownRevocationStatusBlocked, isUnsupportedCipherBlocked, isUnsupportedVersionBlocked, isUntrustedIssuerBlocked, key, type);
        }
    }
}
