// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs Empty = new NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs();

    /**
     * (Updatable) The absolute fully-qualified domain name to perform periodic DNS queries. If not provided, an extra dot will be added at the end of a domain name during the query.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return (Updatable) The absolute fully-qualified domain name to perform periodic DNS queries. If not provided, an extra dot will be added at the end of a domain name during the query.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * (Updatable) The class the dns health check query to use; either IN or CH.  Example: `IN`
     * 
     */
    @Import(name="queryClass")
    private @Nullable Output<String> queryClass;

    /**
     * @return (Updatable) The class the dns health check query to use; either IN or CH.  Example: `IN`
     * 
     */
    public Optional<Output<String>> queryClass() {
        return Optional.ofNullable(this.queryClass);
    }

    /**
     * (Updatable) The type the dns health check query to use; A, AAAA, TXT.  Example: `A`
     * 
     */
    @Import(name="queryType")
    private @Nullable Output<String> queryType;

    /**
     * @return (Updatable) The type the dns health check query to use; A, AAAA, TXT.  Example: `A`
     * 
     */
    public Optional<Output<String>> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    /**
     * (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: [&#34;NOERROR&#34;, &#34;NXDOMAIN&#34;]
     * 
     */
    @Import(name="rcodes")
    private @Nullable Output<List<String>> rcodes;

    /**
     * @return (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: [&#34;NOERROR&#34;, &#34;NXDOMAIN&#34;]
     * 
     */
    public Optional<Output<List<String>>> rcodes() {
        return Optional.ofNullable(this.rcodes);
    }

    /**
     * (Updatable) DNS transport protocol; either UDP or TCP.  Example: `UDP`
     * 
     */
    @Import(name="transportProtocol")
    private @Nullable Output<String> transportProtocol;

    /**
     * @return (Updatable) DNS transport protocol; either UDP or TCP.  Example: `UDP`
     * 
     */
    public Optional<Output<String>> transportProtocol() {
        return Optional.ofNullable(this.transportProtocol);
    }

    private NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs() {}

    private NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs(NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs $) {
        this.domainName = $.domainName;
        this.queryClass = $.queryClass;
        this.queryType = $.queryType;
        this.rcodes = $.rcodes;
        this.transportProtocol = $.transportProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs $;

        public Builder() {
            $ = new NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs();
        }

        public Builder(NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs defaults) {
            $ = new NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName (Updatable) The absolute fully-qualified domain name to perform periodic DNS queries. If not provided, an extra dot will be added at the end of a domain name during the query.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName (Updatable) The absolute fully-qualified domain name to perform periodic DNS queries. If not provided, an extra dot will be added at the end of a domain name during the query.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param queryClass (Updatable) The class the dns health check query to use; either IN or CH.  Example: `IN`
         * 
         * @return builder
         * 
         */
        public Builder queryClass(@Nullable Output<String> queryClass) {
            $.queryClass = queryClass;
            return this;
        }

        /**
         * @param queryClass (Updatable) The class the dns health check query to use; either IN or CH.  Example: `IN`
         * 
         * @return builder
         * 
         */
        public Builder queryClass(String queryClass) {
            return queryClass(Output.of(queryClass));
        }

        /**
         * @param queryType (Updatable) The type the dns health check query to use; A, AAAA, TXT.  Example: `A`
         * 
         * @return builder
         * 
         */
        public Builder queryType(@Nullable Output<String> queryType) {
            $.queryType = queryType;
            return this;
        }

        /**
         * @param queryType (Updatable) The type the dns health check query to use; A, AAAA, TXT.  Example: `A`
         * 
         * @return builder
         * 
         */
        public Builder queryType(String queryType) {
            return queryType(Output.of(queryType));
        }

        /**
         * @param rcodes (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: [&#34;NOERROR&#34;, &#34;NXDOMAIN&#34;]
         * 
         * @return builder
         * 
         */
        public Builder rcodes(@Nullable Output<List<String>> rcodes) {
            $.rcodes = rcodes;
            return this;
        }

        /**
         * @param rcodes (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: [&#34;NOERROR&#34;, &#34;NXDOMAIN&#34;]
         * 
         * @return builder
         * 
         */
        public Builder rcodes(List<String> rcodes) {
            return rcodes(Output.of(rcodes));
        }

        /**
         * @param rcodes (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: [&#34;NOERROR&#34;, &#34;NXDOMAIN&#34;]
         * 
         * @return builder
         * 
         */
        public Builder rcodes(String... rcodes) {
            return rcodes(List.of(rcodes));
        }

        /**
         * @param transportProtocol (Updatable) DNS transport protocol; either UDP or TCP.  Example: `UDP`
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(@Nullable Output<String> transportProtocol) {
            $.transportProtocol = transportProtocol;
            return this;
        }

        /**
         * @param transportProtocol (Updatable) DNS transport protocol; either UDP or TCP.  Example: `UDP`
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(String transportProtocol) {
            return transportProtocol(Output.of(transportProtocol));
        }

        public NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs", "domainName");
            }
            return $;
        }
    }

}
