// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendSetBackend {
    /**
     * @return (Updatable) The IP address of the backend server.  Example: `10.0.0.3`
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    private @Nullable Boolean isBackup;
    /**
     * @return (Updatable) Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no incoming traffic.  Example: `false`
     * 
     */
    private @Nullable Boolean isDrain;
    /**
     * @return (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    private @Nullable Boolean isOffline;
    /**
     * @return (Updatable) A read-only field showing the IP address/OCID and port that uniquely identify this backend server in the backend set.  Example: `10.0.0.3:8080`, or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:443` or `10.0.0.3:0`
     * 
     */
    private @Nullable String name;
    /**
     * @return (Updatable) The communication port for the backend server.  Example: `8080`
     * 
     */
    private Integer port;
    /**
     * @return (Updatable) The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    private @Nullable String targetId;
    /**
     * @return (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    private @Nullable Integer weight;

    private BackendSetBackend() {}
    /**
     * @return (Updatable) The IP address of the backend server.  Example: `10.0.0.3`
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    public Optional<Boolean> isBackup() {
        return Optional.ofNullable(this.isBackup);
    }
    /**
     * @return (Updatable) Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no incoming traffic.  Example: `false`
     * 
     */
    public Optional<Boolean> isDrain() {
        return Optional.ofNullable(this.isDrain);
    }
    /**
     * @return (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    public Optional<Boolean> isOffline() {
        return Optional.ofNullable(this.isOffline);
    }
    /**
     * @return (Updatable) A read-only field showing the IP address/OCID and port that uniquely identify this backend server in the backend set.  Example: `10.0.0.3:8080`, or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:443` or `10.0.0.3:0`
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The communication port for the backend server.  Example: `8080`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return (Updatable) The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendSetBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ipAddress;
        private @Nullable Boolean isBackup;
        private @Nullable Boolean isDrain;
        private @Nullable Boolean isOffline;
        private @Nullable String name;
        private Integer port;
        private @Nullable String targetId;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(BackendSetBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.isBackup = defaults.isBackup;
    	      this.isDrain = defaults.isDrain;
    	      this.isOffline = defaults.isOffline;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.targetId = defaults.targetId;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {

            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isBackup(@Nullable Boolean isBackup) {

            this.isBackup = isBackup;
            return this;
        }
        @CustomType.Setter
        public Builder isDrain(@Nullable Boolean isDrain) {

            this.isDrain = isDrain;
            return this;
        }
        @CustomType.Setter
        public Builder isOffline(@Nullable Boolean isOffline) {

            this.isOffline = isOffline;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("BackendSetBackend", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {

            this.weight = weight;
            return this;
        }
        public BackendSetBackend build() {
            final var _resultValue = new BackendSetBackend();
            _resultValue.ipAddress = ipAddress;
            _resultValue.isBackup = isBackup;
            _resultValue.isDrain = isDrain;
            _resultValue.isOffline = isOffline;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.targetId = targetId;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
