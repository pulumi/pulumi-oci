// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendSetBackend {
    /**
     * @return The IP address of the backend server. Example: `10.0.0.3`
     * 
     */
    private String ipAddress;
    /**
     * @return Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    private Boolean isBackup;
    /**
     * @return Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no  incoming traffic.  Example: `false`
     * 
     */
    private Boolean isDrain;
    /**
     * @return Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    private Boolean isOffline;
    /**
     * @return A user-friendly name for the backend set that must be unique and cannot be changed.
     * 
     */
    private String name;
    /**
     * @return The backend server port against which to run the health check. If the port is not specified, then the network load balancer uses the port information from the `Backend` object. The port must be specified if the backend port is 0.  Example: `8080`
     * 
     */
    private Integer port;
    /**
     * @return The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    private String targetId;
    /**
     * @return The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    private Integer weight;

    private GetBackendSetBackend() {}
    /**
     * @return The IP address of the backend server. Example: `10.0.0.3`
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    public Boolean isBackup() {
        return this.isBackup;
    }
    /**
     * @return Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no  incoming traffic.  Example: `false`
     * 
     */
    public Boolean isDrain() {
        return this.isDrain;
    }
    /**
     * @return Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    public Boolean isOffline() {
        return this.isOffline;
    }
    /**
     * @return A user-friendly name for the backend set that must be unique and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The backend server port against which to run the health check. If the port is not specified, then the network load balancer uses the port information from the `Backend` object. The port must be specified if the backend port is 0.  Example: `8080`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ipAddress;
        private Boolean isBackup;
        private Boolean isDrain;
        private Boolean isOffline;
        private String name;
        private Integer port;
        private String targetId;
        private Integer weight;
        public Builder() {}
        public Builder(GetBackendSetBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.isBackup = defaults.isBackup;
    	      this.isDrain = defaults.isDrain;
    	      this.isOffline = defaults.isOffline;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.targetId = defaults.targetId;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder isBackup(Boolean isBackup) {
            this.isBackup = Objects.requireNonNull(isBackup);
            return this;
        }
        @CustomType.Setter
        public Builder isDrain(Boolean isDrain) {
            this.isDrain = Objects.requireNonNull(isDrain);
            return this;
        }
        @CustomType.Setter
        public Builder isOffline(Boolean isOffline) {
            this.isOffline = Objects.requireNonNull(isOffline);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            this.weight = Objects.requireNonNull(weight);
            return this;
        }
        public GetBackendSetBackend build() {
            final var o = new GetBackendSetBackend();
            o.ipAddress = ipAddress;
            o.isBackup = isBackup;
            o.isDrain = isDrain;
            o.isOffline = isOffline;
            o.name = name;
            o.port = port;
            o.targetId = targetId;
            o.weight = weight;
            return o;
        }
    }
}
