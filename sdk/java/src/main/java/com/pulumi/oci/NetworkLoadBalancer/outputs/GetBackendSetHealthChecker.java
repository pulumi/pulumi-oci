// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.NetworkLoadBalancer.outputs.GetBackendSetHealthCheckerDn;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendSetHealthChecker {
    /**
     * @return DNS healthcheck configurations.
     * 
     */
    private List<GetBackendSetHealthCheckerDn> dns;
    /**
     * @return The interval between health checks, in milliseconds. The default value is 10000 (10 seconds).  Example: `10000`
     * 
     */
    private Integer intervalInMillis;
    /**
     * @return The backend server port against which to run the health check. If the port is not specified, then the network load balancer uses the port information from the `Backend` object. The port must be specified if the backend port is 0.  Example: `8080`
     * 
     */
    private Integer port;
    /**
     * @return The protocol the health check must use; either HTTP, HTTPS, UDP, TCP or DNS.  Example: `HTTP`
     * 
     */
    private String protocol;
    /**
     * @return Base64 encoded pattern to be sent as UDP or TCP health check probe.
     * 
     */
    private String requestData;
    /**
     * @return A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    private String responseBodyRegex;
    /**
     * @return Base64 encoded pattern to be validated as UDP or TCP health check probe response.
     * 
     */
    private String responseData;
    /**
     * @return The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state. The default value is 3.  Example: `3`
     * 
     */
    private Integer retries;
    /**
     * @return The status code a healthy backend server should return. If you configure the health check policy to use the HTTP protocol, then you can use common HTTP status codes such as &#34;200&#34;.  Example: `200`
     * 
     */
    private Integer returnCode;
    /**
     * @return The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period. The default value is 3000 (3 seconds).  Example: `3000`
     * 
     */
    private Integer timeoutInMillis;
    /**
     * @return The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    private String urlPath;

    private GetBackendSetHealthChecker() {}
    /**
     * @return DNS healthcheck configurations.
     * 
     */
    public List<GetBackendSetHealthCheckerDn> dns() {
        return this.dns;
    }
    /**
     * @return The interval between health checks, in milliseconds. The default value is 10000 (10 seconds).  Example: `10000`
     * 
     */
    public Integer intervalInMillis() {
        return this.intervalInMillis;
    }
    /**
     * @return The backend server port against which to run the health check. If the port is not specified, then the network load balancer uses the port information from the `Backend` object. The port must be specified if the backend port is 0.  Example: `8080`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol the health check must use; either HTTP, HTTPS, UDP, TCP or DNS.  Example: `HTTP`
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Base64 encoded pattern to be sent as UDP or TCP health check probe.
     * 
     */
    public String requestData() {
        return this.requestData;
    }
    /**
     * @return A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    public String responseBodyRegex() {
        return this.responseBodyRegex;
    }
    /**
     * @return Base64 encoded pattern to be validated as UDP or TCP health check probe response.
     * 
     */
    public String responseData() {
        return this.responseData;
    }
    /**
     * @return The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state. The default value is 3.  Example: `3`
     * 
     */
    public Integer retries() {
        return this.retries;
    }
    /**
     * @return The status code a healthy backend server should return. If you configure the health check policy to use the HTTP protocol, then you can use common HTTP status codes such as &#34;200&#34;.  Example: `200`
     * 
     */
    public Integer returnCode() {
        return this.returnCode;
    }
    /**
     * @return The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period. The default value is 3000 (3 seconds).  Example: `3000`
     * 
     */
    public Integer timeoutInMillis() {
        return this.timeoutInMillis;
    }
    /**
     * @return The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    public String urlPath() {
        return this.urlPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetHealthChecker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBackendSetHealthCheckerDn> dns;
        private Integer intervalInMillis;
        private Integer port;
        private String protocol;
        private String requestData;
        private String responseBodyRegex;
        private String responseData;
        private Integer retries;
        private Integer returnCode;
        private Integer timeoutInMillis;
        private String urlPath;
        public Builder() {}
        public Builder(GetBackendSetHealthChecker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dns = defaults.dns;
    	      this.intervalInMillis = defaults.intervalInMillis;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.requestData = defaults.requestData;
    	      this.responseBodyRegex = defaults.responseBodyRegex;
    	      this.responseData = defaults.responseData;
    	      this.retries = defaults.retries;
    	      this.returnCode = defaults.returnCode;
    	      this.timeoutInMillis = defaults.timeoutInMillis;
    	      this.urlPath = defaults.urlPath;
        }

        @CustomType.Setter
        public Builder dns(List<GetBackendSetHealthCheckerDn> dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "dns");
            }
            this.dns = dns;
            return this;
        }
        public Builder dns(GetBackendSetHealthCheckerDn... dns) {
            return dns(List.of(dns));
        }
        @CustomType.Setter
        public Builder intervalInMillis(Integer intervalInMillis) {
            if (intervalInMillis == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "intervalInMillis");
            }
            this.intervalInMillis = intervalInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder requestData(String requestData) {
            if (requestData == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "requestData");
            }
            this.requestData = requestData;
            return this;
        }
        @CustomType.Setter
        public Builder responseBodyRegex(String responseBodyRegex) {
            if (responseBodyRegex == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "responseBodyRegex");
            }
            this.responseBodyRegex = responseBodyRegex;
            return this;
        }
        @CustomType.Setter
        public Builder responseData(String responseData) {
            if (responseData == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "responseData");
            }
            this.responseData = responseData;
            return this;
        }
        @CustomType.Setter
        public Builder retries(Integer retries) {
            if (retries == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "retries");
            }
            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder returnCode(Integer returnCode) {
            if (returnCode == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "returnCode");
            }
            this.returnCode = returnCode;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInMillis(Integer timeoutInMillis) {
            if (timeoutInMillis == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "timeoutInMillis");
            }
            this.timeoutInMillis = timeoutInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder urlPath(String urlPath) {
            if (urlPath == null) {
              throw new MissingRequiredPropertyException("GetBackendSetHealthChecker", "urlPath");
            }
            this.urlPath = urlPath;
            return this;
        }
        public GetBackendSetHealthChecker build() {
            final var _resultValue = new GetBackendSetHealthChecker();
            _resultValue.dns = dns;
            _resultValue.intervalInMillis = intervalInMillis;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.requestData = requestData;
            _resultValue.responseBodyRegex = responseBodyRegex;
            _resultValue.responseData = responseData;
            _resultValue.retries = retries;
            _resultValue.returnCode = returnCode;
            _resultValue.timeoutInMillis = timeoutInMillis;
            _resultValue.urlPath = urlPath;
            return _resultValue;
        }
    }
}
