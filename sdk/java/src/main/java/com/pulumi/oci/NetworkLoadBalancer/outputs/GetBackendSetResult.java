// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.NetworkLoadBalancer.outputs.GetBackendSetBackend;
import com.pulumi.oci.NetworkLoadBalancer.outputs.GetBackendSetHealthChecker;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendSetResult {
    private String backendSetName;
    /**
     * @return An array of backends.
     * 
     */
    private List<GetBackendSetBackend> backends;
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    private List<GetBackendSetHealthChecker> healthCheckers;
    private String id;
    /**
     * @return IP version associated with the backend set.
     * 
     */
    private String ipVersion;
    /**
     * @return If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
     * 
     */
    private Boolean isFailOpen;
    /**
     * @return If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
     * 
     */
    private Boolean isInstantFailoverEnabled;
    /**
     * @return If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
     * 
     */
    private Boolean isPreserveSource;
    /**
     * @return A user-friendly name for the backend set that must be unique and cannot be changed.
     * 
     */
    private String name;
    private String networkLoadBalancerId;
    /**
     * @return The network load balancer policy for the backend set.  Example: `FIVE_TUPLE`
     * 
     */
    private String policy;

    private GetBackendSetResult() {}
    public String backendSetName() {
        return this.backendSetName;
    }
    /**
     * @return An array of backends.
     * 
     */
    public List<GetBackendSetBackend> backends() {
        return this.backends;
    }
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    public List<GetBackendSetHealthChecker> healthCheckers() {
        return this.healthCheckers;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return IP version associated with the backend set.
     * 
     */
    public String ipVersion() {
        return this.ipVersion;
    }
    /**
     * @return If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
     * 
     */
    public Boolean isFailOpen() {
        return this.isFailOpen;
    }
    /**
     * @return If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
     * 
     */
    public Boolean isInstantFailoverEnabled() {
        return this.isInstantFailoverEnabled;
    }
    /**
     * @return If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
     * 
     */
    public Boolean isPreserveSource() {
        return this.isPreserveSource;
    }
    /**
     * @return A user-friendly name for the backend set that must be unique and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    public String networkLoadBalancerId() {
        return this.networkLoadBalancerId;
    }
    /**
     * @return The network load balancer policy for the backend set.  Example: `FIVE_TUPLE`
     * 
     */
    public String policy() {
        return this.policy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendSetName;
        private List<GetBackendSetBackend> backends;
        private List<GetBackendSetHealthChecker> healthCheckers;
        private String id;
        private String ipVersion;
        private Boolean isFailOpen;
        private Boolean isInstantFailoverEnabled;
        private Boolean isPreserveSource;
        private String name;
        private String networkLoadBalancerId;
        private String policy;
        public Builder() {}
        public Builder(GetBackendSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetName = defaults.backendSetName;
    	      this.backends = defaults.backends;
    	      this.healthCheckers = defaults.healthCheckers;
    	      this.id = defaults.id;
    	      this.ipVersion = defaults.ipVersion;
    	      this.isFailOpen = defaults.isFailOpen;
    	      this.isInstantFailoverEnabled = defaults.isInstantFailoverEnabled;
    	      this.isPreserveSource = defaults.isPreserveSource;
    	      this.name = defaults.name;
    	      this.networkLoadBalancerId = defaults.networkLoadBalancerId;
    	      this.policy = defaults.policy;
        }

        @CustomType.Setter
        public Builder backendSetName(String backendSetName) {
            if (backendSetName == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "backendSetName");
            }
            this.backendSetName = backendSetName;
            return this;
        }
        @CustomType.Setter
        public Builder backends(List<GetBackendSetBackend> backends) {
            if (backends == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "backends");
            }
            this.backends = backends;
            return this;
        }
        public Builder backends(GetBackendSetBackend... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder healthCheckers(List<GetBackendSetHealthChecker> healthCheckers) {
            if (healthCheckers == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "healthCheckers");
            }
            this.healthCheckers = healthCheckers;
            return this;
        }
        public Builder healthCheckers(GetBackendSetHealthChecker... healthCheckers) {
            return healthCheckers(List.of(healthCheckers));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipVersion(String ipVersion) {
            if (ipVersion == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "ipVersion");
            }
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder isFailOpen(Boolean isFailOpen) {
            if (isFailOpen == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "isFailOpen");
            }
            this.isFailOpen = isFailOpen;
            return this;
        }
        @CustomType.Setter
        public Builder isInstantFailoverEnabled(Boolean isInstantFailoverEnabled) {
            if (isInstantFailoverEnabled == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "isInstantFailoverEnabled");
            }
            this.isInstantFailoverEnabled = isInstantFailoverEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isPreserveSource(Boolean isPreserveSource) {
            if (isPreserveSource == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "isPreserveSource");
            }
            this.isPreserveSource = isPreserveSource;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkLoadBalancerId(String networkLoadBalancerId) {
            if (networkLoadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "networkLoadBalancerId");
            }
            this.networkLoadBalancerId = networkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetBackendSetResult", "policy");
            }
            this.policy = policy;
            return this;
        }
        public GetBackendSetResult build() {
            final var _resultValue = new GetBackendSetResult();
            _resultValue.backendSetName = backendSetName;
            _resultValue.backends = backends;
            _resultValue.healthCheckers = healthCheckers;
            _resultValue.id = id;
            _resultValue.ipVersion = ipVersion;
            _resultValue.isFailOpen = isFailOpen;
            _resultValue.isInstantFailoverEnabled = isInstantFailoverEnabled;
            _resultValue.isPreserveSource = isPreserveSource;
            _resultValue.name = name;
            _resultValue.networkLoadBalancerId = networkLoadBalancerId;
            _resultValue.policy = policy;
            return _resultValue;
        }
    }
}
