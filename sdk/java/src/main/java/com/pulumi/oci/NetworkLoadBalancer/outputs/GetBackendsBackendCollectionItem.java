// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.NetworkLoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendsBackendCollectionItem {
    /**
     * @return The name of the backend set associated with the backend servers.  Example: `example_backend_set`
     * 
     */
    private String backendSetName;
    private String id;
    /**
     * @return The IP address of the backend server. Example: `10.0.0.3`
     * 
     */
    private String ipAddress;
    /**
     * @return Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    private Boolean isBackup;
    /**
     * @return Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no incoming traffic.  Example: `false`
     * 
     */
    private Boolean isDrain;
    /**
     * @return Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    private Boolean isOffline;
    /**
     * @return A read-only field showing the IP address/IP OCID and port that uniquely identify this backend server in the backend set.  Example: `10.0.0.3:8080`, or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:443` or `10.0.0.3:0`
     * 
     */
    private String name;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
     * 
     */
    private String networkLoadBalancerId;
    /**
     * @return The communication port for the backend server.  Example: `8080`
     * 
     */
    private Integer port;
    /**
     * @return The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    private String targetId;
    /**
     * @return The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/introducton.htm#Policies).  Example: `3`
     * 
     */
    private Integer weight;

    private GetBackendsBackendCollectionItem() {}
    /**
     * @return The name of the backend set associated with the backend servers.  Example: `example_backend_set`
     * 
     */
    public String backendSetName() {
        return this.backendSetName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The IP address of the backend server. Example: `10.0.0.3`
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as &#34;isBackup&#34; fail the health check policy.  Example: `false`
     * 
     */
    public Boolean isBackup() {
        return this.isBackup;
    }
    /**
     * @return Whether the network load balancer should drain this server. Servers marked &#34;isDrain&#34; receive no incoming traffic.  Example: `false`
     * 
     */
    public Boolean isDrain() {
        return this.isDrain;
    }
    /**
     * @return Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
     * 
     */
    public Boolean isOffline() {
        return this.isOffline;
    }
    /**
     * @return A read-only field showing the IP address/IP OCID and port that uniquely identify this backend server in the backend set.  Example: `10.0.0.3:8080`, or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:443` or `10.0.0.3:0`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
     * 
     */
    public String networkLoadBalancerId() {
        return this.networkLoadBalancerId;
    }
    /**
     * @return The communication port for the backend server.  Example: `8080`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;`
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted &#39;3&#39; receives three times the number of new connections as a server weighted &#39;1&#39;. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/introducton.htm#Policies).  Example: `3`
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendsBackendCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendSetName;
        private String id;
        private String ipAddress;
        private Boolean isBackup;
        private Boolean isDrain;
        private Boolean isOffline;
        private String name;
        private String networkLoadBalancerId;
        private Integer port;
        private String targetId;
        private Integer weight;
        public Builder() {}
        public Builder(GetBackendsBackendCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendSetName = defaults.backendSetName;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isBackup = defaults.isBackup;
    	      this.isDrain = defaults.isDrain;
    	      this.isOffline = defaults.isOffline;
    	      this.name = defaults.name;
    	      this.networkLoadBalancerId = defaults.networkLoadBalancerId;
    	      this.port = defaults.port;
    	      this.targetId = defaults.targetId;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder backendSetName(String backendSetName) {
            if (backendSetName == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "backendSetName");
            }
            this.backendSetName = backendSetName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isBackup(Boolean isBackup) {
            if (isBackup == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "isBackup");
            }
            this.isBackup = isBackup;
            return this;
        }
        @CustomType.Setter
        public Builder isDrain(Boolean isDrain) {
            if (isDrain == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "isDrain");
            }
            this.isDrain = isDrain;
            return this;
        }
        @CustomType.Setter
        public Builder isOffline(Boolean isOffline) {
            if (isOffline == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "isOffline");
            }
            this.isOffline = isOffline;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkLoadBalancerId(String networkLoadBalancerId) {
            if (networkLoadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "networkLoadBalancerId");
            }
            this.networkLoadBalancerId = networkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("GetBackendsBackendCollectionItem", "weight");
            }
            this.weight = weight;
            return this;
        }
        public GetBackendsBackendCollectionItem build() {
            final var _resultValue = new GetBackendsBackendCollectionItem();
            _resultValue.backendSetName = backendSetName;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isBackup = isBackup;
            _resultValue.isDrain = isDrain;
            _resultValue.isOffline = isOffline;
            _resultValue.name = name;
            _resultValue.networkLoadBalancerId = networkLoadBalancerId;
            _resultValue.port = port;
            _resultValue.targetId = targetId;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
