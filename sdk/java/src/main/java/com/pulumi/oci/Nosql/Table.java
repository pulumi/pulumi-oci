// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Nosql.TableArgs;
import com.pulumi.oci.Nosql.inputs.TableState;
import com.pulumi.oci.Nosql.outputs.TableReplica;
import com.pulumi.oci.Nosql.outputs.TableSchema;
import com.pulumi.oci.Nosql.outputs.TableTableLimits;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Table resource in Oracle Cloud Infrastructure NoSQL Database service.
 * 
 * Create a new table.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Nosql.Table;
 * import com.pulumi.oci.Nosql.TableArgs;
 * import com.pulumi.oci.Nosql.inputs.TableTableLimitsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testTable = new Table("testTable", TableArgs.builder()        
 *             .compartmentId(compartmentId)
 *             .ddlStatement(tableDdlStatement)
 *             .name(tableName)
 *             .definedTags(tableDefinedTags)
 *             .freeformTags(Map.of("bar-key", "value"))
 *             .isAutoReclaimable(tableIsAutoReclaimable)
 *             .tableLimits(TableTableLimitsArgs.builder()
 *                 .maxReadUnits(tableTableLimitsMaxReadUnits)
 *                 .maxStorageInGbs(tableTableLimitsMaxStorageInGbs)
 *                 .maxWriteUnits(tableTableLimitsMaxWriteUnits)
 *                 .capacityMode(tableTableLimitsCapacityMode)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Tables can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:Nosql/table:Table test_table &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Nosql/table:Table")
public class Table extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) Compartment Identifier.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
     * 
     */
    @Export(name="ddlStatement", refs={String.class}, tree="[0]")
    private Output<String> ddlStatement;

    /**
     * @return (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
     * 
     */
    public Output<String> ddlStatement() {
        return this.ddlStatement;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * True if table can be reclaimed after an idle period.
     * 
     */
    @Export(name="isAutoReclaimable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isAutoReclaimable;

    /**
     * @return True if table can be reclaimed after an idle period.
     * 
     */
    public Output<Boolean> isAutoReclaimable() {
        return this.isAutoReclaimable;
    }
    /**
     * True if this table is currently a member of a replication set.
     * 
     */
    @Export(name="isMultiRegion", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isMultiRegion;

    /**
     * @return True if this table is currently a member of a replication set.
     * 
     */
    public Output<Boolean> isMultiRegion() {
        return this.isMultiRegion;
    }
    /**
     * A message describing the current state in more detail.
     * 
     */
    @Export(name="lifecycleDetails", refs={String.class}, tree="[0]")
    private Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * If this table is in a replication set, this value represents the progress of the initialization of the replica&#39;s data.  A value of 100 indicates that initialization has completed.
     * 
     */
    @Export(name="localReplicaInitializationInPercent", refs={Integer.class}, tree="[0]")
    private Output<Integer> localReplicaInitializationInPercent;

    /**
     * @return If this table is in a replication set, this value represents the progress of the initialization of the replica&#39;s data.  A value of 100 indicates that initialization has completed.
     * 
     */
    public Output<Integer> localReplicaInitializationInPercent() {
        return this.localReplicaInitializationInPercent;
    }
    /**
     * Table name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Table name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * An array of Replica listing this table&#39;s replicas, if any
     * 
     */
    @Export(name="replicas", refs={List.class,TableReplica.class}, tree="[0,1]")
    private Output<List<TableReplica>> replicas;

    /**
     * @return An array of Replica listing this table&#39;s replicas, if any
     * 
     */
    public Output<List<TableReplica>> replicas() {
        return this.replicas;
    }
    /**
     * The current state of this table&#39;s schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     * 
     */
    @Export(name="schemaState", refs={String.class}, tree="[0]")
    private Output<String> schemaState;

    /**
     * @return The current state of this table&#39;s schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     * 
     */
    public Output<String> schemaState() {
        return this.schemaState;
    }
    /**
     * The table schema information as a JSON object.
     * 
     */
    @Export(name="schemas", refs={List.class,TableSchema.class}, tree="[0,1]")
    private Output<List<TableSchema>> schemas;

    /**
     * @return The table schema information as a JSON object.
     * 
     */
    public Output<List<TableSchema>> schemas() {
        return this.schemas;
    }
    /**
     * The state of a table.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of a table.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `&#34;orcl-cloud&#34;`; and the only key in that namespace is `&#34;free-tier-retained&#34;`. Example: `{&#34;orcl-cloud&#34;&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    @Export(name="systemTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> systemTags;

    /**
     * @return Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `&#34;orcl-cloud&#34;`; and the only key in that namespace is `&#34;free-tier-retained&#34;`. Example: `{&#34;orcl-cloud&#34;&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    public Output<Map<String,Object>> systemTags() {
        return this.systemTags;
    }
    /**
     * (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table&#39;s limits.
     * 
     */
    @Export(name="tableLimits", refs={TableTableLimits.class}, tree="[0]")
    private Output<TableTableLimits> tableLimits;

    /**
     * @return (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table&#39;s limits.
     * 
     */
    public Output<TableTableLimits> tableLimits() {
        return this.tableLimits;
    }
    /**
     * The time the the table was created. An RFC3339 formatted datetime string.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return The time the the table was created. An RFC3339 formatted datetime string.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     * 
     */
    @Export(name="timeOfExpiration", refs={String.class}, tree="[0]")
    private Output<String> timeOfExpiration;

    /**
     * @return If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     * 
     */
    public Output<String> timeOfExpiration() {
        return this.timeOfExpiration;
    }
    /**
     * The time the the table&#39;s metadata was last updated. An RFC3339 formatted datetime string.
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeUpdated;

    /**
     * @return The time the the table&#39;s metadata was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Table(String name) {
        this(name, TableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Table(String name, TableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Table(String name, TableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Nosql/table:Table", name, args == null ? TableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Table(String name, Output<String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Nosql/table:Table", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Table get(String name, Output<String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Table(name, id, state, options);
    }
}
