// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableReplicaState extends com.pulumi.resources.ResourceArgs {

    public static final TableReplicaState Empty = new TableReplicaState();

    /**
     * The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Maximum sustained read throughput limit for the new replica table. If not specified, the local table&#39;s read limit is used.
     * 
     */
    @Import(name="maxReadUnits")
    private @Nullable Output<Integer> maxReadUnits;

    /**
     * @return Maximum sustained read throughput limit for the new replica table. If not specified, the local table&#39;s read limit is used.
     * 
     */
    public Optional<Output<Integer>> maxReadUnits() {
        return Optional.ofNullable(this.maxReadUnits);
    }

    /**
     * Maximum sustained write throughput limit for the new replica table. If not specified, the local table&#39;s write limit is used.
     * 
     */
    @Import(name="maxWriteUnits")
    private @Nullable Output<Integer> maxWriteUnits;

    /**
     * @return Maximum sustained write throughput limit for the new replica table. If not specified, the local table&#39;s write limit is used.
     * 
     */
    public Optional<Output<Integer>> maxWriteUnits() {
        return Optional.ofNullable(this.maxWriteUnits);
    }

    /**
     * Name of the remote region in standard Oracle Cloud Infrastructure format, i.e. us-ashburn-1
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Name of the remote region in standard Oracle Cloud Infrastructure format, i.e. us-ashburn-1
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A table name within the compartment, or a table OCID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="tableNameOrId")
    private @Nullable Output<String> tableNameOrId;

    /**
     * @return A table name within the compartment, or a table OCID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> tableNameOrId() {
        return Optional.ofNullable(this.tableNameOrId);
    }

    private TableReplicaState() {}

    private TableReplicaState(TableReplicaState $) {
        this.compartmentId = $.compartmentId;
        this.maxReadUnits = $.maxReadUnits;
        this.maxWriteUnits = $.maxWriteUnits;
        this.region = $.region;
        this.tableNameOrId = $.tableNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableReplicaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableReplicaState $;

        public Builder() {
            $ = new TableReplicaState();
        }

        public Builder(TableReplicaState defaults) {
            $ = new TableReplicaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param maxReadUnits Maximum sustained read throughput limit for the new replica table. If not specified, the local table&#39;s read limit is used.
         * 
         * @return builder
         * 
         */
        public Builder maxReadUnits(@Nullable Output<Integer> maxReadUnits) {
            $.maxReadUnits = maxReadUnits;
            return this;
        }

        /**
         * @param maxReadUnits Maximum sustained read throughput limit for the new replica table. If not specified, the local table&#39;s read limit is used.
         * 
         * @return builder
         * 
         */
        public Builder maxReadUnits(Integer maxReadUnits) {
            return maxReadUnits(Output.of(maxReadUnits));
        }

        /**
         * @param maxWriteUnits Maximum sustained write throughput limit for the new replica table. If not specified, the local table&#39;s write limit is used.
         * 
         * @return builder
         * 
         */
        public Builder maxWriteUnits(@Nullable Output<Integer> maxWriteUnits) {
            $.maxWriteUnits = maxWriteUnits;
            return this;
        }

        /**
         * @param maxWriteUnits Maximum sustained write throughput limit for the new replica table. If not specified, the local table&#39;s write limit is used.
         * 
         * @return builder
         * 
         */
        public Builder maxWriteUnits(Integer maxWriteUnits) {
            return maxWriteUnits(Output.of(maxWriteUnits));
        }

        /**
         * @param region Name of the remote region in standard Oracle Cloud Infrastructure format, i.e. us-ashburn-1
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Name of the remote region in standard Oracle Cloud Infrastructure format, i.e. us-ashburn-1
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tableNameOrId A table name within the compartment, or a table OCID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder tableNameOrId(@Nullable Output<String> tableNameOrId) {
            $.tableNameOrId = tableNameOrId;
            return this;
        }

        /**
         * @param tableNameOrId A table name within the compartment, or a table OCID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder tableNameOrId(String tableNameOrId) {
            return tableNameOrId(Output.of(tableNameOrId));
        }

        public TableReplicaState build() {
            return $;
        }
    }

}
