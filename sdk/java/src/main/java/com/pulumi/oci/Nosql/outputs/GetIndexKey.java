// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIndexKey {
    /**
     * @return The name of a column to be included as an index key.
     * 
     */
    private String columnName;
    /**
     * @return If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
     * 
     */
    private String jsonFieldType;
    /**
     * @return If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
     * 
     */
    private String jsonPath;

    private GetIndexKey() {}
    /**
     * @return The name of a column to be included as an index key.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
     * 
     */
    public String jsonFieldType() {
        return this.jsonFieldType;
    }
    /**
     * @return If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
     * 
     */
    public String jsonPath() {
        return this.jsonPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndexKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String columnName;
        private String jsonFieldType;
        private String jsonPath;
        public Builder() {}
        public Builder(GetIndexKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnName = defaults.columnName;
    	      this.jsonFieldType = defaults.jsonFieldType;
    	      this.jsonPath = defaults.jsonPath;
        }

        @CustomType.Setter
        public Builder columnName(String columnName) {
            this.columnName = Objects.requireNonNull(columnName);
            return this;
        }
        @CustomType.Setter
        public Builder jsonFieldType(String jsonFieldType) {
            this.jsonFieldType = Objects.requireNonNull(jsonFieldType);
            return this;
        }
        @CustomType.Setter
        public Builder jsonPath(String jsonPath) {
            this.jsonPath = Objects.requireNonNull(jsonPath);
            return this;
        }
        public GetIndexKey build() {
            final var o = new GetIndexKey();
            o.columnName = columnName;
            o.jsonFieldType = jsonFieldType;
            o.jsonPath = jsonPath;
            return o;
        }
    }
}
