// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Nosql.outputs.GetIndexKey;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIndexResult {
    /**
     * @return Compartment Identifier.
     * 
     */
    private String compartmentId;
    private @Nullable String id;
    private String indexName;
    private @Nullable Boolean isIfNotExists;
    /**
     * @return A set of keys for a secondary index.
     * 
     */
    private @Nullable List<GetIndexKey> keys;
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return Index name.
     * 
     */
    private @Nullable String name;
    /**
     * @return The state of an index.
     * 
     */
    private @Nullable String state;
    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    private @Nullable String tableId;
    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    private @Nullable String tableName;
    private String tableNameOrId;

    private GetIndexResult() {}
    /**
     * @return Compartment Identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String indexName() {
        return this.indexName;
    }
    public Optional<Boolean> isIfNotExists() {
        return Optional.ofNullable(this.isIfNotExists);
    }
    /**
     * @return A set of keys for a secondary index.
     * 
     */
    public List<GetIndexKey> keys() {
        return this.keys == null ? List.of() : this.keys;
    }
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return Index name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The state of an index.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    public Optional<String> tableId() {
        return Optional.ofNullable(this.tableId);
    }
    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }
    public String tableNameOrId() {
        return this.tableNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndexResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String id;
        private String indexName;
        private @Nullable Boolean isIfNotExists;
        private @Nullable List<GetIndexKey> keys;
        private @Nullable String lifecycleDetails;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable String tableId;
        private @Nullable String tableName;
        private String tableNameOrId;
        public Builder() {}
        public Builder(GetIndexResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.indexName = defaults.indexName;
    	      this.isIfNotExists = defaults.isIfNotExists;
    	      this.keys = defaults.keys;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.tableId = defaults.tableId;
    	      this.tableName = defaults.tableName;
    	      this.tableNameOrId = defaults.tableNameOrId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            this.indexName = Objects.requireNonNull(indexName);
            return this;
        }
        @CustomType.Setter
        public Builder isIfNotExists(@Nullable Boolean isIfNotExists) {
            this.isIfNotExists = isIfNotExists;
            return this;
        }
        @CustomType.Setter
        public Builder keys(@Nullable List<GetIndexKey> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(GetIndexKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tableId(@Nullable String tableId) {
            this.tableId = tableId;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(@Nullable String tableName) {
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder tableNameOrId(String tableNameOrId) {
            this.tableNameOrId = Objects.requireNonNull(tableNameOrId);
            return this;
        }
        public GetIndexResult build() {
            final var o = new GetIndexResult();
            o.compartmentId = compartmentId;
            o.id = id;
            o.indexName = indexName;
            o.isIfNotExists = isIfNotExists;
            o.keys = keys;
            o.lifecycleDetails = lifecycleDetails;
            o.name = name;
            o.state = state;
            o.tableId = tableId;
            o.tableName = tableName;
            o.tableNameOrId = tableNameOrId;
            return o;
        }
    }
}
