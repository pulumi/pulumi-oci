// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Nosql.outputs.GetIndexesIndexCollectionKey;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIndexesIndexCollection {
    /**
     * @return The ID of a table&#39;s compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
     * 
     */
    private String compartmentId;
    private String id;
    private Boolean isIfNotExists;
    /**
     * @return A set of keys for a secondary index.
     * 
     */
    private List<GetIndexesIndexCollectionKey> keys;
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A shell-globbing-style (*?[]) filter for names.
     * 
     */
    private String name;
    /**
     * @return Filter list by the lifecycle state of the item.
     * 
     */
    private String state;
    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    private String tableId;
    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    private String tableName;
    /**
     * @return A table name within the compartment, or a table OCID.
     * 
     */
    private String tableNameOrId;

    private GetIndexesIndexCollection() {}
    /**
     * @return The ID of a table&#39;s compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public String id() {
        return this.id;
    }
    public Boolean isIfNotExists() {
        return this.isIfNotExists;
    }
    /**
     * @return A set of keys for a secondary index.
     * 
     */
    public List<GetIndexesIndexCollectionKey> keys() {
        return this.keys;
    }
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A shell-globbing-style (*?[]) filter for names.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Filter list by the lifecycle state of the item.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    public String tableId() {
        return this.tableId;
    }
    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return A table name within the compartment, or a table OCID.
     * 
     */
    public String tableNameOrId() {
        return this.tableNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIndexesIndexCollection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String id;
        private Boolean isIfNotExists;
        private List<GetIndexesIndexCollectionKey> keys;
        private String lifecycleDetails;
        private String name;
        private String state;
        private String tableId;
        private String tableName;
        private String tableNameOrId;
        public Builder() {}
        public Builder(GetIndexesIndexCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isIfNotExists = defaults.isIfNotExists;
    	      this.keys = defaults.keys;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.tableId = defaults.tableId;
    	      this.tableName = defaults.tableName;
    	      this.tableNameOrId = defaults.tableNameOrId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIfNotExists(Boolean isIfNotExists) {
            if (isIfNotExists == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "isIfNotExists");
            }
            this.isIfNotExists = isIfNotExists;
            return this;
        }
        @CustomType.Setter
        public Builder keys(List<GetIndexesIndexCollectionKey> keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "keys");
            }
            this.keys = keys;
            return this;
        }
        public Builder keys(GetIndexesIndexCollectionKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tableId(String tableId) {
            if (tableId == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "tableId");
            }
            this.tableId = tableId;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder tableNameOrId(String tableNameOrId) {
            if (tableNameOrId == null) {
              throw new MissingRequiredPropertyException("GetIndexesIndexCollection", "tableNameOrId");
            }
            this.tableNameOrId = tableNameOrId;
            return this;
        }
        public GetIndexesIndexCollection build() {
            final var _resultValue = new GetIndexesIndexCollection();
            _resultValue.compartmentId = compartmentId;
            _resultValue.id = id;
            _resultValue.isIfNotExists = isIfNotExists;
            _resultValue.keys = keys;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.tableId = tableId;
            _resultValue.tableName = tableName;
            _resultValue.tableNameOrId = tableNameOrId;
            return _resultValue;
        }
    }
}
