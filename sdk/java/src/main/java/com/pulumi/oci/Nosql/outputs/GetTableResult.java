// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Nosql.outputs.GetTableReplica;
import com.pulumi.oci.Nosql.outputs.GetTableSchema;
import com.pulumi.oci.Nosql.outputs.GetTableTableLimit;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTableResult {
    /**
     * @return Compartment Identifier.
     * 
     */
    private String compartmentId;
    /**
     * @return A DDL statement representing the schema.
     * 
     */
    private @Nullable String ddlStatement;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable.
     * 
     */
    private @Nullable String id;
    /**
     * @return True if this table can be reclaimed after an idle period.
     * 
     */
    private @Nullable Boolean isAutoReclaimable;
    /**
     * @return True if this table is currently a member of a replication set.
     * 
     */
    private @Nullable Boolean isMultiRegion;
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return If this table is in a replication set, this value represents the progress of the initialization of the replica&#39;s data.  A value of 100 indicates that initialization has completed.
     * 
     */
    private @Nullable Integer localReplicaInitializationInPercent;
    /**
     * @return The column name.
     * 
     */
    private @Nullable String name;
    /**
     * @return An array of Replica listing this table&#39;s replicas, if any
     * 
     */
    private @Nullable List<GetTableReplica> replicas;
    /**
     * @return The current state of this table&#39;s schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     * 
     */
    private @Nullable String schemaState;
    /**
     * @return The table schema information as a JSON object.
     * 
     */
    private @Nullable List<GetTableSchema> schemas;
    /**
     * @return The state of a table.
     * 
     */
    private @Nullable String state;
    /**
     * @return Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `&#34;orcl-cloud&#34;`; and the only key in that namespace is `&#34;free-tier-retained&#34;`. Example: `{&#34;orcl-cloud&#34;&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return Throughput and storage limits configuration of a table.
     * 
     */
    private @Nullable List<GetTableTableLimit> tableLimits;
    private String tableNameOrId;
    /**
     * @return The time the the table was created. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeOfExpiration;
    /**
     * @return The time the the table&#39;s metadata was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeUpdated;

    private GetTableResult() {}
    /**
     * @return Compartment Identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A DDL statement representing the schema.
     * 
     */
    public Optional<String> ddlStatement() {
        return Optional.ofNullable(this.ddlStatement);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return True if this table can be reclaimed after an idle period.
     * 
     */
    public Optional<Boolean> isAutoReclaimable() {
        return Optional.ofNullable(this.isAutoReclaimable);
    }
    /**
     * @return True if this table is currently a member of a replication set.
     * 
     */
    public Optional<Boolean> isMultiRegion() {
        return Optional.ofNullable(this.isMultiRegion);
    }
    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return If this table is in a replication set, this value represents the progress of the initialization of the replica&#39;s data.  A value of 100 indicates that initialization has completed.
     * 
     */
    public Optional<Integer> localReplicaInitializationInPercent() {
        return Optional.ofNullable(this.localReplicaInitializationInPercent);
    }
    /**
     * @return The column name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return An array of Replica listing this table&#39;s replicas, if any
     * 
     */
    public List<GetTableReplica> replicas() {
        return this.replicas == null ? List.of() : this.replicas;
    }
    /**
     * @return The current state of this table&#39;s schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     * 
     */
    public Optional<String> schemaState() {
        return Optional.ofNullable(this.schemaState);
    }
    /**
     * @return The table schema information as a JSON object.
     * 
     */
    public List<GetTableSchema> schemas() {
        return this.schemas == null ? List.of() : this.schemas;
    }
    /**
     * @return The state of a table.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `&#34;orcl-cloud&#34;`; and the only key in that namespace is `&#34;free-tier-retained&#34;`. Example: `{&#34;orcl-cloud&#34;&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return Throughput and storage limits configuration of a table.
     * 
     */
    public List<GetTableTableLimit> tableLimits() {
        return this.tableLimits == null ? List.of() : this.tableLimits;
    }
    public String tableNameOrId() {
        return this.tableNameOrId;
    }
    /**
     * @return The time the the table was created. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeOfExpiration() {
        return Optional.ofNullable(this.timeOfExpiration);
    }
    /**
     * @return The time the the table&#39;s metadata was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String ddlStatement;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable Boolean isAutoReclaimable;
        private @Nullable Boolean isMultiRegion;
        private @Nullable String lifecycleDetails;
        private @Nullable Integer localReplicaInitializationInPercent;
        private @Nullable String name;
        private @Nullable List<GetTableReplica> replicas;
        private @Nullable String schemaState;
        private @Nullable List<GetTableSchema> schemas;
        private @Nullable String state;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable List<GetTableTableLimit> tableLimits;
        private String tableNameOrId;
        private @Nullable String timeCreated;
        private @Nullable String timeOfExpiration;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.ddlStatement = defaults.ddlStatement;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAutoReclaimable = defaults.isAutoReclaimable;
    	      this.isMultiRegion = defaults.isMultiRegion;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.localReplicaInitializationInPercent = defaults.localReplicaInitializationInPercent;
    	      this.name = defaults.name;
    	      this.replicas = defaults.replicas;
    	      this.schemaState = defaults.schemaState;
    	      this.schemas = defaults.schemas;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.tableLimits = defaults.tableLimits;
    	      this.tableNameOrId = defaults.tableNameOrId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfExpiration = defaults.timeOfExpiration;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder ddlStatement(@Nullable String ddlStatement) {
            this.ddlStatement = ddlStatement;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoReclaimable(@Nullable Boolean isAutoReclaimable) {
            this.isAutoReclaimable = isAutoReclaimable;
            return this;
        }
        @CustomType.Setter
        public Builder isMultiRegion(@Nullable Boolean isMultiRegion) {
            this.isMultiRegion = isMultiRegion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicaInitializationInPercent(@Nullable Integer localReplicaInitializationInPercent) {
            this.localReplicaInitializationInPercent = localReplicaInitializationInPercent;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder replicas(@Nullable List<GetTableReplica> replicas) {
            this.replicas = replicas;
            return this;
        }
        public Builder replicas(GetTableReplica... replicas) {
            return replicas(List.of(replicas));
        }
        @CustomType.Setter
        public Builder schemaState(@Nullable String schemaState) {
            this.schemaState = schemaState;
            return this;
        }
        @CustomType.Setter
        public Builder schemas(@Nullable List<GetTableSchema> schemas) {
            this.schemas = schemas;
            return this;
        }
        public Builder schemas(GetTableSchema... schemas) {
            return schemas(List.of(schemas));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder tableLimits(@Nullable List<GetTableTableLimit> tableLimits) {
            this.tableLimits = tableLimits;
            return this;
        }
        public Builder tableLimits(GetTableTableLimit... tableLimits) {
            return tableLimits(List.of(tableLimits));
        }
        @CustomType.Setter
        public Builder tableNameOrId(String tableNameOrId) {
            this.tableNameOrId = Objects.requireNonNull(tableNameOrId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfExpiration(@Nullable String timeOfExpiration) {
            this.timeOfExpiration = timeOfExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetTableResult build() {
            final var o = new GetTableResult();
            o.compartmentId = compartmentId;
            o.ddlStatement = ddlStatement;
            o.definedTags = definedTags;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isAutoReclaimable = isAutoReclaimable;
            o.isMultiRegion = isMultiRegion;
            o.lifecycleDetails = lifecycleDetails;
            o.localReplicaInitializationInPercent = localReplicaInitializationInPercent;
            o.name = name;
            o.replicas = replicas;
            o.schemaState = schemaState;
            o.schemas = schemas;
            o.state = state;
            o.systemTags = systemTags;
            o.tableLimits = tableLimits;
            o.tableNameOrId = tableNameOrId;
            o.timeCreated = timeCreated;
            o.timeOfExpiration = timeOfExpiration;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
