// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTablesTableCollectionTableLimit {
    /**
     * @return The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
     * 
     */
    private @Nullable String capacityMode;
    /**
     * @return Maximum sustained read throughput limit for the table.
     * 
     */
    private @Nullable Integer maxReadUnits;
    /**
     * @return Maximum size of storage used by the table.
     * 
     */
    private @Nullable Integer maxStorageInGbs;
    /**
     * @return Maximum sustained write throughput limit for the table.
     * 
     */
    private @Nullable Integer maxWriteUnits;

    private GetTablesTableCollectionTableLimit() {}
    /**
     * @return The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
     * 
     */
    public Optional<String> capacityMode() {
        return Optional.ofNullable(this.capacityMode);
    }
    /**
     * @return Maximum sustained read throughput limit for the table.
     * 
     */
    public Optional<Integer> maxReadUnits() {
        return Optional.ofNullable(this.maxReadUnits);
    }
    /**
     * @return Maximum size of storage used by the table.
     * 
     */
    public Optional<Integer> maxStorageInGbs() {
        return Optional.ofNullable(this.maxStorageInGbs);
    }
    /**
     * @return Maximum sustained write throughput limit for the table.
     * 
     */
    public Optional<Integer> maxWriteUnits() {
        return Optional.ofNullable(this.maxWriteUnits);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTablesTableCollectionTableLimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String capacityMode;
        private @Nullable Integer maxReadUnits;
        private @Nullable Integer maxStorageInGbs;
        private @Nullable Integer maxWriteUnits;
        public Builder() {}
        public Builder(GetTablesTableCollectionTableLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityMode = defaults.capacityMode;
    	      this.maxReadUnits = defaults.maxReadUnits;
    	      this.maxStorageInGbs = defaults.maxStorageInGbs;
    	      this.maxWriteUnits = defaults.maxWriteUnits;
        }

        @CustomType.Setter
        public Builder capacityMode(@Nullable String capacityMode) {
            this.capacityMode = capacityMode;
            return this;
        }
        @CustomType.Setter
        public Builder maxReadUnits(@Nullable Integer maxReadUnits) {
            this.maxReadUnits = maxReadUnits;
            return this;
        }
        @CustomType.Setter
        public Builder maxStorageInGbs(@Nullable Integer maxStorageInGbs) {
            this.maxStorageInGbs = maxStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxWriteUnits(@Nullable Integer maxWriteUnits) {
            this.maxWriteUnits = maxWriteUnits;
            return this;
        }
        public GetTablesTableCollectionTableLimit build() {
            final var o = new GetTablesTableCollectionTableLimit();
            o.capacityMode = capacityMode;
            o.maxReadUnits = maxReadUnits;
            o.maxStorageInGbs = maxStorageInGbs;
            o.maxWriteUnits = maxWriteUnits;
            return o;
        }
    }
}
