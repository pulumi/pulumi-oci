// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class BucketRetentionRuleDurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketRetentionRuleDurationArgs Empty = new BucketRetentionRuleDurationArgs();

    /**
     * The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified timestamp.
     * 
     */
    @Import(name="timeAmount", required=true)
    private Output<String> timeAmount;

    /**
     * @return The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified timestamp.
     * 
     */
    public Output<String> timeAmount() {
        return this.timeAmount;
    }

    /**
     * The unit that should be used to interpret timeAmount.
     * 
     */
    @Import(name="timeUnit", required=true)
    private Output<String> timeUnit;

    /**
     * @return The unit that should be used to interpret timeAmount.
     * 
     */
    public Output<String> timeUnit() {
        return this.timeUnit;
    }

    private BucketRetentionRuleDurationArgs() {}

    private BucketRetentionRuleDurationArgs(BucketRetentionRuleDurationArgs $) {
        this.timeAmount = $.timeAmount;
        this.timeUnit = $.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRetentionRuleDurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRetentionRuleDurationArgs $;

        public Builder() {
            $ = new BucketRetentionRuleDurationArgs();
        }

        public Builder(BucketRetentionRuleDurationArgs defaults) {
            $ = new BucketRetentionRuleDurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param timeAmount The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified timestamp.
         * 
         * @return builder
         * 
         */
        public Builder timeAmount(Output<String> timeAmount) {
            $.timeAmount = timeAmount;
            return this;
        }

        /**
         * @param timeAmount The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified timestamp.
         * 
         * @return builder
         * 
         */
        public Builder timeAmount(String timeAmount) {
            return timeAmount(Output.of(timeAmount));
        }

        /**
         * @param timeUnit The unit that should be used to interpret timeAmount.
         * 
         * @return builder
         * 
         */
        public Builder timeUnit(Output<String> timeUnit) {
            $.timeUnit = timeUnit;
            return this;
        }

        /**
         * @param timeUnit The unit that should be used to interpret timeAmount.
         * 
         * @return builder
         * 
         */
        public Builder timeUnit(String timeUnit) {
            return timeUnit(Output.of(timeUnit));
        }

        public BucketRetentionRuleDurationArgs build() {
            if ($.timeAmount == null) {
                throw new MissingRequiredPropertyException("BucketRetentionRuleDurationArgs", "timeAmount");
            }
            if ($.timeUnit == null) {
                throw new MissingRequiredPropertyException("BucketRetentionRuleDurationArgs", "timeUnit");
            }
            return $;
        }
    }

}
