// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ObjectStorage.outputs.GetObjectLifecyclePolicyRuleObjectNameFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetObjectLifecyclePolicyRule {
    /**
     * @return The action of the object lifecycle policy rule. Rules using the action &#39;ARCHIVE&#39; move objects from Standard and InfrequentAccess storage tiers into the [Archive storage tier](https://docs.cloud.oracle.com/iaas/Content/Archive/Concepts/archivestorageoverview.htm). Rules using the action &#39;INFREQUENT_ACCESS&#39; move objects from Standard storage tier into the Infrequent Access Storage tier. Objects that are already in InfrequentAccess tier or in Archive tier are left untouched. Rules using the action &#39;DELETE&#39; permanently delete objects from buckets. Rules using &#39;ABORT&#39; abort the uncommitted multipart-uploads and permanently delete their parts from buckets.
     * 
     */
    private String action;
    /**
     * @return A Boolean that determines whether this rule is currently enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return The name of the lifecycle rule to be applied.
     * 
     */
    private String name;
    /**
     * @return A filter that compares object names to a set of prefixes or patterns to determine if a rule applies to a given object. The filter can contain include glob patterns, exclude glob patterns and inclusion prefixes. The inclusion prefixes property is kept for backward compatibility. It is recommended to use inclusion patterns instead of prefixes. Exclusions take precedence over inclusions.
     * 
     */
    private List<GetObjectLifecyclePolicyRuleObjectNameFilter> objectNameFilters;
    /**
     * @return The target of the object lifecycle policy rule. The values of target can be either &#34;objects&#34;, &#34;multipart-uploads&#34; or &#34;previous-object-versions&#34;. This field when declared as &#34;objects&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for objects. This field when declared as &#34;previous-object-versions&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for previous versions of existing objects. This field when declared as &#34;multipart-uploads&#34; is used to specify the ABORT (only) rule for uncommitted multipart-uploads.
     * 
     */
    private String target;
    /**
     * @return Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified time.
     * 
     */
    private String timeAmount;
    /**
     * @return The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC. Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
     * 
     */
    private String timeUnit;

    private GetObjectLifecyclePolicyRule() {}
    /**
     * @return The action of the object lifecycle policy rule. Rules using the action &#39;ARCHIVE&#39; move objects from Standard and InfrequentAccess storage tiers into the [Archive storage tier](https://docs.cloud.oracle.com/iaas/Content/Archive/Concepts/archivestorageoverview.htm). Rules using the action &#39;INFREQUENT_ACCESS&#39; move objects from Standard storage tier into the Infrequent Access Storage tier. Objects that are already in InfrequentAccess tier or in Archive tier are left untouched. Rules using the action &#39;DELETE&#39; permanently delete objects from buckets. Rules using &#39;ABORT&#39; abort the uncommitted multipart-uploads and permanently delete their parts from buckets.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return A Boolean that determines whether this rule is currently enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return The name of the lifecycle rule to be applied.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A filter that compares object names to a set of prefixes or patterns to determine if a rule applies to a given object. The filter can contain include glob patterns, exclude glob patterns and inclusion prefixes. The inclusion prefixes property is kept for backward compatibility. It is recommended to use inclusion patterns instead of prefixes. Exclusions take precedence over inclusions.
     * 
     */
    public List<GetObjectLifecyclePolicyRuleObjectNameFilter> objectNameFilters() {
        return this.objectNameFilters;
    }
    /**
     * @return The target of the object lifecycle policy rule. The values of target can be either &#34;objects&#34;, &#34;multipart-uploads&#34; or &#34;previous-object-versions&#34;. This field when declared as &#34;objects&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for objects. This field when declared as &#34;previous-object-versions&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for previous versions of existing objects. This field when declared as &#34;multipart-uploads&#34; is used to specify the ABORT (only) rule for uncommitted multipart-uploads.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified time.
     * 
     */
    public String timeAmount() {
        return this.timeAmount;
    }
    /**
     * @return The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC. Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
     * 
     */
    public String timeUnit() {
        return this.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetObjectLifecyclePolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private Boolean isEnabled;
        private String name;
        private List<GetObjectLifecyclePolicyRuleObjectNameFilter> objectNameFilters;
        private String target;
        private String timeAmount;
        private String timeUnit;
        public Builder() {}
        public Builder(GetObjectLifecyclePolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.isEnabled = defaults.isEnabled;
    	      this.name = defaults.name;
    	      this.objectNameFilters = defaults.objectNameFilters;
    	      this.target = defaults.target;
    	      this.timeAmount = defaults.timeAmount;
    	      this.timeUnit = defaults.timeUnit;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectNameFilters(List<GetObjectLifecyclePolicyRuleObjectNameFilter> objectNameFilters) {
            if (objectNameFilters == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "objectNameFilters");
            }
            this.objectNameFilters = objectNameFilters;
            return this;
        }
        public Builder objectNameFilters(GetObjectLifecyclePolicyRuleObjectNameFilter... objectNameFilters) {
            return objectNameFilters(List.of(objectNameFilters));
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder timeAmount(String timeAmount) {
            if (timeAmount == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "timeAmount");
            }
            this.timeAmount = timeAmount;
            return this;
        }
        @CustomType.Setter
        public Builder timeUnit(String timeUnit) {
            if (timeUnit == null) {
              throw new MissingRequiredPropertyException("GetObjectLifecyclePolicyRule", "timeUnit");
            }
            this.timeUnit = timeUnit;
            return this;
        }
        public GetObjectLifecyclePolicyRule build() {
            final var _resultValue = new GetObjectLifecyclePolicyRule();
            _resultValue.action = action;
            _resultValue.isEnabled = isEnabled;
            _resultValue.name = name;
            _resultValue.objectNameFilters = objectNameFilters;
            _resultValue.target = target;
            _resultValue.timeAmount = timeAmount;
            _resultValue.timeUnit = timeUnit;
            return _resultValue;
        }
    }
}
