// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ObjectStorage.outputs.GetObjectVersionsFilter;
import com.pulumi.oci.ObjectStorage.outputs.GetObjectVersionsItem;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetObjectVersionsResult {
    private String bucket;
    private @Nullable String delimiter;
    private @Nullable String end;
    private @Nullable String fields;
    private @Nullable List<GetObjectVersionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An array of object version summaries.
     * 
     */
    private List<GetObjectVersionsItem> items;
    private String namespace;
    private @Nullable String prefix;
    /**
     * @return Prefixes that are common to the results returned by the request if the request specified a delimiter.
     * 
     */
    private List<String> prefixes;
    private @Nullable String start;
    private @Nullable String startAfter;

    private GetObjectVersionsResult() {}
    public String bucket() {
        return this.bucket;
    }
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    public Optional<String> end() {
        return Optional.ofNullable(this.end);
    }
    public Optional<String> fields() {
        return Optional.ofNullable(this.fields);
    }
    public List<GetObjectVersionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An array of object version summaries.
     * 
     */
    public List<GetObjectVersionsItem> items() {
        return this.items;
    }
    public String namespace() {
        return this.namespace;
    }
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Prefixes that are common to the results returned by the request if the request specified a delimiter.
     * 
     */
    public List<String> prefixes() {
        return this.prefixes;
    }
    public Optional<String> start() {
        return Optional.ofNullable(this.start);
    }
    public Optional<String> startAfter() {
        return Optional.ofNullable(this.startAfter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetObjectVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable String delimiter;
        private @Nullable String end;
        private @Nullable String fields;
        private @Nullable List<GetObjectVersionsFilter> filters;
        private String id;
        private List<GetObjectVersionsItem> items;
        private String namespace;
        private @Nullable String prefix;
        private List<String> prefixes;
        private @Nullable String start;
        private @Nullable String startAfter;
        public Builder() {}
        public Builder(GetObjectVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.delimiter = defaults.delimiter;
    	      this.end = defaults.end;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.items = defaults.items;
    	      this.namespace = defaults.namespace;
    	      this.prefix = defaults.prefix;
    	      this.prefixes = defaults.prefixes;
    	      this.start = defaults.start;
    	      this.startAfter = defaults.startAfter;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetObjectVersionsResult", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {

            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder end(@Nullable String end) {

            this.end = end;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable String fields) {

            this.fields = fields;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetObjectVersionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetObjectVersionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetObjectVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetObjectVersionsItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetObjectVersionsResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetObjectVersionsItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetObjectVersionsResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder prefixes(List<String> prefixes) {
            if (prefixes == null) {
              throw new MissingRequiredPropertyException("GetObjectVersionsResult", "prefixes");
            }
            this.prefixes = prefixes;
            return this;
        }
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }
        @CustomType.Setter
        public Builder start(@Nullable String start) {

            this.start = start;
            return this;
        }
        @CustomType.Setter
        public Builder startAfter(@Nullable String startAfter) {

            this.startAfter = startAfter;
            return this;
        }
        public GetObjectVersionsResult build() {
            final var _resultValue = new GetObjectVersionsResult();
            _resultValue.bucket = bucket;
            _resultValue.delimiter = delimiter;
            _resultValue.end = end;
            _resultValue.fields = fields;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.items = items;
            _resultValue.namespace = namespace;
            _resultValue.prefix = prefix;
            _resultValue.prefixes = prefixes;
            _resultValue.start = start;
            _resultValue.startAfter = startAfter;
            return _resultValue;
        }
    }
}
