// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPreauthrequestsPreauthenticatedRequest {
    /**
     * @return The operation that can be performed on this resource.
     * 
     */
    private String accessType;
    /**
     * @return The URI to embed in the URL when using the pre-authenticated request.
     * 
     */
    private String accessUri;
    /**
     * @return The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    private String bucket;
    /**
     * @return Specifies whether a list operation is allowed on a PAR with accessType &#34;AnyObjectRead&#34; or &#34;AnyObjectReadWrite&#34;. Deny: Prevents the user from performing a list operation. ListObjects: Authorizes the user to perform a list operation.
     * 
     */
    private String bucketListingAction;
    private String fullPath;
    /**
     * @return The unique identifier to use when directly addressing the pre-authenticated request.
     * 
     */
    private String id;
    /**
     * @return The user-provided name of the pre-authenticated request.
     * 
     */
    private String name;
    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    private String namespace;
    /**
     * @return Deprecated. Instead use `objectName`.The name of the object that is being granted access to by the pre-authenticated request. Avoid entering confidential information. The object name can be null and if so, the pre-authenticated request grants access to the entire bucket. Example: test/object1.log
     * 
     * @deprecated
     * The &#39;object&#39; field has been deprecated. Please use &#39;object_name&#39; instead.
     * 
     */
    @Deprecated /* The 'object' field has been deprecated. Please use 'object_name' instead. */
    private String object;
    /**
     * @return The name of the object that is being granted access to by the pre-authenticated request. Avoid entering confidential information. The object name can be null and if so, the pre-authenticated request grants access to the entire bucket. Example: test/object1.log
     * 
     */
    private String objectName;
    private String parId;
    /**
     * @return The date when the pre-authenticated request was created as per specification [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The expiration date for the pre-authenticated request as per [RFC 3339](https://tools.ietf.org/html/rfc3339). After this date the pre-authenticated request will no longer be valid.
     * 
     */
    private String timeExpires;

    private GetPreauthrequestsPreauthenticatedRequest() {}
    /**
     * @return The operation that can be performed on this resource.
     * 
     */
    public String accessType() {
        return this.accessType;
    }
    /**
     * @return The URI to embed in the URL when using the pre-authenticated request.
     * 
     */
    public String accessUri() {
        return this.accessUri;
    }
    /**
     * @return The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Specifies whether a list operation is allowed on a PAR with accessType &#34;AnyObjectRead&#34; or &#34;AnyObjectReadWrite&#34;. Deny: Prevents the user from performing a list operation. ListObjects: Authorizes the user to perform a list operation.
     * 
     */
    public String bucketListingAction() {
        return this.bucketListingAction;
    }
    public String fullPath() {
        return this.fullPath;
    }
    /**
     * @return The unique identifier to use when directly addressing the pre-authenticated request.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The user-provided name of the pre-authenticated request.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Deprecated. Instead use `objectName`.The name of the object that is being granted access to by the pre-authenticated request. Avoid entering confidential information. The object name can be null and if so, the pre-authenticated request grants access to the entire bucket. Example: test/object1.log
     * 
     * @deprecated
     * The &#39;object&#39; field has been deprecated. Please use &#39;object_name&#39; instead.
     * 
     */
    @Deprecated /* The 'object' field has been deprecated. Please use 'object_name' instead. */
    public String object() {
        return this.object;
    }
    /**
     * @return The name of the object that is being granted access to by the pre-authenticated request. Avoid entering confidential information. The object name can be null and if so, the pre-authenticated request grants access to the entire bucket. Example: test/object1.log
     * 
     */
    public String objectName() {
        return this.objectName;
    }
    public String parId() {
        return this.parId;
    }
    /**
     * @return The date when the pre-authenticated request was created as per specification [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The expiration date for the pre-authenticated request as per [RFC 3339](https://tools.ietf.org/html/rfc3339). After this date the pre-authenticated request will no longer be valid.
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPreauthrequestsPreauthenticatedRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessType;
        private String accessUri;
        private String bucket;
        private String bucketListingAction;
        private String fullPath;
        private String id;
        private String name;
        private String namespace;
        private String object;
        private String objectName;
        private String parId;
        private String timeCreated;
        private String timeExpires;
        public Builder() {}
        public Builder(GetPreauthrequestsPreauthenticatedRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.accessUri = defaults.accessUri;
    	      this.bucket = defaults.bucket;
    	      this.bucketListingAction = defaults.bucketListingAction;
    	      this.fullPath = defaults.fullPath;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.object = defaults.object;
    	      this.objectName = defaults.objectName;
    	      this.parId = defaults.parId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpires = defaults.timeExpires;
        }

        @CustomType.Setter
        public Builder accessType(String accessType) {
            if (accessType == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "accessType");
            }
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder accessUri(String accessUri) {
            if (accessUri == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "accessUri");
            }
            this.accessUri = accessUri;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder bucketListingAction(String bucketListingAction) {
            if (bucketListingAction == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "bucketListingAction");
            }
            this.bucketListingAction = bucketListingAction;
            return this;
        }
        @CustomType.Setter
        public Builder fullPath(String fullPath) {
            if (fullPath == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "fullPath");
            }
            this.fullPath = fullPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectName(String objectName) {
            if (objectName == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "objectName");
            }
            this.objectName = objectName;
            return this;
        }
        @CustomType.Setter
        public Builder parId(String parId) {
            if (parId == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "parId");
            }
            this.parId = parId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(String timeExpires) {
            if (timeExpires == null) {
              throw new MissingRequiredPropertyException("GetPreauthrequestsPreauthenticatedRequest", "timeExpires");
            }
            this.timeExpires = timeExpires;
            return this;
        }
        public GetPreauthrequestsPreauthenticatedRequest build() {
            final var _resultValue = new GetPreauthrequestsPreauthenticatedRequest();
            _resultValue.accessType = accessType;
            _resultValue.accessUri = accessUri;
            _resultValue.bucket = bucket;
            _resultValue.bucketListingAction = bucketListingAction;
            _resultValue.fullPath = fullPath;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.object = object;
            _resultValue.objectName = objectName;
            _resultValue.parId = parId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpires = timeExpires;
            return _resultValue;
        }
    }
}
