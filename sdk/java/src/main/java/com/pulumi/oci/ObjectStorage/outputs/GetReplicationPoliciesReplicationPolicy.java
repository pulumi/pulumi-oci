// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetReplicationPoliciesReplicationPolicy {
    /**
     * @return The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    private String bucket;
    /**
     * @deprecated
     * The &#39;delete_object_in_destination_bucket&#39; field has been deprecated. It is no longer supported.
     * 
     */
    @Deprecated /* The 'delete_object_in_destination_bucket' field has been deprecated. It is no longer supported. */
    private String deleteObjectInDestinationBucket;
    /**
     * @return The bucket to replicate to in the destination region. Replication policy creation does not automatically create a destination bucket. Create the destination bucket before creating the policy.
     * 
     */
    private String destinationBucketName;
    /**
     * @return The destination region to replicate to, for example &#34;us-ashburn-1&#34;.
     * 
     */
    private String destinationRegionName;
    /**
     * @return The id of the replication policy.
     * 
     */
    private String id;
    /**
     * @return The name of the policy.
     * 
     */
    private String name;
    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    private String namespace;
    /**
     * @return The replication status of the policy. If the status is CLIENT_ERROR, once the user fixes the issue described in the status message, the status will become ACTIVE.
     * 
     */
    private String status;
    /**
     * @return A human-readable description of the status.
     * 
     */
    private String statusMessage;
    /**
     * @return The date when the replication policy was created as per [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return Changes made to the source bucket before this time has been replicated.
     * 
     */
    private String timeLastSync;

    private GetReplicationPoliciesReplicationPolicy() {}
    /**
     * @return The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @deprecated
     * The &#39;delete_object_in_destination_bucket&#39; field has been deprecated. It is no longer supported.
     * 
     */
    @Deprecated /* The 'delete_object_in_destination_bucket' field has been deprecated. It is no longer supported. */
    public String deleteObjectInDestinationBucket() {
        return this.deleteObjectInDestinationBucket;
    }
    /**
     * @return The bucket to replicate to in the destination region. Replication policy creation does not automatically create a destination bucket. Create the destination bucket before creating the policy.
     * 
     */
    public String destinationBucketName() {
        return this.destinationBucketName;
    }
    /**
     * @return The destination region to replicate to, for example &#34;us-ashburn-1&#34;.
     * 
     */
    public String destinationRegionName() {
        return this.destinationRegionName;
    }
    /**
     * @return The id of the replication policy.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The replication status of the policy. If the status is CLIENT_ERROR, once the user fixes the issue described in the status message, the status will become ACTIVE.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A human-readable description of the status.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The date when the replication policy was created as per [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Changes made to the source bucket before this time has been replicated.
     * 
     */
    public String timeLastSync() {
        return this.timeLastSync;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReplicationPoliciesReplicationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String deleteObjectInDestinationBucket;
        private String destinationBucketName;
        private String destinationRegionName;
        private String id;
        private String name;
        private String namespace;
        private String status;
        private String statusMessage;
        private String timeCreated;
        private String timeLastSync;
        public Builder() {}
        public Builder(GetReplicationPoliciesReplicationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.deleteObjectInDestinationBucket = defaults.deleteObjectInDestinationBucket;
    	      this.destinationBucketName = defaults.destinationBucketName;
    	      this.destinationRegionName = defaults.destinationRegionName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastSync = defaults.timeLastSync;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder deleteObjectInDestinationBucket(String deleteObjectInDestinationBucket) {
            if (deleteObjectInDestinationBucket == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "deleteObjectInDestinationBucket");
            }
            this.deleteObjectInDestinationBucket = deleteObjectInDestinationBucket;
            return this;
        }
        @CustomType.Setter
        public Builder destinationBucketName(String destinationBucketName) {
            if (destinationBucketName == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "destinationBucketName");
            }
            this.destinationBucketName = destinationBucketName;
            return this;
        }
        @CustomType.Setter
        public Builder destinationRegionName(String destinationRegionName) {
            if (destinationRegionName == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "destinationRegionName");
            }
            this.destinationRegionName = destinationRegionName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            if (statusMessage == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "statusMessage");
            }
            this.statusMessage = statusMessage;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastSync(String timeLastSync) {
            if (timeLastSync == null) {
              throw new MissingRequiredPropertyException("GetReplicationPoliciesReplicationPolicy", "timeLastSync");
            }
            this.timeLastSync = timeLastSync;
            return this;
        }
        public GetReplicationPoliciesReplicationPolicy build() {
            final var _resultValue = new GetReplicationPoliciesReplicationPolicy();
            _resultValue.bucket = bucket;
            _resultValue.deleteObjectInDestinationBucket = deleteObjectInDestinationBucket;
            _resultValue.destinationBucketName = destinationBucketName;
            _resultValue.destinationRegionName = destinationRegionName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastSync = timeLastSync;
            return _resultValue;
        }
    }
}
