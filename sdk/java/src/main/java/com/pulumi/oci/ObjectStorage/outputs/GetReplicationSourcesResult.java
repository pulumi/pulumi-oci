// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ObjectStorage.outputs.GetReplicationSourcesFilter;
import com.pulumi.oci.ObjectStorage.outputs.GetReplicationSourcesReplicationSource;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetReplicationSourcesResult {
    private String bucket;
    private @Nullable List<GetReplicationSourcesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String namespace;
    /**
     * @return The list of replication_sources.
     * 
     */
    private List<GetReplicationSourcesReplicationSource> replicationSources;

    private GetReplicationSourcesResult() {}
    public String bucket() {
        return this.bucket;
    }
    public List<GetReplicationSourcesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The list of replication_sources.
     * 
     */
    public List<GetReplicationSourcesReplicationSource> replicationSources() {
        return this.replicationSources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReplicationSourcesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable List<GetReplicationSourcesFilter> filters;
        private String id;
        private String namespace;
        private List<GetReplicationSourcesReplicationSource> replicationSources;
        public Builder() {}
        public Builder(GetReplicationSourcesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.replicationSources = defaults.replicationSources;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetReplicationSourcesResult", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetReplicationSourcesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetReplicationSourcesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReplicationSourcesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetReplicationSourcesResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSources(List<GetReplicationSourcesReplicationSource> replicationSources) {
            if (replicationSources == null) {
              throw new MissingRequiredPropertyException("GetReplicationSourcesResult", "replicationSources");
            }
            this.replicationSources = replicationSources;
            return this;
        }
        public Builder replicationSources(GetReplicationSourcesReplicationSource... replicationSources) {
            return replicationSources(List.of(replicationSources));
        }
        public GetReplicationSourcesResult build() {
            final var _resultValue = new GetReplicationSourcesResult();
            _resultValue.bucket = bucket;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.replicationSources = replicationSources;
            return _resultValue;
        }
    }
}
