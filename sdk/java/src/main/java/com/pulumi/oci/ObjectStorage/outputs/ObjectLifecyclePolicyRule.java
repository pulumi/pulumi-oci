// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ObjectStorage.outputs.ObjectLifecyclePolicyRuleObjectNameFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObjectLifecyclePolicyRule {
    /**
     * @return (Updatable) The action of the object lifecycle policy rule. Rules using the action &#39;ARCHIVE&#39; move objects from Standard and InfrequentAccess storage tiers into the [Archive storage tier](https://docs.cloud.oracle.com/iaas/Content/Archive/Concepts/archivestorageoverview.htm). Rules using the action &#39;INFREQUENT_ACCESS&#39; move objects from Standard storage tier into the Infrequent Access Storage tier. Objects that are already in InfrequentAccess tier or in Archive tier are left untouched. Rules using the action &#39;DELETE&#39; permanently delete objects from buckets. Rules using &#39;ABORT&#39; abort the uncommitted multipart-uploads and permanently delete their parts from buckets.
     * 
     */
    private String action;
    /**
     * @return (Updatable) A Boolean that determines whether this rule is currently enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return (Updatable) The name of the lifecycle rule to be applied.
     * 
     */
    private String name;
    /**
     * @return (Updatable) A filter that compares object names to a set of prefixes or patterns to determine if a rule applies to a given object. The filter can contain include glob patterns, exclude glob patterns and inclusion prefixes. The inclusion prefixes property is kept for backward compatibility. It is recommended to use inclusion patterns instead of prefixes. Exclusions take precedence over inclusions.
     * 
     */
    private @Nullable ObjectLifecyclePolicyRuleObjectNameFilter objectNameFilter;
    /**
     * @return (Updatable) The target of the object lifecycle policy rule. The values of target can be either &#34;objects&#34;, &#34;multipart-uploads&#34; or &#34;previous-object-versions&#34;. This field when declared as &#34;objects&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for objects. This field when declared as &#34;previous-object-versions&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for previous versions of existing objects. This field when declared as &#34;multipart-uploads&#34; is used to specify the ABORT (only) rule for uncommitted multipart-uploads.
     * 
     */
    private @Nullable String target;
    /**
     * @return (Updatable) Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified time.
     * 
     */
    private String timeAmount;
    /**
     * @return (Updatable) The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC. Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private String timeUnit;

    private ObjectLifecyclePolicyRule() {}
    /**
     * @return (Updatable) The action of the object lifecycle policy rule. Rules using the action &#39;ARCHIVE&#39; move objects from Standard and InfrequentAccess storage tiers into the [Archive storage tier](https://docs.cloud.oracle.com/iaas/Content/Archive/Concepts/archivestorageoverview.htm). Rules using the action &#39;INFREQUENT_ACCESS&#39; move objects from Standard storage tier into the Infrequent Access Storage tier. Objects that are already in InfrequentAccess tier or in Archive tier are left untouched. Rules using the action &#39;DELETE&#39; permanently delete objects from buckets. Rules using &#39;ABORT&#39; abort the uncommitted multipart-uploads and permanently delete their parts from buckets.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return (Updatable) A Boolean that determines whether this rule is currently enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return (Updatable) The name of the lifecycle rule to be applied.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) A filter that compares object names to a set of prefixes or patterns to determine if a rule applies to a given object. The filter can contain include glob patterns, exclude glob patterns and inclusion prefixes. The inclusion prefixes property is kept for backward compatibility. It is recommended to use inclusion patterns instead of prefixes. Exclusions take precedence over inclusions.
     * 
     */
    public Optional<ObjectLifecyclePolicyRuleObjectNameFilter> objectNameFilter() {
        return Optional.ofNullable(this.objectNameFilter);
    }
    /**
     * @return (Updatable) The target of the object lifecycle policy rule. The values of target can be either &#34;objects&#34;, &#34;multipart-uploads&#34; or &#34;previous-object-versions&#34;. This field when declared as &#34;objects&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for objects. This field when declared as &#34;previous-object-versions&#34; is used to specify ARCHIVE, INFREQUENT_ACCESS or DELETE rule for previous versions of existing objects. This field when declared as &#34;multipart-uploads&#34; is used to specify the ABORT (only) rule for uncommitted multipart-uploads.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return (Updatable) Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the timeUnit parameter, and is calculated in relation to each object&#39;s Last-Modified time.
     * 
     */
    public String timeAmount() {
        return this.timeAmount;
    }
    /**
     * @return (Updatable) The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC. Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public String timeUnit() {
        return this.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectLifecyclePolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private Boolean isEnabled;
        private String name;
        private @Nullable ObjectLifecyclePolicyRuleObjectNameFilter objectNameFilter;
        private @Nullable String target;
        private String timeAmount;
        private String timeUnit;
        public Builder() {}
        public Builder(ObjectLifecyclePolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.isEnabled = defaults.isEnabled;
    	      this.name = defaults.name;
    	      this.objectNameFilter = defaults.objectNameFilter;
    	      this.target = defaults.target;
    	      this.timeAmount = defaults.timeAmount;
    	      this.timeUnit = defaults.timeUnit;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            this.isEnabled = Objects.requireNonNull(isEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectNameFilter(@Nullable ObjectLifecyclePolicyRuleObjectNameFilter objectNameFilter) {
            this.objectNameFilter = objectNameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder timeAmount(String timeAmount) {
            this.timeAmount = Objects.requireNonNull(timeAmount);
            return this;
        }
        @CustomType.Setter
        public Builder timeUnit(String timeUnit) {
            this.timeUnit = Objects.requireNonNull(timeUnit);
            return this;
        }
        public ObjectLifecyclePolicyRule build() {
            final var o = new ObjectLifecyclePolicyRule();
            o.action = action;
            o.isEnabled = isEnabled;
            o.name = name;
            o.objectNameFilter = objectNameFilter;
            o.target = target;
            o.timeAmount = timeAmount;
            o.timeUnit = timeUnit;
            return o;
        }
    }
}
