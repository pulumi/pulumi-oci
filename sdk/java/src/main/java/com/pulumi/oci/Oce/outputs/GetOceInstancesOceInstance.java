// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Oce.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOceInstancesOceInstance {
    /**
     * @return a list of add-on features for the ocm instance
     * 
     */
    private List<String> addOnFeatures;
    /**
     * @return Admin Email for Notification
     * 
     */
    private String adminEmail;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return OceInstance description, can be updated
     * 
     */
    private String description;
    /**
     * @return disaster recovery paired ragion name
     * 
     */
    private String drRegion;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique GUID identifier that is immutable on creation
     * 
     */
    private String guid;
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    private String id;
    private String idcsAccessToken;
    /**
     * @return IDCS Tenancy Identifier
     * 
     */
    private String idcsTenancy;
    /**
     * @return Flag indicating whether the instance access is private or public
     * 
     */
    private String instanceAccessType;
    /**
     * @return Flag indicating whether the instance license is new cloud or bring your own license
     * 
     */
    private String instanceLicenseType;
    /**
     * @return Instance type based on its usage
     * 
     */
    private String instanceUsageType;
    /**
     * @return Details of the current state of the instance lifecycle
     * 
     */
    private String lifecycleDetails;
    /**
     * @return OceInstance Name
     * 
     */
    private String name;
    /**
     * @return Object Storage Namespace of tenancy
     * 
     */
    private String objectStorageNamespace;
    /**
     * @return SERVICE data. Example: `{&#34;service&#34;: {&#34;IDCS&#34;: &#34;value&#34;}}`
     * 
     */
    private Map<String,Object> service;
    /**
     * @return Filter results on lifecycleState.
     * 
     */
    private String state;
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String stateMessage;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The ID of the tenancy in which to list resources.
     * 
     */
    private String tenancyId;
    /**
     * @return Tenancy Name
     * 
     */
    private String tenancyName;
    /**
     * @return The time the the OceInstance was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the OceInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
     * 
     */
    private String upgradeSchedule;
    /**
     * @return Web Application Firewall(WAF) primary domain
     * 
     */
    private String wafPrimaryDomain;

    private GetOceInstancesOceInstance() {}
    /**
     * @return a list of add-on features for the ocm instance
     * 
     */
    public List<String> addOnFeatures() {
        return this.addOnFeatures;
    }
    /**
     * @return Admin Email for Notification
     * 
     */
    public String adminEmail() {
        return this.adminEmail;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return OceInstance description, can be updated
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return disaster recovery paired ragion name
     * 
     */
    public String drRegion() {
        return this.drRegion;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique GUID identifier that is immutable on creation
     * 
     */
    public String guid() {
        return this.guid;
    }
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    public String idcsAccessToken() {
        return this.idcsAccessToken;
    }
    /**
     * @return IDCS Tenancy Identifier
     * 
     */
    public String idcsTenancy() {
        return this.idcsTenancy;
    }
    /**
     * @return Flag indicating whether the instance access is private or public
     * 
     */
    public String instanceAccessType() {
        return this.instanceAccessType;
    }
    /**
     * @return Flag indicating whether the instance license is new cloud or bring your own license
     * 
     */
    public String instanceLicenseType() {
        return this.instanceLicenseType;
    }
    /**
     * @return Instance type based on its usage
     * 
     */
    public String instanceUsageType() {
        return this.instanceUsageType;
    }
    /**
     * @return Details of the current state of the instance lifecycle
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return OceInstance Name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object Storage Namespace of tenancy
     * 
     */
    public String objectStorageNamespace() {
        return this.objectStorageNamespace;
    }
    /**
     * @return SERVICE data. Example: `{&#34;service&#34;: {&#34;IDCS&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,Object> service() {
        return this.service;
    }
    /**
     * @return Filter results on lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String stateMessage() {
        return this.stateMessage;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The ID of the tenancy in which to list resources.
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return Tenancy Name
     * 
     */
    public String tenancyName() {
        return this.tenancyName;
    }
    /**
     * @return The time the the OceInstance was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the OceInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Upgrade schedule type representing service to be upgraded immediately whenever latest version is released or delay upgrade of the service to previous released version
     * 
     */
    public String upgradeSchedule() {
        return this.upgradeSchedule;
    }
    /**
     * @return Web Application Firewall(WAF) primary domain
     * 
     */
    public String wafPrimaryDomain() {
        return this.wafPrimaryDomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOceInstancesOceInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> addOnFeatures;
        private String adminEmail;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String drRegion;
        private Map<String,Object> freeformTags;
        private String guid;
        private String id;
        private String idcsAccessToken;
        private String idcsTenancy;
        private String instanceAccessType;
        private String instanceLicenseType;
        private String instanceUsageType;
        private String lifecycleDetails;
        private String name;
        private String objectStorageNamespace;
        private Map<String,Object> service;
        private String state;
        private String stateMessage;
        private Map<String,Object> systemTags;
        private String tenancyId;
        private String tenancyName;
        private String timeCreated;
        private String timeUpdated;
        private String upgradeSchedule;
        private String wafPrimaryDomain;
        public Builder() {}
        public Builder(GetOceInstancesOceInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOnFeatures = defaults.addOnFeatures;
    	      this.adminEmail = defaults.adminEmail;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.drRegion = defaults.drRegion;
    	      this.freeformTags = defaults.freeformTags;
    	      this.guid = defaults.guid;
    	      this.id = defaults.id;
    	      this.idcsAccessToken = defaults.idcsAccessToken;
    	      this.idcsTenancy = defaults.idcsTenancy;
    	      this.instanceAccessType = defaults.instanceAccessType;
    	      this.instanceLicenseType = defaults.instanceLicenseType;
    	      this.instanceUsageType = defaults.instanceUsageType;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.objectStorageNamespace = defaults.objectStorageNamespace;
    	      this.service = defaults.service;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.systemTags = defaults.systemTags;
    	      this.tenancyId = defaults.tenancyId;
    	      this.tenancyName = defaults.tenancyName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.upgradeSchedule = defaults.upgradeSchedule;
    	      this.wafPrimaryDomain = defaults.wafPrimaryDomain;
        }

        @CustomType.Setter
        public Builder addOnFeatures(List<String> addOnFeatures) {
            if (addOnFeatures == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "addOnFeatures");
            }
            this.addOnFeatures = addOnFeatures;
            return this;
        }
        public Builder addOnFeatures(String... addOnFeatures) {
            return addOnFeatures(List.of(addOnFeatures));
        }
        @CustomType.Setter
        public Builder adminEmail(String adminEmail) {
            if (adminEmail == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "adminEmail");
            }
            this.adminEmail = adminEmail;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder drRegion(String drRegion) {
            if (drRegion == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "drRegion");
            }
            this.drRegion = drRegion;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder guid(String guid) {
            if (guid == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "guid");
            }
            this.guid = guid;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idcsAccessToken(String idcsAccessToken) {
            if (idcsAccessToken == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "idcsAccessToken");
            }
            this.idcsAccessToken = idcsAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder idcsTenancy(String idcsTenancy) {
            if (idcsTenancy == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "idcsTenancy");
            }
            this.idcsTenancy = idcsTenancy;
            return this;
        }
        @CustomType.Setter
        public Builder instanceAccessType(String instanceAccessType) {
            if (instanceAccessType == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "instanceAccessType");
            }
            this.instanceAccessType = instanceAccessType;
            return this;
        }
        @CustomType.Setter
        public Builder instanceLicenseType(String instanceLicenseType) {
            if (instanceLicenseType == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "instanceLicenseType");
            }
            this.instanceLicenseType = instanceLicenseType;
            return this;
        }
        @CustomType.Setter
        public Builder instanceUsageType(String instanceUsageType) {
            if (instanceUsageType == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "instanceUsageType");
            }
            this.instanceUsageType = instanceUsageType;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageNamespace(String objectStorageNamespace) {
            if (objectStorageNamespace == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "objectStorageNamespace");
            }
            this.objectStorageNamespace = objectStorageNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder service(Map<String,Object> service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateMessage(String stateMessage) {
            if (stateMessage == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "stateMessage");
            }
            this.stateMessage = stateMessage;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            if (tenancyId == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "tenancyId");
            }
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyName(String tenancyName) {
            if (tenancyName == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "tenancyName");
            }
            this.tenancyName = tenancyName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeSchedule(String upgradeSchedule) {
            if (upgradeSchedule == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "upgradeSchedule");
            }
            this.upgradeSchedule = upgradeSchedule;
            return this;
        }
        @CustomType.Setter
        public Builder wafPrimaryDomain(String wafPrimaryDomain) {
            if (wafPrimaryDomain == null) {
              throw new MissingRequiredPropertyException("GetOceInstancesOceInstance", "wafPrimaryDomain");
            }
            this.wafPrimaryDomain = wafPrimaryDomain;
            return this;
        }
        public GetOceInstancesOceInstance build() {
            final var _resultValue = new GetOceInstancesOceInstance();
            _resultValue.addOnFeatures = addOnFeatures;
            _resultValue.adminEmail = adminEmail;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.drRegion = drRegion;
            _resultValue.freeformTags = freeformTags;
            _resultValue.guid = guid;
            _resultValue.id = id;
            _resultValue.idcsAccessToken = idcsAccessToken;
            _resultValue.idcsTenancy = idcsTenancy;
            _resultValue.instanceAccessType = instanceAccessType;
            _resultValue.instanceLicenseType = instanceLicenseType;
            _resultValue.instanceUsageType = instanceUsageType;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.objectStorageNamespace = objectStorageNamespace;
            _resultValue.service = service;
            _resultValue.state = state;
            _resultValue.stateMessage = stateMessage;
            _resultValue.systemTags = systemTags;
            _resultValue.tenancyId = tenancyId;
            _resultValue.tenancyName = tenancyName;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.upgradeSchedule = upgradeSchedule;
            _resultValue.wafPrimaryDomain = wafPrimaryDomain;
            return _resultValue;
        }
    }
}
