// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Ocvp.inputs.GetSupportedVmwareSoftwareVersionsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSupportedVmwareSoftwareVersionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSupportedVmwareSoftwareVersionsArgs Empty = new GetSupportedVmwareSoftwareVersionsArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSupportedVmwareSoftwareVersionsFilterArgs>> filters;

    public Optional<Output<List<GetSupportedVmwareSoftwareVersionsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match or support the given ESXi host shape.
     * 
     */
    @Import(name="hostShapeName")
    private @Nullable Output<String> hostShapeName;

    /**
     * @return A filter to return only resources that match or support the given ESXi host shape.
     * 
     */
    public Optional<Output<String>> hostShapeName() {
        return Optional.ofNullable(this.hostShapeName);
    }

    /**
     * A filter to return only resources that match the given VMware software version exactly.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return A filter to return only resources that match the given VMware software version exactly.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetSupportedVmwareSoftwareVersionsArgs() {}

    private GetSupportedVmwareSoftwareVersionsArgs(GetSupportedVmwareSoftwareVersionsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.hostShapeName = $.hostShapeName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSupportedVmwareSoftwareVersionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSupportedVmwareSoftwareVersionsArgs $;

        public Builder() {
            $ = new GetSupportedVmwareSoftwareVersionsArgs();
        }

        public Builder(GetSupportedVmwareSoftwareVersionsArgs defaults) {
            $ = new GetSupportedVmwareSoftwareVersionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetSupportedVmwareSoftwareVersionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSupportedVmwareSoftwareVersionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSupportedVmwareSoftwareVersionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param hostShapeName A filter to return only resources that match or support the given ESXi host shape.
         * 
         * @return builder
         * 
         */
        public Builder hostShapeName(@Nullable Output<String> hostShapeName) {
            $.hostShapeName = hostShapeName;
            return this;
        }

        /**
         * @param hostShapeName A filter to return only resources that match or support the given ESXi host shape.
         * 
         * @return builder
         * 
         */
        public Builder hostShapeName(String hostShapeName) {
            return hostShapeName(Output.of(hostShapeName));
        }

        /**
         * @param version A filter to return only resources that match the given VMware software version exactly.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version A filter to return only resources that match the given VMware software version exactly.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetSupportedVmwareSoftwareVersionsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSupportedVmwareSoftwareVersionsArgs", "compartmentId");
            }
            return $;
        }
    }

}
