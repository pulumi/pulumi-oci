// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SddcDatastoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final SddcDatastoreArgs Empty = new SddcDatastoreArgs();

    /**
     * A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
     * 
     */
    @Import(name="blockVolumeIds", required=true)
    private Output<List<String>> blockVolumeIds;

    /**
     * @return A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
     * 
     */
    public Output<List<String>> blockVolumeIds() {
        return this.blockVolumeIds;
    }

    /**
     * Size of the Block Storage Volume in GB.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Double> capacity;

    /**
     * @return Size of the Block Storage Volume in GB.
     * 
     */
    public Optional<Output<Double>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Type of the datastore.
     * 
     */
    @Import(name="datastoreType", required=true)
    private Output<String> datastoreType;

    /**
     * @return Type of the datastore.
     * 
     */
    public Output<String> datastoreType() {
        return this.datastoreType;
    }

    private SddcDatastoreArgs() {}

    private SddcDatastoreArgs(SddcDatastoreArgs $) {
        this.blockVolumeIds = $.blockVolumeIds;
        this.capacity = $.capacity;
        this.datastoreType = $.datastoreType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SddcDatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SddcDatastoreArgs $;

        public Builder() {
            $ = new SddcDatastoreArgs();
        }

        public Builder(SddcDatastoreArgs defaults) {
            $ = new SddcDatastoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(Output<List<String>> blockVolumeIds) {
            $.blockVolumeIds = blockVolumeIds;
            return this;
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(List<String> blockVolumeIds) {
            return blockVolumeIds(Output.of(blockVolumeIds));
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(String... blockVolumeIds) {
            return blockVolumeIds(List.of(blockVolumeIds));
        }

        /**
         * @param capacity Size of the Block Storage Volume in GB.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Double> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Size of the Block Storage Volume in GB.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Double capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param datastoreType Type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(Output<String> datastoreType) {
            $.datastoreType = datastoreType;
            return this;
        }

        /**
         * @param datastoreType Type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(String datastoreType) {
            return datastoreType(Output.of(datastoreType));
        }

        public SddcDatastoreArgs build() {
            if ($.blockVolumeIds == null) {
                throw new MissingRequiredPropertyException("SddcDatastoreArgs", "blockVolumeIds");
            }
            if ($.datastoreType == null) {
                throw new MissingRequiredPropertyException("SddcDatastoreArgs", "datastoreType");
            }
            return $;
        }
    }

}
