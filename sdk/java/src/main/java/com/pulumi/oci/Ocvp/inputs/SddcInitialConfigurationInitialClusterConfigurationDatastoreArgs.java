// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs Empty = new SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs();

    /**
     * A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
     * 
     */
    @Import(name="blockVolumeIds", required=true)
    private Output<List<String>> blockVolumeIds;

    /**
     * @return A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
     * 
     */
    public Output<List<String>> blockVolumeIds() {
        return this.blockVolumeIds;
    }

    /**
     * Type of the datastore.
     * 
     */
    @Import(name="datastoreType", required=true)
    private Output<String> datastoreType;

    /**
     * @return Type of the datastore.
     * 
     */
    public Output<String> datastoreType() {
        return this.datastoreType;
    }

    private SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs() {}

    private SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs(SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs $) {
        this.blockVolumeIds = $.blockVolumeIds;
        this.datastoreType = $.datastoreType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs $;

        public Builder() {
            $ = new SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs();
        }

        public Builder(SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs defaults) {
            $ = new SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(Output<List<String>> blockVolumeIds) {
            $.blockVolumeIds = blockVolumeIds;
            return this;
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(List<String> blockVolumeIds) {
            return blockVolumeIds(Output.of(blockVolumeIds));
        }

        /**
         * @param blockVolumeIds A list of [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s of Block Storage Volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeIds(String... blockVolumeIds) {
            return blockVolumeIds(List.of(blockVolumeIds));
        }

        /**
         * @param datastoreType Type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(Output<String> datastoreType) {
            $.datastoreType = datastoreType;
            return this;
        }

        /**
         * @param datastoreType Type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(String datastoreType) {
            return datastoreType(Output.of(datastoreType));
        }

        public SddcInitialConfigurationInitialClusterConfigurationDatastoreArgs build() {
            $.blockVolumeIds = Objects.requireNonNull($.blockVolumeIds, "expected parameter 'blockVolumeIds' to be non-null");
            $.datastoreType = Objects.requireNonNull($.datastoreType, "expected parameter 'datastoreType' to be non-null");
            return $;
        }
    }

}
