// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Ocvp.outputs.GetSddcDatastore;
import com.pulumi.oci.Ocvp.outputs.GetSddcHcxOnPremLicense;
import com.pulumi.oci.Ocvp.outputs.GetSddcInitialConfiguration;
import com.pulumi.oci.Ocvp.outputs.GetSddcUpgradeLicense;
import com.pulumi.oci.Ocvp.outputs.GetSddcVsphereUpgradeObject;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSddcResult {
    /**
     * @return (**Deprecated**) The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC. **Deprecated**. Please use `actual_esxi_hosts_count` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;actual_esxi_hosts_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'actual_esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead. */
    private Integer actualEsxiHostsCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
     * 
     * @deprecated
     * The &#39;capacity_reservation_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'capacity_reservation_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String capacityReservationId;
    /**
     * @return The number of Clusters in the SDDC.
     * 
     */
    private Integer clustersCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the SDDC.
     * 
     */
    private String compartmentId;
    /**
     * @return The availability domain to create the Cluster&#39;s ESXi hosts in. For multi-AD Cluster deployment, set to `multi-AD`.
     * 
     * @deprecated
     * The &#39;compute_availability_domain&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'compute_availability_domain' field has been deprecated. Please use 'initial_configuration' instead. */
    private String computeAvailabilityDomain;
    /**
     * @return A list of datastore info for the Cluster. This value is required only when `initialHostShapeName` is a standard shape.
     * 
     * @deprecated
     * The &#39;datastores&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'datastores' field has been deprecated. Please use 'initial_configuration' instead. */
    private List<GetSddcDatastore> datastores;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A descriptive name for the Cluster. Cluster name requirements are 1-16 character length limit, Must start with a letter, Must be English letters, numbers, - only, No repeating hyphens, Must be unique within the region. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return The number of ESXi hosts to create in the Cluster. You can add more hosts later (see [CreateEsxiHost](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/EsxiHost/CreateEsxiHost)). Creating a Cluster with a ESXi host count of 1 will be considered a single ESXi host Cluster.
     * 
     * @deprecated
     * The &#39;esxi_hosts_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead. */
    private Integer esxiHostsCount;
    /**
     * @return In general, this is a specific version of bundled ESXi software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20230701/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    private String esxiSoftwareVersion;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    private String hcxAction;
    /**
     * @return The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private String hcxFqdn;
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;hcx_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'hcx_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    private String hcxInitialPassword;
    /**
     * @return HCX configuration of the SDDC.
     * 
     */
    private String hcxMode;
    /**
     * @return (**Deprecated**) The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys. **Deprecated**. Please use `hcx_on_prem_licenses` instead.
     * 
     * @deprecated
     * The &#39;hcx_on_prem_key&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'hcx_on_prem_key' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String hcxOnPremKey;
    /**
     * @return The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
     * 
     */
    private List<GetSddcHcxOnPremLicense> hcxOnPremLicenses;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private String hcxPrivateIpId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment. This VLAN is a mandatory attribute  for Management Cluster when HCX is enabled.
     * 
     * @deprecated
     * The &#39;hcx_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'hcx_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String hcxVlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
     * 
     */
    private String id;
    /**
     * @return Details of SDDC initial configuration
     * 
     */
    private List<GetSddcInitialConfiguration> initialConfigurations;
    /**
     * @return (**Deprecated**) The initial OCPU count of the SDDC&#39;s ESXi hosts. **Deprecated**. Please use `initial_host_ocpu_count` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_host_ocpu_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_host_ocpu_count' field has been deprecated. Please use 'initial_configuration' instead. */
    private Double initialHostOcpuCount;
    /**
     * @return (**Deprecated**) The initial compute shape of the SDDC&#39;s ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes). **Deprecated**. Please use `initial_host_shape_name` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_host_shape_name&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_host_shape_name' field has been deprecated. Please use 'initial_configuration' instead. */
    private String initialHostShapeName;
    /**
     * @return (**Deprecated**) The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus). **Deprecated**. Please use `initial_commitment` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_sku&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_sku' field has been deprecated. Please use 'initial_configuration' instead. */
    private String initialSku;
    /**
     * @return (**Deprecated**) A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn&#39;t set, the SDDC&#39;s `displayName` is used as the prefix.
     * 
     * @deprecated
     * The &#39;instance_display_name_prefix&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'instance_display_name_prefix' field has been deprecated. Please use 'initial_configuration' instead. */
    private String instanceDisplayNamePrefix;
    /**
     * @return (**Deprecated**) Indicates whether HCX is enabled for this SDDC. **Deprecated**. Please use `hcx_mode` instead.
     * 
     */
    private Boolean isHcxEnabled;
    /**
     * @return (**Deprecated**) Indicates whether HCX Enterprise is enabled for this SDDC.  **Deprecated**. Please use `hcx_mode` instead.
     * 
     * @deprecated
     * The &#39;is_hcx_enterprise_enabled&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'is_hcx_enterprise_enabled' field has been deprecated and may be removed in a future version. Do not use this field. */
    private Boolean isHcxEnterpriseEnabled;
    /**
     * @return Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
     * 
     */
    private Boolean isHcxPendingDowngrade;
    /**
     * @return (**Deprecated**) Indicates whether shielded instance is enabled at the SDDC level. **Deprecated**. Please use `is_shielded_instance_enabled` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;is_shielded_instance_enabled&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'is_shielded_instance_enabled' field has been deprecated. Please use 'initial_configuration' instead. */
    private Boolean isShieldedInstanceEnabled;
    /**
     * @return Indicates whether this SDDC is designated for only single ESXi host.
     * 
     */
    private Boolean isSingleHostSddc;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_uplink1vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_uplink1vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String nsxEdgeUplink1vlanId;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_uplink2vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_uplink2vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String nsxEdgeUplink2vlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private String nsxEdgeUplinkIpId;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_vtep_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String nsxEdgeVtepVlanId;
    /**
     * @return The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private String nsxManagerFqdn;
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;nsx_manager_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'nsx_manager_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    private String nsxManagerInitialPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private String nsxManagerPrivateIpId;
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
     * 
     */
    private String nsxManagerUsername;
    /**
     * @return (**Deprecated**) The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
     * 
     * @deprecated
     * The &#39;nsx_overlay_segment_name&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'nsx_overlay_segment_name' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String nsxOverlaySegmentName;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_vtep_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String nsxVtepVlanId;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC. **Deprecated**. Please use `provisioning_subnet_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;provisioning_subnet_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'provisioning_subnet_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String provisioningSubnetId;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment. **Deprecated**. Please use `provisioning_vlan_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;provisioning_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'provisioning_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String provisioningVlanId;
    private Boolean refreshHcxLicenseStatus;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment. **Deprecated**. Please use `replication_vlan_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;replication_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'replication_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String replicationVlanId;
    private List<String> reservingHcxOnPremiseLicenseKeys;
    private String sddcId;
    /**
     * @return One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorized_keys` file.
     * 
     */
    private String sshAuthorizedKeys;
    /**
     * @return The current state of the SDDC.
     * 
     */
    private String state;
    /**
     * @return The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeHcxBillingCycleEnd;
    /**
     * @return The date and time the SDDC&#39;s HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeHcxLicenseStatusUpdated;
    /**
     * @return The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return (**Deprecated**) The vSphere licenses to use when upgrading the SDDC.
     * 
     * @deprecated
     * The &#39;upgrade_licenses&#39; field has been deprecated. Please use the &#39;ocvp_cluster_resource&#39; resource instead.
     * 
     */
    @Deprecated /* The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead. */
    private List<GetSddcUpgradeLicense> upgradeLicenses;
    /**
     * @return The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private String vcenterFqdn;
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;vcenter_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'vcenter_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    private String vcenterInitialPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private String vcenterPrivateIpId;
    /**
     * @return The SDDC includes an administrator username and password for vCenter. You can change this initial username to a different value in vCenter.
     * 
     */
    private String vcenterUsername;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vmotion_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vmotion_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String vmotionVlanId;
    /**
     * @return In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20230701/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    private String vmwareSoftwareVersion;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vsan_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vsan_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String vsanVlanId;
    /**
     * @return (**Deprecated**) The link to guidance for upgrading vSphere.
     * 
     * @deprecated
     * The &#39;vsphere_upgrade_guide&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'vsphere_upgrade_guide' field has been deprecated and may be removed in a future version. Do not use this field. */
    private String vsphereUpgradeGuide;
    /**
     * @return (**Deprecated**) The links to binary objects needed to upgrade vSphere.
     * 
     * @deprecated
     * The &#39;vsphere_upgrade_objects&#39; field has been deprecated. Please use the &#39;ocvp_cluster_resource&#39; resource instead.
     * 
     */
    @Deprecated /* The 'vsphere_upgrade_objects' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead. */
    private List<GetSddcVsphereUpgradeObject> vsphereUpgradeObjects;
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vsphere_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vsphere_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    private String vsphereVlanId;
    /**
     * @return (**Deprecated**) The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads. **Deprecated**. Please use `workload_network_cidr` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;workload_network_cidr&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'workload_network_cidr' field has been deprecated. Please use 'initial_configuration' instead. */
    private String workloadNetworkCidr;

    private GetSddcResult() {}
    /**
     * @return (**Deprecated**) The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC. **Deprecated**. Please use `actual_esxi_hosts_count` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;actual_esxi_hosts_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'actual_esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead. */
    public Integer actualEsxiHostsCount() {
        return this.actualEsxiHostsCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
     * 
     * @deprecated
     * The &#39;capacity_reservation_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'capacity_reservation_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String capacityReservationId() {
        return this.capacityReservationId;
    }
    /**
     * @return The number of Clusters in the SDDC.
     * 
     */
    public Integer clustersCount() {
        return this.clustersCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the SDDC.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The availability domain to create the Cluster&#39;s ESXi hosts in. For multi-AD Cluster deployment, set to `multi-AD`.
     * 
     * @deprecated
     * The &#39;compute_availability_domain&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'compute_availability_domain' field has been deprecated. Please use 'initial_configuration' instead. */
    public String computeAvailabilityDomain() {
        return this.computeAvailabilityDomain;
    }
    /**
     * @return A list of datastore info for the Cluster. This value is required only when `initialHostShapeName` is a standard shape.
     * 
     * @deprecated
     * The &#39;datastores&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'datastores' field has been deprecated. Please use 'initial_configuration' instead. */
    public List<GetSddcDatastore> datastores() {
        return this.datastores;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A descriptive name for the Cluster. Cluster name requirements are 1-16 character length limit, Must start with a letter, Must be English letters, numbers, - only, No repeating hyphens, Must be unique within the region. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The number of ESXi hosts to create in the Cluster. You can add more hosts later (see [CreateEsxiHost](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/EsxiHost/CreateEsxiHost)). Creating a Cluster with a ESXi host count of 1 will be considered a single ESXi host Cluster.
     * 
     * @deprecated
     * The &#39;esxi_hosts_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'esxi_hosts_count' field has been deprecated. Please use 'initial_configuration' instead. */
    public Integer esxiHostsCount() {
        return this.esxiHostsCount;
    }
    /**
     * @return In general, this is a specific version of bundled ESXi software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20230701/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    public String esxiSoftwareVersion() {
        return this.esxiSoftwareVersion;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    public String hcxAction() {
        return this.hcxAction;
    }
    /**
     * @return The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String hcxFqdn() {
        return this.hcxFqdn;
    }
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;hcx_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'hcx_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    public String hcxInitialPassword() {
        return this.hcxInitialPassword;
    }
    /**
     * @return HCX configuration of the SDDC.
     * 
     */
    public String hcxMode() {
        return this.hcxMode;
    }
    /**
     * @return (**Deprecated**) The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys. **Deprecated**. Please use `hcx_on_prem_licenses` instead.
     * 
     * @deprecated
     * The &#39;hcx_on_prem_key&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'hcx_on_prem_key' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String hcxOnPremKey() {
        return this.hcxOnPremKey;
    }
    /**
     * @return The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
     * 
     */
    public List<GetSddcHcxOnPremLicense> hcxOnPremLicenses() {
        return this.hcxOnPremLicenses;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String hcxPrivateIpId() {
        return this.hcxPrivateIpId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment. This VLAN is a mandatory attribute  for Management Cluster when HCX is enabled.
     * 
     * @deprecated
     * The &#39;hcx_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'hcx_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String hcxVlanId() {
        return this.hcxVlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of SDDC initial configuration
     * 
     */
    public List<GetSddcInitialConfiguration> initialConfigurations() {
        return this.initialConfigurations;
    }
    /**
     * @return (**Deprecated**) The initial OCPU count of the SDDC&#39;s ESXi hosts. **Deprecated**. Please use `initial_host_ocpu_count` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_host_ocpu_count&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_host_ocpu_count' field has been deprecated. Please use 'initial_configuration' instead. */
    public Double initialHostOcpuCount() {
        return this.initialHostOcpuCount;
    }
    /**
     * @return (**Deprecated**) The initial compute shape of the SDDC&#39;s ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes). **Deprecated**. Please use `initial_host_shape_name` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_host_shape_name&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_host_shape_name' field has been deprecated. Please use 'initial_configuration' instead. */
    public String initialHostShapeName() {
        return this.initialHostShapeName;
    }
    /**
     * @return (**Deprecated**) The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus). **Deprecated**. Please use `initial_commitment` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;initial_sku&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'initial_sku' field has been deprecated. Please use 'initial_configuration' instead. */
    public String initialSku() {
        return this.initialSku;
    }
    /**
     * @return (**Deprecated**) A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn&#39;t set, the SDDC&#39;s `displayName` is used as the prefix.
     * 
     * @deprecated
     * The &#39;instance_display_name_prefix&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'instance_display_name_prefix' field has been deprecated. Please use 'initial_configuration' instead. */
    public String instanceDisplayNamePrefix() {
        return this.instanceDisplayNamePrefix;
    }
    /**
     * @return (**Deprecated**) Indicates whether HCX is enabled for this SDDC. **Deprecated**. Please use `hcx_mode` instead.
     * 
     */
    public Boolean isHcxEnabled() {
        return this.isHcxEnabled;
    }
    /**
     * @return (**Deprecated**) Indicates whether HCX Enterprise is enabled for this SDDC.  **Deprecated**. Please use `hcx_mode` instead.
     * 
     * @deprecated
     * The &#39;is_hcx_enterprise_enabled&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'is_hcx_enterprise_enabled' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Boolean isHcxEnterpriseEnabled() {
        return this.isHcxEnterpriseEnabled;
    }
    /**
     * @return Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
     * 
     */
    public Boolean isHcxPendingDowngrade() {
        return this.isHcxPendingDowngrade;
    }
    /**
     * @return (**Deprecated**) Indicates whether shielded instance is enabled at the SDDC level. **Deprecated**. Please use `is_shielded_instance_enabled` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;is_shielded_instance_enabled&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'is_shielded_instance_enabled' field has been deprecated. Please use 'initial_configuration' instead. */
    public Boolean isShieldedInstanceEnabled() {
        return this.isShieldedInstanceEnabled;
    }
    /**
     * @return Indicates whether this SDDC is designated for only single ESXi host.
     * 
     */
    public Boolean isSingleHostSddc() {
        return this.isSingleHostSddc;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_uplink1vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_uplink1vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String nsxEdgeUplink1vlanId() {
        return this.nsxEdgeUplink1vlanId;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_uplink2vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_uplink2vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String nsxEdgeUplink2vlanId() {
        return this.nsxEdgeUplink2vlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String nsxEdgeUplinkIpId() {
        return this.nsxEdgeUplinkIpId;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_edge_vtep_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_edge_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String nsxEdgeVtepVlanId() {
        return this.nsxEdgeVtepVlanId;
    }
    /**
     * @return The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String nsxManagerFqdn() {
        return this.nsxManagerFqdn;
    }
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;nsx_manager_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'nsx_manager_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    public String nsxManagerInitialPassword() {
        return this.nsxManagerInitialPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String nsxManagerPrivateIpId() {
        return this.nsxManagerPrivateIpId;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
     * 
     */
    public String nsxManagerUsername() {
        return this.nsxManagerUsername;
    }
    /**
     * @return (**Deprecated**) The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
     * 
     * @deprecated
     * The &#39;nsx_overlay_segment_name&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'nsx_overlay_segment_name' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String nsxOverlaySegmentName() {
        return this.nsxOverlaySegmentName;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
     * 
     * @deprecated
     * The &#39;nsx_vtep_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'nsx_vtep_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String nsxVtepVlanId() {
        return this.nsxVtepVlanId;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC. **Deprecated**. Please use `provisioning_subnet_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;provisioning_subnet_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'provisioning_subnet_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String provisioningSubnetId() {
        return this.provisioningSubnetId;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment. **Deprecated**. Please use `provisioning_vlan_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;provisioning_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'provisioning_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String provisioningVlanId() {
        return this.provisioningVlanId;
    }
    public Boolean refreshHcxLicenseStatus() {
        return this.refreshHcxLicenseStatus;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment. **Deprecated**. Please use `replication_vlan_id` of `network_configuration` instead.
     * 
     * @deprecated
     * The &#39;replication_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'replication_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String replicationVlanId() {
        return this.replicationVlanId;
    }
    public List<String> reservingHcxOnPremiseLicenseKeys() {
        return this.reservingHcxOnPremiseLicenseKeys;
    }
    public String sddcId() {
        return this.sddcId;
    }
    /**
     * @return One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorized_keys` file.
     * 
     */
    public String sshAuthorizedKeys() {
        return this.sshAuthorizedKeys;
    }
    /**
     * @return The current state of the SDDC.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeHcxBillingCycleEnd() {
        return this.timeHcxBillingCycleEnd;
    }
    /**
     * @return The date and time the SDDC&#39;s HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeHcxLicenseStatusUpdated() {
        return this.timeHcxLicenseStatusUpdated;
    }
    /**
     * @return The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return (**Deprecated**) The vSphere licenses to use when upgrading the SDDC.
     * 
     * @deprecated
     * The &#39;upgrade_licenses&#39; field has been deprecated. Please use the &#39;ocvp_cluster_resource&#39; resource instead.
     * 
     */
    @Deprecated /* The 'upgrade_licenses' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead. */
    public List<GetSddcUpgradeLicense> upgradeLicenses() {
        return this.upgradeLicenses;
    }
    /**
     * @return The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String vcenterFqdn() {
        return this.vcenterFqdn;
    }
    /**
     * @return (**Deprecated**) The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value. **Deprecated**. Please use the `oci.Ocvp.getRetrievePassword` data source instead.
     * 
     * @deprecated
     * The &#39;vcenter_initial_password&#39; field has been deprecated. Please use the &#39;oci_ocvp_retrieve_password&#39; data source instead.
     * 
     */
    @Deprecated /* The 'vcenter_initial_password' field has been deprecated. Please use the 'oci_ocvp_retrieve_password' data source instead. */
    public String vcenterInitialPassword() {
        return this.vcenterInitialPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String vcenterPrivateIpId() {
        return this.vcenterPrivateIpId;
    }
    /**
     * @return The SDDC includes an administrator username and password for vCenter. You can change this initial username to a different value in vCenter.
     * 
     */
    public String vcenterUsername() {
        return this.vcenterUsername;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vmotion_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vmotion_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String vmotionVlanId() {
        return this.vmotionVlanId;
    }
    /**
     * @return In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20230701/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    public String vmwareSoftwareVersion() {
        return this.vmwareSoftwareVersion;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vsan_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vsan_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String vsanVlanId() {
        return this.vsanVlanId;
    }
    /**
     * @return (**Deprecated**) The link to guidance for upgrading vSphere.
     * 
     * @deprecated
     * The &#39;vsphere_upgrade_guide&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'vsphere_upgrade_guide' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String vsphereUpgradeGuide() {
        return this.vsphereUpgradeGuide;
    }
    /**
     * @return (**Deprecated**) The links to binary objects needed to upgrade vSphere.
     * 
     * @deprecated
     * The &#39;vsphere_upgrade_objects&#39; field has been deprecated. Please use the &#39;ocvp_cluster_resource&#39; resource instead.
     * 
     */
    @Deprecated /* The 'vsphere_upgrade_objects' field has been deprecated. Please use the 'ocvp_cluster_resource' resource instead. */
    public List<GetSddcVsphereUpgradeObject> vsphereUpgradeObjects() {
        return this.vsphereUpgradeObjects;
    }
    /**
     * @return (**Deprecated**) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
     * 
     * @deprecated
     * The &#39;vsphere_vlan_id&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'vsphere_vlan_id' field has been deprecated. Please use 'initial_configuration' instead. */
    public String vsphereVlanId() {
        return this.vsphereVlanId;
    }
    /**
     * @return (**Deprecated**) The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads. **Deprecated**. Please use `workload_network_cidr` of `initial_cluster_configurations` instead.
     * 
     * @deprecated
     * The &#39;workload_network_cidr&#39; field has been deprecated. Please use &#39;initial_configuration&#39; instead.
     * 
     */
    @Deprecated /* The 'workload_network_cidr' field has been deprecated. Please use 'initial_configuration' instead. */
    public String workloadNetworkCidr() {
        return this.workloadNetworkCidr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSddcResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer actualEsxiHostsCount;
        private String capacityReservationId;
        private Integer clustersCount;
        private String compartmentId;
        private String computeAvailabilityDomain;
        private List<GetSddcDatastore> datastores;
        private Map<String,String> definedTags;
        private String displayName;
        private Integer esxiHostsCount;
        private String esxiSoftwareVersion;
        private Map<String,String> freeformTags;
        private String hcxAction;
        private String hcxFqdn;
        private String hcxInitialPassword;
        private String hcxMode;
        private String hcxOnPremKey;
        private List<GetSddcHcxOnPremLicense> hcxOnPremLicenses;
        private String hcxPrivateIpId;
        private String hcxVlanId;
        private String id;
        private List<GetSddcInitialConfiguration> initialConfigurations;
        private Double initialHostOcpuCount;
        private String initialHostShapeName;
        private String initialSku;
        private String instanceDisplayNamePrefix;
        private Boolean isHcxEnabled;
        private Boolean isHcxEnterpriseEnabled;
        private Boolean isHcxPendingDowngrade;
        private Boolean isShieldedInstanceEnabled;
        private Boolean isSingleHostSddc;
        private String nsxEdgeUplink1vlanId;
        private String nsxEdgeUplink2vlanId;
        private String nsxEdgeUplinkIpId;
        private String nsxEdgeVtepVlanId;
        private String nsxManagerFqdn;
        private String nsxManagerInitialPassword;
        private String nsxManagerPrivateIpId;
        private String nsxManagerUsername;
        private String nsxOverlaySegmentName;
        private String nsxVtepVlanId;
        private String provisioningSubnetId;
        private String provisioningVlanId;
        private Boolean refreshHcxLicenseStatus;
        private String replicationVlanId;
        private List<String> reservingHcxOnPremiseLicenseKeys;
        private String sddcId;
        private String sshAuthorizedKeys;
        private String state;
        private String timeCreated;
        private String timeHcxBillingCycleEnd;
        private String timeHcxLicenseStatusUpdated;
        private String timeUpdated;
        private List<GetSddcUpgradeLicense> upgradeLicenses;
        private String vcenterFqdn;
        private String vcenterInitialPassword;
        private String vcenterPrivateIpId;
        private String vcenterUsername;
        private String vmotionVlanId;
        private String vmwareSoftwareVersion;
        private String vsanVlanId;
        private String vsphereUpgradeGuide;
        private List<GetSddcVsphereUpgradeObject> vsphereUpgradeObjects;
        private String vsphereVlanId;
        private String workloadNetworkCidr;
        public Builder() {}
        public Builder(GetSddcResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualEsxiHostsCount = defaults.actualEsxiHostsCount;
    	      this.capacityReservationId = defaults.capacityReservationId;
    	      this.clustersCount = defaults.clustersCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeAvailabilityDomain = defaults.computeAvailabilityDomain;
    	      this.datastores = defaults.datastores;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.esxiHostsCount = defaults.esxiHostsCount;
    	      this.esxiSoftwareVersion = defaults.esxiSoftwareVersion;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hcxAction = defaults.hcxAction;
    	      this.hcxFqdn = defaults.hcxFqdn;
    	      this.hcxInitialPassword = defaults.hcxInitialPassword;
    	      this.hcxMode = defaults.hcxMode;
    	      this.hcxOnPremKey = defaults.hcxOnPremKey;
    	      this.hcxOnPremLicenses = defaults.hcxOnPremLicenses;
    	      this.hcxPrivateIpId = defaults.hcxPrivateIpId;
    	      this.hcxVlanId = defaults.hcxVlanId;
    	      this.id = defaults.id;
    	      this.initialConfigurations = defaults.initialConfigurations;
    	      this.initialHostOcpuCount = defaults.initialHostOcpuCount;
    	      this.initialHostShapeName = defaults.initialHostShapeName;
    	      this.initialSku = defaults.initialSku;
    	      this.instanceDisplayNamePrefix = defaults.instanceDisplayNamePrefix;
    	      this.isHcxEnabled = defaults.isHcxEnabled;
    	      this.isHcxEnterpriseEnabled = defaults.isHcxEnterpriseEnabled;
    	      this.isHcxPendingDowngrade = defaults.isHcxPendingDowngrade;
    	      this.isShieldedInstanceEnabled = defaults.isShieldedInstanceEnabled;
    	      this.isSingleHostSddc = defaults.isSingleHostSddc;
    	      this.nsxEdgeUplink1vlanId = defaults.nsxEdgeUplink1vlanId;
    	      this.nsxEdgeUplink2vlanId = defaults.nsxEdgeUplink2vlanId;
    	      this.nsxEdgeUplinkIpId = defaults.nsxEdgeUplinkIpId;
    	      this.nsxEdgeVtepVlanId = defaults.nsxEdgeVtepVlanId;
    	      this.nsxManagerFqdn = defaults.nsxManagerFqdn;
    	      this.nsxManagerInitialPassword = defaults.nsxManagerInitialPassword;
    	      this.nsxManagerPrivateIpId = defaults.nsxManagerPrivateIpId;
    	      this.nsxManagerUsername = defaults.nsxManagerUsername;
    	      this.nsxOverlaySegmentName = defaults.nsxOverlaySegmentName;
    	      this.nsxVtepVlanId = defaults.nsxVtepVlanId;
    	      this.provisioningSubnetId = defaults.provisioningSubnetId;
    	      this.provisioningVlanId = defaults.provisioningVlanId;
    	      this.refreshHcxLicenseStatus = defaults.refreshHcxLicenseStatus;
    	      this.replicationVlanId = defaults.replicationVlanId;
    	      this.reservingHcxOnPremiseLicenseKeys = defaults.reservingHcxOnPremiseLicenseKeys;
    	      this.sddcId = defaults.sddcId;
    	      this.sshAuthorizedKeys = defaults.sshAuthorizedKeys;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeHcxBillingCycleEnd = defaults.timeHcxBillingCycleEnd;
    	      this.timeHcxLicenseStatusUpdated = defaults.timeHcxLicenseStatusUpdated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.upgradeLicenses = defaults.upgradeLicenses;
    	      this.vcenterFqdn = defaults.vcenterFqdn;
    	      this.vcenterInitialPassword = defaults.vcenterInitialPassword;
    	      this.vcenterPrivateIpId = defaults.vcenterPrivateIpId;
    	      this.vcenterUsername = defaults.vcenterUsername;
    	      this.vmotionVlanId = defaults.vmotionVlanId;
    	      this.vmwareSoftwareVersion = defaults.vmwareSoftwareVersion;
    	      this.vsanVlanId = defaults.vsanVlanId;
    	      this.vsphereUpgradeGuide = defaults.vsphereUpgradeGuide;
    	      this.vsphereUpgradeObjects = defaults.vsphereUpgradeObjects;
    	      this.vsphereVlanId = defaults.vsphereVlanId;
    	      this.workloadNetworkCidr = defaults.workloadNetworkCidr;
        }

        @CustomType.Setter
        public Builder actualEsxiHostsCount(Integer actualEsxiHostsCount) {
            if (actualEsxiHostsCount == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "actualEsxiHostsCount");
            }
            this.actualEsxiHostsCount = actualEsxiHostsCount;
            return this;
        }
        @CustomType.Setter
        public Builder capacityReservationId(String capacityReservationId) {
            if (capacityReservationId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "capacityReservationId");
            }
            this.capacityReservationId = capacityReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder clustersCount(Integer clustersCount) {
            if (clustersCount == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "clustersCount");
            }
            this.clustersCount = clustersCount;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeAvailabilityDomain(String computeAvailabilityDomain) {
            if (computeAvailabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "computeAvailabilityDomain");
            }
            this.computeAvailabilityDomain = computeAvailabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder datastores(List<GetSddcDatastore> datastores) {
            if (datastores == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "datastores");
            }
            this.datastores = datastores;
            return this;
        }
        public Builder datastores(GetSddcDatastore... datastores) {
            return datastores(List.of(datastores));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder esxiHostsCount(Integer esxiHostsCount) {
            if (esxiHostsCount == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "esxiHostsCount");
            }
            this.esxiHostsCount = esxiHostsCount;
            return this;
        }
        @CustomType.Setter
        public Builder esxiSoftwareVersion(String esxiSoftwareVersion) {
            if (esxiSoftwareVersion == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "esxiSoftwareVersion");
            }
            this.esxiSoftwareVersion = esxiSoftwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hcxAction(String hcxAction) {
            if (hcxAction == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxAction");
            }
            this.hcxAction = hcxAction;
            return this;
        }
        @CustomType.Setter
        public Builder hcxFqdn(String hcxFqdn) {
            if (hcxFqdn == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxFqdn");
            }
            this.hcxFqdn = hcxFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder hcxInitialPassword(String hcxInitialPassword) {
            if (hcxInitialPassword == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxInitialPassword");
            }
            this.hcxInitialPassword = hcxInitialPassword;
            return this;
        }
        @CustomType.Setter
        public Builder hcxMode(String hcxMode) {
            if (hcxMode == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxMode");
            }
            this.hcxMode = hcxMode;
            return this;
        }
        @CustomType.Setter
        public Builder hcxOnPremKey(String hcxOnPremKey) {
            if (hcxOnPremKey == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxOnPremKey");
            }
            this.hcxOnPremKey = hcxOnPremKey;
            return this;
        }
        @CustomType.Setter
        public Builder hcxOnPremLicenses(List<GetSddcHcxOnPremLicense> hcxOnPremLicenses) {
            if (hcxOnPremLicenses == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxOnPremLicenses");
            }
            this.hcxOnPremLicenses = hcxOnPremLicenses;
            return this;
        }
        public Builder hcxOnPremLicenses(GetSddcHcxOnPremLicense... hcxOnPremLicenses) {
            return hcxOnPremLicenses(List.of(hcxOnPremLicenses));
        }
        @CustomType.Setter
        public Builder hcxPrivateIpId(String hcxPrivateIpId) {
            if (hcxPrivateIpId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxPrivateIpId");
            }
            this.hcxPrivateIpId = hcxPrivateIpId;
            return this;
        }
        @CustomType.Setter
        public Builder hcxVlanId(String hcxVlanId) {
            if (hcxVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "hcxVlanId");
            }
            this.hcxVlanId = hcxVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialConfigurations(List<GetSddcInitialConfiguration> initialConfigurations) {
            if (initialConfigurations == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "initialConfigurations");
            }
            this.initialConfigurations = initialConfigurations;
            return this;
        }
        public Builder initialConfigurations(GetSddcInitialConfiguration... initialConfigurations) {
            return initialConfigurations(List.of(initialConfigurations));
        }
        @CustomType.Setter
        public Builder initialHostOcpuCount(Double initialHostOcpuCount) {
            if (initialHostOcpuCount == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "initialHostOcpuCount");
            }
            this.initialHostOcpuCount = initialHostOcpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder initialHostShapeName(String initialHostShapeName) {
            if (initialHostShapeName == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "initialHostShapeName");
            }
            this.initialHostShapeName = initialHostShapeName;
            return this;
        }
        @CustomType.Setter
        public Builder initialSku(String initialSku) {
            if (initialSku == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "initialSku");
            }
            this.initialSku = initialSku;
            return this;
        }
        @CustomType.Setter
        public Builder instanceDisplayNamePrefix(String instanceDisplayNamePrefix) {
            if (instanceDisplayNamePrefix == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "instanceDisplayNamePrefix");
            }
            this.instanceDisplayNamePrefix = instanceDisplayNamePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder isHcxEnabled(Boolean isHcxEnabled) {
            if (isHcxEnabled == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "isHcxEnabled");
            }
            this.isHcxEnabled = isHcxEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isHcxEnterpriseEnabled(Boolean isHcxEnterpriseEnabled) {
            if (isHcxEnterpriseEnabled == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "isHcxEnterpriseEnabled");
            }
            this.isHcxEnterpriseEnabled = isHcxEnterpriseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isHcxPendingDowngrade(Boolean isHcxPendingDowngrade) {
            if (isHcxPendingDowngrade == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "isHcxPendingDowngrade");
            }
            this.isHcxPendingDowngrade = isHcxPendingDowngrade;
            return this;
        }
        @CustomType.Setter
        public Builder isShieldedInstanceEnabled(Boolean isShieldedInstanceEnabled) {
            if (isShieldedInstanceEnabled == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "isShieldedInstanceEnabled");
            }
            this.isShieldedInstanceEnabled = isShieldedInstanceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSingleHostSddc(Boolean isSingleHostSddc) {
            if (isSingleHostSddc == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "isSingleHostSddc");
            }
            this.isSingleHostSddc = isSingleHostSddc;
            return this;
        }
        @CustomType.Setter
        public Builder nsxEdgeUplink1vlanId(String nsxEdgeUplink1vlanId) {
            if (nsxEdgeUplink1vlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxEdgeUplink1vlanId");
            }
            this.nsxEdgeUplink1vlanId = nsxEdgeUplink1vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder nsxEdgeUplink2vlanId(String nsxEdgeUplink2vlanId) {
            if (nsxEdgeUplink2vlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxEdgeUplink2vlanId");
            }
            this.nsxEdgeUplink2vlanId = nsxEdgeUplink2vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder nsxEdgeUplinkIpId(String nsxEdgeUplinkIpId) {
            if (nsxEdgeUplinkIpId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxEdgeUplinkIpId");
            }
            this.nsxEdgeUplinkIpId = nsxEdgeUplinkIpId;
            return this;
        }
        @CustomType.Setter
        public Builder nsxEdgeVtepVlanId(String nsxEdgeVtepVlanId) {
            if (nsxEdgeVtepVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxEdgeVtepVlanId");
            }
            this.nsxEdgeVtepVlanId = nsxEdgeVtepVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder nsxManagerFqdn(String nsxManagerFqdn) {
            if (nsxManagerFqdn == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxManagerFqdn");
            }
            this.nsxManagerFqdn = nsxManagerFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder nsxManagerInitialPassword(String nsxManagerInitialPassword) {
            if (nsxManagerInitialPassword == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxManagerInitialPassword");
            }
            this.nsxManagerInitialPassword = nsxManagerInitialPassword;
            return this;
        }
        @CustomType.Setter
        public Builder nsxManagerPrivateIpId(String nsxManagerPrivateIpId) {
            if (nsxManagerPrivateIpId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxManagerPrivateIpId");
            }
            this.nsxManagerPrivateIpId = nsxManagerPrivateIpId;
            return this;
        }
        @CustomType.Setter
        public Builder nsxManagerUsername(String nsxManagerUsername) {
            if (nsxManagerUsername == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxManagerUsername");
            }
            this.nsxManagerUsername = nsxManagerUsername;
            return this;
        }
        @CustomType.Setter
        public Builder nsxOverlaySegmentName(String nsxOverlaySegmentName) {
            if (nsxOverlaySegmentName == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxOverlaySegmentName");
            }
            this.nsxOverlaySegmentName = nsxOverlaySegmentName;
            return this;
        }
        @CustomType.Setter
        public Builder nsxVtepVlanId(String nsxVtepVlanId) {
            if (nsxVtepVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "nsxVtepVlanId");
            }
            this.nsxVtepVlanId = nsxVtepVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningSubnetId(String provisioningSubnetId) {
            if (provisioningSubnetId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "provisioningSubnetId");
            }
            this.provisioningSubnetId = provisioningSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningVlanId(String provisioningVlanId) {
            if (provisioningVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "provisioningVlanId");
            }
            this.provisioningVlanId = provisioningVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder refreshHcxLicenseStatus(Boolean refreshHcxLicenseStatus) {
            if (refreshHcxLicenseStatus == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "refreshHcxLicenseStatus");
            }
            this.refreshHcxLicenseStatus = refreshHcxLicenseStatus;
            return this;
        }
        @CustomType.Setter
        public Builder replicationVlanId(String replicationVlanId) {
            if (replicationVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "replicationVlanId");
            }
            this.replicationVlanId = replicationVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder reservingHcxOnPremiseLicenseKeys(List<String> reservingHcxOnPremiseLicenseKeys) {
            if (reservingHcxOnPremiseLicenseKeys == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "reservingHcxOnPremiseLicenseKeys");
            }
            this.reservingHcxOnPremiseLicenseKeys = reservingHcxOnPremiseLicenseKeys;
            return this;
        }
        public Builder reservingHcxOnPremiseLicenseKeys(String... reservingHcxOnPremiseLicenseKeys) {
            return reservingHcxOnPremiseLicenseKeys(List.of(reservingHcxOnPremiseLicenseKeys));
        }
        @CustomType.Setter
        public Builder sddcId(String sddcId) {
            if (sddcId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "sddcId");
            }
            this.sddcId = sddcId;
            return this;
        }
        @CustomType.Setter
        public Builder sshAuthorizedKeys(String sshAuthorizedKeys) {
            if (sshAuthorizedKeys == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "sshAuthorizedKeys");
            }
            this.sshAuthorizedKeys = sshAuthorizedKeys;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeHcxBillingCycleEnd(String timeHcxBillingCycleEnd) {
            if (timeHcxBillingCycleEnd == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "timeHcxBillingCycleEnd");
            }
            this.timeHcxBillingCycleEnd = timeHcxBillingCycleEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeHcxLicenseStatusUpdated(String timeHcxLicenseStatusUpdated) {
            if (timeHcxLicenseStatusUpdated == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "timeHcxLicenseStatusUpdated");
            }
            this.timeHcxLicenseStatusUpdated = timeHcxLicenseStatusUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeLicenses(List<GetSddcUpgradeLicense> upgradeLicenses) {
            if (upgradeLicenses == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "upgradeLicenses");
            }
            this.upgradeLicenses = upgradeLicenses;
            return this;
        }
        public Builder upgradeLicenses(GetSddcUpgradeLicense... upgradeLicenses) {
            return upgradeLicenses(List.of(upgradeLicenses));
        }
        @CustomType.Setter
        public Builder vcenterFqdn(String vcenterFqdn) {
            if (vcenterFqdn == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vcenterFqdn");
            }
            this.vcenterFqdn = vcenterFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder vcenterInitialPassword(String vcenterInitialPassword) {
            if (vcenterInitialPassword == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vcenterInitialPassword");
            }
            this.vcenterInitialPassword = vcenterInitialPassword;
            return this;
        }
        @CustomType.Setter
        public Builder vcenterPrivateIpId(String vcenterPrivateIpId) {
            if (vcenterPrivateIpId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vcenterPrivateIpId");
            }
            this.vcenterPrivateIpId = vcenterPrivateIpId;
            return this;
        }
        @CustomType.Setter
        public Builder vcenterUsername(String vcenterUsername) {
            if (vcenterUsername == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vcenterUsername");
            }
            this.vcenterUsername = vcenterUsername;
            return this;
        }
        @CustomType.Setter
        public Builder vmotionVlanId(String vmotionVlanId) {
            if (vmotionVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vmotionVlanId");
            }
            this.vmotionVlanId = vmotionVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vmwareSoftwareVersion(String vmwareSoftwareVersion) {
            if (vmwareSoftwareVersion == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vmwareSoftwareVersion");
            }
            this.vmwareSoftwareVersion = vmwareSoftwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder vsanVlanId(String vsanVlanId) {
            if (vsanVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vsanVlanId");
            }
            this.vsanVlanId = vsanVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vsphereUpgradeGuide(String vsphereUpgradeGuide) {
            if (vsphereUpgradeGuide == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vsphereUpgradeGuide");
            }
            this.vsphereUpgradeGuide = vsphereUpgradeGuide;
            return this;
        }
        @CustomType.Setter
        public Builder vsphereUpgradeObjects(List<GetSddcVsphereUpgradeObject> vsphereUpgradeObjects) {
            if (vsphereUpgradeObjects == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vsphereUpgradeObjects");
            }
            this.vsphereUpgradeObjects = vsphereUpgradeObjects;
            return this;
        }
        public Builder vsphereUpgradeObjects(GetSddcVsphereUpgradeObject... vsphereUpgradeObjects) {
            return vsphereUpgradeObjects(List.of(vsphereUpgradeObjects));
        }
        @CustomType.Setter
        public Builder vsphereVlanId(String vsphereVlanId) {
            if (vsphereVlanId == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "vsphereVlanId");
            }
            this.vsphereVlanId = vsphereVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder workloadNetworkCidr(String workloadNetworkCidr) {
            if (workloadNetworkCidr == null) {
              throw new MissingRequiredPropertyException("GetSddcResult", "workloadNetworkCidr");
            }
            this.workloadNetworkCidr = workloadNetworkCidr;
            return this;
        }
        public GetSddcResult build() {
            final var _resultValue = new GetSddcResult();
            _resultValue.actualEsxiHostsCount = actualEsxiHostsCount;
            _resultValue.capacityReservationId = capacityReservationId;
            _resultValue.clustersCount = clustersCount;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeAvailabilityDomain = computeAvailabilityDomain;
            _resultValue.datastores = datastores;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.esxiHostsCount = esxiHostsCount;
            _resultValue.esxiSoftwareVersion = esxiSoftwareVersion;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hcxAction = hcxAction;
            _resultValue.hcxFqdn = hcxFqdn;
            _resultValue.hcxInitialPassword = hcxInitialPassword;
            _resultValue.hcxMode = hcxMode;
            _resultValue.hcxOnPremKey = hcxOnPremKey;
            _resultValue.hcxOnPremLicenses = hcxOnPremLicenses;
            _resultValue.hcxPrivateIpId = hcxPrivateIpId;
            _resultValue.hcxVlanId = hcxVlanId;
            _resultValue.id = id;
            _resultValue.initialConfigurations = initialConfigurations;
            _resultValue.initialHostOcpuCount = initialHostOcpuCount;
            _resultValue.initialHostShapeName = initialHostShapeName;
            _resultValue.initialSku = initialSku;
            _resultValue.instanceDisplayNamePrefix = instanceDisplayNamePrefix;
            _resultValue.isHcxEnabled = isHcxEnabled;
            _resultValue.isHcxEnterpriseEnabled = isHcxEnterpriseEnabled;
            _resultValue.isHcxPendingDowngrade = isHcxPendingDowngrade;
            _resultValue.isShieldedInstanceEnabled = isShieldedInstanceEnabled;
            _resultValue.isSingleHostSddc = isSingleHostSddc;
            _resultValue.nsxEdgeUplink1vlanId = nsxEdgeUplink1vlanId;
            _resultValue.nsxEdgeUplink2vlanId = nsxEdgeUplink2vlanId;
            _resultValue.nsxEdgeUplinkIpId = nsxEdgeUplinkIpId;
            _resultValue.nsxEdgeVtepVlanId = nsxEdgeVtepVlanId;
            _resultValue.nsxManagerFqdn = nsxManagerFqdn;
            _resultValue.nsxManagerInitialPassword = nsxManagerInitialPassword;
            _resultValue.nsxManagerPrivateIpId = nsxManagerPrivateIpId;
            _resultValue.nsxManagerUsername = nsxManagerUsername;
            _resultValue.nsxOverlaySegmentName = nsxOverlaySegmentName;
            _resultValue.nsxVtepVlanId = nsxVtepVlanId;
            _resultValue.provisioningSubnetId = provisioningSubnetId;
            _resultValue.provisioningVlanId = provisioningVlanId;
            _resultValue.refreshHcxLicenseStatus = refreshHcxLicenseStatus;
            _resultValue.replicationVlanId = replicationVlanId;
            _resultValue.reservingHcxOnPremiseLicenseKeys = reservingHcxOnPremiseLicenseKeys;
            _resultValue.sddcId = sddcId;
            _resultValue.sshAuthorizedKeys = sshAuthorizedKeys;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeHcxBillingCycleEnd = timeHcxBillingCycleEnd;
            _resultValue.timeHcxLicenseStatusUpdated = timeHcxLicenseStatusUpdated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.upgradeLicenses = upgradeLicenses;
            _resultValue.vcenterFqdn = vcenterFqdn;
            _resultValue.vcenterInitialPassword = vcenterInitialPassword;
            _resultValue.vcenterPrivateIpId = vcenterPrivateIpId;
            _resultValue.vcenterUsername = vcenterUsername;
            _resultValue.vmotionVlanId = vmotionVlanId;
            _resultValue.vmwareSoftwareVersion = vmwareSoftwareVersion;
            _resultValue.vsanVlanId = vsanVlanId;
            _resultValue.vsphereUpgradeGuide = vsphereUpgradeGuide;
            _resultValue.vsphereUpgradeObjects = vsphereUpgradeObjects;
            _resultValue.vsphereVlanId = vsphereVlanId;
            _resultValue.workloadNetworkCidr = workloadNetworkCidr;
            return _resultValue;
        }
    }
}
