// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Oda.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Oda.outputs.GetOdaInstanceRestrictedOperation;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOdaInstanceResult {
    /**
     * @return A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     * 
     */
    private @Nullable List<String> attachmentIds;
    /**
     * @return A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
     * 
     */
    private @Nullable List<String> attachmentTypes;
    /**
     * @return Identifier of the compartment that the instance belongs to.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return URL for the connector&#39;s endpoint.
     * 
     */
    private @Nullable String connectorUrl;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Description of the Digital Assistant instance.
     * 
     */
    private @Nullable String description;
    /**
     * @return User-defined name for the Digital Assistant instance. Avoid entering confidential information. You can change this value.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return Unique immutable identifier that was assigned when the instance was created.
     * 
     */
    private @Nullable String id;
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
     * 
     */
    private @Nullable String identityAppConsoleUrl;
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
     * 
     */
    private @Nullable String identityAppGuid;
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
     * 
     */
    private @Nullable String identityDomain;
    /**
     * @return A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
     * 
     */
    private @Nullable List<String> importedPackageIds;
    /**
     * @return A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
     * 
     */
    private @Nullable List<String> importedPackageNames;
    /**
     * @return Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
     * 
     */
    private @Nullable Boolean isRoleBasedAccess;
    /**
     * @return The current sub-state of the Digital Assistant instance.
     * 
     */
    private @Nullable String lifecycleSubState;
    private String odaInstanceId;
    /**
     * @return A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     * 
     */
    private @Nullable List<GetOdaInstanceRestrictedOperation> restrictedOperations;
    /**
     * @return Shape or size of the instance.
     * 
     */
    private @Nullable String shapeName;
    /**
     * @return The current state of the Digital Assistant instance.
     * 
     */
    private @Nullable String state;
    /**
     * @return A message that describes the current state in more detail. For example, actionable information about an instance that&#39;s in the `FAILED` state.
     * 
     */
    private @Nullable String stateMessage;
    /**
     * @return When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return URL for the Digital Assistant web application that&#39;s associated with the instance.
     * 
     */
    private @Nullable String webAppUrl;

    private GetOdaInstanceResult() {}
    /**
     * @return A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     * 
     */
    public List<String> attachmentIds() {
        return this.attachmentIds == null ? List.of() : this.attachmentIds;
    }
    /**
     * @return A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
     * 
     */
    public List<String> attachmentTypes() {
        return this.attachmentTypes == null ? List.of() : this.attachmentTypes;
    }
    /**
     * @return Identifier of the compartment that the instance belongs to.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return URL for the connector&#39;s endpoint.
     * 
     */
    public Optional<String> connectorUrl() {
        return Optional.ofNullable(this.connectorUrl);
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Description of the Digital Assistant instance.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return User-defined name for the Digital Assistant instance. Avoid entering confidential information. You can change this value.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return Unique immutable identifier that was assigned when the instance was created.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
     * 
     */
    public Optional<String> identityAppConsoleUrl() {
        return Optional.ofNullable(this.identityAppConsoleUrl);
    }
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
     * 
     */
    public Optional<String> identityAppGuid() {
        return Optional.ofNullable(this.identityAppGuid);
    }
    /**
     * @return If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
     * 
     */
    public Optional<String> identityDomain() {
        return Optional.ofNullable(this.identityDomain);
    }
    /**
     * @return A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
     * 
     */
    public List<String> importedPackageIds() {
        return this.importedPackageIds == null ? List.of() : this.importedPackageIds;
    }
    /**
     * @return A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
     * 
     */
    public List<String> importedPackageNames() {
        return this.importedPackageNames == null ? List.of() : this.importedPackageNames;
    }
    /**
     * @return Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
     * 
     */
    public Optional<Boolean> isRoleBasedAccess() {
        return Optional.ofNullable(this.isRoleBasedAccess);
    }
    /**
     * @return The current sub-state of the Digital Assistant instance.
     * 
     */
    public Optional<String> lifecycleSubState() {
        return Optional.ofNullable(this.lifecycleSubState);
    }
    public String odaInstanceId() {
        return this.odaInstanceId;
    }
    /**
     * @return A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     * 
     */
    public List<GetOdaInstanceRestrictedOperation> restrictedOperations() {
        return this.restrictedOperations == null ? List.of() : this.restrictedOperations;
    }
    /**
     * @return Shape or size of the instance.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    /**
     * @return The current state of the Digital Assistant instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A message that describes the current state in more detail. For example, actionable information about an instance that&#39;s in the `FAILED` state.
     * 
     */
    public Optional<String> stateMessage() {
        return Optional.ofNullable(this.stateMessage);
    }
    /**
     * @return When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return URL for the Digital Assistant web application that&#39;s associated with the instance.
     * 
     */
    public Optional<String> webAppUrl() {
        return Optional.ofNullable(this.webAppUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOdaInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> attachmentIds;
        private @Nullable List<String> attachmentTypes;
        private @Nullable String compartmentId;
        private @Nullable String connectorUrl;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String identityAppConsoleUrl;
        private @Nullable String identityAppGuid;
        private @Nullable String identityDomain;
        private @Nullable List<String> importedPackageIds;
        private @Nullable List<String> importedPackageNames;
        private @Nullable Boolean isRoleBasedAccess;
        private @Nullable String lifecycleSubState;
        private String odaInstanceId;
        private @Nullable List<GetOdaInstanceRestrictedOperation> restrictedOperations;
        private @Nullable String shapeName;
        private @Nullable String state;
        private @Nullable String stateMessage;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String webAppUrl;
        public Builder() {}
        public Builder(GetOdaInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachmentIds = defaults.attachmentIds;
    	      this.attachmentTypes = defaults.attachmentTypes;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectorUrl = defaults.connectorUrl;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.identityAppConsoleUrl = defaults.identityAppConsoleUrl;
    	      this.identityAppGuid = defaults.identityAppGuid;
    	      this.identityDomain = defaults.identityDomain;
    	      this.importedPackageIds = defaults.importedPackageIds;
    	      this.importedPackageNames = defaults.importedPackageNames;
    	      this.isRoleBasedAccess = defaults.isRoleBasedAccess;
    	      this.lifecycleSubState = defaults.lifecycleSubState;
    	      this.odaInstanceId = defaults.odaInstanceId;
    	      this.restrictedOperations = defaults.restrictedOperations;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.webAppUrl = defaults.webAppUrl;
        }

        @CustomType.Setter
        public Builder attachmentIds(@Nullable List<String> attachmentIds) {
            this.attachmentIds = attachmentIds;
            return this;
        }
        public Builder attachmentIds(String... attachmentIds) {
            return attachmentIds(List.of(attachmentIds));
        }
        @CustomType.Setter
        public Builder attachmentTypes(@Nullable List<String> attachmentTypes) {
            this.attachmentTypes = attachmentTypes;
            return this;
        }
        public Builder attachmentTypes(String... attachmentTypes) {
            return attachmentTypes(List.of(attachmentTypes));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectorUrl(@Nullable String connectorUrl) {
            this.connectorUrl = connectorUrl;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityAppConsoleUrl(@Nullable String identityAppConsoleUrl) {
            this.identityAppConsoleUrl = identityAppConsoleUrl;
            return this;
        }
        @CustomType.Setter
        public Builder identityAppGuid(@Nullable String identityAppGuid) {
            this.identityAppGuid = identityAppGuid;
            return this;
        }
        @CustomType.Setter
        public Builder identityDomain(@Nullable String identityDomain) {
            this.identityDomain = identityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder importedPackageIds(@Nullable List<String> importedPackageIds) {
            this.importedPackageIds = importedPackageIds;
            return this;
        }
        public Builder importedPackageIds(String... importedPackageIds) {
            return importedPackageIds(List.of(importedPackageIds));
        }
        @CustomType.Setter
        public Builder importedPackageNames(@Nullable List<String> importedPackageNames) {
            this.importedPackageNames = importedPackageNames;
            return this;
        }
        public Builder importedPackageNames(String... importedPackageNames) {
            return importedPackageNames(List.of(importedPackageNames));
        }
        @CustomType.Setter
        public Builder isRoleBasedAccess(@Nullable Boolean isRoleBasedAccess) {
            this.isRoleBasedAccess = isRoleBasedAccess;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleSubState(@Nullable String lifecycleSubState) {
            this.lifecycleSubState = lifecycleSubState;
            return this;
        }
        @CustomType.Setter
        public Builder odaInstanceId(String odaInstanceId) {
            this.odaInstanceId = Objects.requireNonNull(odaInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder restrictedOperations(@Nullable List<GetOdaInstanceRestrictedOperation> restrictedOperations) {
            this.restrictedOperations = restrictedOperations;
            return this;
        }
        public Builder restrictedOperations(GetOdaInstanceRestrictedOperation... restrictedOperations) {
            return restrictedOperations(List.of(restrictedOperations));
        }
        @CustomType.Setter
        public Builder shapeName(@Nullable String shapeName) {
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateMessage(@Nullable String stateMessage) {
            this.stateMessage = stateMessage;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder webAppUrl(@Nullable String webAppUrl) {
            this.webAppUrl = webAppUrl;
            return this;
        }
        public GetOdaInstanceResult build() {
            final var o = new GetOdaInstanceResult();
            o.attachmentIds = attachmentIds;
            o.attachmentTypes = attachmentTypes;
            o.compartmentId = compartmentId;
            o.connectorUrl = connectorUrl;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.identityAppConsoleUrl = identityAppConsoleUrl;
            o.identityAppGuid = identityAppGuid;
            o.identityDomain = identityDomain;
            o.importedPackageIds = importedPackageIds;
            o.importedPackageNames = importedPackageNames;
            o.isRoleBasedAccess = isRoleBasedAccess;
            o.lifecycleSubState = lifecycleSubState;
            o.odaInstanceId = odaInstanceId;
            o.restrictedOperations = restrictedOperations;
            o.shapeName = shapeName;
            o.state = state;
            o.stateMessage = stateMessage;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.webAppUrl = webAppUrl;
            return o;
        }
    }
}
