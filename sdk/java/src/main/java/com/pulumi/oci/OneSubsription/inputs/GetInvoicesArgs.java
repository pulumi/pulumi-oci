// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OneSubsription.inputs.GetInvoicesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInvoicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInvoicesArgs Empty = new GetInvoicesArgs();

    /**
     * AR Unique identifier for an invoice .
     * 
     */
    @Import(name="arCustomerTransactionId", required=true)
    private Output<String> arCustomerTransactionId;

    /**
     * @return AR Unique identifier for an invoice .
     * 
     */
    public Output<String> arCustomerTransactionId() {
        return this.arCustomerTransactionId;
    }

    /**
     * The OCID of the root compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the root compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetInvoicesFilterArgs>> filters;

    public Optional<Output<List<GetInvoicesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Initial date to filter Invoice data in SPM.
     * 
     */
    @Import(name="timeFrom")
    private @Nullable Output<String> timeFrom;

    /**
     * @return Initial date to filter Invoice data in SPM.
     * 
     */
    public Optional<Output<String>> timeFrom() {
        return Optional.ofNullable(this.timeFrom);
    }

    /**
     * Final date to filter Invoice data in SPM.
     * 
     */
    @Import(name="timeTo")
    private @Nullable Output<String> timeTo;

    /**
     * @return Final date to filter Invoice data in SPM.
     * 
     */
    public Optional<Output<String>> timeTo() {
        return Optional.ofNullable(this.timeTo);
    }

    private GetInvoicesArgs() {}

    private GetInvoicesArgs(GetInvoicesArgs $) {
        this.arCustomerTransactionId = $.arCustomerTransactionId;
        this.compartmentId = $.compartmentId;
        this.fields = $.fields;
        this.filters = $.filters;
        this.timeFrom = $.timeFrom;
        this.timeTo = $.timeTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInvoicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInvoicesArgs $;

        public Builder() {
            $ = new GetInvoicesArgs();
        }

        public Builder(GetInvoicesArgs defaults) {
            $ = new GetInvoicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arCustomerTransactionId AR Unique identifier for an invoice .
         * 
         * @return builder
         * 
         */
        public Builder arCustomerTransactionId(Output<String> arCustomerTransactionId) {
            $.arCustomerTransactionId = arCustomerTransactionId;
            return this;
        }

        /**
         * @param arCustomerTransactionId AR Unique identifier for an invoice .
         * 
         * @return builder
         * 
         */
        public Builder arCustomerTransactionId(String arCustomerTransactionId) {
            return arCustomerTransactionId(Output.of(arCustomerTransactionId));
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetInvoicesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetInvoicesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetInvoicesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param timeFrom Initial date to filter Invoice data in SPM.
         * 
         * @return builder
         * 
         */
        public Builder timeFrom(@Nullable Output<String> timeFrom) {
            $.timeFrom = timeFrom;
            return this;
        }

        /**
         * @param timeFrom Initial date to filter Invoice data in SPM.
         * 
         * @return builder
         * 
         */
        public Builder timeFrom(String timeFrom) {
            return timeFrom(Output.of(timeFrom));
        }

        /**
         * @param timeTo Final date to filter Invoice data in SPM.
         * 
         * @return builder
         * 
         */
        public Builder timeTo(@Nullable Output<String> timeTo) {
            $.timeTo = timeTo;
            return this;
        }

        /**
         * @param timeTo Final date to filter Invoice data in SPM.
         * 
         * @return builder
         * 
         */
        public Builder timeTo(String timeTo) {
            return timeTo(Output.of(timeTo));
        }

        public GetInvoicesArgs build() {
            if ($.arCustomerTransactionId == null) {
                throw new MissingRequiredPropertyException("GetInvoicesArgs", "arCustomerTransactionId");
            }
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetInvoicesArgs", "compartmentId");
            }
            return $;
        }
    }

}
