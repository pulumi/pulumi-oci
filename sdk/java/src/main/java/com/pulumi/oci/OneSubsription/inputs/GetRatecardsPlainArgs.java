// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OneSubsription.inputs.GetRatecardsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRatecardsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRatecardsPlainArgs Empty = new GetRatecardsPlainArgs();

    /**
     * The OCID of the root compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the root compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetRatecardsFilter> filters;

    public Optional<List<GetRatecardsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * This param is used to get the rate card(s) filterd by the partNumber
     * 
     */
    @Import(name="partNumber")
    private @Nullable String partNumber;

    /**
     * @return This param is used to get the rate card(s) filterd by the partNumber
     * 
     */
    public Optional<String> partNumber() {
        return Optional.ofNullable(this.partNumber);
    }

    /**
     * Line level Subscription Id
     * 
     */
    @Import(name="subscriptionId", required=true)
    private String subscriptionId;

    /**
     * @return Line level Subscription Id
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * This param is used to get the rate card(s) whose effective start date starts on or after a particular date
     * 
     */
    @Import(name="timeFrom")
    private @Nullable String timeFrom;

    /**
     * @return This param is used to get the rate card(s) whose effective start date starts on or after a particular date
     * 
     */
    public Optional<String> timeFrom() {
        return Optional.ofNullable(this.timeFrom);
    }

    /**
     * This param is used to get the rate card(s) whose effective end date ends on or before a particular date
     * 
     */
    @Import(name="timeTo")
    private @Nullable String timeTo;

    /**
     * @return This param is used to get the rate card(s) whose effective end date ends on or before a particular date
     * 
     */
    public Optional<String> timeTo() {
        return Optional.ofNullable(this.timeTo);
    }

    private GetRatecardsPlainArgs() {}

    private GetRatecardsPlainArgs(GetRatecardsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.partNumber = $.partNumber;
        this.subscriptionId = $.subscriptionId;
        this.timeFrom = $.timeFrom;
        this.timeTo = $.timeTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRatecardsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRatecardsPlainArgs $;

        public Builder() {
            $ = new GetRatecardsPlainArgs();
        }

        public Builder(GetRatecardsPlainArgs defaults) {
            $ = new GetRatecardsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetRatecardsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRatecardsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param partNumber This param is used to get the rate card(s) filterd by the partNumber
         * 
         * @return builder
         * 
         */
        public Builder partNumber(@Nullable String partNumber) {
            $.partNumber = partNumber;
            return this;
        }

        /**
         * @param subscriptionId Line level Subscription Id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param timeFrom This param is used to get the rate card(s) whose effective start date starts on or after a particular date
         * 
         * @return builder
         * 
         */
        public Builder timeFrom(@Nullable String timeFrom) {
            $.timeFrom = timeFrom;
            return this;
        }

        /**
         * @param timeTo This param is used to get the rate card(s) whose effective end date ends on or before a particular date
         * 
         * @return builder
         * 
         */
        public Builder timeTo(@Nullable String timeTo) {
            $.timeTo = timeTo;
            return this;
        }

        public GetRatecardsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetRatecardsPlainArgs", "compartmentId");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("GetRatecardsPlainArgs", "subscriptionId");
            }
            return $;
        }
    }

}
