// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubscribedServiceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubscribedServiceArgs Empty = new GetSubscribedServiceArgs();

    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The Subscribed Service Id
     * 
     */
    @Import(name="subscribedServiceId", required=true)
    private Output<String> subscribedServiceId;

    /**
     * @return The Subscribed Service Id
     * 
     */
    public Output<String> subscribedServiceId() {
        return this.subscribedServiceId;
    }

    private GetSubscribedServiceArgs() {}

    private GetSubscribedServiceArgs(GetSubscribedServiceArgs $) {
        this.fields = $.fields;
        this.subscribedServiceId = $.subscribedServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubscribedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubscribedServiceArgs $;

        public Builder() {
            $ = new GetSubscribedServiceArgs();
        }

        public Builder(GetSubscribedServiceArgs defaults) {
            $ = new GetSubscribedServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param subscribedServiceId The Subscribed Service Id
         * 
         * @return builder
         * 
         */
        public Builder subscribedServiceId(Output<String> subscribedServiceId) {
            $.subscribedServiceId = subscribedServiceId;
            return this;
        }

        /**
         * @param subscribedServiceId The Subscribed Service Id
         * 
         * @return builder
         * 
         */
        public Builder subscribedServiceId(String subscribedServiceId) {
            return subscribedServiceId(Output.of(subscribedServiceId));
        }

        public GetSubscribedServiceArgs build() {
            if ($.subscribedServiceId == null) {
                throw new MissingRequiredPropertyException("GetSubscribedServiceArgs", "subscribedServiceId");
            }
            return $;
        }
    }

}
