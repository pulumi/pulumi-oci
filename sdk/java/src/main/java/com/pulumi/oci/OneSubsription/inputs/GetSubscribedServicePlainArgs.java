// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubscribedServicePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubscribedServicePlainArgs Empty = new GetSubscribedServicePlainArgs();

    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
     * 
     */
    @Import(name="fields")
    private @Nullable List<String> fields;

    /**
     * @return Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
     * 
     */
    public Optional<List<String>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The Subscribed Service Id
     * 
     */
    @Import(name="subscribedServiceId", required=true)
    private String subscribedServiceId;

    /**
     * @return The Subscribed Service Id
     * 
     */
    public String subscribedServiceId() {
        return this.subscribedServiceId;
    }

    private GetSubscribedServicePlainArgs() {}

    private GetSubscribedServicePlainArgs(GetSubscribedServicePlainArgs $) {
        this.fields = $.fields;
        this.subscribedServiceId = $.subscribedServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubscribedServicePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubscribedServicePlainArgs $;

        public Builder() {
            $ = new GetSubscribedServicePlainArgs();
        }

        public Builder(GetSubscribedServicePlainArgs defaults) {
            $ = new GetSubscribedServicePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable List<String> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter used to control what fields to return should be a query string parameter called &#34;fields&#34; of type array, and usecollectionFormat
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param subscribedServiceId The Subscribed Service Id
         * 
         * @return builder
         * 
         */
        public Builder subscribedServiceId(String subscribedServiceId) {
            $.subscribedServiceId = subscribedServiceId;
            return this;
        }

        public GetSubscribedServicePlainArgs build() {
            $.subscribedServiceId = Objects.requireNonNull($.subscribedServiceId, "expected parameter 'subscribedServiceId' to be non-null");
            return $;
        }
    }

}
