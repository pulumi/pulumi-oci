// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OneSubsription.inputs.GetSubscribedServicesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubscribedServicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubscribedServicesArgs Empty = new GetSubscribedServicesArgs();

    /**
     * The OCID of the root compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the root compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSubscribedServicesFilterArgs>> filters;

    public Optional<Output<List<GetSubscribedServicesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
     * 
     */
    @Import(name="orderLineId")
    private @Nullable Output<String> orderLineId;

    /**
     * @return Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
     * 
     */
    public Optional<Output<String>> orderLineId() {
        return Optional.ofNullable(this.orderLineId);
    }

    /**
     * This param is used to filter subscribed services based on its status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return This param is used to filter subscribed services based on its status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Line level Subscription Id
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return Line level Subscription Id
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    private GetSubscribedServicesArgs() {}

    private GetSubscribedServicesArgs(GetSubscribedServicesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.orderLineId = $.orderLineId;
        this.status = $.status;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubscribedServicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubscribedServicesArgs $;

        public Builder() {
            $ = new GetSubscribedServicesArgs();
        }

        public Builder(GetSubscribedServicesArgs defaults) {
            $ = new GetSubscribedServicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetSubscribedServicesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSubscribedServicesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSubscribedServicesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param orderLineId Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
         * 
         * @return builder
         * 
         */
        public Builder orderLineId(@Nullable Output<String> orderLineId) {
            $.orderLineId = orderLineId;
            return this;
        }

        /**
         * @param orderLineId Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
         * 
         * @return builder
         * 
         */
        public Builder orderLineId(String orderLineId) {
            return orderLineId(Output.of(orderLineId));
        }

        /**
         * @param status This param is used to filter subscribed services based on its status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status This param is used to filter subscribed services based on its status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subscriptionId Line level Subscription Id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Line level Subscription Id
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public GetSubscribedServicesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSubscribedServicesArgs", "compartmentId");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("GetSubscribedServicesArgs", "subscriptionId");
            }
            return $;
        }
    }

}
