// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OneSubsription.outputs.GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage {
    /**
     * @return Sum of Computed Line Amount rounded
     * 
     */
    private String cost;
    /**
     * @return Sum of Computed Line Amount unrounded
     * 
     */
    private String costUnrounded;
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    private String dataCenter;
    /**
     * @return Net Unit Price for the product in consideration.
     * 
     */
    private String netUnitPrice;
    /**
     * @return Product description
     * 
     */
    private List<GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct> products;
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    private String quantity;
    /**
     * @return Metered Service date , expressed in RFC 3339 timestamp format.
     * 
     */
    private String timeMeteredOn;
    /**
     * @return Usage compute type in SPM.
     * 
     */
    private String type;

    private GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage() {}
    /**
     * @return Sum of Computed Line Amount rounded
     * 
     */
    public String cost() {
        return this.cost;
    }
    /**
     * @return Sum of Computed Line Amount unrounded
     * 
     */
    public String costUnrounded() {
        return this.costUnrounded;
    }
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    public String dataCenter() {
        return this.dataCenter;
    }
    /**
     * @return Net Unit Price for the product in consideration.
     * 
     */
    public String netUnitPrice() {
        return this.netUnitPrice;
    }
    /**
     * @return Product description
     * 
     */
    public List<GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct> products() {
        return this.products;
    }
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    public String quantity() {
        return this.quantity;
    }
    /**
     * @return Metered Service date , expressed in RFC 3339 timestamp format.
     * 
     */
    public String timeMeteredOn() {
        return this.timeMeteredOn;
    }
    /**
     * @return Usage compute type in SPM.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cost;
        private String costUnrounded;
        private String dataCenter;
        private String netUnitPrice;
        private List<GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct> products;
        private String quantity;
        private String timeMeteredOn;
        private String type;
        public Builder() {}
        public Builder(GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cost = defaults.cost;
    	      this.costUnrounded = defaults.costUnrounded;
    	      this.dataCenter = defaults.dataCenter;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.products = defaults.products;
    	      this.quantity = defaults.quantity;
    	      this.timeMeteredOn = defaults.timeMeteredOn;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cost(String cost) {
            if (cost == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "cost");
            }
            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder costUnrounded(String costUnrounded) {
            if (costUnrounded == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "costUnrounded");
            }
            this.costUnrounded = costUnrounded;
            return this;
        }
        @CustomType.Setter
        public Builder dataCenter(String dataCenter) {
            if (dataCenter == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "dataCenter");
            }
            this.dataCenter = dataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder netUnitPrice(String netUnitPrice) {
            if (netUnitPrice == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "netUnitPrice");
            }
            this.netUnitPrice = netUnitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder products(List<GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder quantity(String quantity) {
            if (quantity == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "quantity");
            }
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder timeMeteredOn(String timeMeteredOn) {
            if (timeMeteredOn == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "timeMeteredOn");
            }
            this.timeMeteredOn = timeMeteredOn;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage", "type");
            }
            this.type = type;
            return this;
        }
        public GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage build() {
            final var _resultValue = new GetAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage();
            _resultValue.cost = cost;
            _resultValue.costUnrounded = costUnrounded;
            _resultValue.dataCenter = dataCenter;
            _resultValue.netUnitPrice = netUnitPrice;
            _resultValue.products = products;
            _resultValue.quantity = quantity;
            _resultValue.timeMeteredOn = timeMeteredOn;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
