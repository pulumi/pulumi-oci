// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCommitmentsCommitment {
    /**
     * @return Commitment available amount
     * 
     */
    private @Nullable String availableAmount;
    /**
     * @return Funded Allocation line value example: 12000.00
     * 
     */
    private @Nullable String fundedAllocationValue;
    /**
     * @return SPM internal Commitment ID
     * 
     */
    private @Nullable String id;
    /**
     * @return Commitment quantity
     * 
     */
    private @Nullable String quantity;
    /**
     * @return This param is used to get the commitments for a particular subscribed service
     * 
     */
    private @Nullable String subscribedServiceId;
    /**
     * @return Commitment end date
     * 
     */
    private @Nullable String timeEnd;
    /**
     * @return Commitment start date
     * 
     */
    private @Nullable String timeStart;
    /**
     * @return Commitment used amount
     * 
     */
    private @Nullable String usedAmount;

    private GetCommitmentsCommitment() {}
    /**
     * @return Commitment available amount
     * 
     */
    public Optional<String> availableAmount() {
        return Optional.ofNullable(this.availableAmount);
    }
    /**
     * @return Funded Allocation line value example: 12000.00
     * 
     */
    public Optional<String> fundedAllocationValue() {
        return Optional.ofNullable(this.fundedAllocationValue);
    }
    /**
     * @return SPM internal Commitment ID
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Commitment quantity
     * 
     */
    public Optional<String> quantity() {
        return Optional.ofNullable(this.quantity);
    }
    /**
     * @return This param is used to get the commitments for a particular subscribed service
     * 
     */
    public Optional<String> subscribedServiceId() {
        return Optional.ofNullable(this.subscribedServiceId);
    }
    /**
     * @return Commitment end date
     * 
     */
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }
    /**
     * @return Commitment start date
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }
    /**
     * @return Commitment used amount
     * 
     */
    public Optional<String> usedAmount() {
        return Optional.ofNullable(this.usedAmount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommitmentsCommitment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availableAmount;
        private @Nullable String fundedAllocationValue;
        private @Nullable String id;
        private @Nullable String quantity;
        private @Nullable String subscribedServiceId;
        private @Nullable String timeEnd;
        private @Nullable String timeStart;
        private @Nullable String usedAmount;
        public Builder() {}
        public Builder(GetCommitmentsCommitment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableAmount = defaults.availableAmount;
    	      this.fundedAllocationValue = defaults.fundedAllocationValue;
    	      this.id = defaults.id;
    	      this.quantity = defaults.quantity;
    	      this.subscribedServiceId = defaults.subscribedServiceId;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.usedAmount = defaults.usedAmount;
        }

        @CustomType.Setter
        public Builder availableAmount(@Nullable String availableAmount) {
            this.availableAmount = availableAmount;
            return this;
        }
        @CustomType.Setter
        public Builder fundedAllocationValue(@Nullable String fundedAllocationValue) {
            this.fundedAllocationValue = fundedAllocationValue;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder quantity(@Nullable String quantity) {
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder subscribedServiceId(@Nullable String subscribedServiceId) {
            this.subscribedServiceId = subscribedServiceId;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(@Nullable String timeEnd) {
            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder usedAmount(@Nullable String usedAmount) {
            this.usedAmount = usedAmount;
            return this;
        }
        public GetCommitmentsCommitment build() {
            final var o = new GetCommitmentsCommitment();
            o.availableAmount = availableAmount;
            o.fundedAllocationValue = fundedAllocationValue;
            o.id = id;
            o.quantity = quantity;
            o.subscribedServiceId = subscribedServiceId;
            o.timeEnd = timeEnd;
            o.timeStart = timeStart;
            o.usedAmount = usedAmount;
            return o;
        }
    }
}
