// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OneSubsription.outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct;
import com.pulumi.oci.OneSubsription.outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvoiceLineComputedUsagesInvoicelineComputedUsage {
    /**
     * @return Sum of Usage/Service Billing Line net Amount
     * 
     */
    private Double cost;
    /**
     * @return Computed Line Amount rounded.
     * 
     */
    private Double costRounded;
    /**
     * @return Net Unit Price for the product in consideration, price actual.
     * 
     */
    private Double netUnitPrice;
    /**
     * @return Product description
     * 
     */
    private List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct> parentProducts;
    /**
     * @return Product description
     * 
     */
    private List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct> products;
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    private Double quantity;
    /**
     * @return Metered Service date.
     * 
     */
    private String timeMeteredOn;
    /**
     * @return Usage compute type in SPM.
     * 
     */
    private String type;

    private GetInvoiceLineComputedUsagesInvoicelineComputedUsage() {}
    /**
     * @return Sum of Usage/Service Billing Line net Amount
     * 
     */
    public Double cost() {
        return this.cost;
    }
    /**
     * @return Computed Line Amount rounded.
     * 
     */
    public Double costRounded() {
        return this.costRounded;
    }
    /**
     * @return Net Unit Price for the product in consideration, price actual.
     * 
     */
    public Double netUnitPrice() {
        return this.netUnitPrice;
    }
    /**
     * @return Product description
     * 
     */
    public List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct> parentProducts() {
        return this.parentProducts;
    }
    /**
     * @return Product description
     * 
     */
    public List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct> products() {
        return this.products;
    }
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    public Double quantity() {
        return this.quantity;
    }
    /**
     * @return Metered Service date.
     * 
     */
    public String timeMeteredOn() {
        return this.timeMeteredOn;
    }
    /**
     * @return Usage compute type in SPM.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoiceLineComputedUsagesInvoicelineComputedUsage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double cost;
        private Double costRounded;
        private Double netUnitPrice;
        private List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct> parentProducts;
        private List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct> products;
        private Double quantity;
        private String timeMeteredOn;
        private String type;
        public Builder() {}
        public Builder(GetInvoiceLineComputedUsagesInvoicelineComputedUsage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cost = defaults.cost;
    	      this.costRounded = defaults.costRounded;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.parentProducts = defaults.parentProducts;
    	      this.products = defaults.products;
    	      this.quantity = defaults.quantity;
    	      this.timeMeteredOn = defaults.timeMeteredOn;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cost(Double cost) {
            if (cost == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "cost");
            }
            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder costRounded(Double costRounded) {
            if (costRounded == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "costRounded");
            }
            this.costRounded = costRounded;
            return this;
        }
        @CustomType.Setter
        public Builder netUnitPrice(Double netUnitPrice) {
            if (netUnitPrice == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "netUnitPrice");
            }
            this.netUnitPrice = netUnitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder parentProducts(List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct> parentProducts) {
            if (parentProducts == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "parentProducts");
            }
            this.parentProducts = parentProducts;
            return this;
        }
        public Builder parentProducts(GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct... parentProducts) {
            return parentProducts(List.of(parentProducts));
        }
        @CustomType.Setter
        public Builder products(List<GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(GetInvoiceLineComputedUsagesInvoicelineComputedUsageProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder quantity(Double quantity) {
            if (quantity == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "quantity");
            }
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder timeMeteredOn(String timeMeteredOn) {
            if (timeMeteredOn == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "timeMeteredOn");
            }
            this.timeMeteredOn = timeMeteredOn;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLineComputedUsagesInvoicelineComputedUsage", "type");
            }
            this.type = type;
            return this;
        }
        public GetInvoiceLineComputedUsagesInvoicelineComputedUsage build() {
            final var _resultValue = new GetInvoiceLineComputedUsagesInvoicelineComputedUsage();
            _resultValue.cost = cost;
            _resultValue.costRounded = costRounded;
            _resultValue.netUnitPrice = netUnitPrice;
            _resultValue.parentProducts = parentProducts;
            _resultValue.products = products;
            _resultValue.quantity = quantity;
            _resultValue.timeMeteredOn = timeMeteredOn;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
