// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OneSubsription.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OneSubsription.outputs.GetSubscribedServicesFilter;
import com.pulumi.oci.OneSubsription.outputs.GetSubscribedServicesSubscribedService;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscribedServicesResult {
    private String compartmentId;
    private @Nullable List<GetSubscribedServicesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Sales Order Line Id associated to the subscribed service
     * 
     */
    private @Nullable String orderLineId;
    /**
     * @return Subscribed service status
     * 
     */
    private @Nullable String status;
    /**
     * @return The list of subscribed_services.
     * 
     */
    private @Nullable List<GetSubscribedServicesSubscribedService> subscribedServices;
    /**
     * @return Subscription ID associated to the subscribed service
     * 
     */
    private String subscriptionId;

    private GetSubscribedServicesResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetSubscribedServicesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Sales Order Line Id associated to the subscribed service
     * 
     */
    public Optional<String> orderLineId() {
        return Optional.ofNullable(this.orderLineId);
    }
    /**
     * @return Subscribed service status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The list of subscribed_services.
     * 
     */
    public List<GetSubscribedServicesSubscribedService> subscribedServices() {
        return this.subscribedServices == null ? List.of() : this.subscribedServices;
    }
    /**
     * @return Subscription ID associated to the subscribed service
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscribedServicesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetSubscribedServicesFilter> filters;
        private @Nullable String id;
        private @Nullable String orderLineId;
        private @Nullable String status;
        private @Nullable List<GetSubscribedServicesSubscribedService> subscribedServices;
        private String subscriptionId;
        public Builder() {}
        public Builder(GetSubscribedServicesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.orderLineId = defaults.orderLineId;
    	      this.status = defaults.status;
    	      this.subscribedServices = defaults.subscribedServices;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSubscribedServicesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubscribedServicesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder orderLineId(@Nullable String orderLineId) {
            this.orderLineId = orderLineId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subscribedServices(@Nullable List<GetSubscribedServicesSubscribedService> subscribedServices) {
            this.subscribedServices = subscribedServices;
            return this;
        }
        public Builder subscribedServices(GetSubscribedServicesSubscribedService... subscribedServices) {
            return subscribedServices(List.of(subscribedServices));
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        public GetSubscribedServicesResult build() {
            final var o = new GetSubscribedServicesResult();
            o.compartmentId = compartmentId;
            o.filters = filters;
            o.id = id;
            o.orderLineId = orderLineId;
            o.status = status;
            o.subscribedServices = subscribedServices;
            o.subscriptionId = subscriptionId;
            return o;
        }
    }
}
