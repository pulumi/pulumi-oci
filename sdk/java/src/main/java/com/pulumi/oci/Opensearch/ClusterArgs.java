// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opensearch;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The OCID of the compartment to create the cluster in.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to create the cluster in.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The number of data nodes to configure for the cluster.
     * 
     */
    @Import(name="dataNodeCount", required=true)
    private Output<Integer> dataNodeCount;

    /**
     * @return The number of data nodes to configure for the cluster.
     * 
     */
    public Output<Integer> dataNodeCount() {
        return this.dataNodeCount;
    }

    /**
     * The bare metal shape for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostBareMetalShape")
    private @Nullable Output<String> dataNodeHostBareMetalShape;

    /**
     * @return The bare metal shape for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<String>> dataNodeHostBareMetalShape() {
        return Optional.ofNullable(this.dataNodeHostBareMetalShape);
    }

    /**
     * The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostMemoryGb", required=true)
    private Output<Integer> dataNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    public Output<Integer> dataNodeHostMemoryGb() {
        return this.dataNodeHostMemoryGb;
    }

    /**
     * The number of OCPUs to configure for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostOcpuCount", required=true)
    private Output<Integer> dataNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluster&#39;s data nodes.
     * 
     */
    public Output<Integer> dataNodeHostOcpuCount() {
        return this.dataNodeHostOcpuCount;
    }

    /**
     * TThe instance type for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostType", required=true)
    private Output<String> dataNodeHostType;

    /**
     * @return TThe instance type for the cluster&#39;s data nodes.
     * 
     */
    public Output<String> dataNodeHostType() {
        return this.dataNodeHostType;
    }

    /**
     * The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeStorageGb", required=true)
    private Output<Integer> dataNodeStorageGb;

    /**
     * @return The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    public Output<Integer> dataNodeStorageGb() {
        return this.dataNodeStorageGb;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) The name of the cluster. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The number of master nodes to configure for the cluster.
     * 
     */
    @Import(name="masterNodeCount", required=true)
    private Output<Integer> masterNodeCount;

    /**
     * @return The number of master nodes to configure for the cluster.
     * 
     */
    public Output<Integer> masterNodeCount() {
        return this.masterNodeCount;
    }

    /**
     * The bare metal shape for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostBareMetalShape")
    private @Nullable Output<String> masterNodeHostBareMetalShape;

    /**
     * @return The bare metal shape for the cluster&#39;s master nodes.
     * 
     */
    public Optional<Output<String>> masterNodeHostBareMetalShape() {
        return Optional.ofNullable(this.masterNodeHostBareMetalShape);
    }

    /**
     * The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostMemoryGb", required=true)
    private Output<Integer> masterNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
     * 
     */
    public Output<Integer> masterNodeHostMemoryGb() {
        return this.masterNodeHostMemoryGb;
    }

    /**
     * The number of OCPUs to configure for the cluser&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostOcpuCount", required=true)
    private Output<Integer> masterNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluser&#39;s master nodes.
     * 
     */
    public Output<Integer> masterNodeHostOcpuCount() {
        return this.masterNodeHostOcpuCount;
    }

    /**
     * The instance type for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostType", required=true)
    private Output<String> masterNodeHostType;

    /**
     * @return The instance type for the cluster&#39;s master nodes.
     * 
     */
    public Output<String> masterNodeHostType() {
        return this.masterNodeHostType;
    }

    /**
     * The number of OpenSearch Dashboard nodes to configure for the cluster.
     * 
     */
    @Import(name="opendashboardNodeCount", required=true)
    private Output<Integer> opendashboardNodeCount;

    /**
     * @return The number of OpenSearch Dashboard nodes to configure for the cluster.
     * 
     */
    public Output<Integer> opendashboardNodeCount() {
        return this.opendashboardNodeCount;
    }

    /**
     * The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    @Import(name="opendashboardNodeHostMemoryGb", required=true)
    private Output<Integer> opendashboardNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    public Output<Integer> opendashboardNodeHostMemoryGb() {
        return this.opendashboardNodeHostMemoryGb;
    }

    /**
     * The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    @Import(name="opendashboardNodeHostOcpuCount", required=true)
    private Output<Integer> opendashboardNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    public Output<Integer> opendashboardNodeHostOcpuCount() {
        return this.opendashboardNodeHostOcpuCount;
    }

    /**
     * (Updatable) The version of the software the cluster is running.
     * 
     */
    @Import(name="softwareVersion", required=true)
    private Output<String> softwareVersion;

    /**
     * @return (Updatable) The version of the software the cluster is running.
     * 
     */
    public Output<String> softwareVersion() {
        return this.softwareVersion;
    }

    /**
     * The OCID for the compartment where the cluster&#39;s subnet is located.
     * 
     */
    @Import(name="subnetCompartmentId", required=true)
    private Output<String> subnetCompartmentId;

    /**
     * @return The OCID for the compartment where the cluster&#39;s subnet is located.
     * 
     */
    public Output<String> subnetCompartmentId() {
        return this.subnetCompartmentId;
    }

    /**
     * The OCID of the cluster&#39;s subnet.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The OCID of the cluster&#39;s subnet.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The OCID for the compartment where the cluster&#39;s VCN is located.
     * 
     */
    @Import(name="vcnCompartmentId", required=true)
    private Output<String> vcnCompartmentId;

    /**
     * @return The OCID for the compartment where the cluster&#39;s VCN is located.
     * 
     */
    public Output<String> vcnCompartmentId() {
        return this.vcnCompartmentId;
    }

    /**
     * The OCID of the cluster&#39;s VCN.
     * 
     */
    @Import(name="vcnId", required=true)
    private Output<String> vcnId;

    /**
     * @return The OCID of the cluster&#39;s VCN.
     * 
     */
    public Output<String> vcnId() {
        return this.vcnId;
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.compartmentId = $.compartmentId;
        this.dataNodeCount = $.dataNodeCount;
        this.dataNodeHostBareMetalShape = $.dataNodeHostBareMetalShape;
        this.dataNodeHostMemoryGb = $.dataNodeHostMemoryGb;
        this.dataNodeHostOcpuCount = $.dataNodeHostOcpuCount;
        this.dataNodeHostType = $.dataNodeHostType;
        this.dataNodeStorageGb = $.dataNodeStorageGb;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.masterNodeCount = $.masterNodeCount;
        this.masterNodeHostBareMetalShape = $.masterNodeHostBareMetalShape;
        this.masterNodeHostMemoryGb = $.masterNodeHostMemoryGb;
        this.masterNodeHostOcpuCount = $.masterNodeHostOcpuCount;
        this.masterNodeHostType = $.masterNodeHostType;
        this.opendashboardNodeCount = $.opendashboardNodeCount;
        this.opendashboardNodeHostMemoryGb = $.opendashboardNodeHostMemoryGb;
        this.opendashboardNodeHostOcpuCount = $.opendashboardNodeHostOcpuCount;
        this.softwareVersion = $.softwareVersion;
        this.subnetCompartmentId = $.subnetCompartmentId;
        this.subnetId = $.subnetId;
        this.systemTags = $.systemTags;
        this.vcnCompartmentId = $.vcnCompartmentId;
        this.vcnId = $.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment to create the cluster in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to create the cluster in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dataNodeCount The number of data nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeCount(Output<Integer> dataNodeCount) {
            $.dataNodeCount = dataNodeCount;
            return this;
        }

        /**
         * @param dataNodeCount The number of data nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeCount(Integer dataNodeCount) {
            return dataNodeCount(Output.of(dataNodeCount));
        }

        /**
         * @param dataNodeHostBareMetalShape The bare metal shape for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostBareMetalShape(@Nullable Output<String> dataNodeHostBareMetalShape) {
            $.dataNodeHostBareMetalShape = dataNodeHostBareMetalShape;
            return this;
        }

        /**
         * @param dataNodeHostBareMetalShape The bare metal shape for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostBareMetalShape(String dataNodeHostBareMetalShape) {
            return dataNodeHostBareMetalShape(Output.of(dataNodeHostBareMetalShape));
        }

        /**
         * @param dataNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostMemoryGb(Output<Integer> dataNodeHostMemoryGb) {
            $.dataNodeHostMemoryGb = dataNodeHostMemoryGb;
            return this;
        }

        /**
         * @param dataNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostMemoryGb(Integer dataNodeHostMemoryGb) {
            return dataNodeHostMemoryGb(Output.of(dataNodeHostMemoryGb));
        }

        /**
         * @param dataNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostOcpuCount(Output<Integer> dataNodeHostOcpuCount) {
            $.dataNodeHostOcpuCount = dataNodeHostOcpuCount;
            return this;
        }

        /**
         * @param dataNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostOcpuCount(Integer dataNodeHostOcpuCount) {
            return dataNodeHostOcpuCount(Output.of(dataNodeHostOcpuCount));
        }

        /**
         * @param dataNodeHostType TThe instance type for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostType(Output<String> dataNodeHostType) {
            $.dataNodeHostType = dataNodeHostType;
            return this;
        }

        /**
         * @param dataNodeHostType TThe instance type for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostType(String dataNodeHostType) {
            return dataNodeHostType(Output.of(dataNodeHostType));
        }

        /**
         * @param dataNodeStorageGb The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeStorageGb(Output<Integer> dataNodeStorageGb) {
            $.dataNodeStorageGb = dataNodeStorageGb;
            return this;
        }

        /**
         * @param dataNodeStorageGb The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeStorageGb(Integer dataNodeStorageGb) {
            return dataNodeStorageGb(Output.of(dataNodeStorageGb));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) The name of the cluster. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The name of the cluster. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param masterNodeCount The number of master nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeCount(Output<Integer> masterNodeCount) {
            $.masterNodeCount = masterNodeCount;
            return this;
        }

        /**
         * @param masterNodeCount The number of master nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeCount(Integer masterNodeCount) {
            return masterNodeCount(Output.of(masterNodeCount));
        }

        /**
         * @param masterNodeHostBareMetalShape The bare metal shape for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostBareMetalShape(@Nullable Output<String> masterNodeHostBareMetalShape) {
            $.masterNodeHostBareMetalShape = masterNodeHostBareMetalShape;
            return this;
        }

        /**
         * @param masterNodeHostBareMetalShape The bare metal shape for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostBareMetalShape(String masterNodeHostBareMetalShape) {
            return masterNodeHostBareMetalShape(Output.of(masterNodeHostBareMetalShape));
        }

        /**
         * @param masterNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostMemoryGb(Output<Integer> masterNodeHostMemoryGb) {
            $.masterNodeHostMemoryGb = masterNodeHostMemoryGb;
            return this;
        }

        /**
         * @param masterNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostMemoryGb(Integer masterNodeHostMemoryGb) {
            return masterNodeHostMemoryGb(Output.of(masterNodeHostMemoryGb));
        }

        /**
         * @param masterNodeHostOcpuCount The number of OCPUs to configure for the cluser&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostOcpuCount(Output<Integer> masterNodeHostOcpuCount) {
            $.masterNodeHostOcpuCount = masterNodeHostOcpuCount;
            return this;
        }

        /**
         * @param masterNodeHostOcpuCount The number of OCPUs to configure for the cluser&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostOcpuCount(Integer masterNodeHostOcpuCount) {
            return masterNodeHostOcpuCount(Output.of(masterNodeHostOcpuCount));
        }

        /**
         * @param masterNodeHostType The instance type for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostType(Output<String> masterNodeHostType) {
            $.masterNodeHostType = masterNodeHostType;
            return this;
        }

        /**
         * @param masterNodeHostType The instance type for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostType(String masterNodeHostType) {
            return masterNodeHostType(Output.of(masterNodeHostType));
        }

        /**
         * @param opendashboardNodeCount The number of OpenSearch Dashboard nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeCount(Output<Integer> opendashboardNodeCount) {
            $.opendashboardNodeCount = opendashboardNodeCount;
            return this;
        }

        /**
         * @param opendashboardNodeCount The number of OpenSearch Dashboard nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeCount(Integer opendashboardNodeCount) {
            return opendashboardNodeCount(Output.of(opendashboardNodeCount));
        }

        /**
         * @param opendashboardNodeHostMemoryGb The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostMemoryGb(Output<Integer> opendashboardNodeHostMemoryGb) {
            $.opendashboardNodeHostMemoryGb = opendashboardNodeHostMemoryGb;
            return this;
        }

        /**
         * @param opendashboardNodeHostMemoryGb The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostMemoryGb(Integer opendashboardNodeHostMemoryGb) {
            return opendashboardNodeHostMemoryGb(Output.of(opendashboardNodeHostMemoryGb));
        }

        /**
         * @param opendashboardNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostOcpuCount(Output<Integer> opendashboardNodeHostOcpuCount) {
            $.opendashboardNodeHostOcpuCount = opendashboardNodeHostOcpuCount;
            return this;
        }

        /**
         * @param opendashboardNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostOcpuCount(Integer opendashboardNodeHostOcpuCount) {
            return opendashboardNodeHostOcpuCount(Output.of(opendashboardNodeHostOcpuCount));
        }

        /**
         * @param softwareVersion (Updatable) The version of the software the cluster is running.
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(Output<String> softwareVersion) {
            $.softwareVersion = softwareVersion;
            return this;
        }

        /**
         * @param softwareVersion (Updatable) The version of the software the cluster is running.
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(String softwareVersion) {
            return softwareVersion(Output.of(softwareVersion));
        }

        /**
         * @param subnetCompartmentId The OCID for the compartment where the cluster&#39;s subnet is located.
         * 
         * @return builder
         * 
         */
        public Builder subnetCompartmentId(Output<String> subnetCompartmentId) {
            $.subnetCompartmentId = subnetCompartmentId;
            return this;
        }

        /**
         * @param subnetCompartmentId The OCID for the compartment where the cluster&#39;s subnet is located.
         * 
         * @return builder
         * 
         */
        public Builder subnetCompartmentId(String subnetCompartmentId) {
            return subnetCompartmentId(Output.of(subnetCompartmentId));
        }

        /**
         * @param subnetId The OCID of the cluster&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the cluster&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param vcnCompartmentId The OCID for the compartment where the cluster&#39;s VCN is located.
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(Output<String> vcnCompartmentId) {
            $.vcnCompartmentId = vcnCompartmentId;
            return this;
        }

        /**
         * @param vcnCompartmentId The OCID for the compartment where the cluster&#39;s VCN is located.
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(String vcnCompartmentId) {
            return vcnCompartmentId(Output.of(vcnCompartmentId));
        }

        /**
         * @param vcnId The OCID of the cluster&#39;s VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(Output<String> vcnId) {
            $.vcnId = vcnId;
            return this;
        }

        /**
         * @param vcnId The OCID of the cluster&#39;s VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(String vcnId) {
            return vcnId(Output.of(vcnId));
        }

        public ClusterArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.dataNodeCount = Objects.requireNonNull($.dataNodeCount, "expected parameter 'dataNodeCount' to be non-null");
            $.dataNodeHostMemoryGb = Objects.requireNonNull($.dataNodeHostMemoryGb, "expected parameter 'dataNodeHostMemoryGb' to be non-null");
            $.dataNodeHostOcpuCount = Objects.requireNonNull($.dataNodeHostOcpuCount, "expected parameter 'dataNodeHostOcpuCount' to be non-null");
            $.dataNodeHostType = Objects.requireNonNull($.dataNodeHostType, "expected parameter 'dataNodeHostType' to be non-null");
            $.dataNodeStorageGb = Objects.requireNonNull($.dataNodeStorageGb, "expected parameter 'dataNodeStorageGb' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.masterNodeCount = Objects.requireNonNull($.masterNodeCount, "expected parameter 'masterNodeCount' to be non-null");
            $.masterNodeHostMemoryGb = Objects.requireNonNull($.masterNodeHostMemoryGb, "expected parameter 'masterNodeHostMemoryGb' to be non-null");
            $.masterNodeHostOcpuCount = Objects.requireNonNull($.masterNodeHostOcpuCount, "expected parameter 'masterNodeHostOcpuCount' to be non-null");
            $.masterNodeHostType = Objects.requireNonNull($.masterNodeHostType, "expected parameter 'masterNodeHostType' to be non-null");
            $.opendashboardNodeCount = Objects.requireNonNull($.opendashboardNodeCount, "expected parameter 'opendashboardNodeCount' to be non-null");
            $.opendashboardNodeHostMemoryGb = Objects.requireNonNull($.opendashboardNodeHostMemoryGb, "expected parameter 'opendashboardNodeHostMemoryGb' to be non-null");
            $.opendashboardNodeHostOcpuCount = Objects.requireNonNull($.opendashboardNodeHostOcpuCount, "expected parameter 'opendashboardNodeHostOcpuCount' to be non-null");
            $.softwareVersion = Objects.requireNonNull($.softwareVersion, "expected parameter 'softwareVersion' to be non-null");
            $.subnetCompartmentId = Objects.requireNonNull($.subnetCompartmentId, "expected parameter 'subnetCompartmentId' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.vcnCompartmentId = Objects.requireNonNull($.vcnCompartmentId, "expected parameter 'vcnCompartmentId' to be non-null");
            $.vcnId = Objects.requireNonNull($.vcnId, "expected parameter 'vcnId' to be non-null");
            return $;
        }
    }

}
