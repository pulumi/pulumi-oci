// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opensearch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterSecuritySamlConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterSecuritySamlConfigArgs Empty = new ClusterSecuritySamlConfigArgs();

    /**
     * The backend role of admins who have all permissions like local master user
     * 
     */
    @Import(name="adminBackendRole")
    private @Nullable Output<String> adminBackendRole;

    /**
     * @return The backend role of admins who have all permissions like local master user
     * 
     */
    public Optional<Output<String>> adminBackendRole() {
        return Optional.ofNullable(this.adminBackendRole);
    }

    /**
     * The unique name for a identity provider entity
     * 
     */
    @Import(name="idpEntityId", required=true)
    private Output<String> idpEntityId;

    /**
     * @return The unique name for a identity provider entity
     * 
     */
    public Output<String> idpEntityId() {
        return this.idpEntityId;
    }

    /**
     * The content of identity provider metadata
     * 
     */
    @Import(name="idpMetadataContent", required=true)
    private Output<String> idpMetadataContent;

    /**
     * @return The content of identity provider metadata
     * 
     */
    public Output<String> idpMetadataContent() {
        return this.idpMetadataContent;
    }

    /**
     * A flag determine whether SAML is enabled
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return A flag determine whether SAML is enabled
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * The endpoint of opendashboard
     * 
     */
    @Import(name="opendashboardUrl")
    private @Nullable Output<String> opendashboardUrl;

    /**
     * @return The endpoint of opendashboard
     * 
     */
    public Optional<Output<String>> opendashboardUrl() {
        return Optional.ofNullable(this.opendashboardUrl);
    }

    /**
     * The roles key is sued to get backend roles from SAML assertion
     * 
     */
    @Import(name="rolesKey")
    private @Nullable Output<String> rolesKey;

    /**
     * @return The roles key is sued to get backend roles from SAML assertion
     * 
     */
    public Optional<Output<String>> rolesKey() {
        return Optional.ofNullable(this.rolesKey);
    }

    /**
     * The subject key is used to get username from SAML assertion. By default, it is NameID
     * 
     */
    @Import(name="subjectKey")
    private @Nullable Output<String> subjectKey;

    /**
     * @return The subject key is used to get username from SAML assertion. By default, it is NameID
     * 
     */
    public Optional<Output<String>> subjectKey() {
        return Optional.ofNullable(this.subjectKey);
    }

    private ClusterSecuritySamlConfigArgs() {}

    private ClusterSecuritySamlConfigArgs(ClusterSecuritySamlConfigArgs $) {
        this.adminBackendRole = $.adminBackendRole;
        this.idpEntityId = $.idpEntityId;
        this.idpMetadataContent = $.idpMetadataContent;
        this.isEnabled = $.isEnabled;
        this.opendashboardUrl = $.opendashboardUrl;
        this.rolesKey = $.rolesKey;
        this.subjectKey = $.subjectKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterSecuritySamlConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterSecuritySamlConfigArgs $;

        public Builder() {
            $ = new ClusterSecuritySamlConfigArgs();
        }

        public Builder(ClusterSecuritySamlConfigArgs defaults) {
            $ = new ClusterSecuritySamlConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminBackendRole The backend role of admins who have all permissions like local master user
         * 
         * @return builder
         * 
         */
        public Builder adminBackendRole(@Nullable Output<String> adminBackendRole) {
            $.adminBackendRole = adminBackendRole;
            return this;
        }

        /**
         * @param adminBackendRole The backend role of admins who have all permissions like local master user
         * 
         * @return builder
         * 
         */
        public Builder adminBackendRole(String adminBackendRole) {
            return adminBackendRole(Output.of(adminBackendRole));
        }

        /**
         * @param idpEntityId The unique name for a identity provider entity
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(Output<String> idpEntityId) {
            $.idpEntityId = idpEntityId;
            return this;
        }

        /**
         * @param idpEntityId The unique name for a identity provider entity
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(String idpEntityId) {
            return idpEntityId(Output.of(idpEntityId));
        }

        /**
         * @param idpMetadataContent The content of identity provider metadata
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataContent(Output<String> idpMetadataContent) {
            $.idpMetadataContent = idpMetadataContent;
            return this;
        }

        /**
         * @param idpMetadataContent The content of identity provider metadata
         * 
         * @return builder
         * 
         */
        public Builder idpMetadataContent(String idpMetadataContent) {
            return idpMetadataContent(Output.of(idpMetadataContent));
        }

        /**
         * @param isEnabled A flag determine whether SAML is enabled
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled A flag determine whether SAML is enabled
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param opendashboardUrl The endpoint of opendashboard
         * 
         * @return builder
         * 
         */
        public Builder opendashboardUrl(@Nullable Output<String> opendashboardUrl) {
            $.opendashboardUrl = opendashboardUrl;
            return this;
        }

        /**
         * @param opendashboardUrl The endpoint of opendashboard
         * 
         * @return builder
         * 
         */
        public Builder opendashboardUrl(String opendashboardUrl) {
            return opendashboardUrl(Output.of(opendashboardUrl));
        }

        /**
         * @param rolesKey The roles key is sued to get backend roles from SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder rolesKey(@Nullable Output<String> rolesKey) {
            $.rolesKey = rolesKey;
            return this;
        }

        /**
         * @param rolesKey The roles key is sued to get backend roles from SAML assertion
         * 
         * @return builder
         * 
         */
        public Builder rolesKey(String rolesKey) {
            return rolesKey(Output.of(rolesKey));
        }

        /**
         * @param subjectKey The subject key is used to get username from SAML assertion. By default, it is NameID
         * 
         * @return builder
         * 
         */
        public Builder subjectKey(@Nullable Output<String> subjectKey) {
            $.subjectKey = subjectKey;
            return this;
        }

        /**
         * @param subjectKey The subject key is used to get username from SAML assertion. By default, it is NameID
         * 
         * @return builder
         * 
         */
        public Builder subjectKey(String subjectKey) {
            return subjectKey(Output.of(subjectKey));
        }

        public ClusterSecuritySamlConfigArgs build() {
            if ($.idpEntityId == null) {
                throw new MissingRequiredPropertyException("ClusterSecuritySamlConfigArgs", "idpEntityId");
            }
            if ($.idpMetadataContent == null) {
                throw new MissingRequiredPropertyException("ClusterSecuritySamlConfigArgs", "idpMetadataContent");
            }
            if ($.isEnabled == null) {
                throw new MissingRequiredPropertyException("ClusterSecuritySamlConfigArgs", "isEnabled");
            }
            return $;
        }
    }

}
