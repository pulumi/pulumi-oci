// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opensearch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * The availability domains to distribute the cluser nodes across.
     * 
     */
    @Import(name="availabilityDomains")
    private @Nullable Output<List<String>> availabilityDomains;

    /**
     * @return The availability domains to distribute the cluser nodes across.
     * 
     */
    public Optional<Output<List<String>>> availabilityDomains() {
        return Optional.ofNullable(this.availabilityDomains);
    }

    /**
     * The OCID of the compartment to create the cluster in.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to create the cluster in.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The number of data nodes to configure for the cluster.
     * 
     */
    @Import(name="dataNodeCount")
    private @Nullable Output<Integer> dataNodeCount;

    /**
     * @return The number of data nodes to configure for the cluster.
     * 
     */
    public Optional<Output<Integer>> dataNodeCount() {
        return Optional.ofNullable(this.dataNodeCount);
    }

    /**
     * The bare metal shape for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostBareMetalShape")
    private @Nullable Output<String> dataNodeHostBareMetalShape;

    /**
     * @return The bare metal shape for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<String>> dataNodeHostBareMetalShape() {
        return Optional.ofNullable(this.dataNodeHostBareMetalShape);
    }

    /**
     * The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostMemoryGb")
    private @Nullable Output<Integer> dataNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<Integer>> dataNodeHostMemoryGb() {
        return Optional.ofNullable(this.dataNodeHostMemoryGb);
    }

    /**
     * The number of OCPUs to configure for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostOcpuCount")
    private @Nullable Output<Integer> dataNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<Integer>> dataNodeHostOcpuCount() {
        return Optional.ofNullable(this.dataNodeHostOcpuCount);
    }

    /**
     * TThe instance type for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeHostType")
    private @Nullable Output<String> dataNodeHostType;

    /**
     * @return TThe instance type for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<String>> dataNodeHostType() {
        return Optional.ofNullable(this.dataNodeHostType);
    }

    /**
     * The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    @Import(name="dataNodeStorageGb")
    private @Nullable Output<Integer> dataNodeStorageGb;

    /**
     * @return The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
     * 
     */
    public Optional<Output<Integer>> dataNodeStorageGb() {
        return Optional.ofNullable(this.dataNodeStorageGb);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The name of the cluster. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Additional information about the current lifecycle state of the cluster.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state of the cluster.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The number of master nodes to configure for the cluster.
     * 
     */
    @Import(name="masterNodeCount")
    private @Nullable Output<Integer> masterNodeCount;

    /**
     * @return The number of master nodes to configure for the cluster.
     * 
     */
    public Optional<Output<Integer>> masterNodeCount() {
        return Optional.ofNullable(this.masterNodeCount);
    }

    /**
     * The bare metal shape for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostBareMetalShape")
    private @Nullable Output<String> masterNodeHostBareMetalShape;

    /**
     * @return The bare metal shape for the cluster&#39;s master nodes.
     * 
     */
    public Optional<Output<String>> masterNodeHostBareMetalShape() {
        return Optional.ofNullable(this.masterNodeHostBareMetalShape);
    }

    /**
     * The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostMemoryGb")
    private @Nullable Output<Integer> masterNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
     * 
     */
    public Optional<Output<Integer>> masterNodeHostMemoryGb() {
        return Optional.ofNullable(this.masterNodeHostMemoryGb);
    }

    /**
     * The number of OCPUs to configure for the cluser&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostOcpuCount")
    private @Nullable Output<Integer> masterNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluser&#39;s master nodes.
     * 
     */
    public Optional<Output<Integer>> masterNodeHostOcpuCount() {
        return Optional.ofNullable(this.masterNodeHostOcpuCount);
    }

    /**
     * The instance type for the cluster&#39;s master nodes.
     * 
     */
    @Import(name="masterNodeHostType")
    private @Nullable Output<String> masterNodeHostType;

    /**
     * @return The instance type for the cluster&#39;s master nodes.
     * 
     */
    public Optional<Output<String>> masterNodeHostType() {
        return Optional.ofNullable(this.masterNodeHostType);
    }

    /**
     * The fully qualified domain name (FQDN) for the cluster&#39;s OpenSearch Dashboard API endpoint.
     * 
     */
    @Import(name="opendashboardFqdn")
    private @Nullable Output<String> opendashboardFqdn;

    /**
     * @return The fully qualified domain name (FQDN) for the cluster&#39;s OpenSearch Dashboard API endpoint.
     * 
     */
    public Optional<Output<String>> opendashboardFqdn() {
        return Optional.ofNullable(this.opendashboardFqdn);
    }

    /**
     * The number of OpenSearch Dashboard nodes to configure for the cluster.
     * 
     */
    @Import(name="opendashboardNodeCount")
    private @Nullable Output<Integer> opendashboardNodeCount;

    /**
     * @return The number of OpenSearch Dashboard nodes to configure for the cluster.
     * 
     */
    public Optional<Output<Integer>> opendashboardNodeCount() {
        return Optional.ofNullable(this.opendashboardNodeCount);
    }

    /**
     * The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    @Import(name="opendashboardNodeHostMemoryGb")
    private @Nullable Output<Integer> opendashboardNodeHostMemoryGb;

    /**
     * @return The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    public Optional<Output<Integer>> opendashboardNodeHostMemoryGb() {
        return Optional.ofNullable(this.opendashboardNodeHostMemoryGb);
    }

    /**
     * The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    @Import(name="opendashboardNodeHostOcpuCount")
    private @Nullable Output<Integer> opendashboardNodeHostOcpuCount;

    /**
     * @return The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
     * 
     */
    public Optional<Output<Integer>> opendashboardNodeHostOcpuCount() {
        return Optional.ofNullable(this.opendashboardNodeHostOcpuCount);
    }

    /**
     * The private IP address for the cluster&#39;s OpenSearch Dashboard.
     * 
     */
    @Import(name="opendashboardPrivateIp")
    private @Nullable Output<String> opendashboardPrivateIp;

    /**
     * @return The private IP address for the cluster&#39;s OpenSearch Dashboard.
     * 
     */
    public Optional<Output<String>> opendashboardPrivateIp() {
        return Optional.ofNullable(this.opendashboardPrivateIp);
    }

    /**
     * The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
     * 
     */
    @Import(name="opensearchFqdn")
    private @Nullable Output<String> opensearchFqdn;

    /**
     * @return The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
     * 
     */
    public Optional<Output<String>> opensearchFqdn() {
        return Optional.ofNullable(this.opensearchFqdn);
    }

    /**
     * The cluster&#39;s private IP address.
     * 
     */
    @Import(name="opensearchPrivateIp")
    private @Nullable Output<String> opensearchPrivateIp;

    /**
     * @return The cluster&#39;s private IP address.
     * 
     */
    public Optional<Output<String>> opensearchPrivateIp() {
        return Optional.ofNullable(this.opensearchPrivateIp);
    }

    /**
     * (Updatable) The name of the master user that are used to manage security config
     * 
     */
    @Import(name="securityMasterUserName")
    private @Nullable Output<String> securityMasterUserName;

    /**
     * @return (Updatable) The name of the master user that are used to manage security config
     * 
     */
    public Optional<Output<String>> securityMasterUserName() {
        return Optional.ofNullable(this.securityMasterUserName);
    }

    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     * 
     */
    @Import(name="securityMasterUserPasswordHash")
    private @Nullable Output<String> securityMasterUserPasswordHash;

    /**
     * @return (Updatable) The password hash of the master user that are used to manage security config
     * 
     */
    public Optional<Output<String>> securityMasterUserPasswordHash() {
        return Optional.ofNullable(this.securityMasterUserPasswordHash);
    }

    /**
     * (Updatable) The security mode of the cluster.
     * 
     */
    @Import(name="securityMode")
    private @Nullable Output<String> securityMode;

    /**
     * @return (Updatable) The security mode of the cluster.
     * 
     */
    public Optional<Output<String>> securityMode() {
        return Optional.ofNullable(this.securityMode);
    }

    /**
     * (Updatable) The version of the software the cluster is running.
     * 
     */
    @Import(name="softwareVersion")
    private @Nullable Output<String> softwareVersion;

    /**
     * @return (Updatable) The version of the software the cluster is running.
     * 
     */
    public Optional<Output<String>> softwareVersion() {
        return Optional.ofNullable(this.softwareVersion);
    }

    /**
     * The current state of the cluster.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the cluster.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID for the compartment where the cluster&#39;s subnet is located.
     * 
     */
    @Import(name="subnetCompartmentId")
    private @Nullable Output<String> subnetCompartmentId;

    /**
     * @return The OCID for the compartment where the cluster&#39;s subnet is located.
     * 
     */
    public Optional<Output<String>> subnetCompartmentId() {
        return Optional.ofNullable(this.subnetCompartmentId);
    }

    /**
     * The OCID of the cluster&#39;s subnet.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the cluster&#39;s subnet.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The amount of time in milliseconds since the cluster was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The amount of time in milliseconds since the cluster was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The amount of time in milliseconds since the cluster was updated.
     * 
     */
    @Import(name="timeDeleted")
    private @Nullable Output<String> timeDeleted;

    /**
     * @return The amount of time in milliseconds since the cluster was updated.
     * 
     */
    public Optional<Output<String>> timeDeleted() {
        return Optional.ofNullable(this.timeDeleted);
    }

    /**
     * The amount of time in milliseconds since the cluster was updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The amount of time in milliseconds since the cluster was updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The size in GB of the cluster&#39;s total storage.
     * 
     */
    @Import(name="totalStorageGb")
    private @Nullable Output<Integer> totalStorageGb;

    /**
     * @return The size in GB of the cluster&#39;s total storage.
     * 
     */
    public Optional<Output<Integer>> totalStorageGb() {
        return Optional.ofNullable(this.totalStorageGb);
    }

    /**
     * The OCID for the compartment where the cluster&#39;s VCN is located.
     * 
     */
    @Import(name="vcnCompartmentId")
    private @Nullable Output<String> vcnCompartmentId;

    /**
     * @return The OCID for the compartment where the cluster&#39;s VCN is located.
     * 
     */
    public Optional<Output<String>> vcnCompartmentId() {
        return Optional.ofNullable(this.vcnCompartmentId);
    }

    /**
     * The OCID of the cluster&#39;s VCN.
     * 
     */
    @Import(name="vcnId")
    private @Nullable Output<String> vcnId;

    /**
     * @return The OCID of the cluster&#39;s VCN.
     * 
     */
    public Optional<Output<String>> vcnId() {
        return Optional.ofNullable(this.vcnId);
    }

    private ClusterState() {}

    private ClusterState(ClusterState $) {
        this.availabilityDomains = $.availabilityDomains;
        this.compartmentId = $.compartmentId;
        this.dataNodeCount = $.dataNodeCount;
        this.dataNodeHostBareMetalShape = $.dataNodeHostBareMetalShape;
        this.dataNodeHostMemoryGb = $.dataNodeHostMemoryGb;
        this.dataNodeHostOcpuCount = $.dataNodeHostOcpuCount;
        this.dataNodeHostType = $.dataNodeHostType;
        this.dataNodeStorageGb = $.dataNodeStorageGb;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.fqdn = $.fqdn;
        this.freeformTags = $.freeformTags;
        this.lifecycleDetails = $.lifecycleDetails;
        this.masterNodeCount = $.masterNodeCount;
        this.masterNodeHostBareMetalShape = $.masterNodeHostBareMetalShape;
        this.masterNodeHostMemoryGb = $.masterNodeHostMemoryGb;
        this.masterNodeHostOcpuCount = $.masterNodeHostOcpuCount;
        this.masterNodeHostType = $.masterNodeHostType;
        this.opendashboardFqdn = $.opendashboardFqdn;
        this.opendashboardNodeCount = $.opendashboardNodeCount;
        this.opendashboardNodeHostMemoryGb = $.opendashboardNodeHostMemoryGb;
        this.opendashboardNodeHostOcpuCount = $.opendashboardNodeHostOcpuCount;
        this.opendashboardPrivateIp = $.opendashboardPrivateIp;
        this.opensearchFqdn = $.opensearchFqdn;
        this.opensearchPrivateIp = $.opensearchPrivateIp;
        this.securityMasterUserName = $.securityMasterUserName;
        this.securityMasterUserPasswordHash = $.securityMasterUserPasswordHash;
        this.securityMode = $.securityMode;
        this.softwareVersion = $.softwareVersion;
        this.state = $.state;
        this.subnetCompartmentId = $.subnetCompartmentId;
        this.subnetId = $.subnetId;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeDeleted = $.timeDeleted;
        this.timeUpdated = $.timeUpdated;
        this.totalStorageGb = $.totalStorageGb;
        this.vcnCompartmentId = $.vcnCompartmentId;
        this.vcnId = $.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterState $;

        public Builder() {
            $ = new ClusterState();
        }

        public Builder(ClusterState defaults) {
            $ = new ClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomains The availability domains to distribute the cluser nodes across.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomains(@Nullable Output<List<String>> availabilityDomains) {
            $.availabilityDomains = availabilityDomains;
            return this;
        }

        /**
         * @param availabilityDomains The availability domains to distribute the cluser nodes across.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomains(List<String> availabilityDomains) {
            return availabilityDomains(Output.of(availabilityDomains));
        }

        /**
         * @param availabilityDomains The availability domains to distribute the cluser nodes across.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomains(String... availabilityDomains) {
            return availabilityDomains(List.of(availabilityDomains));
        }

        /**
         * @param compartmentId The OCID of the compartment to create the cluster in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to create the cluster in.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dataNodeCount The number of data nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeCount(@Nullable Output<Integer> dataNodeCount) {
            $.dataNodeCount = dataNodeCount;
            return this;
        }

        /**
         * @param dataNodeCount The number of data nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeCount(Integer dataNodeCount) {
            return dataNodeCount(Output.of(dataNodeCount));
        }

        /**
         * @param dataNodeHostBareMetalShape The bare metal shape for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostBareMetalShape(@Nullable Output<String> dataNodeHostBareMetalShape) {
            $.dataNodeHostBareMetalShape = dataNodeHostBareMetalShape;
            return this;
        }

        /**
         * @param dataNodeHostBareMetalShape The bare metal shape for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostBareMetalShape(String dataNodeHostBareMetalShape) {
            return dataNodeHostBareMetalShape(Output.of(dataNodeHostBareMetalShape));
        }

        /**
         * @param dataNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostMemoryGb(@Nullable Output<Integer> dataNodeHostMemoryGb) {
            $.dataNodeHostMemoryGb = dataNodeHostMemoryGb;
            return this;
        }

        /**
         * @param dataNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostMemoryGb(Integer dataNodeHostMemoryGb) {
            return dataNodeHostMemoryGb(Output.of(dataNodeHostMemoryGb));
        }

        /**
         * @param dataNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostOcpuCount(@Nullable Output<Integer> dataNodeHostOcpuCount) {
            $.dataNodeHostOcpuCount = dataNodeHostOcpuCount;
            return this;
        }

        /**
         * @param dataNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostOcpuCount(Integer dataNodeHostOcpuCount) {
            return dataNodeHostOcpuCount(Output.of(dataNodeHostOcpuCount));
        }

        /**
         * @param dataNodeHostType TThe instance type for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostType(@Nullable Output<String> dataNodeHostType) {
            $.dataNodeHostType = dataNodeHostType;
            return this;
        }

        /**
         * @param dataNodeHostType TThe instance type for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeHostType(String dataNodeHostType) {
            return dataNodeHostType(Output.of(dataNodeHostType));
        }

        /**
         * @param dataNodeStorageGb The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeStorageGb(@Nullable Output<Integer> dataNodeStorageGb) {
            $.dataNodeStorageGb = dataNodeStorageGb;
            return this;
        }

        /**
         * @param dataNodeStorageGb The amount of storage in GB, to configure per node for the cluster&#39;s data nodes.
         * 
         * @return builder
         * 
         */
        public Builder dataNodeStorageGb(Integer dataNodeStorageGb) {
            return dataNodeStorageGb(Output.of(dataNodeStorageGb));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) The name of the cluster. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The name of the cluster. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fqdn The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param masterNodeCount The number of master nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeCount(@Nullable Output<Integer> masterNodeCount) {
            $.masterNodeCount = masterNodeCount;
            return this;
        }

        /**
         * @param masterNodeCount The number of master nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeCount(Integer masterNodeCount) {
            return masterNodeCount(Output.of(masterNodeCount));
        }

        /**
         * @param masterNodeHostBareMetalShape The bare metal shape for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostBareMetalShape(@Nullable Output<String> masterNodeHostBareMetalShape) {
            $.masterNodeHostBareMetalShape = masterNodeHostBareMetalShape;
            return this;
        }

        /**
         * @param masterNodeHostBareMetalShape The bare metal shape for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostBareMetalShape(String masterNodeHostBareMetalShape) {
            return masterNodeHostBareMetalShape(Output.of(masterNodeHostBareMetalShape));
        }

        /**
         * @param masterNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostMemoryGb(@Nullable Output<Integer> masterNodeHostMemoryGb) {
            $.masterNodeHostMemoryGb = masterNodeHostMemoryGb;
            return this;
        }

        /**
         * @param masterNodeHostMemoryGb The amount of memory in GB, to configure per node for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostMemoryGb(Integer masterNodeHostMemoryGb) {
            return masterNodeHostMemoryGb(Output.of(masterNodeHostMemoryGb));
        }

        /**
         * @param masterNodeHostOcpuCount The number of OCPUs to configure for the cluser&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostOcpuCount(@Nullable Output<Integer> masterNodeHostOcpuCount) {
            $.masterNodeHostOcpuCount = masterNodeHostOcpuCount;
            return this;
        }

        /**
         * @param masterNodeHostOcpuCount The number of OCPUs to configure for the cluser&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostOcpuCount(Integer masterNodeHostOcpuCount) {
            return masterNodeHostOcpuCount(Output.of(masterNodeHostOcpuCount));
        }

        /**
         * @param masterNodeHostType The instance type for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostType(@Nullable Output<String> masterNodeHostType) {
            $.masterNodeHostType = masterNodeHostType;
            return this;
        }

        /**
         * @param masterNodeHostType The instance type for the cluster&#39;s master nodes.
         * 
         * @return builder
         * 
         */
        public Builder masterNodeHostType(String masterNodeHostType) {
            return masterNodeHostType(Output.of(masterNodeHostType));
        }

        /**
         * @param opendashboardFqdn The fully qualified domain name (FQDN) for the cluster&#39;s OpenSearch Dashboard API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardFqdn(@Nullable Output<String> opendashboardFqdn) {
            $.opendashboardFqdn = opendashboardFqdn;
            return this;
        }

        /**
         * @param opendashboardFqdn The fully qualified domain name (FQDN) for the cluster&#39;s OpenSearch Dashboard API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardFqdn(String opendashboardFqdn) {
            return opendashboardFqdn(Output.of(opendashboardFqdn));
        }

        /**
         * @param opendashboardNodeCount The number of OpenSearch Dashboard nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeCount(@Nullable Output<Integer> opendashboardNodeCount) {
            $.opendashboardNodeCount = opendashboardNodeCount;
            return this;
        }

        /**
         * @param opendashboardNodeCount The number of OpenSearch Dashboard nodes to configure for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeCount(Integer opendashboardNodeCount) {
            return opendashboardNodeCount(Output.of(opendashboardNodeCount));
        }

        /**
         * @param opendashboardNodeHostMemoryGb The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostMemoryGb(@Nullable Output<Integer> opendashboardNodeHostMemoryGb) {
            $.opendashboardNodeHostMemoryGb = opendashboardNodeHostMemoryGb;
            return this;
        }

        /**
         * @param opendashboardNodeHostMemoryGb The amount of memory in GB, to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostMemoryGb(Integer opendashboardNodeHostMemoryGb) {
            return opendashboardNodeHostMemoryGb(Output.of(opendashboardNodeHostMemoryGb));
        }

        /**
         * @param opendashboardNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostOcpuCount(@Nullable Output<Integer> opendashboardNodeHostOcpuCount) {
            $.opendashboardNodeHostOcpuCount = opendashboardNodeHostOcpuCount;
            return this;
        }

        /**
         * @param opendashboardNodeHostOcpuCount The number of OCPUs to configure for the cluster&#39;s OpenSearch Dashboard nodes.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardNodeHostOcpuCount(Integer opendashboardNodeHostOcpuCount) {
            return opendashboardNodeHostOcpuCount(Output.of(opendashboardNodeHostOcpuCount));
        }

        /**
         * @param opendashboardPrivateIp The private IP address for the cluster&#39;s OpenSearch Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardPrivateIp(@Nullable Output<String> opendashboardPrivateIp) {
            $.opendashboardPrivateIp = opendashboardPrivateIp;
            return this;
        }

        /**
         * @param opendashboardPrivateIp The private IP address for the cluster&#39;s OpenSearch Dashboard.
         * 
         * @return builder
         * 
         */
        public Builder opendashboardPrivateIp(String opendashboardPrivateIp) {
            return opendashboardPrivateIp(Output.of(opendashboardPrivateIp));
        }

        /**
         * @param opensearchFqdn The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder opensearchFqdn(@Nullable Output<String> opensearchFqdn) {
            $.opensearchFqdn = opensearchFqdn;
            return this;
        }

        /**
         * @param opensearchFqdn The fully qualified domain name (FQDN) for the cluster&#39;s API endpoint.
         * 
         * @return builder
         * 
         */
        public Builder opensearchFqdn(String opensearchFqdn) {
            return opensearchFqdn(Output.of(opensearchFqdn));
        }

        /**
         * @param opensearchPrivateIp The cluster&#39;s private IP address.
         * 
         * @return builder
         * 
         */
        public Builder opensearchPrivateIp(@Nullable Output<String> opensearchPrivateIp) {
            $.opensearchPrivateIp = opensearchPrivateIp;
            return this;
        }

        /**
         * @param opensearchPrivateIp The cluster&#39;s private IP address.
         * 
         * @return builder
         * 
         */
        public Builder opensearchPrivateIp(String opensearchPrivateIp) {
            return opensearchPrivateIp(Output.of(opensearchPrivateIp));
        }

        /**
         * @param securityMasterUserName (Updatable) The name of the master user that are used to manage security config
         * 
         * @return builder
         * 
         */
        public Builder securityMasterUserName(@Nullable Output<String> securityMasterUserName) {
            $.securityMasterUserName = securityMasterUserName;
            return this;
        }

        /**
         * @param securityMasterUserName (Updatable) The name of the master user that are used to manage security config
         * 
         * @return builder
         * 
         */
        public Builder securityMasterUserName(String securityMasterUserName) {
            return securityMasterUserName(Output.of(securityMasterUserName));
        }

        /**
         * @param securityMasterUserPasswordHash (Updatable) The password hash of the master user that are used to manage security config
         * 
         * @return builder
         * 
         */
        public Builder securityMasterUserPasswordHash(@Nullable Output<String> securityMasterUserPasswordHash) {
            $.securityMasterUserPasswordHash = securityMasterUserPasswordHash;
            return this;
        }

        /**
         * @param securityMasterUserPasswordHash (Updatable) The password hash of the master user that are used to manage security config
         * 
         * @return builder
         * 
         */
        public Builder securityMasterUserPasswordHash(String securityMasterUserPasswordHash) {
            return securityMasterUserPasswordHash(Output.of(securityMasterUserPasswordHash));
        }

        /**
         * @param securityMode (Updatable) The security mode of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder securityMode(@Nullable Output<String> securityMode) {
            $.securityMode = securityMode;
            return this;
        }

        /**
         * @param securityMode (Updatable) The security mode of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder securityMode(String securityMode) {
            return securityMode(Output.of(securityMode));
        }

        /**
         * @param softwareVersion (Updatable) The version of the software the cluster is running.
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(@Nullable Output<String> softwareVersion) {
            $.softwareVersion = softwareVersion;
            return this;
        }

        /**
         * @param softwareVersion (Updatable) The version of the software the cluster is running.
         * 
         * @return builder
         * 
         */
        public Builder softwareVersion(String softwareVersion) {
            return softwareVersion(Output.of(softwareVersion));
        }

        /**
         * @param state The current state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetCompartmentId The OCID for the compartment where the cluster&#39;s subnet is located.
         * 
         * @return builder
         * 
         */
        public Builder subnetCompartmentId(@Nullable Output<String> subnetCompartmentId) {
            $.subnetCompartmentId = subnetCompartmentId;
            return this;
        }

        /**
         * @param subnetCompartmentId The OCID for the compartment where the cluster&#39;s subnet is located.
         * 
         * @return builder
         * 
         */
        public Builder subnetCompartmentId(String subnetCompartmentId) {
            return subnetCompartmentId(Output.of(subnetCompartmentId));
        }

        /**
         * @param subnetId The OCID of the cluster&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the cluster&#39;s subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The amount of time in milliseconds since the cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The amount of time in milliseconds since the cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeDeleted The amount of time in milliseconds since the cluster was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeDeleted(@Nullable Output<String> timeDeleted) {
            $.timeDeleted = timeDeleted;
            return this;
        }

        /**
         * @param timeDeleted The amount of time in milliseconds since the cluster was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeDeleted(String timeDeleted) {
            return timeDeleted(Output.of(timeDeleted));
        }

        /**
         * @param timeUpdated The amount of time in milliseconds since the cluster was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The amount of time in milliseconds since the cluster was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param totalStorageGb The size in GB of the cluster&#39;s total storage.
         * 
         * @return builder
         * 
         */
        public Builder totalStorageGb(@Nullable Output<Integer> totalStorageGb) {
            $.totalStorageGb = totalStorageGb;
            return this;
        }

        /**
         * @param totalStorageGb The size in GB of the cluster&#39;s total storage.
         * 
         * @return builder
         * 
         */
        public Builder totalStorageGb(Integer totalStorageGb) {
            return totalStorageGb(Output.of(totalStorageGb));
        }

        /**
         * @param vcnCompartmentId The OCID for the compartment where the cluster&#39;s VCN is located.
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(@Nullable Output<String> vcnCompartmentId) {
            $.vcnCompartmentId = vcnCompartmentId;
            return this;
        }

        /**
         * @param vcnCompartmentId The OCID for the compartment where the cluster&#39;s VCN is located.
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(String vcnCompartmentId) {
            return vcnCompartmentId(Output.of(vcnCompartmentId));
        }

        /**
         * @param vcnId The OCID of the cluster&#39;s VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(@Nullable Output<String> vcnId) {
            $.vcnId = vcnId;
            return this;
        }

        /**
         * @param vcnId The OCID of the cluster&#39;s VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(String vcnId) {
            return vcnId(Output.of(vcnId));
        }

        public ClusterState build() {
            return $;
        }
    }

}
