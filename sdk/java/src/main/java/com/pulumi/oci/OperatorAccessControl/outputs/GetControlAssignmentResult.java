// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetControlAssignmentResult {
    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    private @Nullable String assignerId;
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    private @Nullable String comment;
    /**
     * @return The OCID of the comparment that contains the operator control assignment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    private @Nullable String detachmentDescription;
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    private @Nullable Integer errorCode;
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    private @Nullable String errorMessage;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    private @Nullable String id;
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    private @Nullable Boolean isAutoApproveDuringMaintenance;
    /**
     * @return Whether the assignment is a default assignment.
     * 
     */
    private @Nullable Boolean isDefaultAssignment;
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    private @Nullable Boolean isEnforcedAlways;
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    private @Nullable Boolean isLogForwarded;
    /**
     * @return More in detail about the lifeCycleState.
     * 
     */
    private @Nullable String lifecycleDetails;
    private String operatorControlAssignmentId;
    /**
     * @return The OCID of the operator control.
     * 
     */
    private @Nullable String operatorControlId;
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    private @Nullable String remoteSyslogServerAddress;
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    private @Nullable String remoteSyslogServerCaCert;
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    private @Nullable Integer remoteSyslogServerPort;
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    private @Nullable String resourceCompartmentId;
    /**
     * @return The OCID of the target resource.
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return Name of the target resource.
     * 
     */
    private @Nullable String resourceName;
    /**
     * @return resourceType for which the OperatorControlAssignment is applicable
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return The current lifcycle state of the OperatorControl.
     * 
     */
    private @Nullable String state;
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private @Nullable String timeAssignmentFrom;
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private @Nullable String timeAssignmentTo;
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private @Nullable String timeOfAssignment;
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private @Nullable String timeOfDeletion;
    /**
     * @return User id who released the operatorControl.
     * 
     */
    private @Nullable String unassignerId;

    private GetControlAssignmentResult() {}
    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    public Optional<String> assignerId() {
        return Optional.ofNullable(this.assignerId);
    }
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return The OCID of the comparment that contains the operator control assignment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    public Optional<String> detachmentDescription() {
        return Optional.ofNullable(this.detachmentDescription);
    }
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    public Optional<Integer> errorCode() {
        return Optional.ofNullable(this.errorCode);
    }
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    public Optional<String> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    public Optional<Boolean> isAutoApproveDuringMaintenance() {
        return Optional.ofNullable(this.isAutoApproveDuringMaintenance);
    }
    /**
     * @return Whether the assignment is a default assignment.
     * 
     */
    public Optional<Boolean> isDefaultAssignment() {
        return Optional.ofNullable(this.isDefaultAssignment);
    }
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    public Optional<Boolean> isEnforcedAlways() {
        return Optional.ofNullable(this.isEnforcedAlways);
    }
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    public Optional<Boolean> isLogForwarded() {
        return Optional.ofNullable(this.isLogForwarded);
    }
    /**
     * @return More in detail about the lifeCycleState.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public String operatorControlAssignmentId() {
        return this.operatorControlAssignmentId;
    }
    /**
     * @return The OCID of the operator control.
     * 
     */
    public Optional<String> operatorControlId() {
        return Optional.ofNullable(this.operatorControlId);
    }
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    public Optional<String> remoteSyslogServerAddress() {
        return Optional.ofNullable(this.remoteSyslogServerAddress);
    }
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    public Optional<String> remoteSyslogServerCaCert() {
        return Optional.ofNullable(this.remoteSyslogServerCaCert);
    }
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    public Optional<Integer> remoteSyslogServerPort() {
        return Optional.ofNullable(this.remoteSyslogServerPort);
    }
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    public Optional<String> resourceCompartmentId() {
        return Optional.ofNullable(this.resourceCompartmentId);
    }
    /**
     * @return The OCID of the target resource.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return Name of the target resource.
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }
    /**
     * @return resourceType for which the OperatorControlAssignment is applicable
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return The current lifcycle state of the OperatorControl.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<String> timeAssignmentFrom() {
        return Optional.ofNullable(this.timeAssignmentFrom);
    }
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<String> timeAssignmentTo() {
        return Optional.ofNullable(this.timeAssignmentTo);
    }
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<String> timeOfAssignment() {
        return Optional.ofNullable(this.timeOfAssignment);
    }
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<String> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }
    /**
     * @return User id who released the operatorControl.
     * 
     */
    public Optional<String> unassignerId() {
        return Optional.ofNullable(this.unassignerId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlAssignmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assignerId;
        private @Nullable String comment;
        private @Nullable String compartmentId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String detachmentDescription;
        private @Nullable Integer errorCode;
        private @Nullable String errorMessage;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable Boolean isAutoApproveDuringMaintenance;
        private @Nullable Boolean isDefaultAssignment;
        private @Nullable Boolean isEnforcedAlways;
        private @Nullable Boolean isLogForwarded;
        private @Nullable String lifecycleDetails;
        private String operatorControlAssignmentId;
        private @Nullable String operatorControlId;
        private @Nullable String remoteSyslogServerAddress;
        private @Nullable String remoteSyslogServerCaCert;
        private @Nullable Integer remoteSyslogServerPort;
        private @Nullable String resourceCompartmentId;
        private @Nullable String resourceId;
        private @Nullable String resourceName;
        private @Nullable String resourceType;
        private @Nullable String state;
        private @Nullable String timeAssignmentFrom;
        private @Nullable String timeAssignmentTo;
        private @Nullable String timeOfAssignment;
        private @Nullable String timeOfDeletion;
        private @Nullable String unassignerId;
        public Builder() {}
        public Builder(GetControlAssignmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignerId = defaults.assignerId;
    	      this.comment = defaults.comment;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.detachmentDescription = defaults.detachmentDescription;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAutoApproveDuringMaintenance = defaults.isAutoApproveDuringMaintenance;
    	      this.isDefaultAssignment = defaults.isDefaultAssignment;
    	      this.isEnforcedAlways = defaults.isEnforcedAlways;
    	      this.isLogForwarded = defaults.isLogForwarded;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.operatorControlAssignmentId = defaults.operatorControlAssignmentId;
    	      this.operatorControlId = defaults.operatorControlId;
    	      this.remoteSyslogServerAddress = defaults.remoteSyslogServerAddress;
    	      this.remoteSyslogServerCaCert = defaults.remoteSyslogServerCaCert;
    	      this.remoteSyslogServerPort = defaults.remoteSyslogServerPort;
    	      this.resourceCompartmentId = defaults.resourceCompartmentId;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.timeAssignmentFrom = defaults.timeAssignmentFrom;
    	      this.timeAssignmentTo = defaults.timeAssignmentTo;
    	      this.timeOfAssignment = defaults.timeOfAssignment;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.unassignerId = defaults.unassignerId;
        }

        @CustomType.Setter
        public Builder assignerId(@Nullable String assignerId) {
            this.assignerId = assignerId;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder detachmentDescription(@Nullable String detachmentDescription) {
            this.detachmentDescription = detachmentDescription;
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(@Nullable Integer errorCode) {
            this.errorCode = errorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(@Nullable String errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoApproveDuringMaintenance(@Nullable Boolean isAutoApproveDuringMaintenance) {
            this.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultAssignment(@Nullable Boolean isDefaultAssignment) {
            this.isDefaultAssignment = isDefaultAssignment;
            return this;
        }
        @CustomType.Setter
        public Builder isEnforcedAlways(@Nullable Boolean isEnforcedAlways) {
            this.isEnforcedAlways = isEnforcedAlways;
            return this;
        }
        @CustomType.Setter
        public Builder isLogForwarded(@Nullable Boolean isLogForwarded) {
            this.isLogForwarded = isLogForwarded;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder operatorControlAssignmentId(String operatorControlAssignmentId) {
            this.operatorControlAssignmentId = Objects.requireNonNull(operatorControlAssignmentId);
            return this;
        }
        @CustomType.Setter
        public Builder operatorControlId(@Nullable String operatorControlId) {
            this.operatorControlId = operatorControlId;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerAddress(@Nullable String remoteSyslogServerAddress) {
            this.remoteSyslogServerAddress = remoteSyslogServerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerCaCert(@Nullable String remoteSyslogServerCaCert) {
            this.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerPort(@Nullable Integer remoteSyslogServerPort) {
            this.remoteSyslogServerPort = remoteSyslogServerPort;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCompartmentId(@Nullable String resourceCompartmentId) {
            this.resourceCompartmentId = resourceCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeAssignmentFrom(@Nullable String timeAssignmentFrom) {
            this.timeAssignmentFrom = timeAssignmentFrom;
            return this;
        }
        @CustomType.Setter
        public Builder timeAssignmentTo(@Nullable String timeAssignmentTo) {
            this.timeAssignmentTo = timeAssignmentTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfAssignment(@Nullable String timeOfAssignment) {
            this.timeOfAssignment = timeOfAssignment;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(@Nullable String timeOfDeletion) {
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder unassignerId(@Nullable String unassignerId) {
            this.unassignerId = unassignerId;
            return this;
        }
        public GetControlAssignmentResult build() {
            final var o = new GetControlAssignmentResult();
            o.assignerId = assignerId;
            o.comment = comment;
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.detachmentDescription = detachmentDescription;
            o.errorCode = errorCode;
            o.errorMessage = errorMessage;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            o.isDefaultAssignment = isDefaultAssignment;
            o.isEnforcedAlways = isEnforcedAlways;
            o.isLogForwarded = isLogForwarded;
            o.lifecycleDetails = lifecycleDetails;
            o.operatorControlAssignmentId = operatorControlAssignmentId;
            o.operatorControlId = operatorControlId;
            o.remoteSyslogServerAddress = remoteSyslogServerAddress;
            o.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            o.remoteSyslogServerPort = remoteSyslogServerPort;
            o.resourceCompartmentId = resourceCompartmentId;
            o.resourceId = resourceId;
            o.resourceName = resourceName;
            o.resourceType = resourceType;
            o.state = state;
            o.timeAssignmentFrom = timeAssignmentFrom;
            o.timeAssignmentTo = timeAssignmentTo;
            o.timeOfAssignment = timeOfAssignment;
            o.timeOfDeletion = timeOfDeletion;
            o.unassignerId = unassignerId;
            return o;
        }
    }
}
