// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetControlAssignmentsOperatorControlAssignmentCollectionItem {
    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    private String assignerId;
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    private String comment;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    private String detachmentDescription;
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    private Integer errorCode;
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    private String errorMessage;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    private String id;
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    private Boolean isAutoApproveDuringMaintenance;
    /**
     * @return Whether the assignment is a default assignment.
     * 
     */
    private Boolean isDefaultAssignment;
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    private Boolean isEnforcedAlways;
    /**
     * @return If set, then the hypervisor audit logs will be forwarded to the relevant remote syslog server
     * 
     */
    private Boolean isHypervisorLogForwarded;
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    private Boolean isLogForwarded;
    /**
     * @return More in detail about the lifeCycleState.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Name of the operator control name associated.
     * 
     */
    private String opControlName;
    /**
     * @return The OCID of the operator control.
     * 
     */
    private String operatorControlId;
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    private String remoteSyslogServerAddress;
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    private String remoteSyslogServerCaCert;
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    private Integer remoteSyslogServerPort;
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    private String resourceCompartmentId;
    /**
     * @return The OCID of the target resource.
     * 
     */
    private String resourceId;
    /**
     * @return A filter to return only resources that match the given ResourceName.
     * 
     */
    private String resourceName;
    /**
     * @return A filter to return only lists of resources that match the entire given service type.
     * 
     */
    private String resourceType;
    /**
     * @return A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    private String state;
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeAssignmentFrom;
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeAssignmentTo;
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeOfAssignment;
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeOfDeletion;
    /**
     * @return User id who released the operatorControl.
     * 
     */
    private String unassignerId;
    private Integer validateAssignmentTrigger;

    private GetControlAssignmentsOperatorControlAssignmentCollectionItem() {}
    /**
     * @return The OCID of the user who created this operator control assignment.
     * 
     */
    public String assignerId() {
        return this.assignerId;
    }
    /**
     * @return Comment about the assignment of the operator control to this target resource.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return description containing reason for releasing of OperatorControl.
     * 
     */
    public String detachmentDescription() {
        return this.detachmentDescription;
    }
    /**
     * @return The code identifying the error occurred during Assignment operation.
     * 
     */
    public Integer errorCode() {
        return this.errorCode;
    }
    /**
     * @return The message describing the error occurred during Assignment operation.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the operator control assignment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The boolean if true would autoApprove during maintenance.
     * 
     */
    public Boolean isAutoApproveDuringMaintenance() {
        return this.isAutoApproveDuringMaintenance;
    }
    /**
     * @return Whether the assignment is a default assignment.
     * 
     */
    public Boolean isDefaultAssignment() {
        return this.isDefaultAssignment;
    }
    /**
     * @return If set, then the target resource is always governed by the operator control.
     * 
     */
    public Boolean isEnforcedAlways() {
        return this.isEnforcedAlways;
    }
    /**
     * @return If set, then the hypervisor audit logs will be forwarded to the relevant remote syslog server
     * 
     */
    public Boolean isHypervisorLogForwarded() {
        return this.isHypervisorLogForwarded;
    }
    /**
     * @return If set indicates that the audit logs are being forwarded to the relevant remote logging server
     * 
     */
    public Boolean isLogForwarded() {
        return this.isLogForwarded;
    }
    /**
     * @return More in detail about the lifeCycleState.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Name of the operator control name associated.
     * 
     */
    public String opControlName() {
        return this.opControlName;
    }
    /**
     * @return The OCID of the operator control.
     * 
     */
    public String operatorControlId() {
        return this.operatorControlId;
    }
    /**
     * @return The address of the remote syslog server where the audit logs are being forwarded to. Address in host or IP format.
     * 
     */
    public String remoteSyslogServerAddress() {
        return this.remoteSyslogServerAddress;
    }
    /**
     * @return The CA certificate of the remote syslog server.
     * 
     */
    public String remoteSyslogServerCaCert() {
        return this.remoteSyslogServerCaCert;
    }
    /**
     * @return The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    public Integer remoteSyslogServerPort() {
        return this.remoteSyslogServerPort;
    }
    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    public String resourceCompartmentId() {
        return this.resourceCompartmentId;
    }
    /**
     * @return The OCID of the target resource.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return A filter to return only resources that match the given ResourceName.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return A filter to return only lists of resources that match the entire given service type.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time at which the target resource will be brought under the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeAssignmentFrom() {
        return this.timeAssignmentFrom;
    }
    /**
     * @return The time at which the target resource will leave the governance of the operator control expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeAssignmentTo() {
        return this.timeAssignmentTo;
    }
    /**
     * @return Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfAssignment() {
        return this.timeOfAssignment;
    }
    /**
     * @return Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return User id who released the operatorControl.
     * 
     */
    public String unassignerId() {
        return this.unassignerId;
    }
    public Integer validateAssignmentTrigger() {
        return this.validateAssignmentTrigger;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlAssignmentsOperatorControlAssignmentCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assignerId;
        private String comment;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String detachmentDescription;
        private Integer errorCode;
        private String errorMessage;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isAutoApproveDuringMaintenance;
        private Boolean isDefaultAssignment;
        private Boolean isEnforcedAlways;
        private Boolean isHypervisorLogForwarded;
        private Boolean isLogForwarded;
        private String lifecycleDetails;
        private String opControlName;
        private String operatorControlId;
        private String remoteSyslogServerAddress;
        private String remoteSyslogServerCaCert;
        private Integer remoteSyslogServerPort;
        private String resourceCompartmentId;
        private String resourceId;
        private String resourceName;
        private String resourceType;
        private String state;
        private String timeAssignmentFrom;
        private String timeAssignmentTo;
        private String timeOfAssignment;
        private String timeOfDeletion;
        private String unassignerId;
        private Integer validateAssignmentTrigger;
        public Builder() {}
        public Builder(GetControlAssignmentsOperatorControlAssignmentCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignerId = defaults.assignerId;
    	      this.comment = defaults.comment;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.detachmentDescription = defaults.detachmentDescription;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAutoApproveDuringMaintenance = defaults.isAutoApproveDuringMaintenance;
    	      this.isDefaultAssignment = defaults.isDefaultAssignment;
    	      this.isEnforcedAlways = defaults.isEnforcedAlways;
    	      this.isHypervisorLogForwarded = defaults.isHypervisorLogForwarded;
    	      this.isLogForwarded = defaults.isLogForwarded;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.opControlName = defaults.opControlName;
    	      this.operatorControlId = defaults.operatorControlId;
    	      this.remoteSyslogServerAddress = defaults.remoteSyslogServerAddress;
    	      this.remoteSyslogServerCaCert = defaults.remoteSyslogServerCaCert;
    	      this.remoteSyslogServerPort = defaults.remoteSyslogServerPort;
    	      this.resourceCompartmentId = defaults.resourceCompartmentId;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.timeAssignmentFrom = defaults.timeAssignmentFrom;
    	      this.timeAssignmentTo = defaults.timeAssignmentTo;
    	      this.timeOfAssignment = defaults.timeOfAssignment;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.unassignerId = defaults.unassignerId;
    	      this.validateAssignmentTrigger = defaults.validateAssignmentTrigger;
        }

        @CustomType.Setter
        public Builder assignerId(String assignerId) {
            if (assignerId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "assignerId");
            }
            this.assignerId = assignerId;
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            if (comment == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "comment");
            }
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder detachmentDescription(String detachmentDescription) {
            if (detachmentDescription == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "detachmentDescription");
            }
            this.detachmentDescription = detachmentDescription;
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(Integer errorCode) {
            if (errorCode == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "errorCode");
            }
            this.errorCode = errorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoApproveDuringMaintenance(Boolean isAutoApproveDuringMaintenance) {
            if (isAutoApproveDuringMaintenance == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "isAutoApproveDuringMaintenance");
            }
            this.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultAssignment(Boolean isDefaultAssignment) {
            if (isDefaultAssignment == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "isDefaultAssignment");
            }
            this.isDefaultAssignment = isDefaultAssignment;
            return this;
        }
        @CustomType.Setter
        public Builder isEnforcedAlways(Boolean isEnforcedAlways) {
            if (isEnforcedAlways == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "isEnforcedAlways");
            }
            this.isEnforcedAlways = isEnforcedAlways;
            return this;
        }
        @CustomType.Setter
        public Builder isHypervisorLogForwarded(Boolean isHypervisorLogForwarded) {
            if (isHypervisorLogForwarded == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "isHypervisorLogForwarded");
            }
            this.isHypervisorLogForwarded = isHypervisorLogForwarded;
            return this;
        }
        @CustomType.Setter
        public Builder isLogForwarded(Boolean isLogForwarded) {
            if (isLogForwarded == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "isLogForwarded");
            }
            this.isLogForwarded = isLogForwarded;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder opControlName(String opControlName) {
            if (opControlName == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "opControlName");
            }
            this.opControlName = opControlName;
            return this;
        }
        @CustomType.Setter
        public Builder operatorControlId(String operatorControlId) {
            if (operatorControlId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "operatorControlId");
            }
            this.operatorControlId = operatorControlId;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerAddress(String remoteSyslogServerAddress) {
            if (remoteSyslogServerAddress == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "remoteSyslogServerAddress");
            }
            this.remoteSyslogServerAddress = remoteSyslogServerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerCaCert(String remoteSyslogServerCaCert) {
            if (remoteSyslogServerCaCert == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "remoteSyslogServerCaCert");
            }
            this.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder remoteSyslogServerPort(Integer remoteSyslogServerPort) {
            if (remoteSyslogServerPort == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "remoteSyslogServerPort");
            }
            this.remoteSyslogServerPort = remoteSyslogServerPort;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            if (resourceCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "resourceCompartmentId");
            }
            this.resourceCompartmentId = resourceCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeAssignmentFrom(String timeAssignmentFrom) {
            if (timeAssignmentFrom == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "timeAssignmentFrom");
            }
            this.timeAssignmentFrom = timeAssignmentFrom;
            return this;
        }
        @CustomType.Setter
        public Builder timeAssignmentTo(String timeAssignmentTo) {
            if (timeAssignmentTo == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "timeAssignmentTo");
            }
            this.timeAssignmentTo = timeAssignmentTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfAssignment(String timeOfAssignment) {
            if (timeOfAssignment == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "timeOfAssignment");
            }
            this.timeOfAssignment = timeOfAssignment;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder unassignerId(String unassignerId) {
            if (unassignerId == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "unassignerId");
            }
            this.unassignerId = unassignerId;
            return this;
        }
        @CustomType.Setter
        public Builder validateAssignmentTrigger(Integer validateAssignmentTrigger) {
            if (validateAssignmentTrigger == null) {
              throw new MissingRequiredPropertyException("GetControlAssignmentsOperatorControlAssignmentCollectionItem", "validateAssignmentTrigger");
            }
            this.validateAssignmentTrigger = validateAssignmentTrigger;
            return this;
        }
        public GetControlAssignmentsOperatorControlAssignmentCollectionItem build() {
            final var _resultValue = new GetControlAssignmentsOperatorControlAssignmentCollectionItem();
            _resultValue.assignerId = assignerId;
            _resultValue.comment = comment;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.detachmentDescription = detachmentDescription;
            _resultValue.errorCode = errorCode;
            _resultValue.errorMessage = errorMessage;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            _resultValue.isDefaultAssignment = isDefaultAssignment;
            _resultValue.isEnforcedAlways = isEnforcedAlways;
            _resultValue.isHypervisorLogForwarded = isHypervisorLogForwarded;
            _resultValue.isLogForwarded = isLogForwarded;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.opControlName = opControlName;
            _resultValue.operatorControlId = operatorControlId;
            _resultValue.remoteSyslogServerAddress = remoteSyslogServerAddress;
            _resultValue.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            _resultValue.remoteSyslogServerPort = remoteSyslogServerPort;
            _resultValue.resourceCompartmentId = resourceCompartmentId;
            _resultValue.resourceId = resourceId;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceType = resourceType;
            _resultValue.state = state;
            _resultValue.timeAssignmentFrom = timeAssignmentFrom;
            _resultValue.timeAssignmentTo = timeAssignmentTo;
            _resultValue.timeOfAssignment = timeOfAssignment;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.unassignerId = unassignerId;
            _resultValue.validateAssignmentTrigger = validateAssignmentTrigger;
            return _resultValue;
        }
    }
}
