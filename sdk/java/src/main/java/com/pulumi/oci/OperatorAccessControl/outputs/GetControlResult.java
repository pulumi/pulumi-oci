// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetControlResult {
    /**
     * @return List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
     * 
     */
    private List<String> approvalRequiredOpActionLists;
    /**
     * @return List of user groups who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    private List<String> approverGroupsLists;
    /**
     * @return List of users who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    private List<String> approversLists;
    /**
     * @return The OCID of the compartment that contains the operator control.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Description of operator control.
     * 
     */
    private String description;
    /**
     * @return List of emailId.
     * 
     */
    private List<String> emailIdLists;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the operator control.
     * 
     */
    private String id;
    /**
     * @return Whether the operator control is a default Operator Control.
     * 
     */
    private Boolean isDefaultOperatorControl;
    /**
     * @return Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
     * 
     */
    private Boolean isFullyPreApproved;
    /**
     * @return Description associated with the latest modification of the operator control.
     * 
     */
    private String lastModifiedInfo;
    /**
     * @return Number of approvers required to approve an access request.
     * 
     */
    private Integer numberOfApprovers;
    private String operatorControlId;
    /**
     * @return Name of the operator control. The name must be unique.
     * 
     */
    private String operatorControlName;
    /**
     * @return List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be automatically approved if the access request only contain operator actions in the pre-approved list.
     * 
     */
    private List<String> preApprovedOpActionLists;
    /**
     * @return resourceType for which the OperatorControl is applicable
     * 
     */
    private String resourceType;
    /**
     * @return The current lifecycle state of the operator control.
     * 
     */
    private String state;
    /**
     * @return System message that would be displayed to the operator users on accessing the target resource under the governance of this operator control.
     * 
     */
    private String systemMessage;
    /**
     * @return Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeOfCreation;
    /**
     * @return Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
     * 
     */
    private String timeOfDeletion;
    /**
     * @return Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeOfModification;

    private GetControlResult() {}
    /**
     * @return List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
     * 
     */
    public List<String> approvalRequiredOpActionLists() {
        return this.approvalRequiredOpActionLists;
    }
    /**
     * @return List of user groups who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    public List<String> approverGroupsLists() {
        return this.approverGroupsLists;
    }
    /**
     * @return List of users who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    public List<String> approversLists() {
        return this.approversLists;
    }
    /**
     * @return The OCID of the compartment that contains the operator control.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description of operator control.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of emailId.
     * 
     */
    public List<String> emailIdLists() {
        return this.emailIdLists;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the operator control.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the operator control is a default Operator Control.
     * 
     */
    public Boolean isDefaultOperatorControl() {
        return this.isDefaultOperatorControl;
    }
    /**
     * @return Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
     * 
     */
    public Boolean isFullyPreApproved() {
        return this.isFullyPreApproved;
    }
    /**
     * @return Description associated with the latest modification of the operator control.
     * 
     */
    public String lastModifiedInfo() {
        return this.lastModifiedInfo;
    }
    /**
     * @return Number of approvers required to approve an access request.
     * 
     */
    public Integer numberOfApprovers() {
        return this.numberOfApprovers;
    }
    public String operatorControlId() {
        return this.operatorControlId;
    }
    /**
     * @return Name of the operator control. The name must be unique.
     * 
     */
    public String operatorControlName() {
        return this.operatorControlName;
    }
    /**
     * @return List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be automatically approved if the access request only contain operator actions in the pre-approved list.
     * 
     */
    public List<String> preApprovedOpActionLists() {
        return this.preApprovedOpActionLists;
    }
    /**
     * @return resourceType for which the OperatorControl is applicable
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The current lifecycle state of the operator control.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System message that would be displayed to the operator users on accessing the target resource under the governance of this operator control.
     * 
     */
    public String systemMessage() {
        return this.systemMessage;
    }
    /**
     * @return Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfCreation() {
        return this.timeOfCreation;
    }
    /**
     * @return Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfModification() {
        return this.timeOfModification;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> approvalRequiredOpActionLists;
        private List<String> approverGroupsLists;
        private List<String> approversLists;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private List<String> emailIdLists;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isDefaultOperatorControl;
        private Boolean isFullyPreApproved;
        private String lastModifiedInfo;
        private Integer numberOfApprovers;
        private String operatorControlId;
        private String operatorControlName;
        private List<String> preApprovedOpActionLists;
        private String resourceType;
        private String state;
        private String systemMessage;
        private String timeOfCreation;
        private String timeOfDeletion;
        private String timeOfModification;
        public Builder() {}
        public Builder(GetControlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalRequiredOpActionLists = defaults.approvalRequiredOpActionLists;
    	      this.approverGroupsLists = defaults.approverGroupsLists;
    	      this.approversLists = defaults.approversLists;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.emailIdLists = defaults.emailIdLists;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isDefaultOperatorControl = defaults.isDefaultOperatorControl;
    	      this.isFullyPreApproved = defaults.isFullyPreApproved;
    	      this.lastModifiedInfo = defaults.lastModifiedInfo;
    	      this.numberOfApprovers = defaults.numberOfApprovers;
    	      this.operatorControlId = defaults.operatorControlId;
    	      this.operatorControlName = defaults.operatorControlName;
    	      this.preApprovedOpActionLists = defaults.preApprovedOpActionLists;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.systemMessage = defaults.systemMessage;
    	      this.timeOfCreation = defaults.timeOfCreation;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.timeOfModification = defaults.timeOfModification;
        }

        @CustomType.Setter
        public Builder approvalRequiredOpActionLists(List<String> approvalRequiredOpActionLists) {
            if (approvalRequiredOpActionLists == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "approvalRequiredOpActionLists");
            }
            this.approvalRequiredOpActionLists = approvalRequiredOpActionLists;
            return this;
        }
        public Builder approvalRequiredOpActionLists(String... approvalRequiredOpActionLists) {
            return approvalRequiredOpActionLists(List.of(approvalRequiredOpActionLists));
        }
        @CustomType.Setter
        public Builder approverGroupsLists(List<String> approverGroupsLists) {
            if (approverGroupsLists == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "approverGroupsLists");
            }
            this.approverGroupsLists = approverGroupsLists;
            return this;
        }
        public Builder approverGroupsLists(String... approverGroupsLists) {
            return approverGroupsLists(List.of(approverGroupsLists));
        }
        @CustomType.Setter
        public Builder approversLists(List<String> approversLists) {
            if (approversLists == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "approversLists");
            }
            this.approversLists = approversLists;
            return this;
        }
        public Builder approversLists(String... approversLists) {
            return approversLists(List.of(approversLists));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder emailIdLists(List<String> emailIdLists) {
            if (emailIdLists == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "emailIdLists");
            }
            this.emailIdLists = emailIdLists;
            return this;
        }
        public Builder emailIdLists(String... emailIdLists) {
            return emailIdLists(List.of(emailIdLists));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultOperatorControl(Boolean isDefaultOperatorControl) {
            if (isDefaultOperatorControl == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "isDefaultOperatorControl");
            }
            this.isDefaultOperatorControl = isDefaultOperatorControl;
            return this;
        }
        @CustomType.Setter
        public Builder isFullyPreApproved(Boolean isFullyPreApproved) {
            if (isFullyPreApproved == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "isFullyPreApproved");
            }
            this.isFullyPreApproved = isFullyPreApproved;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedInfo(String lastModifiedInfo) {
            if (lastModifiedInfo == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "lastModifiedInfo");
            }
            this.lastModifiedInfo = lastModifiedInfo;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfApprovers(Integer numberOfApprovers) {
            if (numberOfApprovers == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "numberOfApprovers");
            }
            this.numberOfApprovers = numberOfApprovers;
            return this;
        }
        @CustomType.Setter
        public Builder operatorControlId(String operatorControlId) {
            if (operatorControlId == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "operatorControlId");
            }
            this.operatorControlId = operatorControlId;
            return this;
        }
        @CustomType.Setter
        public Builder operatorControlName(String operatorControlName) {
            if (operatorControlName == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "operatorControlName");
            }
            this.operatorControlName = operatorControlName;
            return this;
        }
        @CustomType.Setter
        public Builder preApprovedOpActionLists(List<String> preApprovedOpActionLists) {
            if (preApprovedOpActionLists == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "preApprovedOpActionLists");
            }
            this.preApprovedOpActionLists = preApprovedOpActionLists;
            return this;
        }
        public Builder preApprovedOpActionLists(String... preApprovedOpActionLists) {
            return preApprovedOpActionLists(List.of(preApprovedOpActionLists));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemMessage(String systemMessage) {
            if (systemMessage == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "systemMessage");
            }
            this.systemMessage = systemMessage;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfCreation(String timeOfCreation) {
            if (timeOfCreation == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "timeOfCreation");
            }
            this.timeOfCreation = timeOfCreation;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfModification(String timeOfModification) {
            if (timeOfModification == null) {
              throw new MissingRequiredPropertyException("GetControlResult", "timeOfModification");
            }
            this.timeOfModification = timeOfModification;
            return this;
        }
        public GetControlResult build() {
            final var _resultValue = new GetControlResult();
            _resultValue.approvalRequiredOpActionLists = approvalRequiredOpActionLists;
            _resultValue.approverGroupsLists = approverGroupsLists;
            _resultValue.approversLists = approversLists;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.emailIdLists = emailIdLists;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isDefaultOperatorControl = isDefaultOperatorControl;
            _resultValue.isFullyPreApproved = isFullyPreApproved;
            _resultValue.lastModifiedInfo = lastModifiedInfo;
            _resultValue.numberOfApprovers = numberOfApprovers;
            _resultValue.operatorControlId = operatorControlId;
            _resultValue.operatorControlName = operatorControlName;
            _resultValue.preApprovedOpActionLists = preApprovedOpActionLists;
            _resultValue.resourceType = resourceType;
            _resultValue.state = state;
            _resultValue.systemMessage = systemMessage;
            _resultValue.timeOfCreation = timeOfCreation;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.timeOfModification = timeOfModification;
            return _resultValue;
        }
    }
}
