// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opsi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Opsi.inputs.OpsiConfigurationConfigItemMetadataArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpsiConfigurationConfigItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpsiConfigurationConfigItemArgs Empty = new OpsiConfigurationConfigItemArgs();

    /**
     * List of contexts in Operations Insights where this configuration item is applicable.
     * 
     */
    @Import(name="applicableContexts")
    private @Nullable Output<List<String>> applicableContexts;

    /**
     * @return List of contexts in Operations Insights where this configuration item is applicable.
     * 
     */
    public Optional<Output<List<String>>> applicableContexts() {
        return Optional.ofNullable(this.applicableContexts);
    }

    /**
     * (Updatable) Type of configuration item.
     * 
     */
    @Import(name="configItemType", required=true)
    private Output<String> configItemType;

    /**
     * @return (Updatable) Type of configuration item.
     * 
     */
    public Output<String> configItemType() {
        return this.configItemType;
    }

    /**
     * Value of configuration item.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return Value of configuration item.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * Configuration item metadata.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<OpsiConfigurationConfigItemMetadataArgs>> metadatas;

    /**
     * @return Configuration item metadata.
     * 
     */
    public Optional<Output<List<OpsiConfigurationConfigItemMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * (Updatable) Name of configuration item.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Name of configuration item.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) Value of configuration item.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return (Updatable) Value of configuration item.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private OpsiConfigurationConfigItemArgs() {}

    private OpsiConfigurationConfigItemArgs(OpsiConfigurationConfigItemArgs $) {
        this.applicableContexts = $.applicableContexts;
        this.configItemType = $.configItemType;
        this.defaultValue = $.defaultValue;
        this.metadatas = $.metadatas;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpsiConfigurationConfigItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpsiConfigurationConfigItemArgs $;

        public Builder() {
            $ = new OpsiConfigurationConfigItemArgs();
        }

        public Builder(OpsiConfigurationConfigItemArgs defaults) {
            $ = new OpsiConfigurationConfigItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicableContexts List of contexts in Operations Insights where this configuration item is applicable.
         * 
         * @return builder
         * 
         */
        public Builder applicableContexts(@Nullable Output<List<String>> applicableContexts) {
            $.applicableContexts = applicableContexts;
            return this;
        }

        /**
         * @param applicableContexts List of contexts in Operations Insights where this configuration item is applicable.
         * 
         * @return builder
         * 
         */
        public Builder applicableContexts(List<String> applicableContexts) {
            return applicableContexts(Output.of(applicableContexts));
        }

        /**
         * @param applicableContexts List of contexts in Operations Insights where this configuration item is applicable.
         * 
         * @return builder
         * 
         */
        public Builder applicableContexts(String... applicableContexts) {
            return applicableContexts(List.of(applicableContexts));
        }

        /**
         * @param configItemType (Updatable) Type of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder configItemType(Output<String> configItemType) {
            $.configItemType = configItemType;
            return this;
        }

        /**
         * @param configItemType (Updatable) Type of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder configItemType(String configItemType) {
            return configItemType(Output.of(configItemType));
        }

        /**
         * @param defaultValue Value of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue Value of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param metadatas Configuration item metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<OpsiConfigurationConfigItemMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Configuration item metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<OpsiConfigurationConfigItemMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Configuration item metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(OpsiConfigurationConfigItemMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param name (Updatable) Name of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value (Updatable) Value of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value (Updatable) Value of configuration item.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public OpsiConfigurationConfigItemArgs build() {
            if ($.configItemType == null) {
                throw new MissingRequiredPropertyException("OpsiConfigurationConfigItemArgs", "configItemType");
            }
            return $;
        }
    }

}
