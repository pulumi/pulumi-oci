// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opsi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInsightConnectionCredentialDetails {
    /**
     * @return Credential source name that had been added in Management Agent wallet. This value is only required when Credential set by CREDENTIALS_BY_SOURCE and is optional properties for ther others.
     * 
     */
    private @Nullable String credentialSourceName;
    /**
     * @return Credential type.
     * 
     */
    private String credentialType;
    /**
     * @return The credential [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) stored in management agent.
     * 
     */
    private @Nullable String namedCredentialId;
    /**
     * @return The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
     * 
     */
    private @Nullable String passwordSecretId;
    /**
     * @return database user role.
     * 
     */
    private @Nullable String role;
    /**
     * @return database user name.
     * 
     */
    private @Nullable String userName;

    private DatabaseInsightConnectionCredentialDetails() {}
    /**
     * @return Credential source name that had been added in Management Agent wallet. This value is only required when Credential set by CREDENTIALS_BY_SOURCE and is optional properties for ther others.
     * 
     */
    public Optional<String> credentialSourceName() {
        return Optional.ofNullable(this.credentialSourceName);
    }
    /**
     * @return Credential type.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    /**
     * @return The credential [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) stored in management agent.
     * 
     */
    public Optional<String> namedCredentialId() {
        return Optional.ofNullable(this.namedCredentialId);
    }
    /**
     * @return The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
     * 
     */
    public Optional<String> passwordSecretId() {
        return Optional.ofNullable(this.passwordSecretId);
    }
    /**
     * @return database user role.
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return database user name.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInsightConnectionCredentialDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String credentialSourceName;
        private String credentialType;
        private @Nullable String namedCredentialId;
        private @Nullable String passwordSecretId;
        private @Nullable String role;
        private @Nullable String userName;
        public Builder() {}
        public Builder(DatabaseInsightConnectionCredentialDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialSourceName = defaults.credentialSourceName;
    	      this.credentialType = defaults.credentialType;
    	      this.namedCredentialId = defaults.namedCredentialId;
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.role = defaults.role;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder credentialSourceName(@Nullable String credentialSourceName) {

            this.credentialSourceName = credentialSourceName;
            return this;
        }
        @CustomType.Setter
        public Builder credentialType(String credentialType) {
            if (credentialType == null) {
              throw new MissingRequiredPropertyException("DatabaseInsightConnectionCredentialDetails", "credentialType");
            }
            this.credentialType = credentialType;
            return this;
        }
        @CustomType.Setter
        public Builder namedCredentialId(@Nullable String namedCredentialId) {

            this.namedCredentialId = namedCredentialId;
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretId(@Nullable String passwordSecretId) {

            this.passwordSecretId = passwordSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {

            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {

            this.userName = userName;
            return this;
        }
        public DatabaseInsightConnectionCredentialDetails build() {
            final var _resultValue = new DatabaseInsightConnectionCredentialDetails();
            _resultValue.credentialSourceName = credentialSourceName;
            _resultValue.credentialType = credentialType;
            _resultValue.namedCredentialId = namedCredentialId;
            _resultValue.passwordSecretId = passwordSecretId;
            _resultValue.role = role;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
