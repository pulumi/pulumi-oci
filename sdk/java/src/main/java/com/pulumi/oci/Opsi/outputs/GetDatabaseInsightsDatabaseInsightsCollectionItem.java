// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opsi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail;
import com.pulumi.oci.Opsi.outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseInsightsDatabaseInsightsCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    private List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail> connectionCredentialDetails;
    /**
     * @return Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    private List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail> connectionDetails;
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    private List<GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail> credentialDetails;
    /**
     * @return A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
     * 
     */
    private String databaseConnectionStatusDetails;
    /**
     * @return Display name of database
     * 
     */
    private String databaseDisplayName;
    /**
     * @return Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
     * 
     */
    private String databaseId;
    /**
     * @return Name of database
     * 
     */
    private String databaseName;
    /**
     * @return Oracle Cloud Infrastructure database resource type
     * 
     */
    private String databaseResourceType;
    /**
     * @return Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
     * 
     */
    private String databaseType;
    /**
     * @return The version of the database.
     * 
     */
    private String databaseVersion;
    private String dbmPrivateEndpointId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    private String deploymentType;
    /**
     * @return Unique Enterprise Manager bridge identifier
     * 
     */
    private String enterpriseManagerBridgeId;
    /**
     * @return Enterprise Manager Entity Display Name
     * 
     */
    private String enterpriseManagerEntityDisplayName;
    /**
     * @return Enterprise Manager Entity Unique Identifier
     * 
     */
    private String enterpriseManagerEntityIdentifier;
    /**
     * @return Enterprise Manager Entity Name
     * 
     */
    private String enterpriseManagerEntityName;
    /**
     * @return Enterprise Manager Entity Type
     * 
     */
    private String enterpriseManagerEntityType;
    /**
     * @return Enterprise Manager Unqiue Identifier
     * 
     */
    private String enterpriseManagerIdentifier;
    /**
     * @return Source of the database entity.
     * 
     */
    private String entitySource;
    /**
     * @return [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
     * 
     */
    private String exadataInsightId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Unique Operations Insights PrivateEndpoint identifier
     * 
     */
    private String opsiPrivateEndpointId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
     * 
     */
    private String parentId;
    /**
     * @return Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
     * 
     */
    private Integer processorCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
     * 
     */
    private String rootId;
    /**
     * @return Database service name used for connection requests.
     * 
     */
    private String serviceName;
    /**
     * @return Lifecycle states
     * 
     */
    private String state;
    /**
     * @return Resource Status
     * 
     */
    private String status;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the the database insight was first enabled. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the database insight was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;

    private GetDatabaseInsightsDatabaseInsightsCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    public List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail> connectionCredentialDetails() {
        return this.connectionCredentialDetails;
    }
    /**
     * @return Connection details to connect to the database. HostName, protocol, and port should be specified.
     * 
     */
    public List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail> connectionDetails() {
        return this.connectionDetails;
    }
    /**
     * @return User credential details to connect to the database. This is supplied via the External Database Service.
     * 
     */
    public List<GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail> credentialDetails() {
        return this.credentialDetails;
    }
    /**
     * @return A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
     * 
     */
    public String databaseConnectionStatusDetails() {
        return this.databaseConnectionStatusDetails;
    }
    /**
     * @return Display name of database
     * 
     */
    public String databaseDisplayName() {
        return this.databaseDisplayName;
    }
    /**
     * @return Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return Name of database
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Oracle Cloud Infrastructure database resource type
     * 
     */
    public String databaseResourceType() {
        return this.databaseResourceType;
    }
    /**
     * @return Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The version of the database.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    public String dbmPrivateEndpointId() {
        return this.dbmPrivateEndpointId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return Unique Enterprise Manager bridge identifier
     * 
     */
    public String enterpriseManagerBridgeId() {
        return this.enterpriseManagerBridgeId;
    }
    /**
     * @return Enterprise Manager Entity Display Name
     * 
     */
    public String enterpriseManagerEntityDisplayName() {
        return this.enterpriseManagerEntityDisplayName;
    }
    /**
     * @return Enterprise Manager Entity Unique Identifier
     * 
     */
    public String enterpriseManagerEntityIdentifier() {
        return this.enterpriseManagerEntityIdentifier;
    }
    /**
     * @return Enterprise Manager Entity Name
     * 
     */
    public String enterpriseManagerEntityName() {
        return this.enterpriseManagerEntityName;
    }
    /**
     * @return Enterprise Manager Entity Type
     * 
     */
    public String enterpriseManagerEntityType() {
        return this.enterpriseManagerEntityType;
    }
    /**
     * @return Enterprise Manager Unqiue Identifier
     * 
     */
    public String enterpriseManagerIdentifier() {
        return this.enterpriseManagerIdentifier;
    }
    /**
     * @return Source of the database entity.
     * 
     */
    public String entitySource() {
        return this.entitySource;
    }
    /**
     * @return [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
     * 
     */
    public String exadataInsightId() {
        return this.exadataInsightId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Unique Operations Insights PrivateEndpoint identifier
     * 
     */
    public String opsiPrivateEndpointId() {
        return this.opsiPrivateEndpointId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
     * 
     */
    public Integer processorCount() {
        return this.processorCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
     * 
     */
    public String rootId() {
        return this.rootId;
    }
    /**
     * @return Database service name used for connection requests.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Lifecycle states
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Resource Status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the database insight was first enabled. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the database insight was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInsightsDatabaseInsightsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail> connectionCredentialDetails;
        private List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail> connectionDetails;
        private List<GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail> credentialDetails;
        private String databaseConnectionStatusDetails;
        private String databaseDisplayName;
        private String databaseId;
        private String databaseName;
        private String databaseResourceType;
        private String databaseType;
        private String databaseVersion;
        private String dbmPrivateEndpointId;
        private Map<String,Object> definedTags;
        private String deploymentType;
        private String enterpriseManagerBridgeId;
        private String enterpriseManagerEntityDisplayName;
        private String enterpriseManagerEntityIdentifier;
        private String enterpriseManagerEntityName;
        private String enterpriseManagerEntityType;
        private String enterpriseManagerIdentifier;
        private String entitySource;
        private String exadataInsightId;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String opsiPrivateEndpointId;
        private String parentId;
        private Integer processorCount;
        private String rootId;
        private String serviceName;
        private String state;
        private String status;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDatabaseInsightsDatabaseInsightsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionCredentialDetails = defaults.connectionCredentialDetails;
    	      this.connectionDetails = defaults.connectionDetails;
    	      this.credentialDetails = defaults.credentialDetails;
    	      this.databaseConnectionStatusDetails = defaults.databaseConnectionStatusDetails;
    	      this.databaseDisplayName = defaults.databaseDisplayName;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseName = defaults.databaseName;
    	      this.databaseResourceType = defaults.databaseResourceType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.dbmPrivateEndpointId = defaults.dbmPrivateEndpointId;
    	      this.definedTags = defaults.definedTags;
    	      this.deploymentType = defaults.deploymentType;
    	      this.enterpriseManagerBridgeId = defaults.enterpriseManagerBridgeId;
    	      this.enterpriseManagerEntityDisplayName = defaults.enterpriseManagerEntityDisplayName;
    	      this.enterpriseManagerEntityIdentifier = defaults.enterpriseManagerEntityIdentifier;
    	      this.enterpriseManagerEntityName = defaults.enterpriseManagerEntityName;
    	      this.enterpriseManagerEntityType = defaults.enterpriseManagerEntityType;
    	      this.enterpriseManagerIdentifier = defaults.enterpriseManagerIdentifier;
    	      this.entitySource = defaults.entitySource;
    	      this.exadataInsightId = defaults.exadataInsightId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.opsiPrivateEndpointId = defaults.opsiPrivateEndpointId;
    	      this.parentId = defaults.parentId;
    	      this.processorCount = defaults.processorCount;
    	      this.rootId = defaults.rootId;
    	      this.serviceName = defaults.serviceName;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionCredentialDetails(List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail> connectionCredentialDetails) {
            this.connectionCredentialDetails = Objects.requireNonNull(connectionCredentialDetails);
            return this;
        }
        public Builder connectionCredentialDetails(GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail... connectionCredentialDetails) {
            return connectionCredentialDetails(List.of(connectionCredentialDetails));
        }
        @CustomType.Setter
        public Builder connectionDetails(List<GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail> connectionDetails) {
            this.connectionDetails = Objects.requireNonNull(connectionDetails);
            return this;
        }
        public Builder connectionDetails(GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail... connectionDetails) {
            return connectionDetails(List.of(connectionDetails));
        }
        @CustomType.Setter
        public Builder credentialDetails(List<GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail> credentialDetails) {
            this.credentialDetails = Objects.requireNonNull(credentialDetails);
            return this;
        }
        public Builder credentialDetails(GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail... credentialDetails) {
            return credentialDetails(List.of(credentialDetails));
        }
        @CustomType.Setter
        public Builder databaseConnectionStatusDetails(String databaseConnectionStatusDetails) {
            this.databaseConnectionStatusDetails = Objects.requireNonNull(databaseConnectionStatusDetails);
            return this;
        }
        @CustomType.Setter
        public Builder databaseDisplayName(String databaseDisplayName) {
            this.databaseDisplayName = Objects.requireNonNull(databaseDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder databaseResourceType(String databaseResourceType) {
            this.databaseResourceType = Objects.requireNonNull(databaseResourceType);
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }
        @CustomType.Setter
        public Builder dbmPrivateEndpointId(String dbmPrivateEndpointId) {
            this.dbmPrivateEndpointId = Objects.requireNonNull(dbmPrivateEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerBridgeId(String enterpriseManagerBridgeId) {
            this.enterpriseManagerBridgeId = Objects.requireNonNull(enterpriseManagerBridgeId);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerEntityDisplayName(String enterpriseManagerEntityDisplayName) {
            this.enterpriseManagerEntityDisplayName = Objects.requireNonNull(enterpriseManagerEntityDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerEntityIdentifier(String enterpriseManagerEntityIdentifier) {
            this.enterpriseManagerEntityIdentifier = Objects.requireNonNull(enterpriseManagerEntityIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerEntityName(String enterpriseManagerEntityName) {
            this.enterpriseManagerEntityName = Objects.requireNonNull(enterpriseManagerEntityName);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerEntityType(String enterpriseManagerEntityType) {
            this.enterpriseManagerEntityType = Objects.requireNonNull(enterpriseManagerEntityType);
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseManagerIdentifier(String enterpriseManagerIdentifier) {
            this.enterpriseManagerIdentifier = Objects.requireNonNull(enterpriseManagerIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder entitySource(String entitySource) {
            this.entitySource = Objects.requireNonNull(entitySource);
            return this;
        }
        @CustomType.Setter
        public Builder exadataInsightId(String exadataInsightId) {
            this.exadataInsightId = Objects.requireNonNull(exadataInsightId);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder opsiPrivateEndpointId(String opsiPrivateEndpointId) {
            this.opsiPrivateEndpointId = Objects.requireNonNull(opsiPrivateEndpointId);
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }
        @CustomType.Setter
        public Builder processorCount(Integer processorCount) {
            this.processorCount = Objects.requireNonNull(processorCount);
            return this;
        }
        @CustomType.Setter
        public Builder rootId(String rootId) {
            this.rootId = Objects.requireNonNull(rootId);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetDatabaseInsightsDatabaseInsightsCollectionItem build() {
            final var o = new GetDatabaseInsightsDatabaseInsightsCollectionItem();
            o.compartmentId = compartmentId;
            o.connectionCredentialDetails = connectionCredentialDetails;
            o.connectionDetails = connectionDetails;
            o.credentialDetails = credentialDetails;
            o.databaseConnectionStatusDetails = databaseConnectionStatusDetails;
            o.databaseDisplayName = databaseDisplayName;
            o.databaseId = databaseId;
            o.databaseName = databaseName;
            o.databaseResourceType = databaseResourceType;
            o.databaseType = databaseType;
            o.databaseVersion = databaseVersion;
            o.dbmPrivateEndpointId = dbmPrivateEndpointId;
            o.definedTags = definedTags;
            o.deploymentType = deploymentType;
            o.enterpriseManagerBridgeId = enterpriseManagerBridgeId;
            o.enterpriseManagerEntityDisplayName = enterpriseManagerEntityDisplayName;
            o.enterpriseManagerEntityIdentifier = enterpriseManagerEntityIdentifier;
            o.enterpriseManagerEntityName = enterpriseManagerEntityName;
            o.enterpriseManagerEntityType = enterpriseManagerEntityType;
            o.enterpriseManagerIdentifier = enterpriseManagerIdentifier;
            o.entitySource = entitySource;
            o.exadataInsightId = exadataInsightId;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.opsiPrivateEndpointId = opsiPrivateEndpointId;
            o.parentId = parentId;
            o.processorCount = processorCount;
            o.rootId = rootId;
            o.serviceName = serviceName;
            o.state = state;
            o.status = status;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
