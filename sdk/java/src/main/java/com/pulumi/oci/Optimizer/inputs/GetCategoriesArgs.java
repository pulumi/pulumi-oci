// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Optimizer.inputs.GetCategoriesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCategoriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCategoriesArgs Empty = new GetCategoriesArgs();

    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     * 
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    @Import(name="childTenancyIds")
    private @Nullable Output<List<String>> childTenancyIds;

    /**
     * @return A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     * 
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    public Optional<Output<List<String>>> childTenancyIds() {
        return Optional.ofNullable(this.childTenancyIds);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     * 
     */
    @Import(name="compartmentIdInSubtree", required=true)
    private Output<Boolean> compartmentIdInSubtree;

    /**
     * @return When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     * 
     */
    public Output<Boolean> compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetCategoriesFilterArgs>> filters;

    public Optional<Output<List<GetCategoriesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    @Import(name="includeOrganization")
    private @Nullable Output<Boolean> includeOrganization;

    /**
     * @return When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    public Optional<Output<Boolean>> includeOrganization() {
        return Optional.ofNullable(this.includeOrganization);
    }

    /**
     * Optional. A filter that returns results that match the name specified.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter that returns results that match the lifecycle state specified.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetCategoriesArgs() {}

    private GetCategoriesArgs(GetCategoriesArgs $) {
        this.childTenancyIds = $.childTenancyIds;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.includeOrganization = $.includeOrganization;
        this.name = $.name;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCategoriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCategoriesArgs $;

        public Builder() {
            $ = new GetCategoriesArgs();
        }

        public Builder(GetCategoriesArgs defaults) {
            $ = new GetCategoriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
         * 
         * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(@Nullable Output<List<String>> childTenancyIds) {
            $.childTenancyIds = childTenancyIds;
            return this;
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
         * 
         * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(List<String> childTenancyIds) {
            return childTenancyIds(Output.of(childTenancyIds));
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
         * 
         * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(String... childTenancyIds) {
            return childTenancyIds(List.of(childTenancyIds));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetCategoriesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetCategoriesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetCategoriesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param includeOrganization When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
         * 
         * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder includeOrganization(@Nullable Output<Boolean> includeOrganization) {
            $.includeOrganization = includeOrganization;
            return this;
        }

        /**
         * @param includeOrganization When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
         * 
         * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder includeOrganization(Boolean includeOrganization) {
            return includeOrganization(Output.of(includeOrganization));
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetCategoriesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetCategoriesArgs", "compartmentId");
            }
            if ($.compartmentIdInSubtree == null) {
                throw new MissingRequiredPropertyException("GetCategoriesArgs", "compartmentIdInSubtree");
            }
            return $;
        }
    }

}
