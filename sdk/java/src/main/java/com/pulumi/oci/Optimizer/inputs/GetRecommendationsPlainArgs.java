// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Optimizer.inputs.GetRecommendationsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecommendationsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRecommendationsPlainArgs Empty = new GetRecommendationsPlainArgs();

    /**
     * The unique OCID associated with the category.
     * 
     */
    @Import(name="categoryId")
    private @Nullable String categoryId;

    /**
     * @return The unique OCID associated with the category.
     * 
     */
    public Optional<String> categoryId() {
        return Optional.ofNullable(this.categoryId);
    }

    /**
     * Optional. A filter that returns results that match the category name specified.
     * 
     */
    @Import(name="categoryName")
    private @Nullable String categoryName;

    /**
     * @return Optional. A filter that returns results that match the category name specified.
     * 
     */
    public Optional<String> categoryName() {
        return Optional.ofNullable(this.categoryName);
    }

    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     */
    @Import(name="childTenancyIds")
    private @Nullable List<String> childTenancyIds;

    /**
     * @return A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     */
    public Optional<List<String>> childTenancyIds() {
        return Optional.ofNullable(this.childTenancyIds);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     */
    @Import(name="compartmentIdInSubtree", required=true)
    private Boolean compartmentIdInSubtree;

    /**
     * @return When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     */
    public Boolean compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    @Import(name="filters")
    private @Nullable List<GetRecommendationsFilter> filters;

    public Optional<List<GetRecommendationsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     */
    @Import(name="includeOrganization")
    private @Nullable Boolean includeOrganization;

    /**
     * @return When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     */
    public Optional<Boolean> includeOrganization() {
        return Optional.ofNullable(this.includeOrganization);
    }

    /**
     * Optional. A filter that returns results that match the name specified.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter that returns results that match the lifecycle state specified.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter that returns recommendations that match the status specified.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter that returns recommendations that match the status specified.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetRecommendationsPlainArgs() {}

    private GetRecommendationsPlainArgs(GetRecommendationsPlainArgs $) {
        this.categoryId = $.categoryId;
        this.categoryName = $.categoryName;
        this.childTenancyIds = $.childTenancyIds;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.includeOrganization = $.includeOrganization;
        this.name = $.name;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecommendationsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecommendationsPlainArgs $;

        public Builder() {
            $ = new GetRecommendationsPlainArgs();
        }

        public Builder(GetRecommendationsPlainArgs defaults) {
            $ = new GetRecommendationsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryId The unique OCID associated with the category.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(@Nullable String categoryId) {
            $.categoryId = categoryId;
            return this;
        }

        /**
         * @param categoryName Optional. A filter that returns results that match the category name specified.
         * 
         * @return builder
         * 
         */
        public Builder categoryName(@Nullable String categoryName) {
            $.categoryName = categoryName;
            return this;
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(@Nullable List<String> childTenancyIds) {
            $.childTenancyIds = childTenancyIds;
            return this;
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(String... childTenancyIds) {
            return childTenancyIds(List.of(childTenancyIds));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetRecommendationsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRecommendationsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param includeOrganization When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
         * 
         * @return builder
         * 
         */
        public Builder includeOrganization(@Nullable Boolean includeOrganization) {
            $.includeOrganization = includeOrganization;
            return this;
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param status A filter that returns recommendations that match the status specified.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetRecommendationsPlainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.compartmentIdInSubtree = Objects.requireNonNull($.compartmentIdInSubtree, "expected parameter 'compartmentIdInSubtree' to be non-null");
            return $;
        }
    }

}
