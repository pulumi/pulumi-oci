// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Optimizer.inputs.GetResourceActionsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResourceActionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResourceActionsPlainArgs Empty = new GetResourceActionsPlainArgs();

    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     * 
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    @Import(name="childTenancyIds")
    private @Nullable List<String> childTenancyIds;

    /**
     * @return A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
     * 
     * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     * 
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    public Optional<List<String>> childTenancyIds() {
        return Optional.ofNullable(this.childTenancyIds);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     * 
     */
    @Import(name="compartmentIdInSubtree", required=true)
    private Boolean compartmentIdInSubtree;

    /**
     * @return When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     * 
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     * 
     */
    public Boolean compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    @Import(name="filters")
    private @Nullable List<GetResourceActionsFilter> filters;

    public Optional<List<GetResourceActionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    @Import(name="includeOrganization")
    private @Nullable Boolean includeOrganization;

    /**
     * @return When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     * 
     * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     * 
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     * 
     */
    public Optional<Boolean> includeOrganization() {
        return Optional.ofNullable(this.includeOrganization);
    }

    /**
     * Supplement additional resource information in extended metadata response.
     * 
     */
    @Import(name="includeResourceMetadata")
    private @Nullable Boolean includeResourceMetadata;

    /**
     * @return Supplement additional resource information in extended metadata response.
     * 
     */
    public Optional<Boolean> includeResourceMetadata() {
        return Optional.ofNullable(this.includeResourceMetadata);
    }

    /**
     * Optional. A filter that returns results that match the name specified.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The unique OCID associated with the recommendation.
     * 
     */
    @Import(name="recommendationId")
    private @Nullable String recommendationId;

    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    public Optional<String> recommendationId() {
        return Optional.ofNullable(this.recommendationId);
    }

    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    @Import(name="recommendationName")
    private @Nullable String recommendationName;

    /**
     * @return Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    public Optional<String> recommendationName() {
        return Optional.ofNullable(this.recommendationName);
    }

    /**
     * Optional. A filter that returns results that match the resource type specified.
     * 
     */
    @Import(name="resourceType")
    private @Nullable String resourceType;

    /**
     * @return Optional. A filter that returns results that match the resource type specified.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A filter that returns results that match the lifecycle state specified.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter that returns recommendations that match the status specified.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter that returns recommendations that match the status specified.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetResourceActionsPlainArgs() {}

    private GetResourceActionsPlainArgs(GetResourceActionsPlainArgs $) {
        this.childTenancyIds = $.childTenancyIds;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.includeOrganization = $.includeOrganization;
        this.includeResourceMetadata = $.includeResourceMetadata;
        this.name = $.name;
        this.recommendationId = $.recommendationId;
        this.recommendationName = $.recommendationName;
        this.resourceType = $.resourceType;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResourceActionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResourceActionsPlainArgs $;

        public Builder() {
            $ = new GetResourceActionsPlainArgs();
        }

        public Builder(GetResourceActionsPlainArgs defaults) {
            $ = new GetResourceActionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
         * 
         * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(@Nullable List<String> childTenancyIds) {
            $.childTenancyIds = childTenancyIds;
            return this;
        }

        /**
         * @param childTenancyIds A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
         * 
         * If this list contains a tenancy id that isn&#39;t part of the organization of parent P, the request will  fail. That is, let&#39;s say there is an organization with parent P with children A and B, and also one  other tenant T that isn&#39;t part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
         * 
         * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder childTenancyIds(String... childTenancyIds) {
            return childTenancyIds(List.of(childTenancyIds));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
         * 
         * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetResourceActionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetResourceActionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param includeOrganization When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
         * 
         * Please note that this parameter shouldn&#39;t be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
         * 
         * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
         * 
         * @return builder
         * 
         */
        public Builder includeOrganization(@Nullable Boolean includeOrganization) {
            $.includeOrganization = includeOrganization;
            return this;
        }

        /**
         * @param includeResourceMetadata Supplement additional resource information in extended metadata response.
         * 
         * @return builder
         * 
         */
        public Builder includeResourceMetadata(@Nullable Boolean includeResourceMetadata) {
            $.includeResourceMetadata = includeResourceMetadata;
            return this;
        }

        /**
         * @param name Optional. A filter that returns results that match the name specified.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param recommendationId The unique OCID associated with the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder recommendationId(@Nullable String recommendationId) {
            $.recommendationId = recommendationId;
            return this;
        }

        /**
         * @param recommendationName Optional. A filter that returns results that match the recommendation name specified.
         * 
         * @return builder
         * 
         */
        public Builder recommendationName(@Nullable String recommendationName) {
            $.recommendationName = recommendationName;
            return this;
        }

        /**
         * @param resourceType Optional. A filter that returns results that match the resource type specified.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param state A filter that returns results that match the lifecycle state specified.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param status A filter that returns recommendations that match the status specified.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetResourceActionsPlainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.compartmentIdInSubtree = Objects.requireNonNull($.compartmentIdInSubtree, "expected parameter 'compartmentIdInSubtree' to be non-null");
            return $;
        }
    }

}
