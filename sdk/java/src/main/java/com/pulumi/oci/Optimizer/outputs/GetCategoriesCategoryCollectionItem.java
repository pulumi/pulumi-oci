// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Optimizer.outputs.GetCategoriesCategoryCollectionItemRecommendationCount;
import com.pulumi.oci.Optimizer.outputs.GetCategoriesCategoryCollectionItemResourceCount;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCategoriesCategoryCollectionItem {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The name associated with the compartment.
     * 
     */
    private String compartmentName;
    /**
     * @return Text describing the category.
     * 
     */
    private String description;
    /**
     * @return The estimated cost savings, in dollars, for the category.
     * 
     */
    private Double estimatedCostSaving;
    /**
     * @return Additional metadata key/value pairs for the category.
     * 
     */
    private Map<String,Object> extendedMetadata;
    /**
     * @return The unique OCID of the category.
     * 
     */
    private String id;
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    private String name;
    /**
     * @return An array of `RecommendationCount` objects grouped by the level of importance assigned to the recommendation.
     * 
     */
    private List<GetCategoriesCategoryCollectionItemRecommendationCount> recommendationCounts;
    /**
     * @return An array of `ResourceCount` objects grouped by the status of the recommendation.
     * 
     */
    private List<GetCategoriesCategoryCollectionItemResourceCount> resourceCounts;
    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    private String state;
    /**
     * @return The date and time the category details were created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the category details were last updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetCategoriesCategoryCollectionItem() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name associated with the compartment.
     * 
     */
    public String compartmentName() {
        return this.compartmentName;
    }
    /**
     * @return Text describing the category.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The estimated cost savings, in dollars, for the category.
     * 
     */
    public Double estimatedCostSaving() {
        return this.estimatedCostSaving;
    }
    /**
     * @return Additional metadata key/value pairs for the category.
     * 
     */
    public Map<String,Object> extendedMetadata() {
        return this.extendedMetadata;
    }
    /**
     * @return The unique OCID of the category.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An array of `RecommendationCount` objects grouped by the level of importance assigned to the recommendation.
     * 
     */
    public List<GetCategoriesCategoryCollectionItemRecommendationCount> recommendationCounts() {
        return this.recommendationCounts;
    }
    /**
     * @return An array of `ResourceCount` objects grouped by the status of the recommendation.
     * 
     */
    public List<GetCategoriesCategoryCollectionItemResourceCount> resourceCounts() {
        return this.resourceCounts;
    }
    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the category details were created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the category details were last updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCategoriesCategoryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String compartmentName;
        private String description;
        private Double estimatedCostSaving;
        private Map<String,Object> extendedMetadata;
        private String id;
        private String name;
        private List<GetCategoriesCategoryCollectionItemRecommendationCount> recommendationCounts;
        private List<GetCategoriesCategoryCollectionItemResourceCount> resourceCounts;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetCategoriesCategoryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentName = defaults.compartmentName;
    	      this.description = defaults.description;
    	      this.estimatedCostSaving = defaults.estimatedCostSaving;
    	      this.extendedMetadata = defaults.extendedMetadata;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.recommendationCounts = defaults.recommendationCounts;
    	      this.resourceCounts = defaults.resourceCounts;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentName(String compartmentName) {
            if (compartmentName == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "compartmentName");
            }
            this.compartmentName = compartmentName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedCostSaving(Double estimatedCostSaving) {
            if (estimatedCostSaving == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "estimatedCostSaving");
            }
            this.estimatedCostSaving = estimatedCostSaving;
            return this;
        }
        @CustomType.Setter
        public Builder extendedMetadata(Map<String,Object> extendedMetadata) {
            if (extendedMetadata == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "extendedMetadata");
            }
            this.extendedMetadata = extendedMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder recommendationCounts(List<GetCategoriesCategoryCollectionItemRecommendationCount> recommendationCounts) {
            if (recommendationCounts == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "recommendationCounts");
            }
            this.recommendationCounts = recommendationCounts;
            return this;
        }
        public Builder recommendationCounts(GetCategoriesCategoryCollectionItemRecommendationCount... recommendationCounts) {
            return recommendationCounts(List.of(recommendationCounts));
        }
        @CustomType.Setter
        public Builder resourceCounts(List<GetCategoriesCategoryCollectionItemResourceCount> resourceCounts) {
            if (resourceCounts == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "resourceCounts");
            }
            this.resourceCounts = resourceCounts;
            return this;
        }
        public Builder resourceCounts(GetCategoriesCategoryCollectionItemResourceCount... resourceCounts) {
            return resourceCounts(List.of(resourceCounts));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetCategoriesCategoryCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetCategoriesCategoryCollectionItem build() {
            final var _resultValue = new GetCategoriesCategoryCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentName = compartmentName;
            _resultValue.description = description;
            _resultValue.estimatedCostSaving = estimatedCostSaving;
            _resultValue.extendedMetadata = extendedMetadata;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.recommendationCounts = recommendationCounts;
            _resultValue.resourceCounts = resourceCounts;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
