// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Optimizer.outputs.GetCategoriesCategoryCollection;
import com.pulumi.oci.Optimizer.outputs.GetCategoriesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCategoriesResult {
    /**
     * @return The list of category_collection.
     * 
     */
    private List<GetCategoriesCategoryCollection> categoryCollections;
    private @Nullable List<String> childTenancyIds;
    /**
     * @return The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    private String compartmentId;
    private Boolean compartmentIdInSubtree;
    private @Nullable List<GetCategoriesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includeOrganization;
    /**
     * @return The name assigned to the category.
     * 
     */
    private @Nullable String name;
    /**
     * @return The category&#39;s current state.
     * 
     */
    private @Nullable String state;

    private GetCategoriesResult() {}
    /**
     * @return The list of category_collection.
     * 
     */
    public List<GetCategoriesCategoryCollection> categoryCollections() {
        return this.categoryCollections;
    }
    public List<String> childTenancyIds() {
        return this.childTenancyIds == null ? List.of() : this.childTenancyIds;
    }
    /**
     * @return The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Boolean compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }
    public List<GetCategoriesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includeOrganization() {
        return Optional.ofNullable(this.includeOrganization);
    }
    /**
     * @return The name assigned to the category.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The category&#39;s current state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCategoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCategoriesCategoryCollection> categoryCollections;
        private @Nullable List<String> childTenancyIds;
        private String compartmentId;
        private Boolean compartmentIdInSubtree;
        private @Nullable List<GetCategoriesFilter> filters;
        private String id;
        private @Nullable Boolean includeOrganization;
        private @Nullable String name;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetCategoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryCollections = defaults.categoryCollections;
    	      this.childTenancyIds = defaults.childTenancyIds;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.includeOrganization = defaults.includeOrganization;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder categoryCollections(List<GetCategoriesCategoryCollection> categoryCollections) {
            if (categoryCollections == null) {
              throw new MissingRequiredPropertyException("GetCategoriesResult", "categoryCollections");
            }
            this.categoryCollections = categoryCollections;
            return this;
        }
        public Builder categoryCollections(GetCategoriesCategoryCollection... categoryCollections) {
            return categoryCollections(List.of(categoryCollections));
        }
        @CustomType.Setter
        public Builder childTenancyIds(@Nullable List<String> childTenancyIds) {

            this.childTenancyIds = childTenancyIds;
            return this;
        }
        public Builder childTenancyIds(String... childTenancyIds) {
            return childTenancyIds(List.of(childTenancyIds));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCategoriesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            if (compartmentIdInSubtree == null) {
              throw new MissingRequiredPropertyException("GetCategoriesResult", "compartmentIdInSubtree");
            }
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetCategoriesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetCategoriesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCategoriesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeOrganization(@Nullable Boolean includeOrganization) {

            this.includeOrganization = includeOrganization;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetCategoriesResult build() {
            final var _resultValue = new GetCategoriesResult();
            _resultValue.categoryCollections = categoryCollections;
            _resultValue.childTenancyIds = childTenancyIds;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.includeOrganization = includeOrganization;
            _resultValue.name = name;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
