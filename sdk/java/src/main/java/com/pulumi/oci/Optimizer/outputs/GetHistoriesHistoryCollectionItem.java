// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Optimizer.outputs.GetHistoriesHistoryCollectionItemAction;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHistoriesHistoryCollectionItem {
    /**
     * @return Details about the recommended action.
     * 
     */
    private List<GetHistoriesHistoryCollectionItemAction> actions;
    /**
     * @return The unique OCID associated with the category.
     * 
     */
    private String categoryId;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The name assigned to the compartment.
     * 
     */
    private String compartmentName;
    /**
     * @return The estimated cost savings, in dollars, for the resource action.
     * 
     */
    private Double estimatedCostSaving;
    /**
     * @return Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
     * 
     */
    private Map<String,Object> extendedMetadata;
    /**
     * @return The unique OCID associated with the recommendation history.
     * 
     */
    private String id;
    /**
     * @return Custom metadata key/value pairs for the resource action.
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    private String name;
    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    private String recommendationId;
    /**
     * @return Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    private String recommendationName;
    /**
     * @return The unique OCID associated with the resource action.
     * 
     */
    private String resourceActionId;
    /**
     * @return The unique OCID associated with the resource.
     * 
     */
    private String resourceId;
    /**
     * @return Optional. A filter that returns results that match the resource type specified.
     * 
     */
    private String resourceType;
    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    private String state;
    /**
     * @return A filter that returns recommendations that match the status specified.
     * 
     */
    private String status;
    /**
     * @return The date and time the recommendation history was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;

    private GetHistoriesHistoryCollectionItem() {}
    /**
     * @return Details about the recommended action.
     * 
     */
    public List<GetHistoriesHistoryCollectionItemAction> actions() {
        return this.actions;
    }
    /**
     * @return The unique OCID associated with the category.
     * 
     */
    public String categoryId() {
        return this.categoryId;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name assigned to the compartment.
     * 
     */
    public String compartmentName() {
        return this.compartmentName;
    }
    /**
     * @return The estimated cost savings, in dollars, for the resource action.
     * 
     */
    public Double estimatedCostSaving() {
        return this.estimatedCostSaving;
    }
    /**
     * @return Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
     * 
     */
    public Map<String,Object> extendedMetadata() {
        return this.extendedMetadata;
    }
    /**
     * @return The unique OCID associated with the recommendation history.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Custom metadata key/value pairs for the resource action.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    public String recommendationId() {
        return this.recommendationId;
    }
    /**
     * @return Optional. A filter that returns results that match the recommendation name specified.
     * 
     */
    public String recommendationName() {
        return this.recommendationName;
    }
    /**
     * @return The unique OCID associated with the resource action.
     * 
     */
    public String resourceActionId() {
        return this.resourceActionId;
    }
    /**
     * @return The unique OCID associated with the resource.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return Optional. A filter that returns results that match the resource type specified.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return A filter that returns results that match the lifecycle state specified.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A filter that returns recommendations that match the status specified.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time the recommendation history was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHistoriesHistoryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetHistoriesHistoryCollectionItemAction> actions;
        private String categoryId;
        private String compartmentId;
        private String compartmentName;
        private Double estimatedCostSaving;
        private Map<String,Object> extendedMetadata;
        private String id;
        private Map<String,Object> metadata;
        private String name;
        private String recommendationId;
        private String recommendationName;
        private String resourceActionId;
        private String resourceId;
        private String resourceType;
        private String state;
        private String status;
        private String timeCreated;
        public Builder() {}
        public Builder(GetHistoriesHistoryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.categoryId = defaults.categoryId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentName = defaults.compartmentName;
    	      this.estimatedCostSaving = defaults.estimatedCostSaving;
    	      this.extendedMetadata = defaults.extendedMetadata;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.recommendationId = defaults.recommendationId;
    	      this.recommendationName = defaults.recommendationName;
    	      this.resourceActionId = defaults.resourceActionId;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder actions(List<GetHistoriesHistoryCollectionItemAction> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(GetHistoriesHistoryCollectionItemAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder categoryId(String categoryId) {
            this.categoryId = Objects.requireNonNull(categoryId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentName(String compartmentName) {
            this.compartmentName = Objects.requireNonNull(compartmentName);
            return this;
        }
        @CustomType.Setter
        public Builder estimatedCostSaving(Double estimatedCostSaving) {
            this.estimatedCostSaving = Objects.requireNonNull(estimatedCostSaving);
            return this;
        }
        @CustomType.Setter
        public Builder extendedMetadata(Map<String,Object> extendedMetadata) {
            this.extendedMetadata = Objects.requireNonNull(extendedMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder recommendationId(String recommendationId) {
            this.recommendationId = Objects.requireNonNull(recommendationId);
            return this;
        }
        @CustomType.Setter
        public Builder recommendationName(String recommendationName) {
            this.recommendationName = Objects.requireNonNull(recommendationName);
            return this;
        }
        @CustomType.Setter
        public Builder resourceActionId(String resourceActionId) {
            this.resourceActionId = Objects.requireNonNull(resourceActionId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public GetHistoriesHistoryCollectionItem build() {
            final var _resultValue = new GetHistoriesHistoryCollectionItem();
            _resultValue.actions = actions;
            _resultValue.categoryId = categoryId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentName = compartmentName;
            _resultValue.estimatedCostSaving = estimatedCostSaving;
            _resultValue.extendedMetadata = extendedMetadata;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.recommendationId = recommendationId;
            _resultValue.recommendationName = recommendationName;
            _resultValue.resourceActionId = resourceActionId;
            _resultValue.resourceId = resourceId;
            _resultValue.resourceType = resourceType;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
