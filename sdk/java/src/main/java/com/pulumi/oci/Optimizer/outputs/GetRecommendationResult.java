// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Optimizer.outputs.GetRecommendationResourceCount;
import com.pulumi.oci.Optimizer.outputs.GetRecommendationSupportedLevel;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRecommendationResult {
    /**
     * @return The unique OCID associated with the category.
     * 
     */
    private String categoryId;
    /**
     * @return The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Text describing the recommendation.
     * 
     */
    private String description;
    /**
     * @return The estimated cost savings, in dollars, for the recommendation.
     * 
     */
    private Double estimatedCostSaving;
    /**
     * @return Additional metadata key/value pairs for the recommendation.
     * 
     */
    private Map<String,String> extendedMetadata;
    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    private String id;
    /**
     * @return The level of importance assigned to the recommendation.
     * 
     */
    private String importance;
    /**
     * @return The name of the profile level.
     * 
     */
    private String name;
    private String recommendationId;
    /**
     * @return An array of `ResourceCount` objects grouped by the status of the resource actions.
     * 
     */
    private List<GetRecommendationResourceCount> resourceCounts;
    /**
     * @return The recommendation&#39;s current state.
     * 
     */
    private String state;
    /**
     * @return The current status of the recommendation.
     * 
     */
    private String status;
    /**
     * @return Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     * 
     */
    private List<GetRecommendationSupportedLevel> supportedLevels;
    /**
     * @return The date and time the recommendation details were created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     * 
     */
    private String timeStatusBegin;
    /**
     * @return The date and time the current status will change. The format is defined by RFC3339.
     * 
     */
    private String timeStatusEnd;
    /**
     * @return The date and time the recommendation details were last updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetRecommendationResult() {}
    /**
     * @return The unique OCID associated with the category.
     * 
     */
    public String categoryId() {
        return this.categoryId;
    }
    /**
     * @return The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Text describing the recommendation.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The estimated cost savings, in dollars, for the recommendation.
     * 
     */
    public Double estimatedCostSaving() {
        return this.estimatedCostSaving;
    }
    /**
     * @return Additional metadata key/value pairs for the recommendation.
     * 
     */
    public Map<String,String> extendedMetadata() {
        return this.extendedMetadata;
    }
    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The level of importance assigned to the recommendation.
     * 
     */
    public String importance() {
        return this.importance;
    }
    /**
     * @return The name of the profile level.
     * 
     */
    public String name() {
        return this.name;
    }
    public String recommendationId() {
        return this.recommendationId;
    }
    /**
     * @return An array of `ResourceCount` objects grouped by the status of the resource actions.
     * 
     */
    public List<GetRecommendationResourceCount> resourceCounts() {
        return this.resourceCounts;
    }
    /**
     * @return The recommendation&#39;s current state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The current status of the recommendation.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     * 
     */
    public List<GetRecommendationSupportedLevel> supportedLevels() {
        return this.supportedLevels;
    }
    /**
     * @return The date and time the recommendation details were created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     * 
     */
    public String timeStatusBegin() {
        return this.timeStatusBegin;
    }
    /**
     * @return The date and time the current status will change. The format is defined by RFC3339.
     * 
     */
    public String timeStatusEnd() {
        return this.timeStatusEnd;
    }
    /**
     * @return The date and time the recommendation details were last updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecommendationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String categoryId;
        private String compartmentId;
        private String description;
        private Double estimatedCostSaving;
        private Map<String,String> extendedMetadata;
        private String id;
        private String importance;
        private String name;
        private String recommendationId;
        private List<GetRecommendationResourceCount> resourceCounts;
        private String state;
        private String status;
        private List<GetRecommendationSupportedLevel> supportedLevels;
        private String timeCreated;
        private String timeStatusBegin;
        private String timeStatusEnd;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetRecommendationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryId = defaults.categoryId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.estimatedCostSaving = defaults.estimatedCostSaving;
    	      this.extendedMetadata = defaults.extendedMetadata;
    	      this.id = defaults.id;
    	      this.importance = defaults.importance;
    	      this.name = defaults.name;
    	      this.recommendationId = defaults.recommendationId;
    	      this.resourceCounts = defaults.resourceCounts;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.supportedLevels = defaults.supportedLevels;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStatusBegin = defaults.timeStatusBegin;
    	      this.timeStatusEnd = defaults.timeStatusEnd;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder categoryId(String categoryId) {
            if (categoryId == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "categoryId");
            }
            this.categoryId = categoryId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedCostSaving(Double estimatedCostSaving) {
            if (estimatedCostSaving == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "estimatedCostSaving");
            }
            this.estimatedCostSaving = estimatedCostSaving;
            return this;
        }
        @CustomType.Setter
        public Builder extendedMetadata(Map<String,String> extendedMetadata) {
            if (extendedMetadata == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "extendedMetadata");
            }
            this.extendedMetadata = extendedMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder importance(String importance) {
            if (importance == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "importance");
            }
            this.importance = importance;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder recommendationId(String recommendationId) {
            if (recommendationId == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "recommendationId");
            }
            this.recommendationId = recommendationId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCounts(List<GetRecommendationResourceCount> resourceCounts) {
            if (resourceCounts == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "resourceCounts");
            }
            this.resourceCounts = resourceCounts;
            return this;
        }
        public Builder resourceCounts(GetRecommendationResourceCount... resourceCounts) {
            return resourceCounts(List.of(resourceCounts));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder supportedLevels(List<GetRecommendationSupportedLevel> supportedLevels) {
            if (supportedLevels == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "supportedLevels");
            }
            this.supportedLevels = supportedLevels;
            return this;
        }
        public Builder supportedLevels(GetRecommendationSupportedLevel... supportedLevels) {
            return supportedLevels(List.of(supportedLevels));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStatusBegin(String timeStatusBegin) {
            if (timeStatusBegin == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "timeStatusBegin");
            }
            this.timeStatusBegin = timeStatusBegin;
            return this;
        }
        @CustomType.Setter
        public Builder timeStatusEnd(String timeStatusEnd) {
            if (timeStatusEnd == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "timeStatusEnd");
            }
            this.timeStatusEnd = timeStatusEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetRecommendationResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetRecommendationResult build() {
            final var _resultValue = new GetRecommendationResult();
            _resultValue.categoryId = categoryId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.estimatedCostSaving = estimatedCostSaving;
            _resultValue.extendedMetadata = extendedMetadata;
            _resultValue.id = id;
            _resultValue.importance = importance;
            _resultValue.name = name;
            _resultValue.recommendationId = recommendationId;
            _resultValue.resourceCounts = resourceCounts;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.supportedLevels = supportedLevels;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeStatusBegin = timeStatusBegin;
            _resultValue.timeStatusEnd = timeStatusEnd;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
