// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition {
    /**
     * @return A default value used for the strategy parameter.
     * 
     */
    private List<Object> defaultValues;
    /**
     * @return Text describing the strategy parameter.
     * 
     */
    private String description;
    /**
     * @return Whether this parameter is required.
     * 
     */
    private Boolean isRequired;
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    private String name;
    /**
     * @return The list of possible values used for these strategy parameters.
     * 
     */
    private List<Object> possibleValues;
    /**
     * @return The type of strategy parameter.
     * 
     */
    private String type;

    private GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition() {}
    /**
     * @return A default value used for the strategy parameter.
     * 
     */
    public List<Object> defaultValues() {
        return this.defaultValues;
    }
    /**
     * @return Text describing the strategy parameter.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether this parameter is required.
     * 
     */
    public Boolean isRequired() {
        return this.isRequired;
    }
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of possible values used for these strategy parameters.
     * 
     */
    public List<Object> possibleValues() {
        return this.possibleValues;
    }
    /**
     * @return The type of strategy parameter.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Object> defaultValues;
        private String description;
        private Boolean isRequired;
        private String name;
        private List<Object> possibleValues;
        private String type;
        public Builder() {}
        public Builder(GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValues = defaults.defaultValues;
    	      this.description = defaults.description;
    	      this.isRequired = defaults.isRequired;
    	      this.name = defaults.name;
    	      this.possibleValues = defaults.possibleValues;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder defaultValues(List<Object> defaultValues) {
            if (defaultValues == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "defaultValues");
            }
            this.defaultValues = defaultValues;
            return this;
        }
        public Builder defaultValues(Object... defaultValues) {
            return defaultValues(List.of(defaultValues));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder isRequired(Boolean isRequired) {
            if (isRequired == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "isRequired");
            }
            this.isRequired = isRequired;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder possibleValues(List<Object> possibleValues) {
            if (possibleValues == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "possibleValues");
            }
            this.possibleValues = possibleValues;
            return this;
        }
        public Builder possibleValues(Object... possibleValues) {
            return possibleValues(List.of(possibleValues));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition", "type");
            }
            this.type = type;
            return this;
        }
        public GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition build() {
            final var _resultValue = new GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition();
            _resultValue.defaultValues = defaultValues;
            _resultValue.description = description;
            _resultValue.isRequired = isRequired;
            _resultValue.name = name;
            _resultValue.possibleValues = possibleValues;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
