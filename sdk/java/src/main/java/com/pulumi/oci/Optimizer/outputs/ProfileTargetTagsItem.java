// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ProfileTargetTagsItem {
    /**
     * @return (Updatable) The name you use to refer to the tag, also known as the tag key.
     * 
     */
    private String tagDefinitionName;
    /**
     * @return (Updatable) The name of the tag namespace.
     * 
     */
    private String tagNamespaceName;
    /**
     * @return (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
     * 
     * When the value for this field is `ANY`, the `tagValues` field should be empty, which enforces overrides to the recommendation for resources with any tag values attached to them.
     * 
     * When the value for this field value is `VALUE`, the `tagValues` field must include a specific value or list of values. Overrides to the recommendation criteria only occur for resources that match the values in the `tagValues` fields.
     * 
     */
    private String tagValueType;
    /**
     * @return (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable List<String> tagValues;

    private ProfileTargetTagsItem() {}
    /**
     * @return (Updatable) The name you use to refer to the tag, also known as the tag key.
     * 
     */
    public String tagDefinitionName() {
        return this.tagDefinitionName;
    }
    /**
     * @return (Updatable) The name of the tag namespace.
     * 
     */
    public String tagNamespaceName() {
        return this.tagNamespaceName;
    }
    /**
     * @return (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
     * 
     * When the value for this field is `ANY`, the `tagValues` field should be empty, which enforces overrides to the recommendation for resources with any tag values attached to them.
     * 
     * When the value for this field value is `VALUE`, the `tagValues` field must include a specific value or list of values. Overrides to the recommendation criteria only occur for resources that match the values in the `tagValues` fields.
     * 
     */
    public String tagValueType() {
        return this.tagValueType;
    }
    /**
     * @return (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public List<String> tagValues() {
        return this.tagValues == null ? List.of() : this.tagValues;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProfileTargetTagsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String tagDefinitionName;
        private String tagNamespaceName;
        private String tagValueType;
        private @Nullable List<String> tagValues;
        public Builder() {}
        public Builder(ProfileTargetTagsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.tagDefinitionName = defaults.tagDefinitionName;
    	      this.tagNamespaceName = defaults.tagNamespaceName;
    	      this.tagValueType = defaults.tagValueType;
    	      this.tagValues = defaults.tagValues;
        }

        @CustomType.Setter
        public Builder tagDefinitionName(String tagDefinitionName) {
            if (tagDefinitionName == null) {
              throw new MissingRequiredPropertyException("ProfileTargetTagsItem", "tagDefinitionName");
            }
            this.tagDefinitionName = tagDefinitionName;
            return this;
        }
        @CustomType.Setter
        public Builder tagNamespaceName(String tagNamespaceName) {
            if (tagNamespaceName == null) {
              throw new MissingRequiredPropertyException("ProfileTargetTagsItem", "tagNamespaceName");
            }
            this.tagNamespaceName = tagNamespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder tagValueType(String tagValueType) {
            if (tagValueType == null) {
              throw new MissingRequiredPropertyException("ProfileTargetTagsItem", "tagValueType");
            }
            this.tagValueType = tagValueType;
            return this;
        }
        @CustomType.Setter
        public Builder tagValues(@Nullable List<String> tagValues) {

            this.tagValues = tagValues;
            return this;
        }
        public Builder tagValues(String... tagValues) {
            return tagValues(List.of(tagValues));
        }
        public ProfileTargetTagsItem build() {
            final var _resultValue = new ProfileTargetTagsItem();
            _resultValue.tagDefinitionName = tagDefinitionName;
            _resultValue.tagNamespaceName = tagNamespaceName;
            _resultValue.tagValueType = tagValueType;
            _resultValue.tagValues = tagValues;
            return _resultValue;
        }
    }
}
