// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.OsManagement.ManagedInstanceArgs;
import com.pulumi.oci.OsManagement.inputs.ManagedInstanceState;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceAutonomouse;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceChildSoftwareSource;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceManagedInstanceGroup;
import com.pulumi.oci.OsManagement.outputs.ManagedInstanceParentSoftwareSource;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource provides the Managed Instance resource in Oracle Cloud Infrastructure OS Management service.
 * 
 * Updates a specific Managed Instance.
 * 
 * ## Import
 * 
 * ManagedInstances can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:OsManagement/managedInstance:ManagedInstance test_managed_instance &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:OsManagement/managedInstance:ManagedInstance")
public class ManagedInstance extends com.pulumi.resources.CustomResource {
    /**
     * if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    @Export(name="autonomouses", refs={List.class,ManagedInstanceAutonomouse.class}, tree="[0,1]")
    private Output<List<ManagedInstanceAutonomouse>> autonomouses;

    /**
     * @return if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    public Output<List<ManagedInstanceAutonomouse>> autonomouses() {
        return this.autonomouses;
    }
    /**
     * Number of bug fix type updates available to be installed
     * 
     */
    @Export(name="bugUpdatesAvailable", refs={Integer.class}, tree="[0]")
    private Output<Integer> bugUpdatesAvailable;

    /**
     * @return Number of bug fix type updates available to be installed
     * 
     */
    public Output<Integer> bugUpdatesAvailable() {
        return this.bugUpdatesAvailable;
    }
    /**
     * list of child Software Sources attached to the Managed Instance
     * 
     */
    @Export(name="childSoftwareSources", refs={List.class,ManagedInstanceChildSoftwareSource.class}, tree="[0,1]")
    private Output<List<ManagedInstanceChildSoftwareSource>> childSoftwareSources;

    /**
     * @return list of child Software Sources attached to the Managed Instance
     * 
     */
    public Output<List<ManagedInstanceChildSoftwareSource>> childSoftwareSources() {
        return this.childSoftwareSources;
    }
    /**
     * OCID for the Compartment
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return OCID for the Compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * Information specified by the user about the managed instance
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * User friendly name
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return User friendly name
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Number of enhancement type updates available to be installed
     * 
     */
    @Export(name="enhancementUpdatesAvailable", refs={Integer.class}, tree="[0]")
    private Output<Integer> enhancementUpdatesAvailable;

    /**
     * @return Number of enhancement type updates available to be installed
     * 
     */
    public Output<Integer> enhancementUpdatesAvailable() {
        return this.enhancementUpdatesAvailable;
    }
    /**
     * (Updatable) True if user allow data collection for this instance
     * 
     */
    @Export(name="isDataCollectionAuthorized", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isDataCollectionAuthorized;

    /**
     * @return (Updatable) True if user allow data collection for this instance
     * 
     */
    public Output<Boolean> isDataCollectionAuthorized() {
        return this.isDataCollectionAuthorized;
    }
    /**
     * Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    @Export(name="isRebootRequired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isRebootRequired;

    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    public Output<Boolean> isRebootRequired() {
        return this.isRebootRequired;
    }
    /**
     * The ksplice effective kernel version
     * 
     */
    @Export(name="kspliceEffectiveKernelVersion", refs={String.class}, tree="[0]")
    private Output<String> kspliceEffectiveKernelVersion;

    /**
     * @return The ksplice effective kernel version
     * 
     */
    public Output<String> kspliceEffectiveKernelVersion() {
        return this.kspliceEffectiveKernelVersion;
    }
    /**
     * Time at which the instance last booted
     * 
     */
    @Export(name="lastBoot", refs={String.class}, tree="[0]")
    private Output<String> lastBoot;

    /**
     * @return Time at which the instance last booted
     * 
     */
    public Output<String> lastBoot() {
        return this.lastBoot;
    }
    /**
     * Time at which the instance last checked in
     * 
     */
    @Export(name="lastCheckin", refs={String.class}, tree="[0]")
    private Output<String> lastCheckin;

    /**
     * @return Time at which the instance last checked in
     * 
     */
    public Output<String> lastCheckin() {
        return this.lastCheckin;
    }
    /**
     * The ids of the managed instance groups of which this instance is a member.
     * 
     */
    @Export(name="managedInstanceGroups", refs={List.class,ManagedInstanceManagedInstanceGroup.class}, tree="[0,1]")
    private Output<List<ManagedInstanceManagedInstanceGroup>> managedInstanceGroups;

    /**
     * @return The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public Output<List<ManagedInstanceManagedInstanceGroup>> managedInstanceGroups() {
        return this.managedInstanceGroups;
    }
    /**
     * OCID for the managed instance
     * 
     */
    @Export(name="managedInstanceId", refs={String.class}, tree="[0]")
    private Output<String> managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public Output<String> managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * (Updatable) OCID of the ONS topic used to send notification to users
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="notificationTopicId", refs={String.class}, tree="[0]")
    private Output<String> notificationTopicId;

    /**
     * @return (Updatable) OCID of the ONS topic used to send notification to users
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> notificationTopicId() {
        return this.notificationTopicId;
    }
    /**
     * The Operating System type of the managed instance.
     * 
     */
    @Export(name="osFamily", refs={String.class}, tree="[0]")
    private Output<String> osFamily;

    /**
     * @return The Operating System type of the managed instance.
     * 
     */
    public Output<String> osFamily() {
        return this.osFamily;
    }
    /**
     * Operating System Kernel Version
     * 
     */
    @Export(name="osKernelVersion", refs={String.class}, tree="[0]")
    private Output<String> osKernelVersion;

    /**
     * @return Operating System Kernel Version
     * 
     */
    public Output<String> osKernelVersion() {
        return this.osKernelVersion;
    }
    /**
     * Operating System Name
     * 
     */
    @Export(name="osName", refs={String.class}, tree="[0]")
    private Output<String> osName;

    /**
     * @return Operating System Name
     * 
     */
    public Output<String> osName() {
        return this.osName;
    }
    /**
     * Operating System Version
     * 
     */
    @Export(name="osVersion", refs={String.class}, tree="[0]")
    private Output<String> osVersion;

    /**
     * @return Operating System Version
     * 
     */
    public Output<String> osVersion() {
        return this.osVersion;
    }
    /**
     * Number of non-classified updates available to be installed
     * 
     */
    @Export(name="otherUpdatesAvailable", refs={Integer.class}, tree="[0]")
    private Output<Integer> otherUpdatesAvailable;

    /**
     * @return Number of non-classified updates available to be installed
     * 
     */
    public Output<Integer> otherUpdatesAvailable() {
        return this.otherUpdatesAvailable;
    }
    /**
     * the parent (base) Software Source attached to the Managed Instance
     * 
     */
    @Export(name="parentSoftwareSources", refs={List.class,ManagedInstanceParentSoftwareSource.class}, tree="[0,1]")
    private Output<List<ManagedInstanceParentSoftwareSource>> parentSoftwareSources;

    /**
     * @return the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public Output<List<ManagedInstanceParentSoftwareSource>> parentSoftwareSources() {
        return this.parentSoftwareSources;
    }
    /**
     * Number of scheduled jobs associated with this instance
     * 
     */
    @Export(name="scheduledJobCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> scheduledJobCount;

    /**
     * @return Number of scheduled jobs associated with this instance
     * 
     */
    public Output<Integer> scheduledJobCount() {
        return this.scheduledJobCount;
    }
    /**
     * Number of security type updates available to be installed
     * 
     */
    @Export(name="securityUpdatesAvailable", refs={Integer.class}, tree="[0]")
    private Output<Integer> securityUpdatesAvailable;

    /**
     * @return Number of security type updates available to be installed
     * 
     */
    public Output<Integer> securityUpdatesAvailable() {
        return this.securityUpdatesAvailable;
    }
    /**
     * status of the managed instance.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return status of the managed instance.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Number of updates available to be installed
     * 
     */
    @Export(name="updatesAvailable", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatesAvailable;

    /**
     * @return Number of updates available to be installed
     * 
     */
    public Output<Integer> updatesAvailable() {
        return this.updatesAvailable;
    }
    /**
     * Number of work requests associated with this instance
     * 
     */
    @Export(name="workRequestCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> workRequestCount;

    /**
     * @return Number of work requests associated with this instance
     * 
     */
    public Output<Integer> workRequestCount() {
        return this.workRequestCount;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedInstance(java.lang.String name) {
        this(name, ManagedInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedInstance(java.lang.String name, ManagedInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedInstance(java.lang.String name, ManagedInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/managedInstance:ManagedInstance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ManagedInstance(java.lang.String name, Output<java.lang.String> id, @Nullable ManagedInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/managedInstance:ManagedInstance", name, state, makeResourceOptions(options, id), false);
    }

    private static ManagedInstanceArgs makeArgs(ManagedInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ManagedInstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedInstance get(java.lang.String name, Output<java.lang.String> id, @Nullable ManagedInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedInstance(name, id, state, options);
    }
}
