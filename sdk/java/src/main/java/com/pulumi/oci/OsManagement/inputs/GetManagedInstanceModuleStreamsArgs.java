// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagement.inputs.GetManagedInstanceModuleStreamsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstanceModuleStreamsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstanceModuleStreamsArgs Empty = new GetManagedInstanceModuleStreamsArgs();

    /**
     * The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedInstanceModuleStreamsFilterArgs>> filters;

    public Optional<Output<List<GetManagedInstanceModuleStreamsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * OCID for the managed instance
     * 
     */
    @Import(name="managedInstanceId", required=true)
    private Output<String> managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public Output<String> managedInstanceId() {
        return this.managedInstanceId;
    }

    /**
     * The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    @Import(name="moduleName")
    private @Nullable Output<String> moduleName;

    /**
     * @return The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    public Optional<Output<String>> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    @Import(name="streamName")
    private @Nullable Output<String> streamName;

    /**
     * @return The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    public Optional<Output<String>> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    /**
     * The status of the stream
     * 
     * A stream with the &#34;ENABLED&#34; status can be used as a source for installing profiles.  Streams with this status are also &#34;ACTIVE&#34;.
     * 
     * A stream with the &#34;DISABLED&#34; status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
     * 
     * A stream with the &#34;ACTIVE&#34; status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
     * 
     */
    @Import(name="streamStatus")
    private @Nullable Output<String> streamStatus;

    /**
     * @return The status of the stream
     * 
     * A stream with the &#34;ENABLED&#34; status can be used as a source for installing profiles.  Streams with this status are also &#34;ACTIVE&#34;.
     * 
     * A stream with the &#34;DISABLED&#34; status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
     * 
     * A stream with the &#34;ACTIVE&#34; status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
     * 
     */
    public Optional<Output<String>> streamStatus() {
        return Optional.ofNullable(this.streamStatus);
    }

    private GetManagedInstanceModuleStreamsArgs() {}

    private GetManagedInstanceModuleStreamsArgs(GetManagedInstanceModuleStreamsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.managedInstanceId = $.managedInstanceId;
        this.moduleName = $.moduleName;
        this.streamName = $.streamName;
        this.streamStatus = $.streamStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstanceModuleStreamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstanceModuleStreamsArgs $;

        public Builder() {
            $ = new GetManagedInstanceModuleStreamsArgs();
        }

        public Builder(GetManagedInstanceModuleStreamsArgs defaults) {
            $ = new GetManagedInstanceModuleStreamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetManagedInstanceModuleStreamsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedInstanceModuleStreamsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedInstanceModuleStreamsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param moduleName The name of a module.  This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable Output<String> moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param moduleName The name of a module.  This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(String moduleName) {
            return moduleName(Output.of(moduleName));
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(@Nullable Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        /**
         * @param streamStatus The status of the stream
         * 
         * A stream with the &#34;ENABLED&#34; status can be used as a source for installing profiles.  Streams with this status are also &#34;ACTIVE&#34;.
         * 
         * A stream with the &#34;DISABLED&#34; status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
         * 
         * A stream with the &#34;ACTIVE&#34; status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
         * 
         * @return builder
         * 
         */
        public Builder streamStatus(@Nullable Output<String> streamStatus) {
            $.streamStatus = streamStatus;
            return this;
        }

        /**
         * @param streamStatus The status of the stream
         * 
         * A stream with the &#34;ENABLED&#34; status can be used as a source for installing profiles.  Streams with this status are also &#34;ACTIVE&#34;.
         * 
         * A stream with the &#34;DISABLED&#34; status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
         * 
         * A stream with the &#34;ACTIVE&#34; status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
         * 
         * @return builder
         * 
         */
        public Builder streamStatus(String streamStatus) {
            return streamStatus(Output.of(streamStatus));
        }

        public GetManagedInstanceModuleStreamsArgs build() {
            if ($.managedInstanceId == null) {
                throw new MissingRequiredPropertyException("GetManagedInstanceModuleStreamsArgs", "managedInstanceId");
            }
            return $;
        }
    }

}
