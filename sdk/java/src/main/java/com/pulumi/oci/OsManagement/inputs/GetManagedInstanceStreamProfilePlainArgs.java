// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagement.inputs.GetManagedInstanceStreamProfileFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstanceStreamProfilePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstanceStreamProfilePlainArgs Empty = new GetManagedInstanceStreamProfilePlainArgs();

    /**
     * The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable List<GetManagedInstanceStreamProfileFilter> filters;

    public Optional<List<GetManagedInstanceStreamProfileFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * OCID for the managed instance
     * 
     */
    @Import(name="managedInstanceId", required=true)
    private String managedInstanceId;

    /**
     * @return OCID for the managed instance
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }

    /**
     * The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    @Import(name="moduleName")
    private @Nullable String moduleName;

    /**
     * @return The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    public Optional<String> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * The name of the profile of the containing module stream
     * 
     */
    @Import(name="profileName")
    private @Nullable String profileName;

    /**
     * @return The name of the profile of the containing module stream
     * 
     */
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * The status of the profile.
     * 
     * A profile with the &#34;INSTALLED&#34; status indicates that the profile has been installed.
     * 
     * A profile with the &#34;AVAILABLE&#34; status indicates that the profile is not installed, but can be.
     * 
     */
    @Import(name="profileStatus")
    private @Nullable String profileStatus;

    /**
     * @return The status of the profile.
     * 
     * A profile with the &#34;INSTALLED&#34; status indicates that the profile has been installed.
     * 
     * A profile with the &#34;AVAILABLE&#34; status indicates that the profile is not installed, but can be.
     * 
     */
    public Optional<String> profileStatus() {
        return Optional.ofNullable(this.profileStatus);
    }

    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    @Import(name="streamName")
    private @Nullable String streamName;

    /**
     * @return The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    public Optional<String> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    private GetManagedInstanceStreamProfilePlainArgs() {}

    private GetManagedInstanceStreamProfilePlainArgs(GetManagedInstanceStreamProfilePlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.managedInstanceId = $.managedInstanceId;
        this.moduleName = $.moduleName;
        this.profileName = $.profileName;
        this.profileStatus = $.profileStatus;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstanceStreamProfilePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstanceStreamProfilePlainArgs $;

        public Builder() {
            $ = new GetManagedInstanceStreamProfilePlainArgs();
        }

        public Builder(GetManagedInstanceStreamProfilePlainArgs defaults) {
            $ = new GetManagedInstanceStreamProfilePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetManagedInstanceStreamProfileFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagedInstanceStreamProfileFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedInstanceId OCID for the managed instance
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param moduleName The name of a module.  This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable String moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param profileName The name of the profile of the containing module stream
         * 
         * @return builder
         * 
         */
        public Builder profileName(@Nullable String profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileStatus The status of the profile.
         * 
         * A profile with the &#34;INSTALLED&#34; status indicates that the profile has been installed.
         * 
         * A profile with the &#34;AVAILABLE&#34; status indicates that the profile is not installed, but can be.
         * 
         * @return builder
         * 
         */
        public Builder profileStatus(@Nullable String profileStatus) {
            $.profileStatus = profileStatus;
            return this;
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(@Nullable String streamName) {
            $.streamName = streamName;
            return this;
        }

        public GetManagedInstanceStreamProfilePlainArgs build() {
            if ($.managedInstanceId == null) {
                throw new MissingRequiredPropertyException("GetManagedInstanceStreamProfilePlainArgs", "managedInstanceId");
            }
            return $;
        }
    }

}
