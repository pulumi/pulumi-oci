// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagement.inputs.GetSoftwareSourceStreamProfileFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourceStreamProfilePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourceStreamProfilePlainArgs Empty = new GetSoftwareSourceStreamProfilePlainArgs();

    /**
     * The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable List<GetSoftwareSourceStreamProfileFilter> filters;

    public Optional<List<GetSoftwareSourceStreamProfileFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    @Import(name="moduleName")
    private @Nullable String moduleName;

    /**
     * @return The name of a module.  This parameter is required if a streamName is specified.
     * 
     */
    public Optional<String> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * The name of the profile of the containing module stream
     * 
     */
    @Import(name="profileName")
    private @Nullable String profileName;

    /**
     * @return The name of the profile of the containing module stream
     * 
     */
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * The OCID of the software source.
     * 
     */
    @Import(name="softwareSourceId", required=true)
    private String softwareSourceId;

    /**
     * @return The OCID of the software source.
     * 
     */
    public String softwareSourceId() {
        return this.softwareSourceId;
    }

    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    @Import(name="streamName")
    private @Nullable String streamName;

    /**
     * @return The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    public Optional<String> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    private GetSoftwareSourceStreamProfilePlainArgs() {}

    private GetSoftwareSourceStreamProfilePlainArgs(GetSoftwareSourceStreamProfilePlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.moduleName = $.moduleName;
        this.profileName = $.profileName;
        this.softwareSourceId = $.softwareSourceId;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourceStreamProfilePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourceStreamProfilePlainArgs $;

        public Builder() {
            $ = new GetSoftwareSourceStreamProfilePlainArgs();
        }

        public Builder(GetSoftwareSourceStreamProfilePlainArgs defaults) {
            $ = new GetSoftwareSourceStreamProfilePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetSoftwareSourceStreamProfileFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwareSourceStreamProfileFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param moduleName The name of a module.  This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable String moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param profileName The name of the profile of the containing module stream
         * 
         * @return builder
         * 
         */
        public Builder profileName(@Nullable String profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param softwareSourceId The OCID of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(@Nullable String streamName) {
            $.streamName = streamName;
            return this;
        }

        public GetSoftwareSourceStreamProfilePlainArgs build() {
            $.softwareSourceId = Objects.requireNonNull($.softwareSourceId, "expected parameter 'softwareSourceId' to be non-null");
            return $;
        }
    }

}
