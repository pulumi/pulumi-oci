// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstanceAutonomouse;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstanceChildSoftwareSource;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstanceManagedInstanceGroup;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstanceParentSoftwareSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedInstanceResult {
    /**
     * @return if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    private @Nullable List<GetManagedInstanceAutonomouse> autonomouses;
    /**
     * @return Number of bug fix type updates available to be installed
     * 
     */
    private @Nullable Integer bugUpdatesAvailable;
    /**
     * @return list of child Software Sources attached to the Managed Instance
     * 
     */
    private @Nullable List<GetManagedInstanceChildSoftwareSource> childSoftwareSources;
    /**
     * @return OCID for the Compartment
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    private @Nullable String description;
    /**
     * @return User friendly name
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Number of enhancement type updates available to be installed
     * 
     */
    private @Nullable Integer enhancementUpdatesAvailable;
    /**
     * @return software source identifier
     * 
     */
    private @Nullable String id;
    /**
     * @return True if user allow data collection for this instance
     * 
     */
    private @Nullable Boolean isDataCollectionAuthorized;
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    private @Nullable Boolean isRebootRequired;
    /**
     * @return The ksplice effective kernel version
     * 
     */
    private @Nullable String kspliceEffectiveKernelVersion;
    /**
     * @return Time at which the instance last booted
     * 
     */
    private @Nullable String lastBoot;
    /**
     * @return Time at which the instance last checked in
     * 
     */
    private @Nullable String lastCheckin;
    /**
     * @return The ids of the managed instance groups of which this instance is a member.
     * 
     */
    private @Nullable List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups;
    private String managedInstanceId;
    /**
     * @return OCID of the ONS topic used to send notification to users
     * 
     */
    private @Nullable String notificationTopicId;
    /**
     * @return The Operating System type of the managed instance.
     * 
     */
    private @Nullable String osFamily;
    /**
     * @return Operating System Kernel Version
     * 
     */
    private @Nullable String osKernelVersion;
    /**
     * @return Operating System Name
     * 
     */
    private @Nullable String osName;
    /**
     * @return Operating System Version
     * 
     */
    private @Nullable String osVersion;
    /**
     * @return Number of non-classified updates available to be installed
     * 
     */
    private @Nullable Integer otherUpdatesAvailable;
    /**
     * @return the parent (base) Software Source attached to the Managed Instance
     * 
     */
    private @Nullable List<GetManagedInstanceParentSoftwareSource> parentSoftwareSources;
    /**
     * @return Number of scheduled jobs associated with this instance
     * 
     */
    private @Nullable Integer scheduledJobCount;
    /**
     * @return Number of security type updates available to be installed
     * 
     */
    private @Nullable Integer securityUpdatesAvailable;
    /**
     * @return status of the managed instance.
     * 
     */
    private @Nullable String status;
    /**
     * @return Number of updates available to be installed
     * 
     */
    private @Nullable Integer updatesAvailable;
    /**
     * @return Number of work requests associated with this instance
     * 
     */
    private @Nullable Integer workRequestCount;

    private GetManagedInstanceResult() {}
    /**
     * @return if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    public List<GetManagedInstanceAutonomouse> autonomouses() {
        return this.autonomouses == null ? List.of() : this.autonomouses;
    }
    /**
     * @return Number of bug fix type updates available to be installed
     * 
     */
    public Optional<Integer> bugUpdatesAvailable() {
        return Optional.ofNullable(this.bugUpdatesAvailable);
    }
    /**
     * @return list of child Software Sources attached to the Managed Instance
     * 
     */
    public List<GetManagedInstanceChildSoftwareSource> childSoftwareSources() {
        return this.childSoftwareSources == null ? List.of() : this.childSoftwareSources;
    }
    /**
     * @return OCID for the Compartment
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return User friendly name
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Number of enhancement type updates available to be installed
     * 
     */
    public Optional<Integer> enhancementUpdatesAvailable() {
        return Optional.ofNullable(this.enhancementUpdatesAvailable);
    }
    /**
     * @return software source identifier
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return True if user allow data collection for this instance
     * 
     */
    public Optional<Boolean> isDataCollectionAuthorized() {
        return Optional.ofNullable(this.isDataCollectionAuthorized);
    }
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    public Optional<Boolean> isRebootRequired() {
        return Optional.ofNullable(this.isRebootRequired);
    }
    /**
     * @return The ksplice effective kernel version
     * 
     */
    public Optional<String> kspliceEffectiveKernelVersion() {
        return Optional.ofNullable(this.kspliceEffectiveKernelVersion);
    }
    /**
     * @return Time at which the instance last booted
     * 
     */
    public Optional<String> lastBoot() {
        return Optional.ofNullable(this.lastBoot);
    }
    /**
     * @return Time at which the instance last checked in
     * 
     */
    public Optional<String> lastCheckin() {
        return Optional.ofNullable(this.lastCheckin);
    }
    /**
     * @return The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups() {
        return this.managedInstanceGroups == null ? List.of() : this.managedInstanceGroups;
    }
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return OCID of the ONS topic used to send notification to users
     * 
     */
    public Optional<String> notificationTopicId() {
        return Optional.ofNullable(this.notificationTopicId);
    }
    /**
     * @return The Operating System type of the managed instance.
     * 
     */
    public Optional<String> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }
    /**
     * @return Operating System Kernel Version
     * 
     */
    public Optional<String> osKernelVersion() {
        return Optional.ofNullable(this.osKernelVersion);
    }
    /**
     * @return Operating System Name
     * 
     */
    public Optional<String> osName() {
        return Optional.ofNullable(this.osName);
    }
    /**
     * @return Operating System Version
     * 
     */
    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }
    /**
     * @return Number of non-classified updates available to be installed
     * 
     */
    public Optional<Integer> otherUpdatesAvailable() {
        return Optional.ofNullable(this.otherUpdatesAvailable);
    }
    /**
     * @return the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public List<GetManagedInstanceParentSoftwareSource> parentSoftwareSources() {
        return this.parentSoftwareSources == null ? List.of() : this.parentSoftwareSources;
    }
    /**
     * @return Number of scheduled jobs associated with this instance
     * 
     */
    public Optional<Integer> scheduledJobCount() {
        return Optional.ofNullable(this.scheduledJobCount);
    }
    /**
     * @return Number of security type updates available to be installed
     * 
     */
    public Optional<Integer> securityUpdatesAvailable() {
        return Optional.ofNullable(this.securityUpdatesAvailable);
    }
    /**
     * @return status of the managed instance.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Number of updates available to be installed
     * 
     */
    public Optional<Integer> updatesAvailable() {
        return Optional.ofNullable(this.updatesAvailable);
    }
    /**
     * @return Number of work requests associated with this instance
     * 
     */
    public Optional<Integer> workRequestCount() {
        return Optional.ofNullable(this.workRequestCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedInstanceAutonomouse> autonomouses;
        private @Nullable Integer bugUpdatesAvailable;
        private @Nullable List<GetManagedInstanceChildSoftwareSource> childSoftwareSources;
        private @Nullable String compartmentId;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable Integer enhancementUpdatesAvailable;
        private @Nullable String id;
        private @Nullable Boolean isDataCollectionAuthorized;
        private @Nullable Boolean isRebootRequired;
        private @Nullable String kspliceEffectiveKernelVersion;
        private @Nullable String lastBoot;
        private @Nullable String lastCheckin;
        private @Nullable List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups;
        private String managedInstanceId;
        private @Nullable String notificationTopicId;
        private @Nullable String osFamily;
        private @Nullable String osKernelVersion;
        private @Nullable String osName;
        private @Nullable String osVersion;
        private @Nullable Integer otherUpdatesAvailable;
        private @Nullable List<GetManagedInstanceParentSoftwareSource> parentSoftwareSources;
        private @Nullable Integer scheduledJobCount;
        private @Nullable Integer securityUpdatesAvailable;
        private @Nullable String status;
        private @Nullable Integer updatesAvailable;
        private @Nullable Integer workRequestCount;
        public Builder() {}
        public Builder(GetManagedInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomouses = defaults.autonomouses;
    	      this.bugUpdatesAvailable = defaults.bugUpdatesAvailable;
    	      this.childSoftwareSources = defaults.childSoftwareSources;
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enhancementUpdatesAvailable = defaults.enhancementUpdatesAvailable;
    	      this.id = defaults.id;
    	      this.isDataCollectionAuthorized = defaults.isDataCollectionAuthorized;
    	      this.isRebootRequired = defaults.isRebootRequired;
    	      this.kspliceEffectiveKernelVersion = defaults.kspliceEffectiveKernelVersion;
    	      this.lastBoot = defaults.lastBoot;
    	      this.lastCheckin = defaults.lastCheckin;
    	      this.managedInstanceGroups = defaults.managedInstanceGroups;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.notificationTopicId = defaults.notificationTopicId;
    	      this.osFamily = defaults.osFamily;
    	      this.osKernelVersion = defaults.osKernelVersion;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
    	      this.otherUpdatesAvailable = defaults.otherUpdatesAvailable;
    	      this.parentSoftwareSources = defaults.parentSoftwareSources;
    	      this.scheduledJobCount = defaults.scheduledJobCount;
    	      this.securityUpdatesAvailable = defaults.securityUpdatesAvailable;
    	      this.status = defaults.status;
    	      this.updatesAvailable = defaults.updatesAvailable;
    	      this.workRequestCount = defaults.workRequestCount;
        }

        @CustomType.Setter
        public Builder autonomouses(@Nullable List<GetManagedInstanceAutonomouse> autonomouses) {
            this.autonomouses = autonomouses;
            return this;
        }
        public Builder autonomouses(GetManagedInstanceAutonomouse... autonomouses) {
            return autonomouses(List.of(autonomouses));
        }
        @CustomType.Setter
        public Builder bugUpdatesAvailable(@Nullable Integer bugUpdatesAvailable) {
            this.bugUpdatesAvailable = bugUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder childSoftwareSources(@Nullable List<GetManagedInstanceChildSoftwareSource> childSoftwareSources) {
            this.childSoftwareSources = childSoftwareSources;
            return this;
        }
        public Builder childSoftwareSources(GetManagedInstanceChildSoftwareSource... childSoftwareSources) {
            return childSoftwareSources(List.of(childSoftwareSources));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enhancementUpdatesAvailable(@Nullable Integer enhancementUpdatesAvailable) {
            this.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDataCollectionAuthorized(@Nullable Boolean isDataCollectionAuthorized) {
            this.isDataCollectionAuthorized = isDataCollectionAuthorized;
            return this;
        }
        @CustomType.Setter
        public Builder isRebootRequired(@Nullable Boolean isRebootRequired) {
            this.isRebootRequired = isRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder kspliceEffectiveKernelVersion(@Nullable String kspliceEffectiveKernelVersion) {
            this.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lastBoot(@Nullable String lastBoot) {
            this.lastBoot = lastBoot;
            return this;
        }
        @CustomType.Setter
        public Builder lastCheckin(@Nullable String lastCheckin) {
            this.lastCheckin = lastCheckin;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroups(@Nullable List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups) {
            this.managedInstanceGroups = managedInstanceGroups;
            return this;
        }
        public Builder managedInstanceGroups(GetManagedInstanceManagedInstanceGroup... managedInstanceGroups) {
            return managedInstanceGroups(List.of(managedInstanceGroups));
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            this.managedInstanceId = Objects.requireNonNull(managedInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder notificationTopicId(@Nullable String notificationTopicId) {
            this.notificationTopicId = notificationTopicId;
            return this;
        }
        @CustomType.Setter
        public Builder osFamily(@Nullable String osFamily) {
            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder osKernelVersion(@Nullable String osKernelVersion) {
            this.osKernelVersion = osKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osName(@Nullable String osName) {
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(@Nullable String osVersion) {
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder otherUpdatesAvailable(@Nullable Integer otherUpdatesAvailable) {
            this.otherUpdatesAvailable = otherUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder parentSoftwareSources(@Nullable List<GetManagedInstanceParentSoftwareSource> parentSoftwareSources) {
            this.parentSoftwareSources = parentSoftwareSources;
            return this;
        }
        public Builder parentSoftwareSources(GetManagedInstanceParentSoftwareSource... parentSoftwareSources) {
            return parentSoftwareSources(List.of(parentSoftwareSources));
        }
        @CustomType.Setter
        public Builder scheduledJobCount(@Nullable Integer scheduledJobCount) {
            this.scheduledJobCount = scheduledJobCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityUpdatesAvailable(@Nullable Integer securityUpdatesAvailable) {
            this.securityUpdatesAvailable = securityUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder updatesAvailable(@Nullable Integer updatesAvailable) {
            this.updatesAvailable = updatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestCount(@Nullable Integer workRequestCount) {
            this.workRequestCount = workRequestCount;
            return this;
        }
        public GetManagedInstanceResult build() {
            final var o = new GetManagedInstanceResult();
            o.autonomouses = autonomouses;
            o.bugUpdatesAvailable = bugUpdatesAvailable;
            o.childSoftwareSources = childSoftwareSources;
            o.compartmentId = compartmentId;
            o.description = description;
            o.displayName = displayName;
            o.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            o.id = id;
            o.isDataCollectionAuthorized = isDataCollectionAuthorized;
            o.isRebootRequired = isRebootRequired;
            o.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            o.lastBoot = lastBoot;
            o.lastCheckin = lastCheckin;
            o.managedInstanceGroups = managedInstanceGroups;
            o.managedInstanceId = managedInstanceId;
            o.notificationTopicId = notificationTopicId;
            o.osFamily = osFamily;
            o.osKernelVersion = osKernelVersion;
            o.osName = osName;
            o.osVersion = osVersion;
            o.otherUpdatesAvailable = otherUpdatesAvailable;
            o.parentSoftwareSources = parentSoftwareSources;
            o.scheduledJobCount = scheduledJobCount;
            o.securityUpdatesAvailable = securityUpdatesAvailable;
            o.status = status;
            o.updatesAvailable = updatesAvailable;
            o.workRequestCount = workRequestCount;
            return o;
        }
    }
}
