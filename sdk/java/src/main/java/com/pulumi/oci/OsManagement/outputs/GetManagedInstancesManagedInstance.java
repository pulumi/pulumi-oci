// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstancesManagedInstanceAutonomouse;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstancesManagedInstanceChildSoftwareSource;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstancesManagedInstanceManagedInstanceGroup;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstancesManagedInstanceParentSoftwareSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedInstancesManagedInstance {
    /**
     * @return if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    private List<GetManagedInstancesManagedInstanceAutonomouse> autonomouses;
    /**
     * @return Number of bug fix type updates available to be installed
     * 
     */
    private Integer bugUpdatesAvailable;
    /**
     * @return list of child Software Sources attached to the Managed Instance
     * 
     */
    private List<GetManagedInstancesManagedInstanceChildSoftwareSource> childSoftwareSources;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    private String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    private String displayName;
    /**
     * @return Number of enhancement type updates available to be installed
     * 
     */
    private Integer enhancementUpdatesAvailable;
    /**
     * @return software source identifier
     * 
     */
    private String id;
    /**
     * @return True if user allow data collection for this instance
     * 
     */
    private Boolean isDataCollectionAuthorized;
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    private Boolean isRebootRequired;
    /**
     * @return The ksplice effective kernel version
     * 
     */
    private String kspliceEffectiveKernelVersion;
    /**
     * @return Time at which the instance last booted
     * 
     */
    private String lastBoot;
    /**
     * @return Time at which the instance last checked in
     * 
     */
    private String lastCheckin;
    /**
     * @return The ids of the managed instance groups of which this instance is a member.
     * 
     */
    private List<GetManagedInstancesManagedInstanceManagedInstanceGroup> managedInstanceGroups;
    private String managedInstanceId;
    /**
     * @return OCID of the ONS topic used to send notification to users
     * 
     */
    private String notificationTopicId;
    /**
     * @return The OS family for which to list resources.
     * 
     */
    private String osFamily;
    /**
     * @return Operating System Kernel Version
     * 
     */
    private String osKernelVersion;
    /**
     * @return Operating System Name
     * 
     */
    private String osName;
    /**
     * @return Operating System Version
     * 
     */
    private String osVersion;
    /**
     * @return Number of non-classified updates available to be installed
     * 
     */
    private Integer otherUpdatesAvailable;
    /**
     * @return the parent (base) Software Source attached to the Managed Instance
     * 
     */
    private List<GetManagedInstancesManagedInstanceParentSoftwareSource> parentSoftwareSources;
    /**
     * @return Number of scheduled jobs associated with this instance
     * 
     */
    private Integer scheduledJobCount;
    /**
     * @return Number of security type updates available to be installed
     * 
     */
    private Integer securityUpdatesAvailable;
    /**
     * @return status of the managed instance.
     * 
     */
    private String status;
    /**
     * @return Number of updates available to be installed
     * 
     */
    private Integer updatesAvailable;
    /**
     * @return Number of work requests associated with this instance
     * 
     */
    private Integer workRequestCount;

    private GetManagedInstancesManagedInstance() {}
    /**
     * @return if present, indicates the Managed Instance is an autonomous instance. Holds all the Autonomous specific information
     * 
     */
    public List<GetManagedInstancesManagedInstanceAutonomouse> autonomouses() {
        return this.autonomouses;
    }
    /**
     * @return Number of bug fix type updates available to be installed
     * 
     */
    public Integer bugUpdatesAvailable() {
        return this.bugUpdatesAvailable;
    }
    /**
     * @return list of child Software Sources attached to the Managed Instance
     * 
     */
    public List<GetManagedInstancesManagedInstanceChildSoftwareSource> childSoftwareSources() {
        return this.childSoftwareSources;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Information specified by the user about the managed instance
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Number of enhancement type updates available to be installed
     * 
     */
    public Integer enhancementUpdatesAvailable() {
        return this.enhancementUpdatesAvailable;
    }
    /**
     * @return software source identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if user allow data collection for this instance
     * 
     */
    public Boolean isDataCollectionAuthorized() {
        return this.isDataCollectionAuthorized;
    }
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    public Boolean isRebootRequired() {
        return this.isRebootRequired;
    }
    /**
     * @return The ksplice effective kernel version
     * 
     */
    public String kspliceEffectiveKernelVersion() {
        return this.kspliceEffectiveKernelVersion;
    }
    /**
     * @return Time at which the instance last booted
     * 
     */
    public String lastBoot() {
        return this.lastBoot;
    }
    /**
     * @return Time at which the instance last checked in
     * 
     */
    public String lastCheckin() {
        return this.lastCheckin;
    }
    /**
     * @return The ids of the managed instance groups of which this instance is a member.
     * 
     */
    public List<GetManagedInstancesManagedInstanceManagedInstanceGroup> managedInstanceGroups() {
        return this.managedInstanceGroups;
    }
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return OCID of the ONS topic used to send notification to users
     * 
     */
    public String notificationTopicId() {
        return this.notificationTopicId;
    }
    /**
     * @return The OS family for which to list resources.
     * 
     */
    public String osFamily() {
        return this.osFamily;
    }
    /**
     * @return Operating System Kernel Version
     * 
     */
    public String osKernelVersion() {
        return this.osKernelVersion;
    }
    /**
     * @return Operating System Name
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Operating System Version
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return Number of non-classified updates available to be installed
     * 
     */
    public Integer otherUpdatesAvailable() {
        return this.otherUpdatesAvailable;
    }
    /**
     * @return the parent (base) Software Source attached to the Managed Instance
     * 
     */
    public List<GetManagedInstancesManagedInstanceParentSoftwareSource> parentSoftwareSources() {
        return this.parentSoftwareSources;
    }
    /**
     * @return Number of scheduled jobs associated with this instance
     * 
     */
    public Integer scheduledJobCount() {
        return this.scheduledJobCount;
    }
    /**
     * @return Number of security type updates available to be installed
     * 
     */
    public Integer securityUpdatesAvailable() {
        return this.securityUpdatesAvailable;
    }
    /**
     * @return status of the managed instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Number of updates available to be installed
     * 
     */
    public Integer updatesAvailable() {
        return this.updatesAvailable;
    }
    /**
     * @return Number of work requests associated with this instance
     * 
     */
    public Integer workRequestCount() {
        return this.workRequestCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstancesManagedInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedInstancesManagedInstanceAutonomouse> autonomouses;
        private Integer bugUpdatesAvailable;
        private List<GetManagedInstancesManagedInstanceChildSoftwareSource> childSoftwareSources;
        private String compartmentId;
        private String description;
        private String displayName;
        private Integer enhancementUpdatesAvailable;
        private String id;
        private Boolean isDataCollectionAuthorized;
        private Boolean isRebootRequired;
        private String kspliceEffectiveKernelVersion;
        private String lastBoot;
        private String lastCheckin;
        private List<GetManagedInstancesManagedInstanceManagedInstanceGroup> managedInstanceGroups;
        private String managedInstanceId;
        private String notificationTopicId;
        private String osFamily;
        private String osKernelVersion;
        private String osName;
        private String osVersion;
        private Integer otherUpdatesAvailable;
        private List<GetManagedInstancesManagedInstanceParentSoftwareSource> parentSoftwareSources;
        private Integer scheduledJobCount;
        private Integer securityUpdatesAvailable;
        private String status;
        private Integer updatesAvailable;
        private Integer workRequestCount;
        public Builder() {}
        public Builder(GetManagedInstancesManagedInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomouses = defaults.autonomouses;
    	      this.bugUpdatesAvailable = defaults.bugUpdatesAvailable;
    	      this.childSoftwareSources = defaults.childSoftwareSources;
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enhancementUpdatesAvailable = defaults.enhancementUpdatesAvailable;
    	      this.id = defaults.id;
    	      this.isDataCollectionAuthorized = defaults.isDataCollectionAuthorized;
    	      this.isRebootRequired = defaults.isRebootRequired;
    	      this.kspliceEffectiveKernelVersion = defaults.kspliceEffectiveKernelVersion;
    	      this.lastBoot = defaults.lastBoot;
    	      this.lastCheckin = defaults.lastCheckin;
    	      this.managedInstanceGroups = defaults.managedInstanceGroups;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.notificationTopicId = defaults.notificationTopicId;
    	      this.osFamily = defaults.osFamily;
    	      this.osKernelVersion = defaults.osKernelVersion;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
    	      this.otherUpdatesAvailable = defaults.otherUpdatesAvailable;
    	      this.parentSoftwareSources = defaults.parentSoftwareSources;
    	      this.scheduledJobCount = defaults.scheduledJobCount;
    	      this.securityUpdatesAvailable = defaults.securityUpdatesAvailable;
    	      this.status = defaults.status;
    	      this.updatesAvailable = defaults.updatesAvailable;
    	      this.workRequestCount = defaults.workRequestCount;
        }

        @CustomType.Setter
        public Builder autonomouses(List<GetManagedInstancesManagedInstanceAutonomouse> autonomouses) {
            if (autonomouses == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "autonomouses");
            }
            this.autonomouses = autonomouses;
            return this;
        }
        public Builder autonomouses(GetManagedInstancesManagedInstanceAutonomouse... autonomouses) {
            return autonomouses(List.of(autonomouses));
        }
        @CustomType.Setter
        public Builder bugUpdatesAvailable(Integer bugUpdatesAvailable) {
            if (bugUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "bugUpdatesAvailable");
            }
            this.bugUpdatesAvailable = bugUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder childSoftwareSources(List<GetManagedInstancesManagedInstanceChildSoftwareSource> childSoftwareSources) {
            if (childSoftwareSources == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "childSoftwareSources");
            }
            this.childSoftwareSources = childSoftwareSources;
            return this;
        }
        public Builder childSoftwareSources(GetManagedInstancesManagedInstanceChildSoftwareSource... childSoftwareSources) {
            return childSoftwareSources(List.of(childSoftwareSources));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enhancementUpdatesAvailable(Integer enhancementUpdatesAvailable) {
            if (enhancementUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "enhancementUpdatesAvailable");
            }
            this.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDataCollectionAuthorized(Boolean isDataCollectionAuthorized) {
            if (isDataCollectionAuthorized == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "isDataCollectionAuthorized");
            }
            this.isDataCollectionAuthorized = isDataCollectionAuthorized;
            return this;
        }
        @CustomType.Setter
        public Builder isRebootRequired(Boolean isRebootRequired) {
            if (isRebootRequired == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "isRebootRequired");
            }
            this.isRebootRequired = isRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder kspliceEffectiveKernelVersion(String kspliceEffectiveKernelVersion) {
            if (kspliceEffectiveKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "kspliceEffectiveKernelVersion");
            }
            this.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lastBoot(String lastBoot) {
            if (lastBoot == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "lastBoot");
            }
            this.lastBoot = lastBoot;
            return this;
        }
        @CustomType.Setter
        public Builder lastCheckin(String lastCheckin) {
            if (lastCheckin == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "lastCheckin");
            }
            this.lastCheckin = lastCheckin;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroups(List<GetManagedInstancesManagedInstanceManagedInstanceGroup> managedInstanceGroups) {
            if (managedInstanceGroups == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "managedInstanceGroups");
            }
            this.managedInstanceGroups = managedInstanceGroups;
            return this;
        }
        public Builder managedInstanceGroups(GetManagedInstancesManagedInstanceManagedInstanceGroup... managedInstanceGroups) {
            return managedInstanceGroups(List.of(managedInstanceGroups));
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTopicId(String notificationTopicId) {
            if (notificationTopicId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "notificationTopicId");
            }
            this.notificationTopicId = notificationTopicId;
            return this;
        }
        @CustomType.Setter
        public Builder osFamily(String osFamily) {
            if (osFamily == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "osFamily");
            }
            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder osKernelVersion(String osKernelVersion) {
            if (osKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "osKernelVersion");
            }
            this.osKernelVersion = osKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder otherUpdatesAvailable(Integer otherUpdatesAvailable) {
            if (otherUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "otherUpdatesAvailable");
            }
            this.otherUpdatesAvailable = otherUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder parentSoftwareSources(List<GetManagedInstancesManagedInstanceParentSoftwareSource> parentSoftwareSources) {
            if (parentSoftwareSources == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "parentSoftwareSources");
            }
            this.parentSoftwareSources = parentSoftwareSources;
            return this;
        }
        public Builder parentSoftwareSources(GetManagedInstancesManagedInstanceParentSoftwareSource... parentSoftwareSources) {
            return parentSoftwareSources(List.of(parentSoftwareSources));
        }
        @CustomType.Setter
        public Builder scheduledJobCount(Integer scheduledJobCount) {
            if (scheduledJobCount == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "scheduledJobCount");
            }
            this.scheduledJobCount = scheduledJobCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityUpdatesAvailable(Integer securityUpdatesAvailable) {
            if (securityUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "securityUpdatesAvailable");
            }
            this.securityUpdatesAvailable = securityUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder updatesAvailable(Integer updatesAvailable) {
            if (updatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "updatesAvailable");
            }
            this.updatesAvailable = updatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestCount(Integer workRequestCount) {
            if (workRequestCount == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesManagedInstance", "workRequestCount");
            }
            this.workRequestCount = workRequestCount;
            return this;
        }
        public GetManagedInstancesManagedInstance build() {
            final var _resultValue = new GetManagedInstancesManagedInstance();
            _resultValue.autonomouses = autonomouses;
            _resultValue.bugUpdatesAvailable = bugUpdatesAvailable;
            _resultValue.childSoftwareSources = childSoftwareSources;
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            _resultValue.id = id;
            _resultValue.isDataCollectionAuthorized = isDataCollectionAuthorized;
            _resultValue.isRebootRequired = isRebootRequired;
            _resultValue.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            _resultValue.lastBoot = lastBoot;
            _resultValue.lastCheckin = lastCheckin;
            _resultValue.managedInstanceGroups = managedInstanceGroups;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.notificationTopicId = notificationTopicId;
            _resultValue.osFamily = osFamily;
            _resultValue.osKernelVersion = osKernelVersion;
            _resultValue.osName = osName;
            _resultValue.osVersion = osVersion;
            _resultValue.otherUpdatesAvailable = otherUpdatesAvailable;
            _resultValue.parentSoftwareSources = parentSoftwareSources;
            _resultValue.scheduledJobCount = scheduledJobCount;
            _resultValue.securityUpdatesAvailable = securityUpdatesAvailable;
            _resultValue.status = status;
            _resultValue.updatesAvailable = updatesAvailable;
            _resultValue.workRequestCount = workRequestCount;
            return _resultValue;
        }
    }
}
