// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagement.outputs.GetSoftwareSourceAssociatedManagedInstance;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSoftwareSourceResult {
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    private @Nullable String archType;
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    private @Nullable List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    private @Nullable String checksumType;
    /**
     * @return OCID for the Compartment
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Information specified by the user about the software source
     * 
     */
    private @Nullable String description;
    /**
     * @return User friendly name for the software source
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    private @Nullable String gpgKeyFingerprint;
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    private @Nullable String gpgKeyId;
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    private @Nullable String gpgKeyUrl;
    /**
     * @return OCID for the Software Source
     * 
     */
    private @Nullable String id;
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    private @Nullable String maintainerEmail;
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    private @Nullable String maintainerName;
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    private @Nullable String maintainerPhone;
    /**
     * @return Number of packages
     * 
     */
    private @Nullable Integer packages;
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    private @Nullable String parentId;
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    private @Nullable String parentName;
    /**
     * @return Type of the Software Source
     * 
     */
    private @Nullable String repoType;
    private String softwareSourceId;
    /**
     * @return The current state of the Software Source.
     * 
     */
    private @Nullable String state;
    /**
     * @return status of the software source.
     * 
     */
    private @Nullable String status;
    /**
     * @return URL for the repostiory
     * 
     */
    private @Nullable String url;

    private GetSoftwareSourceResult() {}
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public Optional<String> archType() {
        return Optional.ofNullable(this.archType);
    }
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    public List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances() {
        return this.associatedManagedInstances == null ? List.of() : this.associatedManagedInstances;
    }
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    public Optional<String> checksumType() {
        return Optional.ofNullable(this.checksumType);
    }
    /**
     * @return OCID for the Compartment
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Information specified by the user about the software source
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return User friendly name for the software source
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    public Optional<String> gpgKeyFingerprint() {
        return Optional.ofNullable(this.gpgKeyFingerprint);
    }
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    public Optional<String> gpgKeyId() {
        return Optional.ofNullable(this.gpgKeyId);
    }
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    public Optional<String> gpgKeyUrl() {
        return Optional.ofNullable(this.gpgKeyUrl);
    }
    /**
     * @return OCID for the Software Source
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    public Optional<String> maintainerEmail() {
        return Optional.ofNullable(this.maintainerEmail);
    }
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    public Optional<String> maintainerName() {
        return Optional.ofNullable(this.maintainerName);
    }
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    public Optional<String> maintainerPhone() {
        return Optional.ofNullable(this.maintainerPhone);
    }
    /**
     * @return Number of packages
     * 
     */
    public Optional<Integer> packages() {
        return Optional.ofNullable(this.packages);
    }
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public Optional<String> parentId() {
        return Optional.ofNullable(this.parentId);
    }
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    public Optional<String> parentName() {
        return Optional.ofNullable(this.parentName);
    }
    /**
     * @return Type of the Software Source
     * 
     */
    public Optional<String> repoType() {
        return Optional.ofNullable(this.repoType);
    }
    public String softwareSourceId() {
        return this.softwareSourceId;
    }
    /**
     * @return The current state of the Software Source.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return status of the software source.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return URL for the repostiory
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String archType;
        private @Nullable List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
        private @Nullable String checksumType;
        private @Nullable String compartmentId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String gpgKeyFingerprint;
        private @Nullable String gpgKeyId;
        private @Nullable String gpgKeyUrl;
        private @Nullable String id;
        private @Nullable String maintainerEmail;
        private @Nullable String maintainerName;
        private @Nullable String maintainerPhone;
        private @Nullable Integer packages;
        private @Nullable String parentId;
        private @Nullable String parentName;
        private @Nullable String repoType;
        private String softwareSourceId;
        private @Nullable String state;
        private @Nullable String status;
        private @Nullable String url;
        public Builder() {}
        public Builder(GetSoftwareSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.associatedManagedInstances = defaults.associatedManagedInstances;
    	      this.checksumType = defaults.checksumType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gpgKeyFingerprint = defaults.gpgKeyFingerprint;
    	      this.gpgKeyId = defaults.gpgKeyId;
    	      this.gpgKeyUrl = defaults.gpgKeyUrl;
    	      this.id = defaults.id;
    	      this.maintainerEmail = defaults.maintainerEmail;
    	      this.maintainerName = defaults.maintainerName;
    	      this.maintainerPhone = defaults.maintainerPhone;
    	      this.packages = defaults.packages;
    	      this.parentId = defaults.parentId;
    	      this.parentName = defaults.parentName;
    	      this.repoType = defaults.repoType;
    	      this.softwareSourceId = defaults.softwareSourceId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder archType(@Nullable String archType) {
            this.archType = archType;
            return this;
        }
        @CustomType.Setter
        public Builder associatedManagedInstances(@Nullable List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances) {
            this.associatedManagedInstances = associatedManagedInstances;
            return this;
        }
        public Builder associatedManagedInstances(GetSoftwareSourceAssociatedManagedInstance... associatedManagedInstances) {
            return associatedManagedInstances(List.of(associatedManagedInstances));
        }
        @CustomType.Setter
        public Builder checksumType(@Nullable String checksumType) {
            this.checksumType = checksumType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyFingerprint(@Nullable String gpgKeyFingerprint) {
            this.gpgKeyFingerprint = gpgKeyFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyId(@Nullable String gpgKeyId) {
            this.gpgKeyId = gpgKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyUrl(@Nullable String gpgKeyUrl) {
            this.gpgKeyUrl = gpgKeyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerEmail(@Nullable String maintainerEmail) {
            this.maintainerEmail = maintainerEmail;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerName(@Nullable String maintainerName) {
            this.maintainerName = maintainerName;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerPhone(@Nullable String maintainerPhone) {
            this.maintainerPhone = maintainerPhone;
            return this;
        }
        @CustomType.Setter
        public Builder packages(@Nullable Integer packages) {
            this.packages = packages;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(@Nullable String parentId) {
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder parentName(@Nullable String parentName) {
            this.parentName = parentName;
            return this;
        }
        @CustomType.Setter
        public Builder repoType(@Nullable String repoType) {
            this.repoType = repoType;
            return this;
        }
        @CustomType.Setter
        public Builder softwareSourceId(String softwareSourceId) {
            this.softwareSourceId = Objects.requireNonNull(softwareSourceId);
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        public GetSoftwareSourceResult build() {
            final var o = new GetSoftwareSourceResult();
            o.archType = archType;
            o.associatedManagedInstances = associatedManagedInstances;
            o.checksumType = checksumType;
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.gpgKeyFingerprint = gpgKeyFingerprint;
            o.gpgKeyId = gpgKeyId;
            o.gpgKeyUrl = gpgKeyUrl;
            o.id = id;
            o.maintainerEmail = maintainerEmail;
            o.maintainerName = maintainerName;
            o.maintainerPhone = maintainerPhone;
            o.packages = packages;
            o.parentId = parentId;
            o.parentName = parentName;
            o.repoType = repoType;
            o.softwareSourceId = softwareSourceId;
            o.state = state;
            o.status = status;
            o.url = url;
            return o;
        }
    }
}
