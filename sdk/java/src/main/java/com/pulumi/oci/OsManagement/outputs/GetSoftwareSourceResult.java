// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagement.outputs.GetSoftwareSourceAssociatedManagedInstance;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSoftwareSourceResult {
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    private String archType;
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    private List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    private String checksumType;
    /**
     * @return OCID for the Compartment
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Information specified by the user about the software source
     * 
     */
    private String description;
    /**
     * @return User friendly name for the software source
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    private String gpgKeyFingerprint;
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    private String gpgKeyId;
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    private String gpgKeyUrl;
    /**
     * @return OCID for the Software Source
     * 
     */
    private String id;
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    private String maintainerEmail;
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    private String maintainerName;
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    private String maintainerPhone;
    /**
     * @return Number of packages
     * 
     */
    private Integer packages;
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    private String parentId;
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    private String parentName;
    /**
     * @return Type of the Software Source
     * 
     */
    private String repoType;
    private String softwareSourceId;
    /**
     * @return The current state of the Software Source.
     * 
     */
    private String state;
    /**
     * @return status of the software source.
     * 
     */
    private String status;
    /**
     * @return URL for the repostiory
     * 
     */
    private String url;

    private GetSoftwareSourceResult() {}
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public String archType() {
        return this.archType;
    }
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    public List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances() {
        return this.associatedManagedInstances;
    }
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    public String checksumType() {
        return this.checksumType;
    }
    /**
     * @return OCID for the Compartment
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Information specified by the user about the software source
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return User friendly name for the software source
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    public String gpgKeyFingerprint() {
        return this.gpgKeyFingerprint;
    }
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    public String gpgKeyId() {
        return this.gpgKeyId;
    }
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    public String gpgKeyUrl() {
        return this.gpgKeyUrl;
    }
    /**
     * @return OCID for the Software Source
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    public String maintainerEmail() {
        return this.maintainerEmail;
    }
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    public String maintainerName() {
        return this.maintainerName;
    }
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    public String maintainerPhone() {
        return this.maintainerPhone;
    }
    /**
     * @return Number of packages
     * 
     */
    public Integer packages() {
        return this.packages;
    }
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    public String parentName() {
        return this.parentName;
    }
    /**
     * @return Type of the Software Source
     * 
     */
    public String repoType() {
        return this.repoType;
    }
    public String softwareSourceId() {
        return this.softwareSourceId;
    }
    /**
     * @return The current state of the Software Source.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return status of the software source.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return URL for the repostiory
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archType;
        private List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
        private String checksumType;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String gpgKeyFingerprint;
        private String gpgKeyId;
        private String gpgKeyUrl;
        private String id;
        private String maintainerEmail;
        private String maintainerName;
        private String maintainerPhone;
        private Integer packages;
        private String parentId;
        private String parentName;
        private String repoType;
        private String softwareSourceId;
        private String state;
        private String status;
        private String url;
        public Builder() {}
        public Builder(GetSoftwareSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.associatedManagedInstances = defaults.associatedManagedInstances;
    	      this.checksumType = defaults.checksumType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gpgKeyFingerprint = defaults.gpgKeyFingerprint;
    	      this.gpgKeyId = defaults.gpgKeyId;
    	      this.gpgKeyUrl = defaults.gpgKeyUrl;
    	      this.id = defaults.id;
    	      this.maintainerEmail = defaults.maintainerEmail;
    	      this.maintainerName = defaults.maintainerName;
    	      this.maintainerPhone = defaults.maintainerPhone;
    	      this.packages = defaults.packages;
    	      this.parentId = defaults.parentId;
    	      this.parentName = defaults.parentName;
    	      this.repoType = defaults.repoType;
    	      this.softwareSourceId = defaults.softwareSourceId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder archType(String archType) {
            this.archType = Objects.requireNonNull(archType);
            return this;
        }
        @CustomType.Setter
        public Builder associatedManagedInstances(List<GetSoftwareSourceAssociatedManagedInstance> associatedManagedInstances) {
            this.associatedManagedInstances = Objects.requireNonNull(associatedManagedInstances);
            return this;
        }
        public Builder associatedManagedInstances(GetSoftwareSourceAssociatedManagedInstance... associatedManagedInstances) {
            return associatedManagedInstances(List.of(associatedManagedInstances));
        }
        @CustomType.Setter
        public Builder checksumType(String checksumType) {
            this.checksumType = Objects.requireNonNull(checksumType);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyFingerprint(String gpgKeyFingerprint) {
            this.gpgKeyFingerprint = Objects.requireNonNull(gpgKeyFingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyId(String gpgKeyId) {
            this.gpgKeyId = Objects.requireNonNull(gpgKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyUrl(String gpgKeyUrl) {
            this.gpgKeyUrl = Objects.requireNonNull(gpgKeyUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maintainerEmail(String maintainerEmail) {
            this.maintainerEmail = Objects.requireNonNull(maintainerEmail);
            return this;
        }
        @CustomType.Setter
        public Builder maintainerName(String maintainerName) {
            this.maintainerName = Objects.requireNonNull(maintainerName);
            return this;
        }
        @CustomType.Setter
        public Builder maintainerPhone(String maintainerPhone) {
            this.maintainerPhone = Objects.requireNonNull(maintainerPhone);
            return this;
        }
        @CustomType.Setter
        public Builder packages(Integer packages) {
            this.packages = Objects.requireNonNull(packages);
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }
        @CustomType.Setter
        public Builder parentName(String parentName) {
            this.parentName = Objects.requireNonNull(parentName);
            return this;
        }
        @CustomType.Setter
        public Builder repoType(String repoType) {
            this.repoType = Objects.requireNonNull(repoType);
            return this;
        }
        @CustomType.Setter
        public Builder softwareSourceId(String softwareSourceId) {
            this.softwareSourceId = Objects.requireNonNull(softwareSourceId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public GetSoftwareSourceResult build() {
            final var _resultValue = new GetSoftwareSourceResult();
            _resultValue.archType = archType;
            _resultValue.associatedManagedInstances = associatedManagedInstances;
            _resultValue.checksumType = checksumType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.gpgKeyFingerprint = gpgKeyFingerprint;
            _resultValue.gpgKeyId = gpgKeyId;
            _resultValue.gpgKeyUrl = gpgKeyUrl;
            _resultValue.id = id;
            _resultValue.maintainerEmail = maintainerEmail;
            _resultValue.maintainerName = maintainerName;
            _resultValue.maintainerPhone = maintainerPhone;
            _resultValue.packages = packages;
            _resultValue.parentId = parentId;
            _resultValue.parentName = parentName;
            _resultValue.repoType = repoType;
            _resultValue.softwareSourceId = softwareSourceId;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
