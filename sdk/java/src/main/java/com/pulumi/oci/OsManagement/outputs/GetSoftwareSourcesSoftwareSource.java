// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagement.outputs.GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSoftwareSourcesSoftwareSource {
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    private String archType;
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    private List<GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    private String checksumType;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Information specified by the user about the software source
     * 
     */
    private String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    private String gpgKeyFingerprint;
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    private String gpgKeyId;
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    private String gpgKeyUrl;
    /**
     * @return OCID for the Software Source
     * 
     */
    private String id;
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    private String maintainerEmail;
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    private String maintainerName;
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    private String maintainerPhone;
    /**
     * @return Number of packages
     * 
     */
    private Integer packages;
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    private String parentId;
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    private String parentName;
    /**
     * @return Type of the Software Source
     * 
     */
    private String repoType;
    /**
     * @return The current lifecycle state for the object.
     * 
     */
    private String state;
    /**
     * @return status of the software source.
     * 
     */
    private String status;
    /**
     * @return URL for the repostiory
     * 
     */
    private String url;

    private GetSoftwareSourcesSoftwareSource() {}
    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public String archType() {
        return this.archType;
    }
    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    public List<GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance> associatedManagedInstances() {
        return this.associatedManagedInstances;
    }
    /**
     * @return The yum repository checksum type used by this software source
     * 
     */
    public String checksumType() {
        return this.checksumType;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Information specified by the user about the software source
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    public String gpgKeyFingerprint() {
        return this.gpgKeyFingerprint;
    }
    /**
     * @return ID of the GPG key for this software source
     * 
     */
    public String gpgKeyId() {
        return this.gpgKeyId;
    }
    /**
     * @return URL of the GPG key for this software source
     * 
     */
    public String gpgKeyUrl() {
        return this.gpgKeyUrl;
    }
    /**
     * @return OCID for the Software Source
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Email address of the person maintaining this software source
     * 
     */
    public String maintainerEmail() {
        return this.maintainerEmail;
    }
    /**
     * @return Name of the person maintaining this software source
     * 
     */
    public String maintainerName() {
        return this.maintainerName;
    }
    /**
     * @return Phone number of the person maintaining this software source
     * 
     */
    public String maintainerPhone() {
        return this.maintainerPhone;
    }
    /**
     * @return Number of packages
     * 
     */
    public Integer packages() {
        return this.packages;
    }
    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    public String parentName() {
        return this.parentName;
    }
    /**
     * @return Type of the Software Source
     * 
     */
    public String repoType() {
        return this.repoType;
    }
    /**
     * @return The current lifecycle state for the object.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return status of the software source.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return URL for the repostiory
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareSourcesSoftwareSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archType;
        private List<GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance> associatedManagedInstances;
        private String checksumType;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String gpgKeyFingerprint;
        private String gpgKeyId;
        private String gpgKeyUrl;
        private String id;
        private String maintainerEmail;
        private String maintainerName;
        private String maintainerPhone;
        private Integer packages;
        private String parentId;
        private String parentName;
        private String repoType;
        private String state;
        private String status;
        private String url;
        public Builder() {}
        public Builder(GetSoftwareSourcesSoftwareSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.associatedManagedInstances = defaults.associatedManagedInstances;
    	      this.checksumType = defaults.checksumType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gpgKeyFingerprint = defaults.gpgKeyFingerprint;
    	      this.gpgKeyId = defaults.gpgKeyId;
    	      this.gpgKeyUrl = defaults.gpgKeyUrl;
    	      this.id = defaults.id;
    	      this.maintainerEmail = defaults.maintainerEmail;
    	      this.maintainerName = defaults.maintainerName;
    	      this.maintainerPhone = defaults.maintainerPhone;
    	      this.packages = defaults.packages;
    	      this.parentId = defaults.parentId;
    	      this.parentName = defaults.parentName;
    	      this.repoType = defaults.repoType;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder archType(String archType) {
            if (archType == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "archType");
            }
            this.archType = archType;
            return this;
        }
        @CustomType.Setter
        public Builder associatedManagedInstances(List<GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance> associatedManagedInstances) {
            if (associatedManagedInstances == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "associatedManagedInstances");
            }
            this.associatedManagedInstances = associatedManagedInstances;
            return this;
        }
        public Builder associatedManagedInstances(GetSoftwareSourcesSoftwareSourceAssociatedManagedInstance... associatedManagedInstances) {
            return associatedManagedInstances(List.of(associatedManagedInstances));
        }
        @CustomType.Setter
        public Builder checksumType(String checksumType) {
            if (checksumType == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "checksumType");
            }
            this.checksumType = checksumType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyFingerprint(String gpgKeyFingerprint) {
            if (gpgKeyFingerprint == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "gpgKeyFingerprint");
            }
            this.gpgKeyFingerprint = gpgKeyFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyId(String gpgKeyId) {
            if (gpgKeyId == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "gpgKeyId");
            }
            this.gpgKeyId = gpgKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeyUrl(String gpgKeyUrl) {
            if (gpgKeyUrl == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "gpgKeyUrl");
            }
            this.gpgKeyUrl = gpgKeyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerEmail(String maintainerEmail) {
            if (maintainerEmail == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "maintainerEmail");
            }
            this.maintainerEmail = maintainerEmail;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerName(String maintainerName) {
            if (maintainerName == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "maintainerName");
            }
            this.maintainerName = maintainerName;
            return this;
        }
        @CustomType.Setter
        public Builder maintainerPhone(String maintainerPhone) {
            if (maintainerPhone == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "maintainerPhone");
            }
            this.maintainerPhone = maintainerPhone;
            return this;
        }
        @CustomType.Setter
        public Builder packages(Integer packages) {
            if (packages == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "packages");
            }
            this.packages = packages;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder parentName(String parentName) {
            if (parentName == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "parentName");
            }
            this.parentName = parentName;
            return this;
        }
        @CustomType.Setter
        public Builder repoType(String repoType) {
            if (repoType == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "repoType");
            }
            this.repoType = repoType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourcesSoftwareSource", "url");
            }
            this.url = url;
            return this;
        }
        public GetSoftwareSourcesSoftwareSource build() {
            final var _resultValue = new GetSoftwareSourcesSoftwareSource();
            _resultValue.archType = archType;
            _resultValue.associatedManagedInstances = associatedManagedInstances;
            _resultValue.checksumType = checksumType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.gpgKeyFingerprint = gpgKeyFingerprint;
            _resultValue.gpgKeyId = gpgKeyId;
            _resultValue.gpgKeyUrl = gpgKeyUrl;
            _resultValue.id = id;
            _resultValue.maintainerEmail = maintainerEmail;
            _resultValue.maintainerName = maintainerName;
            _resultValue.maintainerPhone = maintainerPhone;
            _resultValue.packages = packages;
            _resultValue.parentId = parentId;
            _resultValue.parentName = parentName;
            _resultValue.repoType = repoType;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
