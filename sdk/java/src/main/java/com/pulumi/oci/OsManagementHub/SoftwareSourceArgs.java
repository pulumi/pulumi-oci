// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.inputs.SoftwareSourceCustomSoftwareSourceFilterArgs;
import com.pulumi.oci.OsManagementHub.inputs.SoftwareSourceVendorSoftwareSourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SoftwareSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SoftwareSourceArgs Empty = new SoftwareSourceArgs();

    /**
     * (Updatable) Advanced repository options for the software source
     * 
     */
    @Import(name="advancedRepoOptions")
    private @Nullable Output<String> advancedRepoOptions;

    /**
     * @return (Updatable) Advanced repository options for the software source
     * 
     */
    public Optional<Output<String>> advancedRepoOptions() {
        return Optional.ofNullable(this.advancedRepoOptions);
    }

    /**
     * The architecture type supported by the third-party software source.
     * 
     */
    @Import(name="archType")
    private @Nullable Output<String> archType;

    /**
     * @return The architecture type supported by the third-party software source.
     * 
     */
    public Optional<Output<String>> archType() {
        return Optional.ofNullable(this.archType);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
     * 
     */
    @Import(name="customSoftwareSourceFilter")
    private @Nullable Output<SoftwareSourceCustomSoftwareSourceFilterArgs> customSoftwareSourceFilter;

    /**
     * @return (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
     * 
     */
    public Optional<Output<SoftwareSourceCustomSoftwareSourceFilterArgs>> customSoftwareSourceFilter() {
        return Optional.ofNullable(this.customSoftwareSourceFilter);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) User-specified description for the software source. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) User-specified description for the software source. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) URI of the GPG key for this software source.
     * 
     */
    @Import(name="gpgKeyUrl")
    private @Nullable Output<String> gpgKeyUrl;

    /**
     * @return (Updatable) URI of the GPG key for this software source.
     * 
     */
    public Optional<Output<String>> gpgKeyUrl() {
        return Optional.ofNullable(this.gpgKeyUrl);
    }

    /**
     * (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
     * 
     */
    @Import(name="isAutoResolveDependencies")
    private @Nullable Output<Boolean> isAutoResolveDependencies;

    /**
     * @return (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
     * 
     */
    public Optional<Output<Boolean>> isAutoResolveDependencies() {
        return Optional.ofNullable(this.isAutoResolveDependencies);
    }

    /**
     * (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
     * 
     */
    @Import(name="isAutomaticallyUpdated")
    private @Nullable Output<Boolean> isAutomaticallyUpdated;

    /**
     * @return (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
     * 
     */
    public Optional<Output<Boolean>> isAutomaticallyUpdated() {
        return Optional.ofNullable(this.isAutomaticallyUpdated);
    }

    /**
     * Indicates whether the service should create the software source from a list of packages provided by the user.
     * 
     */
    @Import(name="isCreatedFromPackageList")
    private @Nullable Output<Boolean> isCreatedFromPackageList;

    /**
     * @return Indicates whether the service should create the software source from a list of packages provided by the user.
     * 
     */
    public Optional<Output<Boolean>> isCreatedFromPackageList() {
        return Optional.ofNullable(this.isCreatedFromPackageList);
    }

    /**
     * (Updatable) Whether signature verification should be done for the software source.
     * 
     */
    @Import(name="isGpgCheckEnabled")
    private @Nullable Output<Boolean> isGpgCheckEnabled;

    /**
     * @return (Updatable) Whether signature verification should be done for the software source.
     * 
     */
    public Optional<Output<Boolean>> isGpgCheckEnabled() {
        return Optional.ofNullable(this.isGpgCheckEnabled);
    }

    /**
     * (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
     * * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
     * * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
     * * For a package filter that does not specify a version, this will include only the latest available version of the package.
     * * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
     * * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
     * 
     */
    @Import(name="isLatestContentOnly")
    private @Nullable Output<Boolean> isLatestContentOnly;

    /**
     * @return (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
     * * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
     * * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
     * * For a package filter that does not specify a version, this will include only the latest available version of the package.
     * * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
     * * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
     * 
     */
    public Optional<Output<Boolean>> isLatestContentOnly() {
        return Optional.ofNullable(this.isLatestContentOnly);
    }

    /**
     * (Updatable) Whether this software source can be synced to a management station
     * 
     */
    @Import(name="isMirrorSyncAllowed")
    private @Nullable Output<Boolean> isMirrorSyncAllowed;

    /**
     * @return (Updatable) Whether this software source can be synced to a management station
     * 
     */
    public Optional<Output<Boolean>> isMirrorSyncAllowed() {
        return Optional.ofNullable(this.isMirrorSyncAllowed);
    }

    /**
     * (Updatable) Whether SSL validation needs to be turned on
     * 
     */
    @Import(name="isSslVerifyEnabled")
    private @Nullable Output<Boolean> isSslVerifyEnabled;

    /**
     * @return (Updatable) Whether SSL validation needs to be turned on
     * 
     */
    public Optional<Output<Boolean>> isSslVerifyEnabled() {
        return Optional.ofNullable(this.isSslVerifyEnabled);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
     * 
     */
    @Import(name="originSoftwareSourceId")
    private @Nullable Output<String> originSoftwareSourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
     * 
     */
    public Optional<Output<String>> originSoftwareSourceId() {
        return Optional.ofNullable(this.originSoftwareSourceId);
    }

    /**
     * The OS family for the third-party software source.
     * 
     */
    @Import(name="osFamily")
    private @Nullable Output<String> osFamily;

    /**
     * @return The OS family for the third-party software source.
     * 
     */
    public Optional<Output<String>> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }

    /**
     * A property used for compatibility only. It doesn&#39;t provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
     * 
     */
    @Import(name="packages")
    private @Nullable Output<List<String>> packages;

    /**
     * @return A property used for compatibility only. It doesn&#39;t provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
     * 
     */
    public Optional<Output<List<String>>> packages() {
        return Optional.ofNullable(this.packages);
    }

    /**
     * The creation type of a software source.
     * 
     */
    @Import(name="softwareSourceSubType")
    private @Nullable Output<String> softwareSourceSubType;

    /**
     * @return The creation type of a software source.
     * 
     */
    public Optional<Output<String>> softwareSourceSubType() {
        return Optional.ofNullable(this.softwareSourceSubType);
    }

    /**
     * (Updatable) Type of software source.
     * 
     */
    @Import(name="softwareSourceType", required=true)
    private Output<String> softwareSourceType;

    /**
     * @return (Updatable) Type of software source.
     * 
     */
    public Output<String> softwareSourceType() {
        return this.softwareSourceType;
    }

    /**
     * The version to assign to this custom software source.
     * 
     */
    @Import(name="softwareSourceVersion")
    private @Nullable Output<String> softwareSourceVersion;

    /**
     * @return The version to assign to this custom software source.
     * 
     */
    public Optional<Output<String>> softwareSourceVersion() {
        return Optional.ofNullable(this.softwareSourceVersion);
    }

    /**
     * (Updatable) URL for the third-party software source.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return (Updatable) URL for the third-party software source.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (Updatable) List of vendor software sources.
     * 
     */
    @Import(name="vendorSoftwareSources")
    private @Nullable Output<List<SoftwareSourceVendorSoftwareSourceArgs>> vendorSoftwareSources;

    /**
     * @return (Updatable) List of vendor software sources.
     * 
     */
    public Optional<Output<List<SoftwareSourceVendorSoftwareSourceArgs>>> vendorSoftwareSources() {
        return Optional.ofNullable(this.vendorSoftwareSources);
    }

    private SoftwareSourceArgs() {}

    private SoftwareSourceArgs(SoftwareSourceArgs $) {
        this.advancedRepoOptions = $.advancedRepoOptions;
        this.archType = $.archType;
        this.compartmentId = $.compartmentId;
        this.customSoftwareSourceFilter = $.customSoftwareSourceFilter;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.gpgKeyUrl = $.gpgKeyUrl;
        this.isAutoResolveDependencies = $.isAutoResolveDependencies;
        this.isAutomaticallyUpdated = $.isAutomaticallyUpdated;
        this.isCreatedFromPackageList = $.isCreatedFromPackageList;
        this.isGpgCheckEnabled = $.isGpgCheckEnabled;
        this.isLatestContentOnly = $.isLatestContentOnly;
        this.isMirrorSyncAllowed = $.isMirrorSyncAllowed;
        this.isSslVerifyEnabled = $.isSslVerifyEnabled;
        this.originSoftwareSourceId = $.originSoftwareSourceId;
        this.osFamily = $.osFamily;
        this.packages = $.packages;
        this.softwareSourceSubType = $.softwareSourceSubType;
        this.softwareSourceType = $.softwareSourceType;
        this.softwareSourceVersion = $.softwareSourceVersion;
        this.url = $.url;
        this.vendorSoftwareSources = $.vendorSoftwareSources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareSourceArgs $;

        public Builder() {
            $ = new SoftwareSourceArgs();
        }

        public Builder(SoftwareSourceArgs defaults) {
            $ = new SoftwareSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedRepoOptions (Updatable) Advanced repository options for the software source
         * 
         * @return builder
         * 
         */
        public Builder advancedRepoOptions(@Nullable Output<String> advancedRepoOptions) {
            $.advancedRepoOptions = advancedRepoOptions;
            return this;
        }

        /**
         * @param advancedRepoOptions (Updatable) Advanced repository options for the software source
         * 
         * @return builder
         * 
         */
        public Builder advancedRepoOptions(String advancedRepoOptions) {
            return advancedRepoOptions(Output.of(advancedRepoOptions));
        }

        /**
         * @param archType The architecture type supported by the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder archType(@Nullable Output<String> archType) {
            $.archType = archType;
            return this;
        }

        /**
         * @param archType The architecture type supported by the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder archType(String archType) {
            return archType(Output.of(archType));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param customSoftwareSourceFilter (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
         * 
         * @return builder
         * 
         */
        public Builder customSoftwareSourceFilter(@Nullable Output<SoftwareSourceCustomSoftwareSourceFilterArgs> customSoftwareSourceFilter) {
            $.customSoftwareSourceFilter = customSoftwareSourceFilter;
            return this;
        }

        /**
         * @param customSoftwareSourceFilter (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
         * 
         * @return builder
         * 
         */
        public Builder customSoftwareSourceFilter(SoftwareSourceCustomSoftwareSourceFilterArgs customSoftwareSourceFilter) {
            return customSoftwareSourceFilter(Output.of(customSoftwareSourceFilter));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) User-specified description for the software source. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) User-specified description for the software source. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param gpgKeyUrl (Updatable) URI of the GPG key for this software source.
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyUrl(@Nullable Output<String> gpgKeyUrl) {
            $.gpgKeyUrl = gpgKeyUrl;
            return this;
        }

        /**
         * @param gpgKeyUrl (Updatable) URI of the GPG key for this software source.
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyUrl(String gpgKeyUrl) {
            return gpgKeyUrl(Output.of(gpgKeyUrl));
        }

        /**
         * @param isAutoResolveDependencies (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
         * 
         * @return builder
         * 
         */
        public Builder isAutoResolveDependencies(@Nullable Output<Boolean> isAutoResolveDependencies) {
            $.isAutoResolveDependencies = isAutoResolveDependencies;
            return this;
        }

        /**
         * @param isAutoResolveDependencies (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
         * 
         * @return builder
         * 
         */
        public Builder isAutoResolveDependencies(Boolean isAutoResolveDependencies) {
            return isAutoResolveDependencies(Output.of(isAutoResolveDependencies));
        }

        /**
         * @param isAutomaticallyUpdated (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
         * 
         * @return builder
         * 
         */
        public Builder isAutomaticallyUpdated(@Nullable Output<Boolean> isAutomaticallyUpdated) {
            $.isAutomaticallyUpdated = isAutomaticallyUpdated;
            return this;
        }

        /**
         * @param isAutomaticallyUpdated (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
         * 
         * @return builder
         * 
         */
        public Builder isAutomaticallyUpdated(Boolean isAutomaticallyUpdated) {
            return isAutomaticallyUpdated(Output.of(isAutomaticallyUpdated));
        }

        /**
         * @param isCreatedFromPackageList Indicates whether the service should create the software source from a list of packages provided by the user.
         * 
         * @return builder
         * 
         */
        public Builder isCreatedFromPackageList(@Nullable Output<Boolean> isCreatedFromPackageList) {
            $.isCreatedFromPackageList = isCreatedFromPackageList;
            return this;
        }

        /**
         * @param isCreatedFromPackageList Indicates whether the service should create the software source from a list of packages provided by the user.
         * 
         * @return builder
         * 
         */
        public Builder isCreatedFromPackageList(Boolean isCreatedFromPackageList) {
            return isCreatedFromPackageList(Output.of(isCreatedFromPackageList));
        }

        /**
         * @param isGpgCheckEnabled (Updatable) Whether signature verification should be done for the software source.
         * 
         * @return builder
         * 
         */
        public Builder isGpgCheckEnabled(@Nullable Output<Boolean> isGpgCheckEnabled) {
            $.isGpgCheckEnabled = isGpgCheckEnabled;
            return this;
        }

        /**
         * @param isGpgCheckEnabled (Updatable) Whether signature verification should be done for the software source.
         * 
         * @return builder
         * 
         */
        public Builder isGpgCheckEnabled(Boolean isGpgCheckEnabled) {
            return isGpgCheckEnabled(Output.of(isGpgCheckEnabled));
        }

        /**
         * @param isLatestContentOnly (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
         * * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
         * * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
         * * For a package filter that does not specify a version, this will include only the latest available version of the package.
         * * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
         * * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
         * 
         * @return builder
         * 
         */
        public Builder isLatestContentOnly(@Nullable Output<Boolean> isLatestContentOnly) {
            $.isLatestContentOnly = isLatestContentOnly;
            return this;
        }

        /**
         * @param isLatestContentOnly (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
         * * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
         * * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
         * * For a package filter that does not specify a version, this will include only the latest available version of the package.
         * * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
         * * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
         * 
         * @return builder
         * 
         */
        public Builder isLatestContentOnly(Boolean isLatestContentOnly) {
            return isLatestContentOnly(Output.of(isLatestContentOnly));
        }

        /**
         * @param isMirrorSyncAllowed (Updatable) Whether this software source can be synced to a management station
         * 
         * @return builder
         * 
         */
        public Builder isMirrorSyncAllowed(@Nullable Output<Boolean> isMirrorSyncAllowed) {
            $.isMirrorSyncAllowed = isMirrorSyncAllowed;
            return this;
        }

        /**
         * @param isMirrorSyncAllowed (Updatable) Whether this software source can be synced to a management station
         * 
         * @return builder
         * 
         */
        public Builder isMirrorSyncAllowed(Boolean isMirrorSyncAllowed) {
            return isMirrorSyncAllowed(Output.of(isMirrorSyncAllowed));
        }

        /**
         * @param isSslVerifyEnabled (Updatable) Whether SSL validation needs to be turned on
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyEnabled(@Nullable Output<Boolean> isSslVerifyEnabled) {
            $.isSslVerifyEnabled = isSslVerifyEnabled;
            return this;
        }

        /**
         * @param isSslVerifyEnabled (Updatable) Whether SSL validation needs to be turned on
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyEnabled(Boolean isSslVerifyEnabled) {
            return isSslVerifyEnabled(Output.of(isSslVerifyEnabled));
        }

        /**
         * @param originSoftwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
         * 
         * @return builder
         * 
         */
        public Builder originSoftwareSourceId(@Nullable Output<String> originSoftwareSourceId) {
            $.originSoftwareSourceId = originSoftwareSourceId;
            return this;
        }

        /**
         * @param originSoftwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
         * 
         * @return builder
         * 
         */
        public Builder originSoftwareSourceId(String originSoftwareSourceId) {
            return originSoftwareSourceId(Output.of(originSoftwareSourceId));
        }

        /**
         * @param osFamily The OS family for the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder osFamily(@Nullable Output<String> osFamily) {
            $.osFamily = osFamily;
            return this;
        }

        /**
         * @param osFamily The OS family for the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder osFamily(String osFamily) {
            return osFamily(Output.of(osFamily));
        }

        /**
         * @param packages A property used for compatibility only. It doesn&#39;t provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
         * 
         * @return builder
         * 
         */
        public Builder packages(@Nullable Output<List<String>> packages) {
            $.packages = packages;
            return this;
        }

        /**
         * @param packages A property used for compatibility only. It doesn&#39;t provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
         * 
         * @return builder
         * 
         */
        public Builder packages(List<String> packages) {
            return packages(Output.of(packages));
        }

        /**
         * @param packages A property used for compatibility only. It doesn&#39;t provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
         * 
         * @return builder
         * 
         */
        public Builder packages(String... packages) {
            return packages(List.of(packages));
        }

        /**
         * @param softwareSourceSubType The creation type of a software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceSubType(@Nullable Output<String> softwareSourceSubType) {
            $.softwareSourceSubType = softwareSourceSubType;
            return this;
        }

        /**
         * @param softwareSourceSubType The creation type of a software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceSubType(String softwareSourceSubType) {
            return softwareSourceSubType(Output.of(softwareSourceSubType));
        }

        /**
         * @param softwareSourceType (Updatable) Type of software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceType(Output<String> softwareSourceType) {
            $.softwareSourceType = softwareSourceType;
            return this;
        }

        /**
         * @param softwareSourceType (Updatable) Type of software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceType(String softwareSourceType) {
            return softwareSourceType(Output.of(softwareSourceType));
        }

        /**
         * @param softwareSourceVersion The version to assign to this custom software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceVersion(@Nullable Output<String> softwareSourceVersion) {
            $.softwareSourceVersion = softwareSourceVersion;
            return this;
        }

        /**
         * @param softwareSourceVersion The version to assign to this custom software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceVersion(String softwareSourceVersion) {
            return softwareSourceVersion(Output.of(softwareSourceVersion));
        }

        /**
         * @param url (Updatable) URL for the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Updatable) URL for the third-party software source.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param vendorSoftwareSources (Updatable) List of vendor software sources.
         * 
         * @return builder
         * 
         */
        public Builder vendorSoftwareSources(@Nullable Output<List<SoftwareSourceVendorSoftwareSourceArgs>> vendorSoftwareSources) {
            $.vendorSoftwareSources = vendorSoftwareSources;
            return this;
        }

        /**
         * @param vendorSoftwareSources (Updatable) List of vendor software sources.
         * 
         * @return builder
         * 
         */
        public Builder vendorSoftwareSources(List<SoftwareSourceVendorSoftwareSourceArgs> vendorSoftwareSources) {
            return vendorSoftwareSources(Output.of(vendorSoftwareSources));
        }

        /**
         * @param vendorSoftwareSources (Updatable) List of vendor software sources.
         * 
         * @return builder
         * 
         */
        public Builder vendorSoftwareSources(SoftwareSourceVendorSoftwareSourceArgs... vendorSoftwareSources) {
            return vendorSoftwareSources(List.of(vendorSoftwareSources));
        }

        public SoftwareSourceArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("SoftwareSourceArgs", "compartmentId");
            }
            if ($.softwareSourceType == null) {
                throw new MissingRequiredPropertyException("SoftwareSourceArgs", "softwareSourceType");
            }
            return $;
        }
    }

}
