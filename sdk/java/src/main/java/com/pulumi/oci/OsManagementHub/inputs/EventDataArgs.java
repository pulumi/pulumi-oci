// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.EventDataAdditionalDetailArgs;
import com.pulumi.oci.OsManagementHub.inputs.EventDataContentArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventDataArgs Empty = new EventDataArgs();

    /**
     * Provides additional information for the work request associated with an event.
     * 
     */
    @Import(name="additionalDetails")
    private @Nullable Output<List<EventDataAdditionalDetailArgs>> additionalDetails;

    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    public Optional<Output<List<EventDataAdditionalDetailArgs>>> additionalDetails() {
        return Optional.ofNullable(this.additionalDetails);
    }

    /**
     * The actions used to attempt fixing the error.
     * 
     */
    @Import(name="attemptedResolutions")
    private @Nullable Output<List<String>> attemptedResolutions;

    /**
     * @return The actions used to attempt fixing the error.
     * 
     */
    public Optional<Output<List<String>>> attemptedResolutions() {
        return Optional.ofNullable(this.attemptedResolutions);
    }

    /**
     * Provides information collected for the exploit attempt event.
     * 
     */
    @Import(name="contents")
    private @Nullable Output<List<EventDataContentArgs>> contents;

    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    public Optional<Output<List<EventDataContentArgs>>> contents() {
        return Optional.ofNullable(this.contents);
    }

    /**
     * The commands executed by the agent that caused the error.
     * 
     */
    @Import(name="errorCause")
    private @Nullable Output<String> errorCause;

    /**
     * @return The commands executed by the agent that caused the error.
     * 
     */
    public Optional<Output<String>> errorCause() {
        return Optional.ofNullable(this.errorCause);
    }

    /**
     * The output log of the error.
     * 
     */
    @Import(name="errorLog")
    private @Nullable Output<String> errorLog;

    /**
     * @return The output log of the error.
     * 
     */
    public Optional<Output<String>> errorLog() {
        return Optional.ofNullable(this.errorLog);
    }

    /**
     * Number of times the event has occurred.
     * 
     */
    @Import(name="eventCount")
    private @Nullable Output<Integer> eventCount;

    /**
     * @return Number of times the event has occurred.
     * 
     */
    public Optional<Output<Integer>> eventCount() {
        return Optional.ofNullable(this.eventCount);
    }

    /**
     * Fingerprint of the event.
     * 
     */
    @Import(name="eventFingerprint")
    private @Nullable Output<String> eventFingerprint;

    /**
     * @return Fingerprint of the event.
     * 
     */
    public Optional<Output<String>> eventFingerprint() {
        return Optional.ofNullable(this.eventFingerprint);
    }

    /**
     * Health state of the management station
     * 
     */
    @Import(name="healthState")
    private @Nullable Output<String> healthState;

    /**
     * @return Health state of the management station
     * 
     */
    public Optional<Output<String>> healthState() {
        return Optional.ofNullable(this.healthState);
    }

    /**
     * Type of management station operation.
     * 
     */
    @Import(name="operationType")
    private @Nullable Output<String> operationType;

    /**
     * @return Type of management station operation.
     * 
     */
    public Optional<Output<String>> operationType() {
        return Optional.ofNullable(this.operationType);
    }

    /**
     * Reason for the event.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return Reason for the event.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * Reboot status for the current event
     * 
     */
    @Import(name="rebootStatus")
    private @Nullable Output<String> rebootStatus;

    /**
     * @return Reboot status for the current event
     * 
     */
    public Optional<Output<String>> rebootStatus() {
        return Optional.ofNullable(this.rebootStatus);
    }

    /**
     * The log output after the resolutions.
     * 
     */
    @Import(name="resolutionLog")
    private @Nullable Output<String> resolutionLog;

    /**
     * @return The log output after the resolutions.
     * 
     */
    public Optional<Output<String>> resolutionLog() {
        return Optional.ofNullable(this.resolutionLog);
    }

    /**
     * Indicates if the event succeeded.
     * 
     */
    @Import(name="resolutionStatus")
    private @Nullable Output<String> resolutionStatus;

    /**
     * @return Indicates if the event succeeded.
     * 
     */
    public Optional<Output<String>> resolutionStatus() {
        return Optional.ofNullable(this.resolutionStatus);
    }

    /**
     * Status of the management station operation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the management station operation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The date and time that the event first occurred.
     * 
     */
    @Import(name="timeFirstOccurred")
    private @Nullable Output<String> timeFirstOccurred;

    /**
     * @return The date and time that the event first occurred.
     * 
     */
    public Optional<Output<String>> timeFirstOccurred() {
        return Optional.ofNullable(this.timeFirstOccurred);
    }

    private EventDataArgs() {}

    private EventDataArgs(EventDataArgs $) {
        this.additionalDetails = $.additionalDetails;
        this.attemptedResolutions = $.attemptedResolutions;
        this.contents = $.contents;
        this.errorCause = $.errorCause;
        this.errorLog = $.errorLog;
        this.eventCount = $.eventCount;
        this.eventFingerprint = $.eventFingerprint;
        this.healthState = $.healthState;
        this.operationType = $.operationType;
        this.reason = $.reason;
        this.rebootStatus = $.rebootStatus;
        this.resolutionLog = $.resolutionLog;
        this.resolutionStatus = $.resolutionStatus;
        this.status = $.status;
        this.timeFirstOccurred = $.timeFirstOccurred;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventDataArgs $;

        public Builder() {
            $ = new EventDataArgs();
        }

        public Builder(EventDataArgs defaults) {
            $ = new EventDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(@Nullable Output<List<EventDataAdditionalDetailArgs>> additionalDetails) {
            $.additionalDetails = additionalDetails;
            return this;
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(List<EventDataAdditionalDetailArgs> additionalDetails) {
            return additionalDetails(Output.of(additionalDetails));
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(EventDataAdditionalDetailArgs... additionalDetails) {
            return additionalDetails(List.of(additionalDetails));
        }

        /**
         * @param attemptedResolutions The actions used to attempt fixing the error.
         * 
         * @return builder
         * 
         */
        public Builder attemptedResolutions(@Nullable Output<List<String>> attemptedResolutions) {
            $.attemptedResolutions = attemptedResolutions;
            return this;
        }

        /**
         * @param attemptedResolutions The actions used to attempt fixing the error.
         * 
         * @return builder
         * 
         */
        public Builder attemptedResolutions(List<String> attemptedResolutions) {
            return attemptedResolutions(Output.of(attemptedResolutions));
        }

        /**
         * @param attemptedResolutions The actions used to attempt fixing the error.
         * 
         * @return builder
         * 
         */
        public Builder attemptedResolutions(String... attemptedResolutions) {
            return attemptedResolutions(List.of(attemptedResolutions));
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(@Nullable Output<List<EventDataContentArgs>> contents) {
            $.contents = contents;
            return this;
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(List<EventDataContentArgs> contents) {
            return contents(Output.of(contents));
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(EventDataContentArgs... contents) {
            return contents(List.of(contents));
        }

        /**
         * @param errorCause The commands executed by the agent that caused the error.
         * 
         * @return builder
         * 
         */
        public Builder errorCause(@Nullable Output<String> errorCause) {
            $.errorCause = errorCause;
            return this;
        }

        /**
         * @param errorCause The commands executed by the agent that caused the error.
         * 
         * @return builder
         * 
         */
        public Builder errorCause(String errorCause) {
            return errorCause(Output.of(errorCause));
        }

        /**
         * @param errorLog The output log of the error.
         * 
         * @return builder
         * 
         */
        public Builder errorLog(@Nullable Output<String> errorLog) {
            $.errorLog = errorLog;
            return this;
        }

        /**
         * @param errorLog The output log of the error.
         * 
         * @return builder
         * 
         */
        public Builder errorLog(String errorLog) {
            return errorLog(Output.of(errorLog));
        }

        /**
         * @param eventCount Number of times the event has occurred.
         * 
         * @return builder
         * 
         */
        public Builder eventCount(@Nullable Output<Integer> eventCount) {
            $.eventCount = eventCount;
            return this;
        }

        /**
         * @param eventCount Number of times the event has occurred.
         * 
         * @return builder
         * 
         */
        public Builder eventCount(Integer eventCount) {
            return eventCount(Output.of(eventCount));
        }

        /**
         * @param eventFingerprint Fingerprint of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventFingerprint(@Nullable Output<String> eventFingerprint) {
            $.eventFingerprint = eventFingerprint;
            return this;
        }

        /**
         * @param eventFingerprint Fingerprint of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventFingerprint(String eventFingerprint) {
            return eventFingerprint(Output.of(eventFingerprint));
        }

        /**
         * @param healthState Health state of the management station
         * 
         * @return builder
         * 
         */
        public Builder healthState(@Nullable Output<String> healthState) {
            $.healthState = healthState;
            return this;
        }

        /**
         * @param healthState Health state of the management station
         * 
         * @return builder
         * 
         */
        public Builder healthState(String healthState) {
            return healthState(Output.of(healthState));
        }

        /**
         * @param operationType Type of management station operation.
         * 
         * @return builder
         * 
         */
        public Builder operationType(@Nullable Output<String> operationType) {
            $.operationType = operationType;
            return this;
        }

        /**
         * @param operationType Type of management station operation.
         * 
         * @return builder
         * 
         */
        public Builder operationType(String operationType) {
            return operationType(Output.of(operationType));
        }

        /**
         * @param reason Reason for the event.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason Reason for the event.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param rebootStatus Reboot status for the current event
         * 
         * @return builder
         * 
         */
        public Builder rebootStatus(@Nullable Output<String> rebootStatus) {
            $.rebootStatus = rebootStatus;
            return this;
        }

        /**
         * @param rebootStatus Reboot status for the current event
         * 
         * @return builder
         * 
         */
        public Builder rebootStatus(String rebootStatus) {
            return rebootStatus(Output.of(rebootStatus));
        }

        /**
         * @param resolutionLog The log output after the resolutions.
         * 
         * @return builder
         * 
         */
        public Builder resolutionLog(@Nullable Output<String> resolutionLog) {
            $.resolutionLog = resolutionLog;
            return this;
        }

        /**
         * @param resolutionLog The log output after the resolutions.
         * 
         * @return builder
         * 
         */
        public Builder resolutionLog(String resolutionLog) {
            return resolutionLog(Output.of(resolutionLog));
        }

        /**
         * @param resolutionStatus Indicates if the event succeeded.
         * 
         * @return builder
         * 
         */
        public Builder resolutionStatus(@Nullable Output<String> resolutionStatus) {
            $.resolutionStatus = resolutionStatus;
            return this;
        }

        /**
         * @param resolutionStatus Indicates if the event succeeded.
         * 
         * @return builder
         * 
         */
        public Builder resolutionStatus(String resolutionStatus) {
            return resolutionStatus(Output.of(resolutionStatus));
        }

        /**
         * @param status Status of the management station operation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the management station operation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeFirstOccurred The date and time that the event first occurred.
         * 
         * @return builder
         * 
         */
        public Builder timeFirstOccurred(@Nullable Output<String> timeFirstOccurred) {
            $.timeFirstOccurred = timeFirstOccurred;
            return this;
        }

        /**
         * @param timeFirstOccurred The date and time that the event first occurred.
         * 
         * @return builder
         * 
         */
        public Builder timeFirstOccurred(String timeFirstOccurred) {
            return timeFirstOccurred(Output.of(timeFirstOccurred));
        }

        public EventDataArgs build() {
            return $;
        }
    }

}
