// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.EventDataAdditionalDetailArgs;
import com.pulumi.oci.OsManagementHub.inputs.EventDataContentArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventDataArgs Empty = new EventDataArgs();

    /**
     * Provides additional information for the work request associated with an event.
     * 
     */
    @Import(name="additionalDetails")
    private @Nullable Output<List<EventDataAdditionalDetailArgs>> additionalDetails;

    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    public Optional<Output<List<EventDataAdditionalDetailArgs>>> additionalDetails() {
        return Optional.ofNullable(this.additionalDetails);
    }

    /**
     * Provides information collected for the exploit attempt event.
     * 
     */
    @Import(name="contents")
    private @Nullable Output<List<EventDataContentArgs>> contents;

    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    public Optional<Output<List<EventDataContentArgs>>> contents() {
        return Optional.ofNullable(this.contents);
    }

    /**
     * Number of times the event has occurred.
     * 
     */
    @Import(name="eventCount")
    private @Nullable Output<Integer> eventCount;

    /**
     * @return Number of times the event has occurred.
     * 
     */
    public Optional<Output<Integer>> eventCount() {
        return Optional.ofNullable(this.eventCount);
    }

    /**
     * Fingerprint of the event.
     * 
     */
    @Import(name="eventFingerprint")
    private @Nullable Output<String> eventFingerprint;

    /**
     * @return Fingerprint of the event.
     * 
     */
    public Optional<Output<String>> eventFingerprint() {
        return Optional.ofNullable(this.eventFingerprint);
    }

    /**
     * Type of management station operation.
     * 
     */
    @Import(name="operationType")
    private @Nullable Output<String> operationType;

    /**
     * @return Type of management station operation.
     * 
     */
    public Optional<Output<String>> operationType() {
        return Optional.ofNullable(this.operationType);
    }

    /**
     * Reason for the event.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return Reason for the event.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * Status of the management station operation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the management station operation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The date and time that the event first occurred.
     * 
     */
    @Import(name="timeFirstOccurred")
    private @Nullable Output<String> timeFirstOccurred;

    /**
     * @return The date and time that the event first occurred.
     * 
     */
    public Optional<Output<String>> timeFirstOccurred() {
        return Optional.ofNullable(this.timeFirstOccurred);
    }

    private EventDataArgs() {}

    private EventDataArgs(EventDataArgs $) {
        this.additionalDetails = $.additionalDetails;
        this.contents = $.contents;
        this.eventCount = $.eventCount;
        this.eventFingerprint = $.eventFingerprint;
        this.operationType = $.operationType;
        this.reason = $.reason;
        this.status = $.status;
        this.timeFirstOccurred = $.timeFirstOccurred;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventDataArgs $;

        public Builder() {
            $ = new EventDataArgs();
        }

        public Builder(EventDataArgs defaults) {
            $ = new EventDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(@Nullable Output<List<EventDataAdditionalDetailArgs>> additionalDetails) {
            $.additionalDetails = additionalDetails;
            return this;
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(List<EventDataAdditionalDetailArgs> additionalDetails) {
            return additionalDetails(Output.of(additionalDetails));
        }

        /**
         * @param additionalDetails Provides additional information for the work request associated with an event.
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(EventDataAdditionalDetailArgs... additionalDetails) {
            return additionalDetails(List.of(additionalDetails));
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(@Nullable Output<List<EventDataContentArgs>> contents) {
            $.contents = contents;
            return this;
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(List<EventDataContentArgs> contents) {
            return contents(Output.of(contents));
        }

        /**
         * @param contents Provides information collected for the exploit attempt event.
         * 
         * @return builder
         * 
         */
        public Builder contents(EventDataContentArgs... contents) {
            return contents(List.of(contents));
        }

        /**
         * @param eventCount Number of times the event has occurred.
         * 
         * @return builder
         * 
         */
        public Builder eventCount(@Nullable Output<Integer> eventCount) {
            $.eventCount = eventCount;
            return this;
        }

        /**
         * @param eventCount Number of times the event has occurred.
         * 
         * @return builder
         * 
         */
        public Builder eventCount(Integer eventCount) {
            return eventCount(Output.of(eventCount));
        }

        /**
         * @param eventFingerprint Fingerprint of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventFingerprint(@Nullable Output<String> eventFingerprint) {
            $.eventFingerprint = eventFingerprint;
            return this;
        }

        /**
         * @param eventFingerprint Fingerprint of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventFingerprint(String eventFingerprint) {
            return eventFingerprint(Output.of(eventFingerprint));
        }

        /**
         * @param operationType Type of management station operation.
         * 
         * @return builder
         * 
         */
        public Builder operationType(@Nullable Output<String> operationType) {
            $.operationType = operationType;
            return this;
        }

        /**
         * @param operationType Type of management station operation.
         * 
         * @return builder
         * 
         */
        public Builder operationType(String operationType) {
            return operationType(Output.of(operationType));
        }

        /**
         * @param reason Reason for the event.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason Reason for the event.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param status Status of the management station operation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the management station operation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeFirstOccurred The date and time that the event first occurred.
         * 
         * @return builder
         * 
         */
        public Builder timeFirstOccurred(@Nullable Output<String> timeFirstOccurred) {
            $.timeFirstOccurred = timeFirstOccurred;
            return this;
        }

        /**
         * @param timeFirstOccurred The date and time that the event first occurred.
         * 
         * @return builder
         * 
         */
        public Builder timeFirstOccurred(String timeFirstOccurred) {
            return timeFirstOccurred(Output.of(timeFirstOccurred));
        }

        public EventDataArgs build() {
            return $;
        }
    }

}
