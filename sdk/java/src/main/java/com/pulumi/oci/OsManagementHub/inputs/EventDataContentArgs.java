// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventDataContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventDataContentArgs Empty = new EventDataContentArgs();

    /**
     * Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    @Import(name="contentAvailability")
    private @Nullable Output<String> contentAvailability;

    /**
     * @return Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    public Optional<Output<String>> contentAvailability() {
        return Optional.ofNullable(this.contentAvailability);
    }

    /**
     * Location of the Kernel event content.
     * 
     */
    @Import(name="contentLocation")
    private @Nullable Output<String> contentLocation;

    /**
     * @return Location of the Kernel event content.
     * 
     */
    public Optional<Output<String>> contentLocation() {
        return Optional.ofNullable(this.contentLocation);
    }

    /**
     * The content of the exploit detection log.
     * 
     */
    @Import(name="exploitDetectionLogContent")
    private @Nullable Output<String> exploitDetectionLogContent;

    /**
     * @return The content of the exploit detection log.
     * 
     */
    public Optional<Output<String>> exploitDetectionLogContent() {
        return Optional.ofNullable(this.exploitDetectionLogContent);
    }

    /**
     * The location of the exploit detection log within object storage.
     * 
     */
    @Import(name="exploitObjectStoreLocation")
    private @Nullable Output<String> exploitObjectStoreLocation;

    /**
     * @return The location of the exploit detection log within object storage.
     * 
     */
    public Optional<Output<String>> exploitObjectStoreLocation() {
        return Optional.ofNullable(this.exploitObjectStoreLocation);
    }

    /**
     * Size of the event content.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Size of the event content.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Event type:
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Event type:
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private EventDataContentArgs() {}

    private EventDataContentArgs(EventDataContentArgs $) {
        this.contentAvailability = $.contentAvailability;
        this.contentLocation = $.contentLocation;
        this.exploitDetectionLogContent = $.exploitDetectionLogContent;
        this.exploitObjectStoreLocation = $.exploitObjectStoreLocation;
        this.size = $.size;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventDataContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventDataContentArgs $;

        public Builder() {
            $ = new EventDataContentArgs();
        }

        public Builder(EventDataContentArgs defaults) {
            $ = new EventDataContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentAvailability Crash content availability status:
         * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
         * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
         * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
         * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
         * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
         * 
         * @return builder
         * 
         */
        public Builder contentAvailability(@Nullable Output<String> contentAvailability) {
            $.contentAvailability = contentAvailability;
            return this;
        }

        /**
         * @param contentAvailability Crash content availability status:
         * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
         * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
         * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
         * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
         * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
         * 
         * @return builder
         * 
         */
        public Builder contentAvailability(String contentAvailability) {
            return contentAvailability(Output.of(contentAvailability));
        }

        /**
         * @param contentLocation Location of the Kernel event content.
         * 
         * @return builder
         * 
         */
        public Builder contentLocation(@Nullable Output<String> contentLocation) {
            $.contentLocation = contentLocation;
            return this;
        }

        /**
         * @param contentLocation Location of the Kernel event content.
         * 
         * @return builder
         * 
         */
        public Builder contentLocation(String contentLocation) {
            return contentLocation(Output.of(contentLocation));
        }

        /**
         * @param exploitDetectionLogContent The content of the exploit detection log.
         * 
         * @return builder
         * 
         */
        public Builder exploitDetectionLogContent(@Nullable Output<String> exploitDetectionLogContent) {
            $.exploitDetectionLogContent = exploitDetectionLogContent;
            return this;
        }

        /**
         * @param exploitDetectionLogContent The content of the exploit detection log.
         * 
         * @return builder
         * 
         */
        public Builder exploitDetectionLogContent(String exploitDetectionLogContent) {
            return exploitDetectionLogContent(Output.of(exploitDetectionLogContent));
        }

        /**
         * @param exploitObjectStoreLocation The location of the exploit detection log within object storage.
         * 
         * @return builder
         * 
         */
        public Builder exploitObjectStoreLocation(@Nullable Output<String> exploitObjectStoreLocation) {
            $.exploitObjectStoreLocation = exploitObjectStoreLocation;
            return this;
        }

        /**
         * @param exploitObjectStoreLocation The location of the exploit detection log within object storage.
         * 
         * @return builder
         * 
         */
        public Builder exploitObjectStoreLocation(String exploitObjectStoreLocation) {
            return exploitObjectStoreLocation(Output.of(exploitObjectStoreLocation));
        }

        /**
         * @param size Size of the event content.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the event content.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param type Event type:
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Event type:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EventDataContentArgs build() {
            return $;
        }
    }

}
