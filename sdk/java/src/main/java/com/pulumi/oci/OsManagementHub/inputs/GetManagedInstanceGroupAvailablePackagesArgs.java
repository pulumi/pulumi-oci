// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetManagedInstanceGroupAvailablePackagesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstanceGroupAvailablePackagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstanceGroupAvailablePackagesArgs Empty = new GetManagedInstanceGroupAvailablePackagesArgs();

    /**
     * The OCID of the compartment that contains the resources to list.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable Output<String> displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<Output<String>> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A filter to return resources that match the given display names.
     * 
     */
    @Import(name="displayNames")
    private @Nullable Output<List<String>> displayNames;

    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    public Optional<Output<List<String>>> displayNames() {
        return Optional.ofNullable(this.displayNames);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedInstanceGroupAvailablePackagesFilterArgs>> filters;

    public Optional<Output<List<GetManagedInstanceGroupAvailablePackagesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    @Import(name="isLatest")
    private @Nullable Output<Boolean> isLatest;

    /**
     * @return A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    public Optional<Output<Boolean>> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }

    /**
     * The managed instance group OCID.
     * 
     */
    @Import(name="managedInstanceGroupId", required=true)
    private Output<String> managedInstanceGroupId;

    /**
     * @return The managed instance group OCID.
     * 
     */
    public Output<String> managedInstanceGroupId() {
        return this.managedInstanceGroupId;
    }

    private GetManagedInstanceGroupAvailablePackagesArgs() {}

    private GetManagedInstanceGroupAvailablePackagesArgs(GetManagedInstanceGroupAvailablePackagesArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayNameContains = $.displayNameContains;
        this.displayNames = $.displayNames;
        this.filters = $.filters;
        this.isLatest = $.isLatest;
        this.managedInstanceGroupId = $.managedInstanceGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstanceGroupAvailablePackagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstanceGroupAvailablePackagesArgs $;

        public Builder() {
            $ = new GetManagedInstanceGroupAvailablePackagesArgs();
        }

        public Builder(GetManagedInstanceGroupAvailablePackagesArgs defaults) {
            $ = new GetManagedInstanceGroupAvailablePackagesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable Output<String> displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(String displayNameContains) {
            return displayNameContains(Output.of(displayNameContains));
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(@Nullable Output<List<String>> displayNames) {
            $.displayNames = displayNames;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(List<String> displayNames) {
            return displayNames(Output.of(displayNames));
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }

        public Builder filters(@Nullable Output<List<GetManagedInstanceGroupAvailablePackagesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedInstanceGroupAvailablePackagesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedInstanceGroupAvailablePackagesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isLatest A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
         * 
         * @return builder
         * 
         */
        public Builder isLatest(@Nullable Output<Boolean> isLatest) {
            $.isLatest = isLatest;
            return this;
        }

        /**
         * @param isLatest A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
         * 
         * @return builder
         * 
         */
        public Builder isLatest(Boolean isLatest) {
            return isLatest(Output.of(isLatest));
        }

        /**
         * @param managedInstanceGroupId The managed instance group OCID.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupId(Output<String> managedInstanceGroupId) {
            $.managedInstanceGroupId = managedInstanceGroupId;
            return this;
        }

        /**
         * @param managedInstanceGroupId The managed instance group OCID.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupId(String managedInstanceGroupId) {
            return managedInstanceGroupId(Output.of(managedInstanceGroupId));
        }

        public GetManagedInstanceGroupAvailablePackagesArgs build() {
            $.managedInstanceGroupId = Objects.requireNonNull($.managedInstanceGroupId, "expected parameter 'managedInstanceGroupId' to be non-null");
            return $;
        }
    }

}
