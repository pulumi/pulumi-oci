// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.inputs.GetManagedInstanceGroupInstalledPackagesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstanceGroupInstalledPackagesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstanceGroupInstalledPackagesPlainArgs Empty = new GetManagedInstanceGroupInstalledPackagesPlainArgs();

    /**
     * The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A filter to return resources that match the given display names.
     * 
     */
    @Import(name="displayNames")
    private @Nullable List<String> displayNames;

    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    public Optional<List<String>> displayNames() {
        return Optional.ofNullable(this.displayNames);
    }

    @Import(name="filters")
    private @Nullable List<GetManagedInstanceGroupInstalledPackagesFilter> filters;

    public Optional<List<GetManagedInstanceGroupInstalledPackagesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
     * 
     */
    @Import(name="managedInstanceGroupId", required=true)
    private String managedInstanceGroupId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
     * 
     */
    public String managedInstanceGroupId() {
        return this.managedInstanceGroupId;
    }

    /**
     * A filter to return only packages that were installed on or before the date provided, in ISO 8601 format.  Example: 2017-07-14T02:40:00.000Z
     * 
     */
    @Import(name="timeInstallDateEnd")
    private @Nullable String timeInstallDateEnd;

    /**
     * @return A filter to return only packages that were installed on or before the date provided, in ISO 8601 format.  Example: 2017-07-14T02:40:00.000Z
     * 
     */
    public Optional<String> timeInstallDateEnd() {
        return Optional.ofNullable(this.timeInstallDateEnd);
    }

    /**
     * The install date after which to list all packages, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     * 
     */
    @Import(name="timeInstallDateStart")
    private @Nullable String timeInstallDateStart;

    /**
     * @return The install date after which to list all packages, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     * 
     */
    public Optional<String> timeInstallDateStart() {
        return Optional.ofNullable(this.timeInstallDateStart);
    }

    private GetManagedInstanceGroupInstalledPackagesPlainArgs() {}

    private GetManagedInstanceGroupInstalledPackagesPlainArgs(GetManagedInstanceGroupInstalledPackagesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayNameContains = $.displayNameContains;
        this.displayNames = $.displayNames;
        this.filters = $.filters;
        this.managedInstanceGroupId = $.managedInstanceGroupId;
        this.timeInstallDateEnd = $.timeInstallDateEnd;
        this.timeInstallDateStart = $.timeInstallDateStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstanceGroupInstalledPackagesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstanceGroupInstalledPackagesPlainArgs $;

        public Builder() {
            $ = new GetManagedInstanceGroupInstalledPackagesPlainArgs();
        }

        public Builder(GetManagedInstanceGroupInstalledPackagesPlainArgs defaults) {
            $ = new GetManagedInstanceGroupInstalledPackagesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(@Nullable List<String> displayNames) {
            $.displayNames = displayNames;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }

        public Builder filters(@Nullable List<GetManagedInstanceGroupInstalledPackagesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagedInstanceGroupInstalledPackagesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedInstanceGroupId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupId(String managedInstanceGroupId) {
            $.managedInstanceGroupId = managedInstanceGroupId;
            return this;
        }

        /**
         * @param timeInstallDateEnd A filter to return only packages that were installed on or before the date provided, in ISO 8601 format.  Example: 2017-07-14T02:40:00.000Z
         * 
         * @return builder
         * 
         */
        public Builder timeInstallDateEnd(@Nullable String timeInstallDateEnd) {
            $.timeInstallDateEnd = timeInstallDateEnd;
            return this;
        }

        /**
         * @param timeInstallDateStart The install date after which to list all packages, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
         * 
         * @return builder
         * 
         */
        public Builder timeInstallDateStart(@Nullable String timeInstallDateStart) {
            $.timeInstallDateStart = timeInstallDateStart;
            return this;
        }

        public GetManagedInstanceGroupInstalledPackagesPlainArgs build() {
            if ($.managedInstanceGroupId == null) {
                throw new MissingRequiredPropertyException("GetManagedInstanceGroupInstalledPackagesPlainArgs", "managedInstanceGroupId");
            }
            return $;
        }
    }

}
