// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetManagedInstancesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstancesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstancesArgs Empty = new GetManagedInstancesArgs();

    /**
     * The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
     * 
     */
    @Import(name="advisoryNames")
    private @Nullable Output<List<String>> advisoryNames;

    /**
     * @return The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
     * 
     */
    public Optional<Output<List<String>>> advisoryNames() {
        return Optional.ofNullable(this.advisoryNames);
    }

    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    @Import(name="archTypes")
    private @Nullable Output<List<String>> archTypes;

    /**
     * @return A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    public Optional<Output<List<String>>> archTypes() {
        return Optional.ofNullable(this.archTypes);
    }

    /**
     * The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable Output<String> displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<Output<String>> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A filter to return resources that match the given display names.
     * 
     */
    @Import(name="displayNames")
    private @Nullable Output<List<String>> displayNames;

    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    public Optional<Output<List<String>>> displayNames() {
        return Optional.ofNullable(this.displayNames);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedInstancesFilterArgs>> filters;

    public Optional<Output<List<GetManagedInstancesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only managed instances that are attached to the specified group.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return A filter to return only managed instances that are attached to the specified group.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * A filter to return only managed instances that are NOT attached to the specified group.
     * 
     */
    @Import(name="groupNotEqualTo")
    private @Nullable Output<String> groupNotEqualTo;

    /**
     * @return A filter to return only managed instances that are NOT attached to the specified group.
     * 
     */
    public Optional<Output<String>> groupNotEqualTo() {
        return Optional.ofNullable(this.groupNotEqualTo);
    }

    /**
     * A filter to return only managed instances that are attached to the specified group or lifecycle environment.
     * 
     */
    @Import(name="isAttachedToGroupOrLifecycleStage")
    private @Nullable Output<Boolean> isAttachedToGroupOrLifecycleStage;

    /**
     * @return A filter to return only managed instances that are attached to the specified group or lifecycle environment.
     * 
     */
    public Optional<Output<Boolean>> isAttachedToGroupOrLifecycleStage() {
        return Optional.ofNullable(this.isAttachedToGroupOrLifecycleStage);
    }

    /**
     * Indicates whether to list only resources managed by the Autonomous Linux service.
     * 
     */
    @Import(name="isManagedByAutonomousLinux")
    private @Nullable Output<Boolean> isManagedByAutonomousLinux;

    /**
     * @return Indicates whether to list only resources managed by the Autonomous Linux service.
     * 
     */
    public Optional<Output<Boolean>> isManagedByAutonomousLinux() {
        return Optional.ofNullable(this.isManagedByAutonomousLinux);
    }

    /**
     * A filter to return only managed instances that are acting as management stations.
     * 
     */
    @Import(name="isManagementStation")
    private @Nullable Output<Boolean> isManagementStation;

    /**
     * @return A filter to return only managed instances that are acting as management stations.
     * 
     */
    public Optional<Output<Boolean>> isManagementStation() {
        return Optional.ofNullable(this.isManagementStation);
    }

    /**
     * A filter to return only managed instances with a registration profile attached.
     * 
     */
    @Import(name="isProfileAttached")
    private @Nullable Output<Boolean> isProfileAttached;

    /**
     * @return A filter to return only managed instances with a registration profile attached.
     * 
     */
    public Optional<Output<Boolean>> isProfileAttached() {
        return Optional.ofNullable(this.isProfileAttached);
    }

    /**
     * A filter to return only managed instances in a specific lifecycle environment.
     * 
     */
    @Import(name="lifecycleEnvironment")
    private @Nullable Output<String> lifecycleEnvironment;

    /**
     * @return A filter to return only managed instances in a specific lifecycle environment.
     * 
     */
    public Optional<Output<String>> lifecycleEnvironment() {
        return Optional.ofNullable(this.lifecycleEnvironment);
    }

    /**
     * A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
     * 
     */
    @Import(name="lifecycleEnvironmentNotEqualTo")
    private @Nullable Output<String> lifecycleEnvironmentNotEqualTo;

    /**
     * @return A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
     * 
     */
    public Optional<Output<String>> lifecycleEnvironmentNotEqualTo() {
        return Optional.ofNullable(this.lifecycleEnvironmentNotEqualTo);
    }

    /**
     * A filter to return only managed instances that are associated with the specified lifecycle environment.
     * 
     */
    @Import(name="lifecycleStage")
    private @Nullable Output<String> lifecycleStage;

    /**
     * @return A filter to return only managed instances that are associated with the specified lifecycle environment.
     * 
     */
    public Optional<Output<String>> lifecycleStage() {
        return Optional.ofNullable(this.lifecycleStage);
    }

    /**
     * A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
     * 
     */
    @Import(name="lifecycleStageNotEqualTo")
    private @Nullable Output<String> lifecycleStageNotEqualTo;

    /**
     * @return A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
     * 
     */
    public Optional<Output<String>> lifecycleStageNotEqualTo() {
        return Optional.ofNullable(this.lifecycleStageNotEqualTo);
    }

    /**
     * A filter to return only resources whose location does not match the given value.
     * 
     */
    @Import(name="locationNotEqualTos")
    private @Nullable Output<List<String>> locationNotEqualTos;

    /**
     * @return A filter to return only resources whose location does not match the given value.
     * 
     */
    public Optional<Output<List<String>>> locationNotEqualTos() {
        return Optional.ofNullable(this.locationNotEqualTos);
    }

    /**
     * A filter to return only resources whose location matches the given value.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<String>> locations;

    /**
     * @return A filter to return only resources whose location matches the given value.
     * 
     */
    public Optional<Output<List<String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable Output<String> managedInstanceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
     * 
     */
    public Optional<Output<String>> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * A filter to return only resources that match the given operating system family.
     * 
     */
    @Import(name="osFamilies")
    private @Nullable Output<List<String>> osFamilies;

    /**
     * @return A filter to return only resources that match the given operating system family.
     * 
     */
    public Optional<Output<List<String>>> osFamilies() {
        return Optional.ofNullable(this.osFamilies);
    }

    /**
     * A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="profileNotEqualTos")
    private @Nullable Output<List<String>> profileNotEqualTos;

    /**
     * @return A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<List<String>>> profileNotEqualTos() {
        return Optional.ofNullable(this.profileNotEqualTos);
    }

    /**
     * A multi filter to return only managed instances that match the given profile ids.
     * 
     */
    @Import(name="profiles")
    private @Nullable Output<List<String>> profiles;

    /**
     * @return A multi filter to return only managed instances that match the given profile ids.
     * 
     */
    public Optional<Output<List<String>>> profiles() {
        return Optional.ofNullable(this.profiles);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
     * 
     */
    @Import(name="softwareSourceId")
    private @Nullable Output<String> softwareSourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
     * 
     */
    public Optional<Output<String>> softwareSourceId() {
        return Optional.ofNullable(this.softwareSourceId);
    }

    /**
     * A filter to return only managed instances whose status matches the status provided.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<String>> statuses;

    /**
     * @return A filter to return only managed instances whose status matches the status provided.
     * 
     */
    public Optional<Output<List<String>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    private GetManagedInstancesArgs() {}

    private GetManagedInstancesArgs(GetManagedInstancesArgs $) {
        this.advisoryNames = $.advisoryNames;
        this.archTypes = $.archTypes;
        this.compartmentId = $.compartmentId;
        this.displayNameContains = $.displayNameContains;
        this.displayNames = $.displayNames;
        this.filters = $.filters;
        this.group = $.group;
        this.groupNotEqualTo = $.groupNotEqualTo;
        this.isAttachedToGroupOrLifecycleStage = $.isAttachedToGroupOrLifecycleStage;
        this.isManagedByAutonomousLinux = $.isManagedByAutonomousLinux;
        this.isManagementStation = $.isManagementStation;
        this.isProfileAttached = $.isProfileAttached;
        this.lifecycleEnvironment = $.lifecycleEnvironment;
        this.lifecycleEnvironmentNotEqualTo = $.lifecycleEnvironmentNotEqualTo;
        this.lifecycleStage = $.lifecycleStage;
        this.lifecycleStageNotEqualTo = $.lifecycleStageNotEqualTo;
        this.locationNotEqualTos = $.locationNotEqualTos;
        this.locations = $.locations;
        this.managedInstanceId = $.managedInstanceId;
        this.osFamilies = $.osFamilies;
        this.profileNotEqualTos = $.profileNotEqualTos;
        this.profiles = $.profiles;
        this.softwareSourceId = $.softwareSourceId;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstancesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstancesArgs $;

        public Builder() {
            $ = new GetManagedInstancesArgs();
        }

        public Builder(GetManagedInstancesArgs defaults) {
            $ = new GetManagedInstancesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advisoryNames The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
         * 
         * @return builder
         * 
         */
        public Builder advisoryNames(@Nullable Output<List<String>> advisoryNames) {
            $.advisoryNames = advisoryNames;
            return this;
        }

        /**
         * @param advisoryNames The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
         * 
         * @return builder
         * 
         */
        public Builder advisoryNames(List<String> advisoryNames) {
            return advisoryNames(Output.of(advisoryNames));
        }

        /**
         * @param advisoryNames The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
         * 
         * @return builder
         * 
         */
        public Builder advisoryNames(String... advisoryNames) {
            return advisoryNames(List.of(advisoryNames));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(@Nullable Output<List<String>> archTypes) {
            $.archTypes = archTypes;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(List<String> archTypes) {
            return archTypes(Output.of(archTypes));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable Output<String> displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(String displayNameContains) {
            return displayNameContains(Output.of(displayNameContains));
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(@Nullable Output<List<String>> displayNames) {
            $.displayNames = displayNames;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(List<String> displayNames) {
            return displayNames(Output.of(displayNames));
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }

        public Builder filters(@Nullable Output<List<GetManagedInstancesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedInstancesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedInstancesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param group A filter to return only managed instances that are attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group A filter to return only managed instances that are attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param groupNotEqualTo A filter to return only managed instances that are NOT attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder groupNotEqualTo(@Nullable Output<String> groupNotEqualTo) {
            $.groupNotEqualTo = groupNotEqualTo;
            return this;
        }

        /**
         * @param groupNotEqualTo A filter to return only managed instances that are NOT attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder groupNotEqualTo(String groupNotEqualTo) {
            return groupNotEqualTo(Output.of(groupNotEqualTo));
        }

        /**
         * @param isAttachedToGroupOrLifecycleStage A filter to return only managed instances that are attached to the specified group or lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder isAttachedToGroupOrLifecycleStage(@Nullable Output<Boolean> isAttachedToGroupOrLifecycleStage) {
            $.isAttachedToGroupOrLifecycleStage = isAttachedToGroupOrLifecycleStage;
            return this;
        }

        /**
         * @param isAttachedToGroupOrLifecycleStage A filter to return only managed instances that are attached to the specified group or lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder isAttachedToGroupOrLifecycleStage(Boolean isAttachedToGroupOrLifecycleStage) {
            return isAttachedToGroupOrLifecycleStage(Output.of(isAttachedToGroupOrLifecycleStage));
        }

        /**
         * @param isManagedByAutonomousLinux Indicates whether to list only resources managed by the Autonomous Linux service.
         * 
         * @return builder
         * 
         */
        public Builder isManagedByAutonomousLinux(@Nullable Output<Boolean> isManagedByAutonomousLinux) {
            $.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }

        /**
         * @param isManagedByAutonomousLinux Indicates whether to list only resources managed by the Autonomous Linux service.
         * 
         * @return builder
         * 
         */
        public Builder isManagedByAutonomousLinux(Boolean isManagedByAutonomousLinux) {
            return isManagedByAutonomousLinux(Output.of(isManagedByAutonomousLinux));
        }

        /**
         * @param isManagementStation A filter to return only managed instances that are acting as management stations.
         * 
         * @return builder
         * 
         */
        public Builder isManagementStation(@Nullable Output<Boolean> isManagementStation) {
            $.isManagementStation = isManagementStation;
            return this;
        }

        /**
         * @param isManagementStation A filter to return only managed instances that are acting as management stations.
         * 
         * @return builder
         * 
         */
        public Builder isManagementStation(Boolean isManagementStation) {
            return isManagementStation(Output.of(isManagementStation));
        }

        /**
         * @param isProfileAttached A filter to return only managed instances with a registration profile attached.
         * 
         * @return builder
         * 
         */
        public Builder isProfileAttached(@Nullable Output<Boolean> isProfileAttached) {
            $.isProfileAttached = isProfileAttached;
            return this;
        }

        /**
         * @param isProfileAttached A filter to return only managed instances with a registration profile attached.
         * 
         * @return builder
         * 
         */
        public Builder isProfileAttached(Boolean isProfileAttached) {
            return isProfileAttached(Output.of(isProfileAttached));
        }

        /**
         * @param lifecycleEnvironment A filter to return only managed instances in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironment(@Nullable Output<String> lifecycleEnvironment) {
            $.lifecycleEnvironment = lifecycleEnvironment;
            return this;
        }

        /**
         * @param lifecycleEnvironment A filter to return only managed instances in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironment(String lifecycleEnvironment) {
            return lifecycleEnvironment(Output.of(lifecycleEnvironment));
        }

        /**
         * @param lifecycleEnvironmentNotEqualTo A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironmentNotEqualTo(@Nullable Output<String> lifecycleEnvironmentNotEqualTo) {
            $.lifecycleEnvironmentNotEqualTo = lifecycleEnvironmentNotEqualTo;
            return this;
        }

        /**
         * @param lifecycleEnvironmentNotEqualTo A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironmentNotEqualTo(String lifecycleEnvironmentNotEqualTo) {
            return lifecycleEnvironmentNotEqualTo(Output.of(lifecycleEnvironmentNotEqualTo));
        }

        /**
         * @param lifecycleStage A filter to return only managed instances that are associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStage(@Nullable Output<String> lifecycleStage) {
            $.lifecycleStage = lifecycleStage;
            return this;
        }

        /**
         * @param lifecycleStage A filter to return only managed instances that are associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStage(String lifecycleStage) {
            return lifecycleStage(Output.of(lifecycleStage));
        }

        /**
         * @param lifecycleStageNotEqualTo A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStageNotEqualTo(@Nullable Output<String> lifecycleStageNotEqualTo) {
            $.lifecycleStageNotEqualTo = lifecycleStageNotEqualTo;
            return this;
        }

        /**
         * @param lifecycleStageNotEqualTo A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStageNotEqualTo(String lifecycleStageNotEqualTo) {
            return lifecycleStageNotEqualTo(Output.of(lifecycleStageNotEqualTo));
        }

        /**
         * @param locationNotEqualTos A filter to return only resources whose location does not match the given value.
         * 
         * @return builder
         * 
         */
        public Builder locationNotEqualTos(@Nullable Output<List<String>> locationNotEqualTos) {
            $.locationNotEqualTos = locationNotEqualTos;
            return this;
        }

        /**
         * @param locationNotEqualTos A filter to return only resources whose location does not match the given value.
         * 
         * @return builder
         * 
         */
        public Builder locationNotEqualTos(List<String> locationNotEqualTos) {
            return locationNotEqualTos(Output.of(locationNotEqualTos));
        }

        /**
         * @param locationNotEqualTos A filter to return only resources whose location does not match the given value.
         * 
         * @return builder
         * 
         */
        public Builder locationNotEqualTos(String... locationNotEqualTos) {
            return locationNotEqualTos(List.of(locationNotEqualTos));
        }

        /**
         * @param locations A filter to return only resources whose location matches the given value.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations A filter to return only resources whose location matches the given value.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations A filter to return only resources whose location matches the given value.
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param managedInstanceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(@Nullable Output<List<String>> osFamilies) {
            $.osFamilies = osFamilies;
            return this;
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(List<String> osFamilies) {
            return osFamilies(Output.of(osFamilies));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }

        /**
         * @param profileNotEqualTos A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder profileNotEqualTos(@Nullable Output<List<String>> profileNotEqualTos) {
            $.profileNotEqualTos = profileNotEqualTos;
            return this;
        }

        /**
         * @param profileNotEqualTos A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder profileNotEqualTos(List<String> profileNotEqualTos) {
            return profileNotEqualTos(Output.of(profileNotEqualTos));
        }

        /**
         * @param profileNotEqualTos A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder profileNotEqualTos(String... profileNotEqualTos) {
            return profileNotEqualTos(List.of(profileNotEqualTos));
        }

        /**
         * @param profiles A multi filter to return only managed instances that match the given profile ids.
         * 
         * @return builder
         * 
         */
        public Builder profiles(@Nullable Output<List<String>> profiles) {
            $.profiles = profiles;
            return this;
        }

        /**
         * @param profiles A multi filter to return only managed instances that match the given profile ids.
         * 
         * @return builder
         * 
         */
        public Builder profiles(List<String> profiles) {
            return profiles(Output.of(profiles));
        }

        /**
         * @param profiles A multi filter to return only managed instances that match the given profile ids.
         * 
         * @return builder
         * 
         */
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        /**
         * @param softwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(@Nullable Output<String> softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param softwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            return softwareSourceId(Output.of(softwareSourceId));
        }

        /**
         * @param statuses A filter to return only managed instances whose status matches the status provided.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<String>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses A filter to return only managed instances whose status matches the status provided.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<String> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses A filter to return only managed instances whose status matches the status provided.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        public GetManagedInstancesArgs build() {
            return $;
        }
    }

}
