// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetManagedInstancesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedInstancesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedInstancesPlainArgs Empty = new GetManagedInstancesPlainArgs();

    /**
     * The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
     * 
     */
    @Import(name="advisoryNames")
    private @Nullable List<String> advisoryNames;

    /**
     * @return The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
     * 
     */
    public Optional<List<String>> advisoryNames() {
        return Optional.ofNullable(this.advisoryNames);
    }

    /**
     * A filter to return only managed instances with the specified version of osmh-agent running.
     * 
     */
    @Import(name="agentVersion")
    private @Nullable String agentVersion;

    /**
     * @return A filter to return only managed instances with the specified version of osmh-agent running.
     * 
     */
    public Optional<String> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }

    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    @Import(name="archTypes")
    private @Nullable List<String> archTypes;

    /**
     * @return A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    public Optional<List<String>> archTypes() {
        return Optional.ofNullable(this.archTypes);
    }

    /**
     * The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A filter to return resources that match the given display names.
     * 
     */
    @Import(name="displayNames")
    private @Nullable List<String> displayNames;

    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    public Optional<List<String>> displayNames() {
        return Optional.ofNullable(this.displayNames);
    }

    @Import(name="filters")
    private @Nullable List<GetManagedInstancesFilter> filters;

    public Optional<List<GetManagedInstancesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only managed instances that are attached to the specified group.
     * 
     */
    @Import(name="group")
    private @Nullable String group;

    /**
     * @return A filter to return only managed instances that are attached to the specified group.
     * 
     */
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * A filter to return only managed instances that are NOT attached to the specified group.
     * 
     */
    @Import(name="groupNotEqualTo")
    private @Nullable String groupNotEqualTo;

    /**
     * @return A filter to return only managed instances that are NOT attached to the specified group.
     * 
     */
    public Optional<String> groupNotEqualTo() {
        return Optional.ofNullable(this.groupNotEqualTo);
    }

    /**
     * A filter to return only managed instances that are attached to the specified group or lifecycle environment.
     * 
     */
    @Import(name="isAttachedToGroupOrLifecycleStage")
    private @Nullable Boolean isAttachedToGroupOrLifecycleStage;

    /**
     * @return A filter to return only managed instances that are attached to the specified group or lifecycle environment.
     * 
     */
    public Optional<Boolean> isAttachedToGroupOrLifecycleStage() {
        return Optional.ofNullable(this.isAttachedToGroupOrLifecycleStage);
    }

    /**
     * Indicates whether to list only resources managed by the Autonomous Linux service.
     * 
     */
    @Import(name="isManagedByAutonomousLinux")
    private @Nullable Boolean isManagedByAutonomousLinux;

    /**
     * @return Indicates whether to list only resources managed by the Autonomous Linux service.
     * 
     */
    public Optional<Boolean> isManagedByAutonomousLinux() {
        return Optional.ofNullable(this.isManagedByAutonomousLinux);
    }

    /**
     * A filter to return only managed instances that are acting as management stations.
     * 
     */
    @Import(name="isManagementStation")
    private @Nullable Boolean isManagementStation;

    /**
     * @return A filter to return only managed instances that are acting as management stations.
     * 
     */
    public Optional<Boolean> isManagementStation() {
        return Optional.ofNullable(this.isManagementStation);
    }

    /**
     * A filter to return only managed instances with a registration profile attached.
     * 
     */
    @Import(name="isProfileAttached")
    private @Nullable Boolean isProfileAttached;

    /**
     * @return A filter to return only managed instances with a registration profile attached.
     * 
     */
    public Optional<Boolean> isProfileAttached() {
        return Optional.ofNullable(this.isProfileAttached);
    }

    /**
     * A filter to return only managed instances that require a reboot to install updates.
     * 
     */
    @Import(name="isRebootRequired")
    private @Nullable Boolean isRebootRequired;

    /**
     * @return A filter to return only managed instances that require a reboot to install updates.
     * 
     */
    public Optional<Boolean> isRebootRequired() {
        return Optional.ofNullable(this.isRebootRequired);
    }

    /**
     * A filter to return only managed instances in a specific lifecycle environment.
     * 
     */
    @Import(name="lifecycleEnvironment")
    private @Nullable String lifecycleEnvironment;

    /**
     * @return A filter to return only managed instances in a specific lifecycle environment.
     * 
     */
    public Optional<String> lifecycleEnvironment() {
        return Optional.ofNullable(this.lifecycleEnvironment);
    }

    /**
     * A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
     * 
     */
    @Import(name="lifecycleEnvironmentNotEqualTo")
    private @Nullable String lifecycleEnvironmentNotEqualTo;

    /**
     * @return A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
     * 
     */
    public Optional<String> lifecycleEnvironmentNotEqualTo() {
        return Optional.ofNullable(this.lifecycleEnvironmentNotEqualTo);
    }

    /**
     * A filter to return only managed instances that are associated with the specified lifecycle environment.
     * 
     */
    @Import(name="lifecycleStage")
    private @Nullable String lifecycleStage;

    /**
     * @return A filter to return only managed instances that are associated with the specified lifecycle environment.
     * 
     */
    public Optional<String> lifecycleStage() {
        return Optional.ofNullable(this.lifecycleStage);
    }

    /**
     * A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
     * 
     */
    @Import(name="lifecycleStageNotEqualTo")
    private @Nullable String lifecycleStageNotEqualTo;

    /**
     * @return A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
     * 
     */
    public Optional<String> lifecycleStageNotEqualTo() {
        return Optional.ofNullable(this.lifecycleStageNotEqualTo);
    }

    /**
     * A filter to return only resources whose location does not match the given value.
     * 
     */
    @Import(name="locationNotEqualTos")
    private @Nullable List<String> locationNotEqualTos;

    /**
     * @return A filter to return only resources whose location does not match the given value.
     * 
     */
    public Optional<List<String>> locationNotEqualTos() {
        return Optional.ofNullable(this.locationNotEqualTos);
    }

    /**
     * A filter to return only resources whose location matches the given value.
     * 
     */
    @Import(name="locations")
    private @Nullable List<String> locations;

    /**
     * @return A filter to return only resources whose location matches the given value.
     * 
     */
    public Optional<List<String>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable String managedInstanceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * A filter to return resources that aren&#39;t associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="managementStationNotEqualTos")
    private @Nullable List<String> managementStationNotEqualTos;

    /**
     * @return A filter to return resources that aren&#39;t associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<List<String>> managementStationNotEqualTos() {
        return Optional.ofNullable(this.managementStationNotEqualTos);
    }

    /**
     * A filter to return resources that are associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="managementStations")
    private @Nullable List<String> managementStations;

    /**
     * @return A filter to return resources that are associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<List<String>> managementStations() {
        return Optional.ofNullable(this.managementStations);
    }

    /**
     * A filter to return only resources that match the given operating system family.
     * 
     */
    @Import(name="osFamilies")
    private @Nullable List<String> osFamilies;

    /**
     * @return A filter to return only resources that match the given operating system family.
     * 
     */
    public Optional<List<String>> osFamilies() {
        return Optional.ofNullable(this.osFamilies);
    }

    /**
     * A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="profileNotEqualTos")
    private @Nullable List<String> profileNotEqualTos;

    /**
     * @return A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<List<String>> profileNotEqualTos() {
        return Optional.ofNullable(this.profileNotEqualTos);
    }

    /**
     * A multi filter to return only managed instances that match the given profile ids.
     * 
     */
    @Import(name="profiles")
    private @Nullable List<String> profiles;

    /**
     * @return A multi filter to return only managed instances that match the given profile ids.
     * 
     */
    public Optional<List<String>> profiles() {
        return Optional.ofNullable(this.profiles);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
     * 
     */
    @Import(name="softwareSourceId")
    private @Nullable String softwareSourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
     * 
     */
    public Optional<String> softwareSourceId() {
        return Optional.ofNullable(this.softwareSourceId);
    }

    /**
     * A filter to return only managed instances whose status matches the status provided.
     * 
     */
    @Import(name="statuses")
    private @Nullable List<String> statuses;

    /**
     * @return A filter to return only managed instances whose status matches the status provided.
     * 
     */
    public Optional<List<String>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    private GetManagedInstancesPlainArgs() {}

    private GetManagedInstancesPlainArgs(GetManagedInstancesPlainArgs $) {
        this.advisoryNames = $.advisoryNames;
        this.agentVersion = $.agentVersion;
        this.archTypes = $.archTypes;
        this.compartmentId = $.compartmentId;
        this.displayNameContains = $.displayNameContains;
        this.displayNames = $.displayNames;
        this.filters = $.filters;
        this.group = $.group;
        this.groupNotEqualTo = $.groupNotEqualTo;
        this.isAttachedToGroupOrLifecycleStage = $.isAttachedToGroupOrLifecycleStage;
        this.isManagedByAutonomousLinux = $.isManagedByAutonomousLinux;
        this.isManagementStation = $.isManagementStation;
        this.isProfileAttached = $.isProfileAttached;
        this.isRebootRequired = $.isRebootRequired;
        this.lifecycleEnvironment = $.lifecycleEnvironment;
        this.lifecycleEnvironmentNotEqualTo = $.lifecycleEnvironmentNotEqualTo;
        this.lifecycleStage = $.lifecycleStage;
        this.lifecycleStageNotEqualTo = $.lifecycleStageNotEqualTo;
        this.locationNotEqualTos = $.locationNotEqualTos;
        this.locations = $.locations;
        this.managedInstanceId = $.managedInstanceId;
        this.managementStationNotEqualTos = $.managementStationNotEqualTos;
        this.managementStations = $.managementStations;
        this.osFamilies = $.osFamilies;
        this.profileNotEqualTos = $.profileNotEqualTos;
        this.profiles = $.profiles;
        this.softwareSourceId = $.softwareSourceId;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedInstancesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedInstancesPlainArgs $;

        public Builder() {
            $ = new GetManagedInstancesPlainArgs();
        }

        public Builder(GetManagedInstancesPlainArgs defaults) {
            $ = new GetManagedInstancesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advisoryNames The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
         * 
         * @return builder
         * 
         */
        public Builder advisoryNames(@Nullable List<String> advisoryNames) {
            $.advisoryNames = advisoryNames;
            return this;
        }

        /**
         * @param advisoryNames The assigned erratum name. It&#39;s unique and not changeable.  Example: `ELSA-2020-5804`
         * 
         * @return builder
         * 
         */
        public Builder advisoryNames(String... advisoryNames) {
            return advisoryNames(List.of(advisoryNames));
        }

        /**
         * @param agentVersion A filter to return only managed instances with the specified version of osmh-agent running.
         * 
         * @return builder
         * 
         */
        public Builder agentVersion(@Nullable String agentVersion) {
            $.agentVersion = agentVersion;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(@Nullable List<String> archTypes) {
            $.archTypes = archTypes;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(@Nullable List<String> displayNames) {
            $.displayNames = displayNames;
            return this;
        }

        /**
         * @param displayNames A filter to return resources that match the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }

        public Builder filters(@Nullable List<GetManagedInstancesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagedInstancesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param group A filter to return only managed instances that are attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable String group) {
            $.group = group;
            return this;
        }

        /**
         * @param groupNotEqualTo A filter to return only managed instances that are NOT attached to the specified group.
         * 
         * @return builder
         * 
         */
        public Builder groupNotEqualTo(@Nullable String groupNotEqualTo) {
            $.groupNotEqualTo = groupNotEqualTo;
            return this;
        }

        /**
         * @param isAttachedToGroupOrLifecycleStage A filter to return only managed instances that are attached to the specified group or lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder isAttachedToGroupOrLifecycleStage(@Nullable Boolean isAttachedToGroupOrLifecycleStage) {
            $.isAttachedToGroupOrLifecycleStage = isAttachedToGroupOrLifecycleStage;
            return this;
        }

        /**
         * @param isManagedByAutonomousLinux Indicates whether to list only resources managed by the Autonomous Linux service.
         * 
         * @return builder
         * 
         */
        public Builder isManagedByAutonomousLinux(@Nullable Boolean isManagedByAutonomousLinux) {
            $.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }

        /**
         * @param isManagementStation A filter to return only managed instances that are acting as management stations.
         * 
         * @return builder
         * 
         */
        public Builder isManagementStation(@Nullable Boolean isManagementStation) {
            $.isManagementStation = isManagementStation;
            return this;
        }

        /**
         * @param isProfileAttached A filter to return only managed instances with a registration profile attached.
         * 
         * @return builder
         * 
         */
        public Builder isProfileAttached(@Nullable Boolean isProfileAttached) {
            $.isProfileAttached = isProfileAttached;
            return this;
        }

        /**
         * @param isRebootRequired A filter to return only managed instances that require a reboot to install updates.
         * 
         * @return builder
         * 
         */
        public Builder isRebootRequired(@Nullable Boolean isRebootRequired) {
            $.isRebootRequired = isRebootRequired;
            return this;
        }

        /**
         * @param lifecycleEnvironment A filter to return only managed instances in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironment(@Nullable String lifecycleEnvironment) {
            $.lifecycleEnvironment = lifecycleEnvironment;
            return this;
        }

        /**
         * @param lifecycleEnvironmentNotEqualTo A filter to return only managed instances that aren&#39;t in a specific lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleEnvironmentNotEqualTo(@Nullable String lifecycleEnvironmentNotEqualTo) {
            $.lifecycleEnvironmentNotEqualTo = lifecycleEnvironmentNotEqualTo;
            return this;
        }

        /**
         * @param lifecycleStage A filter to return only managed instances that are associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStage(@Nullable String lifecycleStage) {
            $.lifecycleStage = lifecycleStage;
            return this;
        }

        /**
         * @param lifecycleStageNotEqualTo A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStageNotEqualTo(@Nullable String lifecycleStageNotEqualTo) {
            $.lifecycleStageNotEqualTo = lifecycleStageNotEqualTo;
            return this;
        }

        /**
         * @param locationNotEqualTos A filter to return only resources whose location does not match the given value.
         * 
         * @return builder
         * 
         */
        public Builder locationNotEqualTos(@Nullable List<String> locationNotEqualTos) {
            $.locationNotEqualTos = locationNotEqualTos;
            return this;
        }

        /**
         * @param locationNotEqualTos A filter to return only resources whose location does not match the given value.
         * 
         * @return builder
         * 
         */
        public Builder locationNotEqualTos(String... locationNotEqualTos) {
            return locationNotEqualTos(List.of(locationNotEqualTos));
        }

        /**
         * @param locations A filter to return only resources whose location matches the given value.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable List<String> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations A filter to return only resources whose location matches the given value.
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param managedInstanceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable String managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managementStationNotEqualTos A filter to return resources that aren&#39;t associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementStationNotEqualTos(@Nullable List<String> managementStationNotEqualTos) {
            $.managementStationNotEqualTos = managementStationNotEqualTos;
            return this;
        }

        /**
         * @param managementStationNotEqualTos A filter to return resources that aren&#39;t associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementStationNotEqualTos(String... managementStationNotEqualTos) {
            return managementStationNotEqualTos(List.of(managementStationNotEqualTos));
        }

        /**
         * @param managementStations A filter to return resources that are associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementStations(@Nullable List<String> managementStations) {
            $.managementStations = managementStations;
            return this;
        }

        /**
         * @param managementStations A filter to return resources that are associated with the specified management  station [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder managementStations(String... managementStations) {
            return managementStations(List.of(managementStations));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(@Nullable List<String> osFamilies) {
            $.osFamilies = osFamilies;
            return this;
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }

        /**
         * @param profileNotEqualTos A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder profileNotEqualTos(@Nullable List<String> profileNotEqualTos) {
            $.profileNotEqualTos = profileNotEqualTos;
            return this;
        }

        /**
         * @param profileNotEqualTos A multi filter to return only managed instances that don&#39;t contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder profileNotEqualTos(String... profileNotEqualTos) {
            return profileNotEqualTos(List.of(profileNotEqualTos));
        }

        /**
         * @param profiles A multi filter to return only managed instances that match the given profile ids.
         * 
         * @return builder
         * 
         */
        public Builder profiles(@Nullable List<String> profiles) {
            $.profiles = profiles;
            return this;
        }

        /**
         * @param profiles A multi filter to return only managed instances that match the given profile ids.
         * 
         * @return builder
         * 
         */
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        /**
         * @param softwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(@Nullable String softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param statuses A filter to return only managed instances whose status matches the status provided.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable List<String> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses A filter to return only managed instances whose status matches the status provided.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        public GetManagedInstancesPlainArgs build() {
            return $;
        }
    }

}
