// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetManagementStationMirrorsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagementStationMirrorsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementStationMirrorsPlainArgs Empty = new GetManagementStationMirrorsPlainArgs();

    /**
     * A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    @Import(name="filters")
    private @Nullable List<GetManagementStationMirrorsFilter> filters;

    public Optional<List<GetManagementStationMirrorsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the management station.
     * 
     */
    @Import(name="managementStationId", required=true)
    private String managementStationId;

    /**
     * @return The OCID of the management station.
     * 
     */
    public String managementStationId() {
        return this.managementStationId;
    }

    /**
     * List of Mirror state to filter by
     * 
     */
    @Import(name="mirrorStates")
    private @Nullable List<String> mirrorStates;

    /**
     * @return List of Mirror state to filter by
     * 
     */
    public Optional<List<String>> mirrorStates() {
        return Optional.ofNullable(this.mirrorStates);
    }

    private GetManagementStationMirrorsPlainArgs() {}

    private GetManagementStationMirrorsPlainArgs(GetManagementStationMirrorsPlainArgs $) {
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.filters = $.filters;
        this.managementStationId = $.managementStationId;
        this.mirrorStates = $.mirrorStates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementStationMirrorsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementStationMirrorsPlainArgs $;

        public Builder() {
            $ = new GetManagementStationMirrorsPlainArgs();
        }

        public Builder(GetManagementStationMirrorsPlainArgs defaults) {
            $ = new GetManagementStationMirrorsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        public Builder filters(@Nullable List<GetManagementStationMirrorsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagementStationMirrorsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managementStationId The OCID of the management station.
         * 
         * @return builder
         * 
         */
        public Builder managementStationId(String managementStationId) {
            $.managementStationId = managementStationId;
            return this;
        }

        /**
         * @param mirrorStates List of Mirror state to filter by
         * 
         * @return builder
         * 
         */
        public Builder mirrorStates(@Nullable List<String> mirrorStates) {
            $.mirrorStates = mirrorStates;
            return this;
        }

        /**
         * @param mirrorStates List of Mirror state to filter by
         * 
         * @return builder
         * 
         */
        public Builder mirrorStates(String... mirrorStates) {
            return mirrorStates(List.of(mirrorStates));
        }

        public GetManagementStationMirrorsPlainArgs build() {
            $.managementStationId = Objects.requireNonNull($.managementStationId, "expected parameter 'managementStationId' to be non-null");
            return $;
        }
    }

}
