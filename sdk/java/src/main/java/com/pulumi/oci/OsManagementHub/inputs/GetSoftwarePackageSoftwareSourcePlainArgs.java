// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwarePackageSoftwareSourceFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwarePackageSoftwareSourcePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwarePackageSoftwareSourcePlainArgs Empty = new GetSoftwarePackageSoftwareSourcePlainArgs();

    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    @Import(name="archTypes")
    private @Nullable List<String> archTypes;

    /**
     * @return A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    public Optional<List<String>> archTypes() {
        return Optional.ofNullable(this.archTypes);
    }

    /**
     * The availabilities of the software source in a non-OCI environment for a tenancy.
     * 
     */
    @Import(name="availabilities")
    private @Nullable List<String> availabilities;

    /**
     * @return The availabilities of the software source in a non-OCI environment for a tenancy.
     * 
     */
    public Optional<List<String>> availabilities() {
        return Optional.ofNullable(this.availabilities);
    }

    /**
     * The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     * 
     */
    @Import(name="availabilityAnywheres")
    private @Nullable List<String> availabilityAnywheres;

    /**
     * @return The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     * 
     */
    public Optional<List<String>> availabilityAnywheres() {
        return Optional.ofNullable(this.availabilityAnywheres);
    }

    /**
     * The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     * 
     */
    @Import(name="availabilityAtOcis")
    private @Nullable List<String> availabilityAtOcis;

    /**
     * @return The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     * 
     */
    public Optional<List<String>> availabilityAtOcis() {
        return Optional.ofNullable(this.availabilityAtOcis);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return resources that match the given user-friendly name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return resources that match the given user-friendly name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    @Import(name="filters")
    private @Nullable List<GetSoftwarePackageSoftwareSourceFilter> filters;

    public Optional<List<GetSoftwarePackageSoftwareSourceFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given operating system family.
     * 
     */
    @Import(name="osFamilies")
    private @Nullable List<String> osFamilies;

    /**
     * @return A filter to return only resources that match the given operating system family.
     * 
     */
    public Optional<List<String>> osFamilies() {
        return Optional.ofNullable(this.osFamilies);
    }

    /**
     * The name of the software package.
     * 
     */
    @Import(name="softwarePackageName", required=true)
    private String softwarePackageName;

    /**
     * @return The name of the software package.
     * 
     */
    public String softwarePackageName() {
        return this.softwarePackageName;
    }

    /**
     * The type of the software source.
     * 
     */
    @Import(name="softwareSourceTypes")
    private @Nullable List<String> softwareSourceTypes;

    /**
     * @return The type of the software source.
     * 
     */
    public Optional<List<String>> softwareSourceTypes() {
        return Optional.ofNullable(this.softwareSourceTypes);
    }

    /**
     * A filter to return only software sources whose state matches the given state.
     * 
     */
    @Import(name="states")
    private @Nullable List<String> states;

    /**
     * @return A filter to return only software sources whose state matches the given state.
     * 
     */
    public Optional<List<String>> states() {
        return Optional.ofNullable(this.states);
    }

    private GetSoftwarePackageSoftwareSourcePlainArgs() {}

    private GetSoftwarePackageSoftwareSourcePlainArgs(GetSoftwarePackageSoftwareSourcePlainArgs $) {
        this.archTypes = $.archTypes;
        this.availabilities = $.availabilities;
        this.availabilityAnywheres = $.availabilityAnywheres;
        this.availabilityAtOcis = $.availabilityAtOcis;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.filters = $.filters;
        this.osFamilies = $.osFamilies;
        this.softwarePackageName = $.softwarePackageName;
        this.softwareSourceTypes = $.softwareSourceTypes;
        this.states = $.states;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwarePackageSoftwareSourcePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwarePackageSoftwareSourcePlainArgs $;

        public Builder() {
            $ = new GetSoftwarePackageSoftwareSourcePlainArgs();
        }

        public Builder(GetSoftwarePackageSoftwareSourcePlainArgs defaults) {
            $ = new GetSoftwarePackageSoftwareSourcePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(@Nullable List<String> archTypes) {
            $.archTypes = archTypes;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }

        /**
         * @param availabilities The availabilities of the software source in a non-OCI environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(@Nullable List<String> availabilities) {
            $.availabilities = availabilities;
            return this;
        }

        /**
         * @param availabilities The availabilities of the software source in a non-OCI environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(String... availabilities) {
            return availabilities(List.of(availabilities));
        }

        /**
         * @param availabilityAnywheres The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAnywheres(@Nullable List<String> availabilityAnywheres) {
            $.availabilityAnywheres = availabilityAnywheres;
            return this;
        }

        /**
         * @param availabilityAnywheres The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAnywheres(String... availabilityAnywheres) {
            return availabilityAnywheres(List.of(availabilityAnywheres));
        }

        /**
         * @param availabilityAtOcis The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAtOcis(@Nullable List<String> availabilityAtOcis) {
            $.availabilityAtOcis = availabilityAtOcis;
            return this;
        }

        /**
         * @param availabilityAtOcis The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAtOcis(String... availabilityAtOcis) {
            return availabilityAtOcis(List.of(availabilityAtOcis));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return resources that match the given user-friendly name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        public Builder filters(@Nullable List<GetSoftwarePackageSoftwareSourceFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwarePackageSoftwareSourceFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(@Nullable List<String> osFamilies) {
            $.osFamilies = osFamilies;
            return this;
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }

        /**
         * @param softwarePackageName The name of the software package.
         * 
         * @return builder
         * 
         */
        public Builder softwarePackageName(String softwarePackageName) {
            $.softwarePackageName = softwarePackageName;
            return this;
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(@Nullable List<String> softwareSourceTypes) {
            $.softwareSourceTypes = softwareSourceTypes;
            return this;
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(String... softwareSourceTypes) {
            return softwareSourceTypes(List.of(softwareSourceTypes));
        }

        /**
         * @param states A filter to return only software sources whose state matches the given state.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable List<String> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states A filter to return only software sources whose state matches the given state.
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        public GetSoftwarePackageSoftwareSourcePlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSoftwarePackageSoftwareSourcePlainArgs", "compartmentId");
            }
            if ($.softwarePackageName == null) {
                throw new MissingRequiredPropertyException("GetSoftwarePackageSoftwareSourcePlainArgs", "softwarePackageName");
            }
            return $;
        }
    }

}
