// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwarePackagesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwarePackagesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwarePackagesPlainArgs Empty = new GetSoftwarePackagesPlainArgs();

    /**
     * A filter to return software packages that match the given architecture.
     * 
     */
    @Import(name="architecture")
    private @Nullable String architecture;

    /**
     * @return A filter to return software packages that match the given architecture.
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * A filter to return resources that match the given user-friendly name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return resources that match the given user-friendly name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    @Import(name="filters")
    private @Nullable List<GetSoftwarePackagesFilter> filters;

    public Optional<List<GetSoftwarePackagesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
     * 
     */
    @Import(name="isLatest")
    private @Nullable Boolean isLatest;

    /**
     * @return Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }

    /**
     * A filter to return only resources that match the given operating system family.
     * 
     */
    @Import(name="osFamily")
    private @Nullable String osFamily;

    /**
     * @return A filter to return only resources that match the given operating system family.
     * 
     */
    public Optional<String> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }

    /**
     * A filter to return software packages that match the given version.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return A filter to return software packages that match the given version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetSoftwarePackagesPlainArgs() {}

    private GetSoftwarePackagesPlainArgs(GetSoftwarePackagesPlainArgs $) {
        this.architecture = $.architecture;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.filters = $.filters;
        this.isLatest = $.isLatest;
        this.osFamily = $.osFamily;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwarePackagesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwarePackagesPlainArgs $;

        public Builder() {
            $ = new GetSoftwarePackagesPlainArgs();
        }

        public Builder(GetSoftwarePackagesPlainArgs defaults) {
            $ = new GetSoftwarePackagesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture A filter to return software packages that match the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable String architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param displayName A filter to return resources that match the given user-friendly name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        public Builder filters(@Nullable List<GetSoftwarePackagesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwarePackagesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isLatest Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
         * 
         * @return builder
         * 
         */
        public Builder isLatest(@Nullable Boolean isLatest) {
            $.isLatest = isLatest;
            return this;
        }

        /**
         * @param osFamily A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamily(@Nullable String osFamily) {
            $.osFamily = osFamily;
            return this;
        }

        /**
         * @param version A filter to return software packages that match the given version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetSoftwarePackagesPlainArgs build() {
            return $;
        }
    }

}
