// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwareSourceModuleStreamProfilesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourceModuleStreamProfilesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourceModuleStreamProfilesArgs Empty = new GetSoftwareSourceModuleStreamProfilesArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetSoftwareSourceModuleStreamProfilesFilterArgs>> filters;

    public Optional<Output<List<GetSoftwareSourceModuleStreamProfilesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name of a module. This parameter is required if a streamName is specified.
     * 
     */
    @Import(name="moduleName")
    private @Nullable Output<String> moduleName;

    /**
     * @return The name of a module. This parameter is required if a streamName is specified.
     * 
     */
    public Optional<Output<String>> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * The name of the entity to be queried.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the entity to be queried.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The software source OCID.
     * 
     */
    @Import(name="softwareSourceId", required=true)
    private Output<String> softwareSourceId;

    /**
     * @return The software source OCID.
     * 
     */
    public Output<String> softwareSourceId() {
        return this.softwareSourceId;
    }

    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    @Import(name="streamName")
    private @Nullable Output<String> streamName;

    /**
     * @return The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     * 
     */
    public Optional<Output<String>> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    private GetSoftwareSourceModuleStreamProfilesArgs() {}

    private GetSoftwareSourceModuleStreamProfilesArgs(GetSoftwareSourceModuleStreamProfilesArgs $) {
        this.filters = $.filters;
        this.moduleName = $.moduleName;
        this.name = $.name;
        this.softwareSourceId = $.softwareSourceId;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourceModuleStreamProfilesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourceModuleStreamProfilesArgs $;

        public Builder() {
            $ = new GetSoftwareSourceModuleStreamProfilesArgs();
        }

        public Builder(GetSoftwareSourceModuleStreamProfilesArgs defaults) {
            $ = new GetSoftwareSourceModuleStreamProfilesArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetSoftwareSourceModuleStreamProfilesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSoftwareSourceModuleStreamProfilesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSoftwareSourceModuleStreamProfilesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param moduleName The name of a module. This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable Output<String> moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param moduleName The name of a module. This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(String moduleName) {
            return moduleName(Output.of(moduleName));
        }

        /**
         * @param name The name of the entity to be queried.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the entity to be queried.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param softwareSourceId The software source OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(Output<String> softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param softwareSourceId The software source OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            return softwareSourceId(Output.of(softwareSourceId));
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(@Nullable Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName The name of the stream of the containing module.  This parameter is required if a profileName is specified.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        public GetSoftwareSourceModuleStreamProfilesArgs build() {
            if ($.softwareSourceId == null) {
                throw new MissingRequiredPropertyException("GetSoftwareSourceModuleStreamProfilesArgs", "softwareSourceId");
            }
            return $;
        }
    }

}
