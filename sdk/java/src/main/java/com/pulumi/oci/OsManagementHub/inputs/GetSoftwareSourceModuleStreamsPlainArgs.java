// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwareSourceModuleStreamsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourceModuleStreamsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourceModuleStreamsPlainArgs Empty = new GetSoftwareSourceModuleStreamsPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetSoftwareSourceModuleStreamsFilter> filters;

    public Optional<List<GetSoftwareSourceModuleStreamsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    @Import(name="isLatest")
    private @Nullable Boolean isLatest;

    /**
     * @return A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }

    /**
     * The name of a module. This parameter is required if a streamName is specified.
     * 
     */
    @Import(name="moduleName")
    private @Nullable String moduleName;

    /**
     * @return The name of a module. This parameter is required if a streamName is specified.
     * 
     */
    public Optional<String> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * A filter to return resources that may partially match the module name given.
     * 
     */
    @Import(name="moduleNameContains")
    private @Nullable String moduleNameContains;

    /**
     * @return A filter to return resources that may partially match the module name given.
     * 
     */
    public Optional<String> moduleNameContains() {
        return Optional.ofNullable(this.moduleNameContains);
    }

    /**
     * The name of the entity to be queried.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the entity to be queried.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The software source OCID.
     * 
     */
    @Import(name="softwareSourceId", required=true)
    private String softwareSourceId;

    /**
     * @return The software source OCID.
     * 
     */
    public String softwareSourceId() {
        return this.softwareSourceId;
    }

    private GetSoftwareSourceModuleStreamsPlainArgs() {}

    private GetSoftwareSourceModuleStreamsPlainArgs(GetSoftwareSourceModuleStreamsPlainArgs $) {
        this.filters = $.filters;
        this.isLatest = $.isLatest;
        this.moduleName = $.moduleName;
        this.moduleNameContains = $.moduleNameContains;
        this.name = $.name;
        this.softwareSourceId = $.softwareSourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourceModuleStreamsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourceModuleStreamsPlainArgs $;

        public Builder() {
            $ = new GetSoftwareSourceModuleStreamsPlainArgs();
        }

        public Builder(GetSoftwareSourceModuleStreamsPlainArgs defaults) {
            $ = new GetSoftwareSourceModuleStreamsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetSoftwareSourceModuleStreamsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwareSourceModuleStreamsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isLatest A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
         * 
         * @return builder
         * 
         */
        public Builder isLatest(@Nullable Boolean isLatest) {
            $.isLatest = isLatest;
            return this;
        }

        /**
         * @param moduleName The name of a module. This parameter is required if a streamName is specified.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable String moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param moduleNameContains A filter to return resources that may partially match the module name given.
         * 
         * @return builder
         * 
         */
        public Builder moduleNameContains(@Nullable String moduleNameContains) {
            $.moduleNameContains = moduleNameContains;
            return this;
        }

        /**
         * @param name The name of the entity to be queried.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param softwareSourceId The software source OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        public GetSoftwareSourceModuleStreamsPlainArgs build() {
            $.softwareSourceId = Objects.requireNonNull($.softwareSourceId, "expected parameter 'softwareSourceId' to be non-null");
            return $;
        }
    }

}
