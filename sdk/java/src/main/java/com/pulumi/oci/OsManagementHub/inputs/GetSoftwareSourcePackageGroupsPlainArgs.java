// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwareSourcePackageGroupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourcePackageGroupsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourcePackageGroupsPlainArgs Empty = new GetSoftwareSourcePackageGroupsPlainArgs();

    /**
     * The OCID of the compartment that contains the resources to list.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable List<GetSoftwareSourcePackageGroupsFilter> filters;

    public Optional<List<GetSoftwareSourcePackageGroupsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only package groups of the specified type.
     * 
     */
    @Import(name="groupTypes")
    private @Nullable List<String> groupTypes;

    /**
     * @return A filter to return only package groups of the specified type.
     * 
     */
    public Optional<List<String>> groupTypes() {
        return Optional.ofNullable(this.groupTypes);
    }

    /**
     * The name of the entity to be queried.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the entity to be queried.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return resources that may partially match the name given.
     * 
     */
    @Import(name="nameContains")
    private @Nullable String nameContains;

    /**
     * @return A filter to return resources that may partially match the name given.
     * 
     */
    public Optional<String> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * The software source OCID.
     * 
     */
    @Import(name="softwareSourceId", required=true)
    private String softwareSourceId;

    /**
     * @return The software source OCID.
     * 
     */
    public String softwareSourceId() {
        return this.softwareSourceId;
    }

    private GetSoftwareSourcePackageGroupsPlainArgs() {}

    private GetSoftwareSourcePackageGroupsPlainArgs(GetSoftwareSourcePackageGroupsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.groupTypes = $.groupTypes;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.softwareSourceId = $.softwareSourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourcePackageGroupsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourcePackageGroupsPlainArgs $;

        public Builder() {
            $ = new GetSoftwareSourcePackageGroupsPlainArgs();
        }

        public Builder(GetSoftwareSourcePackageGroupsPlainArgs defaults) {
            $ = new GetSoftwareSourcePackageGroupsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetSoftwareSourcePackageGroupsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwareSourcePackageGroupsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupTypes A filter to return only package groups of the specified type.
         * 
         * @return builder
         * 
         */
        public Builder groupTypes(@Nullable List<String> groupTypes) {
            $.groupTypes = groupTypes;
            return this;
        }

        /**
         * @param groupTypes A filter to return only package groups of the specified type.
         * 
         * @return builder
         * 
         */
        public Builder groupTypes(String... groupTypes) {
            return groupTypes(List.of(groupTypes));
        }

        /**
         * @param name The name of the entity to be queried.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameContains A filter to return resources that may partially match the name given.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable String nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param softwareSourceId The software source OCID.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        public GetSoftwareSourcePackageGroupsPlainArgs build() {
            $.softwareSourceId = Objects.requireNonNull($.softwareSourceId, "expected parameter 'softwareSourceId' to be non-null");
            return $;
        }
    }

}
