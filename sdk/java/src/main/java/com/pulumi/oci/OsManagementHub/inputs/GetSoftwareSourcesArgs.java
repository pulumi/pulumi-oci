// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwareSourcesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourcesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourcesArgs Empty = new GetSoftwareSourcesArgs();

    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    @Import(name="archTypes")
    private @Nullable Output<List<String>> archTypes;

    /**
     * @return A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    public Optional<Output<List<String>>> archTypes() {
        return Optional.ofNullable(this.archTypes);
    }

    /**
     * The availability of the software source in a non-OCI environment for a tenancy.
     * 
     */
    @Import(name="availabilities")
    private @Nullable Output<List<String>> availabilities;

    /**
     * @return The availability of the software source in a non-OCI environment for a tenancy.
     * 
     */
    public Optional<Output<List<String>>> availabilities() {
        return Optional.ofNullable(this.availabilities);
    }

    /**
     * The availability of the software source. Use this query parameter to filter across availabilities in different environments.
     * 
     */
    @Import(name="availabilityAnywheres")
    private @Nullable Output<List<String>> availabilityAnywheres;

    /**
     * @return The availability of the software source. Use this query parameter to filter across availabilities in different environments.
     * 
     */
    public Optional<Output<List<String>>> availabilityAnywheres() {
        return Optional.ofNullable(this.availabilityAnywheres);
    }

    /**
     * The availability of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     * 
     */
    @Import(name="availabilityAtOcis")
    private @Nullable Output<List<String>> availabilityAtOcis;

    /**
     * @return The availability of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     * 
     */
    public Optional<Output<List<String>>> availabilityAtOcis() {
        return Optional.ofNullable(this.availabilityAtOcis);
    }

    /**
     * (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return resources that match the given user-friendly name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return resources that match the given user-friendly name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable Output<String> displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<Output<String>> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A multi filter to return resources that do not contains the given display names.
     * 
     */
    @Import(name="displayNameNotEqualTos")
    private @Nullable Output<List<String>> displayNameNotEqualTos;

    /**
     * @return A multi filter to return resources that do not contains the given display names.
     * 
     */
    public Optional<Output<List<String>>> displayNameNotEqualTos() {
        return Optional.ofNullable(this.displayNameNotEqualTos);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSoftwareSourcesFilterArgs>> filters;

    public Optional<Output<List<GetSoftwareSourcesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Indicates whether the software source is mandatory for the Autonomous Linux service.
     * 
     */
    @Import(name="isMandatoryForAutonomousLinux")
    private @Nullable Output<Boolean> isMandatoryForAutonomousLinux;

    /**
     * @return Indicates whether the software source is mandatory for the Autonomous Linux service.
     * 
     */
    public Optional<Output<Boolean>> isMandatoryForAutonomousLinux() {
        return Optional.ofNullable(this.isMandatoryForAutonomousLinux);
    }

    /**
     * A filter to return software sources which can be synced to a management station.
     * 
     */
    @Import(name="isMirrorSyncAllowed")
    private @Nullable Output<Boolean> isMirrorSyncAllowed;

    /**
     * @return A filter to return software sources which can be synced to a management station.
     * 
     */
    public Optional<Output<Boolean>> isMirrorSyncAllowed() {
        return Optional.ofNullable(this.isMirrorSyncAllowed);
    }

    /**
     * A filter to return only resources that match the given operating system family.
     * 
     */
    @Import(name="osFamilies")
    private @Nullable Output<List<String>> osFamilies;

    /**
     * @return A filter to return only resources that match the given operating system family.
     * 
     */
    public Optional<Output<List<String>>> osFamilies() {
        return Optional.ofNullable(this.osFamilies);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
     * 
     */
    @Import(name="softwareSourceId")
    private @Nullable Output<String> softwareSourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
     * 
     */
    public Optional<Output<String>> softwareSourceId() {
        return Optional.ofNullable(this.softwareSourceId);
    }

    /**
     * The type of the software source.
     * 
     */
    @Import(name="softwareSourceTypes")
    private @Nullable Output<List<String>> softwareSourceTypes;

    /**
     * @return The type of the software source.
     * 
     */
    public Optional<Output<List<String>>> softwareSourceTypes() {
        return Optional.ofNullable(this.softwareSourceTypes);
    }

    /**
     * A filter to return only software sources whose state matches the given state.
     * 
     */
    @Import(name="states")
    private @Nullable Output<List<String>> states;

    /**
     * @return A filter to return only software sources whose state matches the given state.
     * 
     */
    public Optional<Output<List<String>>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * A filter to return only resources that match the given vendor name.
     * 
     */
    @Import(name="vendorName")
    private @Nullable Output<String> vendorName;

    /**
     * @return A filter to return only resources that match the given vendor name.
     * 
     */
    public Optional<Output<String>> vendorName() {
        return Optional.ofNullable(this.vendorName);
    }

    private GetSoftwareSourcesArgs() {}

    private GetSoftwareSourcesArgs(GetSoftwareSourcesArgs $) {
        this.archTypes = $.archTypes;
        this.availabilities = $.availabilities;
        this.availabilityAnywheres = $.availabilityAnywheres;
        this.availabilityAtOcis = $.availabilityAtOcis;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.displayNameNotEqualTos = $.displayNameNotEqualTos;
        this.filters = $.filters;
        this.isMandatoryForAutonomousLinux = $.isMandatoryForAutonomousLinux;
        this.isMirrorSyncAllowed = $.isMirrorSyncAllowed;
        this.osFamilies = $.osFamilies;
        this.softwareSourceId = $.softwareSourceId;
        this.softwareSourceTypes = $.softwareSourceTypes;
        this.states = $.states;
        this.vendorName = $.vendorName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourcesArgs $;

        public Builder() {
            $ = new GetSoftwareSourcesArgs();
        }

        public Builder(GetSoftwareSourcesArgs defaults) {
            $ = new GetSoftwareSourcesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(@Nullable Output<List<String>> archTypes) {
            $.archTypes = archTypes;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(List<String> archTypes) {
            return archTypes(Output.of(archTypes));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }

        /**
         * @param availabilities The availability of the software source in a non-OCI environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(@Nullable Output<List<String>> availabilities) {
            $.availabilities = availabilities;
            return this;
        }

        /**
         * @param availabilities The availability of the software source in a non-OCI environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(List<String> availabilities) {
            return availabilities(Output.of(availabilities));
        }

        /**
         * @param availabilities The availability of the software source in a non-OCI environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(String... availabilities) {
            return availabilities(List.of(availabilities));
        }

        /**
         * @param availabilityAnywheres The availability of the software source. Use this query parameter to filter across availabilities in different environments.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAnywheres(@Nullable Output<List<String>> availabilityAnywheres) {
            $.availabilityAnywheres = availabilityAnywheres;
            return this;
        }

        /**
         * @param availabilityAnywheres The availability of the software source. Use this query parameter to filter across availabilities in different environments.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAnywheres(List<String> availabilityAnywheres) {
            return availabilityAnywheres(Output.of(availabilityAnywheres));
        }

        /**
         * @param availabilityAnywheres The availability of the software source. Use this query parameter to filter across availabilities in different environments.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAnywheres(String... availabilityAnywheres) {
            return availabilityAnywheres(List.of(availabilityAnywheres));
        }

        /**
         * @param availabilityAtOcis The availability of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAtOcis(@Nullable Output<List<String>> availabilityAtOcis) {
            $.availabilityAtOcis = availabilityAtOcis;
            return this;
        }

        /**
         * @param availabilityAtOcis The availability of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAtOcis(List<String> availabilityAtOcis) {
            return availabilityAtOcis(Output.of(availabilityAtOcis));
        }

        /**
         * @param availabilityAtOcis The availability of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
         * 
         * @return builder
         * 
         */
        public Builder availabilityAtOcis(String... availabilityAtOcis) {
            return availabilityAtOcis(List.of(availabilityAtOcis));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return resources that match the given user-friendly name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return resources that match the given user-friendly name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable Output<String> displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(String displayNameContains) {
            return displayNameContains(Output.of(displayNameContains));
        }

        /**
         * @param displayNameNotEqualTos A multi filter to return resources that do not contains the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNameNotEqualTos(@Nullable Output<List<String>> displayNameNotEqualTos) {
            $.displayNameNotEqualTos = displayNameNotEqualTos;
            return this;
        }

        /**
         * @param displayNameNotEqualTos A multi filter to return resources that do not contains the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNameNotEqualTos(List<String> displayNameNotEqualTos) {
            return displayNameNotEqualTos(Output.of(displayNameNotEqualTos));
        }

        /**
         * @param displayNameNotEqualTos A multi filter to return resources that do not contains the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNameNotEqualTos(String... displayNameNotEqualTos) {
            return displayNameNotEqualTos(List.of(displayNameNotEqualTos));
        }

        public Builder filters(@Nullable Output<List<GetSoftwareSourcesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSoftwareSourcesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSoftwareSourcesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isMandatoryForAutonomousLinux Indicates whether the software source is mandatory for the Autonomous Linux service.
         * 
         * @return builder
         * 
         */
        public Builder isMandatoryForAutonomousLinux(@Nullable Output<Boolean> isMandatoryForAutonomousLinux) {
            $.isMandatoryForAutonomousLinux = isMandatoryForAutonomousLinux;
            return this;
        }

        /**
         * @param isMandatoryForAutonomousLinux Indicates whether the software source is mandatory for the Autonomous Linux service.
         * 
         * @return builder
         * 
         */
        public Builder isMandatoryForAutonomousLinux(Boolean isMandatoryForAutonomousLinux) {
            return isMandatoryForAutonomousLinux(Output.of(isMandatoryForAutonomousLinux));
        }

        /**
         * @param isMirrorSyncAllowed A filter to return software sources which can be synced to a management station.
         * 
         * @return builder
         * 
         */
        public Builder isMirrorSyncAllowed(@Nullable Output<Boolean> isMirrorSyncAllowed) {
            $.isMirrorSyncAllowed = isMirrorSyncAllowed;
            return this;
        }

        /**
         * @param isMirrorSyncAllowed A filter to return software sources which can be synced to a management station.
         * 
         * @return builder
         * 
         */
        public Builder isMirrorSyncAllowed(Boolean isMirrorSyncAllowed) {
            return isMirrorSyncAllowed(Output.of(isMirrorSyncAllowed));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(@Nullable Output<List<String>> osFamilies) {
            $.osFamilies = osFamilies;
            return this;
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(List<String> osFamilies) {
            return osFamilies(Output.of(osFamilies));
        }

        /**
         * @param osFamilies A filter to return only resources that match the given operating system family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }

        /**
         * @param softwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(@Nullable Output<String> softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param softwareSourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(String softwareSourceId) {
            return softwareSourceId(Output.of(softwareSourceId));
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(@Nullable Output<List<String>> softwareSourceTypes) {
            $.softwareSourceTypes = softwareSourceTypes;
            return this;
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(List<String> softwareSourceTypes) {
            return softwareSourceTypes(Output.of(softwareSourceTypes));
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(String... softwareSourceTypes) {
            return softwareSourceTypes(List.of(softwareSourceTypes));
        }

        /**
         * @param states A filter to return only software sources whose state matches the given state.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<List<String>> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states A filter to return only software sources whose state matches the given state.
         * 
         * @return builder
         * 
         */
        public Builder states(List<String> states) {
            return states(Output.of(states));
        }

        /**
         * @param states A filter to return only software sources whose state matches the given state.
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        /**
         * @param vendorName A filter to return only resources that match the given vendor name.
         * 
         * @return builder
         * 
         */
        public Builder vendorName(@Nullable Output<String> vendorName) {
            $.vendorName = vendorName;
            return this;
        }

        /**
         * @param vendorName A filter to return only resources that match the given vendor name.
         * 
         * @return builder
         * 
         */
        public Builder vendorName(String vendorName) {
            return vendorName(Output.of(vendorName));
        }

        public GetSoftwareSourcesArgs build() {
            return $;
        }
    }

}
