// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagementHub.inputs.GetSoftwareSourcesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSoftwareSourcesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSoftwareSourcesPlainArgs Empty = new GetSoftwareSourcesPlainArgs();

    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    @Import(name="archTypes")
    private @Nullable List<String> archTypes;

    /**
     * @return A filter to return only instances whose architecture type matches the given architecture.
     * 
     */
    public Optional<List<String>> archTypes() {
        return Optional.ofNullable(this.archTypes);
    }

    /**
     * The availabilities of the software source for a tenant.
     * 
     */
    @Import(name="availabilities")
    private @Nullable List<String> availabilities;

    /**
     * @return The availabilities of the software source for a tenant.
     * 
     */
    public Optional<List<String>> availabilities() {
        return Optional.ofNullable(this.availabilities);
    }

    /**
     * The OCID of the compartment that contains the resources to list.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return resources that may partially match the given display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable String displayNameContains;

    /**
     * @return A filter to return resources that may partially match the given display name.
     * 
     */
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A multi filter to return resources that do not contains the given display names.
     * 
     */
    @Import(name="displayNameNotEqualTos")
    private @Nullable List<String> displayNameNotEqualTos;

    /**
     * @return A multi filter to return resources that do not contains the given display names.
     * 
     */
    public Optional<List<String>> displayNameNotEqualTos() {
        return Optional.ofNullable(this.displayNameNotEqualTos);
    }

    @Import(name="filters")
    private @Nullable List<GetSoftwareSourcesFilter> filters;

    public Optional<List<GetSoftwareSourcesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only instances whose OS family type matches the given OS family.
     * 
     */
    @Import(name="osFamilies")
    private @Nullable List<String> osFamilies;

    /**
     * @return A filter to return only instances whose OS family type matches the given OS family.
     * 
     */
    public Optional<List<String>> osFamilies() {
        return Optional.ofNullable(this.osFamilies);
    }

    /**
     * The OCID for the software source.
     * 
     */
    @Import(name="softwareSourceId")
    private @Nullable String softwareSourceId;

    /**
     * @return The OCID for the software source.
     * 
     */
    public Optional<String> softwareSourceId() {
        return Optional.ofNullable(this.softwareSourceId);
    }

    /**
     * The type of the software source.
     * 
     */
    @Import(name="softwareSourceTypes")
    private @Nullable List<String> softwareSourceTypes;

    /**
     * @return The type of the software source.
     * 
     */
    public Optional<List<String>> softwareSourceTypes() {
        return Optional.ofNullable(this.softwareSourceTypes);
    }

    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleStates.
     * 
     */
    @Import(name="states")
    private @Nullable List<String> states;

    /**
     * @return A filter to return only resources whose lifecycleState matches the given lifecycleStates.
     * 
     */
    public Optional<List<String>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * A filter to return only profiles that match the given vendorName.
     * 
     */
    @Import(name="vendorName")
    private @Nullable String vendorName;

    /**
     * @return A filter to return only profiles that match the given vendorName.
     * 
     */
    public Optional<String> vendorName() {
        return Optional.ofNullable(this.vendorName);
    }

    private GetSoftwareSourcesPlainArgs() {}

    private GetSoftwareSourcesPlainArgs(GetSoftwareSourcesPlainArgs $) {
        this.archTypes = $.archTypes;
        this.availabilities = $.availabilities;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.displayNameContains = $.displayNameContains;
        this.displayNameNotEqualTos = $.displayNameNotEqualTos;
        this.filters = $.filters;
        this.osFamilies = $.osFamilies;
        this.softwareSourceId = $.softwareSourceId;
        this.softwareSourceTypes = $.softwareSourceTypes;
        this.states = $.states;
        this.vendorName = $.vendorName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSoftwareSourcesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSoftwareSourcesPlainArgs $;

        public Builder() {
            $ = new GetSoftwareSourcesPlainArgs();
        }

        public Builder(GetSoftwareSourcesPlainArgs defaults) {
            $ = new GetSoftwareSourcesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(@Nullable List<String> archTypes) {
            $.archTypes = archTypes;
            return this;
        }

        /**
         * @param archTypes A filter to return only instances whose architecture type matches the given architecture.
         * 
         * @return builder
         * 
         */
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }

        /**
         * @param availabilities The availabilities of the software source for a tenant.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(@Nullable List<String> availabilities) {
            $.availabilities = availabilities;
            return this;
        }

        /**
         * @param availabilities The availabilities of the software source for a tenant.
         * 
         * @return builder
         * 
         */
        public Builder availabilities(String... availabilities) {
            return availabilities(List.of(availabilities));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayNameContains A filter to return resources that may partially match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable String displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameNotEqualTos A multi filter to return resources that do not contains the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNameNotEqualTos(@Nullable List<String> displayNameNotEqualTos) {
            $.displayNameNotEqualTos = displayNameNotEqualTos;
            return this;
        }

        /**
         * @param displayNameNotEqualTos A multi filter to return resources that do not contains the given display names.
         * 
         * @return builder
         * 
         */
        public Builder displayNameNotEqualTos(String... displayNameNotEqualTos) {
            return displayNameNotEqualTos(List.of(displayNameNotEqualTos));
        }

        public Builder filters(@Nullable List<GetSoftwareSourcesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSoftwareSourcesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param osFamilies A filter to return only instances whose OS family type matches the given OS family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(@Nullable List<String> osFamilies) {
            $.osFamilies = osFamilies;
            return this;
        }

        /**
         * @param osFamilies A filter to return only instances whose OS family type matches the given OS family.
         * 
         * @return builder
         * 
         */
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }

        /**
         * @param softwareSourceId The OCID for the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceId(@Nullable String softwareSourceId) {
            $.softwareSourceId = softwareSourceId;
            return this;
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(@Nullable List<String> softwareSourceTypes) {
            $.softwareSourceTypes = softwareSourceTypes;
            return this;
        }

        /**
         * @param softwareSourceTypes The type of the software source.
         * 
         * @return builder
         * 
         */
        public Builder softwareSourceTypes(String... softwareSourceTypes) {
            return softwareSourceTypes(List.of(softwareSourceTypes));
        }

        /**
         * @param states A filter to return only resources whose lifecycleState matches the given lifecycleStates.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable List<String> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states A filter to return only resources whose lifecycleState matches the given lifecycleStates.
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        /**
         * @param vendorName A filter to return only profiles that match the given vendorName.
         * 
         * @return builder
         * 
         */
        public Builder vendorName(@Nullable String vendorName) {
            $.vendorName = vendorName;
            return this;
        }

        public GetSoftwareSourcesPlainArgs build() {
            return $;
        }
    }

}
