// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementStationMirrorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementStationMirrorArgs Empty = new ManagementStationMirrorArgs();

    /**
     * (Updatable) Directory for the mirroring
     * 
     */
    @Import(name="directory", required=true)
    private Output<String> directory;

    /**
     * @return (Updatable) Directory for the mirroring
     * 
     */
    public Output<String> directory() {
        return this.directory;
    }

    /**
     * (Updatable) Port that the proxy will use
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return (Updatable) Port that the proxy will use
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    /**
     * (Updatable) Local path for the sslcert
     * 
     */
    @Import(name="sslcert")
    private @Nullable Output<String> sslcert;

    /**
     * @return (Updatable) Local path for the sslcert
     * 
     */
    public Optional<Output<String>> sslcert() {
        return Optional.ofNullable(this.sslcert);
    }

    /**
     * (Updatable) Default sslport for the mirror
     * 
     */
    @Import(name="sslport", required=true)
    private Output<String> sslport;

    /**
     * @return (Updatable) Default sslport for the mirror
     * 
     */
    public Output<String> sslport() {
        return this.sslport;
    }

    private ManagementStationMirrorArgs() {}

    private ManagementStationMirrorArgs(ManagementStationMirrorArgs $) {
        this.directory = $.directory;
        this.port = $.port;
        this.sslcert = $.sslcert;
        this.sslport = $.sslport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementStationMirrorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementStationMirrorArgs $;

        public Builder() {
            $ = new ManagementStationMirrorArgs();
        }

        public Builder(ManagementStationMirrorArgs defaults) {
            $ = new ManagementStationMirrorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param directory (Updatable) Directory for the mirroring
         * 
         * @return builder
         * 
         */
        public Builder directory(Output<String> directory) {
            $.directory = directory;
            return this;
        }

        /**
         * @param directory (Updatable) Directory for the mirroring
         * 
         * @return builder
         * 
         */
        public Builder directory(String directory) {
            return directory(Output.of(directory));
        }

        /**
         * @param port (Updatable) Port that the proxy will use
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Port that the proxy will use
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param sslcert (Updatable) Local path for the sslcert
         * 
         * @return builder
         * 
         */
        public Builder sslcert(@Nullable Output<String> sslcert) {
            $.sslcert = sslcert;
            return this;
        }

        /**
         * @param sslcert (Updatable) Local path for the sslcert
         * 
         * @return builder
         * 
         */
        public Builder sslcert(String sslcert) {
            return sslcert(Output.of(sslcert));
        }

        /**
         * @param sslport (Updatable) Default sslport for the mirror
         * 
         * @return builder
         * 
         */
        public Builder sslport(Output<String> sslport) {
            $.sslport = sslport;
            return this;
        }

        /**
         * @param sslport (Updatable) Default sslport for the mirror
         * 
         * @return builder
         * 
         */
        public Builder sslport(String sslport) {
            return sslport(Output.of(sslport));
        }

        public ManagementStationMirrorArgs build() {
            if ($.directory == null) {
                throw new MissingRequiredPropertyException("ManagementStationMirrorArgs", "directory");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ManagementStationMirrorArgs", "port");
            }
            if ($.sslport == null) {
                throw new MissingRequiredPropertyException("ManagementStationMirrorArgs", "sslport");
            }
            return $;
        }
    }

}
