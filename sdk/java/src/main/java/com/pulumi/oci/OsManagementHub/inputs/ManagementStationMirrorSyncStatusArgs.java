// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementStationMirrorSyncStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementStationMirrorSyncStatusArgs Empty = new ManagementStationMirrorSyncStatusArgs();

    /**
     * Total number of software sources that failed to sync.
     * 
     */
    @Import(name="failed")
    private @Nullable Output<Integer> failed;

    /**
     * @return Total number of software sources that failed to sync.
     * 
     */
    public Optional<Output<Integer>> failed() {
        return Optional.ofNullable(this.failed);
    }

    /**
     * Total number of software sources that are queued for sync.
     * 
     */
    @Import(name="queued")
    private @Nullable Output<Integer> queued;

    /**
     * @return Total number of software sources that are queued for sync.
     * 
     */
    public Optional<Output<Integer>> queued() {
        return Optional.ofNullable(this.queued);
    }

    /**
     * Total number of software sources that successfully synced.
     * 
     */
    @Import(name="synced")
    private @Nullable Output<Integer> synced;

    /**
     * @return Total number of software sources that successfully synced.
     * 
     */
    public Optional<Output<Integer>> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * Total number of software sources currently syncing.
     * 
     */
    @Import(name="syncing")
    private @Nullable Output<Integer> syncing;

    /**
     * @return Total number of software sources currently syncing.
     * 
     */
    public Optional<Output<Integer>> syncing() {
        return Optional.ofNullable(this.syncing);
    }

    /**
     * Total number of software sources that have not yet been synced.
     * 
     */
    @Import(name="unsynced")
    private @Nullable Output<Integer> unsynced;

    /**
     * @return Total number of software sources that have not yet been synced.
     * 
     */
    public Optional<Output<Integer>> unsynced() {
        return Optional.ofNullable(this.unsynced);
    }

    private ManagementStationMirrorSyncStatusArgs() {}

    private ManagementStationMirrorSyncStatusArgs(ManagementStationMirrorSyncStatusArgs $) {
        this.failed = $.failed;
        this.queued = $.queued;
        this.synced = $.synced;
        this.syncing = $.syncing;
        this.unsynced = $.unsynced;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementStationMirrorSyncStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementStationMirrorSyncStatusArgs $;

        public Builder() {
            $ = new ManagementStationMirrorSyncStatusArgs();
        }

        public Builder(ManagementStationMirrorSyncStatusArgs defaults) {
            $ = new ManagementStationMirrorSyncStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failed Total number of software sources that failed to sync.
         * 
         * @return builder
         * 
         */
        public Builder failed(@Nullable Output<Integer> failed) {
            $.failed = failed;
            return this;
        }

        /**
         * @param failed Total number of software sources that failed to sync.
         * 
         * @return builder
         * 
         */
        public Builder failed(Integer failed) {
            return failed(Output.of(failed));
        }

        /**
         * @param queued Total number of software sources that are queued for sync.
         * 
         * @return builder
         * 
         */
        public Builder queued(@Nullable Output<Integer> queued) {
            $.queued = queued;
            return this;
        }

        /**
         * @param queued Total number of software sources that are queued for sync.
         * 
         * @return builder
         * 
         */
        public Builder queued(Integer queued) {
            return queued(Output.of(queued));
        }

        /**
         * @param synced Total number of software sources that successfully synced.
         * 
         * @return builder
         * 
         */
        public Builder synced(@Nullable Output<Integer> synced) {
            $.synced = synced;
            return this;
        }

        /**
         * @param synced Total number of software sources that successfully synced.
         * 
         * @return builder
         * 
         */
        public Builder synced(Integer synced) {
            return synced(Output.of(synced));
        }

        /**
         * @param syncing Total number of software sources currently syncing.
         * 
         * @return builder
         * 
         */
        public Builder syncing(@Nullable Output<Integer> syncing) {
            $.syncing = syncing;
            return this;
        }

        /**
         * @param syncing Total number of software sources currently syncing.
         * 
         * @return builder
         * 
         */
        public Builder syncing(Integer syncing) {
            return syncing(Output.of(syncing));
        }

        /**
         * @param unsynced Total number of software sources that have not yet been synced.
         * 
         * @return builder
         * 
         */
        public Builder unsynced(@Nullable Output<Integer> unsynced) {
            $.unsynced = unsynced;
            return this;
        }

        /**
         * @param unsynced Total number of software sources that have not yet been synced.
         * 
         * @return builder
         * 
         */
        public Builder unsynced(Integer unsynced) {
            return unsynced(Output.of(unsynced));
        }

        public ManagementStationMirrorSyncStatusArgs build() {
            return $;
        }
    }

}
