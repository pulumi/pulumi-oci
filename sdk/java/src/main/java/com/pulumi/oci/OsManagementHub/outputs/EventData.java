// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagementHub.outputs.EventDataAdditionalDetail;
import com.pulumi.oci.OsManagementHub.outputs.EventDataContent;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventData {
    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    private @Nullable List<EventDataAdditionalDetail> additionalDetails;
    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    private @Nullable List<EventDataContent> contents;
    /**
     * @return Number of times the event has occurred.
     * 
     */
    private @Nullable Integer eventCount;
    /**
     * @return Fingerprint of the event.
     * 
     */
    private @Nullable String eventFingerprint;
    /**
     * @return Type of management station operation.
     * 
     */
    private @Nullable String operationType;
    /**
     * @return Reason for the event.
     * 
     */
    private @Nullable String reason;
    /**
     * @return Status of the management station operation.
     * 
     */
    private @Nullable String status;
    /**
     * @return The date and time that the event first occurred.
     * 
     */
    private @Nullable String timeFirstOccurred;

    private EventData() {}
    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    public List<EventDataAdditionalDetail> additionalDetails() {
        return this.additionalDetails == null ? List.of() : this.additionalDetails;
    }
    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    public List<EventDataContent> contents() {
        return this.contents == null ? List.of() : this.contents;
    }
    /**
     * @return Number of times the event has occurred.
     * 
     */
    public Optional<Integer> eventCount() {
        return Optional.ofNullable(this.eventCount);
    }
    /**
     * @return Fingerprint of the event.
     * 
     */
    public Optional<String> eventFingerprint() {
        return Optional.ofNullable(this.eventFingerprint);
    }
    /**
     * @return Type of management station operation.
     * 
     */
    public Optional<String> operationType() {
        return Optional.ofNullable(this.operationType);
    }
    /**
     * @return Reason for the event.
     * 
     */
    public Optional<String> reason() {
        return Optional.ofNullable(this.reason);
    }
    /**
     * @return Status of the management station operation.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The date and time that the event first occurred.
     * 
     */
    public Optional<String> timeFirstOccurred() {
        return Optional.ofNullable(this.timeFirstOccurred);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<EventDataAdditionalDetail> additionalDetails;
        private @Nullable List<EventDataContent> contents;
        private @Nullable Integer eventCount;
        private @Nullable String eventFingerprint;
        private @Nullable String operationType;
        private @Nullable String reason;
        private @Nullable String status;
        private @Nullable String timeFirstOccurred;
        public Builder() {}
        public Builder(EventData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.contents = defaults.contents;
    	      this.eventCount = defaults.eventCount;
    	      this.eventFingerprint = defaults.eventFingerprint;
    	      this.operationType = defaults.operationType;
    	      this.reason = defaults.reason;
    	      this.status = defaults.status;
    	      this.timeFirstOccurred = defaults.timeFirstOccurred;
        }

        @CustomType.Setter
        public Builder additionalDetails(@Nullable List<EventDataAdditionalDetail> additionalDetails) {

            this.additionalDetails = additionalDetails;
            return this;
        }
        public Builder additionalDetails(EventDataAdditionalDetail... additionalDetails) {
            return additionalDetails(List.of(additionalDetails));
        }
        @CustomType.Setter
        public Builder contents(@Nullable List<EventDataContent> contents) {

            this.contents = contents;
            return this;
        }
        public Builder contents(EventDataContent... contents) {
            return contents(List.of(contents));
        }
        @CustomType.Setter
        public Builder eventCount(@Nullable Integer eventCount) {

            this.eventCount = eventCount;
            return this;
        }
        @CustomType.Setter
        public Builder eventFingerprint(@Nullable String eventFingerprint) {

            this.eventFingerprint = eventFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder operationType(@Nullable String operationType) {

            this.operationType = operationType;
            return this;
        }
        @CustomType.Setter
        public Builder reason(@Nullable String reason) {

            this.reason = reason;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeFirstOccurred(@Nullable String timeFirstOccurred) {

            this.timeFirstOccurred = timeFirstOccurred;
            return this;
        }
        public EventData build() {
            final var _resultValue = new EventData();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.contents = contents;
            _resultValue.eventCount = eventCount;
            _resultValue.eventFingerprint = eventFingerprint;
            _resultValue.operationType = operationType;
            _resultValue.reason = reason;
            _resultValue.status = status;
            _resultValue.timeFirstOccurred = timeFirstOccurred;
            return _resultValue;
        }
    }
}
