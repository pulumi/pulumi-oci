// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventDataContent {
    /**
     * @return Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    private @Nullable String contentAvailability;
    /**
     * @return Location of the Kernel event content.
     * 
     */
    private @Nullable String contentLocation;
    /**
     * @return The content of the exploit detection log.
     * 
     */
    private @Nullable String exploitDetectionLogContent;
    /**
     * @return The location of the exploit detection log within object storage.
     * 
     */
    private @Nullable String exploitObjectStoreLocation;
    /**
     * @return Size of the event content.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return Event type:
     * 
     */
    private @Nullable String type;

    private EventDataContent() {}
    /**
     * @return Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    public Optional<String> contentAvailability() {
        return Optional.ofNullable(this.contentAvailability);
    }
    /**
     * @return Location of the Kernel event content.
     * 
     */
    public Optional<String> contentLocation() {
        return Optional.ofNullable(this.contentLocation);
    }
    /**
     * @return The content of the exploit detection log.
     * 
     */
    public Optional<String> exploitDetectionLogContent() {
        return Optional.ofNullable(this.exploitDetectionLogContent);
    }
    /**
     * @return The location of the exploit detection log within object storage.
     * 
     */
    public Optional<String> exploitObjectStoreLocation() {
        return Optional.ofNullable(this.exploitObjectStoreLocation);
    }
    /**
     * @return Size of the event content.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return Event type:
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventDataContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String contentAvailability;
        private @Nullable String contentLocation;
        private @Nullable String exploitDetectionLogContent;
        private @Nullable String exploitObjectStoreLocation;
        private @Nullable Integer size;
        private @Nullable String type;
        public Builder() {}
        public Builder(EventDataContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentAvailability = defaults.contentAvailability;
    	      this.contentLocation = defaults.contentLocation;
    	      this.exploitDetectionLogContent = defaults.exploitDetectionLogContent;
    	      this.exploitObjectStoreLocation = defaults.exploitObjectStoreLocation;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder contentAvailability(@Nullable String contentAvailability) {

            this.contentAvailability = contentAvailability;
            return this;
        }
        @CustomType.Setter
        public Builder contentLocation(@Nullable String contentLocation) {

            this.contentLocation = contentLocation;
            return this;
        }
        @CustomType.Setter
        public Builder exploitDetectionLogContent(@Nullable String exploitDetectionLogContent) {

            this.exploitDetectionLogContent = exploitDetectionLogContent;
            return this;
        }
        @CustomType.Setter
        public Builder exploitObjectStoreLocation(@Nullable String exploitObjectStoreLocation) {

            this.exploitObjectStoreLocation = exploitObjectStoreLocation;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public EventDataContent build() {
            final var _resultValue = new EventDataContent();
            _resultValue.contentAvailability = contentAvailability;
            _resultValue.contentLocation = contentLocation;
            _resultValue.exploitDetectionLogContent = exploitDetectionLogContent;
            _resultValue.exploitObjectStoreLocation = exploitObjectStoreLocation;
            _resultValue.size = size;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
