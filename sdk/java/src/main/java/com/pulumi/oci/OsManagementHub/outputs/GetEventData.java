// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetEventDataAdditionalDetail;
import com.pulumi.oci.OsManagementHub.outputs.GetEventDataContent;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEventData {
    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    private List<GetEventDataAdditionalDetail> additionalDetails;
    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    private List<GetEventDataContent> contents;
    /**
     * @return Number of times the event has occurred.
     * 
     */
    private Integer eventCount;
    /**
     * @return Fingerprint of the event.
     * 
     */
    private String eventFingerprint;
    /**
     * @return Type of management station operation.
     * 
     */
    private String operationType;
    /**
     * @return Reason for the event.
     * 
     */
    private String reason;
    /**
     * @return Status of the management station operation.
     * 
     */
    private String status;
    /**
     * @return The date and time that the event first occurred.
     * 
     */
    private String timeFirstOccurred;

    private GetEventData() {}
    /**
     * @return Provides additional information for the work request associated with an event.
     * 
     */
    public List<GetEventDataAdditionalDetail> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return Provides information collected for the exploit attempt event.
     * 
     */
    public List<GetEventDataContent> contents() {
        return this.contents;
    }
    /**
     * @return Number of times the event has occurred.
     * 
     */
    public Integer eventCount() {
        return this.eventCount;
    }
    /**
     * @return Fingerprint of the event.
     * 
     */
    public String eventFingerprint() {
        return this.eventFingerprint;
    }
    /**
     * @return Type of management station operation.
     * 
     */
    public String operationType() {
        return this.operationType;
    }
    /**
     * @return Reason for the event.
     * 
     */
    public String reason() {
        return this.reason;
    }
    /**
     * @return Status of the management station operation.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time that the event first occurred.
     * 
     */
    public String timeFirstOccurred() {
        return this.timeFirstOccurred;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetEventDataAdditionalDetail> additionalDetails;
        private List<GetEventDataContent> contents;
        private Integer eventCount;
        private String eventFingerprint;
        private String operationType;
        private String reason;
        private String status;
        private String timeFirstOccurred;
        public Builder() {}
        public Builder(GetEventData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.contents = defaults.contents;
    	      this.eventCount = defaults.eventCount;
    	      this.eventFingerprint = defaults.eventFingerprint;
    	      this.operationType = defaults.operationType;
    	      this.reason = defaults.reason;
    	      this.status = defaults.status;
    	      this.timeFirstOccurred = defaults.timeFirstOccurred;
        }

        @CustomType.Setter
        public Builder additionalDetails(List<GetEventDataAdditionalDetail> additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetEventData", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        public Builder additionalDetails(GetEventDataAdditionalDetail... additionalDetails) {
            return additionalDetails(List.of(additionalDetails));
        }
        @CustomType.Setter
        public Builder contents(List<GetEventDataContent> contents) {
            if (contents == null) {
              throw new MissingRequiredPropertyException("GetEventData", "contents");
            }
            this.contents = contents;
            return this;
        }
        public Builder contents(GetEventDataContent... contents) {
            return contents(List.of(contents));
        }
        @CustomType.Setter
        public Builder eventCount(Integer eventCount) {
            if (eventCount == null) {
              throw new MissingRequiredPropertyException("GetEventData", "eventCount");
            }
            this.eventCount = eventCount;
            return this;
        }
        @CustomType.Setter
        public Builder eventFingerprint(String eventFingerprint) {
            if (eventFingerprint == null) {
              throw new MissingRequiredPropertyException("GetEventData", "eventFingerprint");
            }
            this.eventFingerprint = eventFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder operationType(String operationType) {
            if (operationType == null) {
              throw new MissingRequiredPropertyException("GetEventData", "operationType");
            }
            this.operationType = operationType;
            return this;
        }
        @CustomType.Setter
        public Builder reason(String reason) {
            if (reason == null) {
              throw new MissingRequiredPropertyException("GetEventData", "reason");
            }
            this.reason = reason;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEventData", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeFirstOccurred(String timeFirstOccurred) {
            if (timeFirstOccurred == null) {
              throw new MissingRequiredPropertyException("GetEventData", "timeFirstOccurred");
            }
            this.timeFirstOccurred = timeFirstOccurred;
            return this;
        }
        public GetEventData build() {
            final var _resultValue = new GetEventData();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.contents = contents;
            _resultValue.eventCount = eventCount;
            _resultValue.eventFingerprint = eventFingerprint;
            _resultValue.operationType = operationType;
            _resultValue.reason = reason;
            _resultValue.status = status;
            _resultValue.timeFirstOccurred = timeFirstOccurred;
            return _resultValue;
        }
    }
}
