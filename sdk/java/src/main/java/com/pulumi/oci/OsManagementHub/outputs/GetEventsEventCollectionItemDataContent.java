// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEventsEventCollectionItemDataContent {
    /**
     * @return Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    private String contentAvailability;
    /**
     * @return Location of the Kernel event content.
     * 
     */
    private String contentLocation;
    /**
     * @return The content of the exploit detection log.
     * 
     */
    private String exploitDetectionLogContent;
    /**
     * @return The location of the exploit detection log within object storage.
     * 
     */
    private String exploitObjectStoreLocation;
    /**
     * @return Size of the event content.
     * 
     */
    private Integer size;
    /**
     * @return A filter to return only resources whose type matches the given value.
     * 
     */
    private String type;

    private GetEventsEventCollectionItemDataContent() {}
    /**
     * @return Crash content availability status:
     * * &#39;NOT_AVAILABLE&#39; indicates the content is not available on the instance nor in the service
     * * &#39;AVAILABLE_ON_INSTANCE&#39; indicates the content is only available on the instance.
     * * &#39;AVAILABLE_ON_SERVICE&#39; indicates the content is only available on the service.
     * * &#39;AVAILABLE_ON_INSTANCE_AND_SERVICE&#39; indicates the content is available both on the instance and the service
     * * &#39;AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS&#39; indicates the content is available on the instance and its upload to the service is in progress.
     * 
     */
    public String contentAvailability() {
        return this.contentAvailability;
    }
    /**
     * @return Location of the Kernel event content.
     * 
     */
    public String contentLocation() {
        return this.contentLocation;
    }
    /**
     * @return The content of the exploit detection log.
     * 
     */
    public String exploitDetectionLogContent() {
        return this.exploitDetectionLogContent;
    }
    /**
     * @return The location of the exploit detection log within object storage.
     * 
     */
    public String exploitObjectStoreLocation() {
        return this.exploitObjectStoreLocation;
    }
    /**
     * @return Size of the event content.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return A filter to return only resources whose type matches the given value.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventsEventCollectionItemDataContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String contentAvailability;
        private String contentLocation;
        private String exploitDetectionLogContent;
        private String exploitObjectStoreLocation;
        private Integer size;
        private String type;
        public Builder() {}
        public Builder(GetEventsEventCollectionItemDataContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentAvailability = defaults.contentAvailability;
    	      this.contentLocation = defaults.contentLocation;
    	      this.exploitDetectionLogContent = defaults.exploitDetectionLogContent;
    	      this.exploitObjectStoreLocation = defaults.exploitObjectStoreLocation;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder contentAvailability(String contentAvailability) {
            if (contentAvailability == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "contentAvailability");
            }
            this.contentAvailability = contentAvailability;
            return this;
        }
        @CustomType.Setter
        public Builder contentLocation(String contentLocation) {
            if (contentLocation == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "contentLocation");
            }
            this.contentLocation = contentLocation;
            return this;
        }
        @CustomType.Setter
        public Builder exploitDetectionLogContent(String exploitDetectionLogContent) {
            if (exploitDetectionLogContent == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "exploitDetectionLogContent");
            }
            this.exploitDetectionLogContent = exploitDetectionLogContent;
            return this;
        }
        @CustomType.Setter
        public Builder exploitObjectStoreLocation(String exploitObjectStoreLocation) {
            if (exploitObjectStoreLocation == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "exploitObjectStoreLocation");
            }
            this.exploitObjectStoreLocation = exploitObjectStoreLocation;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemDataContent", "type");
            }
            this.type = type;
            return this;
        }
        public GetEventsEventCollectionItemDataContent build() {
            final var _resultValue = new GetEventsEventCollectionItemDataContent();
            _resultValue.contentAvailability = contentAvailability;
            _resultValue.contentLocation = contentLocation;
            _resultValue.exploitDetectionLogContent = exploitDetectionLogContent;
            _resultValue.exploitObjectStoreLocation = exploitObjectStoreLocation;
            _resultValue.size = size;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
