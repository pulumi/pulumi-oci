// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEventsEventCollectionItemSystemDetail {
    /**
     * @return Architecture type.
     * 
     */
    private String architecture;
    /**
     * @return Version of the Ksplice effective kernel.
     * 
     */
    private String kspliceEffectiveKernelVersion;
    /**
     * @return Operating system type.
     * 
     */
    private String osFamily;
    /**
     * @return Release of the kernel.
     * 
     */
    private String osKernelRelease;
    /**
     * @return Version of the kernel.
     * 
     */
    private String osKernelVersion;
    /**
     * @return Name of the operating system.
     * 
     */
    private String osName;
    /**
     * @return Version of the operating system.
     * 
     */
    private String osSystemVersion;

    private GetEventsEventCollectionItemSystemDetail() {}
    /**
     * @return Architecture type.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return Version of the Ksplice effective kernel.
     * 
     */
    public String kspliceEffectiveKernelVersion() {
        return this.kspliceEffectiveKernelVersion;
    }
    /**
     * @return Operating system type.
     * 
     */
    public String osFamily() {
        return this.osFamily;
    }
    /**
     * @return Release of the kernel.
     * 
     */
    public String osKernelRelease() {
        return this.osKernelRelease;
    }
    /**
     * @return Version of the kernel.
     * 
     */
    public String osKernelVersion() {
        return this.osKernelVersion;
    }
    /**
     * @return Name of the operating system.
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Version of the operating system.
     * 
     */
    public String osSystemVersion() {
        return this.osSystemVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventsEventCollectionItemSystemDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String kspliceEffectiveKernelVersion;
        private String osFamily;
        private String osKernelRelease;
        private String osKernelVersion;
        private String osName;
        private String osSystemVersion;
        public Builder() {}
        public Builder(GetEventsEventCollectionItemSystemDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.kspliceEffectiveKernelVersion = defaults.kspliceEffectiveKernelVersion;
    	      this.osFamily = defaults.osFamily;
    	      this.osKernelRelease = defaults.osKernelRelease;
    	      this.osKernelVersion = defaults.osKernelVersion;
    	      this.osName = defaults.osName;
    	      this.osSystemVersion = defaults.osSystemVersion;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder kspliceEffectiveKernelVersion(String kspliceEffectiveKernelVersion) {
            if (kspliceEffectiveKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "kspliceEffectiveKernelVersion");
            }
            this.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osFamily(String osFamily) {
            if (osFamily == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "osFamily");
            }
            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder osKernelRelease(String osKernelRelease) {
            if (osKernelRelease == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "osKernelRelease");
            }
            this.osKernelRelease = osKernelRelease;
            return this;
        }
        @CustomType.Setter
        public Builder osKernelVersion(String osKernelVersion) {
            if (osKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "osKernelVersion");
            }
            this.osKernelVersion = osKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osSystemVersion(String osSystemVersion) {
            if (osSystemVersion == null) {
              throw new MissingRequiredPropertyException("GetEventsEventCollectionItemSystemDetail", "osSystemVersion");
            }
            this.osSystemVersion = osSystemVersion;
            return this;
        }
        public GetEventsEventCollectionItemSystemDetail build() {
            final var _resultValue = new GetEventsEventCollectionItemSystemDetail();
            _resultValue.architecture = architecture;
            _resultValue.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            _resultValue.osFamily = osFamily;
            _resultValue.osKernelRelease = osKernelRelease;
            _resultValue.osKernelVersion = osKernelVersion;
            _resultValue.osName = osName;
            _resultValue.osSystemVersion = osSystemVersion;
            return _resultValue;
        }
    }
}
