// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceGroupAvailableModulesFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedInstanceGroupAvailableModulesResult {
    private @Nullable String compartmentId;
    private @Nullable List<GetManagedInstanceGroupAvailableModulesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of managed_instance_group_available_module_collection.
     * 
     */
    private @Nullable List<GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection> managedInstanceGroupAvailableModuleCollections;
    private String managedInstanceGroupId;
    /**
     * @return The name of the module that is available to be enabled on the managed instance group.
     * 
     */
    private @Nullable String name;
    private @Nullable String nameContains;

    private GetManagedInstanceGroupAvailableModulesResult() {}
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetManagedInstanceGroupAvailableModulesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of managed_instance_group_available_module_collection.
     * 
     */
    public List<GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection> managedInstanceGroupAvailableModuleCollections() {
        return this.managedInstanceGroupAvailableModuleCollections == null ? List.of() : this.managedInstanceGroupAvailableModuleCollections;
    }
    public String managedInstanceGroupId() {
        return this.managedInstanceGroupId;
    }
    /**
     * @return The name of the module that is available to be enabled on the managed instance group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceGroupAvailableModulesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetManagedInstanceGroupAvailableModulesFilter> filters;
        private @Nullable String id;
        private @Nullable List<GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection> managedInstanceGroupAvailableModuleCollections;
        private String managedInstanceGroupId;
        private @Nullable String name;
        private @Nullable String nameContains;
        public Builder() {}
        public Builder(GetManagedInstanceGroupAvailableModulesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedInstanceGroupAvailableModuleCollections = defaults.managedInstanceGroupAvailableModuleCollections;
    	      this.managedInstanceGroupId = defaults.managedInstanceGroupId;
    	      this.name = defaults.name;
    	      this.nameContains = defaults.nameContains;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedInstanceGroupAvailableModulesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedInstanceGroupAvailableModulesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroupAvailableModuleCollections(@Nullable List<GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection> managedInstanceGroupAvailableModuleCollections) {
            this.managedInstanceGroupAvailableModuleCollections = managedInstanceGroupAvailableModuleCollections;
            return this;
        }
        public Builder managedInstanceGroupAvailableModuleCollections(GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection... managedInstanceGroupAvailableModuleCollections) {
            return managedInstanceGroupAvailableModuleCollections(List.of(managedInstanceGroupAvailableModuleCollections));
        }
        @CustomType.Setter
        public Builder managedInstanceGroupId(String managedInstanceGroupId) {
            this.managedInstanceGroupId = Objects.requireNonNull(managedInstanceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameContains(@Nullable String nameContains) {
            this.nameContains = nameContains;
            return this;
        }
        public GetManagedInstanceGroupAvailableModulesResult build() {
            final var o = new GetManagedInstanceGroupAvailableModulesResult();
            o.compartmentId = compartmentId;
            o.filters = filters;
            o.id = id;
            o.managedInstanceGroupAvailableModuleCollections = managedInstanceGroupAvailableModuleCollections;
            o.managedInstanceGroupId = managedInstanceGroupId;
            o.name = name;
            o.nameContains = nameContains;
            return o;
        }
    }
}
