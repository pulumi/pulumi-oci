// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem {
    /**
     * @return The architecture for which this package was built.
     * 
     */
    private String architecture;
    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    private String displayName;
    /**
     * @return A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    private Boolean isLatest;
    /**
     * @return Unique identifier for the package. NOTE - This is not an OCID.
     * 
     */
    private String name;
    /**
     * @return List of software sources that provide the software package.
     * 
     */
    private List<GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource> softwareSources;
    /**
     * @return Type of the package.
     * 
     */
    private String type;
    /**
     * @return Version of the installed package.
     * 
     */
    private String version;

    private GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem() {}
    /**
     * @return The architecture for which this package was built.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return A filter to return resources that match the given display names.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
     * 
     */
    public Boolean isLatest() {
        return this.isLatest;
    }
    /**
     * @return Unique identifier for the package. NOTE - This is not an OCID.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of software sources that provide the software package.
     * 
     */
    public List<GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource> softwareSources() {
        return this.softwareSources;
    }
    /**
     * @return Type of the package.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Version of the installed package.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String displayName;
        private Boolean isLatest;
        private String name;
        private List<GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource> softwareSources;
        private String type;
        private String version;
        public Builder() {}
        public Builder(GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.displayName = defaults.displayName;
    	      this.isLatest = defaults.isLatest;
    	      this.name = defaults.name;
    	      this.softwareSources = defaults.softwareSources;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder isLatest(Boolean isLatest) {
            if (isLatest == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "isLatest");
            }
            this.isLatest = isLatest;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder softwareSources(List<GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource> softwareSources) {
            if (softwareSources == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "softwareSources");
            }
            this.softwareSources = softwareSources;
            return this;
        }
        public Builder softwareSources(GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource... softwareSources) {
            return softwareSources(List.of(softwareSources));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem build() {
            final var _resultValue = new GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem();
            _resultValue.architecture = architecture;
            _resultValue.displayName = displayName;
            _resultValue.isLatest = isLatest;
            _resultValue.name = name;
            _resultValue.softwareSources = softwareSources;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
