// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceGroupInstalledPackagesFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedInstanceGroupInstalledPackagesResult {
    private @Nullable String compartmentId;
    private @Nullable String displayNameContains;
    private @Nullable List<String> displayNames;
    private @Nullable List<GetManagedInstanceGroupInstalledPackagesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedInstanceGroupId;
    /**
     * @return The list of managed_instance_group_installed_package_collection.
     * 
     */
    private List<GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection> managedInstanceGroupInstalledPackageCollections;
    private @Nullable String timeInstallDateEnd;
    private @Nullable String timeInstallDateStart;

    private GetManagedInstanceGroupInstalledPackagesResult() {}
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    public List<String> displayNames() {
        return this.displayNames == null ? List.of() : this.displayNames;
    }
    public List<GetManagedInstanceGroupInstalledPackagesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedInstanceGroupId() {
        return this.managedInstanceGroupId;
    }
    /**
     * @return The list of managed_instance_group_installed_package_collection.
     * 
     */
    public List<GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection> managedInstanceGroupInstalledPackageCollections() {
        return this.managedInstanceGroupInstalledPackageCollections;
    }
    public Optional<String> timeInstallDateEnd() {
        return Optional.ofNullable(this.timeInstallDateEnd);
    }
    public Optional<String> timeInstallDateStart() {
        return Optional.ofNullable(this.timeInstallDateStart);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceGroupInstalledPackagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String displayNameContains;
        private @Nullable List<String> displayNames;
        private @Nullable List<GetManagedInstanceGroupInstalledPackagesFilter> filters;
        private String id;
        private String managedInstanceGroupId;
        private List<GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection> managedInstanceGroupInstalledPackageCollections;
        private @Nullable String timeInstallDateEnd;
        private @Nullable String timeInstallDateStart;
        public Builder() {}
        public Builder(GetManagedInstanceGroupInstalledPackagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.displayNames = defaults.displayNames;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedInstanceGroupId = defaults.managedInstanceGroupId;
    	      this.managedInstanceGroupInstalledPackageCollections = defaults.managedInstanceGroupInstalledPackageCollections;
    	      this.timeInstallDateEnd = defaults.timeInstallDateEnd;
    	      this.timeInstallDateStart = defaults.timeInstallDateStart;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder displayNames(@Nullable List<String> displayNames) {

            this.displayNames = displayNames;
            return this;
        }
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedInstanceGroupInstalledPackagesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedInstanceGroupInstalledPackagesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupInstalledPackagesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroupId(String managedInstanceGroupId) {
            if (managedInstanceGroupId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupInstalledPackagesResult", "managedInstanceGroupId");
            }
            this.managedInstanceGroupId = managedInstanceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroupInstalledPackageCollections(List<GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection> managedInstanceGroupInstalledPackageCollections) {
            if (managedInstanceGroupInstalledPackageCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceGroupInstalledPackagesResult", "managedInstanceGroupInstalledPackageCollections");
            }
            this.managedInstanceGroupInstalledPackageCollections = managedInstanceGroupInstalledPackageCollections;
            return this;
        }
        public Builder managedInstanceGroupInstalledPackageCollections(GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection... managedInstanceGroupInstalledPackageCollections) {
            return managedInstanceGroupInstalledPackageCollections(List.of(managedInstanceGroupInstalledPackageCollections));
        }
        @CustomType.Setter
        public Builder timeInstallDateEnd(@Nullable String timeInstallDateEnd) {

            this.timeInstallDateEnd = timeInstallDateEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeInstallDateStart(@Nullable String timeInstallDateStart) {

            this.timeInstallDateStart = timeInstallDateStart;
            return this;
        }
        public GetManagedInstanceGroupInstalledPackagesResult build() {
            final var _resultValue = new GetManagedInstanceGroupInstalledPackagesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.displayNames = displayNames;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.managedInstanceGroupId = managedInstanceGroupId;
            _resultValue.managedInstanceGroupInstalledPackageCollections = managedInstanceGroupInstalledPackageCollections;
            _resultValue.timeInstallDateEnd = timeInstallDateEnd;
            _resultValue.timeInstallDateStart = timeInstallDateStart;
            return _resultValue;
        }
    }
}
