// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceAutonomousSetting;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceLifecycleEnvironment;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceLifecycleStage;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceManagedInstanceGroup;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstanceSoftwareSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedInstanceResult {
    /**
     * @return The CPU architecture type of the managed instance.
     * 
     */
    private String architecture;
    /**
     * @return Settings for the Autonomous Linux service.
     * 
     */
    private List<GetManagedInstanceAutonomousSetting> autonomousSettings;
    /**
     * @return Number of bug fix type updates available for installation.
     * 
     */
    private Integer bugUpdatesAvailable;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the managed instance.
     * 
     */
    private String compartmentId;
    /**
     * @return Software source description.
     * 
     */
    private String description;
    /**
     * @return Software source name.
     * 
     */
    private String displayName;
    /**
     * @return Number of enhancement type updates available for installation.
     * 
     */
    private Integer enhancementUpdatesAvailable;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     * 
     */
    private String id;
    /**
     * @return Number of packages installed on the instance.
     * 
     */
    private Integer installedPackages;
    /**
     * @return Number of Windows updates installed on the instance.
     * 
     */
    private Integer installedWindowsUpdates;
    /**
     * @return Indicates whether the Autonomous Linux service manages the instance.
     * 
     */
    private Boolean isManagedByAutonomousLinux;
    /**
     * @return Indicates whether this managed instance is acting as an on-premises management station.
     * 
     */
    private Boolean isManagementStation;
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    private Boolean isRebootRequired;
    /**
     * @return The ksplice effective kernel version.
     * 
     */
    private String kspliceEffectiveKernelVersion;
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    private List<GetManagedInstanceLifecycleEnvironment> lifecycleEnvironments;
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    private List<GetManagedInstanceLifecycleStage> lifecycleStages;
    /**
     * @return The location of the managed instance.
     * 
     */
    private String location;
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    private List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups;
    private String managedInstanceId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
     * 
     */
    private String notificationTopicId;
    /**
     * @return The operating system type of the managed instance.
     * 
     */
    private String osFamily;
    /**
     * @return Operating system kernel version.
     * 
     */
    private String osKernelVersion;
    /**
     * @return Operating system name.
     * 
     */
    private String osName;
    /**
     * @return Operating system version.
     * 
     */
    private String osVersion;
    /**
     * @return Number of non-classified (other) updates available for installation.
     * 
     */
    private Integer otherUpdatesAvailable;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as primary management station.
     * 
     */
    private String primaryManagementStationId;
    /**
     * @return The profile that was used to register this instance with the service.
     * 
     */
    private String profile;
    /**
     * @return Number of scheduled jobs associated with this instance.
     * 
     */
    private Integer scheduledJobCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as secondary managment station.
     * 
     */
    private String secondaryManagementStationId;
    /**
     * @return Number of security type updates available for installation.
     * 
     */
    private Integer securityUpdatesAvailable;
    /**
     * @return The list of software sources currently attached to the managed instance.
     * 
     */
    private List<GetManagedInstanceSoftwareSource> softwareSources;
    /**
     * @return Current status of the managed instance.
     * 
     */
    private String status;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy that the managed instance resides in.
     * 
     */
    private String tenancyId;
    /**
     * @return The date and time the instance was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeCreated;
    /**
     * @return Time that the instance last booted (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeLastBoot;
    /**
     * @return Time that the instance last checked in with the service (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeLastCheckin;
    /**
     * @return The date and time the instance was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeUpdated;
    /**
     * @return Number of updates available for installation.
     * 
     */
    private Integer updatesAvailable;
    /**
     * @return Number of work requests associated with this instance.
     * 
     */
    private Integer workRequestCount;

    private GetManagedInstanceResult() {}
    /**
     * @return The CPU architecture type of the managed instance.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return Settings for the Autonomous Linux service.
     * 
     */
    public List<GetManagedInstanceAutonomousSetting> autonomousSettings() {
        return this.autonomousSettings;
    }
    /**
     * @return Number of bug fix type updates available for installation.
     * 
     */
    public Integer bugUpdatesAvailable() {
        return this.bugUpdatesAvailable;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the managed instance.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Software source description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Software source name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Number of enhancement type updates available for installation.
     * 
     */
    public Integer enhancementUpdatesAvailable() {
        return this.enhancementUpdatesAvailable;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Number of packages installed on the instance.
     * 
     */
    public Integer installedPackages() {
        return this.installedPackages;
    }
    /**
     * @return Number of Windows updates installed on the instance.
     * 
     */
    public Integer installedWindowsUpdates() {
        return this.installedWindowsUpdates;
    }
    /**
     * @return Indicates whether the Autonomous Linux service manages the instance.
     * 
     */
    public Boolean isManagedByAutonomousLinux() {
        return this.isManagedByAutonomousLinux;
    }
    /**
     * @return Indicates whether this managed instance is acting as an on-premises management station.
     * 
     */
    public Boolean isManagementStation() {
        return this.isManagementStation;
    }
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    public Boolean isRebootRequired() {
        return this.isRebootRequired;
    }
    /**
     * @return The ksplice effective kernel version.
     * 
     */
    public String kspliceEffectiveKernelVersion() {
        return this.kspliceEffectiveKernelVersion;
    }
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    public List<GetManagedInstanceLifecycleEnvironment> lifecycleEnvironments() {
        return this.lifecycleEnvironments;
    }
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    public List<GetManagedInstanceLifecycleStage> lifecycleStages() {
        return this.lifecycleStages;
    }
    /**
     * @return The location of the managed instance.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    public List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups() {
        return this.managedInstanceGroups;
    }
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
     * 
     */
    public String notificationTopicId() {
        return this.notificationTopicId;
    }
    /**
     * @return The operating system type of the managed instance.
     * 
     */
    public String osFamily() {
        return this.osFamily;
    }
    /**
     * @return Operating system kernel version.
     * 
     */
    public String osKernelVersion() {
        return this.osKernelVersion;
    }
    /**
     * @return Operating system name.
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Operating system version.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return Number of non-classified (other) updates available for installation.
     * 
     */
    public Integer otherUpdatesAvailable() {
        return this.otherUpdatesAvailable;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as primary management station.
     * 
     */
    public String primaryManagementStationId() {
        return this.primaryManagementStationId;
    }
    /**
     * @return The profile that was used to register this instance with the service.
     * 
     */
    public String profile() {
        return this.profile;
    }
    /**
     * @return Number of scheduled jobs associated with this instance.
     * 
     */
    public Integer scheduledJobCount() {
        return this.scheduledJobCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as secondary managment station.
     * 
     */
    public String secondaryManagementStationId() {
        return this.secondaryManagementStationId;
    }
    /**
     * @return Number of security type updates available for installation.
     * 
     */
    public Integer securityUpdatesAvailable() {
        return this.securityUpdatesAvailable;
    }
    /**
     * @return The list of software sources currently attached to the managed instance.
     * 
     */
    public List<GetManagedInstanceSoftwareSource> softwareSources() {
        return this.softwareSources;
    }
    /**
     * @return Current status of the managed instance.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy that the managed instance resides in.
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return The date and time the instance was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time that the instance last booted (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeLastBoot() {
        return this.timeLastBoot;
    }
    /**
     * @return Time that the instance last checked in with the service (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeLastCheckin() {
        return this.timeLastCheckin;
    }
    /**
     * @return The date and time the instance was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Number of updates available for installation.
     * 
     */
    public Integer updatesAvailable() {
        return this.updatesAvailable;
    }
    /**
     * @return Number of work requests associated with this instance.
     * 
     */
    public Integer workRequestCount() {
        return this.workRequestCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private List<GetManagedInstanceAutonomousSetting> autonomousSettings;
        private Integer bugUpdatesAvailable;
        private String compartmentId;
        private String description;
        private String displayName;
        private Integer enhancementUpdatesAvailable;
        private String id;
        private Integer installedPackages;
        private Integer installedWindowsUpdates;
        private Boolean isManagedByAutonomousLinux;
        private Boolean isManagementStation;
        private Boolean isRebootRequired;
        private String kspliceEffectiveKernelVersion;
        private List<GetManagedInstanceLifecycleEnvironment> lifecycleEnvironments;
        private List<GetManagedInstanceLifecycleStage> lifecycleStages;
        private String location;
        private List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups;
        private String managedInstanceId;
        private String notificationTopicId;
        private String osFamily;
        private String osKernelVersion;
        private String osName;
        private String osVersion;
        private Integer otherUpdatesAvailable;
        private String primaryManagementStationId;
        private String profile;
        private Integer scheduledJobCount;
        private String secondaryManagementStationId;
        private Integer securityUpdatesAvailable;
        private List<GetManagedInstanceSoftwareSource> softwareSources;
        private String status;
        private String tenancyId;
        private String timeCreated;
        private String timeLastBoot;
        private String timeLastCheckin;
        private String timeUpdated;
        private Integer updatesAvailable;
        private Integer workRequestCount;
        public Builder() {}
        public Builder(GetManagedInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.autonomousSettings = defaults.autonomousSettings;
    	      this.bugUpdatesAvailable = defaults.bugUpdatesAvailable;
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enhancementUpdatesAvailable = defaults.enhancementUpdatesAvailable;
    	      this.id = defaults.id;
    	      this.installedPackages = defaults.installedPackages;
    	      this.installedWindowsUpdates = defaults.installedWindowsUpdates;
    	      this.isManagedByAutonomousLinux = defaults.isManagedByAutonomousLinux;
    	      this.isManagementStation = defaults.isManagementStation;
    	      this.isRebootRequired = defaults.isRebootRequired;
    	      this.kspliceEffectiveKernelVersion = defaults.kspliceEffectiveKernelVersion;
    	      this.lifecycleEnvironments = defaults.lifecycleEnvironments;
    	      this.lifecycleStages = defaults.lifecycleStages;
    	      this.location = defaults.location;
    	      this.managedInstanceGroups = defaults.managedInstanceGroups;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.notificationTopicId = defaults.notificationTopicId;
    	      this.osFamily = defaults.osFamily;
    	      this.osKernelVersion = defaults.osKernelVersion;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
    	      this.otherUpdatesAvailable = defaults.otherUpdatesAvailable;
    	      this.primaryManagementStationId = defaults.primaryManagementStationId;
    	      this.profile = defaults.profile;
    	      this.scheduledJobCount = defaults.scheduledJobCount;
    	      this.secondaryManagementStationId = defaults.secondaryManagementStationId;
    	      this.securityUpdatesAvailable = defaults.securityUpdatesAvailable;
    	      this.softwareSources = defaults.softwareSources;
    	      this.status = defaults.status;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastBoot = defaults.timeLastBoot;
    	      this.timeLastCheckin = defaults.timeLastCheckin;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.updatesAvailable = defaults.updatesAvailable;
    	      this.workRequestCount = defaults.workRequestCount;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousSettings(List<GetManagedInstanceAutonomousSetting> autonomousSettings) {
            if (autonomousSettings == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "autonomousSettings");
            }
            this.autonomousSettings = autonomousSettings;
            return this;
        }
        public Builder autonomousSettings(GetManagedInstanceAutonomousSetting... autonomousSettings) {
            return autonomousSettings(List.of(autonomousSettings));
        }
        @CustomType.Setter
        public Builder bugUpdatesAvailable(Integer bugUpdatesAvailable) {
            if (bugUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "bugUpdatesAvailable");
            }
            this.bugUpdatesAvailable = bugUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enhancementUpdatesAvailable(Integer enhancementUpdatesAvailable) {
            if (enhancementUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "enhancementUpdatesAvailable");
            }
            this.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder installedPackages(Integer installedPackages) {
            if (installedPackages == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "installedPackages");
            }
            this.installedPackages = installedPackages;
            return this;
        }
        @CustomType.Setter
        public Builder installedWindowsUpdates(Integer installedWindowsUpdates) {
            if (installedWindowsUpdates == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "installedWindowsUpdates");
            }
            this.installedWindowsUpdates = installedWindowsUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedByAutonomousLinux(Boolean isManagedByAutonomousLinux) {
            if (isManagedByAutonomousLinux == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "isManagedByAutonomousLinux");
            }
            this.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }
        @CustomType.Setter
        public Builder isManagementStation(Boolean isManagementStation) {
            if (isManagementStation == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "isManagementStation");
            }
            this.isManagementStation = isManagementStation;
            return this;
        }
        @CustomType.Setter
        public Builder isRebootRequired(Boolean isRebootRequired) {
            if (isRebootRequired == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "isRebootRequired");
            }
            this.isRebootRequired = isRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder kspliceEffectiveKernelVersion(String kspliceEffectiveKernelVersion) {
            if (kspliceEffectiveKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "kspliceEffectiveKernelVersion");
            }
            this.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleEnvironments(List<GetManagedInstanceLifecycleEnvironment> lifecycleEnvironments) {
            if (lifecycleEnvironments == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "lifecycleEnvironments");
            }
            this.lifecycleEnvironments = lifecycleEnvironments;
            return this;
        }
        public Builder lifecycleEnvironments(GetManagedInstanceLifecycleEnvironment... lifecycleEnvironments) {
            return lifecycleEnvironments(List.of(lifecycleEnvironments));
        }
        @CustomType.Setter
        public Builder lifecycleStages(List<GetManagedInstanceLifecycleStage> lifecycleStages) {
            if (lifecycleStages == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "lifecycleStages");
            }
            this.lifecycleStages = lifecycleStages;
            return this;
        }
        public Builder lifecycleStages(GetManagedInstanceLifecycleStage... lifecycleStages) {
            return lifecycleStages(List.of(lifecycleStages));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroups(List<GetManagedInstanceManagedInstanceGroup> managedInstanceGroups) {
            if (managedInstanceGroups == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "managedInstanceGroups");
            }
            this.managedInstanceGroups = managedInstanceGroups;
            return this;
        }
        public Builder managedInstanceGroups(GetManagedInstanceManagedInstanceGroup... managedInstanceGroups) {
            return managedInstanceGroups(List.of(managedInstanceGroups));
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTopicId(String notificationTopicId) {
            if (notificationTopicId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "notificationTopicId");
            }
            this.notificationTopicId = notificationTopicId;
            return this;
        }
        @CustomType.Setter
        public Builder osFamily(String osFamily) {
            if (osFamily == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "osFamily");
            }
            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder osKernelVersion(String osKernelVersion) {
            if (osKernelVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "osKernelVersion");
            }
            this.osKernelVersion = osKernelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder otherUpdatesAvailable(Integer otherUpdatesAvailable) {
            if (otherUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "otherUpdatesAvailable");
            }
            this.otherUpdatesAvailable = otherUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder primaryManagementStationId(String primaryManagementStationId) {
            if (primaryManagementStationId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "primaryManagementStationId");
            }
            this.primaryManagementStationId = primaryManagementStationId;
            return this;
        }
        @CustomType.Setter
        public Builder profile(String profile) {
            if (profile == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "profile");
            }
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledJobCount(Integer scheduledJobCount) {
            if (scheduledJobCount == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "scheduledJobCount");
            }
            this.scheduledJobCount = scheduledJobCount;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryManagementStationId(String secondaryManagementStationId) {
            if (secondaryManagementStationId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "secondaryManagementStationId");
            }
            this.secondaryManagementStationId = secondaryManagementStationId;
            return this;
        }
        @CustomType.Setter
        public Builder securityUpdatesAvailable(Integer securityUpdatesAvailable) {
            if (securityUpdatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "securityUpdatesAvailable");
            }
            this.securityUpdatesAvailable = securityUpdatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder softwareSources(List<GetManagedInstanceSoftwareSource> softwareSources) {
            if (softwareSources == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "softwareSources");
            }
            this.softwareSources = softwareSources;
            return this;
        }
        public Builder softwareSources(GetManagedInstanceSoftwareSource... softwareSources) {
            return softwareSources(List.of(softwareSources));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            if (tenancyId == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "tenancyId");
            }
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastBoot(String timeLastBoot) {
            if (timeLastBoot == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "timeLastBoot");
            }
            this.timeLastBoot = timeLastBoot;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastCheckin(String timeLastCheckin) {
            if (timeLastCheckin == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "timeLastCheckin");
            }
            this.timeLastCheckin = timeLastCheckin;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder updatesAvailable(Integer updatesAvailable) {
            if (updatesAvailable == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "updatesAvailable");
            }
            this.updatesAvailable = updatesAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestCount(Integer workRequestCount) {
            if (workRequestCount == null) {
              throw new MissingRequiredPropertyException("GetManagedInstanceResult", "workRequestCount");
            }
            this.workRequestCount = workRequestCount;
            return this;
        }
        public GetManagedInstanceResult build() {
            final var _resultValue = new GetManagedInstanceResult();
            _resultValue.architecture = architecture;
            _resultValue.autonomousSettings = autonomousSettings;
            _resultValue.bugUpdatesAvailable = bugUpdatesAvailable;
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enhancementUpdatesAvailable = enhancementUpdatesAvailable;
            _resultValue.id = id;
            _resultValue.installedPackages = installedPackages;
            _resultValue.installedWindowsUpdates = installedWindowsUpdates;
            _resultValue.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            _resultValue.isManagementStation = isManagementStation;
            _resultValue.isRebootRequired = isRebootRequired;
            _resultValue.kspliceEffectiveKernelVersion = kspliceEffectiveKernelVersion;
            _resultValue.lifecycleEnvironments = lifecycleEnvironments;
            _resultValue.lifecycleStages = lifecycleStages;
            _resultValue.location = location;
            _resultValue.managedInstanceGroups = managedInstanceGroups;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.notificationTopicId = notificationTopicId;
            _resultValue.osFamily = osFamily;
            _resultValue.osKernelVersion = osKernelVersion;
            _resultValue.osName = osName;
            _resultValue.osVersion = osVersion;
            _resultValue.otherUpdatesAvailable = otherUpdatesAvailable;
            _resultValue.primaryManagementStationId = primaryManagementStationId;
            _resultValue.profile = profile;
            _resultValue.scheduledJobCount = scheduledJobCount;
            _resultValue.secondaryManagementStationId = secondaryManagementStationId;
            _resultValue.securityUpdatesAvailable = securityUpdatesAvailable;
            _resultValue.softwareSources = softwareSources;
            _resultValue.status = status;
            _resultValue.tenancyId = tenancyId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastBoot = timeLastBoot;
            _resultValue.timeLastCheckin = timeLastCheckin;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.updatesAvailable = updatesAvailable;
            _resultValue.workRequestCount = workRequestCount;
            return _resultValue;
        }
    }
}
