// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstancesFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetManagedInstancesManagedInstanceCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedInstancesResult {
    private @Nullable List<String> advisoryNames;
    /**
     * @return The version of osmh-agent running on the managed instance
     * 
     */
    private @Nullable String agentVersion;
    private @Nullable List<String> archTypes;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the managed instance.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable String displayNameContains;
    /**
     * @return Software source name.
     * 
     */
    private @Nullable List<String> displayNames;
    private @Nullable List<GetManagedInstancesFilter> filters;
    private @Nullable String group;
    private @Nullable String groupNotEqualTo;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isAttachedToGroupOrLifecycleStage;
    /**
     * @return Indicates whether the Autonomous Linux service manages the instance.
     * 
     */
    private @Nullable Boolean isManagedByAutonomousLinux;
    /**
     * @return Indicates whether this managed instance is acting as an on-premises management station.
     * 
     */
    private @Nullable Boolean isManagementStation;
    private @Nullable Boolean isProfileAttached;
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    private @Nullable Boolean isRebootRequired;
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    private @Nullable String lifecycleEnvironment;
    private @Nullable String lifecycleEnvironmentNotEqualTo;
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    private @Nullable String lifecycleStage;
    private @Nullable String lifecycleStageNotEqualTo;
    private @Nullable List<String> locationNotEqualTos;
    /**
     * @return The location of the managed instance.
     * 
     */
    private @Nullable List<String> locations;
    /**
     * @return The list of managed_instance_collection.
     * 
     */
    private List<GetManagedInstancesManagedInstanceCollection> managedInstanceCollections;
    private @Nullable String managedInstanceId;
    private @Nullable List<String> managementStationNotEqualTos;
    private @Nullable List<String> managementStations;
    /**
     * @return The operating system type of the managed instance.
     * 
     */
    private @Nullable List<String> osFamilies;
    private @Nullable List<String> profileNotEqualTos;
    /**
     * @return The profile that was used to register this instance with the service.
     * 
     */
    private @Nullable List<String> profiles;
    private @Nullable String softwareSourceId;
    /**
     * @return Current status of the managed instance.
     * 
     */
    private @Nullable List<String> statuses;

    private GetManagedInstancesResult() {}
    public List<String> advisoryNames() {
        return this.advisoryNames == null ? List.of() : this.advisoryNames;
    }
    /**
     * @return The version of osmh-agent running on the managed instance
     * 
     */
    public Optional<String> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }
    public List<String> archTypes() {
        return this.archTypes == null ? List.of() : this.archTypes;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the managed instance.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    /**
     * @return Software source name.
     * 
     */
    public List<String> displayNames() {
        return this.displayNames == null ? List.of() : this.displayNames;
    }
    public List<GetManagedInstancesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }
    public Optional<String> groupNotEqualTo() {
        return Optional.ofNullable(this.groupNotEqualTo);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isAttachedToGroupOrLifecycleStage() {
        return Optional.ofNullable(this.isAttachedToGroupOrLifecycleStage);
    }
    /**
     * @return Indicates whether the Autonomous Linux service manages the instance.
     * 
     */
    public Optional<Boolean> isManagedByAutonomousLinux() {
        return Optional.ofNullable(this.isManagedByAutonomousLinux);
    }
    /**
     * @return Indicates whether this managed instance is acting as an on-premises management station.
     * 
     */
    public Optional<Boolean> isManagementStation() {
        return Optional.ofNullable(this.isManagementStation);
    }
    public Optional<Boolean> isProfileAttached() {
        return Optional.ofNullable(this.isProfileAttached);
    }
    /**
     * @return Indicates whether a reboot is required to complete installation of updates.
     * 
     */
    public Optional<Boolean> isRebootRequired() {
        return Optional.ofNullable(this.isRebootRequired);
    }
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    public Optional<String> lifecycleEnvironment() {
        return Optional.ofNullable(this.lifecycleEnvironment);
    }
    public Optional<String> lifecycleEnvironmentNotEqualTo() {
        return Optional.ofNullable(this.lifecycleEnvironmentNotEqualTo);
    }
    /**
     * @return Id and name of a resource to simplify the display for the user.
     * 
     */
    public Optional<String> lifecycleStage() {
        return Optional.ofNullable(this.lifecycleStage);
    }
    public Optional<String> lifecycleStageNotEqualTo() {
        return Optional.ofNullable(this.lifecycleStageNotEqualTo);
    }
    public List<String> locationNotEqualTos() {
        return this.locationNotEqualTos == null ? List.of() : this.locationNotEqualTos;
    }
    /**
     * @return The location of the managed instance.
     * 
     */
    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }
    /**
     * @return The list of managed_instance_collection.
     * 
     */
    public List<GetManagedInstancesManagedInstanceCollection> managedInstanceCollections() {
        return this.managedInstanceCollections;
    }
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    public List<String> managementStationNotEqualTos() {
        return this.managementStationNotEqualTos == null ? List.of() : this.managementStationNotEqualTos;
    }
    public List<String> managementStations() {
        return this.managementStations == null ? List.of() : this.managementStations;
    }
    /**
     * @return The operating system type of the managed instance.
     * 
     */
    public List<String> osFamilies() {
        return this.osFamilies == null ? List.of() : this.osFamilies;
    }
    public List<String> profileNotEqualTos() {
        return this.profileNotEqualTos == null ? List.of() : this.profileNotEqualTos;
    }
    /**
     * @return The profile that was used to register this instance with the service.
     * 
     */
    public List<String> profiles() {
        return this.profiles == null ? List.of() : this.profiles;
    }
    public Optional<String> softwareSourceId() {
        return Optional.ofNullable(this.softwareSourceId);
    }
    /**
     * @return Current status of the managed instance.
     * 
     */
    public List<String> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstancesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> advisoryNames;
        private @Nullable String agentVersion;
        private @Nullable List<String> archTypes;
        private @Nullable String compartmentId;
        private @Nullable String displayNameContains;
        private @Nullable List<String> displayNames;
        private @Nullable List<GetManagedInstancesFilter> filters;
        private @Nullable String group;
        private @Nullable String groupNotEqualTo;
        private String id;
        private @Nullable Boolean isAttachedToGroupOrLifecycleStage;
        private @Nullable Boolean isManagedByAutonomousLinux;
        private @Nullable Boolean isManagementStation;
        private @Nullable Boolean isProfileAttached;
        private @Nullable Boolean isRebootRequired;
        private @Nullable String lifecycleEnvironment;
        private @Nullable String lifecycleEnvironmentNotEqualTo;
        private @Nullable String lifecycleStage;
        private @Nullable String lifecycleStageNotEqualTo;
        private @Nullable List<String> locationNotEqualTos;
        private @Nullable List<String> locations;
        private List<GetManagedInstancesManagedInstanceCollection> managedInstanceCollections;
        private @Nullable String managedInstanceId;
        private @Nullable List<String> managementStationNotEqualTos;
        private @Nullable List<String> managementStations;
        private @Nullable List<String> osFamilies;
        private @Nullable List<String> profileNotEqualTos;
        private @Nullable List<String> profiles;
        private @Nullable String softwareSourceId;
        private @Nullable List<String> statuses;
        public Builder() {}
        public Builder(GetManagedInstancesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisoryNames = defaults.advisoryNames;
    	      this.agentVersion = defaults.agentVersion;
    	      this.archTypes = defaults.archTypes;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.displayNames = defaults.displayNames;
    	      this.filters = defaults.filters;
    	      this.group = defaults.group;
    	      this.groupNotEqualTo = defaults.groupNotEqualTo;
    	      this.id = defaults.id;
    	      this.isAttachedToGroupOrLifecycleStage = defaults.isAttachedToGroupOrLifecycleStage;
    	      this.isManagedByAutonomousLinux = defaults.isManagedByAutonomousLinux;
    	      this.isManagementStation = defaults.isManagementStation;
    	      this.isProfileAttached = defaults.isProfileAttached;
    	      this.isRebootRequired = defaults.isRebootRequired;
    	      this.lifecycleEnvironment = defaults.lifecycleEnvironment;
    	      this.lifecycleEnvironmentNotEqualTo = defaults.lifecycleEnvironmentNotEqualTo;
    	      this.lifecycleStage = defaults.lifecycleStage;
    	      this.lifecycleStageNotEqualTo = defaults.lifecycleStageNotEqualTo;
    	      this.locationNotEqualTos = defaults.locationNotEqualTos;
    	      this.locations = defaults.locations;
    	      this.managedInstanceCollections = defaults.managedInstanceCollections;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.managementStationNotEqualTos = defaults.managementStationNotEqualTos;
    	      this.managementStations = defaults.managementStations;
    	      this.osFamilies = defaults.osFamilies;
    	      this.profileNotEqualTos = defaults.profileNotEqualTos;
    	      this.profiles = defaults.profiles;
    	      this.softwareSourceId = defaults.softwareSourceId;
    	      this.statuses = defaults.statuses;
        }

        @CustomType.Setter
        public Builder advisoryNames(@Nullable List<String> advisoryNames) {

            this.advisoryNames = advisoryNames;
            return this;
        }
        public Builder advisoryNames(String... advisoryNames) {
            return advisoryNames(List.of(advisoryNames));
        }
        @CustomType.Setter
        public Builder agentVersion(@Nullable String agentVersion) {

            this.agentVersion = agentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder archTypes(@Nullable List<String> archTypes) {

            this.archTypes = archTypes;
            return this;
        }
        public Builder archTypes(String... archTypes) {
            return archTypes(List.of(archTypes));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder displayNames(@Nullable List<String> displayNames) {

            this.displayNames = displayNames;
            return this;
        }
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedInstancesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedInstancesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder group(@Nullable String group) {

            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder groupNotEqualTo(@Nullable String groupNotEqualTo) {

            this.groupNotEqualTo = groupNotEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAttachedToGroupOrLifecycleStage(@Nullable Boolean isAttachedToGroupOrLifecycleStage) {

            this.isAttachedToGroupOrLifecycleStage = isAttachedToGroupOrLifecycleStage;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedByAutonomousLinux(@Nullable Boolean isManagedByAutonomousLinux) {

            this.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }
        @CustomType.Setter
        public Builder isManagementStation(@Nullable Boolean isManagementStation) {

            this.isManagementStation = isManagementStation;
            return this;
        }
        @CustomType.Setter
        public Builder isProfileAttached(@Nullable Boolean isProfileAttached) {

            this.isProfileAttached = isProfileAttached;
            return this;
        }
        @CustomType.Setter
        public Builder isRebootRequired(@Nullable Boolean isRebootRequired) {

            this.isRebootRequired = isRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleEnvironment(@Nullable String lifecycleEnvironment) {

            this.lifecycleEnvironment = lifecycleEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleEnvironmentNotEqualTo(@Nullable String lifecycleEnvironmentNotEqualTo) {

            this.lifecycleEnvironmentNotEqualTo = lifecycleEnvironmentNotEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStage(@Nullable String lifecycleStage) {

            this.lifecycleStage = lifecycleStage;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStageNotEqualTo(@Nullable String lifecycleStageNotEqualTo) {

            this.lifecycleStageNotEqualTo = lifecycleStageNotEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder locationNotEqualTos(@Nullable List<String> locationNotEqualTos) {

            this.locationNotEqualTos = locationNotEqualTos;
            return this;
        }
        public Builder locationNotEqualTos(String... locationNotEqualTos) {
            return locationNotEqualTos(List.of(locationNotEqualTos));
        }
        @CustomType.Setter
        public Builder locations(@Nullable List<String> locations) {

            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder managedInstanceCollections(List<GetManagedInstancesManagedInstanceCollection> managedInstanceCollections) {
            if (managedInstanceCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedInstancesResult", "managedInstanceCollections");
            }
            this.managedInstanceCollections = managedInstanceCollections;
            return this;
        }
        public Builder managedInstanceCollections(GetManagedInstancesManagedInstanceCollection... managedInstanceCollections) {
            return managedInstanceCollections(List.of(managedInstanceCollections));
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {

            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder managementStationNotEqualTos(@Nullable List<String> managementStationNotEqualTos) {

            this.managementStationNotEqualTos = managementStationNotEqualTos;
            return this;
        }
        public Builder managementStationNotEqualTos(String... managementStationNotEqualTos) {
            return managementStationNotEqualTos(List.of(managementStationNotEqualTos));
        }
        @CustomType.Setter
        public Builder managementStations(@Nullable List<String> managementStations) {

            this.managementStations = managementStations;
            return this;
        }
        public Builder managementStations(String... managementStations) {
            return managementStations(List.of(managementStations));
        }
        @CustomType.Setter
        public Builder osFamilies(@Nullable List<String> osFamilies) {

            this.osFamilies = osFamilies;
            return this;
        }
        public Builder osFamilies(String... osFamilies) {
            return osFamilies(List.of(osFamilies));
        }
        @CustomType.Setter
        public Builder profileNotEqualTos(@Nullable List<String> profileNotEqualTos) {

            this.profileNotEqualTos = profileNotEqualTos;
            return this;
        }
        public Builder profileNotEqualTos(String... profileNotEqualTos) {
            return profileNotEqualTos(List.of(profileNotEqualTos));
        }
        @CustomType.Setter
        public Builder profiles(@Nullable List<String> profiles) {

            this.profiles = profiles;
            return this;
        }
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder softwareSourceId(@Nullable String softwareSourceId) {

            this.softwareSourceId = softwareSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<String> statuses) {

            this.statuses = statuses;
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        public GetManagedInstancesResult build() {
            final var _resultValue = new GetManagedInstancesResult();
            _resultValue.advisoryNames = advisoryNames;
            _resultValue.agentVersion = agentVersion;
            _resultValue.archTypes = archTypes;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.displayNames = displayNames;
            _resultValue.filters = filters;
            _resultValue.group = group;
            _resultValue.groupNotEqualTo = groupNotEqualTo;
            _resultValue.id = id;
            _resultValue.isAttachedToGroupOrLifecycleStage = isAttachedToGroupOrLifecycleStage;
            _resultValue.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            _resultValue.isManagementStation = isManagementStation;
            _resultValue.isProfileAttached = isProfileAttached;
            _resultValue.isRebootRequired = isRebootRequired;
            _resultValue.lifecycleEnvironment = lifecycleEnvironment;
            _resultValue.lifecycleEnvironmentNotEqualTo = lifecycleEnvironmentNotEqualTo;
            _resultValue.lifecycleStage = lifecycleStage;
            _resultValue.lifecycleStageNotEqualTo = lifecycleStageNotEqualTo;
            _resultValue.locationNotEqualTos = locationNotEqualTos;
            _resultValue.locations = locations;
            _resultValue.managedInstanceCollections = managedInstanceCollections;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.managementStationNotEqualTos = managementStationNotEqualTos;
            _resultValue.managementStations = managementStations;
            _resultValue.osFamilies = osFamilies;
            _resultValue.profileNotEqualTos = profileNotEqualTos;
            _resultValue.profiles = profiles;
            _resultValue.softwareSourceId = softwareSourceId;
            _resultValue.statuses = statuses;
            return _resultValue;
        }
    }
}
