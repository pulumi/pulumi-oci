// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagementStationMirror {
    /**
     * @return Path to the data volume on the management station where software source mirrors are stored.
     * 
     */
    private String directory;
    /**
     * @return When enabled, the SSL certificate is verified whenever an instance installs or updates a package from a software source that is mirrored on the management station.
     * 
     */
    private Boolean isSslverifyEnabled;
    /**
     * @return Listening port used for the proxy.
     * 
     */
    private String port;
    /**
     * @return Path to the SSL cerfificate.
     * 
     */
    private String sslcert;
    /**
     * @return Default mirror listening port for https.
     * 
     */
    private String sslport;

    private GetManagementStationMirror() {}
    /**
     * @return Path to the data volume on the management station where software source mirrors are stored.
     * 
     */
    public String directory() {
        return this.directory;
    }
    /**
     * @return When enabled, the SSL certificate is verified whenever an instance installs or updates a package from a software source that is mirrored on the management station.
     * 
     */
    public Boolean isSslverifyEnabled() {
        return this.isSslverifyEnabled;
    }
    /**
     * @return Listening port used for the proxy.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return Path to the SSL cerfificate.
     * 
     */
    public String sslcert() {
        return this.sslcert;
    }
    /**
     * @return Default mirror listening port for https.
     * 
     */
    public String sslport() {
        return this.sslport;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementStationMirror defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String directory;
        private Boolean isSslverifyEnabled;
        private String port;
        private String sslcert;
        private String sslport;
        public Builder() {}
        public Builder(GetManagementStationMirror defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directory = defaults.directory;
    	      this.isSslverifyEnabled = defaults.isSslverifyEnabled;
    	      this.port = defaults.port;
    	      this.sslcert = defaults.sslcert;
    	      this.sslport = defaults.sslport;
        }

        @CustomType.Setter
        public Builder directory(String directory) {
            if (directory == null) {
              throw new MissingRequiredPropertyException("GetManagementStationMirror", "directory");
            }
            this.directory = directory;
            return this;
        }
        @CustomType.Setter
        public Builder isSslverifyEnabled(Boolean isSslverifyEnabled) {
            if (isSslverifyEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagementStationMirror", "isSslverifyEnabled");
            }
            this.isSslverifyEnabled = isSslverifyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetManagementStationMirror", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder sslcert(String sslcert) {
            if (sslcert == null) {
              throw new MissingRequiredPropertyException("GetManagementStationMirror", "sslcert");
            }
            this.sslcert = sslcert;
            return this;
        }
        @CustomType.Setter
        public Builder sslport(String sslport) {
            if (sslport == null) {
              throw new MissingRequiredPropertyException("GetManagementStationMirror", "sslport");
            }
            this.sslport = sslport;
            return this;
        }
        public GetManagementStationMirror build() {
            final var _resultValue = new GetManagementStationMirror();
            _resultValue.directory = directory;
            _resultValue.isSslverifyEnabled = isSslverifyEnabled;
            _resultValue.port = port;
            _resultValue.sslcert = sslcert;
            _resultValue.sslport = sslport;
            return _resultValue;
        }
    }
}
