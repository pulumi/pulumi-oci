// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationHealth;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationMirror;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationMirrorSyncStatus;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationProxy;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagementStationResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the management station.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Explanation of the health status.
     * 
     */
    private String description;
    /**
     * @return A user-friendly name for the management station.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Overall health information of the management station.
     * 
     */
    private List<GetManagementStationHealth> healths;
    /**
     * @return Hostname of the management station.
     * 
     */
    private String hostname;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station.
     * 
     */
    private String id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the instance that is acting as the management station.
     * 
     */
    private String managedInstanceId;
    private String managementStationId;
    /**
     * @return A decimal number representing the amount of mirror capacity used by the sync.
     * 
     */
    private Integer mirrorCapacity;
    /**
     * @return Status summary of the mirror sync.
     * 
     */
    private List<GetManagementStationMirrorSyncStatus> mirrorSyncStatuses;
    /**
     * @return Mirror information used for the management station configuration.
     * 
     */
    private List<GetManagementStationMirror> mirrors;
    /**
     * @return A decimal number representing the progress of the current mirror sync.
     * 
     */
    private Integer overallPercentage;
    /**
     * @return Current state of the mirror sync for the management station.
     * 
     */
    private String overallState;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile used for the management station.
     * 
     */
    private String profileId;
    /**
     * @return Proxy information used for the management station configuration.
     * 
     */
    private List<GetManagementStationProxy> proxies;
    private Integer refreshTrigger;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job for the mirror sync.
     * 
     */
    private String scheduledJobId;
    /**
     * @return The current state of the management station.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The number of software sources that the station is mirroring.
     * 
     */
    private Integer totalMirrors;

    private GetManagementStationResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the management station.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Explanation of the health status.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name for the management station.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Overall health information of the management station.
     * 
     */
    public List<GetManagementStationHealth> healths() {
        return this.healths;
    }
    /**
     * @return Hostname of the management station.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the instance that is acting as the management station.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    public String managementStationId() {
        return this.managementStationId;
    }
    /**
     * @return A decimal number representing the amount of mirror capacity used by the sync.
     * 
     */
    public Integer mirrorCapacity() {
        return this.mirrorCapacity;
    }
    /**
     * @return Status summary of the mirror sync.
     * 
     */
    public List<GetManagementStationMirrorSyncStatus> mirrorSyncStatuses() {
        return this.mirrorSyncStatuses;
    }
    /**
     * @return Mirror information used for the management station configuration.
     * 
     */
    public List<GetManagementStationMirror> mirrors() {
        return this.mirrors;
    }
    /**
     * @return A decimal number representing the progress of the current mirror sync.
     * 
     */
    public Integer overallPercentage() {
        return this.overallPercentage;
    }
    /**
     * @return Current state of the mirror sync for the management station.
     * 
     */
    public String overallState() {
        return this.overallState;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile used for the management station.
     * 
     */
    public String profileId() {
        return this.profileId;
    }
    /**
     * @return Proxy information used for the management station configuration.
     * 
     */
    public List<GetManagementStationProxy> proxies() {
        return this.proxies;
    }
    public Integer refreshTrigger() {
        return this.refreshTrigger;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job for the mirror sync.
     * 
     */
    public String scheduledJobId() {
        return this.scheduledJobId;
    }
    /**
     * @return The current state of the management station.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The number of software sources that the station is mirroring.
     * 
     */
    public Integer totalMirrors() {
        return this.totalMirrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementStationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private List<GetManagementStationHealth> healths;
        private String hostname;
        private String id;
        private String managedInstanceId;
        private String managementStationId;
        private Integer mirrorCapacity;
        private List<GetManagementStationMirrorSyncStatus> mirrorSyncStatuses;
        private List<GetManagementStationMirror> mirrors;
        private Integer overallPercentage;
        private String overallState;
        private String profileId;
        private List<GetManagementStationProxy> proxies;
        private Integer refreshTrigger;
        private String scheduledJobId;
        private String state;
        private Map<String,Object> systemTags;
        private Integer totalMirrors;
        public Builder() {}
        public Builder(GetManagementStationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.healths = defaults.healths;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.managementStationId = defaults.managementStationId;
    	      this.mirrorCapacity = defaults.mirrorCapacity;
    	      this.mirrorSyncStatuses = defaults.mirrorSyncStatuses;
    	      this.mirrors = defaults.mirrors;
    	      this.overallPercentage = defaults.overallPercentage;
    	      this.overallState = defaults.overallState;
    	      this.profileId = defaults.profileId;
    	      this.proxies = defaults.proxies;
    	      this.refreshTrigger = defaults.refreshTrigger;
    	      this.scheduledJobId = defaults.scheduledJobId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.totalMirrors = defaults.totalMirrors;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder healths(List<GetManagementStationHealth> healths) {
            if (healths == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "healths");
            }
            this.healths = healths;
            return this;
        }
        public Builder healths(GetManagementStationHealth... healths) {
            return healths(List.of(healths));
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder managementStationId(String managementStationId) {
            if (managementStationId == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "managementStationId");
            }
            this.managementStationId = managementStationId;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorCapacity(Integer mirrorCapacity) {
            if (mirrorCapacity == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "mirrorCapacity");
            }
            this.mirrorCapacity = mirrorCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder mirrorSyncStatuses(List<GetManagementStationMirrorSyncStatus> mirrorSyncStatuses) {
            if (mirrorSyncStatuses == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "mirrorSyncStatuses");
            }
            this.mirrorSyncStatuses = mirrorSyncStatuses;
            return this;
        }
        public Builder mirrorSyncStatuses(GetManagementStationMirrorSyncStatus... mirrorSyncStatuses) {
            return mirrorSyncStatuses(List.of(mirrorSyncStatuses));
        }
        @CustomType.Setter
        public Builder mirrors(List<GetManagementStationMirror> mirrors) {
            if (mirrors == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "mirrors");
            }
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetManagementStationMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder overallPercentage(Integer overallPercentage) {
            if (overallPercentage == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "overallPercentage");
            }
            this.overallPercentage = overallPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder overallState(String overallState) {
            if (overallState == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "overallState");
            }
            this.overallState = overallState;
            return this;
        }
        @CustomType.Setter
        public Builder profileId(String profileId) {
            if (profileId == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "profileId");
            }
            this.profileId = profileId;
            return this;
        }
        @CustomType.Setter
        public Builder proxies(List<GetManagementStationProxy> proxies) {
            if (proxies == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "proxies");
            }
            this.proxies = proxies;
            return this;
        }
        public Builder proxies(GetManagementStationProxy... proxies) {
            return proxies(List.of(proxies));
        }
        @CustomType.Setter
        public Builder refreshTrigger(Integer refreshTrigger) {
            if (refreshTrigger == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "refreshTrigger");
            }
            this.refreshTrigger = refreshTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledJobId(String scheduledJobId) {
            if (scheduledJobId == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "scheduledJobId");
            }
            this.scheduledJobId = scheduledJobId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder totalMirrors(Integer totalMirrors) {
            if (totalMirrors == null) {
              throw new MissingRequiredPropertyException("GetManagementStationResult", "totalMirrors");
            }
            this.totalMirrors = totalMirrors;
            return this;
        }
        public GetManagementStationResult build() {
            final var _resultValue = new GetManagementStationResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.healths = healths;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.managementStationId = managementStationId;
            _resultValue.mirrorCapacity = mirrorCapacity;
            _resultValue.mirrorSyncStatuses = mirrorSyncStatuses;
            _resultValue.mirrors = mirrors;
            _resultValue.overallPercentage = overallPercentage;
            _resultValue.overallState = overallState;
            _resultValue.profileId = profileId;
            _resultValue.proxies = proxies;
            _resultValue.refreshTrigger = refreshTrigger;
            _resultValue.scheduledJobId = scheduledJobId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.totalMirrors = totalMirrors;
            return _resultValue;
        }
    }
}
