// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationsFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetManagementStationsManagementStationCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagementStationsResult {
    /**
     * @return The OCID of the tenancy containing the Management Station.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return ManagementStation name
     * 
     */
    private @Nullable String displayName;
    private @Nullable String displayNameContains;
    private @Nullable List<GetManagementStationsFilter> filters;
    /**
     * @return OCID for the ManagementStation config
     * 
     */
    private @Nullable String id;
    /**
     * @return OCID for the Instance associated with the Management Station.
     * 
     */
    private @Nullable String managedInstanceId;
    /**
     * @return The list of management_station_collection.
     * 
     */
    private @Nullable List<GetManagementStationsManagementStationCollection> managementStationCollections;
    /**
     * @return The current state of the Management Station config.
     * 
     */
    private @Nullable String state;

    private GetManagementStationsResult() {}
    /**
     * @return The OCID of the tenancy containing the Management Station.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return ManagementStation name
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    public List<GetManagementStationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return OCID for the ManagementStation config
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return OCID for the Instance associated with the Management Station.
     * 
     */
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    /**
     * @return The list of management_station_collection.
     * 
     */
    public List<GetManagementStationsManagementStationCollection> managementStationCollections() {
        return this.managementStationCollections == null ? List.of() : this.managementStationCollections;
    }
    /**
     * @return The current state of the Management Station config.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementStationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String displayName;
        private @Nullable String displayNameContains;
        private @Nullable List<GetManagementStationsFilter> filters;
        private @Nullable String id;
        private @Nullable String managedInstanceId;
        private @Nullable List<GetManagementStationsManagementStationCollection> managementStationCollections;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetManagementStationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.managementStationCollections = defaults.managementStationCollections;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {
            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagementStationsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagementStationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder managementStationCollections(@Nullable List<GetManagementStationsManagementStationCollection> managementStationCollections) {
            this.managementStationCollections = managementStationCollections;
            return this;
        }
        public Builder managementStationCollections(GetManagementStationsManagementStationCollection... managementStationCollections) {
            return managementStationCollections(List.of(managementStationCollections));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetManagementStationsResult build() {
            final var o = new GetManagementStationsResult();
            o.compartmentId = compartmentId;
            o.displayName = displayName;
            o.displayNameContains = displayNameContains;
            o.filters = filters;
            o.id = id;
            o.managedInstanceId = managedInstanceId;
            o.managementStationCollections = managementStationCollections;
            o.state = state;
            return o;
        }
    }
}
