// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetProfilesFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetProfilesProfileCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProfilesResult {
    /**
     * @return The architecture type.
     * 
     */
    private @Nullable String archType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the registration profile.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable String displayNameContains;
    /**
     * @return Software source name.
     * 
     */
    private @Nullable List<String> displayNames;
    private @Nullable List<GetProfilesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if the profile is set as the default. There is exactly one default profile for a specified architecture, OS family, registration type, and vendor. When registering an instance with the corresonding characteristics, the default profile is used, unless another profile is specified.
     * 
     */
    private @Nullable Boolean isDefaultProfile;
    /**
     * @return Indicates if the profile was created by the service. OS Management Hub provides a limited set of standardized profiles that can be used to register Autonomous Linux or Windows instances.
     * 
     */
    private @Nullable Boolean isServiceProvidedProfile;
    private @Nullable List<String> managementStationNotEqualTos;
    private @Nullable List<String> managementStations;
    /**
     * @return The operating system family.
     * 
     */
    private @Nullable String osFamily;
    /**
     * @return The list of profile_collection.
     * 
     */
    private List<GetProfilesProfileCollection> profileCollections;
    private @Nullable String profileId;
    /**
     * @return The type of profile.
     * 
     */
    private @Nullable List<String> profileTypes;
    /**
     * @return The version of the profile. The version is automatically incremented each time the profiled is edited.
     * 
     */
    private @Nullable String profileVersion;
    /**
     * @return The type of instance to register.
     * 
     */
    private @Nullable List<String> registrationTypes;
    /**
     * @return The current state of the registration profile.
     * 
     */
    private @Nullable String state;
    /**
     * @return The vendor of the operating system for the instance.
     * 
     */
    private @Nullable String vendorName;

    private GetProfilesResult() {}
    /**
     * @return The architecture type.
     * 
     */
    public Optional<String> archType() {
        return Optional.ofNullable(this.archType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the registration profile.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    /**
     * @return Software source name.
     * 
     */
    public List<String> displayNames() {
        return this.displayNames == null ? List.of() : this.displayNames;
    }
    public List<GetProfilesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the profile is set as the default. There is exactly one default profile for a specified architecture, OS family, registration type, and vendor. When registering an instance with the corresonding characteristics, the default profile is used, unless another profile is specified.
     * 
     */
    public Optional<Boolean> isDefaultProfile() {
        return Optional.ofNullable(this.isDefaultProfile);
    }
    /**
     * @return Indicates if the profile was created by the service. OS Management Hub provides a limited set of standardized profiles that can be used to register Autonomous Linux or Windows instances.
     * 
     */
    public Optional<Boolean> isServiceProvidedProfile() {
        return Optional.ofNullable(this.isServiceProvidedProfile);
    }
    public List<String> managementStationNotEqualTos() {
        return this.managementStationNotEqualTos == null ? List.of() : this.managementStationNotEqualTos;
    }
    public List<String> managementStations() {
        return this.managementStations == null ? List.of() : this.managementStations;
    }
    /**
     * @return The operating system family.
     * 
     */
    public Optional<String> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }
    /**
     * @return The list of profile_collection.
     * 
     */
    public List<GetProfilesProfileCollection> profileCollections() {
        return this.profileCollections;
    }
    public Optional<String> profileId() {
        return Optional.ofNullable(this.profileId);
    }
    /**
     * @return The type of profile.
     * 
     */
    public List<String> profileTypes() {
        return this.profileTypes == null ? List.of() : this.profileTypes;
    }
    /**
     * @return The version of the profile. The version is automatically incremented each time the profiled is edited.
     * 
     */
    public Optional<String> profileVersion() {
        return Optional.ofNullable(this.profileVersion);
    }
    /**
     * @return The type of instance to register.
     * 
     */
    public List<String> registrationTypes() {
        return this.registrationTypes == null ? List.of() : this.registrationTypes;
    }
    /**
     * @return The current state of the registration profile.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The vendor of the operating system for the instance.
     * 
     */
    public Optional<String> vendorName() {
        return Optional.ofNullable(this.vendorName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProfilesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String archType;
        private @Nullable String compartmentId;
        private @Nullable String displayNameContains;
        private @Nullable List<String> displayNames;
        private @Nullable List<GetProfilesFilter> filters;
        private String id;
        private @Nullable Boolean isDefaultProfile;
        private @Nullable Boolean isServiceProvidedProfile;
        private @Nullable List<String> managementStationNotEqualTos;
        private @Nullable List<String> managementStations;
        private @Nullable String osFamily;
        private List<GetProfilesProfileCollection> profileCollections;
        private @Nullable String profileId;
        private @Nullable List<String> profileTypes;
        private @Nullable String profileVersion;
        private @Nullable List<String> registrationTypes;
        private @Nullable String state;
        private @Nullable String vendorName;
        public Builder() {}
        public Builder(GetProfilesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archType = defaults.archType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.displayNames = defaults.displayNames;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isDefaultProfile = defaults.isDefaultProfile;
    	      this.isServiceProvidedProfile = defaults.isServiceProvidedProfile;
    	      this.managementStationNotEqualTos = defaults.managementStationNotEqualTos;
    	      this.managementStations = defaults.managementStations;
    	      this.osFamily = defaults.osFamily;
    	      this.profileCollections = defaults.profileCollections;
    	      this.profileId = defaults.profileId;
    	      this.profileTypes = defaults.profileTypes;
    	      this.profileVersion = defaults.profileVersion;
    	      this.registrationTypes = defaults.registrationTypes;
    	      this.state = defaults.state;
    	      this.vendorName = defaults.vendorName;
        }

        @CustomType.Setter
        public Builder archType(@Nullable String archType) {

            this.archType = archType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder displayNames(@Nullable List<String> displayNames) {

            this.displayNames = displayNames;
            return this;
        }
        public Builder displayNames(String... displayNames) {
            return displayNames(List.of(displayNames));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetProfilesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetProfilesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProfilesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultProfile(@Nullable Boolean isDefaultProfile) {

            this.isDefaultProfile = isDefaultProfile;
            return this;
        }
        @CustomType.Setter
        public Builder isServiceProvidedProfile(@Nullable Boolean isServiceProvidedProfile) {

            this.isServiceProvidedProfile = isServiceProvidedProfile;
            return this;
        }
        @CustomType.Setter
        public Builder managementStationNotEqualTos(@Nullable List<String> managementStationNotEqualTos) {

            this.managementStationNotEqualTos = managementStationNotEqualTos;
            return this;
        }
        public Builder managementStationNotEqualTos(String... managementStationNotEqualTos) {
            return managementStationNotEqualTos(List.of(managementStationNotEqualTos));
        }
        @CustomType.Setter
        public Builder managementStations(@Nullable List<String> managementStations) {

            this.managementStations = managementStations;
            return this;
        }
        public Builder managementStations(String... managementStations) {
            return managementStations(List.of(managementStations));
        }
        @CustomType.Setter
        public Builder osFamily(@Nullable String osFamily) {

            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder profileCollections(List<GetProfilesProfileCollection> profileCollections) {
            if (profileCollections == null) {
              throw new MissingRequiredPropertyException("GetProfilesResult", "profileCollections");
            }
            this.profileCollections = profileCollections;
            return this;
        }
        public Builder profileCollections(GetProfilesProfileCollection... profileCollections) {
            return profileCollections(List.of(profileCollections));
        }
        @CustomType.Setter
        public Builder profileId(@Nullable String profileId) {

            this.profileId = profileId;
            return this;
        }
        @CustomType.Setter
        public Builder profileTypes(@Nullable List<String> profileTypes) {

            this.profileTypes = profileTypes;
            return this;
        }
        public Builder profileTypes(String... profileTypes) {
            return profileTypes(List.of(profileTypes));
        }
        @CustomType.Setter
        public Builder profileVersion(@Nullable String profileVersion) {

            this.profileVersion = profileVersion;
            return this;
        }
        @CustomType.Setter
        public Builder registrationTypes(@Nullable List<String> registrationTypes) {

            this.registrationTypes = registrationTypes;
            return this;
        }
        public Builder registrationTypes(String... registrationTypes) {
            return registrationTypes(List.of(registrationTypes));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vendorName(@Nullable String vendorName) {

            this.vendorName = vendorName;
            return this;
        }
        public GetProfilesResult build() {
            final var _resultValue = new GetProfilesResult();
            _resultValue.archType = archType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.displayNames = displayNames;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isDefaultProfile = isDefaultProfile;
            _resultValue.isServiceProvidedProfile = isServiceProvidedProfile;
            _resultValue.managementStationNotEqualTos = managementStationNotEqualTos;
            _resultValue.managementStations = managementStations;
            _resultValue.osFamily = osFamily;
            _resultValue.profileCollections = profileCollections;
            _resultValue.profileId = profileId;
            _resultValue.profileTypes = profileTypes;
            _resultValue.profileVersion = profileVersion;
            _resultValue.registrationTypes = registrationTypes;
            _resultValue.state = state;
            _resultValue.vendorName = vendorName;
            return _resultValue;
        }
    }
}
