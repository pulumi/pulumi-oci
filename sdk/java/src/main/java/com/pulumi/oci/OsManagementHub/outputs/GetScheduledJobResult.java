// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetScheduledJobOperation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetScheduledJobResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the scheduled job.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return User-specified description for the scheduled job.
     * 
     */
    private String description;
    /**
     * @return User-friendly name for the scheduled job.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job.
     * 
     */
    private String id;
    /**
     * @return Indicates whether this scheduled job is managed by the Autonomous Linux service.
     * 
     */
    private Boolean isManagedByAutonomousLinux;
    /**
     * @return Indicates if the schedule job has restricted update and deletion capabilities. For restricted scheduled jobs,  you can update only the timeNextExecution, recurringRule, and tags.
     * 
     */
    private Boolean isRestricted;
    /**
     * @return Indicates whether to apply the scheduled job to all compartments in the tenancy when managedCompartmentIds specifies the tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) (root compartment).
     * 
     */
    private Boolean isSubcompartmentIncluded;
    /**
     * @return The lifecycle stage [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceIds, managedInstanceGroupIds, and managedCompartmentIds.
     * 
     */
    private List<String> lifecycleStageIds;
    /**
     * @return The list of locations this scheduled job should operate on for a job targeting on compartments. (Empty list means apply to all locations). This can only be set when managedCompartmentIds is not empty.
     * 
     */
    private List<String> locations;
    /**
     * @return The compartment [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedInstanceGroupIds, and lifecycleStageIds.
     * 
     */
    private List<String> managedCompartmentIds;
    /**
     * @return The managed instance group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedCompartmentIds, and lifecycleStageIds.
     * 
     */
    private List<String> managedInstanceGroupIds;
    /**
     * @return The managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceGroupIds, managedCompartmentIds, and lifecycleStageIds.
     * 
     */
    private List<String> managedInstanceIds;
    /**
     * @return The list of operations this scheduled job needs to perform. A scheduled job supports only one operation type, unless it is one of the following:
     * * UPDATE_PACKAGES
     * * UPDATE_ALL
     * * UPDATE_SECURITY
     * * UPDATE_BUGFIX
     * * UPDATE_ENHANCEMENT
     * * UPDATE_OTHER
     * * UPDATE_KSPLICE_USERSPACE
     * * UPDATE_KSPLICE_KERNEL
     * 
     */
    private List<GetScheduledJobOperation> operations;
    /**
     * @return The frequency schedule for a recurring scheduled job.
     * 
     */
    private String recurringRule;
    /**
     * @return The amount of time in minutes to wait until retrying the scheduled job. If set, the service will automatically retry  a failed scheduled job after the interval. For example, you could set the interval to [2,5,10]. If the initial  execution of the job fails, the service waits 2 minutes and then retries. If that fails, the service waits 5 minutes  and then retries. If that fails, the service waits 10 minutes and then retries.
     * 
     */
    private List<Integer> retryIntervals;
    /**
     * @return The type of scheduling frequency for the job.
     * 
     */
    private String scheduleType;
    private String scheduledJobId;
    /**
     * @return The current state of the scheduled job.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time this scheduled job was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeCreated;
    /**
     * @return The time of the last execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeLastExecution;
    /**
     * @return The time of the next execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeNextExecution;
    /**
     * @return The time this scheduled job was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    private String timeUpdated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the work request that will be rerun.
     * 
     */
    private String workRequestId;
    /**
     * @return The list of work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this scheduled job.
     * 
     */
    private List<String> workRequestIds;

    private GetScheduledJobResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the scheduled job.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return User-specified description for the scheduled job.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return User-friendly name for the scheduled job.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether this scheduled job is managed by the Autonomous Linux service.
     * 
     */
    public Boolean isManagedByAutonomousLinux() {
        return this.isManagedByAutonomousLinux;
    }
    /**
     * @return Indicates if the schedule job has restricted update and deletion capabilities. For restricted scheduled jobs,  you can update only the timeNextExecution, recurringRule, and tags.
     * 
     */
    public Boolean isRestricted() {
        return this.isRestricted;
    }
    /**
     * @return Indicates whether to apply the scheduled job to all compartments in the tenancy when managedCompartmentIds specifies the tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) (root compartment).
     * 
     */
    public Boolean isSubcompartmentIncluded() {
        return this.isSubcompartmentIncluded;
    }
    /**
     * @return The lifecycle stage [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceIds, managedInstanceGroupIds, and managedCompartmentIds.
     * 
     */
    public List<String> lifecycleStageIds() {
        return this.lifecycleStageIds;
    }
    /**
     * @return The list of locations this scheduled job should operate on for a job targeting on compartments. (Empty list means apply to all locations). This can only be set when managedCompartmentIds is not empty.
     * 
     */
    public List<String> locations() {
        return this.locations;
    }
    /**
     * @return The compartment [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedInstanceGroupIds, and lifecycleStageIds.
     * 
     */
    public List<String> managedCompartmentIds() {
        return this.managedCompartmentIds;
    }
    /**
     * @return The managed instance group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedCompartmentIds, and lifecycleStageIds.
     * 
     */
    public List<String> managedInstanceGroupIds() {
        return this.managedInstanceGroupIds;
    }
    /**
     * @return The managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceGroupIds, managedCompartmentIds, and lifecycleStageIds.
     * 
     */
    public List<String> managedInstanceIds() {
        return this.managedInstanceIds;
    }
    /**
     * @return The list of operations this scheduled job needs to perform. A scheduled job supports only one operation type, unless it is one of the following:
     * * UPDATE_PACKAGES
     * * UPDATE_ALL
     * * UPDATE_SECURITY
     * * UPDATE_BUGFIX
     * * UPDATE_ENHANCEMENT
     * * UPDATE_OTHER
     * * UPDATE_KSPLICE_USERSPACE
     * * UPDATE_KSPLICE_KERNEL
     * 
     */
    public List<GetScheduledJobOperation> operations() {
        return this.operations;
    }
    /**
     * @return The frequency schedule for a recurring scheduled job.
     * 
     */
    public String recurringRule() {
        return this.recurringRule;
    }
    /**
     * @return The amount of time in minutes to wait until retrying the scheduled job. If set, the service will automatically retry  a failed scheduled job after the interval. For example, you could set the interval to [2,5,10]. If the initial  execution of the job fails, the service waits 2 minutes and then retries. If that fails, the service waits 5 minutes  and then retries. If that fails, the service waits 10 minutes and then retries.
     * 
     */
    public List<Integer> retryIntervals() {
        return this.retryIntervals;
    }
    /**
     * @return The type of scheduling frequency for the job.
     * 
     */
    public String scheduleType() {
        return this.scheduleType;
    }
    public String scheduledJobId() {
        return this.scheduledJobId;
    }
    /**
     * @return The current state of the scheduled job.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time this scheduled job was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time of the last execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeLastExecution() {
        return this.timeLastExecution;
    }
    /**
     * @return The time of the next execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeNextExecution() {
        return this.timeNextExecution;
    }
    /**
     * @return The time this scheduled job was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the work request that will be rerun.
     * 
     */
    public String workRequestId() {
        return this.workRequestId;
    }
    /**
     * @return The list of work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this scheduled job.
     * 
     */
    public List<String> workRequestIds() {
        return this.workRequestIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduledJobResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isManagedByAutonomousLinux;
        private Boolean isRestricted;
        private Boolean isSubcompartmentIncluded;
        private List<String> lifecycleStageIds;
        private List<String> locations;
        private List<String> managedCompartmentIds;
        private List<String> managedInstanceGroupIds;
        private List<String> managedInstanceIds;
        private List<GetScheduledJobOperation> operations;
        private String recurringRule;
        private List<Integer> retryIntervals;
        private String scheduleType;
        private String scheduledJobId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeLastExecution;
        private String timeNextExecution;
        private String timeUpdated;
        private String workRequestId;
        private List<String> workRequestIds;
        public Builder() {}
        public Builder(GetScheduledJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isManagedByAutonomousLinux = defaults.isManagedByAutonomousLinux;
    	      this.isRestricted = defaults.isRestricted;
    	      this.isSubcompartmentIncluded = defaults.isSubcompartmentIncluded;
    	      this.lifecycleStageIds = defaults.lifecycleStageIds;
    	      this.locations = defaults.locations;
    	      this.managedCompartmentIds = defaults.managedCompartmentIds;
    	      this.managedInstanceGroupIds = defaults.managedInstanceGroupIds;
    	      this.managedInstanceIds = defaults.managedInstanceIds;
    	      this.operations = defaults.operations;
    	      this.recurringRule = defaults.recurringRule;
    	      this.retryIntervals = defaults.retryIntervals;
    	      this.scheduleType = defaults.scheduleType;
    	      this.scheduledJobId = defaults.scheduledJobId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastExecution = defaults.timeLastExecution;
    	      this.timeNextExecution = defaults.timeNextExecution;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.workRequestId = defaults.workRequestId;
    	      this.workRequestIds = defaults.workRequestIds;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedByAutonomousLinux(Boolean isManagedByAutonomousLinux) {
            if (isManagedByAutonomousLinux == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "isManagedByAutonomousLinux");
            }
            this.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }
        @CustomType.Setter
        public Builder isRestricted(Boolean isRestricted) {
            if (isRestricted == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "isRestricted");
            }
            this.isRestricted = isRestricted;
            return this;
        }
        @CustomType.Setter
        public Builder isSubcompartmentIncluded(Boolean isSubcompartmentIncluded) {
            if (isSubcompartmentIncluded == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "isSubcompartmentIncluded");
            }
            this.isSubcompartmentIncluded = isSubcompartmentIncluded;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStageIds(List<String> lifecycleStageIds) {
            if (lifecycleStageIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "lifecycleStageIds");
            }
            this.lifecycleStageIds = lifecycleStageIds;
            return this;
        }
        public Builder lifecycleStageIds(String... lifecycleStageIds) {
            return lifecycleStageIds(List.of(lifecycleStageIds));
        }
        @CustomType.Setter
        public Builder locations(List<String> locations) {
            if (locations == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "locations");
            }
            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder managedCompartmentIds(List<String> managedCompartmentIds) {
            if (managedCompartmentIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "managedCompartmentIds");
            }
            this.managedCompartmentIds = managedCompartmentIds;
            return this;
        }
        public Builder managedCompartmentIds(String... managedCompartmentIds) {
            return managedCompartmentIds(List.of(managedCompartmentIds));
        }
        @CustomType.Setter
        public Builder managedInstanceGroupIds(List<String> managedInstanceGroupIds) {
            if (managedInstanceGroupIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "managedInstanceGroupIds");
            }
            this.managedInstanceGroupIds = managedInstanceGroupIds;
            return this;
        }
        public Builder managedInstanceGroupIds(String... managedInstanceGroupIds) {
            return managedInstanceGroupIds(List.of(managedInstanceGroupIds));
        }
        @CustomType.Setter
        public Builder managedInstanceIds(List<String> managedInstanceIds) {
            if (managedInstanceIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "managedInstanceIds");
            }
            this.managedInstanceIds = managedInstanceIds;
            return this;
        }
        public Builder managedInstanceIds(String... managedInstanceIds) {
            return managedInstanceIds(List.of(managedInstanceIds));
        }
        @CustomType.Setter
        public Builder operations(List<GetScheduledJobOperation> operations) {
            if (operations == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "operations");
            }
            this.operations = operations;
            return this;
        }
        public Builder operations(GetScheduledJobOperation... operations) {
            return operations(List.of(operations));
        }
        @CustomType.Setter
        public Builder recurringRule(String recurringRule) {
            if (recurringRule == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "recurringRule");
            }
            this.recurringRule = recurringRule;
            return this;
        }
        @CustomType.Setter
        public Builder retryIntervals(List<Integer> retryIntervals) {
            if (retryIntervals == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "retryIntervals");
            }
            this.retryIntervals = retryIntervals;
            return this;
        }
        public Builder retryIntervals(Integer... retryIntervals) {
            return retryIntervals(List.of(retryIntervals));
        }
        @CustomType.Setter
        public Builder scheduleType(String scheduleType) {
            if (scheduleType == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "scheduleType");
            }
            this.scheduleType = scheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledJobId(String scheduledJobId) {
            if (scheduledJobId == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "scheduledJobId");
            }
            this.scheduledJobId = scheduledJobId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastExecution(String timeLastExecution) {
            if (timeLastExecution == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "timeLastExecution");
            }
            this.timeLastExecution = timeLastExecution;
            return this;
        }
        @CustomType.Setter
        public Builder timeNextExecution(String timeNextExecution) {
            if (timeNextExecution == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "timeNextExecution");
            }
            this.timeNextExecution = timeNextExecution;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestId(String workRequestId) {
            if (workRequestId == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "workRequestId");
            }
            this.workRequestId = workRequestId;
            return this;
        }
        @CustomType.Setter
        public Builder workRequestIds(List<String> workRequestIds) {
            if (workRequestIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobResult", "workRequestIds");
            }
            this.workRequestIds = workRequestIds;
            return this;
        }
        public Builder workRequestIds(String... workRequestIds) {
            return workRequestIds(List.of(workRequestIds));
        }
        public GetScheduledJobResult build() {
            final var _resultValue = new GetScheduledJobResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            _resultValue.isRestricted = isRestricted;
            _resultValue.isSubcompartmentIncluded = isSubcompartmentIncluded;
            _resultValue.lifecycleStageIds = lifecycleStageIds;
            _resultValue.locations = locations;
            _resultValue.managedCompartmentIds = managedCompartmentIds;
            _resultValue.managedInstanceGroupIds = managedInstanceGroupIds;
            _resultValue.managedInstanceIds = managedInstanceIds;
            _resultValue.operations = operations;
            _resultValue.recurringRule = recurringRule;
            _resultValue.retryIntervals = retryIntervals;
            _resultValue.scheduleType = scheduleType;
            _resultValue.scheduledJobId = scheduledJobId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastExecution = timeLastExecution;
            _resultValue.timeNextExecution = timeNextExecution;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.workRequestId = workRequestId;
            _resultValue.workRequestIds = workRequestIds;
            return _resultValue;
        }
    }
}
