// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetScheduledJobsFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetScheduledJobsScheduledJobCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetScheduledJobsResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the scheduled job.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return User-friendly name for the scheduled job.
     * 
     */
    private @Nullable String displayName;
    private @Nullable String displayNameContains;
    private @Nullable List<GetScheduledJobsFilter> filters;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether this scheduled job is managed by the Autonomous Linux service.
     * 
     */
    private @Nullable Boolean isManagedByAutonomousLinux;
    /**
     * @return Indicates if the schedule job has restricted update and deletion capabilities. For restricted scheduled jobs,  you can update only the timeNextExecution, recurringRule, and tags.
     * 
     */
    private @Nullable Boolean isRestricted;
    private @Nullable String lifecycleStageId;
    private @Nullable List<String> locationNotEqualTos;
    private @Nullable List<String> locations;
    private @Nullable String managedCompartmentId;
    private @Nullable String managedInstanceGroupId;
    private @Nullable String managedInstanceId;
    /**
     * @return The type of operation this scheduled job performs.
     * 
     */
    private @Nullable String operationType;
    /**
     * @return The type of scheduling frequency for the job.
     * 
     */
    private @Nullable String scheduleType;
    /**
     * @return The list of scheduled_job_collection.
     * 
     */
    private List<GetScheduledJobsScheduledJobCollection> scheduledJobCollections;
    /**
     * @return The current state of the scheduled job.
     * 
     */
    private @Nullable String state;
    private @Nullable String timeEnd;
    private @Nullable String timeStart;

    private GetScheduledJobsResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the scheduled job.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return User-friendly name for the scheduled job.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    public List<GetScheduledJobsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether this scheduled job is managed by the Autonomous Linux service.
     * 
     */
    public Optional<Boolean> isManagedByAutonomousLinux() {
        return Optional.ofNullable(this.isManagedByAutonomousLinux);
    }
    /**
     * @return Indicates if the schedule job has restricted update and deletion capabilities. For restricted scheduled jobs,  you can update only the timeNextExecution, recurringRule, and tags.
     * 
     */
    public Optional<Boolean> isRestricted() {
        return Optional.ofNullable(this.isRestricted);
    }
    public Optional<String> lifecycleStageId() {
        return Optional.ofNullable(this.lifecycleStageId);
    }
    public List<String> locationNotEqualTos() {
        return this.locationNotEqualTos == null ? List.of() : this.locationNotEqualTos;
    }
    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }
    public Optional<String> managedCompartmentId() {
        return Optional.ofNullable(this.managedCompartmentId);
    }
    public Optional<String> managedInstanceGroupId() {
        return Optional.ofNullable(this.managedInstanceGroupId);
    }
    public Optional<String> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }
    /**
     * @return The type of operation this scheduled job performs.
     * 
     */
    public Optional<String> operationType() {
        return Optional.ofNullable(this.operationType);
    }
    /**
     * @return The type of scheduling frequency for the job.
     * 
     */
    public Optional<String> scheduleType() {
        return Optional.ofNullable(this.scheduleType);
    }
    /**
     * @return The list of scheduled_job_collection.
     * 
     */
    public List<GetScheduledJobsScheduledJobCollection> scheduledJobCollections() {
        return this.scheduledJobCollections;
    }
    /**
     * @return The current state of the scheduled job.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduledJobsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable String displayNameContains;
        private @Nullable List<GetScheduledJobsFilter> filters;
        private @Nullable String id;
        private @Nullable Boolean isManagedByAutonomousLinux;
        private @Nullable Boolean isRestricted;
        private @Nullable String lifecycleStageId;
        private @Nullable List<String> locationNotEqualTos;
        private @Nullable List<String> locations;
        private @Nullable String managedCompartmentId;
        private @Nullable String managedInstanceGroupId;
        private @Nullable String managedInstanceId;
        private @Nullable String operationType;
        private @Nullable String scheduleType;
        private List<GetScheduledJobsScheduledJobCollection> scheduledJobCollections;
        private @Nullable String state;
        private @Nullable String timeEnd;
        private @Nullable String timeStart;
        public Builder() {}
        public Builder(GetScheduledJobsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isManagedByAutonomousLinux = defaults.isManagedByAutonomousLinux;
    	      this.isRestricted = defaults.isRestricted;
    	      this.lifecycleStageId = defaults.lifecycleStageId;
    	      this.locationNotEqualTos = defaults.locationNotEqualTos;
    	      this.locations = defaults.locations;
    	      this.managedCompartmentId = defaults.managedCompartmentId;
    	      this.managedInstanceGroupId = defaults.managedInstanceGroupId;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.operationType = defaults.operationType;
    	      this.scheduleType = defaults.scheduleType;
    	      this.scheduledJobCollections = defaults.scheduledJobCollections;
    	      this.state = defaults.state;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetScheduledJobsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetScheduledJobsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isManagedByAutonomousLinux(@Nullable Boolean isManagedByAutonomousLinux) {

            this.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            return this;
        }
        @CustomType.Setter
        public Builder isRestricted(@Nullable Boolean isRestricted) {

            this.isRestricted = isRestricted;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStageId(@Nullable String lifecycleStageId) {

            this.lifecycleStageId = lifecycleStageId;
            return this;
        }
        @CustomType.Setter
        public Builder locationNotEqualTos(@Nullable List<String> locationNotEqualTos) {

            this.locationNotEqualTos = locationNotEqualTos;
            return this;
        }
        public Builder locationNotEqualTos(String... locationNotEqualTos) {
            return locationNotEqualTos(List.of(locationNotEqualTos));
        }
        @CustomType.Setter
        public Builder locations(@Nullable List<String> locations) {

            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder managedCompartmentId(@Nullable String managedCompartmentId) {

            this.managedCompartmentId = managedCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceGroupId(@Nullable String managedInstanceGroupId) {

            this.managedInstanceGroupId = managedInstanceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(@Nullable String managedInstanceId) {

            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder operationType(@Nullable String operationType) {

            this.operationType = operationType;
            return this;
        }
        @CustomType.Setter
        public Builder scheduleType(@Nullable String scheduleType) {

            this.scheduleType = scheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledJobCollections(List<GetScheduledJobsScheduledJobCollection> scheduledJobCollections) {
            if (scheduledJobCollections == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsResult", "scheduledJobCollections");
            }
            this.scheduledJobCollections = scheduledJobCollections;
            return this;
        }
        public Builder scheduledJobCollections(GetScheduledJobsScheduledJobCollection... scheduledJobCollections) {
            return scheduledJobCollections(List.of(scheduledJobCollections));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(@Nullable String timeEnd) {

            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {

            this.timeStart = timeStart;
            return this;
        }
        public GetScheduledJobsResult build() {
            final var _resultValue = new GetScheduledJobsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isManagedByAutonomousLinux = isManagedByAutonomousLinux;
            _resultValue.isRestricted = isRestricted;
            _resultValue.lifecycleStageId = lifecycleStageId;
            _resultValue.locationNotEqualTos = locationNotEqualTos;
            _resultValue.locations = locations;
            _resultValue.managedCompartmentId = managedCompartmentId;
            _resultValue.managedInstanceGroupId = managedInstanceGroupId;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.operationType = operationType;
            _resultValue.scheduleType = scheduleType;
            _resultValue.scheduledJobCollections = scheduledJobCollections;
            _resultValue.state = state;
            _resultValue.timeEnd = timeEnd;
            _resultValue.timeStart = timeStart;
            return _resultValue;
        }
    }
}
