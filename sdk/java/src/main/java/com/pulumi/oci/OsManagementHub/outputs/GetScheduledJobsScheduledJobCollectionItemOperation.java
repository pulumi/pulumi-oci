// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail;
import com.pulumi.oci.OsManagementHub.outputs.GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetScheduledJobsScheduledJobCollectionItemOperation {
    /**
     * @return The set of changes to make to the state of the modules, streams, and profiles on the managed target.
     * 
     */
    private List<GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail> manageModuleStreamsDetails;
    /**
     * @return A filter to return only scheduled jobs with the given operation type.
     * 
     */
    private String operationType;
    /**
     * @return The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
     * 
     */
    private List<String> packageNames;
    /**
     * @return The number of minutes the service waits for the reboot to complete. If the instance doesn&#39;t reboot within the  timeout, the service marks the reboot job as failed.
     * 
     */
    private Integer rebootTimeoutInMins;
    /**
     * @return The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
     * 
     */
    private List<String> softwareSourceIds;
    /**
     * @return Provides the information used to update a module stream.
     * 
     */
    private List<GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail> switchModuleStreamsDetails;
    /**
     * @return Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: &#39;6981d463-cd91-4a26-b7c4-ea4ded9183ed&#39;.
     * 
     */
    private List<String> windowsUpdateNames;

    private GetScheduledJobsScheduledJobCollectionItemOperation() {}
    /**
     * @return The set of changes to make to the state of the modules, streams, and profiles on the managed target.
     * 
     */
    public List<GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail> manageModuleStreamsDetails() {
        return this.manageModuleStreamsDetails;
    }
    /**
     * @return A filter to return only scheduled jobs with the given operation type.
     * 
     */
    public String operationType() {
        return this.operationType;
    }
    /**
     * @return The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
     * 
     */
    public List<String> packageNames() {
        return this.packageNames;
    }
    /**
     * @return The number of minutes the service waits for the reboot to complete. If the instance doesn&#39;t reboot within the  timeout, the service marks the reboot job as failed.
     * 
     */
    public Integer rebootTimeoutInMins() {
        return this.rebootTimeoutInMins;
    }
    /**
     * @return The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
     * 
     */
    public List<String> softwareSourceIds() {
        return this.softwareSourceIds;
    }
    /**
     * @return Provides the information used to update a module stream.
     * 
     */
    public List<GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail> switchModuleStreamsDetails() {
        return this.switchModuleStreamsDetails;
    }
    /**
     * @return Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: &#39;6981d463-cd91-4a26-b7c4-ea4ded9183ed&#39;.
     * 
     */
    public List<String> windowsUpdateNames() {
        return this.windowsUpdateNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduledJobsScheduledJobCollectionItemOperation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail> manageModuleStreamsDetails;
        private String operationType;
        private List<String> packageNames;
        private Integer rebootTimeoutInMins;
        private List<String> softwareSourceIds;
        private List<GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail> switchModuleStreamsDetails;
        private List<String> windowsUpdateNames;
        public Builder() {}
        public Builder(GetScheduledJobsScheduledJobCollectionItemOperation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manageModuleStreamsDetails = defaults.manageModuleStreamsDetails;
    	      this.operationType = defaults.operationType;
    	      this.packageNames = defaults.packageNames;
    	      this.rebootTimeoutInMins = defaults.rebootTimeoutInMins;
    	      this.softwareSourceIds = defaults.softwareSourceIds;
    	      this.switchModuleStreamsDetails = defaults.switchModuleStreamsDetails;
    	      this.windowsUpdateNames = defaults.windowsUpdateNames;
        }

        @CustomType.Setter
        public Builder manageModuleStreamsDetails(List<GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail> manageModuleStreamsDetails) {
            if (manageModuleStreamsDetails == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "manageModuleStreamsDetails");
            }
            this.manageModuleStreamsDetails = manageModuleStreamsDetails;
            return this;
        }
        public Builder manageModuleStreamsDetails(GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail... manageModuleStreamsDetails) {
            return manageModuleStreamsDetails(List.of(manageModuleStreamsDetails));
        }
        @CustomType.Setter
        public Builder operationType(String operationType) {
            if (operationType == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "operationType");
            }
            this.operationType = operationType;
            return this;
        }
        @CustomType.Setter
        public Builder packageNames(List<String> packageNames) {
            if (packageNames == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "packageNames");
            }
            this.packageNames = packageNames;
            return this;
        }
        public Builder packageNames(String... packageNames) {
            return packageNames(List.of(packageNames));
        }
        @CustomType.Setter
        public Builder rebootTimeoutInMins(Integer rebootTimeoutInMins) {
            if (rebootTimeoutInMins == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "rebootTimeoutInMins");
            }
            this.rebootTimeoutInMins = rebootTimeoutInMins;
            return this;
        }
        @CustomType.Setter
        public Builder softwareSourceIds(List<String> softwareSourceIds) {
            if (softwareSourceIds == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "softwareSourceIds");
            }
            this.softwareSourceIds = softwareSourceIds;
            return this;
        }
        public Builder softwareSourceIds(String... softwareSourceIds) {
            return softwareSourceIds(List.of(softwareSourceIds));
        }
        @CustomType.Setter
        public Builder switchModuleStreamsDetails(List<GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail> switchModuleStreamsDetails) {
            if (switchModuleStreamsDetails == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "switchModuleStreamsDetails");
            }
            this.switchModuleStreamsDetails = switchModuleStreamsDetails;
            return this;
        }
        public Builder switchModuleStreamsDetails(GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail... switchModuleStreamsDetails) {
            return switchModuleStreamsDetails(List.of(switchModuleStreamsDetails));
        }
        @CustomType.Setter
        public Builder windowsUpdateNames(List<String> windowsUpdateNames) {
            if (windowsUpdateNames == null) {
              throw new MissingRequiredPropertyException("GetScheduledJobsScheduledJobCollectionItemOperation", "windowsUpdateNames");
            }
            this.windowsUpdateNames = windowsUpdateNames;
            return this;
        }
        public Builder windowsUpdateNames(String... windowsUpdateNames) {
            return windowsUpdateNames(List.of(windowsUpdateNames));
        }
        public GetScheduledJobsScheduledJobCollectionItemOperation build() {
            final var _resultValue = new GetScheduledJobsScheduledJobCollectionItemOperation();
            _resultValue.manageModuleStreamsDetails = manageModuleStreamsDetails;
            _resultValue.operationType = operationType;
            _resultValue.packageNames = packageNames;
            _resultValue.rebootTimeoutInMins = rebootTimeoutInMins;
            _resultValue.softwareSourceIds = softwareSourceIds;
            _resultValue.switchModuleStreamsDetails = switchModuleStreamsDetails;
            _resultValue.windowsUpdateNames = windowsUpdateNames;
            return _resultValue;
        }
    }
}
