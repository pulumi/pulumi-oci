// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetSoftwarePackagesFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetSoftwarePackagesSoftwarePackageCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSoftwarePackagesResult {
    /**
     * @return The architecture for which this software was built
     * 
     */
    private @Nullable String architecture;
    /**
     * @return Software source name.
     * 
     */
    private @Nullable String displayName;
    private @Nullable String displayNameContains;
    private @Nullable List<GetSoftwarePackagesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether this package is the latest version.
     * 
     */
    private @Nullable Boolean isLatest;
    private @Nullable String osFamily;
    /**
     * @return The list of software_package_collection.
     * 
     */
    private List<GetSoftwarePackagesSoftwarePackageCollection> softwarePackageCollections;
    /**
     * @return Version of the package.
     * 
     */
    private @Nullable String version;

    private GetSoftwarePackagesResult() {}
    /**
     * @return The architecture for which this software was built
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return Software source name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    public List<GetSoftwarePackagesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether this package is the latest version.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }
    public Optional<String> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }
    /**
     * @return The list of software_package_collection.
     * 
     */
    public List<GetSoftwarePackagesSoftwarePackageCollection> softwarePackageCollections() {
        return this.softwarePackageCollections;
    }
    /**
     * @return Version of the package.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwarePackagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable String displayName;
        private @Nullable String displayNameContains;
        private @Nullable List<GetSoftwarePackagesFilter> filters;
        private String id;
        private @Nullable Boolean isLatest;
        private @Nullable String osFamily;
        private List<GetSoftwarePackagesSoftwarePackageCollection> softwarePackageCollections;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetSoftwarePackagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.displayName = defaults.displayName;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isLatest = defaults.isLatest;
    	      this.osFamily = defaults.osFamily;
    	      this.softwarePackageCollections = defaults.softwarePackageCollections;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {

            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSoftwarePackagesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSoftwarePackagesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSoftwarePackagesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isLatest(@Nullable Boolean isLatest) {

            this.isLatest = isLatest;
            return this;
        }
        @CustomType.Setter
        public Builder osFamily(@Nullable String osFamily) {

            this.osFamily = osFamily;
            return this;
        }
        @CustomType.Setter
        public Builder softwarePackageCollections(List<GetSoftwarePackagesSoftwarePackageCollection> softwarePackageCollections) {
            if (softwarePackageCollections == null) {
              throw new MissingRequiredPropertyException("GetSoftwarePackagesResult", "softwarePackageCollections");
            }
            this.softwarePackageCollections = softwarePackageCollections;
            return this;
        }
        public Builder softwarePackageCollections(GetSoftwarePackagesSoftwarePackageCollection... softwarePackageCollections) {
            return softwarePackageCollections(List.of(softwarePackageCollections));
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public GetSoftwarePackagesResult build() {
            final var _resultValue = new GetSoftwarePackagesResult();
            _resultValue.architecture = architecture;
            _resultValue.displayName = displayName;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isLatest = isLatest;
            _resultValue.osFamily = osFamily;
            _resultValue.softwarePackageCollections = softwarePackageCollections;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
