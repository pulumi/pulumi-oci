// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OsManagementHub.outputs.GetSoftwareSourceModuleStreamsFilter;
import com.pulumi.oci.OsManagementHub.outputs.GetSoftwareSourceModuleStreamsModuleStreamCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSoftwareSourceModuleStreamsResult {
    private @Nullable List<GetSoftwareSourceModuleStreamsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether this module stream is the latest.
     * 
     */
    private @Nullable Boolean isLatest;
    /**
     * @return The name of the module that contains the stream.
     * 
     */
    private @Nullable String moduleName;
    private @Nullable String moduleNameContains;
    /**
     * @return The list of module_stream_collection.
     * 
     */
    private List<GetSoftwareSourceModuleStreamsModuleStreamCollection> moduleStreamCollections;
    /**
     * @return The name of the stream.
     * 
     */
    private @Nullable String name;
    /**
     * @return The OCID of the software source that provides this module stream.
     * 
     */
    private String softwareSourceId;

    private GetSoftwareSourceModuleStreamsResult() {}
    public List<GetSoftwareSourceModuleStreamsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether this module stream is the latest.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }
    /**
     * @return The name of the module that contains the stream.
     * 
     */
    public Optional<String> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }
    public Optional<String> moduleNameContains() {
        return Optional.ofNullable(this.moduleNameContains);
    }
    /**
     * @return The list of module_stream_collection.
     * 
     */
    public List<GetSoftwareSourceModuleStreamsModuleStreamCollection> moduleStreamCollections() {
        return this.moduleStreamCollections;
    }
    /**
     * @return The name of the stream.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The OCID of the software source that provides this module stream.
     * 
     */
    public String softwareSourceId() {
        return this.softwareSourceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareSourceModuleStreamsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetSoftwareSourceModuleStreamsFilter> filters;
        private String id;
        private @Nullable Boolean isLatest;
        private @Nullable String moduleName;
        private @Nullable String moduleNameContains;
        private List<GetSoftwareSourceModuleStreamsModuleStreamCollection> moduleStreamCollections;
        private @Nullable String name;
        private String softwareSourceId;
        public Builder() {}
        public Builder(GetSoftwareSourceModuleStreamsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isLatest = defaults.isLatest;
    	      this.moduleName = defaults.moduleName;
    	      this.moduleNameContains = defaults.moduleNameContains;
    	      this.moduleStreamCollections = defaults.moduleStreamCollections;
    	      this.name = defaults.name;
    	      this.softwareSourceId = defaults.softwareSourceId;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetSoftwareSourceModuleStreamsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSoftwareSourceModuleStreamsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourceModuleStreamsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isLatest(@Nullable Boolean isLatest) {

            this.isLatest = isLatest;
            return this;
        }
        @CustomType.Setter
        public Builder moduleName(@Nullable String moduleName) {

            this.moduleName = moduleName;
            return this;
        }
        @CustomType.Setter
        public Builder moduleNameContains(@Nullable String moduleNameContains) {

            this.moduleNameContains = moduleNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder moduleStreamCollections(List<GetSoftwareSourceModuleStreamsModuleStreamCollection> moduleStreamCollections) {
            if (moduleStreamCollections == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourceModuleStreamsResult", "moduleStreamCollections");
            }
            this.moduleStreamCollections = moduleStreamCollections;
            return this;
        }
        public Builder moduleStreamCollections(GetSoftwareSourceModuleStreamsModuleStreamCollection... moduleStreamCollections) {
            return moduleStreamCollections(List.of(moduleStreamCollections));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder softwareSourceId(String softwareSourceId) {
            if (softwareSourceId == null) {
              throw new MissingRequiredPropertyException("GetSoftwareSourceModuleStreamsResult", "softwareSourceId");
            }
            this.softwareSourceId = softwareSourceId;
            return this;
        }
        public GetSoftwareSourceModuleStreamsResult build() {
            final var _resultValue = new GetSoftwareSourceModuleStreamsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isLatest = isLatest;
            _resultValue.moduleName = moduleName;
            _resultValue.moduleNameContains = moduleNameContains;
            _resultValue.moduleStreamCollections = moduleStreamCollections;
            _resultValue.name = name;
            _resultValue.softwareSourceId = softwareSourceId;
            return _resultValue;
        }
    }
}
