// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagementHub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSoftwareSourcePackageGroupResult {
    /**
     * @return description of the package group.
     * 
     */
    private String description;
    /**
     * @return Indicates the order to display category or environment.
     * 
     */
    private Integer displayOrder;
    /**
     * @return Indicates if this is a group, category or environment.
     * 
     */
    private String groupType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if this package group is the default.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Indicates if this package group is visible by users.
     * 
     */
    private Boolean isUserVisible;
    /**
     * @return Package group name.
     * 
     */
    private String name;
    private String packageGroupId;
    /**
     * @return The list of packages in the package group.
     * 
     */
    private List<String> packages;
    /**
     * @return the IDs of the package group&#39;s repositories.
     * 
     */
    private List<String> repositories;
    private String softwareSourceId;

    private GetSoftwareSourcePackageGroupResult() {}
    /**
     * @return description of the package group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates the order to display category or environment.
     * 
     */
    public Integer displayOrder() {
        return this.displayOrder;
    }
    /**
     * @return Indicates if this is a group, category or environment.
     * 
     */
    public String groupType() {
        return this.groupType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if this package group is the default.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Indicates if this package group is visible by users.
     * 
     */
    public Boolean isUserVisible() {
        return this.isUserVisible;
    }
    /**
     * @return Package group name.
     * 
     */
    public String name() {
        return this.name;
    }
    public String packageGroupId() {
        return this.packageGroupId;
    }
    /**
     * @return The list of packages in the package group.
     * 
     */
    public List<String> packages() {
        return this.packages;
    }
    /**
     * @return the IDs of the package group&#39;s repositories.
     * 
     */
    public List<String> repositories() {
        return this.repositories;
    }
    public String softwareSourceId() {
        return this.softwareSourceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSoftwareSourcePackageGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Integer displayOrder;
        private String groupType;
        private String id;
        private Boolean isDefault;
        private Boolean isUserVisible;
        private String name;
        private String packageGroupId;
        private List<String> packages;
        private List<String> repositories;
        private String softwareSourceId;
        public Builder() {}
        public Builder(GetSoftwareSourcePackageGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayOrder = defaults.displayOrder;
    	      this.groupType = defaults.groupType;
    	      this.id = defaults.id;
    	      this.isDefault = defaults.isDefault;
    	      this.isUserVisible = defaults.isUserVisible;
    	      this.name = defaults.name;
    	      this.packageGroupId = defaults.packageGroupId;
    	      this.packages = defaults.packages;
    	      this.repositories = defaults.repositories;
    	      this.softwareSourceId = defaults.softwareSourceId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayOrder(Integer displayOrder) {
            this.displayOrder = Objects.requireNonNull(displayOrder);
            return this;
        }
        @CustomType.Setter
        public Builder groupType(String groupType) {
            this.groupType = Objects.requireNonNull(groupType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            this.isDefault = Objects.requireNonNull(isDefault);
            return this;
        }
        @CustomType.Setter
        public Builder isUserVisible(Boolean isUserVisible) {
            this.isUserVisible = Objects.requireNonNull(isUserVisible);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder packageGroupId(String packageGroupId) {
            this.packageGroupId = Objects.requireNonNull(packageGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder packages(List<String> packages) {
            this.packages = Objects.requireNonNull(packages);
            return this;
        }
        public Builder packages(String... packages) {
            return packages(List.of(packages));
        }
        @CustomType.Setter
        public Builder repositories(List<String> repositories) {
            this.repositories = Objects.requireNonNull(repositories);
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder softwareSourceId(String softwareSourceId) {
            this.softwareSourceId = Objects.requireNonNull(softwareSourceId);
            return this;
        }
        public GetSoftwareSourcePackageGroupResult build() {
            final var _resultValue = new GetSoftwareSourcePackageGroupResult();
            _resultValue.description = description;
            _resultValue.displayOrder = displayOrder;
            _resultValue.groupType = groupType;
            _resultValue.id = id;
            _resultValue.isDefault = isDefault;
            _resultValue.isUserVisible = isUserVisible;
            _resultValue.name = name;
            _resultValue.packageGroupId = packageGroupId;
            _resultValue.packages = packages;
            _resultValue.repositories = repositories;
            _resultValue.softwareSourceId = softwareSourceId;
            return _resultValue;
        }
    }
}
