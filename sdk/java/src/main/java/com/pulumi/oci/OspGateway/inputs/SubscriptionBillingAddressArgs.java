// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionBillingAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionBillingAddressArgs Empty = new SubscriptionBillingAddressArgs();

    /**
     * (Updatable) Address identifier.
     * 
     */
    @Import(name="addressKey")
    private @Nullable Output<String> addressKey;

    /**
     * @return (Updatable) Address identifier.
     * 
     */
    public Optional<Output<String>> addressKey() {
        return Optional.ofNullable(this.addressKey);
    }

    /**
     * (Updatable) Name of the city.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return (Updatable) Name of the city.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * (Updatable) Name of the customer company.
     * 
     */
    @Import(name="companyName")
    private @Nullable Output<String> companyName;

    /**
     * @return (Updatable) Name of the customer company.
     * 
     */
    public Optional<Output<String>> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * (Updatable) Contributor class of the customer company.
     * 
     */
    @Import(name="contributorClass")
    private @Nullable Output<String> contributorClass;

    /**
     * @return (Updatable) Contributor class of the customer company.
     * 
     */
    public Optional<Output<String>> contributorClass() {
        return Optional.ofNullable(this.contributorClass);
    }

    /**
     * (Updatable) Country of the address.
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return (Updatable) Country of the address.
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * (Updatable) County of the address.
     * 
     */
    @Import(name="county")
    private @Nullable Output<String> county;

    /**
     * @return (Updatable) County of the address.
     * 
     */
    public Optional<Output<String>> county() {
        return Optional.ofNullable(this.county);
    }

    /**
     * (Updatable) Department name of the customer company.
     * 
     */
    @Import(name="departmentName")
    private @Nullable Output<String> departmentName;

    /**
     * @return (Updatable) Department name of the customer company.
     * 
     */
    public Optional<Output<String>> departmentName() {
        return Optional.ofNullable(this.departmentName);
    }

    /**
     * (Updatable) The email address of the paypal user.
     * 
     */
    @Import(name="emailAddress")
    private @Nullable Output<String> emailAddress;

    /**
     * @return (Updatable) The email address of the paypal user.
     * 
     */
    public Optional<Output<String>> emailAddress() {
        return Optional.ofNullable(this.emailAddress);
    }

    /**
     * (Updatable) First name of the paypal user.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return (Updatable) First name of the paypal user.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * (Updatable) Internal number of the customer company.
     * 
     */
    @Import(name="internalNumber")
    private @Nullable Output<String> internalNumber;

    /**
     * @return (Updatable) Internal number of the customer company.
     * 
     */
    public Optional<Output<String>> internalNumber() {
        return Optional.ofNullable(this.internalNumber);
    }

    /**
     * (Updatable) Job title of the contact person.
     * 
     */
    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    /**
     * @return (Updatable) Job title of the contact person.
     * 
     */
    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    /**
     * (Updatable) Last name of the paypal user.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return (Updatable) Last name of the paypal user.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * (Updatable) Address line 1.
     * 
     */
    @Import(name="line1")
    private @Nullable Output<String> line1;

    /**
     * @return (Updatable) Address line 1.
     * 
     */
    public Optional<Output<String>> line1() {
        return Optional.ofNullable(this.line1);
    }

    /**
     * (Updatable) Address line 2.
     * 
     */
    @Import(name="line2")
    private @Nullable Output<String> line2;

    /**
     * @return (Updatable) Address line 2.
     * 
     */
    public Optional<Output<String>> line2() {
        return Optional.ofNullable(this.line2);
    }

    /**
     * (Updatable) Address line 3.
     * 
     */
    @Import(name="line3")
    private @Nullable Output<String> line3;

    /**
     * @return (Updatable) Address line 3.
     * 
     */
    public Optional<Output<String>> line3() {
        return Optional.ofNullable(this.line3);
    }

    /**
     * (Updatable) Address line 4.
     * 
     */
    @Import(name="line4")
    private @Nullable Output<String> line4;

    /**
     * @return (Updatable) Address line 4.
     * 
     */
    public Optional<Output<String>> line4() {
        return Optional.ofNullable(this.line4);
    }

    /**
     * (Updatable) Middle name of the contact person.
     * 
     */
    @Import(name="middleName")
    private @Nullable Output<String> middleName;

    /**
     * @return (Updatable) Middle name of the contact person.
     * 
     */
    public Optional<Output<String>> middleName() {
        return Optional.ofNullable(this.middleName);
    }

    /**
     * (Updatable) Municipal Inscription.
     * 
     */
    @Import(name="municipalInscription")
    private @Nullable Output<String> municipalInscription;

    /**
     * @return (Updatable) Municipal Inscription.
     * 
     */
    public Optional<Output<String>> municipalInscription() {
        return Optional.ofNullable(this.municipalInscription);
    }

    /**
     * (Updatable) Phone country code of the contact person.
     * 
     */
    @Import(name="phoneCountryCode")
    private @Nullable Output<String> phoneCountryCode;

    /**
     * @return (Updatable) Phone country code of the contact person.
     * 
     */
    public Optional<Output<String>> phoneCountryCode() {
        return Optional.ofNullable(this.phoneCountryCode);
    }

    /**
     * (Updatable) Phone number of the contact person.
     * 
     */
    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    /**
     * @return (Updatable) Phone number of the contact person.
     * 
     */
    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    /**
     * (Updatable) Post code of the address.
     * 
     */
    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    /**
     * @return (Updatable) Post code of the address.
     * 
     */
    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * (Updatable) Province of the address.
     * 
     */
    @Import(name="province")
    private @Nullable Output<String> province;

    /**
     * @return (Updatable) Province of the address.
     * 
     */
    public Optional<Output<String>> province() {
        return Optional.ofNullable(this.province);
    }

    /**
     * (Updatable) State of the address.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) State of the address.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) State Inscription.
     * 
     */
    @Import(name="stateInscription")
    private @Nullable Output<String> stateInscription;

    /**
     * @return (Updatable) State Inscription.
     * 
     */
    public Optional<Output<String>> stateInscription() {
        return Optional.ofNullable(this.stateInscription);
    }

    /**
     * (Updatable) Street name of the address.
     * 
     */
    @Import(name="streetName")
    private @Nullable Output<String> streetName;

    /**
     * @return (Updatable) Street name of the address.
     * 
     */
    public Optional<Output<String>> streetName() {
        return Optional.ofNullable(this.streetName);
    }

    /**
     * (Updatable) Street number of the address.
     * 
     */
    @Import(name="streetNumber")
    private @Nullable Output<String> streetNumber;

    /**
     * @return (Updatable) Street number of the address.
     * 
     */
    public Optional<Output<String>> streetNumber() {
        return Optional.ofNullable(this.streetNumber);
    }

    private SubscriptionBillingAddressArgs() {}

    private SubscriptionBillingAddressArgs(SubscriptionBillingAddressArgs $) {
        this.addressKey = $.addressKey;
        this.city = $.city;
        this.companyName = $.companyName;
        this.contributorClass = $.contributorClass;
        this.country = $.country;
        this.county = $.county;
        this.departmentName = $.departmentName;
        this.emailAddress = $.emailAddress;
        this.firstName = $.firstName;
        this.internalNumber = $.internalNumber;
        this.jobTitle = $.jobTitle;
        this.lastName = $.lastName;
        this.line1 = $.line1;
        this.line2 = $.line2;
        this.line3 = $.line3;
        this.line4 = $.line4;
        this.middleName = $.middleName;
        this.municipalInscription = $.municipalInscription;
        this.phoneCountryCode = $.phoneCountryCode;
        this.phoneNumber = $.phoneNumber;
        this.postalCode = $.postalCode;
        this.province = $.province;
        this.state = $.state;
        this.stateInscription = $.stateInscription;
        this.streetName = $.streetName;
        this.streetNumber = $.streetNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionBillingAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionBillingAddressArgs $;

        public Builder() {
            $ = new SubscriptionBillingAddressArgs();
        }

        public Builder(SubscriptionBillingAddressArgs defaults) {
            $ = new SubscriptionBillingAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressKey (Updatable) Address identifier.
         * 
         * @return builder
         * 
         */
        public Builder addressKey(@Nullable Output<String> addressKey) {
            $.addressKey = addressKey;
            return this;
        }

        /**
         * @param addressKey (Updatable) Address identifier.
         * 
         * @return builder
         * 
         */
        public Builder addressKey(String addressKey) {
            return addressKey(Output.of(addressKey));
        }

        /**
         * @param city (Updatable) Name of the city.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city (Updatable) Name of the city.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param companyName (Updatable) Name of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName (Updatable) Name of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param contributorClass (Updatable) Contributor class of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder contributorClass(@Nullable Output<String> contributorClass) {
            $.contributorClass = contributorClass;
            return this;
        }

        /**
         * @param contributorClass (Updatable) Contributor class of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder contributorClass(String contributorClass) {
            return contributorClass(Output.of(contributorClass));
        }

        /**
         * @param country (Updatable) Country of the address.
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country (Updatable) Country of the address.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param county (Updatable) County of the address.
         * 
         * @return builder
         * 
         */
        public Builder county(@Nullable Output<String> county) {
            $.county = county;
            return this;
        }

        /**
         * @param county (Updatable) County of the address.
         * 
         * @return builder
         * 
         */
        public Builder county(String county) {
            return county(Output.of(county));
        }

        /**
         * @param departmentName (Updatable) Department name of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder departmentName(@Nullable Output<String> departmentName) {
            $.departmentName = departmentName;
            return this;
        }

        /**
         * @param departmentName (Updatable) Department name of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder departmentName(String departmentName) {
            return departmentName(Output.of(departmentName));
        }

        /**
         * @param emailAddress (Updatable) The email address of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(@Nullable Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress (Updatable) The email address of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param firstName (Updatable) First name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName (Updatable) First name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param internalNumber (Updatable) Internal number of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder internalNumber(@Nullable Output<String> internalNumber) {
            $.internalNumber = internalNumber;
            return this;
        }

        /**
         * @param internalNumber (Updatable) Internal number of the customer company.
         * 
         * @return builder
         * 
         */
        public Builder internalNumber(String internalNumber) {
            return internalNumber(Output.of(internalNumber));
        }

        /**
         * @param jobTitle (Updatable) Job title of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        /**
         * @param jobTitle (Updatable) Job title of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        /**
         * @param lastName (Updatable) Last name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName (Updatable) Last name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param line1 (Updatable) Address line 1.
         * 
         * @return builder
         * 
         */
        public Builder line1(@Nullable Output<String> line1) {
            $.line1 = line1;
            return this;
        }

        /**
         * @param line1 (Updatable) Address line 1.
         * 
         * @return builder
         * 
         */
        public Builder line1(String line1) {
            return line1(Output.of(line1));
        }

        /**
         * @param line2 (Updatable) Address line 2.
         * 
         * @return builder
         * 
         */
        public Builder line2(@Nullable Output<String> line2) {
            $.line2 = line2;
            return this;
        }

        /**
         * @param line2 (Updatable) Address line 2.
         * 
         * @return builder
         * 
         */
        public Builder line2(String line2) {
            return line2(Output.of(line2));
        }

        /**
         * @param line3 (Updatable) Address line 3.
         * 
         * @return builder
         * 
         */
        public Builder line3(@Nullable Output<String> line3) {
            $.line3 = line3;
            return this;
        }

        /**
         * @param line3 (Updatable) Address line 3.
         * 
         * @return builder
         * 
         */
        public Builder line3(String line3) {
            return line3(Output.of(line3));
        }

        /**
         * @param line4 (Updatable) Address line 4.
         * 
         * @return builder
         * 
         */
        public Builder line4(@Nullable Output<String> line4) {
            $.line4 = line4;
            return this;
        }

        /**
         * @param line4 (Updatable) Address line 4.
         * 
         * @return builder
         * 
         */
        public Builder line4(String line4) {
            return line4(Output.of(line4));
        }

        /**
         * @param middleName (Updatable) Middle name of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder middleName(@Nullable Output<String> middleName) {
            $.middleName = middleName;
            return this;
        }

        /**
         * @param middleName (Updatable) Middle name of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder middleName(String middleName) {
            return middleName(Output.of(middleName));
        }

        /**
         * @param municipalInscription (Updatable) Municipal Inscription.
         * 
         * @return builder
         * 
         */
        public Builder municipalInscription(@Nullable Output<String> municipalInscription) {
            $.municipalInscription = municipalInscription;
            return this;
        }

        /**
         * @param municipalInscription (Updatable) Municipal Inscription.
         * 
         * @return builder
         * 
         */
        public Builder municipalInscription(String municipalInscription) {
            return municipalInscription(Output.of(municipalInscription));
        }

        /**
         * @param phoneCountryCode (Updatable) Phone country code of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneCountryCode(@Nullable Output<String> phoneCountryCode) {
            $.phoneCountryCode = phoneCountryCode;
            return this;
        }

        /**
         * @param phoneCountryCode (Updatable) Phone country code of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneCountryCode(String phoneCountryCode) {
            return phoneCountryCode(Output.of(phoneCountryCode));
        }

        /**
         * @param phoneNumber (Updatable) Phone number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber (Updatable) Phone number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param postalCode (Updatable) Post code of the address.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode (Updatable) Post code of the address.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param province (Updatable) Province of the address.
         * 
         * @return builder
         * 
         */
        public Builder province(@Nullable Output<String> province) {
            $.province = province;
            return this;
        }

        /**
         * @param province (Updatable) Province of the address.
         * 
         * @return builder
         * 
         */
        public Builder province(String province) {
            return province(Output.of(province));
        }

        /**
         * @param state (Updatable) State of the address.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) State of the address.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateInscription (Updatable) State Inscription.
         * 
         * @return builder
         * 
         */
        public Builder stateInscription(@Nullable Output<String> stateInscription) {
            $.stateInscription = stateInscription;
            return this;
        }

        /**
         * @param stateInscription (Updatable) State Inscription.
         * 
         * @return builder
         * 
         */
        public Builder stateInscription(String stateInscription) {
            return stateInscription(Output.of(stateInscription));
        }

        /**
         * @param streetName (Updatable) Street name of the address.
         * 
         * @return builder
         * 
         */
        public Builder streetName(@Nullable Output<String> streetName) {
            $.streetName = streetName;
            return this;
        }

        /**
         * @param streetName (Updatable) Street name of the address.
         * 
         * @return builder
         * 
         */
        public Builder streetName(String streetName) {
            return streetName(Output.of(streetName));
        }

        /**
         * @param streetNumber (Updatable) Street number of the address.
         * 
         * @return builder
         * 
         */
        public Builder streetNumber(@Nullable Output<String> streetNumber) {
            $.streetNumber = streetNumber;
            return this;
        }

        /**
         * @param streetNumber (Updatable) Street number of the address.
         * 
         * @return builder
         * 
         */
        public Builder streetNumber(String streetNumber) {
            return streetNumber(Output.of(streetNumber));
        }

        public SubscriptionBillingAddressArgs build() {
            return $;
        }
    }

}
