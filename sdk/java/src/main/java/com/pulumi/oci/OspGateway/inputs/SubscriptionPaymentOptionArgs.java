// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionPaymentOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionPaymentOptionArgs Empty = new SubscriptionPaymentOptionArgs();

    /**
     * Credit card type.
     * 
     */
    @Import(name="creditCardType")
    private @Nullable Output<String> creditCardType;

    /**
     * @return Credit card type.
     * 
     */
    public Optional<Output<String>> creditCardType() {
        return Optional.ofNullable(this.creditCardType);
    }

    /**
     * The email address of the paypal user.
     * 
     */
    @Import(name="emailAddress")
    private @Nullable Output<String> emailAddress;

    /**
     * @return The email address of the paypal user.
     * 
     */
    public Optional<Output<String>> emailAddress() {
        return Optional.ofNullable(this.emailAddress);
    }

    /**
     * Agreement id for the paypal account.
     * 
     */
    @Import(name="extBillingAgreementId")
    private @Nullable Output<String> extBillingAgreementId;

    /**
     * @return Agreement id for the paypal account.
     * 
     */
    public Optional<Output<String>> extBillingAgreementId() {
        return Optional.ofNullable(this.extBillingAgreementId);
    }

    /**
     * First name of the paypal user.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return First name of the paypal user.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Last four digits of the card.
     * 
     */
    @Import(name="lastDigits")
    private @Nullable Output<String> lastDigits;

    /**
     * @return Last four digits of the card.
     * 
     */
    public Optional<Output<String>> lastDigits() {
        return Optional.ofNullable(this.lastDigits);
    }

    /**
     * Last name of the paypal user.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return Last name of the paypal user.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * Name on the credit card.
     * 
     */
    @Import(name="nameOnCard")
    private @Nullable Output<String> nameOnCard;

    /**
     * @return Name on the credit card.
     * 
     */
    public Optional<Output<String>> nameOnCard() {
        return Optional.ofNullable(this.nameOnCard);
    }

    /**
     * Payment method
     * 
     */
    @Import(name="paymentMethod")
    private @Nullable Output<String> paymentMethod;

    /**
     * @return Payment method
     * 
     */
    public Optional<Output<String>> paymentMethod() {
        return Optional.ofNullable(this.paymentMethod);
    }

    /**
     * Expired date of the credit card.
     * 
     */
    @Import(name="timeExpiration")
    private @Nullable Output<String> timeExpiration;

    /**
     * @return Expired date of the credit card.
     * 
     */
    public Optional<Output<String>> timeExpiration() {
        return Optional.ofNullable(this.timeExpiration);
    }

    /**
     * Wallet instrument internal id.
     * 
     */
    @Import(name="walletInstrumentId")
    private @Nullable Output<String> walletInstrumentId;

    /**
     * @return Wallet instrument internal id.
     * 
     */
    public Optional<Output<String>> walletInstrumentId() {
        return Optional.ofNullable(this.walletInstrumentId);
    }

    /**
     * Wallet transaction id.
     * 
     */
    @Import(name="walletTransactionId")
    private @Nullable Output<String> walletTransactionId;

    /**
     * @return Wallet transaction id.
     * 
     */
    public Optional<Output<String>> walletTransactionId() {
        return Optional.ofNullable(this.walletTransactionId);
    }

    private SubscriptionPaymentOptionArgs() {}

    private SubscriptionPaymentOptionArgs(SubscriptionPaymentOptionArgs $) {
        this.creditCardType = $.creditCardType;
        this.emailAddress = $.emailAddress;
        this.extBillingAgreementId = $.extBillingAgreementId;
        this.firstName = $.firstName;
        this.lastDigits = $.lastDigits;
        this.lastName = $.lastName;
        this.nameOnCard = $.nameOnCard;
        this.paymentMethod = $.paymentMethod;
        this.timeExpiration = $.timeExpiration;
        this.walletInstrumentId = $.walletInstrumentId;
        this.walletTransactionId = $.walletTransactionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionPaymentOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionPaymentOptionArgs $;

        public Builder() {
            $ = new SubscriptionPaymentOptionArgs();
        }

        public Builder(SubscriptionPaymentOptionArgs defaults) {
            $ = new SubscriptionPaymentOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creditCardType Credit card type.
         * 
         * @return builder
         * 
         */
        public Builder creditCardType(@Nullable Output<String> creditCardType) {
            $.creditCardType = creditCardType;
            return this;
        }

        /**
         * @param creditCardType Credit card type.
         * 
         * @return builder
         * 
         */
        public Builder creditCardType(String creditCardType) {
            return creditCardType(Output.of(creditCardType));
        }

        /**
         * @param emailAddress The email address of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(@Nullable Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress The email address of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param extBillingAgreementId Agreement id for the paypal account.
         * 
         * @return builder
         * 
         */
        public Builder extBillingAgreementId(@Nullable Output<String> extBillingAgreementId) {
            $.extBillingAgreementId = extBillingAgreementId;
            return this;
        }

        /**
         * @param extBillingAgreementId Agreement id for the paypal account.
         * 
         * @return builder
         * 
         */
        public Builder extBillingAgreementId(String extBillingAgreementId) {
            return extBillingAgreementId(Output.of(extBillingAgreementId));
        }

        /**
         * @param firstName First name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastDigits Last four digits of the card.
         * 
         * @return builder
         * 
         */
        public Builder lastDigits(@Nullable Output<String> lastDigits) {
            $.lastDigits = lastDigits;
            return this;
        }

        /**
         * @param lastDigits Last four digits of the card.
         * 
         * @return builder
         * 
         */
        public Builder lastDigits(String lastDigits) {
            return lastDigits(Output.of(lastDigits));
        }

        /**
         * @param lastName Last name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of the paypal user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param nameOnCard Name on the credit card.
         * 
         * @return builder
         * 
         */
        public Builder nameOnCard(@Nullable Output<String> nameOnCard) {
            $.nameOnCard = nameOnCard;
            return this;
        }

        /**
         * @param nameOnCard Name on the credit card.
         * 
         * @return builder
         * 
         */
        public Builder nameOnCard(String nameOnCard) {
            return nameOnCard(Output.of(nameOnCard));
        }

        /**
         * @param paymentMethod Payment method
         * 
         * @return builder
         * 
         */
        public Builder paymentMethod(@Nullable Output<String> paymentMethod) {
            $.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * @param paymentMethod Payment method
         * 
         * @return builder
         * 
         */
        public Builder paymentMethod(String paymentMethod) {
            return paymentMethod(Output.of(paymentMethod));
        }

        /**
         * @param timeExpiration Expired date of the credit card.
         * 
         * @return builder
         * 
         */
        public Builder timeExpiration(@Nullable Output<String> timeExpiration) {
            $.timeExpiration = timeExpiration;
            return this;
        }

        /**
         * @param timeExpiration Expired date of the credit card.
         * 
         * @return builder
         * 
         */
        public Builder timeExpiration(String timeExpiration) {
            return timeExpiration(Output.of(timeExpiration));
        }

        /**
         * @param walletInstrumentId Wallet instrument internal id.
         * 
         * @return builder
         * 
         */
        public Builder walletInstrumentId(@Nullable Output<String> walletInstrumentId) {
            $.walletInstrumentId = walletInstrumentId;
            return this;
        }

        /**
         * @param walletInstrumentId Wallet instrument internal id.
         * 
         * @return builder
         * 
         */
        public Builder walletInstrumentId(String walletInstrumentId) {
            return walletInstrumentId(Output.of(walletInstrumentId));
        }

        /**
         * @param walletTransactionId Wallet transaction id.
         * 
         * @return builder
         * 
         */
        public Builder walletTransactionId(@Nullable Output<String> walletTransactionId) {
            $.walletTransactionId = walletTransactionId;
            return this;
        }

        /**
         * @param walletTransactionId Wallet transaction id.
         * 
         * @return builder
         * 
         */
        public Builder walletTransactionId(String walletTransactionId) {
            return walletTransactionId(Output.of(walletTransactionId));
        }

        public SubscriptionPaymentOptionArgs build() {
            return $;
        }
    }

}
