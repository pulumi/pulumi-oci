// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInvoiceLastPaymentDetail {
    /**
     * @return Account number of the card owner
     * 
     */
    private String accountNumber;
    /**
     * @return Amount that paid
     * 
     */
    private Double amountPaid;
    /**
     * @return Echeck card type
     * 
     */
    private String cardType;
    /**
     * @return Credit card type
     * 
     */
    private String creditCardType;
    /**
     * @return Last four routing digits of the card
     * 
     */
    private String echeckRouting;
    /**
     * @return Last four digits of the card
     * 
     */
    private String lastDigits;
    /**
     * @return Name on the credit card
     * 
     */
    private String nameOnCard;
    /**
     * @return example
     * 
     */
    private String paidBy;
    /**
     * @return Payment method
     * 
     */
    private String paymentMethod;
    /**
     * @return The id (email address) of the paypal payment
     * 
     */
    private String paypalId;
    /**
     * @return paypal payment reference
     * 
     */
    private String paypalReference;
    /**
     * @return Routing number of the echeck card
     * 
     */
    private String routingNumber;
    /**
     * @return Expired date of the credit card
     * 
     */
    private String timeExpiration;
    /**
     * @return Paid the invoice on this day
     * 
     */
    private String timePaidOn;

    private GetInvoiceLastPaymentDetail() {}
    /**
     * @return Account number of the card owner
     * 
     */
    public String accountNumber() {
        return this.accountNumber;
    }
    /**
     * @return Amount that paid
     * 
     */
    public Double amountPaid() {
        return this.amountPaid;
    }
    /**
     * @return Echeck card type
     * 
     */
    public String cardType() {
        return this.cardType;
    }
    /**
     * @return Credit card type
     * 
     */
    public String creditCardType() {
        return this.creditCardType;
    }
    /**
     * @return Last four routing digits of the card
     * 
     */
    public String echeckRouting() {
        return this.echeckRouting;
    }
    /**
     * @return Last four digits of the card
     * 
     */
    public String lastDigits() {
        return this.lastDigits;
    }
    /**
     * @return Name on the credit card
     * 
     */
    public String nameOnCard() {
        return this.nameOnCard;
    }
    /**
     * @return example
     * 
     */
    public String paidBy() {
        return this.paidBy;
    }
    /**
     * @return Payment method
     * 
     */
    public String paymentMethod() {
        return this.paymentMethod;
    }
    /**
     * @return The id (email address) of the paypal payment
     * 
     */
    public String paypalId() {
        return this.paypalId;
    }
    /**
     * @return paypal payment reference
     * 
     */
    public String paypalReference() {
        return this.paypalReference;
    }
    /**
     * @return Routing number of the echeck card
     * 
     */
    public String routingNumber() {
        return this.routingNumber;
    }
    /**
     * @return Expired date of the credit card
     * 
     */
    public String timeExpiration() {
        return this.timeExpiration;
    }
    /**
     * @return Paid the invoice on this day
     * 
     */
    public String timePaidOn() {
        return this.timePaidOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoiceLastPaymentDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountNumber;
        private Double amountPaid;
        private String cardType;
        private String creditCardType;
        private String echeckRouting;
        private String lastDigits;
        private String nameOnCard;
        private String paidBy;
        private String paymentMethod;
        private String paypalId;
        private String paypalReference;
        private String routingNumber;
        private String timeExpiration;
        private String timePaidOn;
        public Builder() {}
        public Builder(GetInvoiceLastPaymentDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountNumber = defaults.accountNumber;
    	      this.amountPaid = defaults.amountPaid;
    	      this.cardType = defaults.cardType;
    	      this.creditCardType = defaults.creditCardType;
    	      this.echeckRouting = defaults.echeckRouting;
    	      this.lastDigits = defaults.lastDigits;
    	      this.nameOnCard = defaults.nameOnCard;
    	      this.paidBy = defaults.paidBy;
    	      this.paymentMethod = defaults.paymentMethod;
    	      this.paypalId = defaults.paypalId;
    	      this.paypalReference = defaults.paypalReference;
    	      this.routingNumber = defaults.routingNumber;
    	      this.timeExpiration = defaults.timeExpiration;
    	      this.timePaidOn = defaults.timePaidOn;
        }

        @CustomType.Setter
        public Builder accountNumber(String accountNumber) {
            if (accountNumber == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "accountNumber");
            }
            this.accountNumber = accountNumber;
            return this;
        }
        @CustomType.Setter
        public Builder amountPaid(Double amountPaid) {
            if (amountPaid == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "amountPaid");
            }
            this.amountPaid = amountPaid;
            return this;
        }
        @CustomType.Setter
        public Builder cardType(String cardType) {
            if (cardType == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "cardType");
            }
            this.cardType = cardType;
            return this;
        }
        @CustomType.Setter
        public Builder creditCardType(String creditCardType) {
            if (creditCardType == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "creditCardType");
            }
            this.creditCardType = creditCardType;
            return this;
        }
        @CustomType.Setter
        public Builder echeckRouting(String echeckRouting) {
            if (echeckRouting == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "echeckRouting");
            }
            this.echeckRouting = echeckRouting;
            return this;
        }
        @CustomType.Setter
        public Builder lastDigits(String lastDigits) {
            if (lastDigits == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "lastDigits");
            }
            this.lastDigits = lastDigits;
            return this;
        }
        @CustomType.Setter
        public Builder nameOnCard(String nameOnCard) {
            if (nameOnCard == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "nameOnCard");
            }
            this.nameOnCard = nameOnCard;
            return this;
        }
        @CustomType.Setter
        public Builder paidBy(String paidBy) {
            if (paidBy == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "paidBy");
            }
            this.paidBy = paidBy;
            return this;
        }
        @CustomType.Setter
        public Builder paymentMethod(String paymentMethod) {
            if (paymentMethod == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "paymentMethod");
            }
            this.paymentMethod = paymentMethod;
            return this;
        }
        @CustomType.Setter
        public Builder paypalId(String paypalId) {
            if (paypalId == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "paypalId");
            }
            this.paypalId = paypalId;
            return this;
        }
        @CustomType.Setter
        public Builder paypalReference(String paypalReference) {
            if (paypalReference == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "paypalReference");
            }
            this.paypalReference = paypalReference;
            return this;
        }
        @CustomType.Setter
        public Builder routingNumber(String routingNumber) {
            if (routingNumber == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "routingNumber");
            }
            this.routingNumber = routingNumber;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpiration(String timeExpiration) {
            if (timeExpiration == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "timeExpiration");
            }
            this.timeExpiration = timeExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder timePaidOn(String timePaidOn) {
            if (timePaidOn == null) {
              throw new MissingRequiredPropertyException("GetInvoiceLastPaymentDetail", "timePaidOn");
            }
            this.timePaidOn = timePaidOn;
            return this;
        }
        public GetInvoiceLastPaymentDetail build() {
            final var _resultValue = new GetInvoiceLastPaymentDetail();
            _resultValue.accountNumber = accountNumber;
            _resultValue.amountPaid = amountPaid;
            _resultValue.cardType = cardType;
            _resultValue.creditCardType = creditCardType;
            _resultValue.echeckRouting = echeckRouting;
            _resultValue.lastDigits = lastDigits;
            _resultValue.nameOnCard = nameOnCard;
            _resultValue.paidBy = paidBy;
            _resultValue.paymentMethod = paymentMethod;
            _resultValue.paypalId = paypalId;
            _resultValue.paypalReference = paypalReference;
            _resultValue.routingNumber = routingNumber;
            _resultValue.timeExpiration = timeExpiration;
            _resultValue.timePaidOn = timePaidOn;
            return _resultValue;
        }
    }
}
