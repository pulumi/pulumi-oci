// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemBillToAddress;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemCurrency;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemLastPaymentDetail;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvoicesInvoiceCollectionItem {
    /**
     * @return Address details model
     * 
     */
    private List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses;
    /**
     * @return Currency details model
     * 
     */
    private List<GetInvoicesInvoiceCollectionItemCurrency> currencies;
    /**
     * @return Transaction identifier
     * 
     */
    private String internalInvoiceId;
    /**
     * @return Total amount of invoice
     * 
     */
    private Double invoiceAmount;
    /**
     * @return Invoice amount adjust
     * 
     */
    private Double invoiceAmountAdjusted;
    /**
     * @return Invoice amount applied
     * 
     */
    private Double invoiceAmountApplied;
    /**
     * @return Invoice amount credit
     * 
     */
    private Double invoiceAmountCredited;
    /**
     * @return Balance of invoice
     * 
     */
    private Double invoiceAmountDue;
    private Double invoiceAmountInDispute;
    /**
     * @return The invoice query param (not unique).
     * 
     */
    private String invoiceId;
    /**
     * @return Invoice external reference
     * 
     */
    private String invoiceNumber;
    /**
     * @return Invoice PO number
     * 
     */
    private String invoicePoNumber;
    /**
     * @return Invoice reference number
     * 
     */
    private String invoiceRefNumber;
    /**
     * @return Invoice status
     * 
     */
    private String invoiceStatus;
    /**
     * @return Type of invoice
     * 
     */
    private String invoiceType;
    /**
     * @return Is credit card payment eligible
     * 
     */
    private Boolean isCreditCardPayable;
    /**
     * @return Is pdf download access allowed
     * 
     */
    private Boolean isDisplayDownloadPdf;
    private Boolean isDisplayViewPdf;
    private Boolean isPaid;
    /**
     * @return Whether invoice can be payed
     * 
     */
    private Boolean isPayable;
    private Boolean isPaymentFailed;
    /**
     * @return Is emailing pdf allowed
     * 
     */
    private Boolean isPdfEmailAvailable;
    /**
     * @return Payment related details
     * 
     */
    private List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails;
    private String partyName;
    /**
     * @return Payment terms
     * 
     */
    private String paymentTerms;
    /**
     * @return Preferred Email on the invoice
     * 
     */
    private String preferredEmail;
    /**
     * @return List of subscription identifiers
     * 
     */
    private List<String> subscriptionIds;
    /**
     * @return Tax of invoice amount
     * 
     */
    private Double tax;
    /**
     * @return Date of invoice
     * 
     */
    private String timeInvoice;
    /**
     * @return Due date of invoice
     * 
     */
    private String timeInvoiceDue;

    private GetInvoicesInvoiceCollectionItem() {}
    /**
     * @return Address details model
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses() {
        return this.billToAddresses;
    }
    /**
     * @return Currency details model
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemCurrency> currencies() {
        return this.currencies;
    }
    /**
     * @return Transaction identifier
     * 
     */
    public String internalInvoiceId() {
        return this.internalInvoiceId;
    }
    /**
     * @return Total amount of invoice
     * 
     */
    public Double invoiceAmount() {
        return this.invoiceAmount;
    }
    /**
     * @return Invoice amount adjust
     * 
     */
    public Double invoiceAmountAdjusted() {
        return this.invoiceAmountAdjusted;
    }
    /**
     * @return Invoice amount applied
     * 
     */
    public Double invoiceAmountApplied() {
        return this.invoiceAmountApplied;
    }
    /**
     * @return Invoice amount credit
     * 
     */
    public Double invoiceAmountCredited() {
        return this.invoiceAmountCredited;
    }
    /**
     * @return Balance of invoice
     * 
     */
    public Double invoiceAmountDue() {
        return this.invoiceAmountDue;
    }
    public Double invoiceAmountInDispute() {
        return this.invoiceAmountInDispute;
    }
    /**
     * @return The invoice query param (not unique).
     * 
     */
    public String invoiceId() {
        return this.invoiceId;
    }
    /**
     * @return Invoice external reference
     * 
     */
    public String invoiceNumber() {
        return this.invoiceNumber;
    }
    /**
     * @return Invoice PO number
     * 
     */
    public String invoicePoNumber() {
        return this.invoicePoNumber;
    }
    /**
     * @return Invoice reference number
     * 
     */
    public String invoiceRefNumber() {
        return this.invoiceRefNumber;
    }
    /**
     * @return Invoice status
     * 
     */
    public String invoiceStatus() {
        return this.invoiceStatus;
    }
    /**
     * @return Type of invoice
     * 
     */
    public String invoiceType() {
        return this.invoiceType;
    }
    /**
     * @return Is credit card payment eligible
     * 
     */
    public Boolean isCreditCardPayable() {
        return this.isCreditCardPayable;
    }
    /**
     * @return Is pdf download access allowed
     * 
     */
    public Boolean isDisplayDownloadPdf() {
        return this.isDisplayDownloadPdf;
    }
    public Boolean isDisplayViewPdf() {
        return this.isDisplayViewPdf;
    }
    public Boolean isPaid() {
        return this.isPaid;
    }
    /**
     * @return Whether invoice can be payed
     * 
     */
    public Boolean isPayable() {
        return this.isPayable;
    }
    public Boolean isPaymentFailed() {
        return this.isPaymentFailed;
    }
    /**
     * @return Is emailing pdf allowed
     * 
     */
    public Boolean isPdfEmailAvailable() {
        return this.isPdfEmailAvailable;
    }
    /**
     * @return Payment related details
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails() {
        return this.lastPaymentDetails;
    }
    public String partyName() {
        return this.partyName;
    }
    /**
     * @return Payment terms
     * 
     */
    public String paymentTerms() {
        return this.paymentTerms;
    }
    /**
     * @return Preferred Email on the invoice
     * 
     */
    public String preferredEmail() {
        return this.preferredEmail;
    }
    /**
     * @return List of subscription identifiers
     * 
     */
    public List<String> subscriptionIds() {
        return this.subscriptionIds;
    }
    /**
     * @return Tax of invoice amount
     * 
     */
    public Double tax() {
        return this.tax;
    }
    /**
     * @return Date of invoice
     * 
     */
    public String timeInvoice() {
        return this.timeInvoice;
    }
    /**
     * @return Due date of invoice
     * 
     */
    public String timeInvoiceDue() {
        return this.timeInvoiceDue;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses;
        private List<GetInvoicesInvoiceCollectionItemCurrency> currencies;
        private String internalInvoiceId;
        private Double invoiceAmount;
        private Double invoiceAmountAdjusted;
        private Double invoiceAmountApplied;
        private Double invoiceAmountCredited;
        private Double invoiceAmountDue;
        private Double invoiceAmountInDispute;
        private String invoiceId;
        private String invoiceNumber;
        private String invoicePoNumber;
        private String invoiceRefNumber;
        private String invoiceStatus;
        private String invoiceType;
        private Boolean isCreditCardPayable;
        private Boolean isDisplayDownloadPdf;
        private Boolean isDisplayViewPdf;
        private Boolean isPaid;
        private Boolean isPayable;
        private Boolean isPaymentFailed;
        private Boolean isPdfEmailAvailable;
        private List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails;
        private String partyName;
        private String paymentTerms;
        private String preferredEmail;
        private List<String> subscriptionIds;
        private Double tax;
        private String timeInvoice;
        private String timeInvoiceDue;
        public Builder() {}
        public Builder(GetInvoicesInvoiceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billToAddresses = defaults.billToAddresses;
    	      this.currencies = defaults.currencies;
    	      this.internalInvoiceId = defaults.internalInvoiceId;
    	      this.invoiceAmount = defaults.invoiceAmount;
    	      this.invoiceAmountAdjusted = defaults.invoiceAmountAdjusted;
    	      this.invoiceAmountApplied = defaults.invoiceAmountApplied;
    	      this.invoiceAmountCredited = defaults.invoiceAmountCredited;
    	      this.invoiceAmountDue = defaults.invoiceAmountDue;
    	      this.invoiceAmountInDispute = defaults.invoiceAmountInDispute;
    	      this.invoiceId = defaults.invoiceId;
    	      this.invoiceNumber = defaults.invoiceNumber;
    	      this.invoicePoNumber = defaults.invoicePoNumber;
    	      this.invoiceRefNumber = defaults.invoiceRefNumber;
    	      this.invoiceStatus = defaults.invoiceStatus;
    	      this.invoiceType = defaults.invoiceType;
    	      this.isCreditCardPayable = defaults.isCreditCardPayable;
    	      this.isDisplayDownloadPdf = defaults.isDisplayDownloadPdf;
    	      this.isDisplayViewPdf = defaults.isDisplayViewPdf;
    	      this.isPaid = defaults.isPaid;
    	      this.isPayable = defaults.isPayable;
    	      this.isPaymentFailed = defaults.isPaymentFailed;
    	      this.isPdfEmailAvailable = defaults.isPdfEmailAvailable;
    	      this.lastPaymentDetails = defaults.lastPaymentDetails;
    	      this.partyName = defaults.partyName;
    	      this.paymentTerms = defaults.paymentTerms;
    	      this.preferredEmail = defaults.preferredEmail;
    	      this.subscriptionIds = defaults.subscriptionIds;
    	      this.tax = defaults.tax;
    	      this.timeInvoice = defaults.timeInvoice;
    	      this.timeInvoiceDue = defaults.timeInvoiceDue;
        }

        @CustomType.Setter
        public Builder billToAddresses(List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses) {
            if (billToAddresses == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "billToAddresses");
            }
            this.billToAddresses = billToAddresses;
            return this;
        }
        public Builder billToAddresses(GetInvoicesInvoiceCollectionItemBillToAddress... billToAddresses) {
            return billToAddresses(List.of(billToAddresses));
        }
        @CustomType.Setter
        public Builder currencies(List<GetInvoicesInvoiceCollectionItemCurrency> currencies) {
            if (currencies == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "currencies");
            }
            this.currencies = currencies;
            return this;
        }
        public Builder currencies(GetInvoicesInvoiceCollectionItemCurrency... currencies) {
            return currencies(List.of(currencies));
        }
        @CustomType.Setter
        public Builder internalInvoiceId(String internalInvoiceId) {
            if (internalInvoiceId == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "internalInvoiceId");
            }
            this.internalInvoiceId = internalInvoiceId;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmount(Double invoiceAmount) {
            if (invoiceAmount == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmount");
            }
            this.invoiceAmount = invoiceAmount;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmountAdjusted(Double invoiceAmountAdjusted) {
            if (invoiceAmountAdjusted == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmountAdjusted");
            }
            this.invoiceAmountAdjusted = invoiceAmountAdjusted;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmountApplied(Double invoiceAmountApplied) {
            if (invoiceAmountApplied == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmountApplied");
            }
            this.invoiceAmountApplied = invoiceAmountApplied;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmountCredited(Double invoiceAmountCredited) {
            if (invoiceAmountCredited == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmountCredited");
            }
            this.invoiceAmountCredited = invoiceAmountCredited;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmountDue(Double invoiceAmountDue) {
            if (invoiceAmountDue == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmountDue");
            }
            this.invoiceAmountDue = invoiceAmountDue;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceAmountInDispute(Double invoiceAmountInDispute) {
            if (invoiceAmountInDispute == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceAmountInDispute");
            }
            this.invoiceAmountInDispute = invoiceAmountInDispute;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceId(String invoiceId) {
            if (invoiceId == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceId");
            }
            this.invoiceId = invoiceId;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceNumber(String invoiceNumber) {
            if (invoiceNumber == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceNumber");
            }
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder invoicePoNumber(String invoicePoNumber) {
            if (invoicePoNumber == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoicePoNumber");
            }
            this.invoicePoNumber = invoicePoNumber;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceRefNumber(String invoiceRefNumber) {
            if (invoiceRefNumber == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceRefNumber");
            }
            this.invoiceRefNumber = invoiceRefNumber;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceStatus(String invoiceStatus) {
            if (invoiceStatus == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceStatus");
            }
            this.invoiceStatus = invoiceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder invoiceType(String invoiceType) {
            if (invoiceType == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "invoiceType");
            }
            this.invoiceType = invoiceType;
            return this;
        }
        @CustomType.Setter
        public Builder isCreditCardPayable(Boolean isCreditCardPayable) {
            if (isCreditCardPayable == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isCreditCardPayable");
            }
            this.isCreditCardPayable = isCreditCardPayable;
            return this;
        }
        @CustomType.Setter
        public Builder isDisplayDownloadPdf(Boolean isDisplayDownloadPdf) {
            if (isDisplayDownloadPdf == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isDisplayDownloadPdf");
            }
            this.isDisplayDownloadPdf = isDisplayDownloadPdf;
            return this;
        }
        @CustomType.Setter
        public Builder isDisplayViewPdf(Boolean isDisplayViewPdf) {
            if (isDisplayViewPdf == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isDisplayViewPdf");
            }
            this.isDisplayViewPdf = isDisplayViewPdf;
            return this;
        }
        @CustomType.Setter
        public Builder isPaid(Boolean isPaid) {
            if (isPaid == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isPaid");
            }
            this.isPaid = isPaid;
            return this;
        }
        @CustomType.Setter
        public Builder isPayable(Boolean isPayable) {
            if (isPayable == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isPayable");
            }
            this.isPayable = isPayable;
            return this;
        }
        @CustomType.Setter
        public Builder isPaymentFailed(Boolean isPaymentFailed) {
            if (isPaymentFailed == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isPaymentFailed");
            }
            this.isPaymentFailed = isPaymentFailed;
            return this;
        }
        @CustomType.Setter
        public Builder isPdfEmailAvailable(Boolean isPdfEmailAvailable) {
            if (isPdfEmailAvailable == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "isPdfEmailAvailable");
            }
            this.isPdfEmailAvailable = isPdfEmailAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder lastPaymentDetails(List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails) {
            if (lastPaymentDetails == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "lastPaymentDetails");
            }
            this.lastPaymentDetails = lastPaymentDetails;
            return this;
        }
        public Builder lastPaymentDetails(GetInvoicesInvoiceCollectionItemLastPaymentDetail... lastPaymentDetails) {
            return lastPaymentDetails(List.of(lastPaymentDetails));
        }
        @CustomType.Setter
        public Builder partyName(String partyName) {
            if (partyName == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "partyName");
            }
            this.partyName = partyName;
            return this;
        }
        @CustomType.Setter
        public Builder paymentTerms(String paymentTerms) {
            if (paymentTerms == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "paymentTerms");
            }
            this.paymentTerms = paymentTerms;
            return this;
        }
        @CustomType.Setter
        public Builder preferredEmail(String preferredEmail) {
            if (preferredEmail == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "preferredEmail");
            }
            this.preferredEmail = preferredEmail;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionIds(List<String> subscriptionIds) {
            if (subscriptionIds == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "subscriptionIds");
            }
            this.subscriptionIds = subscriptionIds;
            return this;
        }
        public Builder subscriptionIds(String... subscriptionIds) {
            return subscriptionIds(List.of(subscriptionIds));
        }
        @CustomType.Setter
        public Builder tax(Double tax) {
            if (tax == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "tax");
            }
            this.tax = tax;
            return this;
        }
        @CustomType.Setter
        public Builder timeInvoice(String timeInvoice) {
            if (timeInvoice == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "timeInvoice");
            }
            this.timeInvoice = timeInvoice;
            return this;
        }
        @CustomType.Setter
        public Builder timeInvoiceDue(String timeInvoiceDue) {
            if (timeInvoiceDue == null) {
              throw new MissingRequiredPropertyException("GetInvoicesInvoiceCollectionItem", "timeInvoiceDue");
            }
            this.timeInvoiceDue = timeInvoiceDue;
            return this;
        }
        public GetInvoicesInvoiceCollectionItem build() {
            final var _resultValue = new GetInvoicesInvoiceCollectionItem();
            _resultValue.billToAddresses = billToAddresses;
            _resultValue.currencies = currencies;
            _resultValue.internalInvoiceId = internalInvoiceId;
            _resultValue.invoiceAmount = invoiceAmount;
            _resultValue.invoiceAmountAdjusted = invoiceAmountAdjusted;
            _resultValue.invoiceAmountApplied = invoiceAmountApplied;
            _resultValue.invoiceAmountCredited = invoiceAmountCredited;
            _resultValue.invoiceAmountDue = invoiceAmountDue;
            _resultValue.invoiceAmountInDispute = invoiceAmountInDispute;
            _resultValue.invoiceId = invoiceId;
            _resultValue.invoiceNumber = invoiceNumber;
            _resultValue.invoicePoNumber = invoicePoNumber;
            _resultValue.invoiceRefNumber = invoiceRefNumber;
            _resultValue.invoiceStatus = invoiceStatus;
            _resultValue.invoiceType = invoiceType;
            _resultValue.isCreditCardPayable = isCreditCardPayable;
            _resultValue.isDisplayDownloadPdf = isDisplayDownloadPdf;
            _resultValue.isDisplayViewPdf = isDisplayViewPdf;
            _resultValue.isPaid = isPaid;
            _resultValue.isPayable = isPayable;
            _resultValue.isPaymentFailed = isPaymentFailed;
            _resultValue.isPdfEmailAvailable = isPdfEmailAvailable;
            _resultValue.lastPaymentDetails = lastPaymentDetails;
            _resultValue.partyName = partyName;
            _resultValue.paymentTerms = paymentTerms;
            _resultValue.preferredEmail = preferredEmail;
            _resultValue.subscriptionIds = subscriptionIds;
            _resultValue.tax = tax;
            _resultValue.timeInvoice = timeInvoice;
            _resultValue.timeInvoiceDue = timeInvoiceDue;
            return _resultValue;
        }
    }
}
