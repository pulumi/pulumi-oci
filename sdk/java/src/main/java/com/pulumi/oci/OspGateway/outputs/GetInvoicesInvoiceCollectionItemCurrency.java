// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInvoicesInvoiceCollectionItemCurrency {
    /**
     * @return Currency code
     * 
     */
    private @Nullable String currencyCode;
    /**
     * @return Currency symbol
     * 
     */
    private @Nullable String currencySymbol;
    /**
     * @return Name of the currency
     * 
     */
    private @Nullable String name;
    /**
     * @return Round decimal point
     * 
     */
    private @Nullable Double roundDecimalPoint;
    /**
     * @return USD conversion rate of the currency
     * 
     */
    private @Nullable Double usdConversion;

    private GetInvoicesInvoiceCollectionItemCurrency() {}
    /**
     * @return Currency code
     * 
     */
    public Optional<String> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }
    /**
     * @return Currency symbol
     * 
     */
    public Optional<String> currencySymbol() {
        return Optional.ofNullable(this.currencySymbol);
    }
    /**
     * @return Name of the currency
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Round decimal point
     * 
     */
    public Optional<Double> roundDecimalPoint() {
        return Optional.ofNullable(this.roundDecimalPoint);
    }
    /**
     * @return USD conversion rate of the currency
     * 
     */
    public Optional<Double> usdConversion() {
        return Optional.ofNullable(this.usdConversion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceCollectionItemCurrency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String currencyCode;
        private @Nullable String currencySymbol;
        private @Nullable String name;
        private @Nullable Double roundDecimalPoint;
        private @Nullable Double usdConversion;
        public Builder() {}
        public Builder(GetInvoicesInvoiceCollectionItemCurrency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currencyCode = defaults.currencyCode;
    	      this.currencySymbol = defaults.currencySymbol;
    	      this.name = defaults.name;
    	      this.roundDecimalPoint = defaults.roundDecimalPoint;
    	      this.usdConversion = defaults.usdConversion;
        }

        @CustomType.Setter
        public Builder currencyCode(@Nullable String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder currencySymbol(@Nullable String currencySymbol) {
            this.currencySymbol = currencySymbol;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder roundDecimalPoint(@Nullable Double roundDecimalPoint) {
            this.roundDecimalPoint = roundDecimalPoint;
            return this;
        }
        @CustomType.Setter
        public Builder usdConversion(@Nullable Double usdConversion) {
            this.usdConversion = usdConversion;
            return this;
        }
        public GetInvoicesInvoiceCollectionItemCurrency build() {
            final var o = new GetInvoicesInvoiceCollectionItemCurrency();
            o.currencyCode = currencyCode;
            o.currencySymbol = currencySymbol;
            o.name = name;
            o.roundDecimalPoint = roundDecimalPoint;
            o.usdConversion = usdConversion;
            return o;
        }
    }
}
