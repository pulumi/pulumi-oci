// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceLineItemCurrency;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvoicesInvoiceLineItem {
    /**
     * @return Currency details model
     * 
     */
    private List<GetInvoicesInvoiceLineItemCurrency> currencies;
    /**
     * @return Unit price of the ordered product
     * 
     */
    private Double netUnitPrice;
    /**
     * @return Product of the item
     * 
     */
    private String orderNo;
    /**
     * @return Part number
     * 
     */
    private String partNumber;
    /**
     * @return Product of the item
     * 
     */
    private String product;
    /**
     * @return Quantity of the ordered product
     * 
     */
    private Double quantity;
    /**
     * @return End date
     * 
     */
    private String timeEnd;
    /**
     * @return Start date
     * 
     */
    private String timeStart;
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    private Double totalPrice;

    private GetInvoicesInvoiceLineItem() {}
    /**
     * @return Currency details model
     * 
     */
    public List<GetInvoicesInvoiceLineItemCurrency> currencies() {
        return this.currencies;
    }
    /**
     * @return Unit price of the ordered product
     * 
     */
    public Double netUnitPrice() {
        return this.netUnitPrice;
    }
    /**
     * @return Product of the item
     * 
     */
    public String orderNo() {
        return this.orderNo;
    }
    /**
     * @return Part number
     * 
     */
    public String partNumber() {
        return this.partNumber;
    }
    /**
     * @return Product of the item
     * 
     */
    public String product() {
        return this.product;
    }
    /**
     * @return Quantity of the ordered product
     * 
     */
    public Double quantity() {
        return this.quantity;
    }
    /**
     * @return End date
     * 
     */
    public String timeEnd() {
        return this.timeEnd;
    }
    /**
     * @return Start date
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    public Double totalPrice() {
        return this.totalPrice;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceLineItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInvoicesInvoiceLineItemCurrency> currencies;
        private Double netUnitPrice;
        private String orderNo;
        private String partNumber;
        private String product;
        private Double quantity;
        private String timeEnd;
        private String timeStart;
        private Double totalPrice;
        public Builder() {}
        public Builder(GetInvoicesInvoiceLineItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currencies = defaults.currencies;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.orderNo = defaults.orderNo;
    	      this.partNumber = defaults.partNumber;
    	      this.product = defaults.product;
    	      this.quantity = defaults.quantity;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.totalPrice = defaults.totalPrice;
        }

        @CustomType.Setter
        public Builder currencies(List<GetInvoicesInvoiceLineItemCurrency> currencies) {
            this.currencies = Objects.requireNonNull(currencies);
            return this;
        }
        public Builder currencies(GetInvoicesInvoiceLineItemCurrency... currencies) {
            return currencies(List.of(currencies));
        }
        @CustomType.Setter
        public Builder netUnitPrice(Double netUnitPrice) {
            this.netUnitPrice = Objects.requireNonNull(netUnitPrice);
            return this;
        }
        @CustomType.Setter
        public Builder orderNo(String orderNo) {
            this.orderNo = Objects.requireNonNull(orderNo);
            return this;
        }
        @CustomType.Setter
        public Builder partNumber(String partNumber) {
            this.partNumber = Objects.requireNonNull(partNumber);
            return this;
        }
        @CustomType.Setter
        public Builder product(String product) {
            this.product = Objects.requireNonNull(product);
            return this;
        }
        @CustomType.Setter
        public Builder quantity(Double quantity) {
            this.quantity = Objects.requireNonNull(quantity);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(String timeEnd) {
            this.timeEnd = Objects.requireNonNull(timeEnd);
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(String timeStart) {
            this.timeStart = Objects.requireNonNull(timeStart);
            return this;
        }
        @CustomType.Setter
        public Builder totalPrice(Double totalPrice) {
            this.totalPrice = Objects.requireNonNull(totalPrice);
            return this;
        }
        public GetInvoicesInvoiceLineItem build() {
            final var o = new GetInvoicesInvoiceLineItem();
            o.currencies = currencies;
            o.netUnitPrice = netUnitPrice;
            o.orderNo = orderNo;
            o.partNumber = partNumber;
            o.product = product;
            o.quantity = quantity;
            o.timeEnd = timeEnd;
            o.timeStart = timeStart;
            o.totalPrice = totalPrice;
            return o;
        }
    }
}
