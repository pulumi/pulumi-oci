// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInvoicesInvoiceLinesInvoiceLineCollectionItem {
    /**
     * @return Currency details model
     * 
     */
    private @Nullable List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies;
    /**
     * @return Unit price of the ordered product
     * 
     */
    private @Nullable Double netUnitPrice;
    /**
     * @return Product of the item
     * 
     */
    private @Nullable String orderNo;
    /**
     * @return Part number
     * 
     */
    private @Nullable String partNumber;
    /**
     * @return Product of the item
     * 
     */
    private @Nullable String product;
    /**
     * @return Quantity of the ordered product
     * 
     */
    private @Nullable Double quantity;
    /**
     * @return End date
     * 
     */
    private @Nullable String timeEnd;
    /**
     * @return Start date
     * 
     */
    private @Nullable String timeStart;
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    private @Nullable Double totalPrice;

    private GetInvoicesInvoiceLinesInvoiceLineCollectionItem() {}
    /**
     * @return Currency details model
     * 
     */
    public List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies() {
        return this.currencies == null ? List.of() : this.currencies;
    }
    /**
     * @return Unit price of the ordered product
     * 
     */
    public Optional<Double> netUnitPrice() {
        return Optional.ofNullable(this.netUnitPrice);
    }
    /**
     * @return Product of the item
     * 
     */
    public Optional<String> orderNo() {
        return Optional.ofNullable(this.orderNo);
    }
    /**
     * @return Part number
     * 
     */
    public Optional<String> partNumber() {
        return Optional.ofNullable(this.partNumber);
    }
    /**
     * @return Product of the item
     * 
     */
    public Optional<String> product() {
        return Optional.ofNullable(this.product);
    }
    /**
     * @return Quantity of the ordered product
     * 
     */
    public Optional<Double> quantity() {
        return Optional.ofNullable(this.quantity);
    }
    /**
     * @return End date
     * 
     */
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }
    /**
     * @return Start date
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }
    /**
     * @return Total price of the ordered product (Net unit price x quantity)
     * 
     */
    public Optional<Double> totalPrice() {
        return Optional.ofNullable(this.totalPrice);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceLinesInvoiceLineCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies;
        private @Nullable Double netUnitPrice;
        private @Nullable String orderNo;
        private @Nullable String partNumber;
        private @Nullable String product;
        private @Nullable Double quantity;
        private @Nullable String timeEnd;
        private @Nullable String timeStart;
        private @Nullable Double totalPrice;
        public Builder() {}
        public Builder(GetInvoicesInvoiceLinesInvoiceLineCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currencies = defaults.currencies;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.orderNo = defaults.orderNo;
    	      this.partNumber = defaults.partNumber;
    	      this.product = defaults.product;
    	      this.quantity = defaults.quantity;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.totalPrice = defaults.totalPrice;
        }

        @CustomType.Setter
        public Builder currencies(@Nullable List<GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency> currencies) {
            this.currencies = currencies;
            return this;
        }
        public Builder currencies(GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency... currencies) {
            return currencies(List.of(currencies));
        }
        @CustomType.Setter
        public Builder netUnitPrice(@Nullable Double netUnitPrice) {
            this.netUnitPrice = netUnitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder orderNo(@Nullable String orderNo) {
            this.orderNo = orderNo;
            return this;
        }
        @CustomType.Setter
        public Builder partNumber(@Nullable String partNumber) {
            this.partNumber = partNumber;
            return this;
        }
        @CustomType.Setter
        public Builder product(@Nullable String product) {
            this.product = product;
            return this;
        }
        @CustomType.Setter
        public Builder quantity(@Nullable Double quantity) {
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(@Nullable String timeEnd) {
            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder totalPrice(@Nullable Double totalPrice) {
            this.totalPrice = totalPrice;
            return this;
        }
        public GetInvoicesInvoiceLinesInvoiceLineCollectionItem build() {
            final var o = new GetInvoicesInvoiceLinesInvoiceLineCollectionItem();
            o.currencies = currencies;
            o.netUnitPrice = netUnitPrice;
            o.orderNo = orderNo;
            o.partNumber = partNumber;
            o.product = product;
            o.quantity = quantity;
            o.timeEnd = timeEnd;
            o.timeStart = timeStart;
            o.totalPrice = totalPrice;
            return o;
        }
    }
}
