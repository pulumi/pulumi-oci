// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionBillingAddress;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionPaymentGateway;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionPaymentOption;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionSubscription;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionTaxInfo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionResult {
    /**
     * @return Account type.
     * 
     */
    private @Nullable String accountType;
    /**
     * @return Bill to customer Account id.
     * 
     */
    private @Nullable String billToCustAccountId;
    /**
     * @return Address details model.
     * 
     */
    private @Nullable List<GetSubscriptionBillingAddress> billingAddresses;
    private String compartmentId;
    /**
     * @return Currency code
     * 
     */
    private @Nullable String currencyCode;
    private @Nullable String email;
    /**
     * @return GSI Subscription external code.
     * 
     */
    private @Nullable String gsiOrgCode;
    /**
     * @return Subscription id identifier (OCID).
     * 
     */
    private @Nullable String id;
    /**
     * @return Payment intension.
     * 
     */
    private @Nullable Boolean isIntentToPay;
    /**
     * @return Language short code (en, de, hu, etc)
     * 
     */
    private @Nullable String languageCode;
    /**
     * @return GSI organization external identifier.
     * 
     */
    private @Nullable String organizationId;
    private String ospHomeRegion;
    /**
     * @return Payment gateway details.
     * 
     */
    private @Nullable List<GetSubscriptionPaymentGateway> paymentGateways;
    /**
     * @return Payment option list of a subscription.
     * 
     */
    private @Nullable List<GetSubscriptionPaymentOption> paymentOptions;
    /**
     * @return Subscription plan type.
     * 
     */
    private @Nullable String planType;
    /**
     * @return Ship to customer account role.
     * 
     */
    private @Nullable String shipToCustAcctRoleId;
    /**
     * @return Ship to customer account site address id.
     * 
     */
    private @Nullable String shipToCustAcctSiteId;
    private String subscriptionId;
    /**
     * @return Subscription plan number.
     * 
     */
    private @Nullable String subscriptionPlanNumber;
    private @Nullable List<GetSubscriptionSubscription> subscriptions;
    /**
     * @return Tax details.
     * 
     */
    private @Nullable List<GetSubscriptionTaxInfo> taxInfos;
    /**
     * @return Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
     * 
     */
    private @Nullable String timePersonalToCorporateConv;
    /**
     * @return Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
     * 
     */
    private @Nullable String timePlanUpgrade;
    /**
     * @return Start date of the subscription.
     * 
     */
    private @Nullable String timeStart;
    /**
     * @return Status of the upgrade.
     * 
     */
    private @Nullable String upgradeState;
    /**
     * @return This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
     * 
     */
    private @Nullable String upgradeStateDetails;

    private GetSubscriptionResult() {}
    /**
     * @return Account type.
     * 
     */
    public Optional<String> accountType() {
        return Optional.ofNullable(this.accountType);
    }
    /**
     * @return Bill to customer Account id.
     * 
     */
    public Optional<String> billToCustAccountId() {
        return Optional.ofNullable(this.billToCustAccountId);
    }
    /**
     * @return Address details model.
     * 
     */
    public List<GetSubscriptionBillingAddress> billingAddresses() {
        return this.billingAddresses == null ? List.of() : this.billingAddresses;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Currency code
     * 
     */
    public Optional<String> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return GSI Subscription external code.
     * 
     */
    public Optional<String> gsiOrgCode() {
        return Optional.ofNullable(this.gsiOrgCode);
    }
    /**
     * @return Subscription id identifier (OCID).
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Payment intension.
     * 
     */
    public Optional<Boolean> isIntentToPay() {
        return Optional.ofNullable(this.isIntentToPay);
    }
    /**
     * @return Language short code (en, de, hu, etc)
     * 
     */
    public Optional<String> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }
    /**
     * @return GSI organization external identifier.
     * 
     */
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }
    public String ospHomeRegion() {
        return this.ospHomeRegion;
    }
    /**
     * @return Payment gateway details.
     * 
     */
    public List<GetSubscriptionPaymentGateway> paymentGateways() {
        return this.paymentGateways == null ? List.of() : this.paymentGateways;
    }
    /**
     * @return Payment option list of a subscription.
     * 
     */
    public List<GetSubscriptionPaymentOption> paymentOptions() {
        return this.paymentOptions == null ? List.of() : this.paymentOptions;
    }
    /**
     * @return Subscription plan type.
     * 
     */
    public Optional<String> planType() {
        return Optional.ofNullable(this.planType);
    }
    /**
     * @return Ship to customer account role.
     * 
     */
    public Optional<String> shipToCustAcctRoleId() {
        return Optional.ofNullable(this.shipToCustAcctRoleId);
    }
    /**
     * @return Ship to customer account site address id.
     * 
     */
    public Optional<String> shipToCustAcctSiteId() {
        return Optional.ofNullable(this.shipToCustAcctSiteId);
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Subscription plan number.
     * 
     */
    public Optional<String> subscriptionPlanNumber() {
        return Optional.ofNullable(this.subscriptionPlanNumber);
    }
    public List<GetSubscriptionSubscription> subscriptions() {
        return this.subscriptions == null ? List.of() : this.subscriptions;
    }
    /**
     * @return Tax details.
     * 
     */
    public List<GetSubscriptionTaxInfo> taxInfos() {
        return this.taxInfos == null ? List.of() : this.taxInfos;
    }
    /**
     * @return Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
     * 
     */
    public Optional<String> timePersonalToCorporateConv() {
        return Optional.ofNullable(this.timePersonalToCorporateConv);
    }
    /**
     * @return Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
     * 
     */
    public Optional<String> timePlanUpgrade() {
        return Optional.ofNullable(this.timePlanUpgrade);
    }
    /**
     * @return Start date of the subscription.
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }
    /**
     * @return Status of the upgrade.
     * 
     */
    public Optional<String> upgradeState() {
        return Optional.ofNullable(this.upgradeState);
    }
    /**
     * @return This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
     * 
     */
    public Optional<String> upgradeStateDetails() {
        return Optional.ofNullable(this.upgradeStateDetails);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountType;
        private @Nullable String billToCustAccountId;
        private @Nullable List<GetSubscriptionBillingAddress> billingAddresses;
        private String compartmentId;
        private @Nullable String currencyCode;
        private @Nullable String email;
        private @Nullable String gsiOrgCode;
        private @Nullable String id;
        private @Nullable Boolean isIntentToPay;
        private @Nullable String languageCode;
        private @Nullable String organizationId;
        private String ospHomeRegion;
        private @Nullable List<GetSubscriptionPaymentGateway> paymentGateways;
        private @Nullable List<GetSubscriptionPaymentOption> paymentOptions;
        private @Nullable String planType;
        private @Nullable String shipToCustAcctRoleId;
        private @Nullable String shipToCustAcctSiteId;
        private String subscriptionId;
        private @Nullable String subscriptionPlanNumber;
        private @Nullable List<GetSubscriptionSubscription> subscriptions;
        private @Nullable List<GetSubscriptionTaxInfo> taxInfos;
        private @Nullable String timePersonalToCorporateConv;
        private @Nullable String timePlanUpgrade;
        private @Nullable String timeStart;
        private @Nullable String upgradeState;
        private @Nullable String upgradeStateDetails;
        public Builder() {}
        public Builder(GetSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountType = defaults.accountType;
    	      this.billToCustAccountId = defaults.billToCustAccountId;
    	      this.billingAddresses = defaults.billingAddresses;
    	      this.compartmentId = defaults.compartmentId;
    	      this.currencyCode = defaults.currencyCode;
    	      this.email = defaults.email;
    	      this.gsiOrgCode = defaults.gsiOrgCode;
    	      this.id = defaults.id;
    	      this.isIntentToPay = defaults.isIntentToPay;
    	      this.languageCode = defaults.languageCode;
    	      this.organizationId = defaults.organizationId;
    	      this.ospHomeRegion = defaults.ospHomeRegion;
    	      this.paymentGateways = defaults.paymentGateways;
    	      this.paymentOptions = defaults.paymentOptions;
    	      this.planType = defaults.planType;
    	      this.shipToCustAcctRoleId = defaults.shipToCustAcctRoleId;
    	      this.shipToCustAcctSiteId = defaults.shipToCustAcctSiteId;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.subscriptionPlanNumber = defaults.subscriptionPlanNumber;
    	      this.subscriptions = defaults.subscriptions;
    	      this.taxInfos = defaults.taxInfos;
    	      this.timePersonalToCorporateConv = defaults.timePersonalToCorporateConv;
    	      this.timePlanUpgrade = defaults.timePlanUpgrade;
    	      this.timeStart = defaults.timeStart;
    	      this.upgradeState = defaults.upgradeState;
    	      this.upgradeStateDetails = defaults.upgradeStateDetails;
        }

        @CustomType.Setter
        public Builder accountType(@Nullable String accountType) {
            this.accountType = accountType;
            return this;
        }
        @CustomType.Setter
        public Builder billToCustAccountId(@Nullable String billToCustAccountId) {
            this.billToCustAccountId = billToCustAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder billingAddresses(@Nullable List<GetSubscriptionBillingAddress> billingAddresses) {
            this.billingAddresses = billingAddresses;
            return this;
        }
        public Builder billingAddresses(GetSubscriptionBillingAddress... billingAddresses) {
            return billingAddresses(List.of(billingAddresses));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder currencyCode(@Nullable String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder gsiOrgCode(@Nullable String gsiOrgCode) {
            this.gsiOrgCode = gsiOrgCode;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIntentToPay(@Nullable Boolean isIntentToPay) {
            this.isIntentToPay = isIntentToPay;
            return this;
        }
        @CustomType.Setter
        public Builder languageCode(@Nullable String languageCode) {
            this.languageCode = languageCode;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(@Nullable String organizationId) {
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder ospHomeRegion(String ospHomeRegion) {
            this.ospHomeRegion = Objects.requireNonNull(ospHomeRegion);
            return this;
        }
        @CustomType.Setter
        public Builder paymentGateways(@Nullable List<GetSubscriptionPaymentGateway> paymentGateways) {
            this.paymentGateways = paymentGateways;
            return this;
        }
        public Builder paymentGateways(GetSubscriptionPaymentGateway... paymentGateways) {
            return paymentGateways(List.of(paymentGateways));
        }
        @CustomType.Setter
        public Builder paymentOptions(@Nullable List<GetSubscriptionPaymentOption> paymentOptions) {
            this.paymentOptions = paymentOptions;
            return this;
        }
        public Builder paymentOptions(GetSubscriptionPaymentOption... paymentOptions) {
            return paymentOptions(List.of(paymentOptions));
        }
        @CustomType.Setter
        public Builder planType(@Nullable String planType) {
            this.planType = planType;
            return this;
        }
        @CustomType.Setter
        public Builder shipToCustAcctRoleId(@Nullable String shipToCustAcctRoleId) {
            this.shipToCustAcctRoleId = shipToCustAcctRoleId;
            return this;
        }
        @CustomType.Setter
        public Builder shipToCustAcctSiteId(@Nullable String shipToCustAcctSiteId) {
            this.shipToCustAcctSiteId = shipToCustAcctSiteId;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionPlanNumber(@Nullable String subscriptionPlanNumber) {
            this.subscriptionPlanNumber = subscriptionPlanNumber;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptions(@Nullable List<GetSubscriptionSubscription> subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }
        public Builder subscriptions(GetSubscriptionSubscription... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }
        @CustomType.Setter
        public Builder taxInfos(@Nullable List<GetSubscriptionTaxInfo> taxInfos) {
            this.taxInfos = taxInfos;
            return this;
        }
        public Builder taxInfos(GetSubscriptionTaxInfo... taxInfos) {
            return taxInfos(List.of(taxInfos));
        }
        @CustomType.Setter
        public Builder timePersonalToCorporateConv(@Nullable String timePersonalToCorporateConv) {
            this.timePersonalToCorporateConv = timePersonalToCorporateConv;
            return this;
        }
        @CustomType.Setter
        public Builder timePlanUpgrade(@Nullable String timePlanUpgrade) {
            this.timePlanUpgrade = timePlanUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeState(@Nullable String upgradeState) {
            this.upgradeState = upgradeState;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeStateDetails(@Nullable String upgradeStateDetails) {
            this.upgradeStateDetails = upgradeStateDetails;
            return this;
        }
        public GetSubscriptionResult build() {
            final var o = new GetSubscriptionResult();
            o.accountType = accountType;
            o.billToCustAccountId = billToCustAccountId;
            o.billingAddresses = billingAddresses;
            o.compartmentId = compartmentId;
            o.currencyCode = currencyCode;
            o.email = email;
            o.gsiOrgCode = gsiOrgCode;
            o.id = id;
            o.isIntentToPay = isIntentToPay;
            o.languageCode = languageCode;
            o.organizationId = organizationId;
            o.ospHomeRegion = ospHomeRegion;
            o.paymentGateways = paymentGateways;
            o.paymentOptions = paymentOptions;
            o.planType = planType;
            o.shipToCustAcctRoleId = shipToCustAcctRoleId;
            o.shipToCustAcctSiteId = shipToCustAcctSiteId;
            o.subscriptionId = subscriptionId;
            o.subscriptionPlanNumber = subscriptionPlanNumber;
            o.subscriptions = subscriptions;
            o.taxInfos = taxInfos;
            o.timePersonalToCorporateConv = timePersonalToCorporateConv;
            o.timePlanUpgrade = timePlanUpgrade;
            o.timeStart = timeStart;
            o.upgradeState = upgradeState;
            o.upgradeStateDetails = upgradeStateDetails;
            return o;
        }
    }
}
