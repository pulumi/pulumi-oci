// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionsSubscriptionCollectionItemBillingAddress;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionsSubscriptionCollectionItemPaymentGateway;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionsSubscriptionCollectionItemPaymentOption;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionsSubscriptionCollectionItemSubscription;
import com.pulumi.oci.OspGateway.outputs.GetSubscriptionsSubscriptionCollectionItemTaxInfo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSubscriptionsSubscriptionCollectionItem {
    /**
     * @return Account type.
     * 
     */
    private String accountType;
    /**
     * @return Bill to customer Account id.
     * 
     */
    private String billToCustAccountId;
    /**
     * @return Address details model.
     * 
     */
    private List<GetSubscriptionsSubscriptionCollectionItemBillingAddress> billingAddresses;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Currency code
     * 
     */
    private String currencyCode;
    private String email;
    /**
     * @return GSI Subscription external code.
     * 
     */
    private String gsiOrgCode;
    /**
     * @return Subscription id identifier (OCID).
     * 
     */
    private String id;
    /**
     * @return Payment intension.
     * 
     */
    private Boolean isIntentToPay;
    /**
     * @return Language short code (en, de, hu, etc)
     * 
     */
    private String languageCode;
    /**
     * @return GSI organization external identifier.
     * 
     */
    private String organizationId;
    /**
     * @return The home region&#39;s public name of the logged in user.
     * 
     */
    private String ospHomeRegion;
    /**
     * @return Payment gateway details.
     * 
     */
    private List<GetSubscriptionsSubscriptionCollectionItemPaymentGateway> paymentGateways;
    /**
     * @return Payment option list of a subscription.
     * 
     */
    private List<GetSubscriptionsSubscriptionCollectionItemPaymentOption> paymentOptions;
    /**
     * @return Subscription plan type.
     * 
     */
    private String planType;
    /**
     * @return Ship to customer account role.
     * 
     */
    private String shipToCustAcctRoleId;
    /**
     * @return Ship to customer account site address id.
     * 
     */
    private String shipToCustAcctSiteId;
    private String subscriptionId;
    /**
     * @return Subscription plan number.
     * 
     */
    private String subscriptionPlanNumber;
    private List<GetSubscriptionsSubscriptionCollectionItemSubscription> subscriptions;
    /**
     * @return Tax details.
     * 
     */
    private List<GetSubscriptionsSubscriptionCollectionItemTaxInfo> taxInfos;
    /**
     * @return Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
     * 
     */
    private String timePersonalToCorporateConv;
    /**
     * @return Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
     * 
     */
    private String timePlanUpgrade;
    /**
     * @return Start date of the subscription.
     * 
     */
    private String timeStart;
    /**
     * @return Status of the upgrade.
     * 
     */
    private String upgradeState;
    /**
     * @return This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
     * 
     */
    private String upgradeStateDetails;

    private GetSubscriptionsSubscriptionCollectionItem() {}
    /**
     * @return Account type.
     * 
     */
    public String accountType() {
        return this.accountType;
    }
    /**
     * @return Bill to customer Account id.
     * 
     */
    public String billToCustAccountId() {
        return this.billToCustAccountId;
    }
    /**
     * @return Address details model.
     * 
     */
    public List<GetSubscriptionsSubscriptionCollectionItemBillingAddress> billingAddresses() {
        return this.billingAddresses;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Currency code
     * 
     */
    public String currencyCode() {
        return this.currencyCode;
    }
    public String email() {
        return this.email;
    }
    /**
     * @return GSI Subscription external code.
     * 
     */
    public String gsiOrgCode() {
        return this.gsiOrgCode;
    }
    /**
     * @return Subscription id identifier (OCID).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Payment intension.
     * 
     */
    public Boolean isIntentToPay() {
        return this.isIntentToPay;
    }
    /**
     * @return Language short code (en, de, hu, etc)
     * 
     */
    public String languageCode() {
        return this.languageCode;
    }
    /**
     * @return GSI organization external identifier.
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return The home region&#39;s public name of the logged in user.
     * 
     */
    public String ospHomeRegion() {
        return this.ospHomeRegion;
    }
    /**
     * @return Payment gateway details.
     * 
     */
    public List<GetSubscriptionsSubscriptionCollectionItemPaymentGateway> paymentGateways() {
        return this.paymentGateways;
    }
    /**
     * @return Payment option list of a subscription.
     * 
     */
    public List<GetSubscriptionsSubscriptionCollectionItemPaymentOption> paymentOptions() {
        return this.paymentOptions;
    }
    /**
     * @return Subscription plan type.
     * 
     */
    public String planType() {
        return this.planType;
    }
    /**
     * @return Ship to customer account role.
     * 
     */
    public String shipToCustAcctRoleId() {
        return this.shipToCustAcctRoleId;
    }
    /**
     * @return Ship to customer account site address id.
     * 
     */
    public String shipToCustAcctSiteId() {
        return this.shipToCustAcctSiteId;
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Subscription plan number.
     * 
     */
    public String subscriptionPlanNumber() {
        return this.subscriptionPlanNumber;
    }
    public List<GetSubscriptionsSubscriptionCollectionItemSubscription> subscriptions() {
        return this.subscriptions;
    }
    /**
     * @return Tax details.
     * 
     */
    public List<GetSubscriptionsSubscriptionCollectionItemTaxInfo> taxInfos() {
        return this.taxInfos;
    }
    /**
     * @return Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
     * 
     */
    public String timePersonalToCorporateConv() {
        return this.timePersonalToCorporateConv;
    }
    /**
     * @return Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
     * 
     */
    public String timePlanUpgrade() {
        return this.timePlanUpgrade;
    }
    /**
     * @return Start date of the subscription.
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }
    /**
     * @return Status of the upgrade.
     * 
     */
    public String upgradeState() {
        return this.upgradeState;
    }
    /**
     * @return This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
     * 
     */
    public String upgradeStateDetails() {
        return this.upgradeStateDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionsSubscriptionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountType;
        private String billToCustAccountId;
        private List<GetSubscriptionsSubscriptionCollectionItemBillingAddress> billingAddresses;
        private String compartmentId;
        private String currencyCode;
        private String email;
        private String gsiOrgCode;
        private String id;
        private Boolean isIntentToPay;
        private String languageCode;
        private String organizationId;
        private String ospHomeRegion;
        private List<GetSubscriptionsSubscriptionCollectionItemPaymentGateway> paymentGateways;
        private List<GetSubscriptionsSubscriptionCollectionItemPaymentOption> paymentOptions;
        private String planType;
        private String shipToCustAcctRoleId;
        private String shipToCustAcctSiteId;
        private String subscriptionId;
        private String subscriptionPlanNumber;
        private List<GetSubscriptionsSubscriptionCollectionItemSubscription> subscriptions;
        private List<GetSubscriptionsSubscriptionCollectionItemTaxInfo> taxInfos;
        private String timePersonalToCorporateConv;
        private String timePlanUpgrade;
        private String timeStart;
        private String upgradeState;
        private String upgradeStateDetails;
        public Builder() {}
        public Builder(GetSubscriptionsSubscriptionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountType = defaults.accountType;
    	      this.billToCustAccountId = defaults.billToCustAccountId;
    	      this.billingAddresses = defaults.billingAddresses;
    	      this.compartmentId = defaults.compartmentId;
    	      this.currencyCode = defaults.currencyCode;
    	      this.email = defaults.email;
    	      this.gsiOrgCode = defaults.gsiOrgCode;
    	      this.id = defaults.id;
    	      this.isIntentToPay = defaults.isIntentToPay;
    	      this.languageCode = defaults.languageCode;
    	      this.organizationId = defaults.organizationId;
    	      this.ospHomeRegion = defaults.ospHomeRegion;
    	      this.paymentGateways = defaults.paymentGateways;
    	      this.paymentOptions = defaults.paymentOptions;
    	      this.planType = defaults.planType;
    	      this.shipToCustAcctRoleId = defaults.shipToCustAcctRoleId;
    	      this.shipToCustAcctSiteId = defaults.shipToCustAcctSiteId;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.subscriptionPlanNumber = defaults.subscriptionPlanNumber;
    	      this.subscriptions = defaults.subscriptions;
    	      this.taxInfos = defaults.taxInfos;
    	      this.timePersonalToCorporateConv = defaults.timePersonalToCorporateConv;
    	      this.timePlanUpgrade = defaults.timePlanUpgrade;
    	      this.timeStart = defaults.timeStart;
    	      this.upgradeState = defaults.upgradeState;
    	      this.upgradeStateDetails = defaults.upgradeStateDetails;
        }

        @CustomType.Setter
        public Builder accountType(String accountType) {
            if (accountType == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "accountType");
            }
            this.accountType = accountType;
            return this;
        }
        @CustomType.Setter
        public Builder billToCustAccountId(String billToCustAccountId) {
            if (billToCustAccountId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "billToCustAccountId");
            }
            this.billToCustAccountId = billToCustAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder billingAddresses(List<GetSubscriptionsSubscriptionCollectionItemBillingAddress> billingAddresses) {
            if (billingAddresses == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "billingAddresses");
            }
            this.billingAddresses = billingAddresses;
            return this;
        }
        public Builder billingAddresses(GetSubscriptionsSubscriptionCollectionItemBillingAddress... billingAddresses) {
            return billingAddresses(List.of(billingAddresses));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currencyCode(String currencyCode) {
            if (currencyCode == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "currencyCode");
            }
            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder gsiOrgCode(String gsiOrgCode) {
            if (gsiOrgCode == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "gsiOrgCode");
            }
            this.gsiOrgCode = gsiOrgCode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isIntentToPay(Boolean isIntentToPay) {
            if (isIntentToPay == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "isIntentToPay");
            }
            this.isIntentToPay = isIntentToPay;
            return this;
        }
        @CustomType.Setter
        public Builder languageCode(String languageCode) {
            if (languageCode == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "languageCode");
            }
            this.languageCode = languageCode;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder ospHomeRegion(String ospHomeRegion) {
            if (ospHomeRegion == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "ospHomeRegion");
            }
            this.ospHomeRegion = ospHomeRegion;
            return this;
        }
        @CustomType.Setter
        public Builder paymentGateways(List<GetSubscriptionsSubscriptionCollectionItemPaymentGateway> paymentGateways) {
            if (paymentGateways == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "paymentGateways");
            }
            this.paymentGateways = paymentGateways;
            return this;
        }
        public Builder paymentGateways(GetSubscriptionsSubscriptionCollectionItemPaymentGateway... paymentGateways) {
            return paymentGateways(List.of(paymentGateways));
        }
        @CustomType.Setter
        public Builder paymentOptions(List<GetSubscriptionsSubscriptionCollectionItemPaymentOption> paymentOptions) {
            if (paymentOptions == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "paymentOptions");
            }
            this.paymentOptions = paymentOptions;
            return this;
        }
        public Builder paymentOptions(GetSubscriptionsSubscriptionCollectionItemPaymentOption... paymentOptions) {
            return paymentOptions(List.of(paymentOptions));
        }
        @CustomType.Setter
        public Builder planType(String planType) {
            if (planType == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "planType");
            }
            this.planType = planType;
            return this;
        }
        @CustomType.Setter
        public Builder shipToCustAcctRoleId(String shipToCustAcctRoleId) {
            if (shipToCustAcctRoleId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "shipToCustAcctRoleId");
            }
            this.shipToCustAcctRoleId = shipToCustAcctRoleId;
            return this;
        }
        @CustomType.Setter
        public Builder shipToCustAcctSiteId(String shipToCustAcctSiteId) {
            if (shipToCustAcctSiteId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "shipToCustAcctSiteId");
            }
            this.shipToCustAcctSiteId = shipToCustAcctSiteId;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionPlanNumber(String subscriptionPlanNumber) {
            if (subscriptionPlanNumber == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "subscriptionPlanNumber");
            }
            this.subscriptionPlanNumber = subscriptionPlanNumber;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptions(List<GetSubscriptionsSubscriptionCollectionItemSubscription> subscriptions) {
            if (subscriptions == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "subscriptions");
            }
            this.subscriptions = subscriptions;
            return this;
        }
        public Builder subscriptions(GetSubscriptionsSubscriptionCollectionItemSubscription... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }
        @CustomType.Setter
        public Builder taxInfos(List<GetSubscriptionsSubscriptionCollectionItemTaxInfo> taxInfos) {
            if (taxInfos == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "taxInfos");
            }
            this.taxInfos = taxInfos;
            return this;
        }
        public Builder taxInfos(GetSubscriptionsSubscriptionCollectionItemTaxInfo... taxInfos) {
            return taxInfos(List.of(taxInfos));
        }
        @CustomType.Setter
        public Builder timePersonalToCorporateConv(String timePersonalToCorporateConv) {
            if (timePersonalToCorporateConv == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "timePersonalToCorporateConv");
            }
            this.timePersonalToCorporateConv = timePersonalToCorporateConv;
            return this;
        }
        @CustomType.Setter
        public Builder timePlanUpgrade(String timePlanUpgrade) {
            if (timePlanUpgrade == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "timePlanUpgrade");
            }
            this.timePlanUpgrade = timePlanUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(String timeStart) {
            if (timeStart == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "timeStart");
            }
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeState(String upgradeState) {
            if (upgradeState == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "upgradeState");
            }
            this.upgradeState = upgradeState;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeStateDetails(String upgradeStateDetails) {
            if (upgradeStateDetails == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionsSubscriptionCollectionItem", "upgradeStateDetails");
            }
            this.upgradeStateDetails = upgradeStateDetails;
            return this;
        }
        public GetSubscriptionsSubscriptionCollectionItem build() {
            final var _resultValue = new GetSubscriptionsSubscriptionCollectionItem();
            _resultValue.accountType = accountType;
            _resultValue.billToCustAccountId = billToCustAccountId;
            _resultValue.billingAddresses = billingAddresses;
            _resultValue.compartmentId = compartmentId;
            _resultValue.currencyCode = currencyCode;
            _resultValue.email = email;
            _resultValue.gsiOrgCode = gsiOrgCode;
            _resultValue.id = id;
            _resultValue.isIntentToPay = isIntentToPay;
            _resultValue.languageCode = languageCode;
            _resultValue.organizationId = organizationId;
            _resultValue.ospHomeRegion = ospHomeRegion;
            _resultValue.paymentGateways = paymentGateways;
            _resultValue.paymentOptions = paymentOptions;
            _resultValue.planType = planType;
            _resultValue.shipToCustAcctRoleId = shipToCustAcctRoleId;
            _resultValue.shipToCustAcctSiteId = shipToCustAcctSiteId;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.subscriptionPlanNumber = subscriptionPlanNumber;
            _resultValue.subscriptions = subscriptions;
            _resultValue.taxInfos = taxInfos;
            _resultValue.timePersonalToCorporateConv = timePersonalToCorporateConv;
            _resultValue.timePlanUpgrade = timePlanUpgrade;
            _resultValue.timeStart = timeStart;
            _resultValue.upgradeState = upgradeState;
            _resultValue.upgradeStateDetails = upgradeStateDetails;
            return _resultValue;
        }
    }
}
