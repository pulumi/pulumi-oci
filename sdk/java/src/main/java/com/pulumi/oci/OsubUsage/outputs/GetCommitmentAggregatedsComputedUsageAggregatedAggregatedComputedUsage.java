// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsubUsage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsubUsage.outputs.GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage {
    /**
     * @return Sum of Computed Line Amount rounded
     * 
     */
    private @Nullable String cost;
    /**
     * @return Sum of Computed Line Amount unrounded
     * 
     */
    private @Nullable String costUnrounded;
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    private @Nullable String dataCenter;
    /**
     * @return Net Unit Price for the product in consideration.
     * 
     */
    private @Nullable String netUnitPrice;
    /**
     * @return Product description
     * 
     */
    private @Nullable List<GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct> products;
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    private @Nullable String quantity;
    /**
     * @return Metered Service date , expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timeMeteredOn;
    /**
     * @return Usage compute type in SPM.
     * 
     */
    private @Nullable String type;

    private GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage() {}
    /**
     * @return Sum of Computed Line Amount rounded
     * 
     */
    public Optional<String> cost() {
        return Optional.ofNullable(this.cost);
    }
    /**
     * @return Sum of Computed Line Amount unrounded
     * 
     */
    public Optional<String> costUnrounded() {
        return Optional.ofNullable(this.costUnrounded);
    }
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    public Optional<String> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }
    /**
     * @return Net Unit Price for the product in consideration.
     * 
     */
    public Optional<String> netUnitPrice() {
        return Optional.ofNullable(this.netUnitPrice);
    }
    /**
     * @return Product description
     * 
     */
    public List<GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct> products() {
        return this.products == null ? List.of() : this.products;
    }
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    public Optional<String> quantity() {
        return Optional.ofNullable(this.quantity);
    }
    /**
     * @return Metered Service date , expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timeMeteredOn() {
        return Optional.ofNullable(this.timeMeteredOn);
    }
    /**
     * @return Usage compute type in SPM.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cost;
        private @Nullable String costUnrounded;
        private @Nullable String dataCenter;
        private @Nullable String netUnitPrice;
        private @Nullable List<GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct> products;
        private @Nullable String quantity;
        private @Nullable String timeMeteredOn;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cost = defaults.cost;
    	      this.costUnrounded = defaults.costUnrounded;
    	      this.dataCenter = defaults.dataCenter;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.products = defaults.products;
    	      this.quantity = defaults.quantity;
    	      this.timeMeteredOn = defaults.timeMeteredOn;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cost(@Nullable String cost) {
            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder costUnrounded(@Nullable String costUnrounded) {
            this.costUnrounded = costUnrounded;
            return this;
        }
        @CustomType.Setter
        public Builder dataCenter(@Nullable String dataCenter) {
            this.dataCenter = dataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder netUnitPrice(@Nullable String netUnitPrice) {
            this.netUnitPrice = netUnitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder products(@Nullable List<GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct> products) {
            this.products = products;
            return this;
        }
        public Builder products(GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder quantity(@Nullable String quantity) {
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder timeMeteredOn(@Nullable String timeMeteredOn) {
            this.timeMeteredOn = timeMeteredOn;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage build() {
            final var o = new GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsage();
            o.cost = cost;
            o.costUnrounded = costUnrounded;
            o.dataCenter = dataCenter;
            o.netUnitPrice = netUnitPrice;
            o.products = products;
            o.quantity = quantity;
            o.timeMeteredOn = timeMeteredOn;
            o.type = type;
            return o;
        }
    }
}
