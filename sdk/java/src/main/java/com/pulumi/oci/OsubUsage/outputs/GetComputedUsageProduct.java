// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsubUsage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetComputedUsageProduct {
    /**
     * @return Metered service billing category
     * 
     */
    private String billingCategory;
    /**
     * @return Product name
     * 
     */
    private String name;
    /**
     * @return Product part number
     * 
     */
    private String partNumber;
    /**
     * @return Product category
     * 
     */
    private String productCategory;
    /**
     * @return Product provisioning group
     * 
     */
    private String provisioningGroup;
    /**
     * @return Rate card part type of Product
     * 
     */
    private String ucmRateCardPartType;
    /**
     * @return Unit of Messure
     * 
     */
    private String unitOfMeasure;

    private GetComputedUsageProduct() {}
    /**
     * @return Metered service billing category
     * 
     */
    public String billingCategory() {
        return this.billingCategory;
    }
    /**
     * @return Product name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Product part number
     * 
     */
    public String partNumber() {
        return this.partNumber;
    }
    /**
     * @return Product category
     * 
     */
    public String productCategory() {
        return this.productCategory;
    }
    /**
     * @return Product provisioning group
     * 
     */
    public String provisioningGroup() {
        return this.provisioningGroup;
    }
    /**
     * @return Rate card part type of Product
     * 
     */
    public String ucmRateCardPartType() {
        return this.ucmRateCardPartType;
    }
    /**
     * @return Unit of Messure
     * 
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputedUsageProduct defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String billingCategory;
        private String name;
        private String partNumber;
        private String productCategory;
        private String provisioningGroup;
        private String ucmRateCardPartType;
        private String unitOfMeasure;
        public Builder() {}
        public Builder(GetComputedUsageProduct defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCategory = defaults.billingCategory;
    	      this.name = defaults.name;
    	      this.partNumber = defaults.partNumber;
    	      this.productCategory = defaults.productCategory;
    	      this.provisioningGroup = defaults.provisioningGroup;
    	      this.ucmRateCardPartType = defaults.ucmRateCardPartType;
    	      this.unitOfMeasure = defaults.unitOfMeasure;
        }

        @CustomType.Setter
        public Builder billingCategory(String billingCategory) {
            if (billingCategory == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "billingCategory");
            }
            this.billingCategory = billingCategory;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partNumber(String partNumber) {
            if (partNumber == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "partNumber");
            }
            this.partNumber = partNumber;
            return this;
        }
        @CustomType.Setter
        public Builder productCategory(String productCategory) {
            if (productCategory == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "productCategory");
            }
            this.productCategory = productCategory;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningGroup(String provisioningGroup) {
            if (provisioningGroup == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "provisioningGroup");
            }
            this.provisioningGroup = provisioningGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ucmRateCardPartType(String ucmRateCardPartType) {
            if (ucmRateCardPartType == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "ucmRateCardPartType");
            }
            this.ucmRateCardPartType = ucmRateCardPartType;
            return this;
        }
        @CustomType.Setter
        public Builder unitOfMeasure(String unitOfMeasure) {
            if (unitOfMeasure == null) {
              throw new MissingRequiredPropertyException("GetComputedUsageProduct", "unitOfMeasure");
            }
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }
        public GetComputedUsageProduct build() {
            final var _resultValue = new GetComputedUsageProduct();
            _resultValue.billingCategory = billingCategory;
            _resultValue.name = name;
            _resultValue.partNumber = partNumber;
            _resultValue.productCategory = productCategory;
            _resultValue.provisioningGroup = provisioningGroup;
            _resultValue.ucmRateCardPartType = ucmRateCardPartType;
            _resultValue.unitOfMeasure = unitOfMeasure;
            return _resultValue;
        }
    }
}
