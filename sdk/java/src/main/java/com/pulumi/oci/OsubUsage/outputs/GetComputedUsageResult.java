// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsubUsage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsubUsage.outputs.GetComputedUsageParentProduct;
import com.pulumi.oci.OsubUsage.outputs.GetComputedUsageProduct;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetComputedUsageResult {
    /**
     * @return Subscribed service commitmentId.
     * 
     */
    private @Nullable String commitmentServiceId;
    private String compartmentId;
    /**
     * @return SPM Internal compute records source .
     * 
     */
    private @Nullable String computeSource;
    private String computedUsageId;
    /**
     * @return Computed Line Amount not rounded
     * 
     */
    private @Nullable String cost;
    /**
     * @return Computed Line Amount rounded.
     * 
     */
    private @Nullable String costRounded;
    /**
     * @return Currency code
     * 
     */
    private @Nullable String currencyCode;
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    private @Nullable String dataCenter;
    private @Nullable List<String> fields;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Invoicing status for the aggregated compute usage
     * 
     */
    private @Nullable Boolean isInvoiced;
    /**
     * @return MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
     * 
     */
    private @Nullable String mqsMessageId;
    /**
     * @return Net Unit Price for the product in consideration, price actual.
     * 
     */
    private @Nullable String netUnitPrice;
    /**
     * @return SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
     * 
     */
    private @Nullable String originalUsageNumber;
    /**
     * @return Product description
     * 
     */
    private @Nullable List<GetComputedUsageParentProduct> parentProducts;
    /**
     * @return Subscribed service line parent id
     * 
     */
    private @Nullable String parentSubscribedServiceId;
    /**
     * @return Subscription plan number
     * 
     */
    private @Nullable String planNumber;
    /**
     * @return Product description
     * 
     */
    private @Nullable List<GetComputedUsageProduct> products;
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    private @Nullable String quantity;
    /**
     * @return Ratecard Id at subscribed service level
     * 
     */
    private @Nullable String rateCardId;
    /**
     * @return References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
     * 
     */
    private @Nullable String rateCardTierdId;
    /**
     * @return Computed Usage created time, expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Metered Service date, expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timeMeteredOn;
    /**
     * @return Usae computation date, expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timeOfArrival;
    /**
     * @return Computed Usage updated time, expressed in RFC 3339 timestamp format.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return Usage compute type in SPM.
     * 
     */
    private @Nullable String type;
    /**
     * @return Unit of Messure
     * 
     */
    private @Nullable String unitOfMeasure;
    /**
     * @return SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
     * 
     */
    private @Nullable String usageNumber;
    private @Nullable String xOneOriginRegion;

    private GetComputedUsageResult() {}
    /**
     * @return Subscribed service commitmentId.
     * 
     */
    public Optional<String> commitmentServiceId() {
        return Optional.ofNullable(this.commitmentServiceId);
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return SPM Internal compute records source .
     * 
     */
    public Optional<String> computeSource() {
        return Optional.ofNullable(this.computeSource);
    }
    public String computedUsageId() {
        return this.computedUsageId;
    }
    /**
     * @return Computed Line Amount not rounded
     * 
     */
    public Optional<String> cost() {
        return Optional.ofNullable(this.cost);
    }
    /**
     * @return Computed Line Amount rounded.
     * 
     */
    public Optional<String> costRounded() {
        return Optional.ofNullable(this.costRounded);
    }
    /**
     * @return Currency code
     * 
     */
    public Optional<String> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }
    /**
     * @return Data Center Attribute as sent by MQS to SPM.
     * 
     */
    public Optional<String> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Invoicing status for the aggregated compute usage
     * 
     */
    public Optional<Boolean> isInvoiced() {
        return Optional.ofNullable(this.isInvoiced);
    }
    /**
     * @return MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
     * 
     */
    public Optional<String> mqsMessageId() {
        return Optional.ofNullable(this.mqsMessageId);
    }
    /**
     * @return Net Unit Price for the product in consideration, price actual.
     * 
     */
    public Optional<String> netUnitPrice() {
        return Optional.ofNullable(this.netUnitPrice);
    }
    /**
     * @return SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
     * 
     */
    public Optional<String> originalUsageNumber() {
        return Optional.ofNullable(this.originalUsageNumber);
    }
    /**
     * @return Product description
     * 
     */
    public List<GetComputedUsageParentProduct> parentProducts() {
        return this.parentProducts == null ? List.of() : this.parentProducts;
    }
    /**
     * @return Subscribed service line parent id
     * 
     */
    public Optional<String> parentSubscribedServiceId() {
        return Optional.ofNullable(this.parentSubscribedServiceId);
    }
    /**
     * @return Subscription plan number
     * 
     */
    public Optional<String> planNumber() {
        return Optional.ofNullable(this.planNumber);
    }
    /**
     * @return Product description
     * 
     */
    public List<GetComputedUsageProduct> products() {
        return this.products == null ? List.of() : this.products;
    }
    /**
     * @return Total Quantity that was used for computation
     * 
     */
    public Optional<String> quantity() {
        return Optional.ofNullable(this.quantity);
    }
    /**
     * @return Ratecard Id at subscribed service level
     * 
     */
    public Optional<String> rateCardId() {
        return Optional.ofNullable(this.rateCardId);
    }
    /**
     * @return References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
     * 
     */
    public Optional<String> rateCardTierdId() {
        return Optional.ofNullable(this.rateCardTierdId);
    }
    /**
     * @return Computed Usage created time, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Metered Service date, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timeMeteredOn() {
        return Optional.ofNullable(this.timeMeteredOn);
    }
    /**
     * @return Usae computation date, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timeOfArrival() {
        return Optional.ofNullable(this.timeOfArrival);
    }
    /**
     * @return Computed Usage updated time, expressed in RFC 3339 timestamp format.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return Usage compute type in SPM.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Unit of Messure
     * 
     */
    public Optional<String> unitOfMeasure() {
        return Optional.ofNullable(this.unitOfMeasure);
    }
    /**
     * @return SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
     * 
     */
    public Optional<String> usageNumber() {
        return Optional.ofNullable(this.usageNumber);
    }
    public Optional<String> xOneOriginRegion() {
        return Optional.ofNullable(this.xOneOriginRegion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputedUsageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String commitmentServiceId;
        private String compartmentId;
        private @Nullable String computeSource;
        private String computedUsageId;
        private @Nullable String cost;
        private @Nullable String costRounded;
        private @Nullable String currencyCode;
        private @Nullable String dataCenter;
        private @Nullable List<String> fields;
        private @Nullable String id;
        private @Nullable Boolean isInvoiced;
        private @Nullable String mqsMessageId;
        private @Nullable String netUnitPrice;
        private @Nullable String originalUsageNumber;
        private @Nullable List<GetComputedUsageParentProduct> parentProducts;
        private @Nullable String parentSubscribedServiceId;
        private @Nullable String planNumber;
        private @Nullable List<GetComputedUsageProduct> products;
        private @Nullable String quantity;
        private @Nullable String rateCardId;
        private @Nullable String rateCardTierdId;
        private @Nullable String timeCreated;
        private @Nullable String timeMeteredOn;
        private @Nullable String timeOfArrival;
        private @Nullable String timeUpdated;
        private @Nullable String type;
        private @Nullable String unitOfMeasure;
        private @Nullable String usageNumber;
        private @Nullable String xOneOriginRegion;
        public Builder() {}
        public Builder(GetComputedUsageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitmentServiceId = defaults.commitmentServiceId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeSource = defaults.computeSource;
    	      this.computedUsageId = defaults.computedUsageId;
    	      this.cost = defaults.cost;
    	      this.costRounded = defaults.costRounded;
    	      this.currencyCode = defaults.currencyCode;
    	      this.dataCenter = defaults.dataCenter;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.isInvoiced = defaults.isInvoiced;
    	      this.mqsMessageId = defaults.mqsMessageId;
    	      this.netUnitPrice = defaults.netUnitPrice;
    	      this.originalUsageNumber = defaults.originalUsageNumber;
    	      this.parentProducts = defaults.parentProducts;
    	      this.parentSubscribedServiceId = defaults.parentSubscribedServiceId;
    	      this.planNumber = defaults.planNumber;
    	      this.products = defaults.products;
    	      this.quantity = defaults.quantity;
    	      this.rateCardId = defaults.rateCardId;
    	      this.rateCardTierdId = defaults.rateCardTierdId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMeteredOn = defaults.timeMeteredOn;
    	      this.timeOfArrival = defaults.timeOfArrival;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.unitOfMeasure = defaults.unitOfMeasure;
    	      this.usageNumber = defaults.usageNumber;
    	      this.xOneOriginRegion = defaults.xOneOriginRegion;
        }

        @CustomType.Setter
        public Builder commitmentServiceId(@Nullable String commitmentServiceId) {
            this.commitmentServiceId = commitmentServiceId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder computeSource(@Nullable String computeSource) {
            this.computeSource = computeSource;
            return this;
        }
        @CustomType.Setter
        public Builder computedUsageId(String computedUsageId) {
            this.computedUsageId = Objects.requireNonNull(computedUsageId);
            return this;
        }
        @CustomType.Setter
        public Builder cost(@Nullable String cost) {
            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder costRounded(@Nullable String costRounded) {
            this.costRounded = costRounded;
            return this;
        }
        @CustomType.Setter
        public Builder currencyCode(@Nullable String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder dataCenter(@Nullable String dataCenter) {
            this.dataCenter = dataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isInvoiced(@Nullable Boolean isInvoiced) {
            this.isInvoiced = isInvoiced;
            return this;
        }
        @CustomType.Setter
        public Builder mqsMessageId(@Nullable String mqsMessageId) {
            this.mqsMessageId = mqsMessageId;
            return this;
        }
        @CustomType.Setter
        public Builder netUnitPrice(@Nullable String netUnitPrice) {
            this.netUnitPrice = netUnitPrice;
            return this;
        }
        @CustomType.Setter
        public Builder originalUsageNumber(@Nullable String originalUsageNumber) {
            this.originalUsageNumber = originalUsageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder parentProducts(@Nullable List<GetComputedUsageParentProduct> parentProducts) {
            this.parentProducts = parentProducts;
            return this;
        }
        public Builder parentProducts(GetComputedUsageParentProduct... parentProducts) {
            return parentProducts(List.of(parentProducts));
        }
        @CustomType.Setter
        public Builder parentSubscribedServiceId(@Nullable String parentSubscribedServiceId) {
            this.parentSubscribedServiceId = parentSubscribedServiceId;
            return this;
        }
        @CustomType.Setter
        public Builder planNumber(@Nullable String planNumber) {
            this.planNumber = planNumber;
            return this;
        }
        @CustomType.Setter
        public Builder products(@Nullable List<GetComputedUsageProduct> products) {
            this.products = products;
            return this;
        }
        public Builder products(GetComputedUsageProduct... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder quantity(@Nullable String quantity) {
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder rateCardId(@Nullable String rateCardId) {
            this.rateCardId = rateCardId;
            return this;
        }
        @CustomType.Setter
        public Builder rateCardTierdId(@Nullable String rateCardTierdId) {
            this.rateCardTierdId = rateCardTierdId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMeteredOn(@Nullable String timeMeteredOn) {
            this.timeMeteredOn = timeMeteredOn;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfArrival(@Nullable String timeOfArrival) {
            this.timeOfArrival = timeOfArrival;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unitOfMeasure(@Nullable String unitOfMeasure) {
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }
        @CustomType.Setter
        public Builder usageNumber(@Nullable String usageNumber) {
            this.usageNumber = usageNumber;
            return this;
        }
        @CustomType.Setter
        public Builder xOneOriginRegion(@Nullable String xOneOriginRegion) {
            this.xOneOriginRegion = xOneOriginRegion;
            return this;
        }
        public GetComputedUsageResult build() {
            final var o = new GetComputedUsageResult();
            o.commitmentServiceId = commitmentServiceId;
            o.compartmentId = compartmentId;
            o.computeSource = computeSource;
            o.computedUsageId = computedUsageId;
            o.cost = cost;
            o.costRounded = costRounded;
            o.currencyCode = currencyCode;
            o.dataCenter = dataCenter;
            o.fields = fields;
            o.id = id;
            o.isInvoiced = isInvoiced;
            o.mqsMessageId = mqsMessageId;
            o.netUnitPrice = netUnitPrice;
            o.originalUsageNumber = originalUsageNumber;
            o.parentProducts = parentProducts;
            o.parentSubscribedServiceId = parentSubscribedServiceId;
            o.planNumber = planNumber;
            o.products = products;
            o.quantity = quantity;
            o.rateCardId = rateCardId;
            o.rateCardTierdId = rateCardTierdId;
            o.timeCreated = timeCreated;
            o.timeMeteredOn = timeMeteredOn;
            o.timeOfArrival = timeOfArrival;
            o.timeUpdated = timeUpdated;
            o.type = type;
            o.unitOfMeasure = unitOfMeasure;
            o.usageNumber = usageNumber;
            o.xOneOriginRegion = xOneOriginRegion;
            return o;
        }
    }
}
