// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsubUsage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsubUsage.outputs.GetComputedUsagesComputedUsage;
import com.pulumi.oci.OsubUsage.outputs.GetComputedUsagesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetComputedUsagesResult {
    private String compartmentId;
    private @Nullable String computedProduct;
    /**
     * @return The list of computed_usages.
     * 
     */
    private List<GetComputedUsagesComputedUsage> computedUsages;
    private @Nullable List<GetComputedUsagesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Product description
     * 
     */
    private @Nullable String parentProduct;
    private String subscriptionId;
    private String timeFrom;
    private String timeTo;
    private @Nullable String xOneOriginRegion;

    private GetComputedUsagesResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> computedProduct() {
        return Optional.ofNullable(this.computedProduct);
    }
    /**
     * @return The list of computed_usages.
     * 
     */
    public List<GetComputedUsagesComputedUsage> computedUsages() {
        return this.computedUsages;
    }
    public List<GetComputedUsagesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Product description
     * 
     */
    public Optional<String> parentProduct() {
        return Optional.ofNullable(this.parentProduct);
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }
    public String timeFrom() {
        return this.timeFrom;
    }
    public String timeTo() {
        return this.timeTo;
    }
    public Optional<String> xOneOriginRegion() {
        return Optional.ofNullable(this.xOneOriginRegion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComputedUsagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String computedProduct;
        private List<GetComputedUsagesComputedUsage> computedUsages;
        private @Nullable List<GetComputedUsagesFilter> filters;
        private String id;
        private @Nullable String parentProduct;
        private String subscriptionId;
        private String timeFrom;
        private String timeTo;
        private @Nullable String xOneOriginRegion;
        public Builder() {}
        public Builder(GetComputedUsagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.computedProduct = defaults.computedProduct;
    	      this.computedUsages = defaults.computedUsages;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.parentProduct = defaults.parentProduct;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.timeFrom = defaults.timeFrom;
    	      this.timeTo = defaults.timeTo;
    	      this.xOneOriginRegion = defaults.xOneOriginRegion;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder computedProduct(@Nullable String computedProduct) {
            this.computedProduct = computedProduct;
            return this;
        }
        @CustomType.Setter
        public Builder computedUsages(List<GetComputedUsagesComputedUsage> computedUsages) {
            this.computedUsages = Objects.requireNonNull(computedUsages);
            return this;
        }
        public Builder computedUsages(GetComputedUsagesComputedUsage... computedUsages) {
            return computedUsages(List.of(computedUsages));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetComputedUsagesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetComputedUsagesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder parentProduct(@Nullable String parentProduct) {
            this.parentProduct = parentProduct;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        @CustomType.Setter
        public Builder timeFrom(String timeFrom) {
            this.timeFrom = Objects.requireNonNull(timeFrom);
            return this;
        }
        @CustomType.Setter
        public Builder timeTo(String timeTo) {
            this.timeTo = Objects.requireNonNull(timeTo);
            return this;
        }
        @CustomType.Setter
        public Builder xOneOriginRegion(@Nullable String xOneOriginRegion) {
            this.xOneOriginRegion = xOneOriginRegion;
            return this;
        }
        public GetComputedUsagesResult build() {
            final var o = new GetComputedUsagesResult();
            o.compartmentId = compartmentId;
            o.computedProduct = computedProduct;
            o.computedUsages = computedUsages;
            o.filters = filters;
            o.id = id;
            o.parentProduct = parentProduct;
            o.subscriptionId = subscriptionId;
            o.timeFrom = timeFrom;
            o.timeTo = timeTo;
            o.xOneOriginRegion = xOneOriginRegion;
            return o;
        }
    }
}
