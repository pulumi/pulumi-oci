// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * (Optional) The type of auth to use. Options are &#39;ApiKey&#39;, &#39;SecurityToken&#39;, &#39;InstancePrincipal&#39;, &#39;ResourcePrincipal&#39; and &#39;OKEWorkloadIdentity&#39;. By default, &#39;ApiKey&#39; will be used.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<String> auth;

    /**
     * @return (Optional) The type of auth to use. Options are &#39;ApiKey&#39;, &#39;SecurityToken&#39;, &#39;InstancePrincipal&#39;, &#39;ResourcePrincipal&#39; and &#39;OKEWorkloadIdentity&#39;. By default, &#39;ApiKey&#39; will be used.
     * 
     */
    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * (Optional) The profile name to be used from config file, if not set it will be DEFAULT.
     * 
     */
    @Import(name="configFileProfile")
    private @Nullable Output<String> configFileProfile;

    /**
     * @return (Optional) The profile name to be used from config file, if not set it will be DEFAULT.
     * 
     */
    public Optional<Output<String>> configFileProfile() {
        return Optional.ofNullable(this.configFileProfile);
    }

    /**
     * (Optional) Disable automatic retries for retriable errors.
     * Automatic retries were introduced to solve some eventual consistency problems but it also introduced performance issues on destroy operations.
     * 
     */
    @Import(name="disableAutoRetries", json=true)
    private @Nullable Output<Boolean> disableAutoRetries;

    /**
     * @return (Optional) Disable automatic retries for retriable errors.
     * Automatic retries were introduced to solve some eventual consistency problems but it also introduced performance issues on destroy operations.
     * 
     */
    public Optional<Output<Boolean>> disableAutoRetries() {
        return Optional.ofNullable(this.disableAutoRetries);
    }

    /**
     * (Optional) The fingerprint for the user&#39;s RSA key. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return (Optional) The fingerprint for the user&#39;s RSA key. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    @Import(name="ignoreDefinedTags", json=true)
    private @Nullable Output<List<String>> ignoreDefinedTags;

    public Optional<Output<List<String>>> ignoreDefinedTags() {
        return Optional.ofNullable(this.ignoreDefinedTags);
    }

    /**
     * (Optional) A PEM formatted RSA private key for the user.
     * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return (Optional) A PEM formatted RSA private key for the user.
     * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * (Optional) The password used to secure the private key.
     * 
     */
    @Import(name="privateKeyPassword")
    private @Nullable Output<String> privateKeyPassword;

    /**
     * @return (Optional) The password used to secure the private key.
     * 
     */
    public Optional<Output<String>> privateKeyPassword() {
        return Optional.ofNullable(this.privateKeyPassword);
    }

    /**
     * (Optional) The path to the user&#39;s PEM formatted private key.
     * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    @Import(name="privateKeyPath")
    private @Nullable Output<String> privateKeyPath;

    /**
     * @return (Optional) The path to the user&#39;s PEM formatted private key.
     * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    public Optional<Output<String>> privateKeyPath() {
        return Optional.ofNullable(this.privateKeyPath);
    }

    /**
     * (Optional) flags to enable realm specific service endpoint.
     * 
     */
    @Import(name="realmSpecificServiceEndpointTemplateEnabled", json=true)
    private @Nullable Output<Boolean> realmSpecificServiceEndpointTemplateEnabled;

    /**
     * @return (Optional) flags to enable realm specific service endpoint.
     * 
     */
    public Optional<Output<Boolean>> realmSpecificServiceEndpointTemplateEnabled() {
        return Optional.ofNullable(this.realmSpecificServiceEndpointTemplateEnabled);
    }

    /**
     * (Required) The region for API connections (e.g. us-ashburn-1).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Required) The region for API connections (e.g. us-ashburn-1).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * (Optional) The minimum duration (in seconds) to retry a resource operation in response to an error.
     * The actual retry duration may be longer due to jittering of retry operations. This value is ignored if the `disableAutoRetries` field is set to true.
     * 
     */
    @Import(name="retryDurationSeconds", json=true)
    private @Nullable Output<Integer> retryDurationSeconds;

    /**
     * @return (Optional) The minimum duration (in seconds) to retry a resource operation in response to an error.
     * The actual retry duration may be longer due to jittering of retry operations. This value is ignored if the `disableAutoRetries` field is set to true.
     * 
     */
    public Optional<Output<Integer>> retryDurationSeconds() {
        return Optional.ofNullable(this.retryDurationSeconds);
    }

    /**
     * (Optional) The tenancy OCID for a user. The tenancy OCID can be found at the bottom of user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    @Import(name="tenancyOcid")
    private @Nullable Output<String> tenancyOcid;

    /**
     * @return (Optional) The tenancy OCID for a user. The tenancy OCID can be found at the bottom of user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    public Optional<Output<String>> tenancyOcid() {
        return Optional.ofNullable(this.tenancyOcid);
    }

    @Import(name="testTimeMaintenanceRebootDue")
    private @Nullable Output<String> testTimeMaintenanceRebootDue;

    public Optional<Output<String>> testTimeMaintenanceRebootDue() {
        return Optional.ofNullable(this.testTimeMaintenanceRebootDue);
    }

    /**
     * (Optional) The user OCID. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    @Import(name="userOcid")
    private @Nullable Output<String> userOcid;

    /**
     * @return (Optional) The user OCID. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
     * 
     */
    public Optional<Output<String>> userOcid() {
        return Optional.ofNullable(this.userOcid);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.auth = $.auth;
        this.configFileProfile = $.configFileProfile;
        this.disableAutoRetries = $.disableAutoRetries;
        this.fingerprint = $.fingerprint;
        this.ignoreDefinedTags = $.ignoreDefinedTags;
        this.privateKey = $.privateKey;
        this.privateKeyPassword = $.privateKeyPassword;
        this.privateKeyPath = $.privateKeyPath;
        this.realmSpecificServiceEndpointTemplateEnabled = $.realmSpecificServiceEndpointTemplateEnabled;
        this.region = $.region;
        this.retryDurationSeconds = $.retryDurationSeconds;
        this.tenancyOcid = $.tenancyOcid;
        this.testTimeMaintenanceRebootDue = $.testTimeMaintenanceRebootDue;
        this.userOcid = $.userOcid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth (Optional) The type of auth to use. Options are &#39;ApiKey&#39;, &#39;SecurityToken&#39;, &#39;InstancePrincipal&#39;, &#39;ResourcePrincipal&#39; and &#39;OKEWorkloadIdentity&#39;. By default, &#39;ApiKey&#39; will be used.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth (Optional) The type of auth to use. Options are &#39;ApiKey&#39;, &#39;SecurityToken&#39;, &#39;InstancePrincipal&#39;, &#39;ResourcePrincipal&#39; and &#39;OKEWorkloadIdentity&#39;. By default, &#39;ApiKey&#39; will be used.
         * 
         * @return builder
         * 
         */
        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param configFileProfile (Optional) The profile name to be used from config file, if not set it will be DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder configFileProfile(@Nullable Output<String> configFileProfile) {
            $.configFileProfile = configFileProfile;
            return this;
        }

        /**
         * @param configFileProfile (Optional) The profile name to be used from config file, if not set it will be DEFAULT.
         * 
         * @return builder
         * 
         */
        public Builder configFileProfile(String configFileProfile) {
            return configFileProfile(Output.of(configFileProfile));
        }

        /**
         * @param disableAutoRetries (Optional) Disable automatic retries for retriable errors.
         * Automatic retries were introduced to solve some eventual consistency problems but it also introduced performance issues on destroy operations.
         * 
         * @return builder
         * 
         */
        public Builder disableAutoRetries(@Nullable Output<Boolean> disableAutoRetries) {
            $.disableAutoRetries = disableAutoRetries;
            return this;
        }

        /**
         * @param disableAutoRetries (Optional) Disable automatic retries for retriable errors.
         * Automatic retries were introduced to solve some eventual consistency problems but it also introduced performance issues on destroy operations.
         * 
         * @return builder
         * 
         */
        public Builder disableAutoRetries(Boolean disableAutoRetries) {
            return disableAutoRetries(Output.of(disableAutoRetries));
        }

        /**
         * @param fingerprint (Optional) The fingerprint for the user&#39;s RSA key. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint (Optional) The fingerprint for the user&#39;s RSA key. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        public Builder ignoreDefinedTags(@Nullable Output<List<String>> ignoreDefinedTags) {
            $.ignoreDefinedTags = ignoreDefinedTags;
            return this;
        }

        public Builder ignoreDefinedTags(List<String> ignoreDefinedTags) {
            return ignoreDefinedTags(Output.of(ignoreDefinedTags));
        }

        public Builder ignoreDefinedTags(String... ignoreDefinedTags) {
            return ignoreDefinedTags(List.of(ignoreDefinedTags));
        }

        /**
         * @param privateKey (Optional) A PEM formatted RSA private key for the user.
         * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey (Optional) A PEM formatted RSA private key for the user.
         * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyPassword (Optional) The password used to secure the private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(@Nullable Output<String> privateKeyPassword) {
            $.privateKeyPassword = privateKeyPassword;
            return this;
        }

        /**
         * @param privateKeyPassword (Optional) The password used to secure the private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(String privateKeyPassword) {
            return privateKeyPassword(Output.of(privateKeyPassword));
        }

        /**
         * @param privateKeyPath (Optional) The path to the user&#39;s PEM formatted private key.
         * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPath(@Nullable Output<String> privateKeyPath) {
            $.privateKeyPath = privateKeyPath;
            return this;
        }

        /**
         * @param privateKeyPath (Optional) The path to the user&#39;s PEM formatted private key.
         * A privateKey or a privateKeyPath must be provided if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPath(String privateKeyPath) {
            return privateKeyPath(Output.of(privateKeyPath));
        }

        /**
         * @param realmSpecificServiceEndpointTemplateEnabled (Optional) flags to enable realm specific service endpoint.
         * 
         * @return builder
         * 
         */
        public Builder realmSpecificServiceEndpointTemplateEnabled(@Nullable Output<Boolean> realmSpecificServiceEndpointTemplateEnabled) {
            $.realmSpecificServiceEndpointTemplateEnabled = realmSpecificServiceEndpointTemplateEnabled;
            return this;
        }

        /**
         * @param realmSpecificServiceEndpointTemplateEnabled (Optional) flags to enable realm specific service endpoint.
         * 
         * @return builder
         * 
         */
        public Builder realmSpecificServiceEndpointTemplateEnabled(Boolean realmSpecificServiceEndpointTemplateEnabled) {
            return realmSpecificServiceEndpointTemplateEnabled(Output.of(realmSpecificServiceEndpointTemplateEnabled));
        }

        /**
         * @param region (Required) The region for API connections (e.g. us-ashburn-1).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Required) The region for API connections (e.g. us-ashburn-1).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param retryDurationSeconds (Optional) The minimum duration (in seconds) to retry a resource operation in response to an error.
         * The actual retry duration may be longer due to jittering of retry operations. This value is ignored if the `disableAutoRetries` field is set to true.
         * 
         * @return builder
         * 
         */
        public Builder retryDurationSeconds(@Nullable Output<Integer> retryDurationSeconds) {
            $.retryDurationSeconds = retryDurationSeconds;
            return this;
        }

        /**
         * @param retryDurationSeconds (Optional) The minimum duration (in seconds) to retry a resource operation in response to an error.
         * The actual retry duration may be longer due to jittering of retry operations. This value is ignored if the `disableAutoRetries` field is set to true.
         * 
         * @return builder
         * 
         */
        public Builder retryDurationSeconds(Integer retryDurationSeconds) {
            return retryDurationSeconds(Output.of(retryDurationSeconds));
        }

        /**
         * @param tenancyOcid (Optional) The tenancy OCID for a user. The tenancy OCID can be found at the bottom of user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(@Nullable Output<String> tenancyOcid) {
            $.tenancyOcid = tenancyOcid;
            return this;
        }

        /**
         * @param tenancyOcid (Optional) The tenancy OCID for a user. The tenancy OCID can be found at the bottom of user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder tenancyOcid(String tenancyOcid) {
            return tenancyOcid(Output.of(tenancyOcid));
        }

        public Builder testTimeMaintenanceRebootDue(@Nullable Output<String> testTimeMaintenanceRebootDue) {
            $.testTimeMaintenanceRebootDue = testTimeMaintenanceRebootDue;
            return this;
        }

        public Builder testTimeMaintenanceRebootDue(String testTimeMaintenanceRebootDue) {
            return testTimeMaintenanceRebootDue(Output.of(testTimeMaintenanceRebootDue));
        }

        /**
         * @param userOcid (Optional) The user OCID. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder userOcid(@Nullable Output<String> userOcid) {
            $.userOcid = userOcid;
            return this;
        }

        /**
         * @param userOcid (Optional) The user OCID. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
         * 
         * @return builder
         * 
         */
        public Builder userOcid(String userOcid) {
            return userOcid(Output.of(userOcid));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
