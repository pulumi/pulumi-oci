// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Psql.inputs.DbSystemCredentialsArgs;
import com.pulumi.oci.Psql.inputs.DbSystemInstancesDetailArgs;
import com.pulumi.oci.Psql.inputs.DbSystemManagementPolicyArgs;
import com.pulumi.oci.Psql.inputs.DbSystemNetworkDetailsArgs;
import com.pulumi.oci.Psql.inputs.DbSystemPatchOperationArgs;
import com.pulumi.oci.Psql.inputs.DbSystemSourceArgs;
import com.pulumi.oci.Psql.inputs.DbSystemStorageDetailsArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemArgs Empty = new DbSystemArgs();

    /**
     * Whether a configuration update requires a restart of the database instance or a reload of the configuration. Some configuration changes require a restart of database instances to be applied. Apply config can be passed as `RESTART` or `RELOAD`
     * 
     */
    @Import(name="applyConfig")
    private @Nullable Output<String> applyConfig;

    /**
     * @return Whether a configuration update requires a restart of the database instance or a reload of the configuration. Some configuration changes require a restart of database instances to be applied. Apply config can be passed as `RESTART` or `RELOAD`
     * 
     */
    public Optional<Output<String>> applyConfig() {
        return Optional.ofNullable(this.applyConfig);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the database system.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the database system.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration associated with the database system.
     * 
     */
    @Import(name="configId")
    private @Nullable Output<String> configId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration associated with the database system.
     * 
     */
    public Optional<Output<String>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Initial database system credentials that the database system will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<DbSystemCredentialsArgs> credentials;

    /**
     * @return Initial database system credentials that the database system will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
     * 
     */
    public Optional<Output<DbSystemCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Version of database system software.
     * 
     */
    @Import(name="dbVersion", required=true)
    private Output<String> dbVersion;

    /**
     * @return Version of database system software.
     * 
     */
    public Output<String> dbVersion() {
        return this.dbVersion;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * A user-provided description of the database instance node.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-provided description of the database instance node.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the database instance node. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Display name of the database instance node. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable when patch_operations are specified) Count of database instances nodes to be created in the database system.
     * 
     */
    @Import(name="instanceCount")
    private @Nullable Output<Integer> instanceCount;

    /**
     * @return (Updatable when patch_operations are specified) Count of database instances nodes to be created in the database system.
     * 
     */
    public Optional<Output<Integer>> instanceCount() {
        return Optional.ofNullable(this.instanceCount);
    }

    /**
     * The total amount of memory available to each database instance node, in gigabytes.
     * 
     */
    @Import(name="instanceMemorySizeInGbs")
    private @Nullable Output<Integer> instanceMemorySizeInGbs;

    /**
     * @return The total amount of memory available to each database instance node, in gigabytes.
     * 
     */
    public Optional<Output<Integer>> instanceMemorySizeInGbs() {
        return Optional.ofNullable(this.instanceMemorySizeInGbs);
    }

    /**
     * The total number of OCPUs available to each database instance node.
     * 
     */
    @Import(name="instanceOcpuCount")
    private @Nullable Output<Integer> instanceOcpuCount;

    /**
     * @return The total number of OCPUs available to each database instance node.
     * 
     */
    public Optional<Output<Integer>> instanceOcpuCount() {
        return Optional.ofNullable(this.instanceOcpuCount);
    }

    /**
     * Details of database instances nodes to be created. This parameter is optional. If specified, its size must match `instanceCount`.
     * 
     */
    @Import(name="instancesDetails")
    private @Nullable Output<List<DbSystemInstancesDetailArgs>> instancesDetails;

    /**
     * @return Details of database instances nodes to be created. This parameter is optional. If specified, its size must match `instanceCount`.
     * 
     */
    public Optional<Output<List<DbSystemInstancesDetailArgs>>> instancesDetails() {
        return Optional.ofNullable(this.instancesDetails);
    }

    /**
     * (Updatable) PostgreSQL database system management policy update details.
     * 
     */
    @Import(name="managementPolicy")
    private @Nullable Output<DbSystemManagementPolicyArgs> managementPolicy;

    /**
     * @return (Updatable) PostgreSQL database system management policy update details.
     * 
     */
    public Optional<Output<DbSystemManagementPolicyArgs>> managementPolicy() {
        return Optional.ofNullable(this.managementPolicy);
    }

    /**
     * Network details for the database system.
     * 
     */
    @Import(name="networkDetails", required=true)
    private Output<DbSystemNetworkDetailsArgs> networkDetails;

    /**
     * @return Network details for the database system.
     * 
     */
    public Output<DbSystemNetworkDetailsArgs> networkDetails() {
        return this.networkDetails;
    }

    /**
     * (Updatable) For adding and removing from read replica database instances. Please remove the patch_operations after it is applied. Update the instance_count arrodrandly. Cannot be specified when creating the resource.
     * 
     */
    @Import(name="patchOperations")
    private @Nullable Output<List<DbSystemPatchOperationArgs>> patchOperations;

    /**
     * @return (Updatable) For adding and removing from read replica database instances. Please remove the patch_operations after it is applied. Update the instance_count arrodrandly. Cannot be specified when creating the resource.
     * 
     */
    public Optional<Output<List<DbSystemPatchOperationArgs>>> patchOperations() {
        return Optional.ofNullable(this.patchOperations);
    }

    /**
     * The name of the shape for the database instance node. Use the /shapes API for accepted shapes. Example: `PostgreSQL.VM.Standard.E4.Flex.2.32GB`. Find more about the supported shapes [here](https://docs.oracle.com/en-us/iaas/Content/postgresql/supported-shapes.htm).
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return The name of the shape for the database instance node. Use the /shapes API for accepted shapes. Example: `PostgreSQL.VM.Standard.E4.Flex.2.32GB`. Find more about the supported shapes [here](https://docs.oracle.com/en-us/iaas/Content/postgresql/supported-shapes.htm).
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    /**
     * The source used to restore the database system.
     * 
     */
    @Import(name="source")
    private @Nullable Output<DbSystemSourceArgs> source;

    /**
     * @return The source used to restore the database system.
     * 
     */
    public Optional<Output<DbSystemSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * (Updatable) Storage details of the database system.
     * 
     */
    @Import(name="storageDetails", required=true)
    private Output<DbSystemStorageDetailsArgs> storageDetails;

    /**
     * @return (Updatable) Storage details of the database system.
     * 
     */
    public Output<DbSystemStorageDetailsArgs> storageDetails() {
        return this.storageDetails;
    }

    /**
     * Type of the database system.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="systemType")
    private @Nullable Output<String> systemType;

    /**
     * @return Type of the database system.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> systemType() {
        return Optional.ofNullable(this.systemType);
    }

    private DbSystemArgs() {}

    private DbSystemArgs(DbSystemArgs $) {
        this.applyConfig = $.applyConfig;
        this.compartmentId = $.compartmentId;
        this.configId = $.configId;
        this.credentials = $.credentials;
        this.dbVersion = $.dbVersion;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.instanceCount = $.instanceCount;
        this.instanceMemorySizeInGbs = $.instanceMemorySizeInGbs;
        this.instanceOcpuCount = $.instanceOcpuCount;
        this.instancesDetails = $.instancesDetails;
        this.managementPolicy = $.managementPolicy;
        this.networkDetails = $.networkDetails;
        this.patchOperations = $.patchOperations;
        this.shape = $.shape;
        this.source = $.source;
        this.storageDetails = $.storageDetails;
        this.systemType = $.systemType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemArgs $;

        public Builder() {
            $ = new DbSystemArgs();
        }

        public Builder(DbSystemArgs defaults) {
            $ = new DbSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyConfig Whether a configuration update requires a restart of the database instance or a reload of the configuration. Some configuration changes require a restart of database instances to be applied. Apply config can be passed as `RESTART` or `RELOAD`
         * 
         * @return builder
         * 
         */
        public Builder applyConfig(@Nullable Output<String> applyConfig) {
            $.applyConfig = applyConfig;
            return this;
        }

        /**
         * @param applyConfig Whether a configuration update requires a restart of the database instance or a reload of the configuration. Some configuration changes require a restart of database instances to be applied. Apply config can be passed as `RESTART` or `RELOAD`
         * 
         * @return builder
         * 
         */
        public Builder applyConfig(String applyConfig) {
            return applyConfig(Output.of(applyConfig));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the database system.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the database system.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration associated with the database system.
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<String> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration associated with the database system.
         * 
         * @return builder
         * 
         */
        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param credentials Initial database system credentials that the database system will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<DbSystemCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Initial database system credentials that the database system will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(DbSystemCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param dbVersion Version of database system software.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion Version of database system software.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description A user-provided description of the database instance node.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-provided description of the database instance node.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name of the database instance node. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the database instance node. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param instanceCount (Updatable when patch_operations are specified) Count of database instances nodes to be created in the database system.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(@Nullable Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceCount (Updatable when patch_operations are specified) Count of database instances nodes to be created in the database system.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        /**
         * @param instanceMemorySizeInGbs The total amount of memory available to each database instance node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder instanceMemorySizeInGbs(@Nullable Output<Integer> instanceMemorySizeInGbs) {
            $.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            return this;
        }

        /**
         * @param instanceMemorySizeInGbs The total amount of memory available to each database instance node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder instanceMemorySizeInGbs(Integer instanceMemorySizeInGbs) {
            return instanceMemorySizeInGbs(Output.of(instanceMemorySizeInGbs));
        }

        /**
         * @param instanceOcpuCount The total number of OCPUs available to each database instance node.
         * 
         * @return builder
         * 
         */
        public Builder instanceOcpuCount(@Nullable Output<Integer> instanceOcpuCount) {
            $.instanceOcpuCount = instanceOcpuCount;
            return this;
        }

        /**
         * @param instanceOcpuCount The total number of OCPUs available to each database instance node.
         * 
         * @return builder
         * 
         */
        public Builder instanceOcpuCount(Integer instanceOcpuCount) {
            return instanceOcpuCount(Output.of(instanceOcpuCount));
        }

        /**
         * @param instancesDetails Details of database instances nodes to be created. This parameter is optional. If specified, its size must match `instanceCount`.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(@Nullable Output<List<DbSystemInstancesDetailArgs>> instancesDetails) {
            $.instancesDetails = instancesDetails;
            return this;
        }

        /**
         * @param instancesDetails Details of database instances nodes to be created. This parameter is optional. If specified, its size must match `instanceCount`.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(List<DbSystemInstancesDetailArgs> instancesDetails) {
            return instancesDetails(Output.of(instancesDetails));
        }

        /**
         * @param instancesDetails Details of database instances nodes to be created. This parameter is optional. If specified, its size must match `instanceCount`.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(DbSystemInstancesDetailArgs... instancesDetails) {
            return instancesDetails(List.of(instancesDetails));
        }

        /**
         * @param managementPolicy (Updatable) PostgreSQL database system management policy update details.
         * 
         * @return builder
         * 
         */
        public Builder managementPolicy(@Nullable Output<DbSystemManagementPolicyArgs> managementPolicy) {
            $.managementPolicy = managementPolicy;
            return this;
        }

        /**
         * @param managementPolicy (Updatable) PostgreSQL database system management policy update details.
         * 
         * @return builder
         * 
         */
        public Builder managementPolicy(DbSystemManagementPolicyArgs managementPolicy) {
            return managementPolicy(Output.of(managementPolicy));
        }

        /**
         * @param networkDetails Network details for the database system.
         * 
         * @return builder
         * 
         */
        public Builder networkDetails(Output<DbSystemNetworkDetailsArgs> networkDetails) {
            $.networkDetails = networkDetails;
            return this;
        }

        /**
         * @param networkDetails Network details for the database system.
         * 
         * @return builder
         * 
         */
        public Builder networkDetails(DbSystemNetworkDetailsArgs networkDetails) {
            return networkDetails(Output.of(networkDetails));
        }

        /**
         * @param patchOperations (Updatable) For adding and removing from read replica database instances. Please remove the patch_operations after it is applied. Update the instance_count arrodrandly. Cannot be specified when creating the resource.
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(@Nullable Output<List<DbSystemPatchOperationArgs>> patchOperations) {
            $.patchOperations = patchOperations;
            return this;
        }

        /**
         * @param patchOperations (Updatable) For adding and removing from read replica database instances. Please remove the patch_operations after it is applied. Update the instance_count arrodrandly. Cannot be specified when creating the resource.
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(List<DbSystemPatchOperationArgs> patchOperations) {
            return patchOperations(Output.of(patchOperations));
        }

        /**
         * @param patchOperations (Updatable) For adding and removing from read replica database instances. Please remove the patch_operations after it is applied. Update the instance_count arrodrandly. Cannot be specified when creating the resource.
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(DbSystemPatchOperationArgs... patchOperations) {
            return patchOperations(List.of(patchOperations));
        }

        /**
         * @param shape The name of the shape for the database instance node. Use the /shapes API for accepted shapes. Example: `PostgreSQL.VM.Standard.E4.Flex.2.32GB`. Find more about the supported shapes [here](https://docs.oracle.com/en-us/iaas/Content/postgresql/supported-shapes.htm).
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape The name of the shape for the database instance node. Use the /shapes API for accepted shapes. Example: `PostgreSQL.VM.Standard.E4.Flex.2.32GB`. Find more about the supported shapes [here](https://docs.oracle.com/en-us/iaas/Content/postgresql/supported-shapes.htm).
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param source The source used to restore the database system.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<DbSystemSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source used to restore the database system.
         * 
         * @return builder
         * 
         */
        public Builder source(DbSystemSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param storageDetails (Updatable) Storage details of the database system.
         * 
         * @return builder
         * 
         */
        public Builder storageDetails(Output<DbSystemStorageDetailsArgs> storageDetails) {
            $.storageDetails = storageDetails;
            return this;
        }

        /**
         * @param storageDetails (Updatable) Storage details of the database system.
         * 
         * @return builder
         * 
         */
        public Builder storageDetails(DbSystemStorageDetailsArgs storageDetails) {
            return storageDetails(Output.of(storageDetails));
        }

        /**
         * @param systemType Type of the database system.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder systemType(@Nullable Output<String> systemType) {
            $.systemType = systemType;
            return this;
        }

        /**
         * @param systemType Type of the database system.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder systemType(String systemType) {
            return systemType(Output.of(systemType));
        }

        public DbSystemArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "compartmentId");
            }
            if ($.dbVersion == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "dbVersion");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "displayName");
            }
            if ($.networkDetails == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "networkDetails");
            }
            if ($.shape == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "shape");
            }
            if ($.storageDetails == null) {
                throw new MissingRequiredPropertyException("DbSystemArgs", "storageDetails");
            }
            return $;
        }
    }

}
