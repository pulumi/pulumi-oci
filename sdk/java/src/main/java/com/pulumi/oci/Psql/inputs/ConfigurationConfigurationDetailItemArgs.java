// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationConfigurationDetailItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationConfigurationDetailItemArgs Empty = new ConfigurationConfigurationDetailItemArgs();

    /**
     * Range or list of allowed values.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable Output<String> allowedValues;

    /**
     * @return Range or list of allowed values.
     * 
     */
    public Optional<Output<String>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * Configuration variable name.
     * 
     */
    @Import(name="configKey")
    private @Nullable Output<String> configKey;

    /**
     * @return Configuration variable name.
     * 
     */
    public Optional<Output<String>> configKey() {
        return Optional.ofNullable(this.configKey);
    }

    /**
     * Data type of the variable.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return Data type of the variable.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * Default value for the configuration variable.
     * 
     */
    @Import(name="defaultConfigValue")
    private @Nullable Output<String> defaultConfigValue;

    /**
     * @return Default value for the configuration variable.
     * 
     */
    public Optional<Output<String>> defaultConfigValue() {
        return Optional.ofNullable(this.defaultConfigValue);
    }

    /**
     * (Updatable) Details about the configuration set.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Details about the configuration set.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the value can be overridden or not.
     * 
     */
    @Import(name="isOverridable")
    private @Nullable Output<Boolean> isOverridable;

    /**
     * @return Whether the value can be overridden or not.
     * 
     */
    public Optional<Output<Boolean>> isOverridable() {
        return Optional.ofNullable(this.isOverridable);
    }

    /**
     * If true, modifying this configuration value will require a restart of the database.
     * 
     */
    @Import(name="isRestartRequired")
    private @Nullable Output<Boolean> isRestartRequired;

    /**
     * @return If true, modifying this configuration value will require a restart of the database.
     * 
     */
    public Optional<Output<Boolean>> isRestartRequired() {
        return Optional.ofNullable(this.isRestartRequired);
    }

    /**
     * User-selected variable value.
     * 
     */
    @Import(name="overridenConfigValue")
    private @Nullable Output<String> overridenConfigValue;

    /**
     * @return User-selected variable value.
     * 
     */
    public Optional<Output<String>> overridenConfigValue() {
        return Optional.ofNullable(this.overridenConfigValue);
    }

    private ConfigurationConfigurationDetailItemArgs() {}

    private ConfigurationConfigurationDetailItemArgs(ConfigurationConfigurationDetailItemArgs $) {
        this.allowedValues = $.allowedValues;
        this.configKey = $.configKey;
        this.dataType = $.dataType;
        this.defaultConfigValue = $.defaultConfigValue;
        this.description = $.description;
        this.isOverridable = $.isOverridable;
        this.isRestartRequired = $.isRestartRequired;
        this.overridenConfigValue = $.overridenConfigValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationConfigurationDetailItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationConfigurationDetailItemArgs $;

        public Builder() {
            $ = new ConfigurationConfigurationDetailItemArgs();
        }

        public Builder(ConfigurationConfigurationDetailItemArgs defaults) {
            $ = new ConfigurationConfigurationDetailItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedValues Range or list of allowed values.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(@Nullable Output<String> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        /**
         * @param allowedValues Range or list of allowed values.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(String allowedValues) {
            return allowedValues(Output.of(allowedValues));
        }

        /**
         * @param configKey Configuration variable name.
         * 
         * @return builder
         * 
         */
        public Builder configKey(@Nullable Output<String> configKey) {
            $.configKey = configKey;
            return this;
        }

        /**
         * @param configKey Configuration variable name.
         * 
         * @return builder
         * 
         */
        public Builder configKey(String configKey) {
            return configKey(Output.of(configKey));
        }

        /**
         * @param dataType Data type of the variable.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType Data type of the variable.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param defaultConfigValue Default value for the configuration variable.
         * 
         * @return builder
         * 
         */
        public Builder defaultConfigValue(@Nullable Output<String> defaultConfigValue) {
            $.defaultConfigValue = defaultConfigValue;
            return this;
        }

        /**
         * @param defaultConfigValue Default value for the configuration variable.
         * 
         * @return builder
         * 
         */
        public Builder defaultConfigValue(String defaultConfigValue) {
            return defaultConfigValue(Output.of(defaultConfigValue));
        }

        /**
         * @param description (Updatable) Details about the configuration set.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Details about the configuration set.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isOverridable Whether the value can be overridden or not.
         * 
         * @return builder
         * 
         */
        public Builder isOverridable(@Nullable Output<Boolean> isOverridable) {
            $.isOverridable = isOverridable;
            return this;
        }

        /**
         * @param isOverridable Whether the value can be overridden or not.
         * 
         * @return builder
         * 
         */
        public Builder isOverridable(Boolean isOverridable) {
            return isOverridable(Output.of(isOverridable));
        }

        /**
         * @param isRestartRequired If true, modifying this configuration value will require a restart of the database.
         * 
         * @return builder
         * 
         */
        public Builder isRestartRequired(@Nullable Output<Boolean> isRestartRequired) {
            $.isRestartRequired = isRestartRequired;
            return this;
        }

        /**
         * @param isRestartRequired If true, modifying this configuration value will require a restart of the database.
         * 
         * @return builder
         * 
         */
        public Builder isRestartRequired(Boolean isRestartRequired) {
            return isRestartRequired(Output.of(isRestartRequired));
        }

        /**
         * @param overridenConfigValue User-selected variable value.
         * 
         * @return builder
         * 
         */
        public Builder overridenConfigValue(@Nullable Output<String> overridenConfigValue) {
            $.overridenConfigValue = overridenConfigValue;
            return this;
        }

        /**
         * @param overridenConfigValue User-selected variable value.
         * 
         * @return builder
         * 
         */
        public Builder overridenConfigValue(String overridenConfigValue) {
            return overridenConfigValue(Output.of(overridenConfigValue));
        }

        public ConfigurationConfigurationDetailItemArgs build() {
            return $;
        }
    }

}
