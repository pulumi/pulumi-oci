// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemInstancesDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemInstancesDetailArgs Empty = new DbSystemInstancesDetailArgs();

    /**
     * Description of the DbInstance. This field should be input by the user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the DbInstance. This field should be input by the user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the DbInstance.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the DbInstance.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    private DbSystemInstancesDetailArgs() {}

    private DbSystemInstancesDetailArgs(DbSystemInstancesDetailArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.privateIp = $.privateIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemInstancesDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemInstancesDetailArgs $;

        public Builder() {
            $ = new DbSystemInstancesDetailArgs();
        }

        public Builder(DbSystemInstancesDetailArgs defaults) {
            $ = new DbSystemInstancesDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the DbInstance. This field should be input by the user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the DbInstance. This field should be input by the user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name of the DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param privateIp Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        public DbSystemInstancesDetailArgs build() {
            return $;
        }
    }

}
