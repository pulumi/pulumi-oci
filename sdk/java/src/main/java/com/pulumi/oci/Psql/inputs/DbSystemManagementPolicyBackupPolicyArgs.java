// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemManagementPolicyBackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemManagementPolicyBackupPolicyArgs Empty = new DbSystemManagementPolicyBackupPolicyArgs();

    /**
     * (Updatable) Hour of the day when backup starts.
     * 
     */
    @Import(name="backupStart")
    private @Nullable Output<String> backupStart;

    /**
     * @return (Updatable) Hour of the day when backup starts.
     * 
     */
    public Optional<Output<String>> backupStart() {
        return Optional.ofNullable(this.backupStart);
    }

    /**
     * (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
     * 
     */
    @Import(name="daysOfTheMonths")
    private @Nullable Output<List<Integer>> daysOfTheMonths;

    /**
     * @return (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
     * 
     */
    public Optional<Output<List<Integer>>> daysOfTheMonths() {
        return Optional.ofNullable(this.daysOfTheMonths);
    }

    /**
     * (Updatable) Weekly days
     * 
     */
    @Import(name="daysOfTheWeeks")
    private @Nullable Output<List<String>> daysOfTheWeeks;

    /**
     * @return (Updatable) Weekly days
     * 
     */
    public Optional<Output<List<String>>> daysOfTheWeeks() {
        return Optional.ofNullable(this.daysOfTheWeeks);
    }

    /**
     * (Updatable) Backup policy kind
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Updatable) Backup policy kind
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * (Updatable) How many days the customers data should be stored after the db system deletion.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return (Updatable) How many days the customers data should be stored after the db system deletion.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    private DbSystemManagementPolicyBackupPolicyArgs() {}

    private DbSystemManagementPolicyBackupPolicyArgs(DbSystemManagementPolicyBackupPolicyArgs $) {
        this.backupStart = $.backupStart;
        this.daysOfTheMonths = $.daysOfTheMonths;
        this.daysOfTheWeeks = $.daysOfTheWeeks;
        this.kind = $.kind;
        this.retentionDays = $.retentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemManagementPolicyBackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemManagementPolicyBackupPolicyArgs $;

        public Builder() {
            $ = new DbSystemManagementPolicyBackupPolicyArgs();
        }

        public Builder(DbSystemManagementPolicyBackupPolicyArgs defaults) {
            $ = new DbSystemManagementPolicyBackupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupStart (Updatable) Hour of the day when backup starts.
         * 
         * @return builder
         * 
         */
        public Builder backupStart(@Nullable Output<String> backupStart) {
            $.backupStart = backupStart;
            return this;
        }

        /**
         * @param backupStart (Updatable) Hour of the day when backup starts.
         * 
         * @return builder
         * 
         */
        public Builder backupStart(String backupStart) {
            return backupStart(Output.of(backupStart));
        }

        /**
         * @param daysOfTheMonths (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(@Nullable Output<List<Integer>> daysOfTheMonths) {
            $.daysOfTheMonths = daysOfTheMonths;
            return this;
        }

        /**
         * @param daysOfTheMonths (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(List<Integer> daysOfTheMonths) {
            return daysOfTheMonths(Output.of(daysOfTheMonths));
        }

        /**
         * @param daysOfTheMonths (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(Integer... daysOfTheMonths) {
            return daysOfTheMonths(List.of(daysOfTheMonths));
        }

        /**
         * @param daysOfTheWeeks (Updatable) Weekly days
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(@Nullable Output<List<String>> daysOfTheWeeks) {
            $.daysOfTheWeeks = daysOfTheWeeks;
            return this;
        }

        /**
         * @param daysOfTheWeeks (Updatable) Weekly days
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(List<String> daysOfTheWeeks) {
            return daysOfTheWeeks(Output.of(daysOfTheWeeks));
        }

        /**
         * @param daysOfTheWeeks (Updatable) Weekly days
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(String... daysOfTheWeeks) {
            return daysOfTheWeeks(List.of(daysOfTheWeeks));
        }

        /**
         * @param kind (Updatable) Backup policy kind
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Updatable) Backup policy kind
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param retentionDays (Updatable) How many days the customers data should be stored after the db system deletion.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays (Updatable) How many days the customers data should be stored after the db system deletion.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        public DbSystemManagementPolicyBackupPolicyArgs build() {
            return $;
        }
    }

}
