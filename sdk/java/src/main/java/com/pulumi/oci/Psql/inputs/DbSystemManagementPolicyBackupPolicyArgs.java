// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Psql.inputs.DbSystemManagementPolicyBackupPolicyCopyPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemManagementPolicyBackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemManagementPolicyBackupPolicyArgs Empty = new DbSystemManagementPolicyBackupPolicyArgs();

    /**
     * (Updatable) Hour of the day when the backup starts.
     * 
     */
    @Import(name="backupStart")
    private @Nullable Output<String> backupStart;

    /**
     * @return (Updatable) Hour of the day when the backup starts.
     * 
     */
    public Optional<Output<String>> backupStart() {
        return Optional.ofNullable(this.backupStart);
    }

    /**
     * (Updatable) Backup copy details
     * 
     */
    @Import(name="copyPolicy")
    private @Nullable Output<DbSystemManagementPolicyBackupPolicyCopyPolicyArgs> copyPolicy;

    /**
     * @return (Updatable) Backup copy details
     * 
     */
    public Optional<Output<DbSystemManagementPolicyBackupPolicyCopyPolicyArgs>> copyPolicy() {
        return Optional.ofNullable(this.copyPolicy);
    }

    /**
     * (Updatable) Day of the month when the backup should start. To ensure that the backup runs monthly, the latest day of the month that you can use to schedule a backup is the the 28th day.
     * 
     */
    @Import(name="daysOfTheMonths")
    private @Nullable Output<List<Integer>> daysOfTheMonths;

    /**
     * @return (Updatable) Day of the month when the backup should start. To ensure that the backup runs monthly, the latest day of the month that you can use to schedule a backup is the the 28th day.
     * 
     */
    public Optional<Output<List<Integer>>> daysOfTheMonths() {
        return Optional.ofNullable(this.daysOfTheMonths);
    }

    /**
     * (Updatable) The day of the week that the backup starts.
     * 
     */
    @Import(name="daysOfTheWeeks")
    private @Nullable Output<List<String>> daysOfTheWeeks;

    /**
     * @return (Updatable) The day of the week that the backup starts.
     * 
     */
    public Optional<Output<List<String>>> daysOfTheWeeks() {
        return Optional.ofNullable(this.daysOfTheWeeks);
    }

    /**
     * (Updatable) The kind of backup policy.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return (Updatable) The kind of backup policy.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * (Updatable) How many days the data should be stored after the database system deletion.
     * 
     */
    @Import(name="retentionDays")
    private @Nullable Output<Integer> retentionDays;

    /**
     * @return (Updatable) How many days the data should be stored after the database system deletion.
     * 
     */
    public Optional<Output<Integer>> retentionDays() {
        return Optional.ofNullable(this.retentionDays);
    }

    private DbSystemManagementPolicyBackupPolicyArgs() {}

    private DbSystemManagementPolicyBackupPolicyArgs(DbSystemManagementPolicyBackupPolicyArgs $) {
        this.backupStart = $.backupStart;
        this.copyPolicy = $.copyPolicy;
        this.daysOfTheMonths = $.daysOfTheMonths;
        this.daysOfTheWeeks = $.daysOfTheWeeks;
        this.kind = $.kind;
        this.retentionDays = $.retentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemManagementPolicyBackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemManagementPolicyBackupPolicyArgs $;

        public Builder() {
            $ = new DbSystemManagementPolicyBackupPolicyArgs();
        }

        public Builder(DbSystemManagementPolicyBackupPolicyArgs defaults) {
            $ = new DbSystemManagementPolicyBackupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupStart (Updatable) Hour of the day when the backup starts.
         * 
         * @return builder
         * 
         */
        public Builder backupStart(@Nullable Output<String> backupStart) {
            $.backupStart = backupStart;
            return this;
        }

        /**
         * @param backupStart (Updatable) Hour of the day when the backup starts.
         * 
         * @return builder
         * 
         */
        public Builder backupStart(String backupStart) {
            return backupStart(Output.of(backupStart));
        }

        /**
         * @param copyPolicy (Updatable) Backup copy details
         * 
         * @return builder
         * 
         */
        public Builder copyPolicy(@Nullable Output<DbSystemManagementPolicyBackupPolicyCopyPolicyArgs> copyPolicy) {
            $.copyPolicy = copyPolicy;
            return this;
        }

        /**
         * @param copyPolicy (Updatable) Backup copy details
         * 
         * @return builder
         * 
         */
        public Builder copyPolicy(DbSystemManagementPolicyBackupPolicyCopyPolicyArgs copyPolicy) {
            return copyPolicy(Output.of(copyPolicy));
        }

        /**
         * @param daysOfTheMonths (Updatable) Day of the month when the backup should start. To ensure that the backup runs monthly, the latest day of the month that you can use to schedule a backup is the the 28th day.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(@Nullable Output<List<Integer>> daysOfTheMonths) {
            $.daysOfTheMonths = daysOfTheMonths;
            return this;
        }

        /**
         * @param daysOfTheMonths (Updatable) Day of the month when the backup should start. To ensure that the backup runs monthly, the latest day of the month that you can use to schedule a backup is the the 28th day.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(List<Integer> daysOfTheMonths) {
            return daysOfTheMonths(Output.of(daysOfTheMonths));
        }

        /**
         * @param daysOfTheMonths (Updatable) Day of the month when the backup should start. To ensure that the backup runs monthly, the latest day of the month that you can use to schedule a backup is the the 28th day.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheMonths(Integer... daysOfTheMonths) {
            return daysOfTheMonths(List.of(daysOfTheMonths));
        }

        /**
         * @param daysOfTheWeeks (Updatable) The day of the week that the backup starts.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(@Nullable Output<List<String>> daysOfTheWeeks) {
            $.daysOfTheWeeks = daysOfTheWeeks;
            return this;
        }

        /**
         * @param daysOfTheWeeks (Updatable) The day of the week that the backup starts.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(List<String> daysOfTheWeeks) {
            return daysOfTheWeeks(Output.of(daysOfTheWeeks));
        }

        /**
         * @param daysOfTheWeeks (Updatable) The day of the week that the backup starts.
         * 
         * @return builder
         * 
         */
        public Builder daysOfTheWeeks(String... daysOfTheWeeks) {
            return daysOfTheWeeks(List.of(daysOfTheWeeks));
        }

        /**
         * @param kind (Updatable) The kind of backup policy.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Updatable) The kind of backup policy.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param retentionDays (Updatable) How many days the data should be stored after the database system deletion.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            $.retentionDays = retentionDays;
            return this;
        }

        /**
         * @param retentionDays (Updatable) How many days the data should be stored after the database system deletion.
         * 
         * @return builder
         * 
         */
        public Builder retentionDays(Integer retentionDays) {
            return retentionDays(Output.of(retentionDays));
        }

        public DbSystemManagementPolicyBackupPolicyArgs build() {
            return $;
        }
    }

}
