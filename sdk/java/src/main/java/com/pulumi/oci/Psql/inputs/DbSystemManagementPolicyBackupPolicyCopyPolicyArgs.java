// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemManagementPolicyBackupPolicyCopyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemManagementPolicyBackupPolicyCopyPolicyArgs Empty = new DbSystemManagementPolicyBackupPolicyCopyPolicyArgs();

    /**
     * (Updatable) target compartment to place a new backup
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) target compartment to place a new backup
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) List of region names of the remote region
     * 
     */
    @Import(name="regions", required=true)
    private Output<List<String>> regions;

    /**
     * @return (Updatable) List of region names of the remote region
     * 
     */
    public Output<List<String>> regions() {
        return this.regions;
    }

    /**
     * (Updatable) Retention period in days of the backup copy.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return (Updatable) Retention period in days of the backup copy.
     * 
     */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    private DbSystemManagementPolicyBackupPolicyCopyPolicyArgs() {}

    private DbSystemManagementPolicyBackupPolicyCopyPolicyArgs(DbSystemManagementPolicyBackupPolicyCopyPolicyArgs $) {
        this.compartmentId = $.compartmentId;
        this.regions = $.regions;
        this.retentionPeriod = $.retentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemManagementPolicyBackupPolicyCopyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemManagementPolicyBackupPolicyCopyPolicyArgs $;

        public Builder() {
            $ = new DbSystemManagementPolicyBackupPolicyCopyPolicyArgs();
        }

        public Builder(DbSystemManagementPolicyBackupPolicyCopyPolicyArgs defaults) {
            $ = new DbSystemManagementPolicyBackupPolicyCopyPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) target compartment to place a new backup
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) target compartment to place a new backup
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param regions (Updatable) List of region names of the remote region
         * 
         * @return builder
         * 
         */
        public Builder regions(Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions (Updatable) List of region names of the remote region
         * 
         * @return builder
         * 
         */
        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        /**
         * @param regions (Updatable) List of region names of the remote region
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param retentionPeriod (Updatable) Retention period in days of the backup copy.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod (Updatable) Retention period in days of the backup copy.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        public DbSystemManagementPolicyBackupPolicyCopyPolicyArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("DbSystemManagementPolicyBackupPolicyCopyPolicyArgs", "compartmentId");
            }
            if ($.regions == null) {
                throw new MissingRequiredPropertyException("DbSystemManagementPolicyBackupPolicyCopyPolicyArgs", "regions");
            }
            return $;
        }
    }

}
