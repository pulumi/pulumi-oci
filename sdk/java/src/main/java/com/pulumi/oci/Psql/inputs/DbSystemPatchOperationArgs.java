// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemPatchOperationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemPatchOperationArgs Empty = new DbSystemPatchOperationArgs();

    @Import(name="from")
    private @Nullable Output<String> from;

    public Optional<Output<String>> from() {
        return Optional.ofNullable(this.from);
    }

    /**
     * The operation can be one of these values: `INSERT`, `REMOVE`.
     * 
     */
    @Import(name="operation", required=true)
    private Output<String> operation;

    /**
     * @return The operation can be one of these values: `INSERT`, `REMOVE`.
     * 
     */
    public Output<String> operation() {
        return this.operation;
    }

    @Import(name="position")
    private @Nullable Output<String> position;

    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="selectedItem")
    private @Nullable Output<String> selectedItem;

    public Optional<Output<String>> selectedItem() {
        return Optional.ofNullable(this.selectedItem);
    }

    /**
     * In case of `INSERT`, selection is `instances`. In case of `REMOVE`, selection is `instances[?id == &#39;${var.instance_id}&#39;]`.
     * 
     */
    @Import(name="selection", required=true)
    private Output<String> selection;

    /**
     * @return In case of `INSERT`, selection is `instances`. In case of `REMOVE`, selection is `instances[?id == &#39;${var.instance_id}&#39;]`.
     * 
     */
    public Output<String> selection() {
        return this.selection;
    }

    /**
     * Specify instance details such as displayName, description or privateIp. Example: `{&#34;displayName&#34;: &#34;value&#34;}`.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Map<String,Object>> value;

    /**
     * @return Specify instance details such as displayName, description or privateIp. Example: `{&#34;displayName&#34;: &#34;value&#34;}`.
     * 
     */
    public Optional<Output<Map<String,Object>>> value() {
        return Optional.ofNullable(this.value);
    }

    private DbSystemPatchOperationArgs() {}

    private DbSystemPatchOperationArgs(DbSystemPatchOperationArgs $) {
        this.from = $.from;
        this.operation = $.operation;
        this.position = $.position;
        this.selectedItem = $.selectedItem;
        this.selection = $.selection;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemPatchOperationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemPatchOperationArgs $;

        public Builder() {
            $ = new DbSystemPatchOperationArgs();
        }

        public Builder(DbSystemPatchOperationArgs defaults) {
            $ = new DbSystemPatchOperationArgs(Objects.requireNonNull(defaults));
        }

        public Builder from(@Nullable Output<String> from) {
            $.from = from;
            return this;
        }

        public Builder from(String from) {
            return from(Output.of(from));
        }

        /**
         * @param operation The operation can be one of these values: `INSERT`, `REMOVE`.
         * 
         * @return builder
         * 
         */
        public Builder operation(Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation The operation can be one of these values: `INSERT`, `REMOVE`.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        public Builder position(String position) {
            return position(Output.of(position));
        }

        public Builder selectedItem(@Nullable Output<String> selectedItem) {
            $.selectedItem = selectedItem;
            return this;
        }

        public Builder selectedItem(String selectedItem) {
            return selectedItem(Output.of(selectedItem));
        }

        /**
         * @param selection In case of `INSERT`, selection is `instances`. In case of `REMOVE`, selection is `instances[?id == &#39;${var.instance_id}&#39;]`.
         * 
         * @return builder
         * 
         */
        public Builder selection(Output<String> selection) {
            $.selection = selection;
            return this;
        }

        /**
         * @param selection In case of `INSERT`, selection is `instances`. In case of `REMOVE`, selection is `instances[?id == &#39;${var.instance_id}&#39;]`.
         * 
         * @return builder
         * 
         */
        public Builder selection(String selection) {
            return selection(Output.of(selection));
        }

        /**
         * @param value Specify instance details such as displayName, description or privateIp. Example: `{&#34;displayName&#34;: &#34;value&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Map<String,Object>> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Specify instance details such as displayName, description or privateIp. Example: `{&#34;displayName&#34;: &#34;value&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder value(Map<String,Object> value) {
            return value(Output.of(value));
        }

        public DbSystemPatchOperationArgs build() {
            if ($.operation == null) {
                throw new MissingRequiredPropertyException("DbSystemPatchOperationArgs", "operation");
            }
            if ($.selection == null) {
                throw new MissingRequiredPropertyException("DbSystemPatchOperationArgs", "selection");
            }
            return $;
        }
    }

}
