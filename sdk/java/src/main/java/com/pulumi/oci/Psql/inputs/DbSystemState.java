// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Psql.inputs.DbSystemCredentialsArgs;
import com.pulumi.oci.Psql.inputs.DbSystemInstanceArgs;
import com.pulumi.oci.Psql.inputs.DbSystemInstancesDetailArgs;
import com.pulumi.oci.Psql.inputs.DbSystemManagementPolicyArgs;
import com.pulumi.oci.Psql.inputs.DbSystemNetworkDetailsArgs;
import com.pulumi.oci.Psql.inputs.DbSystemSourceArgs;
import com.pulumi.oci.Psql.inputs.DbSystemStorageDetailsArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemState extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemState Empty = new DbSystemState();

    /**
     * The DB system username.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return The DB system username.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * (Updatable) Compartment identifier
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment identifier
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Configuration identifier
     * 
     */
    @Import(name="configId")
    private @Nullable Output<String> configId;

    /**
     * @return Configuration identifier
     * 
     */
    public Optional<Output<String>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Initial DbSystem credentials that the DbSystem will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<DbSystemCredentialsArgs> credentials;

    /**
     * @return Initial DbSystem credentials that the DbSystem will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
     * 
     */
    public Optional<Output<DbSystemCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Version of DbSystem software.
     * 
     */
    @Import(name="dbVersion")
    private @Nullable Output<String> dbVersion;

    /**
     * @return Version of DbSystem software.
     * 
     */
    public Optional<Output<String>> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * Description of the DbInstance. This field should be input by the user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the DbInstance. This field should be input by the user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the DbInstance.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the DbInstance.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Count of DbInstances to be created in the DbSystem.
     * 
     */
    @Import(name="instanceCount")
    private @Nullable Output<Integer> instanceCount;

    /**
     * @return Count of DbInstances to be created in the DbSystem.
     * 
     */
    public Optional<Output<Integer>> instanceCount() {
        return Optional.ofNullable(this.instanceCount);
    }

    /**
     * The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    @Import(name="instanceMemorySizeInGbs")
    private @Nullable Output<Integer> instanceMemorySizeInGbs;

    /**
     * @return The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    public Optional<Output<Integer>> instanceMemorySizeInGbs() {
        return Optional.ofNullable(this.instanceMemorySizeInGbs);
    }

    /**
     * The total number of OCPUs available to each DbInstance.
     * 
     */
    @Import(name="instanceOcpuCount")
    private @Nullable Output<Integer> instanceOcpuCount;

    /**
     * @return The total number of OCPUs available to each DbInstance.
     * 
     */
    public Optional<Output<Integer>> instanceOcpuCount() {
        return Optional.ofNullable(this.instanceOcpuCount);
    }

    /**
     * The list of DbInstances in the DbSystem.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<DbSystemInstanceArgs>> instances;

    /**
     * @return The list of DbInstances in the DbSystem.
     * 
     */
    public Optional<Output<List<DbSystemInstanceArgs>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * Details of DbInstances to be created. Optional parameter. If specified, its size must match instanceCount.
     * 
     */
    @Import(name="instancesDetails")
    private @Nullable Output<List<DbSystemInstancesDetailArgs>> instancesDetails;

    /**
     * @return Details of DbInstances to be created. Optional parameter. If specified, its size must match instanceCount.
     * 
     */
    public Optional<Output<List<DbSystemInstancesDetailArgs>>> instancesDetails() {
        return Optional.ofNullable(this.instancesDetails);
    }

    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) Posgresql DB system management policy update details
     * 
     */
    @Import(name="managementPolicy")
    private @Nullable Output<DbSystemManagementPolicyArgs> managementPolicy;

    /**
     * @return (Updatable) Posgresql DB system management policy update details
     * 
     */
    public Optional<Output<DbSystemManagementPolicyArgs>> managementPolicy() {
        return Optional.ofNullable(this.managementPolicy);
    }

    /**
     * DbSystem network details.
     * 
     */
    @Import(name="networkDetails")
    private @Nullable Output<DbSystemNetworkDetailsArgs> networkDetails;

    /**
     * @return DbSystem network details.
     * 
     */
    public Optional<Output<DbSystemNetworkDetailsArgs>> networkDetails() {
        return Optional.ofNullable(this.networkDetails);
    }

    /**
     * Shape of DbInstance. This name should match from with one of the available shapes from /shapes API.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return Shape of DbInstance. This name should match from with one of the available shapes from /shapes API.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * New source is used to restore the DB system.
     * 
     */
    @Import(name="source")
    private @Nullable Output<DbSystemSourceArgs> source;

    /**
     * @return New source is used to restore the DB system.
     * 
     */
    public Optional<Output<DbSystemSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The current state of the DbSystem.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the DbSystem.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) Storage details of the DbSystem.
     * 
     */
    @Import(name="storageDetails")
    private @Nullable Output<DbSystemStorageDetailsArgs> storageDetails;

    /**
     * @return (Updatable) Storage details of the DbSystem.
     * 
     */
    public Optional<Output<DbSystemStorageDetailsArgs>> storageDetails() {
        return Optional.ofNullable(this.storageDetails);
    }

    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * Type of the DbSystem.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="systemType")
    private @Nullable Output<String> systemType;

    /**
     * @return Type of the DbSystem.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> systemType() {
        return Optional.ofNullable(this.systemType);
    }

    /**
     * The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private DbSystemState() {}

    private DbSystemState(DbSystemState $) {
        this.adminUsername = $.adminUsername;
        this.compartmentId = $.compartmentId;
        this.configId = $.configId;
        this.credentials = $.credentials;
        this.dbVersion = $.dbVersion;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.instanceCount = $.instanceCount;
        this.instanceMemorySizeInGbs = $.instanceMemorySizeInGbs;
        this.instanceOcpuCount = $.instanceOcpuCount;
        this.instances = $.instances;
        this.instancesDetails = $.instancesDetails;
        this.lifecycleDetails = $.lifecycleDetails;
        this.managementPolicy = $.managementPolicy;
        this.networkDetails = $.networkDetails;
        this.shape = $.shape;
        this.source = $.source;
        this.state = $.state;
        this.storageDetails = $.storageDetails;
        this.systemTags = $.systemTags;
        this.systemType = $.systemType;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemState $;

        public Builder() {
            $ = new DbSystemState();
        }

        public Builder(DbSystemState defaults) {
            $ = new DbSystemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUsername The DB system username.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername The DB system username.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param compartmentId (Updatable) Compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configId Configuration identifier
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<String> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Configuration identifier
         * 
         * @return builder
         * 
         */
        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param credentials Initial DbSystem credentials that the DbSystem will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<DbSystemCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Initial DbSystem credentials that the DbSystem will be provisioned with. The password details are not visible on any subsequent operation, such as GET /dbSystems/{dbSystemId}.
         * 
         * @return builder
         * 
         */
        public Builder credentials(DbSystemCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param dbVersion Version of DbSystem software.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion Version of DbSystem software.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description Description of the DbInstance. This field should be input by the user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the DbInstance. This field should be input by the user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name of the DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param instanceCount Count of DbInstances to be created in the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(@Nullable Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceCount Count of DbInstances to be created in the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        /**
         * @param instanceMemorySizeInGbs The total amount of memory available to each DbInstance, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder instanceMemorySizeInGbs(@Nullable Output<Integer> instanceMemorySizeInGbs) {
            $.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            return this;
        }

        /**
         * @param instanceMemorySizeInGbs The total amount of memory available to each DbInstance, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder instanceMemorySizeInGbs(Integer instanceMemorySizeInGbs) {
            return instanceMemorySizeInGbs(Output.of(instanceMemorySizeInGbs));
        }

        /**
         * @param instanceOcpuCount The total number of OCPUs available to each DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder instanceOcpuCount(@Nullable Output<Integer> instanceOcpuCount) {
            $.instanceOcpuCount = instanceOcpuCount;
            return this;
        }

        /**
         * @param instanceOcpuCount The total number of OCPUs available to each DbInstance.
         * 
         * @return builder
         * 
         */
        public Builder instanceOcpuCount(Integer instanceOcpuCount) {
            return instanceOcpuCount(Output.of(instanceOcpuCount));
        }

        /**
         * @param instances The list of DbInstances in the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<List<DbSystemInstanceArgs>> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The list of DbInstances in the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder instances(List<DbSystemInstanceArgs> instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param instances The list of DbInstances in the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder instances(DbSystemInstanceArgs... instances) {
            return instances(List.of(instances));
        }

        /**
         * @param instancesDetails Details of DbInstances to be created. Optional parameter. If specified, its size must match instanceCount.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(@Nullable Output<List<DbSystemInstancesDetailArgs>> instancesDetails) {
            $.instancesDetails = instancesDetails;
            return this;
        }

        /**
         * @param instancesDetails Details of DbInstances to be created. Optional parameter. If specified, its size must match instanceCount.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(List<DbSystemInstancesDetailArgs> instancesDetails) {
            return instancesDetails(Output.of(instancesDetails));
        }

        /**
         * @param instancesDetails Details of DbInstances to be created. Optional parameter. If specified, its size must match instanceCount.
         * 
         * @return builder
         * 
         */
        public Builder instancesDetails(DbSystemInstancesDetailArgs... instancesDetails) {
            return instancesDetails(List.of(instancesDetails));
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param managementPolicy (Updatable) Posgresql DB system management policy update details
         * 
         * @return builder
         * 
         */
        public Builder managementPolicy(@Nullable Output<DbSystemManagementPolicyArgs> managementPolicy) {
            $.managementPolicy = managementPolicy;
            return this;
        }

        /**
         * @param managementPolicy (Updatable) Posgresql DB system management policy update details
         * 
         * @return builder
         * 
         */
        public Builder managementPolicy(DbSystemManagementPolicyArgs managementPolicy) {
            return managementPolicy(Output.of(managementPolicy));
        }

        /**
         * @param networkDetails DbSystem network details.
         * 
         * @return builder
         * 
         */
        public Builder networkDetails(@Nullable Output<DbSystemNetworkDetailsArgs> networkDetails) {
            $.networkDetails = networkDetails;
            return this;
        }

        /**
         * @param networkDetails DbSystem network details.
         * 
         * @return builder
         * 
         */
        public Builder networkDetails(DbSystemNetworkDetailsArgs networkDetails) {
            return networkDetails(Output.of(networkDetails));
        }

        /**
         * @param shape Shape of DbInstance. This name should match from with one of the available shapes from /shapes API.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape Shape of DbInstance. This name should match from with one of the available shapes from /shapes API.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param source New source is used to restore the DB system.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<DbSystemSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source New source is used to restore the DB system.
         * 
         * @return builder
         * 
         */
        public Builder source(DbSystemSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state The current state of the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storageDetails (Updatable) Storage details of the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder storageDetails(@Nullable Output<DbSystemStorageDetailsArgs> storageDetails) {
            $.storageDetails = storageDetails;
            return this;
        }

        /**
         * @param storageDetails (Updatable) Storage details of the DbSystem.
         * 
         * @return builder
         * 
         */
        public Builder storageDetails(DbSystemStorageDetailsArgs storageDetails) {
            return storageDetails(Output.of(storageDetails));
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param systemType Type of the DbSystem.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder systemType(@Nullable Output<String> systemType) {
            $.systemType = systemType;
            return this;
        }

        /**
         * @param systemType Type of the DbSystem.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder systemType(String systemType) {
            return systemType(Output.of(systemType));
        }

        /**
         * @param timeCreated The time the the DbSystem was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the the DbSystem was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the DbSystem was updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the DbSystem was updated. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public DbSystemState build() {
            return $;
        }
    }

}
