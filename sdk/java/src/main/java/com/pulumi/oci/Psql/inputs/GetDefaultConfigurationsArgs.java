// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Psql.inputs.GetDefaultConfigurationsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDefaultConfigurationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDefaultConfigurationsArgs Empty = new GetDefaultConfigurationsArgs();

    /**
     * unique Configuration identifier
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return unique Configuration identifier
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * Verison of the Postgresql DB like 14.5
     * 
     */
    @Import(name="dbVersion")
    private @Nullable Output<String> dbVersion;

    /**
     * @return Verison of the Postgresql DB like 14.5
     * 
     */
    public Optional<Output<String>> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDefaultConfigurationsFilterArgs>> filters;

    public Optional<Output<List<GetDefaultConfigurationsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDefaultConfigurationsArgs() {}

    private GetDefaultConfigurationsArgs(GetDefaultConfigurationsArgs $) {
        this.configurationId = $.configurationId;
        this.dbVersion = $.dbVersion;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.shape = $.shape;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDefaultConfigurationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDefaultConfigurationsArgs $;

        public Builder() {
            $ = new GetDefaultConfigurationsArgs();
        }

        public Builder(GetDefaultConfigurationsArgs defaults) {
            $ = new GetDefaultConfigurationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationId unique Configuration identifier
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId unique Configuration identifier
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param dbVersion Verison of the Postgresql DB like 14.5
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion Verison of the Postgresql DB like 14.5
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetDefaultConfigurationsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDefaultConfigurationsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDefaultConfigurationsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param shape Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetDefaultConfigurationsArgs build() {
            return $;
        }
    }

}
