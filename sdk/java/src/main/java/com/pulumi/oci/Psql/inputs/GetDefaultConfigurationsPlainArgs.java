// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Psql.inputs.GetDefaultConfigurationsFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDefaultConfigurationsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDefaultConfigurationsPlainArgs Empty = new GetDefaultConfigurationsPlainArgs();

    /**
     * A unique identifier for the configuration.
     * 
     */
    @Import(name="configurationId")
    private @Nullable String configurationId;

    /**
     * @return A unique identifier for the configuration.
     * 
     */
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * Version of the PostgreSQL database, such as 14.9.
     * 
     */
    @Import(name="dbVersion")
    private @Nullable String dbVersion;

    /**
     * @return Version of the PostgreSQL database, such as 14.9.
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetDefaultConfigurationsFilter> filters;

    public Optional<List<GetDefaultConfigurationsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The instance memory size in GBs for the configuration.
     * 
     */
    @Import(name="instanceMemorySizeInGbs")
    private @Nullable Integer instanceMemorySizeInGbs;

    /**
     * @return The instance memory size in GBs for the configuration.
     * 
     */
    public Optional<Integer> instanceMemorySizeInGbs() {
        return Optional.ofNullable(this.instanceMemorySizeInGbs);
    }

    /**
     * The instance ocpu count for the configuration.
     * 
     */
    @Import(name="instanceOcpuCount")
    private @Nullable Integer instanceOcpuCount;

    /**
     * @return The instance ocpu count for the configuration.
     * 
     */
    public Optional<Integer> instanceOcpuCount() {
        return Optional.ofNullable(this.instanceOcpuCount);
    }

    /**
     * The compute name of the shape for the configuration.
     * 
     */
    @Import(name="shape")
    private @Nullable String shape;

    /**
     * @return The compute name of the shape for the configuration.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDefaultConfigurationsPlainArgs() {}

    private GetDefaultConfigurationsPlainArgs(GetDefaultConfigurationsPlainArgs $) {
        this.configurationId = $.configurationId;
        this.dbVersion = $.dbVersion;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.instanceMemorySizeInGbs = $.instanceMemorySizeInGbs;
        this.instanceOcpuCount = $.instanceOcpuCount;
        this.shape = $.shape;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDefaultConfigurationsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDefaultConfigurationsPlainArgs $;

        public Builder() {
            $ = new GetDefaultConfigurationsPlainArgs();
        }

        public Builder(GetDefaultConfigurationsPlainArgs defaults) {
            $ = new GetDefaultConfigurationsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationId A unique identifier for the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable String configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param dbVersion Version of the PostgreSQL database, such as 14.9.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable String dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetDefaultConfigurationsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDefaultConfigurationsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param instanceMemorySizeInGbs The instance memory size in GBs for the configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceMemorySizeInGbs(@Nullable Integer instanceMemorySizeInGbs) {
            $.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            return this;
        }

        /**
         * @param instanceOcpuCount The instance ocpu count for the configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceOcpuCount(@Nullable Integer instanceOcpuCount) {
            $.instanceOcpuCount = instanceOcpuCount;
            return this;
        }

        /**
         * @param shape The compute name of the shape for the configuration.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable String shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param state A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetDefaultConfigurationsPlainArgs build() {
            return $;
        }
    }

}
