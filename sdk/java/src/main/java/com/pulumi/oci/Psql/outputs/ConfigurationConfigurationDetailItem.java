// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigurationConfigurationDetailItem {
    /**
     * @return Range or list of allowed values.
     * 
     */
    private @Nullable String allowedValues;
    /**
     * @return The configuration variable name.
     * 
     */
    private @Nullable String configKey;
    /**
     * @return Data type of the variable.
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Default value for the configuration variable.
     * 
     */
    private @Nullable String defaultConfigValue;
    /**
     * @return (Updatable) Details about the configuration set.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether the value can be overridden or not.
     * 
     */
    private @Nullable Boolean isOverridable;
    /**
     * @return If true, modifying this configuration value will require a restart of the database.
     * 
     */
    private @Nullable Boolean isRestartRequired;
    /**
     * @return User-selected configuration variable value.
     * 
     */
    private @Nullable String overridenConfigValue;

    private ConfigurationConfigurationDetailItem() {}
    /**
     * @return Range or list of allowed values.
     * 
     */
    public Optional<String> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }
    /**
     * @return The configuration variable name.
     * 
     */
    public Optional<String> configKey() {
        return Optional.ofNullable(this.configKey);
    }
    /**
     * @return Data type of the variable.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Default value for the configuration variable.
     * 
     */
    public Optional<String> defaultConfigValue() {
        return Optional.ofNullable(this.defaultConfigValue);
    }
    /**
     * @return (Updatable) Details about the configuration set.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether the value can be overridden or not.
     * 
     */
    public Optional<Boolean> isOverridable() {
        return Optional.ofNullable(this.isOverridable);
    }
    /**
     * @return If true, modifying this configuration value will require a restart of the database.
     * 
     */
    public Optional<Boolean> isRestartRequired() {
        return Optional.ofNullable(this.isRestartRequired);
    }
    /**
     * @return User-selected configuration variable value.
     * 
     */
    public Optional<String> overridenConfigValue() {
        return Optional.ofNullable(this.overridenConfigValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationConfigurationDetailItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allowedValues;
        private @Nullable String configKey;
        private @Nullable String dataType;
        private @Nullable String defaultConfigValue;
        private @Nullable String description;
        private @Nullable Boolean isOverridable;
        private @Nullable Boolean isRestartRequired;
        private @Nullable String overridenConfigValue;
        public Builder() {}
        public Builder(ConfigurationConfigurationDetailItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.configKey = defaults.configKey;
    	      this.dataType = defaults.dataType;
    	      this.defaultConfigValue = defaults.defaultConfigValue;
    	      this.description = defaults.description;
    	      this.isOverridable = defaults.isOverridable;
    	      this.isRestartRequired = defaults.isRestartRequired;
    	      this.overridenConfigValue = defaults.overridenConfigValue;
        }

        @CustomType.Setter
        public Builder allowedValues(@Nullable String allowedValues) {

            this.allowedValues = allowedValues;
            return this;
        }
        @CustomType.Setter
        public Builder configKey(@Nullable String configKey) {

            this.configKey = configKey;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {

            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder defaultConfigValue(@Nullable String defaultConfigValue) {

            this.defaultConfigValue = defaultConfigValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder isOverridable(@Nullable Boolean isOverridable) {

            this.isOverridable = isOverridable;
            return this;
        }
        @CustomType.Setter
        public Builder isRestartRequired(@Nullable Boolean isRestartRequired) {

            this.isRestartRequired = isRestartRequired;
            return this;
        }
        @CustomType.Setter
        public Builder overridenConfigValue(@Nullable String overridenConfigValue) {

            this.overridenConfigValue = overridenConfigValue;
            return this;
        }
        public ConfigurationConfigurationDetailItem build() {
            final var _resultValue = new ConfigurationConfigurationDetailItem();
            _resultValue.allowedValues = allowedValues;
            _resultValue.configKey = configKey;
            _resultValue.dataType = dataType;
            _resultValue.defaultConfigValue = defaultConfigValue;
            _resultValue.description = description;
            _resultValue.isOverridable = isOverridable;
            _resultValue.isRestartRequired = isRestartRequired;
            _resultValue.overridenConfigValue = overridenConfigValue;
            return _resultValue;
        }
    }
}
