// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Psql.outputs.GetBackupsBackupCollectionItemDbSystemDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupsBackupCollectionItem {
    /**
     * @return Backup size in GB.
     * 
     */
    private Integer backupSize;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Information about the DbSystem associated to a backup.
     * 
     */
    private List<GetBackupsBackupCollectionItemDbSystemDetail> dbSystemDetails;
    /**
     * @return The source DbSystem OCID.
     * 
     */
    private String dbSystemId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Backup description
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return unique DbSystem identifier
     * 
     */
    private String id;
    /**
     * @return lastAcceptedRequestToken from MP.
     * 
     */
    private String lastAcceptedRequestToken;
    /**
     * @return lastCompletedRequestToken from MP.
     * 
     */
    private String lastCompletedRequestToken;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Backup retention period in days.
     * 
     */
    private Integer retentionPeriod;
    /**
     * @return Specifies whether the backup was created manually, or via scheduled backup policy
     * 
     */
    private String sourceType;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the the Backup was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Backup was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;

    private GetBackupsBackupCollectionItem() {}
    /**
     * @return Backup size in GB.
     * 
     */
    public Integer backupSize() {
        return this.backupSize;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Information about the DbSystem associated to a backup.
     * 
     */
    public List<GetBackupsBackupCollectionItemDbSystemDetail> dbSystemDetails() {
        return this.dbSystemDetails;
    }
    /**
     * @return The source DbSystem OCID.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Backup description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return unique DbSystem identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return lastAcceptedRequestToken from MP.
     * 
     */
    public String lastAcceptedRequestToken() {
        return this.lastAcceptedRequestToken;
    }
    /**
     * @return lastCompletedRequestToken from MP.
     * 
     */
    public String lastCompletedRequestToken() {
        return this.lastCompletedRequestToken;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Backup retention period in days.
     * 
     */
    public Integer retentionPeriod() {
        return this.retentionPeriod;
    }
    /**
     * @return Specifies whether the backup was created manually, or via scheduled backup policy
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the Backup was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Backup was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupsBackupCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer backupSize;
        private String compartmentId;
        private List<GetBackupsBackupCollectionItemDbSystemDetail> dbSystemDetails;
        private String dbSystemId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lastAcceptedRequestToken;
        private String lastCompletedRequestToken;
        private String lifecycleDetails;
        private Integer retentionPeriod;
        private String sourceType;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetBackupsBackupCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupSize = defaults.backupSize;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbSystemDetails = defaults.dbSystemDetails;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lastAcceptedRequestToken = defaults.lastAcceptedRequestToken;
    	      this.lastCompletedRequestToken = defaults.lastCompletedRequestToken;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.sourceType = defaults.sourceType;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder backupSize(Integer backupSize) {
            this.backupSize = Objects.requireNonNull(backupSize);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemDetails(List<GetBackupsBackupCollectionItemDbSystemDetail> dbSystemDetails) {
            this.dbSystemDetails = Objects.requireNonNull(dbSystemDetails);
            return this;
        }
        public Builder dbSystemDetails(GetBackupsBackupCollectionItemDbSystemDetail... dbSystemDetails) {
            return dbSystemDetails(List.of(dbSystemDetails));
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastAcceptedRequestToken(String lastAcceptedRequestToken) {
            this.lastAcceptedRequestToken = Objects.requireNonNull(lastAcceptedRequestToken);
            return this;
        }
        @CustomType.Setter
        public Builder lastCompletedRequestToken(String lastCompletedRequestToken) {
            this.lastCompletedRequestToken = Objects.requireNonNull(lastCompletedRequestToken);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriod(Integer retentionPeriod) {
            this.retentionPeriod = Objects.requireNonNull(retentionPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetBackupsBackupCollectionItem build() {
            final var _resultValue = new GetBackupsBackupCollectionItem();
            _resultValue.backupSize = backupSize;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbSystemDetails = dbSystemDetails;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lastAcceptedRequestToken = lastAcceptedRequestToken;
            _resultValue.lastCompletedRequestToken = lastCompletedRequestToken;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.retentionPeriod = retentionPeriod;
            _resultValue.sourceType = sourceType;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
