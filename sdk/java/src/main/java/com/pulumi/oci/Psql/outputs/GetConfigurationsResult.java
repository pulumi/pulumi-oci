// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Psql.outputs.GetConfigurationsConfigurationCollection;
import com.pulumi.oci.Psql.outputs.GetConfigurationsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConfigurationsResult {
    /**
     * @return Config compartment identifier
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The list of configuration_collection.
     * 
     */
    private List<GetConfigurationsConfigurationCollection> configurationCollections;
    private @Nullable String configurationId;
    /**
     * @return Version of the Postgresql DB
     * 
     */
    private @Nullable String dbVersion;
    /**
     * @return Config display name
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetConfigurationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Compute Shape Name like VM.Standard3.Flex.
     * 
     */
    private @Nullable String shape;
    /**
     * @return The current state of the Configuration.
     * 
     */
    private @Nullable String state;

    private GetConfigurationsResult() {}
    /**
     * @return Config compartment identifier
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The list of configuration_collection.
     * 
     */
    public List<GetConfigurationsConfigurationCollection> configurationCollections() {
        return this.configurationCollections;
    }
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }
    /**
     * @return Version of the Postgresql DB
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }
    /**
     * @return Config display name
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetConfigurationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Compute Shape Name like VM.Standard3.Flex.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The current state of the Configuration.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigurationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private List<GetConfigurationsConfigurationCollection> configurationCollections;
        private @Nullable String configurationId;
        private @Nullable String dbVersion;
        private @Nullable String displayName;
        private @Nullable List<GetConfigurationsFilter> filters;
        private String id;
        private @Nullable String shape;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetConfigurationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationCollections = defaults.configurationCollections;
    	      this.configurationId = defaults.configurationId;
    	      this.dbVersion = defaults.dbVersion;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configurationCollections(List<GetConfigurationsConfigurationCollection> configurationCollections) {
            this.configurationCollections = Objects.requireNonNull(configurationCollections);
            return this;
        }
        public Builder configurationCollections(GetConfigurationsConfigurationCollection... configurationCollections) {
            return configurationCollections(List.of(configurationCollections));
        }
        @CustomType.Setter
        public Builder configurationId(@Nullable String configurationId) {
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(@Nullable String dbVersion) {
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetConfigurationsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetConfigurationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetConfigurationsResult build() {
            final var o = new GetConfigurationsResult();
            o.compartmentId = compartmentId;
            o.configurationCollections = configurationCollections;
            o.configurationId = configurationId;
            o.dbVersion = dbVersion;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.shape = shape;
            o.state = state;
            return o;
        }
    }
}
