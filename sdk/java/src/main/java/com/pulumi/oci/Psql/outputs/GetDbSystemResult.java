// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Psql.outputs.GetDbSystemCredential;
import com.pulumi.oci.Psql.outputs.GetDbSystemInstance;
import com.pulumi.oci.Psql.outputs.GetDbSystemInstancesDetail;
import com.pulumi.oci.Psql.outputs.GetDbSystemManagementPolicy;
import com.pulumi.oci.Psql.outputs.GetDbSystemNetworkDetail;
import com.pulumi.oci.Psql.outputs.GetDbSystemSource;
import com.pulumi.oci.Psql.outputs.GetDbSystemStorageDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbSystemResult {
    /**
     * @return The DB system username.
     * 
     */
    private String adminUsername;
    /**
     * @return Compartment identifier
     * 
     */
    private String compartmentId;
    /**
     * @return Configuration identifier
     * 
     */
    private String configId;
    private List<GetDbSystemCredential> credentials;
    private String dbSystemId;
    /**
     * @return The major and minor versions of the DbSystem software.
     * 
     */
    private String dbVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Description of the DbInstance.
     * 
     */
    private String description;
    /**
     * @return Display name of the DbInstance.
     * 
     */
    private String displayName;
    private @Nullable String excludedFields;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return Count of DbInstances in the DbSystem.
     * 
     */
    private Integer instanceCount;
    /**
     * @return The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    private Integer instanceMemorySizeInGbs;
    /**
     * @return The total number of OCPUs available to each DbInstance.
     * 
     */
    private Integer instanceOcpuCount;
    /**
     * @return The list of DbInstances in the DbSystem.
     * 
     */
    private List<GetDbSystemInstance> instances;
    private List<GetDbSystemInstancesDetail> instancesDetails;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return PostgreSQL DB system management policy
     * 
     */
    private List<GetDbSystemManagementPolicy> managementPolicies;
    /**
     * @return DbSystem network details.
     * 
     */
    private List<GetDbSystemNetworkDetail> networkDetails;
    /**
     * @return Shape of dbInstance.
     * 
     */
    private String shape;
    /**
     * @return New source is used to restore the DB system.
     * 
     */
    private List<GetDbSystemSource> sources;
    /**
     * @return The current state of the DbSystem.
     * 
     */
    private String state;
    /**
     * @return Storage details of the DbSystem.
     * 
     */
    private List<GetDbSystemStorageDetail> storageDetails;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Type of the DbSystem.
     * 
     */
    private String systemType;
    /**
     * @return The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;

    private GetDbSystemResult() {}
    /**
     * @return The DB system username.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return Compartment identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Configuration identifier
     * 
     */
    public String configId() {
        return this.configId;
    }
    public List<GetDbSystemCredential> credentials() {
        return this.credentials;
    }
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return The major and minor versions of the DbSystem software.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description of the DbInstance.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Display name of the DbInstance.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Optional<String> excludedFields() {
        return Optional.ofNullable(this.excludedFields);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Count of DbInstances in the DbSystem.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    public Integer instanceMemorySizeInGbs() {
        return this.instanceMemorySizeInGbs;
    }
    /**
     * @return The total number of OCPUs available to each DbInstance.
     * 
     */
    public Integer instanceOcpuCount() {
        return this.instanceOcpuCount;
    }
    /**
     * @return The list of DbInstances in the DbSystem.
     * 
     */
    public List<GetDbSystemInstance> instances() {
        return this.instances;
    }
    public List<GetDbSystemInstancesDetail> instancesDetails() {
        return this.instancesDetails;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return PostgreSQL DB system management policy
     * 
     */
    public List<GetDbSystemManagementPolicy> managementPolicies() {
        return this.managementPolicies;
    }
    /**
     * @return DbSystem network details.
     * 
     */
    public List<GetDbSystemNetworkDetail> networkDetails() {
        return this.networkDetails;
    }
    /**
     * @return Shape of dbInstance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return New source is used to restore the DB system.
     * 
     */
    public List<GetDbSystemSource> sources() {
        return this.sources;
    }
    /**
     * @return The current state of the DbSystem.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Storage details of the DbSystem.
     * 
     */
    public List<GetDbSystemStorageDetail> storageDetails() {
        return this.storageDetails;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Type of the DbSystem.
     * 
     */
    public String systemType() {
        return this.systemType;
    }
    /**
     * @return The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminUsername;
        private String compartmentId;
        private String configId;
        private List<GetDbSystemCredential> credentials;
        private String dbSystemId;
        private String dbVersion;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private @Nullable String excludedFields;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer instanceCount;
        private Integer instanceMemorySizeInGbs;
        private Integer instanceOcpuCount;
        private List<GetDbSystemInstance> instances;
        private List<GetDbSystemInstancesDetail> instancesDetails;
        private String lifecycleDetails;
        private List<GetDbSystemManagementPolicy> managementPolicies;
        private List<GetDbSystemNetworkDetail> networkDetails;
        private String shape;
        private List<GetDbSystemSource> sources;
        private String state;
        private List<GetDbSystemStorageDetail> storageDetails;
        private Map<String,Object> systemTags;
        private String systemType;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDbSystemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configId = defaults.configId;
    	      this.credentials = defaults.credentials;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbVersion = defaults.dbVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.excludedFields = defaults.excludedFields;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.instanceCount = defaults.instanceCount;
    	      this.instanceMemorySizeInGbs = defaults.instanceMemorySizeInGbs;
    	      this.instanceOcpuCount = defaults.instanceOcpuCount;
    	      this.instances = defaults.instances;
    	      this.instancesDetails = defaults.instancesDetails;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managementPolicies = defaults.managementPolicies;
    	      this.networkDetails = defaults.networkDetails;
    	      this.shape = defaults.shape;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.storageDetails = defaults.storageDetails;
    	      this.systemTags = defaults.systemTags;
    	      this.systemType = defaults.systemType;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder configId(String configId) {
            this.configId = Objects.requireNonNull(configId);
            return this;
        }
        @CustomType.Setter
        public Builder credentials(List<GetDbSystemCredential> credentials) {
            this.credentials = Objects.requireNonNull(credentials);
            return this;
        }
        public Builder credentials(GetDbSystemCredential... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder excludedFields(@Nullable String excludedFields) {
            this.excludedFields = excludedFields;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceCount(Integer instanceCount) {
            this.instanceCount = Objects.requireNonNull(instanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder instanceMemorySizeInGbs(Integer instanceMemorySizeInGbs) {
            this.instanceMemorySizeInGbs = Objects.requireNonNull(instanceMemorySizeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder instanceOcpuCount(Integer instanceOcpuCount) {
            this.instanceOcpuCount = Objects.requireNonNull(instanceOcpuCount);
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<GetDbSystemInstance> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }
        public Builder instances(GetDbSystemInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder instancesDetails(List<GetDbSystemInstancesDetail> instancesDetails) {
            this.instancesDetails = Objects.requireNonNull(instancesDetails);
            return this;
        }
        public Builder instancesDetails(GetDbSystemInstancesDetail... instancesDetails) {
            return instancesDetails(List.of(instancesDetails));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder managementPolicies(List<GetDbSystemManagementPolicy> managementPolicies) {
            this.managementPolicies = Objects.requireNonNull(managementPolicies);
            return this;
        }
        public Builder managementPolicies(GetDbSystemManagementPolicy... managementPolicies) {
            return managementPolicies(List.of(managementPolicies));
        }
        @CustomType.Setter
        public Builder networkDetails(List<GetDbSystemNetworkDetail> networkDetails) {
            this.networkDetails = Objects.requireNonNull(networkDetails);
            return this;
        }
        public Builder networkDetails(GetDbSystemNetworkDetail... networkDetails) {
            return networkDetails(List.of(networkDetails));
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetDbSystemSource> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(GetDbSystemSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageDetails(List<GetDbSystemStorageDetail> storageDetails) {
            this.storageDetails = Objects.requireNonNull(storageDetails);
            return this;
        }
        public Builder storageDetails(GetDbSystemStorageDetail... storageDetails) {
            return storageDetails(List.of(storageDetails));
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder systemType(String systemType) {
            this.systemType = Objects.requireNonNull(systemType);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetDbSystemResult build() {
            final var o = new GetDbSystemResult();
            o.adminUsername = adminUsername;
            o.compartmentId = compartmentId;
            o.configId = configId;
            o.credentials = credentials;
            o.dbSystemId = dbSystemId;
            o.dbVersion = dbVersion;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.excludedFields = excludedFields;
            o.freeformTags = freeformTags;
            o.id = id;
            o.instanceCount = instanceCount;
            o.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            o.instanceOcpuCount = instanceOcpuCount;
            o.instances = instances;
            o.instancesDetails = instancesDetails;
            o.lifecycleDetails = lifecycleDetails;
            o.managementPolicies = managementPolicies;
            o.networkDetails = networkDetails;
            o.shape = shape;
            o.sources = sources;
            o.state = state;
            o.storageDetails = storageDetails;
            o.systemTags = systemTags;
            o.systemType = systemType;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
