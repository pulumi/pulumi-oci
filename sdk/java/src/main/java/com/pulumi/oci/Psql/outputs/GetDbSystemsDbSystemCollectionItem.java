// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemCredential;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemInstance;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemInstancesDetail;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemManagementPolicy;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemNetworkDetail;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemSource;
import com.pulumi.oci.Psql.outputs.GetDbSystemsDbSystemCollectionItemStorageDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDbSystemsDbSystemCollectionItem {
    /**
     * @return The DB system username.
     * 
     */
    private String adminUsername;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Configuration identifier
     * 
     */
    private String configId;
    private List<GetDbSystemsDbSystemCollectionItemCredential> credentials;
    /**
     * @return The major and minor versions of the DbSystem software.
     * 
     */
    private String dbVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Description of the DbInstance.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return unique DbSystem identifier
     * 
     */
    private String id;
    /**
     * @return Count of DbInstances in the DbSystem.
     * 
     */
    private Integer instanceCount;
    /**
     * @return The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    private Integer instanceMemorySizeInGbs;
    /**
     * @return The total number of OCPUs available to each DbInstance.
     * 
     */
    private Integer instanceOcpuCount;
    /**
     * @return The list of DbInstances in the DbSystem.
     * 
     */
    private List<GetDbSystemsDbSystemCollectionItemInstance> instances;
    private List<GetDbSystemsDbSystemCollectionItemInstancesDetail> instancesDetails;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return PostgreSQL DB system management policy
     * 
     */
    private List<GetDbSystemsDbSystemCollectionItemManagementPolicy> managementPolicies;
    /**
     * @return DbSystem network details.
     * 
     */
    private List<GetDbSystemsDbSystemCollectionItemNetworkDetail> networkDetails;
    /**
     * @return Shape of dbInstance.
     * 
     */
    private String shape;
    /**
     * @return New source is used to restore the DB system.
     * 
     */
    private List<GetDbSystemsDbSystemCollectionItemSource> sources;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Storage details of the DbSystem.
     * 
     */
    private List<GetDbSystemsDbSystemCollectionItemStorageDetail> storageDetails;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Type of the DbSystem.
     * 
     */
    private String systemType;
    /**
     * @return The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;

    private GetDbSystemsDbSystemCollectionItem() {}
    /**
     * @return The DB system username.
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Configuration identifier
     * 
     */
    public String configId() {
        return this.configId;
    }
    public List<GetDbSystemsDbSystemCollectionItemCredential> credentials() {
        return this.credentials;
    }
    /**
     * @return The major and minor versions of the DbSystem software.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description of the DbInstance.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return unique DbSystem identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Count of DbInstances in the DbSystem.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return The total amount of memory available to each DbInstance, in gigabytes.
     * 
     */
    public Integer instanceMemorySizeInGbs() {
        return this.instanceMemorySizeInGbs;
    }
    /**
     * @return The total number of OCPUs available to each DbInstance.
     * 
     */
    public Integer instanceOcpuCount() {
        return this.instanceOcpuCount;
    }
    /**
     * @return The list of DbInstances in the DbSystem.
     * 
     */
    public List<GetDbSystemsDbSystemCollectionItemInstance> instances() {
        return this.instances;
    }
    public List<GetDbSystemsDbSystemCollectionItemInstancesDetail> instancesDetails() {
        return this.instancesDetails;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return PostgreSQL DB system management policy
     * 
     */
    public List<GetDbSystemsDbSystemCollectionItemManagementPolicy> managementPolicies() {
        return this.managementPolicies;
    }
    /**
     * @return DbSystem network details.
     * 
     */
    public List<GetDbSystemsDbSystemCollectionItemNetworkDetail> networkDetails() {
        return this.networkDetails;
    }
    /**
     * @return Shape of dbInstance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return New source is used to restore the DB system.
     * 
     */
    public List<GetDbSystemsDbSystemCollectionItemSource> sources() {
        return this.sources;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Storage details of the DbSystem.
     * 
     */
    public List<GetDbSystemsDbSystemCollectionItemStorageDetail> storageDetails() {
        return this.storageDetails;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Type of the DbSystem.
     * 
     */
    public String systemType() {
        return this.systemType;
    }
    /**
     * @return The time the the DbSystem was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DbSystem was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemsDbSystemCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminUsername;
        private String compartmentId;
        private String configId;
        private List<GetDbSystemsDbSystemCollectionItemCredential> credentials;
        private String dbVersion;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer instanceCount;
        private Integer instanceMemorySizeInGbs;
        private Integer instanceOcpuCount;
        private List<GetDbSystemsDbSystemCollectionItemInstance> instances;
        private List<GetDbSystemsDbSystemCollectionItemInstancesDetail> instancesDetails;
        private String lifecycleDetails;
        private List<GetDbSystemsDbSystemCollectionItemManagementPolicy> managementPolicies;
        private List<GetDbSystemsDbSystemCollectionItemNetworkDetail> networkDetails;
        private String shape;
        private List<GetDbSystemsDbSystemCollectionItemSource> sources;
        private String state;
        private List<GetDbSystemsDbSystemCollectionItemStorageDetail> storageDetails;
        private Map<String,Object> systemTags;
        private String systemType;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDbSystemsDbSystemCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configId = defaults.configId;
    	      this.credentials = defaults.credentials;
    	      this.dbVersion = defaults.dbVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.instanceCount = defaults.instanceCount;
    	      this.instanceMemorySizeInGbs = defaults.instanceMemorySizeInGbs;
    	      this.instanceOcpuCount = defaults.instanceOcpuCount;
    	      this.instances = defaults.instances;
    	      this.instancesDetails = defaults.instancesDetails;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managementPolicies = defaults.managementPolicies;
    	      this.networkDetails = defaults.networkDetails;
    	      this.shape = defaults.shape;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.storageDetails = defaults.storageDetails;
    	      this.systemTags = defaults.systemTags;
    	      this.systemType = defaults.systemType;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder adminUsername(String adminUsername) {
            if (adminUsername == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "adminUsername");
            }
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configId(String configId) {
            if (configId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "configId");
            }
            this.configId = configId;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(List<GetDbSystemsDbSystemCollectionItemCredential> credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        public Builder credentials(GetDbSystemsDbSystemCollectionItemCredential... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceCount(Integer instanceCount) {
            if (instanceCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "instanceCount");
            }
            this.instanceCount = instanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder instanceMemorySizeInGbs(Integer instanceMemorySizeInGbs) {
            if (instanceMemorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "instanceMemorySizeInGbs");
            }
            this.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder instanceOcpuCount(Integer instanceOcpuCount) {
            if (instanceOcpuCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "instanceOcpuCount");
            }
            this.instanceOcpuCount = instanceOcpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<GetDbSystemsDbSystemCollectionItemInstance> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(GetDbSystemsDbSystemCollectionItemInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder instancesDetails(List<GetDbSystemsDbSystemCollectionItemInstancesDetail> instancesDetails) {
            if (instancesDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "instancesDetails");
            }
            this.instancesDetails = instancesDetails;
            return this;
        }
        public Builder instancesDetails(GetDbSystemsDbSystemCollectionItemInstancesDetail... instancesDetails) {
            return instancesDetails(List.of(instancesDetails));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder managementPolicies(List<GetDbSystemsDbSystemCollectionItemManagementPolicy> managementPolicies) {
            if (managementPolicies == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "managementPolicies");
            }
            this.managementPolicies = managementPolicies;
            return this;
        }
        public Builder managementPolicies(GetDbSystemsDbSystemCollectionItemManagementPolicy... managementPolicies) {
            return managementPolicies(List.of(managementPolicies));
        }
        @CustomType.Setter
        public Builder networkDetails(List<GetDbSystemsDbSystemCollectionItemNetworkDetail> networkDetails) {
            if (networkDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "networkDetails");
            }
            this.networkDetails = networkDetails;
            return this;
        }
        public Builder networkDetails(GetDbSystemsDbSystemCollectionItemNetworkDetail... networkDetails) {
            return networkDetails(List.of(networkDetails));
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetDbSystemsDbSystemCollectionItemSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetDbSystemsDbSystemCollectionItemSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageDetails(List<GetDbSystemsDbSystemCollectionItemStorageDetail> storageDetails) {
            if (storageDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "storageDetails");
            }
            this.storageDetails = storageDetails;
            return this;
        }
        public Builder storageDetails(GetDbSystemsDbSystemCollectionItemStorageDetail... storageDetails) {
            return storageDetails(List.of(storageDetails));
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder systemType(String systemType) {
            if (systemType == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "systemType");
            }
            this.systemType = systemType;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDbSystemsDbSystemCollectionItem build() {
            final var _resultValue = new GetDbSystemsDbSystemCollectionItem();
            _resultValue.adminUsername = adminUsername;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configId = configId;
            _resultValue.credentials = credentials;
            _resultValue.dbVersion = dbVersion;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.instanceCount = instanceCount;
            _resultValue.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            _resultValue.instanceOcpuCount = instanceOcpuCount;
            _resultValue.instances = instances;
            _resultValue.instancesDetails = instancesDetails;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.managementPolicies = managementPolicies;
            _resultValue.networkDetails = networkDetails;
            _resultValue.shape = shape;
            _resultValue.sources = sources;
            _resultValue.state = state;
            _resultValue.storageDetails = storageDetails;
            _resultValue.systemTags = systemTags;
            _resultValue.systemType = systemType;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
