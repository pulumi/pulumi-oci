// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy {
    /**
     * @return Hour of the day when backup starts.
     * 
     */
    private String backupStart;
    /**
     * @return Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
     * 
     */
    private List<Integer> daysOfTheMonths;
    /**
     * @return Weekly days
     * 
     */
    private List<String> daysOfTheWeeks;
    /**
     * @return Backup policy kind
     * 
     */
    private String kind;
    /**
     * @return How many days the customers data should be stored after the db system deletion.
     * 
     */
    private Integer retentionDays;

    private GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy() {}
    /**
     * @return Hour of the day when backup starts.
     * 
     */
    public String backupStart() {
        return this.backupStart;
    }
    /**
     * @return Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
     * 
     */
    public List<Integer> daysOfTheMonths() {
        return this.daysOfTheMonths;
    }
    /**
     * @return Weekly days
     * 
     */
    public List<String> daysOfTheWeeks() {
        return this.daysOfTheWeeks;
    }
    /**
     * @return Backup policy kind
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return How many days the customers data should be stored after the db system deletion.
     * 
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupStart;
        private List<Integer> daysOfTheMonths;
        private List<String> daysOfTheWeeks;
        private String kind;
        private Integer retentionDays;
        public Builder() {}
        public Builder(GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupStart = defaults.backupStart;
    	      this.daysOfTheMonths = defaults.daysOfTheMonths;
    	      this.daysOfTheWeeks = defaults.daysOfTheWeeks;
    	      this.kind = defaults.kind;
    	      this.retentionDays = defaults.retentionDays;
        }

        @CustomType.Setter
        public Builder backupStart(String backupStart) {
            if (backupStart == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy", "backupStart");
            }
            this.backupStart = backupStart;
            return this;
        }
        @CustomType.Setter
        public Builder daysOfTheMonths(List<Integer> daysOfTheMonths) {
            if (daysOfTheMonths == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy", "daysOfTheMonths");
            }
            this.daysOfTheMonths = daysOfTheMonths;
            return this;
        }
        public Builder daysOfTheMonths(Integer... daysOfTheMonths) {
            return daysOfTheMonths(List.of(daysOfTheMonths));
        }
        @CustomType.Setter
        public Builder daysOfTheWeeks(List<String> daysOfTheWeeks) {
            if (daysOfTheWeeks == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy", "daysOfTheWeeks");
            }
            this.daysOfTheWeeks = daysOfTheWeeks;
            return this;
        }
        public Builder daysOfTheWeeks(String... daysOfTheWeeks) {
            return daysOfTheWeeks(List.of(daysOfTheWeeks));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder retentionDays(Integer retentionDays) {
            if (retentionDays == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy", "retentionDays");
            }
            this.retentionDays = retentionDays;
            return this;
        }
        public GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy build() {
            final var _resultValue = new GetDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy();
            _resultValue.backupStart = backupStart;
            _resultValue.daysOfTheMonths = daysOfTheMonths;
            _resultValue.daysOfTheWeeks = daysOfTheWeeks;
            _resultValue.kind = kind;
            _resultValue.retentionDays = retentionDays;
            return _resultValue;
        }
    }
}
