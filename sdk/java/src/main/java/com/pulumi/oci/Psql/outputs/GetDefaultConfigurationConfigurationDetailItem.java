// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDefaultConfigurationConfigurationDetailItem {
    /**
     * @return Range or list of allowed values.
     * 
     */
    private String allowedValues;
    /**
     * @return The configuration variable name.
     * 
     */
    private String configKey;
    /**
     * @return Data type of the variable.
     * 
     */
    private String dataType;
    /**
     * @return Default value for the variable.
     * 
     */
    private String defaultConfigValue;
    /**
     * @return A description for the configuration.
     * 
     */
    private String description;
    /**
     * @return Whether the value can be overridden or not.
     * 
     */
    private Boolean isOverridable;
    /**
     * @return If true, modifying this configuration value will require a restart.
     * 
     */
    private Boolean isRestartRequired;

    private GetDefaultConfigurationConfigurationDetailItem() {}
    /**
     * @return Range or list of allowed values.
     * 
     */
    public String allowedValues() {
        return this.allowedValues;
    }
    /**
     * @return The configuration variable name.
     * 
     */
    public String configKey() {
        return this.configKey;
    }
    /**
     * @return Data type of the variable.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Default value for the variable.
     * 
     */
    public String defaultConfigValue() {
        return this.defaultConfigValue;
    }
    /**
     * @return A description for the configuration.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the value can be overridden or not.
     * 
     */
    public Boolean isOverridable() {
        return this.isOverridable;
    }
    /**
     * @return If true, modifying this configuration value will require a restart.
     * 
     */
    public Boolean isRestartRequired() {
        return this.isRestartRequired;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDefaultConfigurationConfigurationDetailItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allowedValues;
        private String configKey;
        private String dataType;
        private String defaultConfigValue;
        private String description;
        private Boolean isOverridable;
        private Boolean isRestartRequired;
        public Builder() {}
        public Builder(GetDefaultConfigurationConfigurationDetailItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.configKey = defaults.configKey;
    	      this.dataType = defaults.dataType;
    	      this.defaultConfigValue = defaults.defaultConfigValue;
    	      this.description = defaults.description;
    	      this.isOverridable = defaults.isOverridable;
    	      this.isRestartRequired = defaults.isRestartRequired;
        }

        @CustomType.Setter
        public Builder allowedValues(String allowedValues) {
            if (allowedValues == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "allowedValues");
            }
            this.allowedValues = allowedValues;
            return this;
        }
        @CustomType.Setter
        public Builder configKey(String configKey) {
            if (configKey == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "configKey");
            }
            this.configKey = configKey;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder defaultConfigValue(String defaultConfigValue) {
            if (defaultConfigValue == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "defaultConfigValue");
            }
            this.defaultConfigValue = defaultConfigValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder isOverridable(Boolean isOverridable) {
            if (isOverridable == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "isOverridable");
            }
            this.isOverridable = isOverridable;
            return this;
        }
        @CustomType.Setter
        public Builder isRestartRequired(Boolean isRestartRequired) {
            if (isRestartRequired == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationConfigurationDetailItem", "isRestartRequired");
            }
            this.isRestartRequired = isRestartRequired;
            return this;
        }
        public GetDefaultConfigurationConfigurationDetailItem build() {
            final var _resultValue = new GetDefaultConfigurationConfigurationDetailItem();
            _resultValue.allowedValues = allowedValues;
            _resultValue.configKey = configKey;
            _resultValue.dataType = dataType;
            _resultValue.defaultConfigValue = defaultConfigValue;
            _resultValue.description = description;
            _resultValue.isOverridable = isOverridable;
            _resultValue.isRestartRequired = isRestartRequired;
            return _resultValue;
        }
    }
}
