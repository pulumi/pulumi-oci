// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Psql.outputs.GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDefaultConfigurationsDefaultConfigurationCollectionItem {
    /**
     * @return Indicates the collection of compatible shapes for this configuration.
     * 
     */
    private List<String> compatibleShapes;
    /**
     * @return List of default configuration values for databases.
     * 
     */
    private List<GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail> configurationDetails;
    /**
     * @return Version of the PostgreSQL database, such as 14.9.
     * 
     */
    private String dbVersion;
    /**
     * @return A description for the configuration.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return A unique identifier for the configuration.
     * 
     */
    private String id;
    /**
     * @return The instance memory size in GBs for the configuration.
     * 
     */
    private Integer instanceMemorySizeInGbs;
    /**
     * @return The instance ocpu count for the configuration.
     * 
     */
    private Integer instanceOcpuCount;
    /**
     * @return True if the configuration supports flexible shapes, false otherwise.
     * 
     */
    private Boolean isFlexible;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The compute name of the shape for the configuration.
     * 
     */
    private String shape;
    /**
     * @return A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     * 
     */
    private String state;
    /**
     * @return The date and time that the configuration was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetDefaultConfigurationsDefaultConfigurationCollectionItem() {}
    /**
     * @return Indicates the collection of compatible shapes for this configuration.
     * 
     */
    public List<String> compatibleShapes() {
        return this.compatibleShapes;
    }
    /**
     * @return List of default configuration values for databases.
     * 
     */
    public List<GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail> configurationDetails() {
        return this.configurationDetails;
    }
    /**
     * @return Version of the PostgreSQL database, such as 14.9.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return A description for the configuration.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A unique identifier for the configuration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The instance memory size in GBs for the configuration.
     * 
     */
    public Integer instanceMemorySizeInGbs() {
        return this.instanceMemorySizeInGbs;
    }
    /**
     * @return The instance ocpu count for the configuration.
     * 
     */
    public Integer instanceOcpuCount() {
        return this.instanceOcpuCount;
    }
    /**
     * @return True if the configuration supports flexible shapes, false otherwise.
     * 
     */
    public Boolean isFlexible() {
        return this.isFlexible;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The compute name of the shape for the configuration.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time that the configuration was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDefaultConfigurationsDefaultConfigurationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> compatibleShapes;
        private List<GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail> configurationDetails;
        private String dbVersion;
        private String description;
        private String displayName;
        private String id;
        private Integer instanceMemorySizeInGbs;
        private Integer instanceOcpuCount;
        private Boolean isFlexible;
        private String lifecycleDetails;
        private String shape;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetDefaultConfigurationsDefaultConfigurationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibleShapes = defaults.compatibleShapes;
    	      this.configurationDetails = defaults.configurationDetails;
    	      this.dbVersion = defaults.dbVersion;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.instanceMemorySizeInGbs = defaults.instanceMemorySizeInGbs;
    	      this.instanceOcpuCount = defaults.instanceOcpuCount;
    	      this.isFlexible = defaults.isFlexible;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compatibleShapes(List<String> compatibleShapes) {
            if (compatibleShapes == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "compatibleShapes");
            }
            this.compatibleShapes = compatibleShapes;
            return this;
        }
        public Builder compatibleShapes(String... compatibleShapes) {
            return compatibleShapes(List.of(compatibleShapes));
        }
        @CustomType.Setter
        public Builder configurationDetails(List<GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail> configurationDetails) {
            if (configurationDetails == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "configurationDetails");
            }
            this.configurationDetails = configurationDetails;
            return this;
        }
        public Builder configurationDetails(GetDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail... configurationDetails) {
            return configurationDetails(List.of(configurationDetails));
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceMemorySizeInGbs(Integer instanceMemorySizeInGbs) {
            if (instanceMemorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "instanceMemorySizeInGbs");
            }
            this.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder instanceOcpuCount(Integer instanceOcpuCount) {
            if (instanceOcpuCount == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "instanceOcpuCount");
            }
            this.instanceOcpuCount = instanceOcpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexible(Boolean isFlexible) {
            if (isFlexible == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "isFlexible");
            }
            this.isFlexible = isFlexible;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDefaultConfigurationsDefaultConfigurationCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetDefaultConfigurationsDefaultConfigurationCollectionItem build() {
            final var _resultValue = new GetDefaultConfigurationsDefaultConfigurationCollectionItem();
            _resultValue.compatibleShapes = compatibleShapes;
            _resultValue.configurationDetails = configurationDetails;
            _resultValue.dbVersion = dbVersion;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.instanceMemorySizeInGbs = instanceMemorySizeInGbs;
            _resultValue.instanceOcpuCount = instanceOcpuCount;
            _resultValue.isFlexible = isFlexible;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.shape = shape;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
