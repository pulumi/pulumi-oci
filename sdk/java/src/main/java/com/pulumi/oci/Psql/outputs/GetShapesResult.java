// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Psql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Psql.outputs.GetShapesFilter;
import com.pulumi.oci.Psql.outputs.GetShapesShapeCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetShapesResult {
    private @Nullable String compartmentId;
    private @Nullable List<GetShapesFilter> filters;
    /**
     * @return A unique identifier for the shape.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of shape_collection.
     * 
     */
    private List<GetShapesShapeCollection> shapeCollections;

    private GetShapesResult() {}
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetShapesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return A unique identifier for the shape.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of shape_collection.
     * 
     */
    public List<GetShapesShapeCollection> shapeCollections() {
        return this.shapeCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShapesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetShapesFilter> filters;
        private @Nullable String id;
        private List<GetShapesShapeCollection> shapeCollections;
        public Builder() {}
        public Builder(GetShapesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.shapeCollections = defaults.shapeCollections;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetShapesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetShapesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder shapeCollections(List<GetShapesShapeCollection> shapeCollections) {
            if (shapeCollections == null) {
              throw new MissingRequiredPropertyException("GetShapesResult", "shapeCollections");
            }
            this.shapeCollections = shapeCollections;
            return this;
        }
        public Builder shapeCollections(GetShapesShapeCollection... shapeCollections) {
            return shapeCollections(List.of(shapeCollections));
        }
        public GetShapesResult build() {
            final var _resultValue = new GetShapesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.shapeCollections = shapeCollections;
            return _resultValue;
        }
    }
}
