// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Queue;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * (Updatable) Compartment Identifier
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
     * 
     */
    @Import(name="customEncryptionKeyId")
    private @Nullable Output<String> customEncryptionKeyId;

    /**
     * @return (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
     * 
     */
    public Optional<Output<String>> customEncryptionKeyId() {
        return Optional.ofNullable(this.customEncryptionKeyId);
    }

    /**
     * (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    @Import(name="deadLetterQueueDeliveryCount")
    private @Nullable Output<Integer> deadLetterQueueDeliveryCount;

    /**
     * @return (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    public Optional<Output<Integer>> deadLetterQueueDeliveryCount() {
        return Optional.ofNullable(this.deadLetterQueueDeliveryCount);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Queue Identifier
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Queue Identifier
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    @Import(name="purgeQueue")
    private @Nullable Output<Boolean> purgeQueue;

    public Optional<Output<Boolean>> purgeQueue() {
        return Optional.ofNullable(this.purgeQueue);
    }

    @Import(name="purgeType")
    private @Nullable Output<String> purgeType;

    public Optional<Output<String>> purgeType() {
        return Optional.ofNullable(this.purgeType);
    }

    /**
     * The retention period of the messages in the queue, in seconds.
     * 
     */
    @Import(name="retentionInSeconds")
    private @Nullable Output<Integer> retentionInSeconds;

    /**
     * @return The retention period of the messages in the queue, in seconds.
     * 
     */
    public Optional<Output<Integer>> retentionInSeconds() {
        return Optional.ofNullable(this.retentionInSeconds);
    }

    /**
     * (Updatable) The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * (Updatable) The default visibility of the messages consumed from the queue.
     * 
     */
    @Import(name="visibilityInSeconds")
    private @Nullable Output<Integer> visibilityInSeconds;

    /**
     * @return (Updatable) The default visibility of the messages consumed from the queue.
     * 
     */
    public Optional<Output<Integer>> visibilityInSeconds() {
        return Optional.ofNullable(this.visibilityInSeconds);
    }

    private QueueArgs() {}

    private QueueArgs(QueueArgs $) {
        this.compartmentId = $.compartmentId;
        this.customEncryptionKeyId = $.customEncryptionKeyId;
        this.deadLetterQueueDeliveryCount = $.deadLetterQueueDeliveryCount;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.purgeQueue = $.purgeQueue;
        this.purgeType = $.purgeType;
        this.retentionInSeconds = $.retentionInSeconds;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.visibilityInSeconds = $.visibilityInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueArgs $;

        public Builder() {
            $ = new QueueArgs();
        }

        public Builder(QueueArgs defaults) {
            $ = new QueueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param customEncryptionKeyId (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
         * 
         * @return builder
         * 
         */
        public Builder customEncryptionKeyId(@Nullable Output<String> customEncryptionKeyId) {
            $.customEncryptionKeyId = customEncryptionKeyId;
            return this;
        }

        /**
         * @param customEncryptionKeyId (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
         * 
         * @return builder
         * 
         */
        public Builder customEncryptionKeyId(String customEncryptionKeyId) {
            return customEncryptionKeyId(Output.of(customEncryptionKeyId));
        }

        /**
         * @param deadLetterQueueDeliveryCount (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterQueueDeliveryCount(@Nullable Output<Integer> deadLetterQueueDeliveryCount) {
            $.deadLetterQueueDeliveryCount = deadLetterQueueDeliveryCount;
            return this;
        }

        /**
         * @param deadLetterQueueDeliveryCount (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterQueueDeliveryCount(Integer deadLetterQueueDeliveryCount) {
            return deadLetterQueueDeliveryCount(Output.of(deadLetterQueueDeliveryCount));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Queue Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Queue Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        public Builder purgeQueue(@Nullable Output<Boolean> purgeQueue) {
            $.purgeQueue = purgeQueue;
            return this;
        }

        public Builder purgeQueue(Boolean purgeQueue) {
            return purgeQueue(Output.of(purgeQueue));
        }

        public Builder purgeType(@Nullable Output<String> purgeType) {
            $.purgeType = purgeType;
            return this;
        }

        public Builder purgeType(String purgeType) {
            return purgeType(Output.of(purgeType));
        }

        /**
         * @param retentionInSeconds The retention period of the messages in the queue, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder retentionInSeconds(@Nullable Output<Integer> retentionInSeconds) {
            $.retentionInSeconds = retentionInSeconds;
            return this;
        }

        /**
         * @param retentionInSeconds The retention period of the messages in the queue, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder retentionInSeconds(Integer retentionInSeconds) {
            return retentionInSeconds(Output.of(retentionInSeconds));
        }

        /**
         * @param timeoutInSeconds (Updatable) The default polling timeout of the messages in the queue, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds (Updatable) The default polling timeout of the messages in the queue, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param visibilityInSeconds (Updatable) The default visibility of the messages consumed from the queue.
         * 
         * @return builder
         * 
         */
        public Builder visibilityInSeconds(@Nullable Output<Integer> visibilityInSeconds) {
            $.visibilityInSeconds = visibilityInSeconds;
            return this;
        }

        /**
         * @param visibilityInSeconds (Updatable) The default visibility of the messages consumed from the queue.
         * 
         * @return builder
         * 
         */
        public Builder visibilityInSeconds(Integer visibilityInSeconds) {
            return visibilityInSeconds(Output.of(visibilityInSeconds));
        }

        public QueueArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
