// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Queue.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetQueuesQueueCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Id of the custom master encryption key which will be used to encrypt messages content
     * 
     */
    private String customEncryptionKeyId;
    /**
     * @return The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    private Integer deadLetterQueueDeliveryCount;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return unique Queue identifier
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The endpoint to use to consume or publish messages in the queue.
     * 
     */
    private String messagesEndpoint;
    private Boolean purgeQueue;
    private String purgeType;
    /**
     * @return The retention period of the messages in the queue, in seconds.
     * 
     */
    private Integer retentionInSeconds;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the the Queue was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Queue was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    private Integer timeoutInSeconds;
    /**
     * @return The default visibility of the messages consumed from the queue.
     * 
     */
    private Integer visibilityInSeconds;

    private GetQueuesQueueCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Id of the custom master encryption key which will be used to encrypt messages content
     * 
     */
    public String customEncryptionKeyId() {
        return this.customEncryptionKeyId;
    }
    /**
     * @return The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    public Integer deadLetterQueueDeliveryCount() {
        return this.deadLetterQueueDeliveryCount;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return unique Queue identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The endpoint to use to consume or publish messages in the queue.
     * 
     */
    public String messagesEndpoint() {
        return this.messagesEndpoint;
    }
    public Boolean purgeQueue() {
        return this.purgeQueue;
    }
    public String purgeType() {
        return this.purgeType;
    }
    /**
     * @return The retention period of the messages in the queue, in seconds.
     * 
     */
    public Integer retentionInSeconds() {
        return this.retentionInSeconds;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the Queue was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Queue was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return The default visibility of the messages consumed from the queue.
     * 
     */
    public Integer visibilityInSeconds() {
        return this.visibilityInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueuesQueueCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String customEncryptionKeyId;
        private Integer deadLetterQueueDeliveryCount;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String messagesEndpoint;
        private Boolean purgeQueue;
        private String purgeType;
        private Integer retentionInSeconds;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private Integer timeoutInSeconds;
        private Integer visibilityInSeconds;
        public Builder() {}
        public Builder(GetQueuesQueueCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.customEncryptionKeyId = defaults.customEncryptionKeyId;
    	      this.deadLetterQueueDeliveryCount = defaults.deadLetterQueueDeliveryCount;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.messagesEndpoint = defaults.messagesEndpoint;
    	      this.purgeQueue = defaults.purgeQueue;
    	      this.purgeType = defaults.purgeType;
    	      this.retentionInSeconds = defaults.retentionInSeconds;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.visibilityInSeconds = defaults.visibilityInSeconds;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder customEncryptionKeyId(String customEncryptionKeyId) {
            this.customEncryptionKeyId = Objects.requireNonNull(customEncryptionKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder deadLetterQueueDeliveryCount(Integer deadLetterQueueDeliveryCount) {
            this.deadLetterQueueDeliveryCount = Objects.requireNonNull(deadLetterQueueDeliveryCount);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder messagesEndpoint(String messagesEndpoint) {
            this.messagesEndpoint = Objects.requireNonNull(messagesEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder purgeQueue(Boolean purgeQueue) {
            this.purgeQueue = Objects.requireNonNull(purgeQueue);
            return this;
        }
        @CustomType.Setter
        public Builder purgeType(String purgeType) {
            this.purgeType = Objects.requireNonNull(purgeType);
            return this;
        }
        @CustomType.Setter
        public Builder retentionInSeconds(Integer retentionInSeconds) {
            this.retentionInSeconds = Objects.requireNonNull(retentionInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            this.timeoutInSeconds = Objects.requireNonNull(timeoutInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder visibilityInSeconds(Integer visibilityInSeconds) {
            this.visibilityInSeconds = Objects.requireNonNull(visibilityInSeconds);
            return this;
        }
        public GetQueuesQueueCollectionItem build() {
            final var o = new GetQueuesQueueCollectionItem();
            o.compartmentId = compartmentId;
            o.customEncryptionKeyId = customEncryptionKeyId;
            o.deadLetterQueueDeliveryCount = deadLetterQueueDeliveryCount;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.messagesEndpoint = messagesEndpoint;
            o.purgeQueue = purgeQueue;
            o.purgeType = purgeType;
            o.retentionInSeconds = retentionInSeconds;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.timeoutInSeconds = timeoutInSeconds;
            o.visibilityInSeconds = visibilityInSeconds;
            return o;
        }
    }
}
