// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Queue.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetQueuesQueueCollectionItem {
    /**
     * @return The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can&#39;t exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue&#39;s resources.
     * 
     */
    private Integer channelConsumptionLimit;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
     * 
     */
    private String customEncryptionKeyId;
    /**
     * @return The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    private Integer deadLetterQueueDeliveryCount;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The unique queue identifier.
     * 
     */
    private String id;
    /**
     * @return Any additional details about the current state of the queue.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The endpoint to use to consume or publish messages in the queue.
     * 
     */
    private String messagesEndpoint;
    private Integer purgeTrigger;
    private String purgeType;
    /**
     * @return The retention period of the messages in the queue, in seconds.
     * 
     */
    private Integer retentionInSeconds;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    private String timeUpdated;
    /**
     * @return The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    private Integer timeoutInSeconds;
    /**
     * @return The default visibility timeout of the messages consumed from the queue, in seconds.
     * 
     */
    private Integer visibilityInSeconds;

    private GetQueuesQueueCollectionItem() {}
    /**
     * @return The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can&#39;t exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue&#39;s resources.
     * 
     */
    public Integer channelConsumptionLimit() {
        return this.channelConsumptionLimit;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
     * 
     */
    public String customEncryptionKeyId() {
        return this.customEncryptionKeyId;
    }
    /**
     * @return The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     * 
     */
    public Integer deadLetterQueueDeliveryCount() {
        return this.deadLetterQueueDeliveryCount;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The unique queue identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Any additional details about the current state of the queue.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The endpoint to use to consume or publish messages in the queue.
     * 
     */
    public String messagesEndpoint() {
        return this.messagesEndpoint;
    }
    public Integer purgeTrigger() {
        return this.purgeTrigger;
    }
    public String purgeType() {
        return this.purgeType;
    }
    /**
     * @return The retention period of the messages in the queue, in seconds.
     * 
     */
    public Integer retentionInSeconds() {
        return this.retentionInSeconds;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The default polling timeout of the messages in the queue, in seconds.
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return The default visibility timeout of the messages consumed from the queue, in seconds.
     * 
     */
    public Integer visibilityInSeconds() {
        return this.visibilityInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueuesQueueCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer channelConsumptionLimit;
        private String compartmentId;
        private String customEncryptionKeyId;
        private Integer deadLetterQueueDeliveryCount;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String messagesEndpoint;
        private Integer purgeTrigger;
        private String purgeType;
        private Integer retentionInSeconds;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private Integer timeoutInSeconds;
        private Integer visibilityInSeconds;
        public Builder() {}
        public Builder(GetQueuesQueueCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelConsumptionLimit = defaults.channelConsumptionLimit;
    	      this.compartmentId = defaults.compartmentId;
    	      this.customEncryptionKeyId = defaults.customEncryptionKeyId;
    	      this.deadLetterQueueDeliveryCount = defaults.deadLetterQueueDeliveryCount;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.messagesEndpoint = defaults.messagesEndpoint;
    	      this.purgeTrigger = defaults.purgeTrigger;
    	      this.purgeType = defaults.purgeType;
    	      this.retentionInSeconds = defaults.retentionInSeconds;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.visibilityInSeconds = defaults.visibilityInSeconds;
        }

        @CustomType.Setter
        public Builder channelConsumptionLimit(Integer channelConsumptionLimit) {
            if (channelConsumptionLimit == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "channelConsumptionLimit");
            }
            this.channelConsumptionLimit = channelConsumptionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder customEncryptionKeyId(String customEncryptionKeyId) {
            if (customEncryptionKeyId == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "customEncryptionKeyId");
            }
            this.customEncryptionKeyId = customEncryptionKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder deadLetterQueueDeliveryCount(Integer deadLetterQueueDeliveryCount) {
            if (deadLetterQueueDeliveryCount == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "deadLetterQueueDeliveryCount");
            }
            this.deadLetterQueueDeliveryCount = deadLetterQueueDeliveryCount;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder messagesEndpoint(String messagesEndpoint) {
            if (messagesEndpoint == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "messagesEndpoint");
            }
            this.messagesEndpoint = messagesEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder purgeTrigger(Integer purgeTrigger) {
            if (purgeTrigger == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "purgeTrigger");
            }
            this.purgeTrigger = purgeTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder purgeType(String purgeType) {
            if (purgeType == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "purgeType");
            }
            this.purgeType = purgeType;
            return this;
        }
        @CustomType.Setter
        public Builder retentionInSeconds(Integer retentionInSeconds) {
            if (retentionInSeconds == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "retentionInSeconds");
            }
            this.retentionInSeconds = retentionInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            if (timeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "timeoutInSeconds");
            }
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder visibilityInSeconds(Integer visibilityInSeconds) {
            if (visibilityInSeconds == null) {
              throw new MissingRequiredPropertyException("GetQueuesQueueCollectionItem", "visibilityInSeconds");
            }
            this.visibilityInSeconds = visibilityInSeconds;
            return this;
        }
        public GetQueuesQueueCollectionItem build() {
            final var _resultValue = new GetQueuesQueueCollectionItem();
            _resultValue.channelConsumptionLimit = channelConsumptionLimit;
            _resultValue.compartmentId = compartmentId;
            _resultValue.customEncryptionKeyId = customEncryptionKeyId;
            _resultValue.deadLetterQueueDeliveryCount = deadLetterQueueDeliveryCount;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.messagesEndpoint = messagesEndpoint;
            _resultValue.purgeTrigger = purgeTrigger;
            _resultValue.purgeType = purgeType;
            _resultValue.retentionInSeconds = retentionInSeconds;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            _resultValue.visibilityInSeconds = visibilityInSeconds;
            return _resultValue;
        }
    }
}
