// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProtectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProtectionPolicyArgs Empty = new ProtectionPolicyArgs();

    /**
     * (Updatable) The maximum number of days to retain backups for a protected database.
     * 
     */
    @Import(name="backupRetentionPeriodInDays", required=true)
    private Output<Integer> backupRetentionPeriodInDays;

    /**
     * @return (Updatable) The maximum number of days to retain backups for a protected database.
     * 
     */
    public Output<Integer> backupRetentionPeriodInDays() {
        return this.backupRetentionPeriodInDays;
    }

    /**
     * (Updatable) Compartment Identifier
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user provided name for the protection policy. The &#39;displayName&#39; does not have to be unique, and it can be modified. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) A user provided name for the protection policy. The &#39;displayName&#39; does not have to be unique, and it can be modified. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Indicates whether the protection policy enforces Recovery Service to retain backups in the same cloud service environment where your Oracle Database is provisioned. This parameter is applicable if your Oracle Database runs in a different cloud service environment, such as Microsoft Azure. If you set the mustEnforceCloudLocality parameter to TRUE, then Recovery Service stores the database backups locally in the same cloud service environment where the database resides. For example, if your Oracle Database is provisioned on Microsoft Azure, then Recovery Service stores the database backups in Azure. Note: You cannot change the mustEnforceCloudLocality setting for a protection policy after you create it.
     * 
     */
    @Import(name="mustEnforceCloudLocality")
    private @Nullable Output<Boolean> mustEnforceCloudLocality;

    /**
     * @return Indicates whether the protection policy enforces Recovery Service to retain backups in the same cloud service environment where your Oracle Database is provisioned. This parameter is applicable if your Oracle Database runs in a different cloud service environment, such as Microsoft Azure. If you set the mustEnforceCloudLocality parameter to TRUE, then Recovery Service stores the database backups locally in the same cloud service environment where the database resides. For example, if your Oracle Database is provisioned on Microsoft Azure, then Recovery Service stores the database backups in Azure. Note: You cannot change the mustEnforceCloudLocality setting for a protection policy after you create it.
     * 
     */
    public Optional<Output<Boolean>> mustEnforceCloudLocality() {
        return Optional.ofNullable(this.mustEnforceCloudLocality);
    }

    /**
     * (Updatable) An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
     * * The retention lock feature controls whether Recovery Service strictly preserves backups for the duration defined in a policy. Retention lock is useful to enforce recovery window compliance and to prevent unintentional modifications to protected database backups.
     * * Recovery Service enforces a 14-day delay before the retention lock set for a policy can take effect. Therefore, you must set policyLockedDateTime  to a date that occurs 14 days after the current date.
     * * For example, assuming that the current date is Aug 1, 2023 9 pm, you can set policyLockedDateTime  to &#39;2023-08-15T21:00:00.600Z&#39; (Aug 15, 2023, 9:00 pm), or greater.
     * * During the 14-day delay period, you can either increase or decrease the retention period in the policy.
     * * However, you are only allowed to increase the retention period on or after the retention lock date.
     * * You cannot change the value of policyLockedDateTime if the retention lock is already in effect.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="policyLockedDateTime")
    private @Nullable Output<String> policyLockedDateTime;

    /**
     * @return (Updatable) An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
     * * The retention lock feature controls whether Recovery Service strictly preserves backups for the duration defined in a policy. Retention lock is useful to enforce recovery window compliance and to prevent unintentional modifications to protected database backups.
     * * Recovery Service enforces a 14-day delay before the retention lock set for a policy can take effect. Therefore, you must set policyLockedDateTime  to a date that occurs 14 days after the current date.
     * * For example, assuming that the current date is Aug 1, 2023 9 pm, you can set policyLockedDateTime  to &#39;2023-08-15T21:00:00.600Z&#39; (Aug 15, 2023, 9:00 pm), or greater.
     * * During the 14-day delay period, you can either increase or decrease the retention period in the policy.
     * * However, you are only allowed to increase the retention period on or after the retention lock date.
     * * You cannot change the value of policyLockedDateTime if the retention lock is already in effect.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> policyLockedDateTime() {
        return Optional.ofNullable(this.policyLockedDateTime);
    }

    private ProtectionPolicyArgs() {}

    private ProtectionPolicyArgs(ProtectionPolicyArgs $) {
        this.backupRetentionPeriodInDays = $.backupRetentionPeriodInDays;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.mustEnforceCloudLocality = $.mustEnforceCloudLocality;
        this.policyLockedDateTime = $.policyLockedDateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProtectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProtectionPolicyArgs $;

        public Builder() {
            $ = new ProtectionPolicyArgs();
        }

        public Builder(ProtectionPolicyArgs defaults) {
            $ = new ProtectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRetentionPeriodInDays (Updatable) The maximum number of days to retain backups for a protected database.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriodInDays(Output<Integer> backupRetentionPeriodInDays) {
            $.backupRetentionPeriodInDays = backupRetentionPeriodInDays;
            return this;
        }

        /**
         * @param backupRetentionPeriodInDays (Updatable) The maximum number of days to retain backups for a protected database.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
            return backupRetentionPeriodInDays(Output.of(backupRetentionPeriodInDays));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) A user provided name for the protection policy. The &#39;displayName&#39; does not have to be unique, and it can be modified. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user provided name for the protection policy. The &#39;displayName&#39; does not have to be unique, and it can be modified. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param mustEnforceCloudLocality Indicates whether the protection policy enforces Recovery Service to retain backups in the same cloud service environment where your Oracle Database is provisioned. This parameter is applicable if your Oracle Database runs in a different cloud service environment, such as Microsoft Azure. If you set the mustEnforceCloudLocality parameter to TRUE, then Recovery Service stores the database backups locally in the same cloud service environment where the database resides. For example, if your Oracle Database is provisioned on Microsoft Azure, then Recovery Service stores the database backups in Azure. Note: You cannot change the mustEnforceCloudLocality setting for a protection policy after you create it.
         * 
         * @return builder
         * 
         */
        public Builder mustEnforceCloudLocality(@Nullable Output<Boolean> mustEnforceCloudLocality) {
            $.mustEnforceCloudLocality = mustEnforceCloudLocality;
            return this;
        }

        /**
         * @param mustEnforceCloudLocality Indicates whether the protection policy enforces Recovery Service to retain backups in the same cloud service environment where your Oracle Database is provisioned. This parameter is applicable if your Oracle Database runs in a different cloud service environment, such as Microsoft Azure. If you set the mustEnforceCloudLocality parameter to TRUE, then Recovery Service stores the database backups locally in the same cloud service environment where the database resides. For example, if your Oracle Database is provisioned on Microsoft Azure, then Recovery Service stores the database backups in Azure. Note: You cannot change the mustEnforceCloudLocality setting for a protection policy after you create it.
         * 
         * @return builder
         * 
         */
        public Builder mustEnforceCloudLocality(Boolean mustEnforceCloudLocality) {
            return mustEnforceCloudLocality(Output.of(mustEnforceCloudLocality));
        }

        /**
         * @param policyLockedDateTime (Updatable) An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
         * * The retention lock feature controls whether Recovery Service strictly preserves backups for the duration defined in a policy. Retention lock is useful to enforce recovery window compliance and to prevent unintentional modifications to protected database backups.
         * * Recovery Service enforces a 14-day delay before the retention lock set for a policy can take effect. Therefore, you must set policyLockedDateTime  to a date that occurs 14 days after the current date.
         * * For example, assuming that the current date is Aug 1, 2023 9 pm, you can set policyLockedDateTime  to &#39;2023-08-15T21:00:00.600Z&#39; (Aug 15, 2023, 9:00 pm), or greater.
         * * During the 14-day delay period, you can either increase or decrease the retention period in the policy.
         * * However, you are only allowed to increase the retention period on or after the retention lock date.
         * * You cannot change the value of policyLockedDateTime if the retention lock is already in effect.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder policyLockedDateTime(@Nullable Output<String> policyLockedDateTime) {
            $.policyLockedDateTime = policyLockedDateTime;
            return this;
        }

        /**
         * @param policyLockedDateTime (Updatable) An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
         * * The retention lock feature controls whether Recovery Service strictly preserves backups for the duration defined in a policy. Retention lock is useful to enforce recovery window compliance and to prevent unintentional modifications to protected database backups.
         * * Recovery Service enforces a 14-day delay before the retention lock set for a policy can take effect. Therefore, you must set policyLockedDateTime  to a date that occurs 14 days after the current date.
         * * For example, assuming that the current date is Aug 1, 2023 9 pm, you can set policyLockedDateTime  to &#39;2023-08-15T21:00:00.600Z&#39; (Aug 15, 2023, 9:00 pm), or greater.
         * * During the 14-day delay period, you can either increase or decrease the retention period in the policy.
         * * However, you are only allowed to increase the retention period on or after the retention lock date.
         * * You cannot change the value of policyLockedDateTime if the retention lock is already in effect.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder policyLockedDateTime(String policyLockedDateTime) {
            return policyLockedDateTime(Output.of(policyLockedDateTime));
        }

        public ProtectionPolicyArgs build() {
            if ($.backupRetentionPeriodInDays == null) {
                throw new MissingRequiredPropertyException("ProtectionPolicyArgs", "backupRetentionPeriodInDays");
            }
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ProtectionPolicyArgs", "compartmentId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ProtectionPolicyArgs", "displayName");
            }
            return $;
        }
    }

}
