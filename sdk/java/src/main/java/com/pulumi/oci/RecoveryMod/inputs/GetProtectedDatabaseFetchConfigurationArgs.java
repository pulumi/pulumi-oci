// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProtectedDatabaseFetchConfigurationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProtectedDatabaseFetchConfigurationArgs Empty = new GetProtectedDatabaseFetchConfigurationArgs();

    @Import(name="base64EncodeContent")
    private @Nullable Output<Boolean> base64EncodeContent;

    public Optional<Output<Boolean>> base64EncodeContent() {
        return Optional.ofNullable(this.base64EncodeContent);
    }

    /**
     * Currently has four config options ALL, TNSNAMES, HOSTS and CABUNDLE. All will return a zipped folder containing the contents of both tnsnames and the certificateChainPem.
     * 
     */
    @Import(name="configurationType")
    private @Nullable Output<String> configurationType;

    /**
     * @return Currently has four config options ALL, TNSNAMES, HOSTS and CABUNDLE. All will return a zipped folder containing the contents of both tnsnames and the certificateChainPem.
     * 
     */
    public Optional<Output<String>> configurationType() {
        return Optional.ofNullable(this.configurationType);
    }

    /**
     * The protected database OCID.
     * 
     */
    @Import(name="protectedDatabaseId", required=true)
    private Output<String> protectedDatabaseId;

    /**
     * @return The protected database OCID.
     * 
     */
    public Output<String> protectedDatabaseId() {
        return this.protectedDatabaseId;
    }

    private GetProtectedDatabaseFetchConfigurationArgs() {}

    private GetProtectedDatabaseFetchConfigurationArgs(GetProtectedDatabaseFetchConfigurationArgs $) {
        this.base64EncodeContent = $.base64EncodeContent;
        this.configurationType = $.configurationType;
        this.protectedDatabaseId = $.protectedDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProtectedDatabaseFetchConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProtectedDatabaseFetchConfigurationArgs $;

        public Builder() {
            $ = new GetProtectedDatabaseFetchConfigurationArgs();
        }

        public Builder(GetProtectedDatabaseFetchConfigurationArgs defaults) {
            $ = new GetProtectedDatabaseFetchConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder base64EncodeContent(@Nullable Output<Boolean> base64EncodeContent) {
            $.base64EncodeContent = base64EncodeContent;
            return this;
        }

        public Builder base64EncodeContent(Boolean base64EncodeContent) {
            return base64EncodeContent(Output.of(base64EncodeContent));
        }

        /**
         * @param configurationType Currently has four config options ALL, TNSNAMES, HOSTS and CABUNDLE. All will return a zipped folder containing the contents of both tnsnames and the certificateChainPem.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(@Nullable Output<String> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType Currently has four config options ALL, TNSNAMES, HOSTS and CABUNDLE. All will return a zipped folder containing the contents of both tnsnames and the certificateChainPem.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(String configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param protectedDatabaseId The protected database OCID.
         * 
         * @return builder
         * 
         */
        public Builder protectedDatabaseId(Output<String> protectedDatabaseId) {
            $.protectedDatabaseId = protectedDatabaseId;
            return this;
        }

        /**
         * @param protectedDatabaseId The protected database OCID.
         * 
         * @return builder
         * 
         */
        public Builder protectedDatabaseId(String protectedDatabaseId) {
            return protectedDatabaseId(Output.of(protectedDatabaseId));
        }

        public GetProtectedDatabaseFetchConfigurationArgs build() {
            if ($.protectedDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetProtectedDatabaseFetchConfigurationArgs", "protectedDatabaseId");
            }
            return $;
        }
    }

}
