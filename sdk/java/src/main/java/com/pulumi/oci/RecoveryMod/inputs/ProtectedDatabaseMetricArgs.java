// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProtectedDatabaseMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProtectedDatabaseMetricArgs Empty = new ProtectedDatabaseMetricArgs();

    /**
     * The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
     * 
     */
    @Import(name="backupSpaceEstimateInGbs")
    private @Nullable Output<Double> backupSpaceEstimateInGbs;

    /**
     * @return The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
     * 
     */
    public Optional<Output<Double>> backupSpaceEstimateInGbs() {
        return Optional.ofNullable(this.backupSpaceEstimateInGbs);
    }

    /**
     * Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
     * 
     */
    @Import(name="backupSpaceUsedInGbs")
    private @Nullable Output<Double> backupSpaceUsedInGbs;

    /**
     * @return Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
     * 
     */
    public Optional<Output<Double>> backupSpaceUsedInGbs() {
        return Optional.ofNullable(this.backupSpaceUsedInGbs);
    }

    /**
     * Number of seconds backups are currently retained for this database.
     * 
     */
    @Import(name="currentRetentionPeriodInSeconds")
    private @Nullable Output<Double> currentRetentionPeriodInSeconds;

    /**
     * @return Number of seconds backups are currently retained for this database.
     * 
     */
    public Optional<Output<Double>> currentRetentionPeriodInSeconds() {
        return Optional.ofNullable(this.currentRetentionPeriodInSeconds);
    }

    /**
     * The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
     * 
     */
    @Import(name="dbSizeInGbs")
    private @Nullable Output<Double> dbSizeInGbs;

    /**
     * @return The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
     * 
     */
    public Optional<Output<Double>> dbSizeInGbs() {
        return Optional.ofNullable(this.dbSizeInGbs);
    }

    /**
     * The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
     * 
     */
    @Import(name="isRedoLogsEnabled")
    private @Nullable Output<Boolean> isRedoLogsEnabled;

    /**
     * @return The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
     * 
     */
    public Optional<Output<Boolean>> isRedoLogsEnabled() {
        return Optional.ofNullable(this.isRedoLogsEnabled);
    }

    /**
     * Number of days of redo/archive to be applied to recover database.
     * 
     */
    @Import(name="minimumRecoveryNeededInDays")
    private @Nullable Output<Double> minimumRecoveryNeededInDays;

    /**
     * @return Number of days of redo/archive to be applied to recover database.
     * 
     */
    public Optional<Output<Double>> minimumRecoveryNeededInDays() {
        return Optional.ofNullable(this.minimumRecoveryNeededInDays);
    }

    /**
     * The maximum number of days to retain backups for a protected database.
     * 
     */
    @Import(name="retentionPeriodInDays")
    private @Nullable Output<Double> retentionPeriodInDays;

    /**
     * @return The maximum number of days to retain backups for a protected database.
     * 
     */
    public Optional<Output<Double>> retentionPeriodInDays() {
        return Optional.ofNullable(this.retentionPeriodInDays);
    }

    /**
     * This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
     * 
     */
    @Import(name="unprotectedWindowInSeconds")
    private @Nullable Output<Double> unprotectedWindowInSeconds;

    /**
     * @return This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
     * 
     */
    public Optional<Output<Double>> unprotectedWindowInSeconds() {
        return Optional.ofNullable(this.unprotectedWindowInSeconds);
    }

    private ProtectedDatabaseMetricArgs() {}

    private ProtectedDatabaseMetricArgs(ProtectedDatabaseMetricArgs $) {
        this.backupSpaceEstimateInGbs = $.backupSpaceEstimateInGbs;
        this.backupSpaceUsedInGbs = $.backupSpaceUsedInGbs;
        this.currentRetentionPeriodInSeconds = $.currentRetentionPeriodInSeconds;
        this.dbSizeInGbs = $.dbSizeInGbs;
        this.isRedoLogsEnabled = $.isRedoLogsEnabled;
        this.minimumRecoveryNeededInDays = $.minimumRecoveryNeededInDays;
        this.retentionPeriodInDays = $.retentionPeriodInDays;
        this.unprotectedWindowInSeconds = $.unprotectedWindowInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProtectedDatabaseMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProtectedDatabaseMetricArgs $;

        public Builder() {
            $ = new ProtectedDatabaseMetricArgs();
        }

        public Builder(ProtectedDatabaseMetricArgs defaults) {
            $ = new ProtectedDatabaseMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSpaceEstimateInGbs The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
         * 
         * @return builder
         * 
         */
        public Builder backupSpaceEstimateInGbs(@Nullable Output<Double> backupSpaceEstimateInGbs) {
            $.backupSpaceEstimateInGbs = backupSpaceEstimateInGbs;
            return this;
        }

        /**
         * @param backupSpaceEstimateInGbs The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
         * 
         * @return builder
         * 
         */
        public Builder backupSpaceEstimateInGbs(Double backupSpaceEstimateInGbs) {
            return backupSpaceEstimateInGbs(Output.of(backupSpaceEstimateInGbs));
        }

        /**
         * @param backupSpaceUsedInGbs Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
         * 
         * @return builder
         * 
         */
        public Builder backupSpaceUsedInGbs(@Nullable Output<Double> backupSpaceUsedInGbs) {
            $.backupSpaceUsedInGbs = backupSpaceUsedInGbs;
            return this;
        }

        /**
         * @param backupSpaceUsedInGbs Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
         * 
         * @return builder
         * 
         */
        public Builder backupSpaceUsedInGbs(Double backupSpaceUsedInGbs) {
            return backupSpaceUsedInGbs(Output.of(backupSpaceUsedInGbs));
        }

        /**
         * @param currentRetentionPeriodInSeconds Number of seconds backups are currently retained for this database.
         * 
         * @return builder
         * 
         */
        public Builder currentRetentionPeriodInSeconds(@Nullable Output<Double> currentRetentionPeriodInSeconds) {
            $.currentRetentionPeriodInSeconds = currentRetentionPeriodInSeconds;
            return this;
        }

        /**
         * @param currentRetentionPeriodInSeconds Number of seconds backups are currently retained for this database.
         * 
         * @return builder
         * 
         */
        public Builder currentRetentionPeriodInSeconds(Double currentRetentionPeriodInSeconds) {
            return currentRetentionPeriodInSeconds(Output.of(currentRetentionPeriodInSeconds));
        }

        /**
         * @param dbSizeInGbs The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
         * 
         * @return builder
         * 
         */
        public Builder dbSizeInGbs(@Nullable Output<Double> dbSizeInGbs) {
            $.dbSizeInGbs = dbSizeInGbs;
            return this;
        }

        /**
         * @param dbSizeInGbs The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
         * 
         * @return builder
         * 
         */
        public Builder dbSizeInGbs(Double dbSizeInGbs) {
            return dbSizeInGbs(Output.of(dbSizeInGbs));
        }

        /**
         * @param isRedoLogsEnabled The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLogsEnabled(@Nullable Output<Boolean> isRedoLogsEnabled) {
            $.isRedoLogsEnabled = isRedoLogsEnabled;
            return this;
        }

        /**
         * @param isRedoLogsEnabled The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLogsEnabled(Boolean isRedoLogsEnabled) {
            return isRedoLogsEnabled(Output.of(isRedoLogsEnabled));
        }

        /**
         * @param minimumRecoveryNeededInDays Number of days of redo/archive to be applied to recover database.
         * 
         * @return builder
         * 
         */
        public Builder minimumRecoveryNeededInDays(@Nullable Output<Double> minimumRecoveryNeededInDays) {
            $.minimumRecoveryNeededInDays = minimumRecoveryNeededInDays;
            return this;
        }

        /**
         * @param minimumRecoveryNeededInDays Number of days of redo/archive to be applied to recover database.
         * 
         * @return builder
         * 
         */
        public Builder minimumRecoveryNeededInDays(Double minimumRecoveryNeededInDays) {
            return minimumRecoveryNeededInDays(Output.of(minimumRecoveryNeededInDays));
        }

        /**
         * @param retentionPeriodInDays The maximum number of days to retain backups for a protected database.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(@Nullable Output<Double> retentionPeriodInDays) {
            $.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }

        /**
         * @param retentionPeriodInDays The maximum number of days to retain backups for a protected database.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(Double retentionPeriodInDays) {
            return retentionPeriodInDays(Output.of(retentionPeriodInDays));
        }

        /**
         * @param unprotectedWindowInSeconds This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
         * 
         * @return builder
         * 
         */
        public Builder unprotectedWindowInSeconds(@Nullable Output<Double> unprotectedWindowInSeconds) {
            $.unprotectedWindowInSeconds = unprotectedWindowInSeconds;
            return this;
        }

        /**
         * @param unprotectedWindowInSeconds This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
         * 
         * @return builder
         * 
         */
        public Builder unprotectedWindowInSeconds(Double unprotectedWindowInSeconds) {
            return unprotectedWindowInSeconds(Output.of(unprotectedWindowInSeconds));
        }

        public ProtectedDatabaseMetricArgs build() {
            return $;
        }
    }

}
