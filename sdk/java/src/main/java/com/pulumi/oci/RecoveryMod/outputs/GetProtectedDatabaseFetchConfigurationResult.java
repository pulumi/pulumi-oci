// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProtectedDatabaseFetchConfigurationResult {
    private @Nullable Boolean base64EncodeContent;
    private @Nullable String configurationType;
    /**
     * @return content of the downloaded config file for recovery service. It is base64 encoded by default. To store the config in plaintext set `base_64_encode_content` to false.
     * 
     */
    private String content;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String protectedDatabaseId;

    private GetProtectedDatabaseFetchConfigurationResult() {}
    public Optional<Boolean> base64EncodeContent() {
        return Optional.ofNullable(this.base64EncodeContent);
    }
    public Optional<String> configurationType() {
        return Optional.ofNullable(this.configurationType);
    }
    /**
     * @return content of the downloaded config file for recovery service. It is base64 encoded by default. To store the config in plaintext set `base_64_encode_content` to false.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String protectedDatabaseId() {
        return this.protectedDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProtectedDatabaseFetchConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean base64EncodeContent;
        private @Nullable String configurationType;
        private String content;
        private String id;
        private String protectedDatabaseId;
        public Builder() {}
        public Builder(GetProtectedDatabaseFetchConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64EncodeContent = defaults.base64EncodeContent;
    	      this.configurationType = defaults.configurationType;
    	      this.content = defaults.content;
    	      this.id = defaults.id;
    	      this.protectedDatabaseId = defaults.protectedDatabaseId;
        }

        @CustomType.Setter
        public Builder base64EncodeContent(@Nullable Boolean base64EncodeContent) {

            this.base64EncodeContent = base64EncodeContent;
            return this;
        }
        @CustomType.Setter
        public Builder configurationType(@Nullable String configurationType) {

            this.configurationType = configurationType;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabaseFetchConfigurationResult", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabaseFetchConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder protectedDatabaseId(String protectedDatabaseId) {
            if (protectedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabaseFetchConfigurationResult", "protectedDatabaseId");
            }
            this.protectedDatabaseId = protectedDatabaseId;
            return this;
        }
        public GetProtectedDatabaseFetchConfigurationResult build() {
            final var _resultValue = new GetProtectedDatabaseFetchConfigurationResult();
            _resultValue.base64EncodeContent = base64EncodeContent;
            _resultValue.configurationType = configurationType;
            _resultValue.content = content;
            _resultValue.id = id;
            _resultValue.protectedDatabaseId = protectedDatabaseId;
            return _resultValue;
        }
    }
}
