// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.RecoveryMod.outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemMetric;
import com.pulumi.oci.RecoveryMod.outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProtectedDatabasesProtectedDatabaseCollectionItem {
    /**
     * @return The compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the protected database.
     * 
     */
    private String databaseId;
    /**
     * @return The size of the protected database. XS - Less than 5GB, S - 5GB to 50GB, M - 50GB to 500GB, L - 500GB to 1TB, XL - 1TB to 5TB, XXL - Greater than 5TB.
     * 
     */
    private String databaseSize;
    /**
     * @return The dbUniqueName for the protected database in Recovery Service. You cannot change the unique name.
     * 
     */
    private String dbUniqueName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    private Map<String,String> definedTags;
    private String deletionSchedule;
    /**
     * @return A filter to return only resources that match the entire &#39;displayname&#39; given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Indicates the protection status of the database.
     * 
     */
    private String health;
    /**
     * @return A message describing the current health of the protected database.
     * 
     */
    private String healthDetails;
    /**
     * @return The protected database OCID.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the protected database is created by Recovery Service or created manually. Set to &lt;b&gt;TRUE&lt;/b&gt; for a service-defined protected database. When you enable the OCI-managed automatic backups option for a database and set Recovery Service as the backup destination, then Recovery Service creates the associated protected database resource. Set to &lt;b&gt;FALSE&lt;/b&gt; for a user-defined protected database.
     * 
     */
    private Boolean isReadOnlyResource;
    /**
     * @return The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups. For this to be effective, additional configuration is needed on client side.
     * 
     */
    private Boolean isRedoLogsShipped;
    /**
     * @return Detailed description about the current lifecycle state of the protected database. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Backup performance and storage utilization metrics for the protected database.
     * 
     */
    private List<GetProtectedDatabasesProtectedDatabaseCollectionItemMetric> metrics;
    private String password;
    /**
     * @return An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
     * 
     */
    private String policyLockedDateTime;
    /**
     * @return The protection policy OCID.
     * 
     */
    private String protectionPolicyId;
    /**
     * @return List of recovery service subnet resources associated with the protected database.
     * 
     */
    private List<GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet> recoveryServiceSubnets;
    /**
     * @return A filter to return only the resources that match the specified lifecycle state.
     * 
     */
    private String state;
    /**
     * @return The OCID of the cloud service subscription to which the protected database is linked.
     * 
     */
    private String subscriptionId;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return An RFC3339 formatted datetime string that indicates the created time for a protected database. For example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeCreated;
    /**
     * @return An RFC3339 formatted datetime string that indicates the last updated time for a protected database. For example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private String timeUpdated;
    /**
     * @return The virtual private catalog (VPC) user credentials that authenticates the protected database to access Recovery Service.
     * 
     */
    private String vpcUserName;

    private GetProtectedDatabasesProtectedDatabaseCollectionItem() {}
    /**
     * @return The compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the protected database.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The size of the protected database. XS - Less than 5GB, S - 5GB to 50GB, M - 50GB to 500GB, L - 500GB to 1TB, XL - 1TB to 5TB, XXL - Greater than 5TB.
     * 
     */
    public String databaseSize() {
        return this.databaseSize;
    }
    /**
     * @return The dbUniqueName for the protected database in Recovery Service. You cannot change the unique name.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    public String deletionSchedule() {
        return this.deletionSchedule;
    }
    /**
     * @return A filter to return only resources that match the entire &#39;displayname&#39; given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Indicates the protection status of the database.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return A message describing the current health of the protected database.
     * 
     */
    public String healthDetails() {
        return this.healthDetails;
    }
    /**
     * @return The protected database OCID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the protected database is created by Recovery Service or created manually. Set to &lt;b&gt;TRUE&lt;/b&gt; for a service-defined protected database. When you enable the OCI-managed automatic backups option for a database and set Recovery Service as the backup destination, then Recovery Service creates the associated protected database resource. Set to &lt;b&gt;FALSE&lt;/b&gt; for a user-defined protected database.
     * 
     */
    public Boolean isReadOnlyResource() {
        return this.isReadOnlyResource;
    }
    /**
     * @return The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups. For this to be effective, additional configuration is needed on client side.
     * 
     */
    public Boolean isRedoLogsShipped() {
        return this.isRedoLogsShipped;
    }
    /**
     * @return Detailed description about the current lifecycle state of the protected database. For example, it can be used to provide actionable information for a resource in a Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Backup performance and storage utilization metrics for the protected database.
     * 
     */
    public List<GetProtectedDatabasesProtectedDatabaseCollectionItemMetric> metrics() {
        return this.metrics;
    }
    public String password() {
        return this.password;
    }
    /**
     * @return An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
     * 
     */
    public String policyLockedDateTime() {
        return this.policyLockedDateTime;
    }
    /**
     * @return The protection policy OCID.
     * 
     */
    public String protectionPolicyId() {
        return this.protectionPolicyId;
    }
    /**
     * @return List of recovery service subnet resources associated with the protected database.
     * 
     */
    public List<GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet> recoveryServiceSubnets() {
        return this.recoveryServiceSubnets;
    }
    /**
     * @return A filter to return only the resources that match the specified lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the cloud service subscription to which the protected database is linked.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return An RFC3339 formatted datetime string that indicates the created time for a protected database. For example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An RFC3339 formatted datetime string that indicates the last updated time for a protected database. For example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The virtual private catalog (VPC) user credentials that authenticates the protected database to access Recovery Service.
     * 
     */
    public String vpcUserName() {
        return this.vpcUserName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProtectedDatabasesProtectedDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String databaseId;
        private String databaseSize;
        private String dbUniqueName;
        private Map<String,String> definedTags;
        private String deletionSchedule;
        private String displayName;
        private Map<String,String> freeformTags;
        private String health;
        private String healthDetails;
        private String id;
        private Boolean isReadOnlyResource;
        private Boolean isRedoLogsShipped;
        private String lifecycleDetails;
        private List<GetProtectedDatabasesProtectedDatabaseCollectionItemMetric> metrics;
        private String password;
        private String policyLockedDateTime;
        private String protectionPolicyId;
        private List<GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet> recoveryServiceSubnets;
        private String state;
        private String subscriptionId;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String vpcUserName;
        public Builder() {}
        public Builder(GetProtectedDatabasesProtectedDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSize = defaults.databaseSize;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionSchedule = defaults.deletionSchedule;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.health = defaults.health;
    	      this.healthDetails = defaults.healthDetails;
    	      this.id = defaults.id;
    	      this.isReadOnlyResource = defaults.isReadOnlyResource;
    	      this.isRedoLogsShipped = defaults.isRedoLogsShipped;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.metrics = defaults.metrics;
    	      this.password = defaults.password;
    	      this.policyLockedDateTime = defaults.policyLockedDateTime;
    	      this.protectionPolicyId = defaults.protectionPolicyId;
    	      this.recoveryServiceSubnets = defaults.recoveryServiceSubnets;
    	      this.state = defaults.state;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.vpcUserName = defaults.vpcUserName;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSize(String databaseSize) {
            if (databaseSize == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "databaseSize");
            }
            this.databaseSize = databaseSize;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            if (dbUniqueName == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "dbUniqueName");
            }
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deletionSchedule(String deletionSchedule) {
            if (deletionSchedule == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "deletionSchedule");
            }
            this.deletionSchedule = deletionSchedule;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            if (health == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "health");
            }
            this.health = health;
            return this;
        }
        @CustomType.Setter
        public Builder healthDetails(String healthDetails) {
            if (healthDetails == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "healthDetails");
            }
            this.healthDetails = healthDetails;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isReadOnlyResource(Boolean isReadOnlyResource) {
            if (isReadOnlyResource == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "isReadOnlyResource");
            }
            this.isReadOnlyResource = isReadOnlyResource;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLogsShipped(Boolean isRedoLogsShipped) {
            if (isRedoLogsShipped == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "isRedoLogsShipped");
            }
            this.isRedoLogsShipped = isRedoLogsShipped;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(List<GetProtectedDatabasesProtectedDatabaseCollectionItemMetric> metrics) {
            if (metrics == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "metrics");
            }
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(GetProtectedDatabasesProtectedDatabaseCollectionItemMetric... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder policyLockedDateTime(String policyLockedDateTime) {
            if (policyLockedDateTime == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "policyLockedDateTime");
            }
            this.policyLockedDateTime = policyLockedDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder protectionPolicyId(String protectionPolicyId) {
            if (protectionPolicyId == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "protectionPolicyId");
            }
            this.protectionPolicyId = protectionPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryServiceSubnets(List<GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet> recoveryServiceSubnets) {
            if (recoveryServiceSubnets == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "recoveryServiceSubnets");
            }
            this.recoveryServiceSubnets = recoveryServiceSubnets;
            return this;
        }
        public Builder recoveryServiceSubnets(GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet... recoveryServiceSubnets) {
            return recoveryServiceSubnets(List.of(recoveryServiceSubnets));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder vpcUserName(String vpcUserName) {
            if (vpcUserName == null) {
              throw new MissingRequiredPropertyException("GetProtectedDatabasesProtectedDatabaseCollectionItem", "vpcUserName");
            }
            this.vpcUserName = vpcUserName;
            return this;
        }
        public GetProtectedDatabasesProtectedDatabaseCollectionItem build() {
            final var _resultValue = new GetProtectedDatabasesProtectedDatabaseCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseId = databaseId;
            _resultValue.databaseSize = databaseSize;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.definedTags = definedTags;
            _resultValue.deletionSchedule = deletionSchedule;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.health = health;
            _resultValue.healthDetails = healthDetails;
            _resultValue.id = id;
            _resultValue.isReadOnlyResource = isReadOnlyResource;
            _resultValue.isRedoLogsShipped = isRedoLogsShipped;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.metrics = metrics;
            _resultValue.password = password;
            _resultValue.policyLockedDateTime = policyLockedDateTime;
            _resultValue.protectionPolicyId = protectionPolicyId;
            _resultValue.recoveryServiceSubnets = recoveryServiceSubnets;
            _resultValue.state = state;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.vpcUserName = vpcUserName;
            return _resultValue;
        }
    }
}
