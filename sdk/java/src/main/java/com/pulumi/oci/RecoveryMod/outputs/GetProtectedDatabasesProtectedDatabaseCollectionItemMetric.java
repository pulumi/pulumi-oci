// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.RecoveryMod.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProtectedDatabasesProtectedDatabaseCollectionItemMetric {
    /**
     * @return The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
     * 
     */
    private @Nullable Double backupSpaceEstimateInGbs;
    /**
     * @return Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
     * 
     */
    private @Nullable Double backupSpaceUsedInGbs;
    /**
     * @return Number of seconds backups are currently retained for this database.
     * 
     */
    private @Nullable Double currentRetentionPeriodInSeconds;
    /**
     * @return The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
     * 
     */
    private @Nullable Double dbSizeInGbs;
    /**
     * @return The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
     * 
     */
    private @Nullable Boolean isRedoLogsEnabled;
    /**
     * @return The maximum number of days to retain backups for a protected database.
     * 
     */
    private @Nullable Double retentionPeriodInDays;
    /**
     * @return This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
     * 
     */
    private @Nullable Double unprotectedWindowInSeconds;

    private GetProtectedDatabasesProtectedDatabaseCollectionItemMetric() {}
    /**
     * @return The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
     * 
     */
    public Optional<Double> backupSpaceEstimateInGbs() {
        return Optional.ofNullable(this.backupSpaceEstimateInGbs);
    }
    /**
     * @return Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
     * 
     */
    public Optional<Double> backupSpaceUsedInGbs() {
        return Optional.ofNullable(this.backupSpaceUsedInGbs);
    }
    /**
     * @return Number of seconds backups are currently retained for this database.
     * 
     */
    public Optional<Double> currentRetentionPeriodInSeconds() {
        return Optional.ofNullable(this.currentRetentionPeriodInSeconds);
    }
    /**
     * @return The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
     * 
     */
    public Optional<Double> dbSizeInGbs() {
        return Optional.ofNullable(this.dbSizeInGbs);
    }
    /**
     * @return The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
     * 
     */
    public Optional<Boolean> isRedoLogsEnabled() {
        return Optional.ofNullable(this.isRedoLogsEnabled);
    }
    /**
     * @return The maximum number of days to retain backups for a protected database.
     * 
     */
    public Optional<Double> retentionPeriodInDays() {
        return Optional.ofNullable(this.retentionPeriodInDays);
    }
    /**
     * @return This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.  This is the time we received the last backup or last redo-log shipped.
     * 
     */
    public Optional<Double> unprotectedWindowInSeconds() {
        return Optional.ofNullable(this.unprotectedWindowInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProtectedDatabasesProtectedDatabaseCollectionItemMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double backupSpaceEstimateInGbs;
        private @Nullable Double backupSpaceUsedInGbs;
        private @Nullable Double currentRetentionPeriodInSeconds;
        private @Nullable Double dbSizeInGbs;
        private @Nullable Boolean isRedoLogsEnabled;
        private @Nullable Double retentionPeriodInDays;
        private @Nullable Double unprotectedWindowInSeconds;
        public Builder() {}
        public Builder(GetProtectedDatabasesProtectedDatabaseCollectionItemMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupSpaceEstimateInGbs = defaults.backupSpaceEstimateInGbs;
    	      this.backupSpaceUsedInGbs = defaults.backupSpaceUsedInGbs;
    	      this.currentRetentionPeriodInSeconds = defaults.currentRetentionPeriodInSeconds;
    	      this.dbSizeInGbs = defaults.dbSizeInGbs;
    	      this.isRedoLogsEnabled = defaults.isRedoLogsEnabled;
    	      this.retentionPeriodInDays = defaults.retentionPeriodInDays;
    	      this.unprotectedWindowInSeconds = defaults.unprotectedWindowInSeconds;
        }

        @CustomType.Setter
        public Builder backupSpaceEstimateInGbs(@Nullable Double backupSpaceEstimateInGbs) {
            this.backupSpaceEstimateInGbs = backupSpaceEstimateInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder backupSpaceUsedInGbs(@Nullable Double backupSpaceUsedInGbs) {
            this.backupSpaceUsedInGbs = backupSpaceUsedInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder currentRetentionPeriodInSeconds(@Nullable Double currentRetentionPeriodInSeconds) {
            this.currentRetentionPeriodInSeconds = currentRetentionPeriodInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder dbSizeInGbs(@Nullable Double dbSizeInGbs) {
            this.dbSizeInGbs = dbSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLogsEnabled(@Nullable Boolean isRedoLogsEnabled) {
            this.isRedoLogsEnabled = isRedoLogsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriodInDays(@Nullable Double retentionPeriodInDays) {
            this.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }
        @CustomType.Setter
        public Builder unprotectedWindowInSeconds(@Nullable Double unprotectedWindowInSeconds) {
            this.unprotectedWindowInSeconds = unprotectedWindowInSeconds;
            return this;
        }
        public GetProtectedDatabasesProtectedDatabaseCollectionItemMetric build() {
            final var o = new GetProtectedDatabasesProtectedDatabaseCollectionItemMetric();
            o.backupSpaceEstimateInGbs = backupSpaceEstimateInGbs;
            o.backupSpaceUsedInGbs = backupSpaceUsedInGbs;
            o.currentRetentionPeriodInSeconds = currentRetentionPeriodInSeconds;
            o.dbSizeInGbs = dbSizeInGbs;
            o.isRedoLogsEnabled = isRedoLogsEnabled;
            o.retentionPeriodInDays = retentionPeriodInDays;
            o.unprotectedWindowInSeconds = unprotectedWindowInSeconds;
            return o;
        }
    }
}
