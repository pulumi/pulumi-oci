// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ResourceManager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStackConfigSource {
    private String configSourceType;
    private String workingDirectory;
    private String zipFileBase64encoded;

    private GetStackConfigSource() {}
    public String configSourceType() {
        return this.configSourceType;
    }
    public String workingDirectory() {
        return this.workingDirectory;
    }
    public String zipFileBase64encoded() {
        return this.zipFileBase64encoded;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStackConfigSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configSourceType;
        private String workingDirectory;
        private String zipFileBase64encoded;
        public Builder() {}
        public Builder(GetStackConfigSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configSourceType = defaults.configSourceType;
    	      this.workingDirectory = defaults.workingDirectory;
    	      this.zipFileBase64encoded = defaults.zipFileBase64encoded;
        }

        @CustomType.Setter
        public Builder configSourceType(String configSourceType) {
            if (configSourceType == null) {
              throw new MissingRequiredPropertyException("GetStackConfigSource", "configSourceType");
            }
            this.configSourceType = configSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder workingDirectory(String workingDirectory) {
            if (workingDirectory == null) {
              throw new MissingRequiredPropertyException("GetStackConfigSource", "workingDirectory");
            }
            this.workingDirectory = workingDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder zipFileBase64encoded(String zipFileBase64encoded) {
            if (zipFileBase64encoded == null) {
              throw new MissingRequiredPropertyException("GetStackConfigSource", "zipFileBase64encoded");
            }
            this.zipFileBase64encoded = zipFileBase64encoded;
            return this;
        }
        public GetStackConfigSource build() {
            final var _resultValue = new GetStackConfigSource();
            _resultValue.configSourceType = configSourceType;
            _resultValue.workingDirectory = workingDirectory;
            _resultValue.zipFileBase64encoded = zipFileBase64encoded;
            return _resultValue;
        }
    }
}
