// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ResourceManager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ResourceManager.outputs.GetStackConfigSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStackResult {
    /**
     * @return Unique identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) for the compartment where the stack is located.
     * 
     */
    private String compartmentId;
    private List<GetStackConfigSource> configSources;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return General description of the stack.
     * 
     */
    private String description;
    /**
     * @return Human-readable display name for the stack.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags associated with this resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String stackId;
    /**
     * @return The current lifecycle state of the stack.
     * 
     */
    private String state;
    /**
     * @return The date and time at which the stack was created.
     * 
     */
    private String timeCreated;
    private Map<String,String> variables;

    private GetStackResult() {}
    /**
     * @return Unique identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) for the compartment where the stack is located.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetStackConfigSource> configSources() {
        return this.configSources;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return General description of the stack.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Human-readable display name for the stack.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags associated with this resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String stackId() {
        return this.stackId;
    }
    /**
     * @return The current lifecycle state of the stack.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time at which the stack was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public Map<String,String> variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStackResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetStackConfigSource> configSources;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String stackId;
        private String state;
        private String timeCreated;
        private Map<String,String> variables;
        public Builder() {}
        public Builder(GetStackResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.configSources = defaults.configSources;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.stackId = defaults.stackId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configSources(List<GetStackConfigSource> configSources) {
            if (configSources == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "configSources");
            }
            this.configSources = configSources;
            return this;
        }
        public Builder configSources(GetStackConfigSource... configSources) {
            return configSources(List.of(configSources));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder stackId(String stackId) {
            if (stackId == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "stackId");
            }
            this.stackId = stackId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder variables(Map<String,String> variables) {
            if (variables == null) {
              throw new MissingRequiredPropertyException("GetStackResult", "variables");
            }
            this.variables = variables;
            return this;
        }
        public GetStackResult build() {
            final var _resultValue = new GetStackResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.configSources = configSources;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.stackId = stackId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
