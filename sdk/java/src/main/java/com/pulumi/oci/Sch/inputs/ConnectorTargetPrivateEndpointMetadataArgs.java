// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorTargetPrivateEndpointMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorTargetPrivateEndpointMetadataArgs Empty = new ConnectorTargetPrivateEndpointMetadataArgs();

    /**
     * The reverse connection endpoint (RCE) IP address for DNS lookups.
     * 
     */
    @Import(name="rceDnsProxyIpAddress")
    private @Nullable Output<String> rceDnsProxyIpAddress;

    /**
     * @return The reverse connection endpoint (RCE) IP address for DNS lookups.
     * 
     */
    public Optional<Output<String>> rceDnsProxyIpAddress() {
        return Optional.ofNullable(this.rceDnsProxyIpAddress);
    }

    /**
     * The reverse connection endpoint (RCE) IP address for primary flow of traffic in the subnet.
     * 
     */
    @Import(name="rceTrafficIpAddress")
    private @Nullable Output<String> rceTrafficIpAddress;

    /**
     * @return The reverse connection endpoint (RCE) IP address for primary flow of traffic in the subnet.
     * 
     */
    public Optional<Output<String>> rceTrafficIpAddress() {
        return Optional.ofNullable(this.rceTrafficIpAddress);
    }

    private ConnectorTargetPrivateEndpointMetadataArgs() {}

    private ConnectorTargetPrivateEndpointMetadataArgs(ConnectorTargetPrivateEndpointMetadataArgs $) {
        this.rceDnsProxyIpAddress = $.rceDnsProxyIpAddress;
        this.rceTrafficIpAddress = $.rceTrafficIpAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorTargetPrivateEndpointMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorTargetPrivateEndpointMetadataArgs $;

        public Builder() {
            $ = new ConnectorTargetPrivateEndpointMetadataArgs();
        }

        public Builder(ConnectorTargetPrivateEndpointMetadataArgs defaults) {
            $ = new ConnectorTargetPrivateEndpointMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rceDnsProxyIpAddress The reverse connection endpoint (RCE) IP address for DNS lookups.
         * 
         * @return builder
         * 
         */
        public Builder rceDnsProxyIpAddress(@Nullable Output<String> rceDnsProxyIpAddress) {
            $.rceDnsProxyIpAddress = rceDnsProxyIpAddress;
            return this;
        }

        /**
         * @param rceDnsProxyIpAddress The reverse connection endpoint (RCE) IP address for DNS lookups.
         * 
         * @return builder
         * 
         */
        public Builder rceDnsProxyIpAddress(String rceDnsProxyIpAddress) {
            return rceDnsProxyIpAddress(Output.of(rceDnsProxyIpAddress));
        }

        /**
         * @param rceTrafficIpAddress The reverse connection endpoint (RCE) IP address for primary flow of traffic in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder rceTrafficIpAddress(@Nullable Output<String> rceTrafficIpAddress) {
            $.rceTrafficIpAddress = rceTrafficIpAddress;
            return this;
        }

        /**
         * @param rceTrafficIpAddress The reverse connection endpoint (RCE) IP address for primary flow of traffic in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder rceTrafficIpAddress(String rceTrafficIpAddress) {
            return rceTrafficIpAddress(Output.of(rceTrafficIpAddress));
        }

        public ConnectorTargetPrivateEndpointMetadataArgs build() {
            return $;
        }
    }

}
