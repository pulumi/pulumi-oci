// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Sch.inputs.GetConnectorPluginsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConnectorPluginsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectorPluginsArgs Empty = new GetConnectorPluginsArgs();

    /**
     * A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetConnectorPluginsFilterArgs>> filters;

    public Optional<Output<List<GetConnectorPluginsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetConnectorPluginsArgs() {}

    private GetConnectorPluginsArgs(GetConnectorPluginsArgs $) {
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.name = $.name;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorPluginsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorPluginsArgs $;

        public Builder() {
            $ = new GetConnectorPluginsArgs();
        }

        public Builder(GetConnectorPluginsArgs defaults) {
            $ = new GetConnectorPluginsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetConnectorPluginsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetConnectorPluginsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetConnectorPluginsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetConnectorPluginsArgs build() {
            return $;
        }
    }

}
