// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Sch.outputs.ConnectorSourceCursor;
import com.pulumi.oci.Sch.outputs.ConnectorSourceLogSource;
import com.pulumi.oci.Sch.outputs.ConnectorSourceMonitoringSource;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorSource {
    /**
     * @return (Updatable) The type of [cursor](https://docs.cloud.oracle.com/iaas/Content/Streaming/Tasks/using_a_single_consumer.htm#usingcursors), which determines the starting point from which the stream will be consumed.
     * 
     */
    private @Nullable ConnectorSourceCursor cursor;
    /**
     * @return (Updatable) The type descriminator.
     * 
     */
    private String kind;
    /**
     * @return (Updatable) The logs for this Logging source.
     * 
     */
    private @Nullable List<ConnectorSourceLogSource> logSources;
    /**
     * @return (Updatable) The list of metric namespaces to retrieve data from.
     * 
     */
    private @Nullable List<ConnectorSourceMonitoringSource> monitoringSources;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    private @Nullable String streamId;

    private ConnectorSource() {}
    /**
     * @return (Updatable) The type of [cursor](https://docs.cloud.oracle.com/iaas/Content/Streaming/Tasks/using_a_single_consumer.htm#usingcursors), which determines the starting point from which the stream will be consumed.
     * 
     */
    public Optional<ConnectorSourceCursor> cursor() {
        return Optional.ofNullable(this.cursor);
    }
    /**
     * @return (Updatable) The type descriminator.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return (Updatable) The logs for this Logging source.
     * 
     */
    public List<ConnectorSourceLogSource> logSources() {
        return this.logSources == null ? List.of() : this.logSources;
    }
    /**
     * @return (Updatable) The list of metric namespaces to retrieve data from.
     * 
     */
    public List<ConnectorSourceMonitoringSource> monitoringSources() {
        return this.monitoringSources == null ? List.of() : this.monitoringSources;
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    public Optional<String> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ConnectorSourceCursor cursor;
        private String kind;
        private @Nullable List<ConnectorSourceLogSource> logSources;
        private @Nullable List<ConnectorSourceMonitoringSource> monitoringSources;
        private @Nullable String streamId;
        public Builder() {}
        public Builder(ConnectorSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cursor = defaults.cursor;
    	      this.kind = defaults.kind;
    	      this.logSources = defaults.logSources;
    	      this.monitoringSources = defaults.monitoringSources;
    	      this.streamId = defaults.streamId;
        }

        @CustomType.Setter
        public Builder cursor(@Nullable ConnectorSourceCursor cursor) {
            this.cursor = cursor;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder logSources(@Nullable List<ConnectorSourceLogSource> logSources) {
            this.logSources = logSources;
            return this;
        }
        public Builder logSources(ConnectorSourceLogSource... logSources) {
            return logSources(List.of(logSources));
        }
        @CustomType.Setter
        public Builder monitoringSources(@Nullable List<ConnectorSourceMonitoringSource> monitoringSources) {
            this.monitoringSources = monitoringSources;
            return this;
        }
        public Builder monitoringSources(ConnectorSourceMonitoringSource... monitoringSources) {
            return monitoringSources(List.of(monitoringSources));
        }
        @CustomType.Setter
        public Builder streamId(@Nullable String streamId) {
            this.streamId = streamId;
            return this;
        }
        public ConnectorSource build() {
            final var o = new ConnectorSource();
            o.cursor = cursor;
            o.kind = kind;
            o.logSources = logSources;
            o.monitoringSources = monitoringSources;
            o.streamId = streamId;
            return o;
        }
    }
}
