// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectorPluginResult {
    private String connectorPluginName;
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return The estimated throughput range (LOW, MEDIUM, HIGH).
     * 
     */
    private String estimatedThroughput;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The plugin type discriminator.
     * 
     */
    private String kind;
    /**
     * @return The estimated maximum period of time the data will be kept at the source. The duration is specified as a string in ISO 8601 format (P1D for one day or P30D for thrity days).
     * 
     */
    private String maxRetention;
    /**
     * @return The service to be called by the connector plugin. Example: `QueueSource`
     * 
     */
    private String name;
    /**
     * @return Gets the specified connector plugin configuration information in OpenAPI specification format.
     * 
     */
    private String schema;
    /**
     * @return The current state of the service connector.
     * 
     */
    private String state;
    /**
     * @return The date and time when this plugin became available. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2023-09-09T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetConnectorPluginResult() {}
    public String connectorPluginName() {
        return this.connectorPluginName;
    }
    /**
     * @return A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The estimated throughput range (LOW, MEDIUM, HIGH).
     * 
     */
    public String estimatedThroughput() {
        return this.estimatedThroughput;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The plugin type discriminator.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The estimated maximum period of time the data will be kept at the source. The duration is specified as a string in ISO 8601 format (P1D for one day or P30D for thrity days).
     * 
     */
    public String maxRetention() {
        return this.maxRetention;
    }
    /**
     * @return The service to be called by the connector plugin. Example: `QueueSource`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Gets the specified connector plugin configuration information in OpenAPI specification format.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return The current state of the service connector.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time when this plugin became available. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2023-09-09T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorPluginResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectorPluginName;
        private String displayName;
        private String estimatedThroughput;
        private String id;
        private String kind;
        private String maxRetention;
        private String name;
        private String schema;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetConnectorPluginResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorPluginName = defaults.connectorPluginName;
    	      this.displayName = defaults.displayName;
    	      this.estimatedThroughput = defaults.estimatedThroughput;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.maxRetention = defaults.maxRetention;
    	      this.name = defaults.name;
    	      this.schema = defaults.schema;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder connectorPluginName(String connectorPluginName) {
            if (connectorPluginName == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "connectorPluginName");
            }
            this.connectorPluginName = connectorPluginName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedThroughput(String estimatedThroughput) {
            if (estimatedThroughput == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "estimatedThroughput");
            }
            this.estimatedThroughput = estimatedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetention(String maxRetention) {
            if (maxRetention == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "maxRetention");
            }
            this.maxRetention = maxRetention;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetConnectorPluginResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetConnectorPluginResult build() {
            final var _resultValue = new GetConnectorPluginResult();
            _resultValue.connectorPluginName = connectorPluginName;
            _resultValue.displayName = displayName;
            _resultValue.estimatedThroughput = estimatedThroughput;
            _resultValue.id = id;
            _resultValue.kind = kind;
            _resultValue.maxRetention = maxRetention;
            _resultValue.name = name;
            _resultValue.schema = schema;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
