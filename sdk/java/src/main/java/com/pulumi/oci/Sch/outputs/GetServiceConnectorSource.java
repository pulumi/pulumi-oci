// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourceCursor;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourceLogSource;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourceMonitoringSource;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourcePrivateEndpointMetadata;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceConnectorSource {
    /**
     * @return The configuration map for the connector plugin. This map includes parameters specific to the connector plugin type.  For example, for `QueueSource`, the map lists the OCID of the selected queue. To find the parameters for a connector plugin, get the plugin using [GetConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPlugin/GetConnectorPlugin) and review its schema value.
     * 
     */
    private String configMap;
    /**
     * @return The [read setting](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm), which determines where in the stream to start moving data. For configuration instructions, see [Creating a Connector with a Streaming Source](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm).
     * 
     */
    private List<GetServiceConnectorSourceCursor> cursors;
    /**
     * @return The type of dimension value: static or evaluated.
     * 
     */
    private String kind;
    /**
     * @return The logs for this Logging source.
     * 
     */
    private List<GetServiceConnectorSourceLogSource> logSources;
    /**
     * @return One or more compartment-specific lists of metric namespaces to retrieve data from.
     * 
     */
    private List<GetServiceConnectorSourceMonitoringSource> monitoringSources;
    /**
     * @return The name of the connector plugin. This name indicates the service to be called by the connector plugin. For example, `QueueSource` indicates the Queue service. To find names of connector plugins, list the plugin using [ListConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPluginSummary/ListConnectorPlugins).
     * 
     */
    private String pluginName;
    /**
     * @return The private endpoint metadata for the connector&#39;s source or target.
     * 
     */
    private List<GetServiceConnectorSourcePrivateEndpointMetadata> privateEndpointMetadatas;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    private String streamId;

    private GetServiceConnectorSource() {}
    /**
     * @return The configuration map for the connector plugin. This map includes parameters specific to the connector plugin type.  For example, for `QueueSource`, the map lists the OCID of the selected queue. To find the parameters for a connector plugin, get the plugin using [GetConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPlugin/GetConnectorPlugin) and review its schema value.
     * 
     */
    public String configMap() {
        return this.configMap;
    }
    /**
     * @return The [read setting](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm), which determines where in the stream to start moving data. For configuration instructions, see [Creating a Connector with a Streaming Source](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm).
     * 
     */
    public List<GetServiceConnectorSourceCursor> cursors() {
        return this.cursors;
    }
    /**
     * @return The type of dimension value: static or evaluated.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The logs for this Logging source.
     * 
     */
    public List<GetServiceConnectorSourceLogSource> logSources() {
        return this.logSources;
    }
    /**
     * @return One or more compartment-specific lists of metric namespaces to retrieve data from.
     * 
     */
    public List<GetServiceConnectorSourceMonitoringSource> monitoringSources() {
        return this.monitoringSources;
    }
    /**
     * @return The name of the connector plugin. This name indicates the service to be called by the connector plugin. For example, `QueueSource` indicates the Queue service. To find names of connector plugins, list the plugin using [ListConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPluginSummary/ListConnectorPlugins).
     * 
     */
    public String pluginName() {
        return this.pluginName;
    }
    /**
     * @return The private endpoint metadata for the connector&#39;s source or target.
     * 
     */
    public List<GetServiceConnectorSourcePrivateEndpointMetadata> privateEndpointMetadatas() {
        return this.privateEndpointMetadatas;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    public String streamId() {
        return this.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceConnectorSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configMap;
        private List<GetServiceConnectorSourceCursor> cursors;
        private String kind;
        private List<GetServiceConnectorSourceLogSource> logSources;
        private List<GetServiceConnectorSourceMonitoringSource> monitoringSources;
        private String pluginName;
        private List<GetServiceConnectorSourcePrivateEndpointMetadata> privateEndpointMetadatas;
        private String streamId;
        public Builder() {}
        public Builder(GetServiceConnectorSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configMap = defaults.configMap;
    	      this.cursors = defaults.cursors;
    	      this.kind = defaults.kind;
    	      this.logSources = defaults.logSources;
    	      this.monitoringSources = defaults.monitoringSources;
    	      this.pluginName = defaults.pluginName;
    	      this.privateEndpointMetadatas = defaults.privateEndpointMetadatas;
    	      this.streamId = defaults.streamId;
        }

        @CustomType.Setter
        public Builder configMap(String configMap) {
            if (configMap == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "configMap");
            }
            this.configMap = configMap;
            return this;
        }
        @CustomType.Setter
        public Builder cursors(List<GetServiceConnectorSourceCursor> cursors) {
            if (cursors == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "cursors");
            }
            this.cursors = cursors;
            return this;
        }
        public Builder cursors(GetServiceConnectorSourceCursor... cursors) {
            return cursors(List.of(cursors));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder logSources(List<GetServiceConnectorSourceLogSource> logSources) {
            if (logSources == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "logSources");
            }
            this.logSources = logSources;
            return this;
        }
        public Builder logSources(GetServiceConnectorSourceLogSource... logSources) {
            return logSources(List.of(logSources));
        }
        @CustomType.Setter
        public Builder monitoringSources(List<GetServiceConnectorSourceMonitoringSource> monitoringSources) {
            if (monitoringSources == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "monitoringSources");
            }
            this.monitoringSources = monitoringSources;
            return this;
        }
        public Builder monitoringSources(GetServiceConnectorSourceMonitoringSource... monitoringSources) {
            return monitoringSources(List.of(monitoringSources));
        }
        @CustomType.Setter
        public Builder pluginName(String pluginName) {
            if (pluginName == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "pluginName");
            }
            this.pluginName = pluginName;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointMetadatas(List<GetServiceConnectorSourcePrivateEndpointMetadata> privateEndpointMetadatas) {
            if (privateEndpointMetadatas == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "privateEndpointMetadatas");
            }
            this.privateEndpointMetadatas = privateEndpointMetadatas;
            return this;
        }
        public Builder privateEndpointMetadatas(GetServiceConnectorSourcePrivateEndpointMetadata... privateEndpointMetadatas) {
            return privateEndpointMetadatas(List.of(privateEndpointMetadatas));
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            if (streamId == null) {
              throw new MissingRequiredPropertyException("GetServiceConnectorSource", "streamId");
            }
            this.streamId = streamId;
            return this;
        }
        public GetServiceConnectorSource build() {
            final var _resultValue = new GetServiceConnectorSource();
            _resultValue.configMap = configMap;
            _resultValue.cursors = cursors;
            _resultValue.kind = kind;
            _resultValue.logSources = logSources;
            _resultValue.monitoringSources = monitoringSources;
            _resultValue.pluginName = pluginName;
            _resultValue.privateEndpointMetadatas = privateEndpointMetadatas;
            _resultValue.streamId = streamId;
            return _resultValue;
        }
    }
}
