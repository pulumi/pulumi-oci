// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.SecurityAttribute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.SecurityAttribute.inputs.SecurityAttributeValidatorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityAttributeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityAttributeArgs Empty = new SecurityAttributeArgs();

    /**
     * (Updatable) The description you assign to the security attribute during creation.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return (Updatable) The description you assign to the security attribute during creation.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    @Import(name="isRetired")
    private @Nullable Output<Boolean> isRetired;

    /**
     * @return Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    public Optional<Output<Boolean>> isRetired() {
        return Optional.ofNullable(this.isRetired);
    }

    /**
     * The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The OCID of the security attribute namespace.
     * 
     */
    @Import(name="securityAttributeNamespaceId", required=true)
    private Output<String> securityAttributeNamespaceId;

    /**
     * @return The OCID of the security attribute namespace.
     * 
     */
    public Output<String> securityAttributeNamespaceId() {
        return this.securityAttributeNamespaceId;
    }

    /**
     * (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
     * 
     * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
     * 
     */
    @Import(name="validator")
    private @Nullable Output<SecurityAttributeValidatorArgs> validator;

    /**
     * @return (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
     * 
     * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
     * 
     */
    public Optional<Output<SecurityAttributeValidatorArgs>> validator() {
        return Optional.ofNullable(this.validator);
    }

    private SecurityAttributeArgs() {}

    private SecurityAttributeArgs(SecurityAttributeArgs $) {
        this.description = $.description;
        this.isRetired = $.isRetired;
        this.name = $.name;
        this.securityAttributeNamespaceId = $.securityAttributeNamespaceId;
        this.validator = $.validator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityAttributeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityAttributeArgs $;

        public Builder() {
            $ = new SecurityAttributeArgs();
        }

        public Builder(SecurityAttributeArgs defaults) {
            $ = new SecurityAttributeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description (Updatable) The description you assign to the security attribute during creation.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description you assign to the security attribute during creation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isRetired Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
         * 
         * @return builder
         * 
         */
        public Builder isRetired(@Nullable Output<Boolean> isRetired) {
            $.isRetired = isRetired;
            return this;
        }

        /**
         * @param isRetired Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
         * 
         * @return builder
         * 
         */
        public Builder isRetired(Boolean isRetired) {
            return isRetired(Output.of(isRetired));
        }

        /**
         * @param name The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param securityAttributeNamespaceId The OCID of the security attribute namespace.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceId(Output<String> securityAttributeNamespaceId) {
            $.securityAttributeNamespaceId = securityAttributeNamespaceId;
            return this;
        }

        /**
         * @param securityAttributeNamespaceId The OCID of the security attribute namespace.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceId(String securityAttributeNamespaceId) {
            return securityAttributeNamespaceId(Output.of(securityAttributeNamespaceId));
        }

        /**
         * @param validator (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
         * 
         * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
         * 
         * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
         * 
         * @return builder
         * 
         */
        public Builder validator(@Nullable Output<SecurityAttributeValidatorArgs> validator) {
            $.validator = validator;
            return this;
        }

        /**
         * @param validator (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
         * 
         * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
         * 
         * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
         * 
         * @return builder
         * 
         */
        public Builder validator(SecurityAttributeValidatorArgs validator) {
            return validator(Output.of(validator));
        }

        public SecurityAttributeArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("SecurityAttributeArgs", "description");
            }
            if ($.securityAttributeNamespaceId == null) {
                throw new MissingRequiredPropertyException("SecurityAttributeArgs", "securityAttributeNamespaceId");
            }
            return $;
        }
    }

}
