// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.SecurityAttribute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.SecurityAttribute.inputs.SecurityAttributeValidatorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityAttributeState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityAttributeState Empty = new SecurityAttributeState();

    /**
     * The OCID of the compartment that contains the security attribute definition.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the security attribute definition.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The description you assign to the security attribute during creation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description you assign to the security attribute during creation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    @Import(name="isRetired")
    private @Nullable Output<Boolean> isRetired;

    /**
     * @return Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    public Optional<Output<Boolean>> isRetired() {
        return Optional.ofNullable(this.isRetired);
    }

    /**
     * The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The OCID of the security attribute namespace.
     * 
     */
    @Import(name="securityAttributeNamespaceId")
    private @Nullable Output<String> securityAttributeNamespaceId;

    /**
     * @return The OCID of the security attribute namespace.
     * 
     */
    public Optional<Output<String>> securityAttributeNamespaceId() {
        return Optional.ofNullable(this.securityAttributeNamespaceId);
    }

    /**
     * The name of the security attribute namespace that contains the security attribute.
     * 
     */
    @Import(name="securityAttributeNamespaceName")
    private @Nullable Output<String> securityAttributeNamespaceName;

    /**
     * @return The name of the security attribute namespace that contains the security attribute.
     * 
     */
    public Optional<Output<String>> securityAttributeNamespaceName() {
        return Optional.ofNullable(this.securityAttributeNamespaceName);
    }

    /**
     * The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The data type of the security attribute.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The data type of the security attribute.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
     * 
     * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
     * 
     */
    @Import(name="validator")
    private @Nullable Output<SecurityAttributeValidatorArgs> validator;

    /**
     * @return (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
     * 
     * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
     * 
     */
    public Optional<Output<SecurityAttributeValidatorArgs>> validator() {
        return Optional.ofNullable(this.validator);
    }

    private SecurityAttributeState() {}

    private SecurityAttributeState(SecurityAttributeState $) {
        this.compartmentId = $.compartmentId;
        this.description = $.description;
        this.isRetired = $.isRetired;
        this.name = $.name;
        this.securityAttributeNamespaceId = $.securityAttributeNamespaceId;
        this.securityAttributeNamespaceName = $.securityAttributeNamespaceName;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.type = $.type;
        this.validator = $.validator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityAttributeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityAttributeState $;

        public Builder() {
            $ = new SecurityAttributeState();
        }

        public Builder(SecurityAttributeState defaults) {
            $ = new SecurityAttributeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the security attribute definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the security attribute definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param description (Updatable) The description you assign to the security attribute during creation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description you assign to the security attribute during creation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isRetired Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
         * 
         * @return builder
         * 
         */
        public Builder isRetired(@Nullable Output<Boolean> isRetired) {
            $.isRetired = isRetired;
            return this;
        }

        /**
         * @param isRetired Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
         * 
         * @return builder
         * 
         */
        public Builder isRetired(Boolean isRetired) {
            return isRetired(Output.of(isRetired));
        }

        /**
         * @param name The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param securityAttributeNamespaceId The OCID of the security attribute namespace.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceId(@Nullable Output<String> securityAttributeNamespaceId) {
            $.securityAttributeNamespaceId = securityAttributeNamespaceId;
            return this;
        }

        /**
         * @param securityAttributeNamespaceId The OCID of the security attribute namespace.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceId(String securityAttributeNamespaceId) {
            return securityAttributeNamespaceId(Output.of(securityAttributeNamespaceId));
        }

        /**
         * @param securityAttributeNamespaceName The name of the security attribute namespace that contains the security attribute.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceName(@Nullable Output<String> securityAttributeNamespaceName) {
            $.securityAttributeNamespaceName = securityAttributeNamespaceName;
            return this;
        }

        /**
         * @param securityAttributeNamespaceName The name of the security attribute namespace that contains the security attribute.
         * 
         * @return builder
         * 
         */
        public Builder securityAttributeNamespaceName(String securityAttributeNamespaceName) {
            return securityAttributeNamespaceName(Output.of(securityAttributeNamespaceName));
        }

        /**
         * @param state The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param type The data type of the security attribute.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The data type of the security attribute.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validator (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
         * 
         * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
         * 
         * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
         * 
         * @return builder
         * 
         */
        public Builder validator(@Nullable Output<SecurityAttributeValidatorArgs> validator) {
            $.validator = validator;
            return this;
        }

        /**
         * @param validator (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
         * 
         * If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
         * 
         * To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
         * 
         * @return builder
         * 
         */
        public Builder validator(SecurityAttributeValidatorArgs validator) {
            return validator(Output.of(validator));
        }

        public SecurityAttributeState build() {
            return $;
        }
    }

}
