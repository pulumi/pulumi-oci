// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.SecurityAttribute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.SecurityAttribute.outputs.GetSecurityAttributeValidator;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityAttributeResult {
    /**
     * @return The OCID of the compartment that contains the security attribute definition.
     * 
     */
    private String compartmentId;
    /**
     * @return The description you assign to the security attribute.
     * 
     */
    private String description;
    /**
     * @return The OCID of the security attribute definition.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    private Boolean isRetired;
    /**
     * @return The name assigned to the security attribute during creation. This is the security attribute key. The name must be unique within the security attribute namespace and cannot be changed.
     * 
     */
    private String name;
    private String securityAttributeName;
    /**
     * @return The OCID of the security attribute namespace that contains the security attribute definition.
     * 
     */
    private String securityAttributeNamespaceId;
    /**
     * @return The name of the security attribute namespace that contains the security attribute.
     * 
     */
    private String securityAttributeNamespaceName;
    /**
     * @return The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    private String state;
    /**
     * @return Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The data type of the security attribute.
     * 
     */
    private String type;
    /**
     * @return Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     */
    private List<GetSecurityAttributeValidator> validators;

    private GetSecurityAttributeResult() {}
    /**
     * @return The OCID of the compartment that contains the security attribute definition.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The description you assign to the security attribute.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The OCID of the security attribute definition.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
     * 
     */
    public Boolean isRetired() {
        return this.isRetired;
    }
    /**
     * @return The name assigned to the security attribute during creation. This is the security attribute key. The name must be unique within the security attribute namespace and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    public String securityAttributeName() {
        return this.securityAttributeName;
    }
    /**
     * @return The OCID of the security attribute namespace that contains the security attribute definition.
     * 
     */
    public String securityAttributeNamespaceId() {
        return this.securityAttributeNamespaceId;
    }
    /**
     * @return The name of the security attribute namespace that contains the security attribute.
     * 
     */
    public String securityAttributeNamespaceName() {
        return this.securityAttributeNamespaceName;
    }
    /**
     * @return The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The data type of the security attribute.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
     * 
     */
    public List<GetSecurityAttributeValidator> validators() {
        return this.validators;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAttributeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String description;
        private String id;
        private Boolean isRetired;
        private String name;
        private String securityAttributeName;
        private String securityAttributeNamespaceId;
        private String securityAttributeNamespaceName;
        private String state;
        private String timeCreated;
        private String type;
        private List<GetSecurityAttributeValidator> validators;
        public Builder() {}
        public Builder(GetSecurityAttributeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isRetired = defaults.isRetired;
    	      this.name = defaults.name;
    	      this.securityAttributeName = defaults.securityAttributeName;
    	      this.securityAttributeNamespaceId = defaults.securityAttributeNamespaceId;
    	      this.securityAttributeNamespaceName = defaults.securityAttributeNamespaceName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.validators = defaults.validators;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRetired(Boolean isRetired) {
            if (isRetired == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "isRetired");
            }
            this.isRetired = isRetired;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributeName(String securityAttributeName) {
            if (securityAttributeName == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "securityAttributeName");
            }
            this.securityAttributeName = securityAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributeNamespaceId(String securityAttributeNamespaceId) {
            if (securityAttributeNamespaceId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "securityAttributeNamespaceId");
            }
            this.securityAttributeNamespaceId = securityAttributeNamespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributeNamespaceName(String securityAttributeNamespaceName) {
            if (securityAttributeNamespaceName == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "securityAttributeNamespaceName");
            }
            this.securityAttributeNamespaceName = securityAttributeNamespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder validators(List<GetSecurityAttributeValidator> validators) {
            if (validators == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributeResult", "validators");
            }
            this.validators = validators;
            return this;
        }
        public Builder validators(GetSecurityAttributeValidator... validators) {
            return validators(List.of(validators));
        }
        public GetSecurityAttributeResult build() {
            final var _resultValue = new GetSecurityAttributeResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.isRetired = isRetired;
            _resultValue.name = name;
            _resultValue.securityAttributeName = securityAttributeName;
            _resultValue.securityAttributeNamespaceId = securityAttributeNamespaceId;
            _resultValue.securityAttributeNamespaceName = securityAttributeNamespaceName;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.type = type;
            _resultValue.validators = validators;
            return _resultValue;
        }
    }
}
