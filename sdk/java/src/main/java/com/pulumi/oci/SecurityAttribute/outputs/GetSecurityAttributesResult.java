// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.SecurityAttribute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.SecurityAttribute.outputs.GetSecurityAttributesFilter;
import com.pulumi.oci.SecurityAttribute.outputs.GetSecurityAttributesSecurityAttribute;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAttributesResult {
    private @Nullable List<GetSecurityAttributesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The OCID of the security attribute namespace that contains the security attribute definition.
     * 
     */
    private String securityAttributeNamespaceId;
    /**
     * @return The list of security_attributes.
     * 
     */
    private List<GetSecurityAttributesSecurityAttribute> securityAttributes;
    /**
     * @return The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    private @Nullable String state;

    private GetSecurityAttributesResult() {}
    public List<GetSecurityAttributesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the security attribute namespace that contains the security attribute definition.
     * 
     */
    public String securityAttributeNamespaceId() {
        return this.securityAttributeNamespaceId;
    }
    /**
     * @return The list of security_attributes.
     * 
     */
    public List<GetSecurityAttributesSecurityAttribute> securityAttributes() {
        return this.securityAttributes;
    }
    /**
     * @return The security attribute&#39;s current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute&#39;s `lifecycleState` changes from DELETING to DELETED.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAttributesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetSecurityAttributesFilter> filters;
        private String id;
        private String securityAttributeNamespaceId;
        private List<GetSecurityAttributesSecurityAttribute> securityAttributes;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetSecurityAttributesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.securityAttributeNamespaceId = defaults.securityAttributeNamespaceId;
    	      this.securityAttributes = defaults.securityAttributes;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAttributesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAttributesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributeNamespaceId(String securityAttributeNamespaceId) {
            if (securityAttributeNamespaceId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributesResult", "securityAttributeNamespaceId");
            }
            this.securityAttributeNamespaceId = securityAttributeNamespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributes(List<GetSecurityAttributesSecurityAttribute> securityAttributes) {
            if (securityAttributes == null) {
              throw new MissingRequiredPropertyException("GetSecurityAttributesResult", "securityAttributes");
            }
            this.securityAttributes = securityAttributes;
            return this;
        }
        public Builder securityAttributes(GetSecurityAttributesSecurityAttribute... securityAttributes) {
            return securityAttributes(List.of(securityAttributes));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetSecurityAttributesResult build() {
            final var _resultValue = new GetSecurityAttributesResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.securityAttributeNamespaceId = securityAttributeNamespaceId;
            _resultValue.securityAttributes = securityAttributes;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
