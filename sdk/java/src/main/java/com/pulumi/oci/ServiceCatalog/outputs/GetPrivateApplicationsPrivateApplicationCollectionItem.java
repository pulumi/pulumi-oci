// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ServiceCatalog.outputs.GetPrivateApplicationsPrivateApplicationCollectionItemLogo;
import com.pulumi.oci.ServiceCatalog.outputs.GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPrivateApplicationsPrivateApplicationCollectionItem {
    /**
     * @return The unique identifier for the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Exact match name filter.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The unique identifier for the private application in Marketplace.
     * 
     */
    private String id;
    private String logoFileBase64encoded;
    /**
     * @return The model for uploaded binary data, like logos and images.
     * 
     */
    private List<GetPrivateApplicationsPrivateApplicationCollectionItemLogo> logos;
    /**
     * @return A long description of the private application.
     * 
     */
    private String longDescription;
    private List<GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail> packageDetails;
    /**
     * @return Type of packages within this private application.
     * 
     */
    private String packageType;
    /**
     * @return A short description of the private application.
     * 
     */
    private String shortDescription;
    /**
     * @return The lifecycle state of the private application.
     * 
     */
    private String state;
    /**
     * @return The date and time the private application was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the private application was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
     * 
     */
    private String timeUpdated;

    private GetPrivateApplicationsPrivateApplicationCollectionItem() {}
    /**
     * @return The unique identifier for the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Exact match name filter.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The unique identifier for the private application in Marketplace.
     * 
     */
    public String id() {
        return this.id;
    }
    public String logoFileBase64encoded() {
        return this.logoFileBase64encoded;
    }
    /**
     * @return The model for uploaded binary data, like logos and images.
     * 
     */
    public List<GetPrivateApplicationsPrivateApplicationCollectionItemLogo> logos() {
        return this.logos;
    }
    /**
     * @return A long description of the private application.
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }
    public List<GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail> packageDetails() {
        return this.packageDetails;
    }
    /**
     * @return Type of packages within this private application.
     * 
     */
    public String packageType() {
        return this.packageType;
    }
    /**
     * @return A short description of the private application.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }
    /**
     * @return The lifecycle state of the private application.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the private application was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the private application was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateApplicationsPrivateApplicationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String logoFileBase64encoded;
        private List<GetPrivateApplicationsPrivateApplicationCollectionItemLogo> logos;
        private String longDescription;
        private List<GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail> packageDetails;
        private String packageType;
        private String shortDescription;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetPrivateApplicationsPrivateApplicationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.logoFileBase64encoded = defaults.logoFileBase64encoded;
    	      this.logos = defaults.logos;
    	      this.longDescription = defaults.longDescription;
    	      this.packageDetails = defaults.packageDetails;
    	      this.packageType = defaults.packageType;
    	      this.shortDescription = defaults.shortDescription;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logoFileBase64encoded(String logoFileBase64encoded) {
            if (logoFileBase64encoded == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "logoFileBase64encoded");
            }
            this.logoFileBase64encoded = logoFileBase64encoded;
            return this;
        }
        @CustomType.Setter
        public Builder logos(List<GetPrivateApplicationsPrivateApplicationCollectionItemLogo> logos) {
            if (logos == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "logos");
            }
            this.logos = logos;
            return this;
        }
        public Builder logos(GetPrivateApplicationsPrivateApplicationCollectionItemLogo... logos) {
            return logos(List.of(logos));
        }
        @CustomType.Setter
        public Builder longDescription(String longDescription) {
            if (longDescription == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "longDescription");
            }
            this.longDescription = longDescription;
            return this;
        }
        @CustomType.Setter
        public Builder packageDetails(List<GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail> packageDetails) {
            if (packageDetails == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "packageDetails");
            }
            this.packageDetails = packageDetails;
            return this;
        }
        public Builder packageDetails(GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetail... packageDetails) {
            return packageDetails(List.of(packageDetails));
        }
        @CustomType.Setter
        public Builder packageType(String packageType) {
            if (packageType == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "packageType");
            }
            this.packageType = packageType;
            return this;
        }
        @CustomType.Setter
        public Builder shortDescription(String shortDescription) {
            if (shortDescription == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "shortDescription");
            }
            this.shortDescription = shortDescription;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetPrivateApplicationsPrivateApplicationCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetPrivateApplicationsPrivateApplicationCollectionItem build() {
            final var _resultValue = new GetPrivateApplicationsPrivateApplicationCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.logoFileBase64encoded = logoFileBase64encoded;
            _resultValue.logos = logos;
            _resultValue.longDescription = longDescription;
            _resultValue.packageDetails = packageDetails;
            _resultValue.packageType = packageType;
            _resultValue.shortDescription = shortDescription;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
