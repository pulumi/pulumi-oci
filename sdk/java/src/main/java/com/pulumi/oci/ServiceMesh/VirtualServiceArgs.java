// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ServiceMesh.inputs.VirtualServiceDefaultRoutingPolicyArgs;
import com.pulumi.oci.ServiceMesh.inputs.VirtualServiceMtlsArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualServiceArgs Empty = new VirtualServiceArgs();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Routing policy for the virtual service.
     * 
     */
    @Import(name="defaultRoutingPolicy")
    private @Nullable Output<VirtualServiceDefaultRoutingPolicyArgs> defaultRoutingPolicy;

    /**
     * @return (Updatable) Routing policy for the virtual service.
     * 
     */
    public Optional<Output<VirtualServiceDefaultRoutingPolicyArgs>> defaultRoutingPolicy() {
        return Optional.ofNullable(this.defaultRoutingPolicy);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The DNS hostnames of the virtual service that is used by its callers. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;. Can be omitted if the virtual service will only have TCP virtual deployments.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    /**
     * @return (Updatable) The DNS hostnames of the virtual service that is used by its callers. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;. Can be omitted if the virtual service will only have TCP virtual deployments.
     * 
     */
    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * The OCID of the service mesh in which this virtual service is created.
     * 
     */
    @Import(name="meshId", required=true)
    private Output<String> meshId;

    /**
     * @return The OCID of the service mesh in which this virtual service is created.
     * 
     */
    public Output<String> meshId() {
        return this.meshId;
    }

    /**
     * (Updatable) The mTLS authentication mode to use when receiving requests from other virtual services or ingress gateways within the mesh.
     * 
     */
    @Import(name="mtls")
    private @Nullable Output<VirtualServiceMtlsArgs> mtls;

    /**
     * @return (Updatable) The mTLS authentication mode to use when receiving requests from other virtual services or ingress gateways within the mesh.
     * 
     */
    public Optional<Output<VirtualServiceMtlsArgs>> mtls() {
        return Optional.ofNullable(this.mtls);
    }

    /**
     * A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private VirtualServiceArgs() {}

    private VirtualServiceArgs(VirtualServiceArgs $) {
        this.compartmentId = $.compartmentId;
        this.defaultRoutingPolicy = $.defaultRoutingPolicy;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.hosts = $.hosts;
        this.meshId = $.meshId;
        this.mtls = $.mtls;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualServiceArgs $;

        public Builder() {
            $ = new VirtualServiceArgs();
        }

        public Builder(VirtualServiceArgs defaults) {
            $ = new VirtualServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param defaultRoutingPolicy (Updatable) Routing policy for the virtual service.
         * 
         * @return builder
         * 
         */
        public Builder defaultRoutingPolicy(@Nullable Output<VirtualServiceDefaultRoutingPolicyArgs> defaultRoutingPolicy) {
            $.defaultRoutingPolicy = defaultRoutingPolicy;
            return this;
        }

        /**
         * @param defaultRoutingPolicy (Updatable) Routing policy for the virtual service.
         * 
         * @return builder
         * 
         */
        public Builder defaultRoutingPolicy(VirtualServiceDefaultRoutingPolicyArgs defaultRoutingPolicy) {
            return defaultRoutingPolicy(Output.of(defaultRoutingPolicy));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param hosts (Updatable) The DNS hostnames of the virtual service that is used by its callers. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;. Can be omitted if the virtual service will only have TCP virtual deployments.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts (Updatable) The DNS hostnames of the virtual service that is used by its callers. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;. Can be omitted if the virtual service will only have TCP virtual deployments.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts (Updatable) The DNS hostnames of the virtual service that is used by its callers. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;. Can be omitted if the virtual service will only have TCP virtual deployments.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param meshId The OCID of the service mesh in which this virtual service is created.
         * 
         * @return builder
         * 
         */
        public Builder meshId(Output<String> meshId) {
            $.meshId = meshId;
            return this;
        }

        /**
         * @param meshId The OCID of the service mesh in which this virtual service is created.
         * 
         * @return builder
         * 
         */
        public Builder meshId(String meshId) {
            return meshId(Output.of(meshId));
        }

        /**
         * @param mtls (Updatable) The mTLS authentication mode to use when receiving requests from other virtual services or ingress gateways within the mesh.
         * 
         * @return builder
         * 
         */
        public Builder mtls(@Nullable Output<VirtualServiceMtlsArgs> mtls) {
            $.mtls = mtls;
            return this;
        }

        /**
         * @param mtls (Updatable) The mTLS authentication mode to use when receiving requests from other virtual services or ingress gateways within the mesh.
         * 
         * @return builder
         * 
         */
        public Builder mtls(VirtualServiceMtlsArgs mtls) {
            return mtls(Output.of(mtls));
        }

        /**
         * @param name A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public VirtualServiceArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.meshId = Objects.requireNonNull($.meshId, "expected parameter 'meshId' to be non-null");
            return $;
        }
    }

}
