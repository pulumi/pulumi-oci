// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPolicyRuleDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPolicyRuleDestinationArgs Empty = new AccessPolicyRuleDestinationArgs();

    /**
     * (Updatable) The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
     * 
     */
    @Import(name="hostnames")
    private @Nullable Output<List<String>> hostnames;

    /**
     * @return (Updatable) The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
     * 
     */
    public Optional<Output<List<String>>> hostnames() {
        return Optional.ofNullable(this.hostnames);
    }

    /**
     * (Updatable) The OCID of the ingress gateway resource.
     * 
     */
    @Import(name="ingressGatewayId")
    private @Nullable Output<String> ingressGatewayId;

    /**
     * @return (Updatable) The OCID of the ingress gateway resource.
     * 
     */
    public Optional<Output<String>> ingressGatewayId() {
        return Optional.ofNullable(this.ingressGatewayId);
    }

    /**
     * (Updatable) The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<String>> ipAddresses;

    /**
     * @return (Updatable) The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
     * 
     */
    public Optional<Output<List<String>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * (Updatable) Ports exposed by an external service. If left empty all ports will be allowed.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<Integer>> ports;

    /**
     * @return (Updatable) Ports exposed by an external service. If left empty all ports will be allowed.
     * 
     */
    public Optional<Output<List<Integer>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * (Updatable) Protocol of the external service
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Updatable) Protocol of the external service
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Updatable) Traffic type of the target.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Traffic type of the target.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) The OCID of the virtual service resource.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="virtualServiceId")
    private @Nullable Output<String> virtualServiceId;

    /**
     * @return (Updatable) The OCID of the virtual service resource.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> virtualServiceId() {
        return Optional.ofNullable(this.virtualServiceId);
    }

    private AccessPolicyRuleDestinationArgs() {}

    private AccessPolicyRuleDestinationArgs(AccessPolicyRuleDestinationArgs $) {
        this.hostnames = $.hostnames;
        this.ingressGatewayId = $.ingressGatewayId;
        this.ipAddresses = $.ipAddresses;
        this.ports = $.ports;
        this.protocol = $.protocol;
        this.type = $.type;
        this.virtualServiceId = $.virtualServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPolicyRuleDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPolicyRuleDestinationArgs $;

        public Builder() {
            $ = new AccessPolicyRuleDestinationArgs();
        }

        public Builder(AccessPolicyRuleDestinationArgs defaults) {
            $ = new AccessPolicyRuleDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostnames (Updatable) The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(@Nullable Output<List<String>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames (Updatable) The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames (Updatable) The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param ingressGatewayId (Updatable) The OCID of the ingress gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder ingressGatewayId(@Nullable Output<String> ingressGatewayId) {
            $.ingressGatewayId = ingressGatewayId;
            return this;
        }

        /**
         * @param ingressGatewayId (Updatable) The OCID of the ingress gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder ingressGatewayId(String ingressGatewayId) {
            return ingressGatewayId(Output.of(ingressGatewayId));
        }

        /**
         * @param ipAddresses (Updatable) The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<List<String>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses (Updatable) The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<String> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param ipAddresses (Updatable) The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param ports (Updatable) Ports exposed by an external service. If left empty all ports will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<Integer>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports (Updatable) Ports exposed by an external service. If left empty all ports will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<Integer> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports (Updatable) Ports exposed by an external service. If left empty all ports will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param protocol (Updatable) Protocol of the external service
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) Protocol of the external service
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param type (Updatable) Traffic type of the target.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Traffic type of the target.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param virtualServiceId (Updatable) The OCID of the virtual service resource.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder virtualServiceId(@Nullable Output<String> virtualServiceId) {
            $.virtualServiceId = virtualServiceId;
            return this;
        }

        /**
         * @param virtualServiceId (Updatable) The OCID of the virtual service resource.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder virtualServiceId(String virtualServiceId) {
            return virtualServiceId(Output.of(virtualServiceId));
        }

        public AccessPolicyRuleDestinationArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AccessPolicyRuleDestinationArgs", "type");
            }
            return $;
        }
    }

}
