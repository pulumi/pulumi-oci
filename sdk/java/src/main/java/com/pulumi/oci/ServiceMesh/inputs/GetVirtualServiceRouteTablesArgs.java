// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ServiceMesh.inputs.GetVirtualServiceRouteTablesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVirtualServiceRouteTablesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVirtualServiceRouteTablesArgs Empty = new GetVirtualServiceRouteTablesArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVirtualServiceRouteTablesFilterArgs>> filters;

    public Optional<Output<List<GetVirtualServiceRouteTablesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique VirtualServiceRouteTable identifier.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique VirtualServiceRouteTable identifier.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only resources that match the entire name given.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only resources that match the life cycle state given.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the life cycle state given.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Unique VirtualService identifier.
     * 
     */
    @Import(name="virtualServiceId")
    private @Nullable Output<String> virtualServiceId;

    /**
     * @return Unique VirtualService identifier.
     * 
     */
    public Optional<Output<String>> virtualServiceId() {
        return Optional.ofNullable(this.virtualServiceId);
    }

    private GetVirtualServiceRouteTablesArgs() {}

    private GetVirtualServiceRouteTablesArgs(GetVirtualServiceRouteTablesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.id = $.id;
        this.name = $.name;
        this.state = $.state;
        this.virtualServiceId = $.virtualServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVirtualServiceRouteTablesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVirtualServiceRouteTablesArgs $;

        public Builder() {
            $ = new GetVirtualServiceRouteTablesArgs();
        }

        public Builder(GetVirtualServiceRouteTablesArgs defaults) {
            $ = new GetVirtualServiceRouteTablesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetVirtualServiceRouteTablesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVirtualServiceRouteTablesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVirtualServiceRouteTablesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id Unique VirtualServiceRouteTable identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique VirtualServiceRouteTable identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state A filter to return only resources that match the life cycle state given.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the life cycle state given.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param virtualServiceId Unique VirtualService identifier.
         * 
         * @return builder
         * 
         */
        public Builder virtualServiceId(@Nullable Output<String> virtualServiceId) {
            $.virtualServiceId = virtualServiceId;
            return this;
        }

        /**
         * @param virtualServiceId Unique VirtualService identifier.
         * 
         * @return builder
         * 
         */
        public Builder virtualServiceId(String virtualServiceId) {
            return virtualServiceId(Output.of(virtualServiceId));
        }

        public GetVirtualServiceRouteTablesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetVirtualServiceRouteTablesArgs", "compartmentId");
            }
            return $;
        }
    }

}
