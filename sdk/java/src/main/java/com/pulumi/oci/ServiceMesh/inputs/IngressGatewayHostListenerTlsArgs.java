// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ServiceMesh.inputs.IngressGatewayHostListenerTlsClientValidationArgs;
import com.pulumi.oci.ServiceMesh.inputs.IngressGatewayHostListenerTlsServerCertificateArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngressGatewayHostListenerTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressGatewayHostListenerTlsArgs Empty = new IngressGatewayHostListenerTlsArgs();

    /**
     * (Updatable) Resource representing the TLS configuration used for validating client certificates.
     * 
     */
    @Import(name="clientValidation")
    private @Nullable Output<IngressGatewayHostListenerTlsClientValidationArgs> clientValidation;

    /**
     * @return (Updatable) Resource representing the TLS configuration used for validating client certificates.
     * 
     */
    public Optional<Output<IngressGatewayHostListenerTlsClientValidationArgs>> clientValidation() {
        return Optional.ofNullable(this.clientValidation);
    }

    /**
     * (Updatable) DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return (Updatable) DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * (Updatable) Resource representing the location of the TLS certificate.
     * 
     */
    @Import(name="serverCertificate")
    private @Nullable Output<IngressGatewayHostListenerTlsServerCertificateArgs> serverCertificate;

    /**
     * @return (Updatable) Resource representing the location of the TLS certificate.
     * 
     */
    public Optional<Output<IngressGatewayHostListenerTlsServerCertificateArgs>> serverCertificate() {
        return Optional.ofNullable(this.serverCertificate);
    }

    private IngressGatewayHostListenerTlsArgs() {}

    private IngressGatewayHostListenerTlsArgs(IngressGatewayHostListenerTlsArgs $) {
        this.clientValidation = $.clientValidation;
        this.mode = $.mode;
        this.serverCertificate = $.serverCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressGatewayHostListenerTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressGatewayHostListenerTlsArgs $;

        public Builder() {
            $ = new IngressGatewayHostListenerTlsArgs();
        }

        public Builder(IngressGatewayHostListenerTlsArgs defaults) {
            $ = new IngressGatewayHostListenerTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientValidation (Updatable) Resource representing the TLS configuration used for validating client certificates.
         * 
         * @return builder
         * 
         */
        public Builder clientValidation(@Nullable Output<IngressGatewayHostListenerTlsClientValidationArgs> clientValidation) {
            $.clientValidation = clientValidation;
            return this;
        }

        /**
         * @param clientValidation (Updatable) Resource representing the TLS configuration used for validating client certificates.
         * 
         * @return builder
         * 
         */
        public Builder clientValidation(IngressGatewayHostListenerTlsClientValidationArgs clientValidation) {
            return clientValidation(Output.of(clientValidation));
        }

        /**
         * @param mode (Updatable) DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode (Updatable) DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param serverCertificate (Updatable) Resource representing the location of the TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(@Nullable Output<IngressGatewayHostListenerTlsServerCertificateArgs> serverCertificate) {
            $.serverCertificate = serverCertificate;
            return this;
        }

        /**
         * @param serverCertificate (Updatable) Resource representing the location of the TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificate(IngressGatewayHostListenerTlsServerCertificateArgs serverCertificate) {
            return serverCertificate(Output.of(serverCertificate));
        }

        public IngressGatewayHostListenerTlsArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("IngressGatewayHostListenerTlsArgs", "mode");
            }
            return $;
        }
    }

}
