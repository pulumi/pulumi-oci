// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAccessPoliciesAccessPolicyCollectionItemRuleSource {
    /**
     * @return The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
     * 
     */
    private List<String> hostnames;
    /**
     * @return The OCID of the ingress gateway resource.
     * 
     */
    private String ingressGatewayId;
    /**
     * @return The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
     * 
     */
    private List<String> ipAddresses;
    /**
     * @return Ports exposed by an external service. If left empty all ports will be allowed.
     * 
     */
    private List<Integer> ports;
    /**
     * @return Protocol of the external service
     * 
     */
    private String protocol;
    /**
     * @return Traffic type of the target.
     * 
     */
    private String type;
    /**
     * @return The OCID of the virtual service resource.
     * 
     */
    private String virtualServiceId;

    private GetAccessPoliciesAccessPolicyCollectionItemRuleSource() {}
    /**
     * @return The hostnames of the external service. Only applicable for HTTP and HTTPS protocols. Wildcard hostnames are supported in the prefix form. Examples of valid hostnames are &#34;www.example.com&#34;, &#34;*.example.com&#34;, &#34;*.com&#34;, &#34;*&#34;. Hostname &#34;*&#34; can be used to allow all hosts.
     * 
     */
    public List<String> hostnames() {
        return this.hostnames;
    }
    /**
     * @return The OCID of the ingress gateway resource.
     * 
     */
    public String ingressGatewayId() {
        return this.ingressGatewayId;
    }
    /**
     * @return The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol. All requests matching the given CIDR notation will pass through. In case a wildcard CIDR &#34;0.0.0.0/0&#34; is provided, the same port cannot be used for a virtual service communication.
     * 
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }
    /**
     * @return Ports exposed by an external service. If left empty all ports will be allowed.
     * 
     */
    public List<Integer> ports() {
        return this.ports;
    }
    /**
     * @return Protocol of the external service
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Traffic type of the target.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The OCID of the virtual service resource.
     * 
     */
    public String virtualServiceId() {
        return this.virtualServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessPoliciesAccessPolicyCollectionItemRuleSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> hostnames;
        private String ingressGatewayId;
        private List<String> ipAddresses;
        private List<Integer> ports;
        private String protocol;
        private String type;
        private String virtualServiceId;
        public Builder() {}
        public Builder(GetAccessPoliciesAccessPolicyCollectionItemRuleSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostnames = defaults.hostnames;
    	      this.ingressGatewayId = defaults.ingressGatewayId;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.ports = defaults.ports;
    	      this.protocol = defaults.protocol;
    	      this.type = defaults.type;
    	      this.virtualServiceId = defaults.virtualServiceId;
        }

        @CustomType.Setter
        public Builder hostnames(List<String> hostnames) {
            this.hostnames = Objects.requireNonNull(hostnames);
            return this;
        }
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }
        @CustomType.Setter
        public Builder ingressGatewayId(String ingressGatewayId) {
            this.ingressGatewayId = Objects.requireNonNull(ingressGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(List<String> ipAddresses) {
            this.ipAddresses = Objects.requireNonNull(ipAddresses);
            return this;
        }
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        @CustomType.Setter
        public Builder ports(List<Integer> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualServiceId(String virtualServiceId) {
            this.virtualServiceId = Objects.requireNonNull(virtualServiceId);
            return this;
        }
        public GetAccessPoliciesAccessPolicyCollectionItemRuleSource build() {
            final var _resultValue = new GetAccessPoliciesAccessPolicyCollectionItemRuleSource();
            _resultValue.hostnames = hostnames;
            _resultValue.ingressGatewayId = ingressGatewayId;
            _resultValue.ipAddresses = ipAddresses;
            _resultValue.ports = ports;
            _resultValue.protocol = protocol;
            _resultValue.type = type;
            _resultValue.virtualServiceId = virtualServiceId;
            return _resultValue;
        }
    }
}
