// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ServiceMesh.outputs.GetIngressGatewayHostListenerTlClientValidation;
import com.pulumi.oci.ServiceMesh.outputs.GetIngressGatewayHostListenerTlServerCertificate;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIngressGatewayHostListenerTl {
    /**
     * @return Resource representing the TLS configuration used for validating client certificates.
     * 
     */
    private List<GetIngressGatewayHostListenerTlClientValidation> clientValidations;
    /**
     * @return DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
     * 
     */
    private String mode;
    /**
     * @return Resource representing the location of the TLS certificate.
     * 
     */
    private List<GetIngressGatewayHostListenerTlServerCertificate> serverCertificates;

    private GetIngressGatewayHostListenerTl() {}
    /**
     * @return Resource representing the TLS configuration used for validating client certificates.
     * 
     */
    public List<GetIngressGatewayHostListenerTlClientValidation> clientValidations() {
        return this.clientValidations;
    }
    /**
     * @return DISABLED: Connection can only be plaintext. PERMISSIVE: Connection can be either plaintext or TLS/mTLS. If the clientValidation.trustedCaBundle property is configured for the listener, mTLS is performed and the client&#39;s certificates are validated by the gateway. TLS: Connection can only be TLS.  MUTUAL_TLS: Connection can only be MTLS.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Resource representing the location of the TLS certificate.
     * 
     */
    public List<GetIngressGatewayHostListenerTlServerCertificate> serverCertificates() {
        return this.serverCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIngressGatewayHostListenerTl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetIngressGatewayHostListenerTlClientValidation> clientValidations;
        private String mode;
        private List<GetIngressGatewayHostListenerTlServerCertificate> serverCertificates;
        public Builder() {}
        public Builder(GetIngressGatewayHostListenerTl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientValidations = defaults.clientValidations;
    	      this.mode = defaults.mode;
    	      this.serverCertificates = defaults.serverCertificates;
        }

        @CustomType.Setter
        public Builder clientValidations(List<GetIngressGatewayHostListenerTlClientValidation> clientValidations) {
            this.clientValidations = Objects.requireNonNull(clientValidations);
            return this;
        }
        public Builder clientValidations(GetIngressGatewayHostListenerTlClientValidation... clientValidations) {
            return clientValidations(List.of(clientValidations));
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificates(List<GetIngressGatewayHostListenerTlServerCertificate> serverCertificates) {
            this.serverCertificates = Objects.requireNonNull(serverCertificates);
            return this;
        }
        public Builder serverCertificates(GetIngressGatewayHostListenerTlServerCertificate... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }
        public GetIngressGatewayHostListenerTl build() {
            final var _resultValue = new GetIngressGatewayHostListenerTl();
            _resultValue.clientValidations = clientValidations;
            _resultValue.mode = mode;
            _resultValue.serverCertificates = serverCertificates;
            return _resultValue;
        }
    }
}
