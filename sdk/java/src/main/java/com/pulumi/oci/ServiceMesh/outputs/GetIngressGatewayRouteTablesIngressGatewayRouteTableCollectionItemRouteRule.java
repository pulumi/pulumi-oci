// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ServiceMesh.outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination;
import com.pulumi.oci.ServiceMesh.outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule {
    /**
     * @return The destination of the request.
     * 
     */
    private final List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination> destinations;
    /**
     * @return The ingress gateway host to which the route rule attaches. If not specified, the route rule gets attached to all hosts on the ingress gateway.
     * 
     */
    private final List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost> ingressGatewayHosts;
    /**
     * @return If true, the rule will check that the content-type header has a application/grpc or one of the various application/grpc+ values.
     * 
     */
    private final Boolean isGrpc;
    /**
     * @return If true, the hostname will be rewritten to the target virtual deployment&#39;s DNS hostname.
     * 
     */
    private final Boolean isHostRewriteEnabled;
    /**
     * @return If true, the matched path prefix will be rewritten to &#39;/&#39; before being directed to the target virtual deployment.
     * 
     */
    private final Boolean isPathRewriteEnabled;
    /**
     * @return Route to match
     * 
     */
    private final String path;
    /**
     * @return Match type for the route
     * 
     */
    private final String pathType;
    /**
     * @return Type of protocol.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule(
        @CustomType.Parameter("destinations") List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination> destinations,
        @CustomType.Parameter("ingressGatewayHosts") List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost> ingressGatewayHosts,
        @CustomType.Parameter("isGrpc") Boolean isGrpc,
        @CustomType.Parameter("isHostRewriteEnabled") Boolean isHostRewriteEnabled,
        @CustomType.Parameter("isPathRewriteEnabled") Boolean isPathRewriteEnabled,
        @CustomType.Parameter("path") String path,
        @CustomType.Parameter("pathType") String pathType,
        @CustomType.Parameter("type") String type) {
        this.destinations = destinations;
        this.ingressGatewayHosts = ingressGatewayHosts;
        this.isGrpc = isGrpc;
        this.isHostRewriteEnabled = isHostRewriteEnabled;
        this.isPathRewriteEnabled = isPathRewriteEnabled;
        this.path = path;
        this.pathType = pathType;
        this.type = type;
    }

    /**
     * @return The destination of the request.
     * 
     */
    public List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return The ingress gateway host to which the route rule attaches. If not specified, the route rule gets attached to all hosts on the ingress gateway.
     * 
     */
    public List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost> ingressGatewayHosts() {
        return this.ingressGatewayHosts;
    }
    /**
     * @return If true, the rule will check that the content-type header has a application/grpc or one of the various application/grpc+ values.
     * 
     */
    public Boolean isGrpc() {
        return this.isGrpc;
    }
    /**
     * @return If true, the hostname will be rewritten to the target virtual deployment&#39;s DNS hostname.
     * 
     */
    public Boolean isHostRewriteEnabled() {
        return this.isHostRewriteEnabled;
    }
    /**
     * @return If true, the matched path prefix will be rewritten to &#39;/&#39; before being directed to the target virtual deployment.
     * 
     */
    public Boolean isPathRewriteEnabled() {
        return this.isPathRewriteEnabled;
    }
    /**
     * @return Route to match
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Match type for the route
     * 
     */
    public String pathType() {
        return this.pathType;
    }
    /**
     * @return Type of protocol.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination> destinations;
        private List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost> ingressGatewayHosts;
        private Boolean isGrpc;
        private Boolean isHostRewriteEnabled;
        private Boolean isPathRewriteEnabled;
        private String path;
        private String pathType;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinations = defaults.destinations;
    	      this.ingressGatewayHosts = defaults.ingressGatewayHosts;
    	      this.isGrpc = defaults.isGrpc;
    	      this.isHostRewriteEnabled = defaults.isHostRewriteEnabled;
    	      this.isPathRewriteEnabled = defaults.isPathRewriteEnabled;
    	      this.path = defaults.path;
    	      this.pathType = defaults.pathType;
    	      this.type = defaults.type;
        }

        public Builder destinations(List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination> destinations) {
            this.destinations = Objects.requireNonNull(destinations);
            return this;
        }
        public Builder destinations(GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination... destinations) {
            return destinations(List.of(destinations));
        }
        public Builder ingressGatewayHosts(List<GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost> ingressGatewayHosts) {
            this.ingressGatewayHosts = Objects.requireNonNull(ingressGatewayHosts);
            return this;
        }
        public Builder ingressGatewayHosts(GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost... ingressGatewayHosts) {
            return ingressGatewayHosts(List.of(ingressGatewayHosts));
        }
        public Builder isGrpc(Boolean isGrpc) {
            this.isGrpc = Objects.requireNonNull(isGrpc);
            return this;
        }
        public Builder isHostRewriteEnabled(Boolean isHostRewriteEnabled) {
            this.isHostRewriteEnabled = Objects.requireNonNull(isHostRewriteEnabled);
            return this;
        }
        public Builder isPathRewriteEnabled(Boolean isPathRewriteEnabled) {
            this.isPathRewriteEnabled = Objects.requireNonNull(isPathRewriteEnabled);
            return this;
        }
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder pathType(String pathType) {
            this.pathType = Objects.requireNonNull(pathType);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule build() {
            return new GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule(destinations, ingressGatewayHosts, isGrpc, isHostRewriteEnabled, isPathRewriteEnabled, path, pathType, type);
        }
    }
}
