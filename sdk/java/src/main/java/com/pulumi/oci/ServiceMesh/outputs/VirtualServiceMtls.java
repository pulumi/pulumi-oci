// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceMesh.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualServiceMtls {
    /**
     * @return The OCID of the certificate resource that will be used for mTLS authentication with other virtual services in the mesh.
     * 
     */
    private final @Nullable String certificateId;
    /**
     * @return (Updatable) The number of days the mTLS certificate is valid.  This value should be less than the Maximum Validity Duration  for Certificates (Days) setting on the Certificate Authority associated with this Mesh.  The certificate will be automatically renewed after 2/3 of the validity period, so a certificate with a maximum validity of 45 days will be renewed every 30 days.
     * 
     */
    private final @Nullable Integer maximumValidity;
    /**
     * @return (Updatable) DISABLED: Connection is not tunneled. PERMISSIVE: Connection can be either plaintext or an mTLS tunnel. STRICT: Connection is an mTLS tunnel.  Clients without a valid certificate will be rejected.
     * 
     */
    private final String mode;

    @CustomType.Constructor
    private VirtualServiceMtls(
        @CustomType.Parameter("certificateId") @Nullable String certificateId,
        @CustomType.Parameter("maximumValidity") @Nullable Integer maximumValidity,
        @CustomType.Parameter("mode") String mode) {
        this.certificateId = certificateId;
        this.maximumValidity = maximumValidity;
        this.mode = mode;
    }

    /**
     * @return The OCID of the certificate resource that will be used for mTLS authentication with other virtual services in the mesh.
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return (Updatable) The number of days the mTLS certificate is valid.  This value should be less than the Maximum Validity Duration  for Certificates (Days) setting on the Certificate Authority associated with this Mesh.  The certificate will be automatically renewed after 2/3 of the validity period, so a certificate with a maximum validity of 45 days will be renewed every 30 days.
     * 
     */
    public Optional<Integer> maximumValidity() {
        return Optional.ofNullable(this.maximumValidity);
    }
    /**
     * @return (Updatable) DISABLED: Connection is not tunneled. PERMISSIVE: Connection can be either plaintext or an mTLS tunnel. STRICT: Connection is an mTLS tunnel.  Clients without a valid certificate will be rejected.
     * 
     */
    public String mode() {
        return this.mode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualServiceMtls defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String certificateId;
        private @Nullable Integer maximumValidity;
        private String mode;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualServiceMtls defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.maximumValidity = defaults.maximumValidity;
    	      this.mode = defaults.mode;
        }

        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        public Builder maximumValidity(@Nullable Integer maximumValidity) {
            this.maximumValidity = maximumValidity;
            return this;
        }
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }        public VirtualServiceMtls build() {
            return new VirtualServiceMtls(certificateId, maximumValidity, mode);
        }
    }
}
