// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.inputs.ConfigAdditionalConfigurationsArgs;
import com.pulumi.oci.StackMonitoring.inputs.ConfigDynamicGroupArgs;
import com.pulumi.oci.StackMonitoring.inputs.ConfigUserGroupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    /**
     * (Updatable) Property Details
     * 
     */
    @Import(name="additionalConfigurations")
    private @Nullable Output<ConfigAdditionalConfigurationsArgs> additionalConfigurations;

    /**
     * @return (Updatable) Property Details
     * 
     */
    public Optional<Output<ConfigAdditionalConfigurationsArgs>> additionalConfigurations() {
        return Optional.ofNullable(this.additionalConfigurations);
    }

    /**
     * (Updatable) Compartment in which the configuration is created.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment in which the configuration is created.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The type of configuration. The only valid value is `&#34;AUTO_PROMOTE&#34;`.
     * 
     */
    @Import(name="configType", required=true)
    private Output<String> configType;

    /**
     * @return The type of configuration. The only valid value is `&#34;AUTO_PROMOTE&#34;`.
     * 
     */
    public Output<String> configType() {
        return this.configType;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The display name of the configuration.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The display name of the configuration.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) List of dynamic groups dedicated for Stack Monitoring.
     * 
     */
    @Import(name="dynamicGroups")
    private @Nullable Output<List<ConfigDynamicGroupArgs>> dynamicGroups;

    /**
     * @return (Updatable) List of dynamic groups dedicated for Stack Monitoring.
     * 
     */
    public Optional<Output<List<ConfigDynamicGroupArgs>>> dynamicGroups() {
        return Optional.ofNullable(this.dynamicGroups);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) True if enterprise extensibility is enabled, false if it is not enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) True if enterprise extensibility is enabled, false if it is not enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) True if customer decides marks configuration as manually configured.
     * 
     */
    @Import(name="isManuallyOnboarded")
    private @Nullable Output<Boolean> isManuallyOnboarded;

    /**
     * @return (Updatable) True if customer decides marks configuration as manually configured.
     * 
     */
    public Optional<Output<Boolean>> isManuallyOnboarded() {
        return Optional.ofNullable(this.isManuallyOnboarded);
    }

    /**
     * (Updatable) License edition.
     * 
     */
    @Import(name="license")
    private @Nullable Output<String> license;

    /**
     * @return (Updatable) License edition.
     * 
     */
    public Optional<Output<String>> license() {
        return Optional.ofNullable(this.license);
    }

    /**
     * (Updatable) List of policy names assigned for onboarding
     * 
     */
    @Import(name="policyNames")
    private @Nullable Output<List<String>> policyNames;

    /**
     * @return (Updatable) List of policy names assigned for onboarding
     * 
     */
    public Optional<Output<List<String>>> policyNames() {
        return Optional.ofNullable(this.policyNames);
    }

    /**
     * The type of resource to configure for automatic promotion.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The type of resource to configure for automatic promotion.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * (Updatable) List of user groups dedicated for Stack Monitoring.
     * 
     */
    @Import(name="userGroups")
    private @Nullable Output<List<ConfigUserGroupArgs>> userGroups;

    /**
     * @return (Updatable) List of user groups dedicated for Stack Monitoring.
     * 
     */
    public Optional<Output<List<ConfigUserGroupArgs>>> userGroups() {
        return Optional.ofNullable(this.userGroups);
    }

    /**
     * (Updatable) Assigned version to given onboard configuration.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return (Updatable) Assigned version to given onboard configuration.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ConfigArgs() {}

    private ConfigArgs(ConfigArgs $) {
        this.additionalConfigurations = $.additionalConfigurations;
        this.compartmentId = $.compartmentId;
        this.configType = $.configType;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.dynamicGroups = $.dynamicGroups;
        this.freeformTags = $.freeformTags;
        this.isEnabled = $.isEnabled;
        this.isManuallyOnboarded = $.isManuallyOnboarded;
        this.license = $.license;
        this.policyNames = $.policyNames;
        this.resourceType = $.resourceType;
        this.userGroups = $.userGroups;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigArgs $;

        public Builder() {
            $ = new ConfigArgs();
        }

        public Builder(ConfigArgs defaults) {
            $ = new ConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalConfigurations (Updatable) Property Details
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigurations(@Nullable Output<ConfigAdditionalConfigurationsArgs> additionalConfigurations) {
            $.additionalConfigurations = additionalConfigurations;
            return this;
        }

        /**
         * @param additionalConfigurations (Updatable) Property Details
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigurations(ConfigAdditionalConfigurationsArgs additionalConfigurations) {
            return additionalConfigurations(Output.of(additionalConfigurations));
        }

        /**
         * @param compartmentId (Updatable) Compartment in which the configuration is created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment in which the configuration is created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configType The type of configuration. The only valid value is `&#34;AUTO_PROMOTE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder configType(Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType The type of configuration. The only valid value is `&#34;AUTO_PROMOTE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) The display name of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The display name of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dynamicGroups (Updatable) List of dynamic groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder dynamicGroups(@Nullable Output<List<ConfigDynamicGroupArgs>> dynamicGroups) {
            $.dynamicGroups = dynamicGroups;
            return this;
        }

        /**
         * @param dynamicGroups (Updatable) List of dynamic groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder dynamicGroups(List<ConfigDynamicGroupArgs> dynamicGroups) {
            return dynamicGroups(Output.of(dynamicGroups));
        }

        /**
         * @param dynamicGroups (Updatable) List of dynamic groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder dynamicGroups(ConfigDynamicGroupArgs... dynamicGroups) {
            return dynamicGroups(List.of(dynamicGroups));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isEnabled (Updatable) True if enterprise extensibility is enabled, false if it is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) True if enterprise extensibility is enabled, false if it is not enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isManuallyOnboarded (Updatable) True if customer decides marks configuration as manually configured.
         * 
         * @return builder
         * 
         */
        public Builder isManuallyOnboarded(@Nullable Output<Boolean> isManuallyOnboarded) {
            $.isManuallyOnboarded = isManuallyOnboarded;
            return this;
        }

        /**
         * @param isManuallyOnboarded (Updatable) True if customer decides marks configuration as manually configured.
         * 
         * @return builder
         * 
         */
        public Builder isManuallyOnboarded(Boolean isManuallyOnboarded) {
            return isManuallyOnboarded(Output.of(isManuallyOnboarded));
        }

        /**
         * @param license (Updatable) License edition.
         * 
         * @return builder
         * 
         */
        public Builder license(@Nullable Output<String> license) {
            $.license = license;
            return this;
        }

        /**
         * @param license (Updatable) License edition.
         * 
         * @return builder
         * 
         */
        public Builder license(String license) {
            return license(Output.of(license));
        }

        /**
         * @param policyNames (Updatable) List of policy names assigned for onboarding
         * 
         * @return builder
         * 
         */
        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames (Updatable) List of policy names assigned for onboarding
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames (Updatable) List of policy names assigned for onboarding
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        /**
         * @param resourceType The type of resource to configure for automatic promotion.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of resource to configure for automatic promotion.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param userGroups (Updatable) List of user groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(@Nullable Output<List<ConfigUserGroupArgs>> userGroups) {
            $.userGroups = userGroups;
            return this;
        }

        /**
         * @param userGroups (Updatable) List of user groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(List<ConfigUserGroupArgs> userGroups) {
            return userGroups(Output.of(userGroups));
        }

        /**
         * @param userGroups (Updatable) List of user groups dedicated for Stack Monitoring.
         * 
         * @return builder
         * 
         */
        public Builder userGroups(ConfigUserGroupArgs... userGroups) {
            return userGroups(List.of(userGroups));
        }

        /**
         * @param version (Updatable) Assigned version to given onboard configuration.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version (Updatable) Assigned version to given onboard configuration.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ConfigArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ConfigArgs", "compartmentId");
            }
            if ($.configType == null) {
                throw new MissingRequiredPropertyException("ConfigArgs", "configType");
            }
            return $;
        }
    }

}
