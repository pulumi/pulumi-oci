// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigUserGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigUserGroupArgs Empty = new ConfigUserGroupArgs();

    /**
     * (Updatable) Identity domain name
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return (Updatable) Identity domain name
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * (Updatable) Name of user Group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Name of user Group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) Role assigned to user group in context of Stack Monitoring service. Access role can be for example: ADMINISTRATOR, OPERATOR, VIEWER, any other access role
     * 
     */
    @Import(name="stackMonitoringRole")
    private @Nullable Output<String> stackMonitoringRole;

    /**
     * @return (Updatable) Role assigned to user group in context of Stack Monitoring service. Access role can be for example: ADMINISTRATOR, OPERATOR, VIEWER, any other access role
     * 
     */
    public Optional<Output<String>> stackMonitoringRole() {
        return Optional.ofNullable(this.stackMonitoringRole);
    }

    private ConfigUserGroupArgs() {}

    private ConfigUserGroupArgs(ConfigUserGroupArgs $) {
        this.domain = $.domain;
        this.name = $.name;
        this.stackMonitoringRole = $.stackMonitoringRole;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigUserGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigUserGroupArgs $;

        public Builder() {
            $ = new ConfigUserGroupArgs();
        }

        public Builder(ConfigUserGroupArgs defaults) {
            $ = new ConfigUserGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain (Updatable) Identity domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain (Updatable) Identity domain name
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param name (Updatable) Name of user Group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name of user Group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param stackMonitoringRole (Updatable) Role assigned to user group in context of Stack Monitoring service. Access role can be for example: ADMINISTRATOR, OPERATOR, VIEWER, any other access role
         * 
         * @return builder
         * 
         */
        public Builder stackMonitoringRole(@Nullable Output<String> stackMonitoringRole) {
            $.stackMonitoringRole = stackMonitoringRole;
            return this;
        }

        /**
         * @param stackMonitoringRole (Updatable) Role assigned to user group in context of Stack Monitoring service. Access role can be for example: ADMINISTRATOR, OPERATOR, VIEWER, any other access role
         * 
         * @return builder
         * 
         */
        public Builder stackMonitoringRole(String stackMonitoringRole) {
            return stackMonitoringRole(Output.of(stackMonitoringRole));
        }

        public ConfigUserGroupArgs build() {
            return $;
        }
    }

}
