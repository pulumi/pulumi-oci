// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBaselineableMetricsEvaluateItemDataPoint extends com.pulumi.resources.InvokeArgs {

    public static final GetBaselineableMetricsEvaluateItemDataPoint Empty = new GetBaselineableMetricsEvaluateItemDataPoint();

    /**
     * if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
     * 
     */
    @Import(name="anomaly")
    private @Nullable Double anomaly;

    /**
     * @return if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
     * 
     */
    public Optional<Double> anomaly() {
        return Optional.ofNullable(this.anomaly);
    }

    /**
     * upper threshold for the metric value
     * 
     */
    @Import(name="high")
    private @Nullable Double high;

    /**
     * @return upper threshold for the metric value
     * 
     */
    public Optional<Double> high() {
        return Optional.ofNullable(this.high);
    }

    /**
     * lower threshold for the metric value
     * 
     */
    @Import(name="low")
    private @Nullable Double low;

    /**
     * @return lower threshold for the metric value
     * 
     */
    public Optional<Double> low() {
        return Optional.ofNullable(this.low);
    }

    /**
     * timestamp of when the metric was collected
     * 
     */
    @Import(name="timestamp")
    private @Nullable String timestamp;

    /**
     * @return timestamp of when the metric was collected
     * 
     */
    public Optional<String> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    /**
     * value for the metric data point
     * 
     */
    @Import(name="value")
    private @Nullable Double value;

    /**
     * @return value for the metric data point
     * 
     */
    public Optional<Double> value() {
        return Optional.ofNullable(this.value);
    }

    private GetBaselineableMetricsEvaluateItemDataPoint() {}

    private GetBaselineableMetricsEvaluateItemDataPoint(GetBaselineableMetricsEvaluateItemDataPoint $) {
        this.anomaly = $.anomaly;
        this.high = $.high;
        this.low = $.low;
        this.timestamp = $.timestamp;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBaselineableMetricsEvaluateItemDataPoint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBaselineableMetricsEvaluateItemDataPoint $;

        public Builder() {
            $ = new GetBaselineableMetricsEvaluateItemDataPoint();
        }

        public Builder(GetBaselineableMetricsEvaluateItemDataPoint defaults) {
            $ = new GetBaselineableMetricsEvaluateItemDataPoint(Objects.requireNonNull(defaults));
        }

        /**
         * @param anomaly if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
         * 
         * @return builder
         * 
         */
        public Builder anomaly(@Nullable Double anomaly) {
            $.anomaly = anomaly;
            return this;
        }

        /**
         * @param high upper threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder high(@Nullable Double high) {
            $.high = high;
            return this;
        }

        /**
         * @param low lower threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder low(@Nullable Double low) {
            $.low = low;
            return this;
        }

        /**
         * @param timestamp timestamp of when the metric was collected
         * 
         * @return builder
         * 
         */
        public Builder timestamp(@Nullable String timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param value value for the metric data point
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Double value) {
            $.value = value;
            return this;
        }

        public GetBaselineableMetricsEvaluateItemDataPoint build() {
            return $;
        }
    }

}
