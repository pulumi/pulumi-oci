// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBaselineableMetricsEvaluateItemDataPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetBaselineableMetricsEvaluateItemDataPointArgs Empty = new GetBaselineableMetricsEvaluateItemDataPointArgs();

    /**
     * if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
     * 
     */
    @Import(name="anomaly")
    private @Nullable Output<Double> anomaly;

    /**
     * @return if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
     * 
     */
    public Optional<Output<Double>> anomaly() {
        return Optional.ofNullable(this.anomaly);
    }

    /**
     * upper threshold for the metric value
     * 
     */
    @Import(name="high")
    private @Nullable Output<Double> high;

    /**
     * @return upper threshold for the metric value
     * 
     */
    public Optional<Output<Double>> high() {
        return Optional.ofNullable(this.high);
    }

    /**
     * lower threshold for the metric value
     * 
     */
    @Import(name="low")
    private @Nullable Output<Double> low;

    /**
     * @return lower threshold for the metric value
     * 
     */
    public Optional<Output<Double>> low() {
        return Optional.ofNullable(this.low);
    }

    /**
     * timestamp of when the metric was collected
     * 
     */
    @Import(name="timestamp")
    private @Nullable Output<String> timestamp;

    /**
     * @return timestamp of when the metric was collected
     * 
     */
    public Optional<Output<String>> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    /**
     * value for the metric data point
     * 
     */
    @Import(name="value")
    private @Nullable Output<Double> value;

    /**
     * @return value for the metric data point
     * 
     */
    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private GetBaselineableMetricsEvaluateItemDataPointArgs() {}

    private GetBaselineableMetricsEvaluateItemDataPointArgs(GetBaselineableMetricsEvaluateItemDataPointArgs $) {
        this.anomaly = $.anomaly;
        this.high = $.high;
        this.low = $.low;
        this.timestamp = $.timestamp;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBaselineableMetricsEvaluateItemDataPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBaselineableMetricsEvaluateItemDataPointArgs $;

        public Builder() {
            $ = new GetBaselineableMetricsEvaluateItemDataPointArgs();
        }

        public Builder(GetBaselineableMetricsEvaluateItemDataPointArgs defaults) {
            $ = new GetBaselineableMetricsEvaluateItemDataPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param anomaly if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
         * 
         * @return builder
         * 
         */
        public Builder anomaly(@Nullable Output<Double> anomaly) {
            $.anomaly = anomaly;
            return this;
        }

        /**
         * @param anomaly if the value is anomaly or not 0 indicates not an anomaly -1 indicates value is below the threshold +1 indicates value is above the threshold
         * 
         * @return builder
         * 
         */
        public Builder anomaly(Double anomaly) {
            return anomaly(Output.of(anomaly));
        }

        /**
         * @param high upper threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder high(@Nullable Output<Double> high) {
            $.high = high;
            return this;
        }

        /**
         * @param high upper threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder high(Double high) {
            return high(Output.of(high));
        }

        /**
         * @param low lower threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder low(@Nullable Output<Double> low) {
            $.low = low;
            return this;
        }

        /**
         * @param low lower threshold for the metric value
         * 
         * @return builder
         * 
         */
        public Builder low(Double low) {
            return low(Output.of(low));
        }

        /**
         * @param timestamp timestamp of when the metric was collected
         * 
         * @return builder
         * 
         */
        public Builder timestamp(@Nullable Output<String> timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param timestamp timestamp of when the metric was collected
         * 
         * @return builder
         * 
         */
        public Builder timestamp(String timestamp) {
            return timestamp(Output.of(timestamp));
        }

        /**
         * @param value value for the metric data point
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value value for the metric data point
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public GetBaselineableMetricsEvaluateItemDataPointArgs build() {
            return $;
        }
    }

}
