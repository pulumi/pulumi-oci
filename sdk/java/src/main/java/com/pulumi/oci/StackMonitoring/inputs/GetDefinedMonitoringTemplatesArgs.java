// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.inputs.GetDefinedMonitoringTemplatesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDefinedMonitoringTemplatesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDefinedMonitoringTemplatesArgs Empty = new GetDefinedMonitoringTemplatesArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy(root) for which  defined monitored templates should be listed.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy(root) for which  defined monitored templates should be listed.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return monitoring template based on name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return monitoring template based on name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDefinedMonitoringTemplatesFilterArgs>> filters;

    public Optional<Output<List<GetDefinedMonitoringTemplatesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Multiple resource types filter.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<String>> resourceTypes;

    /**
     * @return Multiple resource types filter.
     * 
     */
    public Optional<Output<List<String>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    private GetDefinedMonitoringTemplatesArgs() {}

    private GetDefinedMonitoringTemplatesArgs(GetDefinedMonitoringTemplatesArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.resourceTypes = $.resourceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDefinedMonitoringTemplatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDefinedMonitoringTemplatesArgs $;

        public Builder() {
            $ = new GetDefinedMonitoringTemplatesArgs();
        }

        public Builder(GetDefinedMonitoringTemplatesArgs defaults) {
            $ = new GetDefinedMonitoringTemplatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy(root) for which  defined monitored templates should be listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy(root) for which  defined monitored templates should be listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return monitoring template based on name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return monitoring template based on name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetDefinedMonitoringTemplatesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDefinedMonitoringTemplatesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDefinedMonitoringTemplatesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param resourceTypes Multiple resource types filter.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Multiple resource types filter.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes Multiple resource types filter.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        public GetDefinedMonitoringTemplatesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDefinedMonitoringTemplatesArgs", "compartmentId");
            }
            return $;
        }
    }

}
