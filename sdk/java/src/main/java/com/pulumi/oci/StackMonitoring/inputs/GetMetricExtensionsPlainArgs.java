// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.StackMonitoring.inputs.GetMetricExtensionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetricExtensionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetricExtensionsPlainArgs Empty = new GetMetricExtensionsPlainArgs();

    /**
     * The ID of the compartment in which data is listed.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return metric extensions based on input resource Id on which metric extension is enabled
     * 
     */
    @Import(name="enabledOnResourceId")
    private @Nullable String enabledOnResourceId;

    /**
     * @return A filter to return metric extensions based on input resource Id on which metric extension is enabled
     * 
     */
    public Optional<String> enabledOnResourceId() {
        return Optional.ofNullable(this.enabledOnResourceId);
    }

    @Import(name="filters")
    private @Nullable List<GetMetricExtensionsFilter> filters;

    public Optional<List<GetMetricExtensionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Identifier for the metric extension
     * 
     */
    @Import(name="metricExtensionId")
    private @Nullable String metricExtensionId;

    /**
     * @return Identifier for the metric extension
     * 
     */
    public Optional<String> metricExtensionId() {
        return Optional.ofNullable(this.metricExtensionId);
    }

    /**
     * A filter to return resources based on name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return resources based on name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return resources based on resource type.
     * 
     */
    @Import(name="resourceType")
    private @Nullable String resourceType;

    /**
     * @return A filter to return resources based on resource type.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A filter to return metric extensions based on Lifecycle State
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return metric extensions based on Lifecycle State
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return resources based on status e.g. Draft or Published
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter to return resources based on status e.g. Draft or Published
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetMetricExtensionsPlainArgs() {}

    private GetMetricExtensionsPlainArgs(GetMetricExtensionsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.enabledOnResourceId = $.enabledOnResourceId;
        this.filters = $.filters;
        this.metricExtensionId = $.metricExtensionId;
        this.name = $.name;
        this.resourceType = $.resourceType;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetricExtensionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetricExtensionsPlainArgs $;

        public Builder() {
            $ = new GetMetricExtensionsPlainArgs();
        }

        public Builder(GetMetricExtensionsPlainArgs defaults) {
            $ = new GetMetricExtensionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which data is listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param enabledOnResourceId A filter to return metric extensions based on input resource Id on which metric extension is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabledOnResourceId(@Nullable String enabledOnResourceId) {
            $.enabledOnResourceId = enabledOnResourceId;
            return this;
        }

        public Builder filters(@Nullable List<GetMetricExtensionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMetricExtensionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param metricExtensionId Identifier for the metric extension
         * 
         * @return builder
         * 
         */
        public Builder metricExtensionId(@Nullable String metricExtensionId) {
            $.metricExtensionId = metricExtensionId;
            return this;
        }

        /**
         * @param name A filter to return resources based on name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceType A filter to return resources based on resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param state A filter to return metric extensions based on Lifecycle State
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param status A filter to return resources based on status e.g. Draft or Published
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetMetricExtensionsPlainArgs build() {
            return $;
        }
    }

}
