// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.inputs.GetMonitoredResourceTypesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMonitoredResourceTypesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMonitoredResourceTypesArgs Empty = new GetMonitoredResourceTypesArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy for which  monitored resource types should be listed.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy for which  monitored resource types should be listed.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs, to return all the information except the fields requested to be excluded (excludeFields) by the client. In this mechanism, the client sends the exclude field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to exlude and to return and should be a query string parameter called &#34;excludeFields&#34; of an array type, provide the values as enums, and use collectionFormat.
     * 
     */
    @Import(name="excludeFields")
    private @Nullable Output<List<String>> excludeFields;

    /**
     * @return Partial response refers to an optimization technique offered by the RESTful web APIs, to return all the information except the fields requested to be excluded (excludeFields) by the client. In this mechanism, the client sends the exclude field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to exlude and to return and should be a query string parameter called &#34;excludeFields&#34; of an array type, provide the values as enums, and use collectionFormat.
     * 
     */
    public Optional<Output<List<String>>> excludeFields() {
        return Optional.ofNullable(this.excludeFields);
    }

    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs, to return only the information (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to return and should be a query string parameter called &#34;fields&#34; of an array type, provide the values as enums, and use collectionFormat.
     * 
     * MonitoredResourceType Id, name and compartment will be added by default.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Partial response refers to an optimization technique offered by the RESTful web APIs, to return only the information (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to return and should be a query string parameter called &#34;fields&#34; of an array type, provide the values as enums, and use collectionFormat.
     * 
     * MonitoredResourceType Id, name and compartment will be added by default.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetMonitoredResourceTypesFilterArgs>> filters;

    public Optional<Output<List<GetMonitoredResourceTypesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to exclude system resource types. If set to true, system resource types will be excluded.
     * 
     */
    @Import(name="isExcludeSystemTypes")
    private @Nullable Output<Boolean> isExcludeSystemTypes;

    /**
     * @return A filter to exclude system resource types. If set to true, system resource types will be excluded.
     * 
     */
    public Optional<Output<Boolean>> isExcludeSystemTypes() {
        return Optional.ofNullable(this.isExcludeSystemTypes);
    }

    /**
     * A filter to return monitored resource types that has the matching namespace.
     * 
     */
    @Import(name="metricNamespace")
    private @Nullable Output<String> metricNamespace;

    /**
     * @return A filter to return monitored resource types that has the matching namespace.
     * 
     */
    public Optional<Output<String>> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }

    /**
     * A filter to return monitored resource types that match exactly with the resource type name given.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return monitored resource types that match exactly with the resource type name given.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only resources with matching resource category.
     * 
     */
    @Import(name="resourceCategory")
    private @Nullable Output<String> resourceCategory;

    /**
     * @return A filter to return only resources with matching resource category.
     * 
     */
    public Optional<Output<String>> resourceCategory() {
        return Optional.ofNullable(this.resourceCategory);
    }

    /**
     * A filter to return only resources with matching source type.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return A filter to return only resources with matching source type.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * A filter to return only resources that matches with lifecycleState given.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return A filter to return only resources that matches with lifecycleState given.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetMonitoredResourceTypesArgs() {}

    private GetMonitoredResourceTypesArgs(GetMonitoredResourceTypesArgs $) {
        this.compartmentId = $.compartmentId;
        this.excludeFields = $.excludeFields;
        this.fields = $.fields;
        this.filters = $.filters;
        this.isExcludeSystemTypes = $.isExcludeSystemTypes;
        this.metricNamespace = $.metricNamespace;
        this.name = $.name;
        this.resourceCategory = $.resourceCategory;
        this.sourceType = $.sourceType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMonitoredResourceTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMonitoredResourceTypesArgs $;

        public Builder() {
            $ = new GetMonitoredResourceTypesArgs();
        }

        public Builder(GetMonitoredResourceTypesArgs defaults) {
            $ = new GetMonitoredResourceTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy for which  monitored resource types should be listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy for which  monitored resource types should be listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param excludeFields Partial response refers to an optimization technique offered by the RESTful web APIs, to return all the information except the fields requested to be excluded (excludeFields) by the client. In this mechanism, the client sends the exclude field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to exlude and to return and should be a query string parameter called &#34;excludeFields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * @return builder
         * 
         */
        public Builder excludeFields(@Nullable Output<List<String>> excludeFields) {
            $.excludeFields = excludeFields;
            return this;
        }

        /**
         * @param excludeFields Partial response refers to an optimization technique offered by the RESTful web APIs, to return all the information except the fields requested to be excluded (excludeFields) by the client. In this mechanism, the client sends the exclude field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to exlude and to return and should be a query string parameter called &#34;excludeFields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * @return builder
         * 
         */
        public Builder excludeFields(List<String> excludeFields) {
            return excludeFields(Output.of(excludeFields));
        }

        /**
         * @param excludeFields Partial response refers to an optimization technique offered by the RESTful web APIs, to return all the information except the fields requested to be excluded (excludeFields) by the client. In this mechanism, the client sends the exclude field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to exlude and to return and should be a query string parameter called &#34;excludeFields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * @return builder
         * 
         */
        public Builder excludeFields(String... excludeFields) {
            return excludeFields(List.of(excludeFields));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs, to return only the information (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to return and should be a query string parameter called &#34;fields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * MonitoredResourceType Id, name and compartment will be added by default.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs, to return only the information (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to return and should be a query string parameter called &#34;fields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * MonitoredResourceType Id, name and compartment will be added by default.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Partial response refers to an optimization technique offered by the RESTful web APIs, to return only the information (fields) required by the client. In this mechanism, the client sends the required field names as the query parameters for an API to the server, and the server trims down the default response content by removing the fields that are not required by the client. The parameter controls which fields to return and should be a query string parameter called &#34;fields&#34; of an array type, provide the values as enums, and use collectionFormat.
         * 
         * MonitoredResourceType Id, name and compartment will be added by default.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetMonitoredResourceTypesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetMonitoredResourceTypesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetMonitoredResourceTypesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isExcludeSystemTypes A filter to exclude system resource types. If set to true, system resource types will be excluded.
         * 
         * @return builder
         * 
         */
        public Builder isExcludeSystemTypes(@Nullable Output<Boolean> isExcludeSystemTypes) {
            $.isExcludeSystemTypes = isExcludeSystemTypes;
            return this;
        }

        /**
         * @param isExcludeSystemTypes A filter to exclude system resource types. If set to true, system resource types will be excluded.
         * 
         * @return builder
         * 
         */
        public Builder isExcludeSystemTypes(Boolean isExcludeSystemTypes) {
            return isExcludeSystemTypes(Output.of(isExcludeSystemTypes));
        }

        /**
         * @param metricNamespace A filter to return monitored resource types that has the matching namespace.
         * 
         * @return builder
         * 
         */
        public Builder metricNamespace(@Nullable Output<String> metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        /**
         * @param metricNamespace A filter to return monitored resource types that has the matching namespace.
         * 
         * @return builder
         * 
         */
        public Builder metricNamespace(String metricNamespace) {
            return metricNamespace(Output.of(metricNamespace));
        }

        /**
         * @param name A filter to return monitored resource types that match exactly with the resource type name given.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return monitored resource types that match exactly with the resource type name given.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceCategory A filter to return only resources with matching resource category.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategory(@Nullable Output<String> resourceCategory) {
            $.resourceCategory = resourceCategory;
            return this;
        }

        /**
         * @param resourceCategory A filter to return only resources with matching resource category.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategory(String resourceCategory) {
            return resourceCategory(Output.of(resourceCategory));
        }

        /**
         * @param sourceType A filter to return only resources with matching source type.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType A filter to return only resources with matching source type.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param status A filter to return only resources that matches with lifecycleState given.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status A filter to return only resources that matches with lifecycleState given.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetMonitoredResourceTypesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetMonitoredResourceTypesArgs", "compartmentId");
            }
            return $;
        }
    }

}
