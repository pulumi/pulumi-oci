// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.StackMonitoring.inputs.GetMonitoringTemplatesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMonitoringTemplatesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMonitoringTemplatesPlainArgs Empty = new GetMonitoringTemplatesPlainArgs();

    /**
     * The ID of the compartment in which data is listed.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return monitoring template based on name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return monitoring template based on name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetMonitoringTemplatesFilter> filters;

    public Optional<List<GetMonitoringTemplatesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * metricName filter.
     * 
     */
    @Import(name="metricNames")
    private @Nullable List<String> metricNames;

    /**
     * @return metricName filter.
     * 
     */
    public Optional<List<String>> metricNames() {
        return Optional.ofNullable(this.metricNames);
    }

    /**
     * A filter to return monitoring template based on input monitoringTemplateId
     * 
     */
    @Import(name="monitoringTemplateId")
    private @Nullable String monitoringTemplateId;

    /**
     * @return A filter to return monitoring template based on input monitoringTemplateId
     * 
     */
    public Optional<String> monitoringTemplateId() {
        return Optional.ofNullable(this.monitoringTemplateId);
    }

    /**
     * namespace filter.
     * 
     */
    @Import(name="namespaces")
    private @Nullable List<String> namespaces;

    /**
     * @return namespace filter.
     * 
     */
    public Optional<List<String>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    /**
     * Multiple resource types filter.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable List<String> resourceTypes;

    /**
     * @return Multiple resource types filter.
     * 
     */
    public Optional<List<String>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    /**
     * A filter to return monitoring template based on Lifecycle State
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return monitoring template based on Lifecycle State
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return monitoring template based on input status
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter to return monitoring template based on input status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetMonitoringTemplatesPlainArgs() {}

    private GetMonitoringTemplatesPlainArgs(GetMonitoringTemplatesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.metricNames = $.metricNames;
        this.monitoringTemplateId = $.monitoringTemplateId;
        this.namespaces = $.namespaces;
        this.resourceTypes = $.resourceTypes;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMonitoringTemplatesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMonitoringTemplatesPlainArgs $;

        public Builder() {
            $ = new GetMonitoringTemplatesPlainArgs();
        }

        public Builder(GetMonitoringTemplatesPlainArgs defaults) {
            $ = new GetMonitoringTemplatesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which data is listed.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return monitoring template based on name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetMonitoringTemplatesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMonitoringTemplatesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param metricNames metricName filter.
         * 
         * @return builder
         * 
         */
        public Builder metricNames(@Nullable List<String> metricNames) {
            $.metricNames = metricNames;
            return this;
        }

        /**
         * @param metricNames metricName filter.
         * 
         * @return builder
         * 
         */
        public Builder metricNames(String... metricNames) {
            return metricNames(List.of(metricNames));
        }

        /**
         * @param monitoringTemplateId A filter to return monitoring template based on input monitoringTemplateId
         * 
         * @return builder
         * 
         */
        public Builder monitoringTemplateId(@Nullable String monitoringTemplateId) {
            $.monitoringTemplateId = monitoringTemplateId;
            return this;
        }

        /**
         * @param namespaces namespace filter.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable List<String> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces namespace filter.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        /**
         * @param resourceTypes Multiple resource types filter.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable List<String> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Multiple resource types filter.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        /**
         * @param state A filter to return monitoring template based on Lifecycle State
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param status A filter to return monitoring template based on input status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetMonitoringTemplatesPlainArgs build() {
            return $;
        }
    }

}
