// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricExtensionMetricListArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricExtensionMetricListArgs Empty = new MetricExtensionMetricListArgs();

    /**
     * (Updatable) Compute Expression to calculate the value of this metric
     * 
     */
    @Import(name="computeExpression")
    private @Nullable Output<String> computeExpression;

    /**
     * @return (Updatable) Compute Expression to calculate the value of this metric
     * 
     */
    public Optional<Output<String>> computeExpression() {
        return Optional.ofNullable(this.computeExpression);
    }

    /**
     * (Updatable) Data type of value of this metric
     * 
     */
    @Import(name="dataType", required=true)
    private Output<String> dataType;

    /**
     * @return (Updatable) Data type of value of this metric
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }

    /**
     * (Updatable) Display name of the metric.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Display name of the metric.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Current metric need to be included as dimension or not
     * 
     */
    @Import(name="isDimension")
    private @Nullable Output<Boolean> isDimension;

    /**
     * @return (Updatable) Current metric need to be included as dimension or not
     * 
     */
    public Optional<Output<Boolean>> isDimension() {
        return Optional.ofNullable(this.isDimension);
    }

    /**
     * (Updatable) Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    @Import(name="isHidden")
    private @Nullable Output<Boolean> isHidden;

    /**
     * @return (Updatable) Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    public Optional<Output<Boolean>> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }

    /**
     * (Updatable) Metric category
     * 
     */
    @Import(name="metricCategory")
    private @Nullable Output<String> metricCategory;

    /**
     * @return (Updatable) Metric category
     * 
     */
    public Optional<Output<String>> metricCategory() {
        return Optional.ofNullable(this.metricCategory);
    }

    /**
     * (Updatable) Name of the metric.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name of the metric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) Unit of metric value
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return (Updatable) Unit of metric value
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private MetricExtensionMetricListArgs() {}

    private MetricExtensionMetricListArgs(MetricExtensionMetricListArgs $) {
        this.computeExpression = $.computeExpression;
        this.dataType = $.dataType;
        this.displayName = $.displayName;
        this.isDimension = $.isDimension;
        this.isHidden = $.isHidden;
        this.metricCategory = $.metricCategory;
        this.name = $.name;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricExtensionMetricListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricExtensionMetricListArgs $;

        public Builder() {
            $ = new MetricExtensionMetricListArgs();
        }

        public Builder(MetricExtensionMetricListArgs defaults) {
            $ = new MetricExtensionMetricListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeExpression (Updatable) Compute Expression to calculate the value of this metric
         * 
         * @return builder
         * 
         */
        public Builder computeExpression(@Nullable Output<String> computeExpression) {
            $.computeExpression = computeExpression;
            return this;
        }

        /**
         * @param computeExpression (Updatable) Compute Expression to calculate the value of this metric
         * 
         * @return builder
         * 
         */
        public Builder computeExpression(String computeExpression) {
            return computeExpression(Output.of(computeExpression));
        }

        /**
         * @param dataType (Updatable) Data type of value of this metric
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType (Updatable) Data type of value of this metric
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param displayName (Updatable) Display name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Display name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isDimension (Updatable) Current metric need to be included as dimension or not
         * 
         * @return builder
         * 
         */
        public Builder isDimension(@Nullable Output<Boolean> isDimension) {
            $.isDimension = isDimension;
            return this;
        }

        /**
         * @param isDimension (Updatable) Current metric need to be included as dimension or not
         * 
         * @return builder
         * 
         */
        public Builder isDimension(Boolean isDimension) {
            return isDimension(Output.of(isDimension));
        }

        /**
         * @param isHidden (Updatable) Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
         * 
         * @return builder
         * 
         */
        public Builder isHidden(@Nullable Output<Boolean> isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        /**
         * @param isHidden (Updatable) Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Boolean isHidden) {
            return isHidden(Output.of(isHidden));
        }

        /**
         * @param metricCategory (Updatable) Metric category
         * 
         * @return builder
         * 
         */
        public Builder metricCategory(@Nullable Output<String> metricCategory) {
            $.metricCategory = metricCategory;
            return this;
        }

        /**
         * @param metricCategory (Updatable) Metric category
         * 
         * @return builder
         * 
         */
        public Builder metricCategory(String metricCategory) {
            return metricCategory(Output.of(metricCategory));
        }

        /**
         * @param name (Updatable) Name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param unit (Updatable) Unit of metric value
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit (Updatable) Unit of metric value
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public MetricExtensionMetricListArgs build() {
            if ($.dataType == null) {
                throw new MissingRequiredPropertyException("MetricExtensionMetricListArgs", "dataType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MetricExtensionMetricListArgs", "name");
            }
            return $;
        }
    }

}
