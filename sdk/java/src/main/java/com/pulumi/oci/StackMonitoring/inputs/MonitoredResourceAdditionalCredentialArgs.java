// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceAdditionalCredentialPropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceAdditionalCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceAdditionalCredentialArgs Empty = new MonitoredResourceAdditionalCredentialArgs();

    /**
     * (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED.
     * * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential.
     * * PLAINTEXT - The credential properties will have credentials in plain text format.
     * * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    @Import(name="credentialType")
    private @Nullable Output<String> credentialType;

    /**
     * @return (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED.
     * * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential.
     * * PLAINTEXT - The credential properties will have credentials in plain text format.
     * * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    public Optional<Output<String>> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }

    /**
     * (Updatable) The user-specified textual description of the credential.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The user-specified textual description of the credential.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The master key should be created in Oracle Cloud Infrastructure Vault owned by the client of this API.  The user should have permission to access the vault key.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return (Updatable) The master key should be created in Oracle Cloud Infrastructure Vault owned by the client of this API.  The user should have permission to access the vault key.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * (Updatable) The name of the credential, within the context of the source.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) The name of the credential, within the context of the source.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The credential properties list. Credential property values will be either  in plain text format or encrypted for encrypted credentials.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<MonitoredResourceAdditionalCredentialPropertyArgs>> properties;

    /**
     * @return (Updatable) The credential properties list. Credential property values will be either  in plain text format or encrypted for encrypted credentials.
     * 
     */
    public Optional<Output<List<MonitoredResourceAdditionalCredentialPropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * (Updatable) The source type and source name combination, delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return (Updatable) The source type and source name combination, delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * (Updatable) The type of the credential ( ex. JMXCreds,DBCreds).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Updatable) The type of the credential ( ex. JMXCreds,DBCreds).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private MonitoredResourceAdditionalCredentialArgs() {}

    private MonitoredResourceAdditionalCredentialArgs(MonitoredResourceAdditionalCredentialArgs $) {
        this.credentialType = $.credentialType;
        this.description = $.description;
        this.keyId = $.keyId;
        this.name = $.name;
        this.properties = $.properties;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceAdditionalCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceAdditionalCredentialArgs $;

        public Builder() {
            $ = new MonitoredResourceAdditionalCredentialArgs();
        }

        public Builder(MonitoredResourceAdditionalCredentialArgs defaults) {
            $ = new MonitoredResourceAdditionalCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED.
         * * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential.
         * * PLAINTEXT - The credential properties will have credentials in plain text format.
         * * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(@Nullable Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED.
         * * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential.
         * * PLAINTEXT - The credential properties will have credentials in plain text format.
         * * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param description (Updatable) The user-specified textual description of the credential.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The user-specified textual description of the credential.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param keyId (Updatable) The master key should be created in Oracle Cloud Infrastructure Vault owned by the client of this API.  The user should have permission to access the vault key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId (Updatable) The master key should be created in Oracle Cloud Infrastructure Vault owned by the client of this API.  The user should have permission to access the vault key.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param name (Updatable) The name of the credential, within the context of the source.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The name of the credential, within the context of the source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param properties (Updatable) The credential properties list. Credential property values will be either  in plain text format or encrypted for encrypted credentials.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<MonitoredResourceAdditionalCredentialPropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties (Updatable) The credential properties list. Credential property values will be either  in plain text format or encrypted for encrypted credentials.
         * 
         * @return builder
         * 
         */
        public Builder properties(List<MonitoredResourceAdditionalCredentialPropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties (Updatable) The credential properties list. Credential property values will be either  in plain text format or encrypted for encrypted credentials.
         * 
         * @return builder
         * 
         */
        public Builder properties(MonitoredResourceAdditionalCredentialPropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param source (Updatable) The source type and source name combination, delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source (Updatable) The source type and source name combination, delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param type (Updatable) The type of the credential ( ex. JMXCreds,DBCreds).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of the credential ( ex. JMXCreds,DBCreds).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MonitoredResourceAdditionalCredentialArgs build() {
            return $;
        }
    }

}
