// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceTaskTaskDetailsReceiverPropertiesArgs;
import com.pulumi.oci.StackMonitoring.inputs.MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceTaskTaskDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceTaskTaskDetailsArgs Empty = new MonitoredResourceTaskTaskDetailsArgs();

    /**
     * Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    @Import(name="availabilityProxyMetricCollectionInterval")
    private @Nullable Output<Integer> availabilityProxyMetricCollectionInterval;

    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    public Optional<Output<Integer>> availabilityProxyMetricCollectionInterval() {
        return Optional.ofNullable(this.availabilityProxyMetricCollectionInterval);
    }

    /**
     * List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionInterval&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    @Import(name="availabilityProxyMetrics")
    private @Nullable Output<List<String>> availabilityProxyMetrics;

    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionInterval&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    public Optional<Output<List<String>>> availabilityProxyMetrics() {
        return Optional.ofNullable(this.availabilityProxyMetrics);
    }

    /**
     * The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
     * 
     */
    @Import(name="consolePathPrefix")
    private @Nullable Output<String> consolePathPrefix;

    /**
     * @return The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
     * 
     */
    public Optional<Output<String>> consolePathPrefix() {
        return Optional.ofNullable(this.consolePathPrefix);
    }

    /**
     * The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
     * 
     */
    @Import(name="externalIdMapping")
    private @Nullable Output<String> externalIdMapping;

    /**
     * @return The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
     * 
     */
    public Optional<Output<String>> externalIdMapping() {
        return Optional.ofNullable(this.externalIdMapping);
    }

    /**
     * Type of the handler.
     * 
     */
    @Import(name="handlerType")
    private @Nullable Output<String> handlerType;

    /**
     * @return Type of the handler.
     * 
     */
    public Optional<Output<String>> handlerType() {
        return Optional.ofNullable(this.handlerType);
    }

    /**
     * True to enable the receiver and false to disable the receiver on the agent.
     * 
     */
    @Import(name="isEnable")
    private @Nullable Output<Boolean> isEnable;

    /**
     * @return True to enable the receiver and false to disable the receiver on the agent.
     * 
     */
    public Optional<Output<Boolean>> isEnable() {
        return Optional.ofNullable(this.isEnable);
    }

    /**
     * Lifecycle states of the external resource which reflects the status of the resource being up.
     * 
     */
    @Import(name="lifecycleStatusMappingsForUpStatuses")
    private @Nullable Output<List<String>> lifecycleStatusMappingsForUpStatuses;

    /**
     * @return Lifecycle states of the external resource which reflects the status of the resource being up.
     * 
     */
    public Optional<Output<List<String>>> lifecycleStatusMappingsForUpStatuses() {
        return Optional.ofNullable(this.lifecycleStatusMappingsForUpStatuses);
    }

    /**
     * Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Properties for agent receiver.
     * 
     */
    @Import(name="receiverProperties")
    private @Nullable Output<MonitoredResourceTaskTaskDetailsReceiverPropertiesArgs> receiverProperties;

    /**
     * @return Properties for agent receiver.
     * 
     */
    public Optional<Output<MonitoredResourceTaskTaskDetailsReceiverPropertiesArgs>> receiverProperties() {
        return Optional.ofNullable(this.receiverProperties);
    }

    /**
     * The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<String> resourceGroup;

    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    public Optional<Output<String>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     * The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
     * 
     */
    @Import(name="resourceNameFilter")
    private @Nullable Output<String> resourceNameFilter;

    /**
     * @return The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
     * 
     */
    public Optional<Output<String>> resourceNameFilter() {
        return Optional.ofNullable(this.resourceNameFilter);
    }

    /**
     * The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
     * 
     */
    @Import(name="resourceNameMapping")
    private @Nullable Output<String> resourceNameMapping;

    /**
     * @return The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
     * 
     */
    public Optional<Output<String>> resourceNameMapping() {
        return Optional.ofNullable(this.resourceNameMapping);
    }

    /**
     * The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
     * 
     */
    @Import(name="resourceTypeFilter")
    private @Nullable Output<String> resourceTypeFilter;

    /**
     * @return The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
     * 
     */
    public Optional<Output<String>> resourceTypeFilter() {
        return Optional.ofNullable(this.resourceTypeFilter);
    }

    /**
     * The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
     * 
     */
    @Import(name="resourceTypeMapping")
    private @Nullable Output<String> resourceTypeMapping;

    /**
     * @return The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
     * 
     */
    public Optional<Output<String>> resourceTypeMapping() {
        return Optional.ofNullable(this.resourceTypeMapping);
    }

    /**
     * A collection of resource type configuration details. User can provide  availability proxy metrics list for resource types along with the  telegraf/collectd handler configuration for the resource types.
     * 
     */
    @Import(name="resourceTypesConfigurations")
    private @Nullable Output<List<MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs>> resourceTypesConfigurations;

    /**
     * @return A collection of resource type configuration details. User can provide  availability proxy metrics list for resource types along with the  telegraf/collectd handler configuration for the resource types.
     * 
     */
    public Optional<Output<List<MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs>>> resourceTypesConfigurations() {
        return Optional.ofNullable(this.resourceTypesConfigurations);
    }

    /**
     * The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
     * 
     */
    @Import(name="serviceBaseUrl")
    private @Nullable Output<String> serviceBaseUrl;

    /**
     * @return The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
     * 
     */
    public Optional<Output<String>> serviceBaseUrl() {
        return Optional.ofNullable(this.serviceBaseUrl);
    }

    /**
     * Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
     * 
     */
    @Import(name="shouldUseMetricsFlowForStatus")
    private @Nullable Output<Boolean> shouldUseMetricsFlowForStatus;

    /**
     * @return Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
     * 
     */
    public Optional<Output<Boolean>> shouldUseMetricsFlowForStatus() {
        return Optional.ofNullable(this.shouldUseMetricsFlowForStatus);
    }

    /**
     * Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
     * * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
     * * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Task type.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Task type.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MonitoredResourceTaskTaskDetailsArgs() {}

    private MonitoredResourceTaskTaskDetailsArgs(MonitoredResourceTaskTaskDetailsArgs $) {
        this.agentId = $.agentId;
        this.availabilityProxyMetricCollectionInterval = $.availabilityProxyMetricCollectionInterval;
        this.availabilityProxyMetrics = $.availabilityProxyMetrics;
        this.consolePathPrefix = $.consolePathPrefix;
        this.externalIdMapping = $.externalIdMapping;
        this.handlerType = $.handlerType;
        this.isEnable = $.isEnable;
        this.lifecycleStatusMappingsForUpStatuses = $.lifecycleStatusMappingsForUpStatuses;
        this.namespace = $.namespace;
        this.receiverProperties = $.receiverProperties;
        this.resourceGroup = $.resourceGroup;
        this.resourceNameFilter = $.resourceNameFilter;
        this.resourceNameMapping = $.resourceNameMapping;
        this.resourceTypeFilter = $.resourceTypeFilter;
        this.resourceTypeMapping = $.resourceTypeMapping;
        this.resourceTypesConfigurations = $.resourceTypesConfigurations;
        this.serviceBaseUrl = $.serviceBaseUrl;
        this.shouldUseMetricsFlowForStatus = $.shouldUseMetricsFlowForStatus;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceTaskTaskDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceTaskTaskDetailsArgs $;

        public Builder() {
            $ = new MonitoredResourceTaskTaskDetailsArgs();
        }

        public Builder(MonitoredResourceTaskTaskDetailsArgs defaults) {
            $ = new MonitoredResourceTaskTaskDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param availabilityProxyMetricCollectionInterval Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetricCollectionInterval(@Nullable Output<Integer> availabilityProxyMetricCollectionInterval) {
            $.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            return this;
        }

        /**
         * @param availabilityProxyMetricCollectionInterval Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetricCollectionInterval(Integer availabilityProxyMetricCollectionInterval) {
            return availabilityProxyMetricCollectionInterval(Output.of(availabilityProxyMetricCollectionInterval));
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionInterval&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(@Nullable Output<List<String>> availabilityProxyMetrics) {
            $.availabilityProxyMetrics = availabilityProxyMetrics;
            return this;
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionInterval&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(List<String> availabilityProxyMetrics) {
            return availabilityProxyMetrics(Output.of(availabilityProxyMetrics));
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionInterval&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(String... availabilityProxyMetrics) {
            return availabilityProxyMetrics(List.of(availabilityProxyMetrics));
        }

        /**
         * @param consolePathPrefix The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
         * 
         * @return builder
         * 
         */
        public Builder consolePathPrefix(@Nullable Output<String> consolePathPrefix) {
            $.consolePathPrefix = consolePathPrefix;
            return this;
        }

        /**
         * @param consolePathPrefix The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
         * 
         * @return builder
         * 
         */
        public Builder consolePathPrefix(String consolePathPrefix) {
            return consolePathPrefix(Output.of(consolePathPrefix));
        }

        /**
         * @param externalIdMapping The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
         * 
         * @return builder
         * 
         */
        public Builder externalIdMapping(@Nullable Output<String> externalIdMapping) {
            $.externalIdMapping = externalIdMapping;
            return this;
        }

        /**
         * @param externalIdMapping The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
         * 
         * @return builder
         * 
         */
        public Builder externalIdMapping(String externalIdMapping) {
            return externalIdMapping(Output.of(externalIdMapping));
        }

        /**
         * @param handlerType Type of the handler.
         * 
         * @return builder
         * 
         */
        public Builder handlerType(@Nullable Output<String> handlerType) {
            $.handlerType = handlerType;
            return this;
        }

        /**
         * @param handlerType Type of the handler.
         * 
         * @return builder
         * 
         */
        public Builder handlerType(String handlerType) {
            return handlerType(Output.of(handlerType));
        }

        /**
         * @param isEnable True to enable the receiver and false to disable the receiver on the agent.
         * 
         * @return builder
         * 
         */
        public Builder isEnable(@Nullable Output<Boolean> isEnable) {
            $.isEnable = isEnable;
            return this;
        }

        /**
         * @param isEnable True to enable the receiver and false to disable the receiver on the agent.
         * 
         * @return builder
         * 
         */
        public Builder isEnable(Boolean isEnable) {
            return isEnable(Output.of(isEnable));
        }

        /**
         * @param lifecycleStatusMappingsForUpStatuses Lifecycle states of the external resource which reflects the status of the resource being up.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStatusMappingsForUpStatuses(@Nullable Output<List<String>> lifecycleStatusMappingsForUpStatuses) {
            $.lifecycleStatusMappingsForUpStatuses = lifecycleStatusMappingsForUpStatuses;
            return this;
        }

        /**
         * @param lifecycleStatusMappingsForUpStatuses Lifecycle states of the external resource which reflects the status of the resource being up.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStatusMappingsForUpStatuses(List<String> lifecycleStatusMappingsForUpStatuses) {
            return lifecycleStatusMappingsForUpStatuses(Output.of(lifecycleStatusMappingsForUpStatuses));
        }

        /**
         * @param lifecycleStatusMappingsForUpStatuses Lifecycle states of the external resource which reflects the status of the resource being up.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleStatusMappingsForUpStatuses(String... lifecycleStatusMappingsForUpStatuses) {
            return lifecycleStatusMappingsForUpStatuses(List.of(lifecycleStatusMappingsForUpStatuses));
        }

        /**
         * @param namespace Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param receiverProperties Properties for agent receiver.
         * 
         * @return builder
         * 
         */
        public Builder receiverProperties(@Nullable Output<MonitoredResourceTaskTaskDetailsReceiverPropertiesArgs> receiverProperties) {
            $.receiverProperties = receiverProperties;
            return this;
        }

        /**
         * @param receiverProperties Properties for agent receiver.
         * 
         * @return builder
         * 
         */
        public Builder receiverProperties(MonitoredResourceTaskTaskDetailsReceiverPropertiesArgs receiverProperties) {
            return receiverProperties(Output.of(receiverProperties));
        }

        /**
         * @param resourceGroup The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        /**
         * @param resourceNameFilter The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder resourceNameFilter(@Nullable Output<String> resourceNameFilter) {
            $.resourceNameFilter = resourceNameFilter;
            return this;
        }

        /**
         * @param resourceNameFilter The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder resourceNameFilter(String resourceNameFilter) {
            return resourceNameFilter(Output.of(resourceNameFilter));
        }

        /**
         * @param resourceNameMapping The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
         * 
         * @return builder
         * 
         */
        public Builder resourceNameMapping(@Nullable Output<String> resourceNameMapping) {
            $.resourceNameMapping = resourceNameMapping;
            return this;
        }

        /**
         * @param resourceNameMapping The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
         * 
         * @return builder
         * 
         */
        public Builder resourceNameMapping(String resourceNameMapping) {
            return resourceNameMapping(Output.of(resourceNameMapping));
        }

        /**
         * @param resourceTypeFilter The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeFilter(@Nullable Output<String> resourceTypeFilter) {
            $.resourceTypeFilter = resourceTypeFilter;
            return this;
        }

        /**
         * @param resourceTypeFilter The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeFilter(String resourceTypeFilter) {
            return resourceTypeFilter(Output.of(resourceTypeFilter));
        }

        /**
         * @param resourceTypeMapping The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeMapping(@Nullable Output<String> resourceTypeMapping) {
            $.resourceTypeMapping = resourceTypeMapping;
            return this;
        }

        /**
         * @param resourceTypeMapping The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypeMapping(String resourceTypeMapping) {
            return resourceTypeMapping(Output.of(resourceTypeMapping));
        }

        /**
         * @param resourceTypesConfigurations A collection of resource type configuration details. User can provide  availability proxy metrics list for resource types along with the  telegraf/collectd handler configuration for the resource types.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesConfigurations(@Nullable Output<List<MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs>> resourceTypesConfigurations) {
            $.resourceTypesConfigurations = resourceTypesConfigurations;
            return this;
        }

        /**
         * @param resourceTypesConfigurations A collection of resource type configuration details. User can provide  availability proxy metrics list for resource types along with the  telegraf/collectd handler configuration for the resource types.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesConfigurations(List<MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs> resourceTypesConfigurations) {
            return resourceTypesConfigurations(Output.of(resourceTypesConfigurations));
        }

        /**
         * @param resourceTypesConfigurations A collection of resource type configuration details. User can provide  availability proxy metrics list for resource types along with the  telegraf/collectd handler configuration for the resource types.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypesConfigurations(MonitoredResourceTaskTaskDetailsResourceTypesConfigurationArgs... resourceTypesConfigurations) {
            return resourceTypesConfigurations(List.of(resourceTypesConfigurations));
        }

        /**
         * @param serviceBaseUrl The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
         * 
         * @return builder
         * 
         */
        public Builder serviceBaseUrl(@Nullable Output<String> serviceBaseUrl) {
            $.serviceBaseUrl = serviceBaseUrl;
            return this;
        }

        /**
         * @param serviceBaseUrl The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
         * 
         * @return builder
         * 
         */
        public Builder serviceBaseUrl(String serviceBaseUrl) {
            return serviceBaseUrl(Output.of(serviceBaseUrl));
        }

        /**
         * @param shouldUseMetricsFlowForStatus Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseMetricsFlowForStatus(@Nullable Output<Boolean> shouldUseMetricsFlowForStatus) {
            $.shouldUseMetricsFlowForStatus = shouldUseMetricsFlowForStatus;
            return this;
        }

        /**
         * @param shouldUseMetricsFlowForStatus Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
         * 
         * @return builder
         * 
         */
        public Builder shouldUseMetricsFlowForStatus(Boolean shouldUseMetricsFlowForStatus) {
            return shouldUseMetricsFlowForStatus(Output.of(shouldUseMetricsFlowForStatus));
        }

        /**
         * @param source Source from where the metrics pushed to telemetry. Possible values:
         * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
         * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
         * * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
         * * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source from where the metrics pushed to telemetry. Possible values:
         * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
         * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
         * * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
         * * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param type Task type.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Task type.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MonitoredResourceTaskTaskDetailsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("MonitoredResourceTaskTaskDetailsArgs", "type");
            }
            return $;
        }
    }

}
