// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceTaskTaskDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceTaskTaskDetailsArgs Empty = new MonitoredResourceTaskTaskDetailsArgs();

    /**
     * Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    @Import(name="availabilityProxyMetricCollectionInterval")
    private @Nullable Output<Integer> availabilityProxyMetricCollectionInterval;

    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    public Optional<Output<Integer>> availabilityProxyMetricCollectionInterval() {
        return Optional.ofNullable(this.availabilityProxyMetricCollectionInterval);
    }

    /**
     * List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    @Import(name="availabilityProxyMetrics")
    private @Nullable Output<List<String>> availabilityProxyMetrics;

    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    public Optional<Output<List<String>>> availabilityProxyMetrics() {
        return Optional.ofNullable(this.availabilityProxyMetrics);
    }

    /**
     * Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<String> resourceGroup;

    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    public Optional<Output<String>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     * Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * Task type.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Task type.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MonitoredResourceTaskTaskDetailsArgs() {}

    private MonitoredResourceTaskTaskDetailsArgs(MonitoredResourceTaskTaskDetailsArgs $) {
        this.availabilityProxyMetricCollectionInterval = $.availabilityProxyMetricCollectionInterval;
        this.availabilityProxyMetrics = $.availabilityProxyMetrics;
        this.namespace = $.namespace;
        this.resourceGroup = $.resourceGroup;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceTaskTaskDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceTaskTaskDetailsArgs $;

        public Builder() {
            $ = new MonitoredResourceTaskTaskDetailsArgs();
        }

        public Builder(MonitoredResourceTaskTaskDetailsArgs defaults) {
            $ = new MonitoredResourceTaskTaskDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityProxyMetricCollectionInterval Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetricCollectionInterval(@Nullable Output<Integer> availabilityProxyMetricCollectionInterval) {
            $.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            return this;
        }

        /**
         * @param availabilityProxyMetricCollectionInterval Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetricCollectionInterval(Integer availabilityProxyMetricCollectionInterval) {
            return availabilityProxyMetricCollectionInterval(Output.of(availabilityProxyMetricCollectionInterval));
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(@Nullable Output<List<String>> availabilityProxyMetrics) {
            $.availabilityProxyMetrics = availabilityProxyMetrics;
            return this;
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(List<String> availabilityProxyMetrics) {
            return availabilityProxyMetrics(Output.of(availabilityProxyMetrics));
        }

        /**
         * @param availabilityProxyMetrics List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
         * 
         * @return builder
         * 
         */
        public Builder availabilityProxyMetrics(String... availabilityProxyMetrics) {
            return availabilityProxyMetrics(List.of(availabilityProxyMetrics));
        }

        /**
         * @param namespace Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceGroup The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        /**
         * @param source Source from where the metrics pushed to telemetry. Possible values:
         * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
         * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source from where the metrics pushed to telemetry. Possible values:
         * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
         * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param type Task type.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Task type.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MonitoredResourceTaskTaskDetailsArgs build() {
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("MonitoredResourceTaskTaskDetailsArgs", "namespace");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("MonitoredResourceTaskTaskDetailsArgs", "source");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("MonitoredResourceTaskTaskDetailsArgs", "type");
            }
            return $;
        }
    }

}
