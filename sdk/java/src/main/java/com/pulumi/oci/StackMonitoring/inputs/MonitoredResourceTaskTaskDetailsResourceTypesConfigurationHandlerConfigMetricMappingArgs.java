// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs Empty = new MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs();

    /**
     * Metric name as defined by the collector.
     * 
     */
    @Import(name="collectorMetricName")
    private @Nullable Output<String> collectorMetricName;

    /**
     * @return Metric name as defined by the collector.
     * 
     */
    public Optional<Output<String>> collectorMetricName() {
        return Optional.ofNullable(this.collectorMetricName);
    }

    /**
     * Is ignoring this metric.
     * 
     */
    @Import(name="isSkipUpload")
    private @Nullable Output<Boolean> isSkipUpload;

    /**
     * @return Is ignoring this metric.
     * 
     */
    public Optional<Output<Boolean>> isSkipUpload() {
        return Optional.ofNullable(this.isSkipUpload);
    }

    /**
     * Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    @Import(name="metricUploadIntervalInSeconds")
    private @Nullable Output<Integer> metricUploadIntervalInSeconds;

    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    public Optional<Output<Integer>> metricUploadIntervalInSeconds() {
        return Optional.ofNullable(this.metricUploadIntervalInSeconds);
    }

    /**
     * Metric name to be upload to telemetry.
     * 
     */
    @Import(name="telemetryMetricName")
    private @Nullable Output<String> telemetryMetricName;

    /**
     * @return Metric name to be upload to telemetry.
     * 
     */
    public Optional<Output<String>> telemetryMetricName() {
        return Optional.ofNullable(this.telemetryMetricName);
    }

    private MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs() {}

    private MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs(MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs $) {
        this.collectorMetricName = $.collectorMetricName;
        this.isSkipUpload = $.isSkipUpload;
        this.metricUploadIntervalInSeconds = $.metricUploadIntervalInSeconds;
        this.telemetryMetricName = $.telemetryMetricName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs $;

        public Builder() {
            $ = new MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs();
        }

        public Builder(MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs defaults) {
            $ = new MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectorMetricName Metric name as defined by the collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorMetricName(@Nullable Output<String> collectorMetricName) {
            $.collectorMetricName = collectorMetricName;
            return this;
        }

        /**
         * @param collectorMetricName Metric name as defined by the collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorMetricName(String collectorMetricName) {
            return collectorMetricName(Output.of(collectorMetricName));
        }

        /**
         * @param isSkipUpload Is ignoring this metric.
         * 
         * @return builder
         * 
         */
        public Builder isSkipUpload(@Nullable Output<Boolean> isSkipUpload) {
            $.isSkipUpload = isSkipUpload;
            return this;
        }

        /**
         * @param isSkipUpload Is ignoring this metric.
         * 
         * @return builder
         * 
         */
        public Builder isSkipUpload(Boolean isSkipUpload) {
            return isSkipUpload(Output.of(isSkipUpload));
        }

        /**
         * @param metricUploadIntervalInSeconds Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
         * 
         * @return builder
         * 
         */
        public Builder metricUploadIntervalInSeconds(@Nullable Output<Integer> metricUploadIntervalInSeconds) {
            $.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            return this;
        }

        /**
         * @param metricUploadIntervalInSeconds Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
         * 
         * @return builder
         * 
         */
        public Builder metricUploadIntervalInSeconds(Integer metricUploadIntervalInSeconds) {
            return metricUploadIntervalInSeconds(Output.of(metricUploadIntervalInSeconds));
        }

        /**
         * @param telemetryMetricName Metric name to be upload to telemetry.
         * 
         * @return builder
         * 
         */
        public Builder telemetryMetricName(@Nullable Output<String> telemetryMetricName) {
            $.telemetryMetricName = telemetryMetricName;
            return this;
        }

        /**
         * @param telemetryMetricName Metric name to be upload to telemetry.
         * 
         * @return builder
         * 
         */
        public Builder telemetryMetricName(String telemetryMetricName) {
            return telemetryMetricName(Output.of(telemetryMetricName));
        }

        public MonitoredResourceTaskTaskDetailsResourceTypesConfigurationHandlerConfigMetricMappingArgs build() {
            return $;
        }
    }

}
