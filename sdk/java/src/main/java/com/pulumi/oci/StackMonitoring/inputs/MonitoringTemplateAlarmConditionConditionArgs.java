// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitoringTemplateAlarmConditionConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitoringTemplateAlarmConditionConditionArgs Empty = new MonitoringTemplateAlarmConditionConditionArgs();

    /**
     * (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * (Updatable) Severity - Critical/Warning
     * 
     */
    @Import(name="severity", required=true)
    private Output<String> severity;

    /**
     * @return (Updatable) Severity - Critical/Warning
     * 
     */
    public Output<String> severity() {
        return this.severity;
    }

    /**
     * (Updatable) Whether the note need to add into bottom of the body for mapping the alarms information with template or not.
     * 
     */
    @Import(name="shouldAppendNote")
    private @Nullable Output<Boolean> shouldAppendNote;

    /**
     * @return (Updatable) Whether the note need to add into bottom of the body for mapping the alarms information with template or not.
     * 
     */
    public Optional<Output<Boolean>> shouldAppendNote() {
        return Optional.ofNullable(this.shouldAppendNote);
    }

    /**
     * (Updatable) Whether the URL need to add into bottom of the body for mapping the alarms information with template or not.
     * 
     */
    @Import(name="shouldAppendUrl")
    private @Nullable Output<Boolean> shouldAppendUrl;

    /**
     * @return (Updatable) Whether the URL need to add into bottom of the body for mapping the alarms information with template or not.
     * 
     */
    public Optional<Output<Boolean>> shouldAppendUrl() {
        return Optional.ofNullable(this.shouldAppendUrl);
    }

    /**
     * (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;.
     * 
     */
    @Import(name="triggerDelay")
    private @Nullable Output<String> triggerDelay;

    /**
     * @return (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;.
     * 
     */
    public Optional<Output<String>> triggerDelay() {
        return Optional.ofNullable(this.triggerDelay);
    }

    private MonitoringTemplateAlarmConditionConditionArgs() {}

    private MonitoringTemplateAlarmConditionConditionArgs(MonitoringTemplateAlarmConditionConditionArgs $) {
        this.body = $.body;
        this.query = $.query;
        this.severity = $.severity;
        this.shouldAppendNote = $.shouldAppendNote;
        this.shouldAppendUrl = $.shouldAppendUrl;
        this.triggerDelay = $.triggerDelay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoringTemplateAlarmConditionConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoringTemplateAlarmConditionConditionArgs $;

        public Builder() {
            $ = new MonitoringTemplateAlarmConditionConditionArgs();
        }

        public Builder(MonitoringTemplateAlarmConditionConditionArgs defaults) {
            $ = new MonitoringTemplateAlarmConditionConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param query (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param severity (Updatable) Severity - Critical/Warning
         * 
         * @return builder
         * 
         */
        public Builder severity(Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity (Updatable) Severity - Critical/Warning
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param shouldAppendNote (Updatable) Whether the note need to add into bottom of the body for mapping the alarms information with template or not.
         * 
         * @return builder
         * 
         */
        public Builder shouldAppendNote(@Nullable Output<Boolean> shouldAppendNote) {
            $.shouldAppendNote = shouldAppendNote;
            return this;
        }

        /**
         * @param shouldAppendNote (Updatable) Whether the note need to add into bottom of the body for mapping the alarms information with template or not.
         * 
         * @return builder
         * 
         */
        public Builder shouldAppendNote(Boolean shouldAppendNote) {
            return shouldAppendNote(Output.of(shouldAppendNote));
        }

        /**
         * @param shouldAppendUrl (Updatable) Whether the URL need to add into bottom of the body for mapping the alarms information with template or not.
         * 
         * @return builder
         * 
         */
        public Builder shouldAppendUrl(@Nullable Output<Boolean> shouldAppendUrl) {
            $.shouldAppendUrl = shouldAppendUrl;
            return this;
        }

        /**
         * @param shouldAppendUrl (Updatable) Whether the URL need to add into bottom of the body for mapping the alarms information with template or not.
         * 
         * @return builder
         * 
         */
        public Builder shouldAppendUrl(Boolean shouldAppendUrl) {
            return shouldAppendUrl(Output.of(shouldAppendUrl));
        }

        /**
         * @param triggerDelay (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;.
         * 
         * @return builder
         * 
         */
        public Builder triggerDelay(@Nullable Output<String> triggerDelay) {
            $.triggerDelay = triggerDelay;
            return this;
        }

        /**
         * @param triggerDelay (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34;.
         * 
         * @return builder
         * 
         */
        public Builder triggerDelay(String triggerDelay) {
            return triggerDelay(Output.of(triggerDelay));
        }

        public MonitoringTemplateAlarmConditionConditionArgs build() {
            if ($.query == null) {
                throw new MissingRequiredPropertyException("MonitoringTemplateAlarmConditionConditionArgs", "query");
            }
            if ($.severity == null) {
                throw new MissingRequiredPropertyException("MonitoringTemplateAlarmConditionConditionArgs", "severity");
            }
            return $;
        }
    }

}
