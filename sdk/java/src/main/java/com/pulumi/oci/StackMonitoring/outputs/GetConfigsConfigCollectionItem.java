// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetConfigsConfigCollectionItemAdditionalConfiguration;
import com.pulumi.oci.StackMonitoring.outputs.GetConfigsConfigCollectionItemDynamicGroup;
import com.pulumi.oci.StackMonitoring.outputs.GetConfigsConfigCollectionItemUserGroup;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConfigsConfigCollectionItem {
    /**
     * @return Property Details
     * 
     */
    private List<GetConfigsConfigCollectionItemAdditionalConfiguration> additionalConfigurations;
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    private String compartmentId;
    /**
     * @return The type of configuration.
     * 
     */
    private String configType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return List of dynamic groups dedicated for Stack Monitoring.
     * 
     */
    private List<GetConfigsConfigCollectionItemDynamicGroup> dynamicGroups;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The Unique Oracle ID (OCID) that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return True if automatic activation of the Management Agent plugin, automatic promotion or enterprise extensibility is enabled, false if it is not enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return True if customer decides marks configuration as manually configured.
     * 
     */
    private Boolean isManuallyOnboarded;
    /**
     * @return License edition.
     * 
     */
    private String license;
    /**
     * @return List of policy names assigned for onboarding
     * 
     */
    private List<String> policyNames;
    /**
     * @return The type of resource to configure for automatic promotion.
     * 
     */
    private String resourceType;
    /**
     * @return The current state of the Config.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the configuration was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Config was updated.
     * 
     */
    private String timeUpdated;
    /**
     * @return List of user groups dedicated for Stack Monitoring.
     * 
     */
    private List<GetConfigsConfigCollectionItemUserGroup> userGroups;
    /**
     * @return Assigned version to given onboard configuration.
     * 
     */
    private String version;

    private GetConfigsConfigCollectionItem() {}
    /**
     * @return Property Details
     * 
     */
    public List<GetConfigsConfigCollectionItemAdditionalConfiguration> additionalConfigurations() {
        return this.additionalConfigurations;
    }
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of configuration.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return List of dynamic groups dedicated for Stack Monitoring.
     * 
     */
    public List<GetConfigsConfigCollectionItemDynamicGroup> dynamicGroups() {
        return this.dynamicGroups;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The Unique Oracle ID (OCID) that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if automatic activation of the Management Agent plugin, automatic promotion or enterprise extensibility is enabled, false if it is not enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return True if customer decides marks configuration as manually configured.
     * 
     */
    public Boolean isManuallyOnboarded() {
        return this.isManuallyOnboarded;
    }
    /**
     * @return License edition.
     * 
     */
    public String license() {
        return this.license;
    }
    /**
     * @return List of policy names assigned for onboarding
     * 
     */
    public List<String> policyNames() {
        return this.policyNames;
    }
    /**
     * @return The type of resource to configure for automatic promotion.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The current state of the Config.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the configuration was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Config was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return List of user groups dedicated for Stack Monitoring.
     * 
     */
    public List<GetConfigsConfigCollectionItemUserGroup> userGroups() {
        return this.userGroups;
    }
    /**
     * @return Assigned version to given onboard configuration.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigsConfigCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConfigsConfigCollectionItemAdditionalConfiguration> additionalConfigurations;
        private String compartmentId;
        private String configType;
        private Map<String,String> definedTags;
        private String displayName;
        private List<GetConfigsConfigCollectionItemDynamicGroup> dynamicGroups;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isEnabled;
        private Boolean isManuallyOnboarded;
        private String license;
        private List<String> policyNames;
        private String resourceType;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private List<GetConfigsConfigCollectionItemUserGroup> userGroups;
        private String version;
        public Builder() {}
        public Builder(GetConfigsConfigCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalConfigurations = defaults.additionalConfigurations;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configType = defaults.configType;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dynamicGroups = defaults.dynamicGroups;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isManuallyOnboarded = defaults.isManuallyOnboarded;
    	      this.license = defaults.license;
    	      this.policyNames = defaults.policyNames;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.userGroups = defaults.userGroups;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalConfigurations(List<GetConfigsConfigCollectionItemAdditionalConfiguration> additionalConfigurations) {
            if (additionalConfigurations == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "additionalConfigurations");
            }
            this.additionalConfigurations = additionalConfigurations;
            return this;
        }
        public Builder additionalConfigurations(GetConfigsConfigCollectionItemAdditionalConfiguration... additionalConfigurations) {
            return additionalConfigurations(List.of(additionalConfigurations));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicGroups(List<GetConfigsConfigCollectionItemDynamicGroup> dynamicGroups) {
            if (dynamicGroups == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "dynamicGroups");
            }
            this.dynamicGroups = dynamicGroups;
            return this;
        }
        public Builder dynamicGroups(GetConfigsConfigCollectionItemDynamicGroup... dynamicGroups) {
            return dynamicGroups(List.of(dynamicGroups));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isManuallyOnboarded(Boolean isManuallyOnboarded) {
            if (isManuallyOnboarded == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "isManuallyOnboarded");
            }
            this.isManuallyOnboarded = isManuallyOnboarded;
            return this;
        }
        @CustomType.Setter
        public Builder license(String license) {
            if (license == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "license");
            }
            this.license = license;
            return this;
        }
        @CustomType.Setter
        public Builder policyNames(List<String> policyNames) {
            if (policyNames == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "policyNames");
            }
            this.policyNames = policyNames;
            return this;
        }
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder userGroups(List<GetConfigsConfigCollectionItemUserGroup> userGroups) {
            if (userGroups == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "userGroups");
            }
            this.userGroups = userGroups;
            return this;
        }
        public Builder userGroups(GetConfigsConfigCollectionItemUserGroup... userGroups) {
            return userGroups(List.of(userGroups));
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetConfigsConfigCollectionItem build() {
            final var _resultValue = new GetConfigsConfigCollectionItem();
            _resultValue.additionalConfigurations = additionalConfigurations;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configType = configType;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.dynamicGroups = dynamicGroups;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isEnabled = isEnabled;
            _resultValue.isManuallyOnboarded = isManuallyOnboarded;
            _resultValue.license = license;
            _resultValue.policyNames = policyNames;
            _resultValue.resourceType = resourceType;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.userGroups = userGroups;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
