// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMetricExtensionMetricList {
    /**
     * @return Compute Expression to calculate the value of this metric
     * 
     */
    private String computeExpression;
    /**
     * @return Data type of value of this metric
     * 
     */
    private String dataType;
    /**
     * @return Display name of the metric.
     * 
     */
    private String displayName;
    /**
     * @return Current metric need to be included as dimension or not
     * 
     */
    private Boolean isDimension;
    /**
     * @return Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    private Boolean isHidden;
    /**
     * @return Metric category
     * 
     */
    private String metricCategory;
    /**
     * @return Name of the script file
     * 
     */
    private String name;
    /**
     * @return Unit of metric value
     * 
     */
    private String unit;

    private GetMetricExtensionMetricList() {}
    /**
     * @return Compute Expression to calculate the value of this metric
     * 
     */
    public String computeExpression() {
        return this.computeExpression;
    }
    /**
     * @return Data type of value of this metric
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Display name of the metric.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Current metric need to be included as dimension or not
     * 
     */
    public Boolean isDimension() {
        return this.isDimension;
    }
    /**
     * @return Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    public Boolean isHidden() {
        return this.isHidden;
    }
    /**
     * @return Metric category
     * 
     */
    public String metricCategory() {
        return this.metricCategory;
    }
    /**
     * @return Name of the script file
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unit of metric value
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricExtensionMetricList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String computeExpression;
        private String dataType;
        private String displayName;
        private Boolean isDimension;
        private Boolean isHidden;
        private String metricCategory;
        private String name;
        private String unit;
        public Builder() {}
        public Builder(GetMetricExtensionMetricList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeExpression = defaults.computeExpression;
    	      this.dataType = defaults.dataType;
    	      this.displayName = defaults.displayName;
    	      this.isDimension = defaults.isDimension;
    	      this.isHidden = defaults.isHidden;
    	      this.metricCategory = defaults.metricCategory;
    	      this.name = defaults.name;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder computeExpression(String computeExpression) {
            this.computeExpression = Objects.requireNonNull(computeExpression);
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            this.dataType = Objects.requireNonNull(dataType);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder isDimension(Boolean isDimension) {
            this.isDimension = Objects.requireNonNull(isDimension);
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(Boolean isHidden) {
            this.isHidden = Objects.requireNonNull(isHidden);
            return this;
        }
        @CustomType.Setter
        public Builder metricCategory(String metricCategory) {
            this.metricCategory = Objects.requireNonNull(metricCategory);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            this.unit = Objects.requireNonNull(unit);
            return this;
        }
        public GetMetricExtensionMetricList build() {
            final var o = new GetMetricExtensionMetricList();
            o.computeExpression = computeExpression;
            o.dataType = dataType;
            o.displayName = displayName;
            o.isDimension = isDimension;
            o.isHidden = isHidden;
            o.metricCategory = metricCategory;
            o.name = name;
            o.unit = unit;
            return o;
        }
    }
}
