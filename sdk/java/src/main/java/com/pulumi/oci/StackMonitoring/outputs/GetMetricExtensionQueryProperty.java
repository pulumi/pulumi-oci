// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionQueryPropertyInParamDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionQueryPropertyOutParamDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionQueryPropertyScriptDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionQueryPropertySqlDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMetricExtensionQueryProperty {
    /**
     * @return Arguments required by either command or script
     * 
     */
    private String arguments;
    /**
     * @return Prefix for an auto generated metric, in case multiple rows with non unique key values are returned
     * 
     */
    private String autoRowPrefix;
    /**
     * @return Type of possible collection methods.
     * 
     */
    private String collectionMethod;
    /**
     * @return OS command to execute without arguments
     * 
     */
    private String command;
    /**
     * @return Character used to delimit multiple metric values in single line of output
     * 
     */
    private String delimiter;
    /**
     * @return Semi-colon separated list of key properties from Managed Bean ObjectName to be used as key metrics
     * 
     */
    private String identityMetric;
    /**
     * @return List of values and position of PL/SQL procedure IN parameters
     * 
     */
    private List<GetMetricExtensionQueryPropertyInParamDetail> inParamDetails;
    /**
     * @return Indicates if Metric Service is enabled on server domain
     * 
     */
    private Boolean isMetricServiceEnabled;
    /**
     * @return List of JMX attributes or Metric Service Table columns separated by semi-colon
     * 
     */
    private String jmxAttributes;
    /**
     * @return JMX Managed Bean Query or Metric Service Table name
     * 
     */
    private String managedBeanQuery;
    /**
     * @return Position and SQL Type of PL/SQL OUT parameter
     * 
     */
    private List<GetMetricExtensionQueryPropertyOutParamDetail> outParamDetails;
    /**
     * @return Script details applicable to any OS Command based Metric Extension which needs to run a script to collect data
     * 
     */
    private List<GetMetricExtensionQueryPropertyScriptDetail> scriptDetails;
    /**
     * @return Details of Sql content which needs to execute to collect Metric Extension data
     * 
     */
    private List<GetMetricExtensionQueryPropertySqlDetail> sqlDetails;
    /**
     * @return Type of SQL data collection method i.e. either a Statement or SQL Script File
     * 
     */
    private String sqlType;
    /**
     * @return String prefix used to identify metric output of the OS Command
     * 
     */
    private String startsWith;

    private GetMetricExtensionQueryProperty() {}
    /**
     * @return Arguments required by either command or script
     * 
     */
    public String arguments() {
        return this.arguments;
    }
    /**
     * @return Prefix for an auto generated metric, in case multiple rows with non unique key values are returned
     * 
     */
    public String autoRowPrefix() {
        return this.autoRowPrefix;
    }
    /**
     * @return Type of possible collection methods.
     * 
     */
    public String collectionMethod() {
        return this.collectionMethod;
    }
    /**
     * @return OS command to execute without arguments
     * 
     */
    public String command() {
        return this.command;
    }
    /**
     * @return Character used to delimit multiple metric values in single line of output
     * 
     */
    public String delimiter() {
        return this.delimiter;
    }
    /**
     * @return Semi-colon separated list of key properties from Managed Bean ObjectName to be used as key metrics
     * 
     */
    public String identityMetric() {
        return this.identityMetric;
    }
    /**
     * @return List of values and position of PL/SQL procedure IN parameters
     * 
     */
    public List<GetMetricExtensionQueryPropertyInParamDetail> inParamDetails() {
        return this.inParamDetails;
    }
    /**
     * @return Indicates if Metric Service is enabled on server domain
     * 
     */
    public Boolean isMetricServiceEnabled() {
        return this.isMetricServiceEnabled;
    }
    /**
     * @return List of JMX attributes or Metric Service Table columns separated by semi-colon
     * 
     */
    public String jmxAttributes() {
        return this.jmxAttributes;
    }
    /**
     * @return JMX Managed Bean Query or Metric Service Table name
     * 
     */
    public String managedBeanQuery() {
        return this.managedBeanQuery;
    }
    /**
     * @return Position and SQL Type of PL/SQL OUT parameter
     * 
     */
    public List<GetMetricExtensionQueryPropertyOutParamDetail> outParamDetails() {
        return this.outParamDetails;
    }
    /**
     * @return Script details applicable to any OS Command based Metric Extension which needs to run a script to collect data
     * 
     */
    public List<GetMetricExtensionQueryPropertyScriptDetail> scriptDetails() {
        return this.scriptDetails;
    }
    /**
     * @return Details of Sql content which needs to execute to collect Metric Extension data
     * 
     */
    public List<GetMetricExtensionQueryPropertySqlDetail> sqlDetails() {
        return this.sqlDetails;
    }
    /**
     * @return Type of SQL data collection method i.e. either a Statement or SQL Script File
     * 
     */
    public String sqlType() {
        return this.sqlType;
    }
    /**
     * @return String prefix used to identify metric output of the OS Command
     * 
     */
    public String startsWith() {
        return this.startsWith;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricExtensionQueryProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arguments;
        private String autoRowPrefix;
        private String collectionMethod;
        private String command;
        private String delimiter;
        private String identityMetric;
        private List<GetMetricExtensionQueryPropertyInParamDetail> inParamDetails;
        private Boolean isMetricServiceEnabled;
        private String jmxAttributes;
        private String managedBeanQuery;
        private List<GetMetricExtensionQueryPropertyOutParamDetail> outParamDetails;
        private List<GetMetricExtensionQueryPropertyScriptDetail> scriptDetails;
        private List<GetMetricExtensionQueryPropertySqlDetail> sqlDetails;
        private String sqlType;
        private String startsWith;
        public Builder() {}
        public Builder(GetMetricExtensionQueryProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.autoRowPrefix = defaults.autoRowPrefix;
    	      this.collectionMethod = defaults.collectionMethod;
    	      this.command = defaults.command;
    	      this.delimiter = defaults.delimiter;
    	      this.identityMetric = defaults.identityMetric;
    	      this.inParamDetails = defaults.inParamDetails;
    	      this.isMetricServiceEnabled = defaults.isMetricServiceEnabled;
    	      this.jmxAttributes = defaults.jmxAttributes;
    	      this.managedBeanQuery = defaults.managedBeanQuery;
    	      this.outParamDetails = defaults.outParamDetails;
    	      this.scriptDetails = defaults.scriptDetails;
    	      this.sqlDetails = defaults.sqlDetails;
    	      this.sqlType = defaults.sqlType;
    	      this.startsWith = defaults.startsWith;
        }

        @CustomType.Setter
        public Builder arguments(String arguments) {
            this.arguments = Objects.requireNonNull(arguments);
            return this;
        }
        @CustomType.Setter
        public Builder autoRowPrefix(String autoRowPrefix) {
            this.autoRowPrefix = Objects.requireNonNull(autoRowPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder collectionMethod(String collectionMethod) {
            this.collectionMethod = Objects.requireNonNull(collectionMethod);
            return this;
        }
        @CustomType.Setter
        public Builder command(String command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(String delimiter) {
            this.delimiter = Objects.requireNonNull(delimiter);
            return this;
        }
        @CustomType.Setter
        public Builder identityMetric(String identityMetric) {
            this.identityMetric = Objects.requireNonNull(identityMetric);
            return this;
        }
        @CustomType.Setter
        public Builder inParamDetails(List<GetMetricExtensionQueryPropertyInParamDetail> inParamDetails) {
            this.inParamDetails = Objects.requireNonNull(inParamDetails);
            return this;
        }
        public Builder inParamDetails(GetMetricExtensionQueryPropertyInParamDetail... inParamDetails) {
            return inParamDetails(List.of(inParamDetails));
        }
        @CustomType.Setter
        public Builder isMetricServiceEnabled(Boolean isMetricServiceEnabled) {
            this.isMetricServiceEnabled = Objects.requireNonNull(isMetricServiceEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder jmxAttributes(String jmxAttributes) {
            this.jmxAttributes = Objects.requireNonNull(jmxAttributes);
            return this;
        }
        @CustomType.Setter
        public Builder managedBeanQuery(String managedBeanQuery) {
            this.managedBeanQuery = Objects.requireNonNull(managedBeanQuery);
            return this;
        }
        @CustomType.Setter
        public Builder outParamDetails(List<GetMetricExtensionQueryPropertyOutParamDetail> outParamDetails) {
            this.outParamDetails = Objects.requireNonNull(outParamDetails);
            return this;
        }
        public Builder outParamDetails(GetMetricExtensionQueryPropertyOutParamDetail... outParamDetails) {
            return outParamDetails(List.of(outParamDetails));
        }
        @CustomType.Setter
        public Builder scriptDetails(List<GetMetricExtensionQueryPropertyScriptDetail> scriptDetails) {
            this.scriptDetails = Objects.requireNonNull(scriptDetails);
            return this;
        }
        public Builder scriptDetails(GetMetricExtensionQueryPropertyScriptDetail... scriptDetails) {
            return scriptDetails(List.of(scriptDetails));
        }
        @CustomType.Setter
        public Builder sqlDetails(List<GetMetricExtensionQueryPropertySqlDetail> sqlDetails) {
            this.sqlDetails = Objects.requireNonNull(sqlDetails);
            return this;
        }
        public Builder sqlDetails(GetMetricExtensionQueryPropertySqlDetail... sqlDetails) {
            return sqlDetails(List.of(sqlDetails));
        }
        @CustomType.Setter
        public Builder sqlType(String sqlType) {
            this.sqlType = Objects.requireNonNull(sqlType);
            return this;
        }
        @CustomType.Setter
        public Builder startsWith(String startsWith) {
            this.startsWith = Objects.requireNonNull(startsWith);
            return this;
        }
        public GetMetricExtensionQueryProperty build() {
            final var o = new GetMetricExtensionQueryProperty();
            o.arguments = arguments;
            o.autoRowPrefix = autoRowPrefix;
            o.collectionMethod = collectionMethod;
            o.command = command;
            o.delimiter = delimiter;
            o.identityMetric = identityMetric;
            o.inParamDetails = inParamDetails;
            o.isMetricServiceEnabled = isMetricServiceEnabled;
            o.jmxAttributes = jmxAttributes;
            o.managedBeanQuery = managedBeanQuery;
            o.outParamDetails = outParamDetails;
            o.scriptDetails = scriptDetails;
            o.sqlDetails = sqlDetails;
            o.sqlType = sqlType;
            o.startsWith = startsWith;
            return o;
        }
    }
}
