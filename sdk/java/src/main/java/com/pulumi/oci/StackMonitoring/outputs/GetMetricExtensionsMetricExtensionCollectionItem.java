// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemMetricList;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryProperty;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMetricExtensionsMetricExtensionCollectionItem {
    /**
     * @return Type of possible collection methods.
     * 
     */
    private String collectionMethod;
    /**
     * @return Schedule of metric extension should use RFC 5545 format &gt; recur-rule-part = &#34;FREQ&#34;;&#34;INTERVAL&#34; where FREQ rule part identifies the type of recurrence rule. Valid values are &#34;MINUTELY&#34;,&#34;HOURLY&#34;,&#34;DAILY&#34; to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
     * 
     */
    private String collectionRecurrences;
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    private String compartmentId;
    /**
     * @return Created by user
     * 
     */
    private String createdBy;
    /**
     * @return Description of the metric extension.
     * 
     */
    private String description;
    /**
     * @return Display name of the metric.
     * 
     */
    private String displayName;
    /**
     * @return List of resource details objects having resourceIds on which this metric extension is enabled.
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource> enabledOnResources;
    /**
     * @return Count of resources on which this metric extension is enabled.
     * 
     */
    private Integer enabledOnResourcesCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Metric Extension resource
     * 
     */
    private String id;
    /**
     * @return Last updated by user
     * 
     */
    private String lastUpdatedBy;
    /**
     * @return List of metrics which are part of this metric extension
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemMetricList> metricLists;
    /**
     * @return A filter to return resources based on name.
     * 
     */
    private String name;
    private Boolean publishTrigger;
    /**
     * @return Collection method and query properties details of metric extension
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemQueryProperty> queryProperties;
    /**
     * @return A filter to return resources based on resource type.
     * 
     */
    private String resourceType;
    /**
     * @return The URI path that the user can do a GET on to access the metric extension metadata
     * 
     */
    private String resourceUri;
    /**
     * @return A filter to return metric extensions based on Lifecycle State
     * 
     */
    private String state;
    /**
     * @return A filter to return resources based on status e.g. Draft or Published
     * 
     */
    private String status;
    /**
     * @return Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String tenantId;
    /**
     * @return Metric Extension creation time. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Metric Extension update time. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetMetricExtensionsMetricExtensionCollectionItem() {}
    /**
     * @return Type of possible collection methods.
     * 
     */
    public String collectionMethod() {
        return this.collectionMethod;
    }
    /**
     * @return Schedule of metric extension should use RFC 5545 format &gt; recur-rule-part = &#34;FREQ&#34;;&#34;INTERVAL&#34; where FREQ rule part identifies the type of recurrence rule. Valid values are &#34;MINUTELY&#34;,&#34;HOURLY&#34;,&#34;DAILY&#34; to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
     * 
     */
    public String collectionRecurrences() {
        return this.collectionRecurrences;
    }
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Created by user
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Description of the metric extension.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Display name of the metric.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return List of resource details objects having resourceIds on which this metric extension is enabled.
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource> enabledOnResources() {
        return this.enabledOnResources;
    }
    /**
     * @return Count of resources on which this metric extension is enabled.
     * 
     */
    public Integer enabledOnResourcesCount() {
        return this.enabledOnResourcesCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Metric Extension resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Last updated by user
     * 
     */
    public String lastUpdatedBy() {
        return this.lastUpdatedBy;
    }
    /**
     * @return List of metrics which are part of this metric extension
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemMetricList> metricLists() {
        return this.metricLists;
    }
    /**
     * @return A filter to return resources based on name.
     * 
     */
    public String name() {
        return this.name;
    }
    public Boolean publishTrigger() {
        return this.publishTrigger;
    }
    /**
     * @return Collection method and query properties details of metric extension
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemQueryProperty> queryProperties() {
        return this.queryProperties;
    }
    /**
     * @return A filter to return resources based on resource type.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The URI path that the user can do a GET on to access the metric extension metadata
     * 
     */
    public String resourceUri() {
        return this.resourceUri;
    }
    /**
     * @return A filter to return metric extensions based on Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A filter to return resources based on status e.g. Draft or Published
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return Metric Extension creation time. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Metric Extension update time. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricExtensionsMetricExtensionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collectionMethod;
        private String collectionRecurrences;
        private String compartmentId;
        private String createdBy;
        private String description;
        private String displayName;
        private List<GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource> enabledOnResources;
        private Integer enabledOnResourcesCount;
        private String id;
        private String lastUpdatedBy;
        private List<GetMetricExtensionsMetricExtensionCollectionItemMetricList> metricLists;
        private String name;
        private Boolean publishTrigger;
        private List<GetMetricExtensionsMetricExtensionCollectionItemQueryProperty> queryProperties;
        private String resourceType;
        private String resourceUri;
        private String state;
        private String status;
        private String tenantId;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetMetricExtensionsMetricExtensionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionMethod = defaults.collectionMethod;
    	      this.collectionRecurrences = defaults.collectionRecurrences;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enabledOnResources = defaults.enabledOnResources;
    	      this.enabledOnResourcesCount = defaults.enabledOnResourcesCount;
    	      this.id = defaults.id;
    	      this.lastUpdatedBy = defaults.lastUpdatedBy;
    	      this.metricLists = defaults.metricLists;
    	      this.name = defaults.name;
    	      this.publishTrigger = defaults.publishTrigger;
    	      this.queryProperties = defaults.queryProperties;
    	      this.resourceType = defaults.resourceType;
    	      this.resourceUri = defaults.resourceUri;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.tenantId = defaults.tenantId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder collectionMethod(String collectionMethod) {
            if (collectionMethod == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "collectionMethod");
            }
            this.collectionMethod = collectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder collectionRecurrences(String collectionRecurrences) {
            if (collectionRecurrences == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "collectionRecurrences");
            }
            this.collectionRecurrences = collectionRecurrences;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder enabledOnResources(List<GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource> enabledOnResources) {
            if (enabledOnResources == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "enabledOnResources");
            }
            this.enabledOnResources = enabledOnResources;
            return this;
        }
        public Builder enabledOnResources(GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResource... enabledOnResources) {
            return enabledOnResources(List.of(enabledOnResources));
        }
        @CustomType.Setter
        public Builder enabledOnResourcesCount(Integer enabledOnResourcesCount) {
            if (enabledOnResourcesCount == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "enabledOnResourcesCount");
            }
            this.enabledOnResourcesCount = enabledOnResourcesCount;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            if (lastUpdatedBy == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "lastUpdatedBy");
            }
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder metricLists(List<GetMetricExtensionsMetricExtensionCollectionItemMetricList> metricLists) {
            if (metricLists == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "metricLists");
            }
            this.metricLists = metricLists;
            return this;
        }
        public Builder metricLists(GetMetricExtensionsMetricExtensionCollectionItemMetricList... metricLists) {
            return metricLists(List.of(metricLists));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publishTrigger(Boolean publishTrigger) {
            if (publishTrigger == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "publishTrigger");
            }
            this.publishTrigger = publishTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder queryProperties(List<GetMetricExtensionsMetricExtensionCollectionItemQueryProperty> queryProperties) {
            if (queryProperties == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "queryProperties");
            }
            this.queryProperties = queryProperties;
            return this;
        }
        public Builder queryProperties(GetMetricExtensionsMetricExtensionCollectionItemQueryProperty... queryProperties) {
            return queryProperties(List.of(queryProperties));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUri(String resourceUri) {
            if (resourceUri == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "resourceUri");
            }
            this.resourceUri = resourceUri;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMetricExtensionsMetricExtensionCollectionItem build() {
            final var _resultValue = new GetMetricExtensionsMetricExtensionCollectionItem();
            _resultValue.collectionMethod = collectionMethod;
            _resultValue.collectionRecurrences = collectionRecurrences;
            _resultValue.compartmentId = compartmentId;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.enabledOnResources = enabledOnResources;
            _resultValue.enabledOnResourcesCount = enabledOnResourcesCount;
            _resultValue.id = id;
            _resultValue.lastUpdatedBy = lastUpdatedBy;
            _resultValue.metricLists = metricLists;
            _resultValue.name = name;
            _resultValue.publishTrigger = publishTrigger;
            _resultValue.queryProperties = queryProperties;
            _resultValue.resourceType = resourceType;
            _resultValue.resourceUri = resourceUri;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.tenantId = tenantId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
