// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMetricExtensionsMetricExtensionCollectionItemMetricList {
    /**
     * @return Compute Expression to calculate the value of this metric
     * 
     */
    private @Nullable String computeExpression;
    /**
     * @return Data type of value of this metric
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Display name of the metric.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Current metric need to be included as dimension or not
     * 
     */
    private @Nullable Boolean isDimension;
    /**
     * @return Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    private @Nullable Boolean isHidden;
    /**
     * @return Metric category
     * 
     */
    private @Nullable String metricCategory;
    /**
     * @return A filter to return resources based on name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Unit of metric value
     * 
     */
    private @Nullable String unit;

    private GetMetricExtensionsMetricExtensionCollectionItemMetricList() {}
    /**
     * @return Compute Expression to calculate the value of this metric
     * 
     */
    public Optional<String> computeExpression() {
        return Optional.ofNullable(this.computeExpression);
    }
    /**
     * @return Data type of value of this metric
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Display name of the metric.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Current metric need to be included as dimension or not
     * 
     */
    public Optional<Boolean> isDimension() {
        return Optional.ofNullable(this.isDimension);
    }
    /**
     * @return Flag to marks whether a metric has to be uploaded or not. When isHidden = false &gt; Metric is uploaded, isHidden = true &gt; Metric is NOT uploaded
     * 
     */
    public Optional<Boolean> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }
    /**
     * @return Metric category
     * 
     */
    public Optional<String> metricCategory() {
        return Optional.ofNullable(this.metricCategory);
    }
    /**
     * @return A filter to return resources based on name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Unit of metric value
     * 
     */
    public Optional<String> unit() {
        return Optional.ofNullable(this.unit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricExtensionsMetricExtensionCollectionItemMetricList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String computeExpression;
        private @Nullable String dataType;
        private @Nullable String displayName;
        private @Nullable Boolean isDimension;
        private @Nullable Boolean isHidden;
        private @Nullable String metricCategory;
        private @Nullable String name;
        private @Nullable String unit;
        public Builder() {}
        public Builder(GetMetricExtensionsMetricExtensionCollectionItemMetricList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeExpression = defaults.computeExpression;
    	      this.dataType = defaults.dataType;
    	      this.displayName = defaults.displayName;
    	      this.isDimension = defaults.isDimension;
    	      this.isHidden = defaults.isHidden;
    	      this.metricCategory = defaults.metricCategory;
    	      this.name = defaults.name;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder computeExpression(@Nullable String computeExpression) {
            this.computeExpression = computeExpression;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder isDimension(@Nullable Boolean isDimension) {
            this.isDimension = isDimension;
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(@Nullable Boolean isHidden) {
            this.isHidden = isHidden;
            return this;
        }
        @CustomType.Setter
        public Builder metricCategory(@Nullable String metricCategory) {
            this.metricCategory = metricCategory;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder unit(@Nullable String unit) {
            this.unit = unit;
            return this;
        }
        public GetMetricExtensionsMetricExtensionCollectionItemMetricList build() {
            final var o = new GetMetricExtensionsMetricExtensionCollectionItemMetricList();
            o.computeExpression = computeExpression;
            o.dataType = dataType;
            o.displayName = displayName;
            o.isDimension = isDimension;
            o.isHidden = isHidden;
            o.metricCategory = metricCategory;
            o.name = name;
            o.unit = unit;
            return o;
        }
    }
}
