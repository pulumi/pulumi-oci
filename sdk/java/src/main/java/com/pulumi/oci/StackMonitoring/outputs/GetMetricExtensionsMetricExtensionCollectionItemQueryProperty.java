// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail;
import com.pulumi.oci.StackMonitoring.outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMetricExtensionsMetricExtensionCollectionItemQueryProperty {
    /**
     * @return Arguments required by either command or script
     * 
     */
    private String arguments;
    /**
     * @return Prefix for an auto generated metric, in case multiple rows with non unique key values are returned
     * 
     */
    private String autoRowPrefix;
    /**
     * @return Type of possible collection methods.
     * 
     */
    private String collectionMethod;
    /**
     * @return OS command to execute without arguments
     * 
     */
    private String command;
    /**
     * @return Character used to delimit multiple metric values in single line of output
     * 
     */
    private String delimiter;
    /**
     * @return Semi-colon separated list of key properties from Managed Bean ObjectName to be used as key metrics
     * 
     */
    private String identityMetric;
    /**
     * @return List of values and position of PL/SQL procedure IN parameters
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail> inParamDetails;
    /**
     * @return Indicates if Metric Service is enabled on server domain
     * 
     */
    private Boolean isMetricServiceEnabled;
    /**
     * @return List of JMX attributes or Metric Service Table columns separated by semi-colon
     * 
     */
    private String jmxAttributes;
    /**
     * @return JMX Managed Bean Query or Metric Service Table name
     * 
     */
    private String managedBeanQuery;
    /**
     * @return Position and SQL Type of PL/SQL OUT parameter
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail> outParamDetails;
    /**
     * @return Script details applicable to any OS Command based Metric Extension which needs to run a script to collect data
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail> scriptDetails;
    /**
     * @return Details of Sql content which needs to execute to collect Metric Extension data
     * 
     */
    private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail> sqlDetails;
    /**
     * @return Type of SQL data collection method i.e. either a Statement or SQL Script File
     * 
     */
    private String sqlType;
    /**
     * @return String prefix used to identify metric output of the OS Command
     * 
     */
    private String startsWith;

    private GetMetricExtensionsMetricExtensionCollectionItemQueryProperty() {}
    /**
     * @return Arguments required by either command or script
     * 
     */
    public String arguments() {
        return this.arguments;
    }
    /**
     * @return Prefix for an auto generated metric, in case multiple rows with non unique key values are returned
     * 
     */
    public String autoRowPrefix() {
        return this.autoRowPrefix;
    }
    /**
     * @return Type of possible collection methods.
     * 
     */
    public String collectionMethod() {
        return this.collectionMethod;
    }
    /**
     * @return OS command to execute without arguments
     * 
     */
    public String command() {
        return this.command;
    }
    /**
     * @return Character used to delimit multiple metric values in single line of output
     * 
     */
    public String delimiter() {
        return this.delimiter;
    }
    /**
     * @return Semi-colon separated list of key properties from Managed Bean ObjectName to be used as key metrics
     * 
     */
    public String identityMetric() {
        return this.identityMetric;
    }
    /**
     * @return List of values and position of PL/SQL procedure IN parameters
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail> inParamDetails() {
        return this.inParamDetails;
    }
    /**
     * @return Indicates if Metric Service is enabled on server domain
     * 
     */
    public Boolean isMetricServiceEnabled() {
        return this.isMetricServiceEnabled;
    }
    /**
     * @return List of JMX attributes or Metric Service Table columns separated by semi-colon
     * 
     */
    public String jmxAttributes() {
        return this.jmxAttributes;
    }
    /**
     * @return JMX Managed Bean Query or Metric Service Table name
     * 
     */
    public String managedBeanQuery() {
        return this.managedBeanQuery;
    }
    /**
     * @return Position and SQL Type of PL/SQL OUT parameter
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail> outParamDetails() {
        return this.outParamDetails;
    }
    /**
     * @return Script details applicable to any OS Command based Metric Extension which needs to run a script to collect data
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail> scriptDetails() {
        return this.scriptDetails;
    }
    /**
     * @return Details of Sql content which needs to execute to collect Metric Extension data
     * 
     */
    public List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail> sqlDetails() {
        return this.sqlDetails;
    }
    /**
     * @return Type of SQL data collection method i.e. either a Statement or SQL Script File
     * 
     */
    public String sqlType() {
        return this.sqlType;
    }
    /**
     * @return String prefix used to identify metric output of the OS Command
     * 
     */
    public String startsWith() {
        return this.startsWith;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetricExtensionsMetricExtensionCollectionItemQueryProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arguments;
        private String autoRowPrefix;
        private String collectionMethod;
        private String command;
        private String delimiter;
        private String identityMetric;
        private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail> inParamDetails;
        private Boolean isMetricServiceEnabled;
        private String jmxAttributes;
        private String managedBeanQuery;
        private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail> outParamDetails;
        private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail> scriptDetails;
        private List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail> sqlDetails;
        private String sqlType;
        private String startsWith;
        public Builder() {}
        public Builder(GetMetricExtensionsMetricExtensionCollectionItemQueryProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.autoRowPrefix = defaults.autoRowPrefix;
    	      this.collectionMethod = defaults.collectionMethod;
    	      this.command = defaults.command;
    	      this.delimiter = defaults.delimiter;
    	      this.identityMetric = defaults.identityMetric;
    	      this.inParamDetails = defaults.inParamDetails;
    	      this.isMetricServiceEnabled = defaults.isMetricServiceEnabled;
    	      this.jmxAttributes = defaults.jmxAttributes;
    	      this.managedBeanQuery = defaults.managedBeanQuery;
    	      this.outParamDetails = defaults.outParamDetails;
    	      this.scriptDetails = defaults.scriptDetails;
    	      this.sqlDetails = defaults.sqlDetails;
    	      this.sqlType = defaults.sqlType;
    	      this.startsWith = defaults.startsWith;
        }

        @CustomType.Setter
        public Builder arguments(String arguments) {
            if (arguments == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "arguments");
            }
            this.arguments = arguments;
            return this;
        }
        @CustomType.Setter
        public Builder autoRowPrefix(String autoRowPrefix) {
            if (autoRowPrefix == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "autoRowPrefix");
            }
            this.autoRowPrefix = autoRowPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder collectionMethod(String collectionMethod) {
            if (collectionMethod == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "collectionMethod");
            }
            this.collectionMethod = collectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder command(String command) {
            if (command == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "command");
            }
            this.command = command;
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(String delimiter) {
            if (delimiter == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "delimiter");
            }
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder identityMetric(String identityMetric) {
            if (identityMetric == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "identityMetric");
            }
            this.identityMetric = identityMetric;
            return this;
        }
        @CustomType.Setter
        public Builder inParamDetails(List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail> inParamDetails) {
            if (inParamDetails == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "inParamDetails");
            }
            this.inParamDetails = inParamDetails;
            return this;
        }
        public Builder inParamDetails(GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail... inParamDetails) {
            return inParamDetails(List.of(inParamDetails));
        }
        @CustomType.Setter
        public Builder isMetricServiceEnabled(Boolean isMetricServiceEnabled) {
            if (isMetricServiceEnabled == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "isMetricServiceEnabled");
            }
            this.isMetricServiceEnabled = isMetricServiceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder jmxAttributes(String jmxAttributes) {
            if (jmxAttributes == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "jmxAttributes");
            }
            this.jmxAttributes = jmxAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder managedBeanQuery(String managedBeanQuery) {
            if (managedBeanQuery == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "managedBeanQuery");
            }
            this.managedBeanQuery = managedBeanQuery;
            return this;
        }
        @CustomType.Setter
        public Builder outParamDetails(List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail> outParamDetails) {
            if (outParamDetails == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "outParamDetails");
            }
            this.outParamDetails = outParamDetails;
            return this;
        }
        public Builder outParamDetails(GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail... outParamDetails) {
            return outParamDetails(List.of(outParamDetails));
        }
        @CustomType.Setter
        public Builder scriptDetails(List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail> scriptDetails) {
            if (scriptDetails == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "scriptDetails");
            }
            this.scriptDetails = scriptDetails;
            return this;
        }
        public Builder scriptDetails(GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail... scriptDetails) {
            return scriptDetails(List.of(scriptDetails));
        }
        @CustomType.Setter
        public Builder sqlDetails(List<GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail> sqlDetails) {
            if (sqlDetails == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "sqlDetails");
            }
            this.sqlDetails = sqlDetails;
            return this;
        }
        public Builder sqlDetails(GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail... sqlDetails) {
            return sqlDetails(List.of(sqlDetails));
        }
        @CustomType.Setter
        public Builder sqlType(String sqlType) {
            if (sqlType == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "sqlType");
            }
            this.sqlType = sqlType;
            return this;
        }
        @CustomType.Setter
        public Builder startsWith(String startsWith) {
            if (startsWith == null) {
              throw new MissingRequiredPropertyException("GetMetricExtensionsMetricExtensionCollectionItemQueryProperty", "startsWith");
            }
            this.startsWith = startsWith;
            return this;
        }
        public GetMetricExtensionsMetricExtensionCollectionItemQueryProperty build() {
            final var _resultValue = new GetMetricExtensionsMetricExtensionCollectionItemQueryProperty();
            _resultValue.arguments = arguments;
            _resultValue.autoRowPrefix = autoRowPrefix;
            _resultValue.collectionMethod = collectionMethod;
            _resultValue.command = command;
            _resultValue.delimiter = delimiter;
            _resultValue.identityMetric = identityMetric;
            _resultValue.inParamDetails = inParamDetails;
            _resultValue.isMetricServiceEnabled = isMetricServiceEnabled;
            _resultValue.jmxAttributes = jmxAttributes;
            _resultValue.managedBeanQuery = managedBeanQuery;
            _resultValue.outParamDetails = outParamDetails;
            _resultValue.scriptDetails = scriptDetails;
            _resultValue.sqlDetails = sqlDetails;
            _resultValue.sqlType = sqlType;
            _resultValue.startsWith = startsWith;
            return _resultValue;
        }
    }
}
