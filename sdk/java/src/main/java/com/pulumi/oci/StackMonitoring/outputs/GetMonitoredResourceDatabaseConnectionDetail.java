// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMonitoredResourceDatabaseConnectionDetail {
    /**
     * @return Database connector Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String connectorId;
    /**
     * @return dbId of the database.
     * 
     */
    private @Nullable String dbId;
    /**
     * @return UniqueName used for database connection requests.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return Listener Port number used for connection requests.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Protocol used in DB connection string when connecting to external database service.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Service name used for connection requests.
     * 
     */
    private @Nullable String serviceName;
    /**
     * @return SSL Secret Identifier for TCPS connector in Oracle Cloud Infrastructure Vault[OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String sslSecretId;

    private GetMonitoredResourceDatabaseConnectionDetail() {}
    /**
     * @return Database connector Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    /**
     * @return dbId of the database.
     * 
     */
    public Optional<String> dbId() {
        return Optional.ofNullable(this.dbId);
    }
    /**
     * @return UniqueName used for database connection requests.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return Listener Port number used for connection requests.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Protocol used in DB connection string when connecting to external database service.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Service name used for connection requests.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }
    /**
     * @return SSL Secret Identifier for TCPS connector in Oracle Cloud Infrastructure Vault[OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> sslSecretId() {
        return Optional.ofNullable(this.sslSecretId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceDatabaseConnectionDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectorId;
        private @Nullable String dbId;
        private @Nullable String dbUniqueName;
        private @Nullable Integer port;
        private @Nullable String protocol;
        private @Nullable String serviceName;
        private @Nullable String sslSecretId;
        public Builder() {}
        public Builder(GetMonitoredResourceDatabaseConnectionDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.dbId = defaults.dbId;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.serviceName = defaults.serviceName;
    	      this.sslSecretId = defaults.sslSecretId;
        }

        @CustomType.Setter
        public Builder connectorId(@Nullable String connectorId) {
            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder dbId(@Nullable String dbId) {
            this.dbId = dbId;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder sslSecretId(@Nullable String sslSecretId) {
            this.sslSecretId = sslSecretId;
            return this;
        }
        public GetMonitoredResourceDatabaseConnectionDetail build() {
            final var o = new GetMonitoredResourceDatabaseConnectionDetail();
            o.connectorId = connectorId;
            o.dbId = dbId;
            o.dbUniqueName = dbUniqueName;
            o.port = port;
            o.protocol = protocol;
            o.serviceName = serviceName;
            o.sslSecretId = sslSecretId;
            return o;
        }
    }
}
