// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail {
    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    private Integer availabilityProxyMetricCollectionInterval;
    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    private List<String> availabilityProxyMetrics;
    /**
     * @return The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
     * 
     */
    private String consolePathPrefix;
    /**
     * @return The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
     * 
     */
    private String externalIdMapping;
    /**
     * @return Lifecycle states of the external resource which reflects the status of the resource being up.
     * 
     */
    private List<String> lifecycleStatusMappingsForUpStatuses;
    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    private String namespace;
    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    private String resourceGroup;
    /**
     * @return The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
     * 
     */
    private String resourceNameFilter;
    /**
     * @return The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
     * 
     */
    private String resourceNameMapping;
    /**
     * @return The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
     * 
     */
    private String resourceTypeFilter;
    /**
     * @return The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
     * 
     */
    private String resourceTypeMapping;
    /**
     * @return The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
     * 
     */
    private String serviceBaseUrl;
    /**
     * @return Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
     * 
     */
    private Boolean shouldUseMetricsFlowForStatus;
    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    private String source;
    /**
     * @return Task type.
     * 
     */
    private String type;

    private GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail() {}
    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    public Integer availabilityProxyMetricCollectionInterval() {
        return this.availabilityProxyMetricCollectionInterval;
    }
    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    public List<String> availabilityProxyMetrics() {
        return this.availabilityProxyMetrics;
    }
    /**
     * @return The console path prefix to use for providing service home url page navigation.  For example if the prefix provided is &#39;security/bastion/bastions&#39;, the URL used for navigation will be https://&lt;cloudhostname&gt;/security/bastion/bastions/&lt;resourceOcid&gt;. If not provided, service home page link  will not be shown in the stack monitoring home page.
     * 
     */
    public String consolePathPrefix() {
        return this.consolePathPrefix;
    }
    /**
     * @return The external resource identifier property in the metric dimensions.  Resources imported will be using this property value for external id.
     * 
     */
    public String externalIdMapping() {
        return this.externalIdMapping;
    }
    /**
     * @return Lifecycle states of the external resource which reflects the status of the resource being up.
     * 
     */
    public List<String> lifecycleStatusMappingsForUpStatuses() {
        return this.lifecycleStatusMappingsForUpStatuses;
    }
    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return The resource name filter. Resources matching with the resource name filter will be imported. Regular expressions will be accepted.
     * 
     */
    public String resourceNameFilter() {
        return this.resourceNameFilter;
    }
    /**
     * @return The resource name property in the metric dimensions.  Resources imported will be using this property value for resource name.
     * 
     */
    public String resourceNameMapping() {
        return this.resourceNameMapping;
    }
    /**
     * @return The resource type filter. Resources matching with the resource type filter will be imported. Regular expressions will be accepted.
     * 
     */
    public String resourceTypeFilter() {
        return this.resourceTypeFilter;
    }
    /**
     * @return The resource type property in the metric dimensions.  Resources imported will be using this property value for resource type. If not specified, namespace will be used for resource type.
     * 
     */
    public String resourceTypeMapping() {
        return this.resourceTypeMapping;
    }
    /**
     * @return The base URL of the Oracle Cloud Infrastructure service to which the resource belongs to. Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
     * 
     */
    public String serviceBaseUrl() {
        return this.serviceBaseUrl;
    }
    /**
     * @return Flag to indicate whether status is calculated using metrics or  LifeCycleState attribute of the resource in Oracle Cloud Infrastructure service.
     * 
     */
    public Boolean shouldUseMetricsFlowForStatus() {
        return this.shouldUseMetricsFlowForStatus;
    }
    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Task type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer availabilityProxyMetricCollectionInterval;
        private List<String> availabilityProxyMetrics;
        private String consolePathPrefix;
        private String externalIdMapping;
        private List<String> lifecycleStatusMappingsForUpStatuses;
        private String namespace;
        private String resourceGroup;
        private String resourceNameFilter;
        private String resourceNameMapping;
        private String resourceTypeFilter;
        private String resourceTypeMapping;
        private String serviceBaseUrl;
        private Boolean shouldUseMetricsFlowForStatus;
        private String source;
        private String type;
        public Builder() {}
        public Builder(GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityProxyMetricCollectionInterval = defaults.availabilityProxyMetricCollectionInterval;
    	      this.availabilityProxyMetrics = defaults.availabilityProxyMetrics;
    	      this.consolePathPrefix = defaults.consolePathPrefix;
    	      this.externalIdMapping = defaults.externalIdMapping;
    	      this.lifecycleStatusMappingsForUpStatuses = defaults.lifecycleStatusMappingsForUpStatuses;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceNameFilter = defaults.resourceNameFilter;
    	      this.resourceNameMapping = defaults.resourceNameMapping;
    	      this.resourceTypeFilter = defaults.resourceTypeFilter;
    	      this.resourceTypeMapping = defaults.resourceTypeMapping;
    	      this.serviceBaseUrl = defaults.serviceBaseUrl;
    	      this.shouldUseMetricsFlowForStatus = defaults.shouldUseMetricsFlowForStatus;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityProxyMetricCollectionInterval(Integer availabilityProxyMetricCollectionInterval) {
            if (availabilityProxyMetricCollectionInterval == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "availabilityProxyMetricCollectionInterval");
            }
            this.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityProxyMetrics(List<String> availabilityProxyMetrics) {
            if (availabilityProxyMetrics == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "availabilityProxyMetrics");
            }
            this.availabilityProxyMetrics = availabilityProxyMetrics;
            return this;
        }
        public Builder availabilityProxyMetrics(String... availabilityProxyMetrics) {
            return availabilityProxyMetrics(List.of(availabilityProxyMetrics));
        }
        @CustomType.Setter
        public Builder consolePathPrefix(String consolePathPrefix) {
            if (consolePathPrefix == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "consolePathPrefix");
            }
            this.consolePathPrefix = consolePathPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder externalIdMapping(String externalIdMapping) {
            if (externalIdMapping == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "externalIdMapping");
            }
            this.externalIdMapping = externalIdMapping;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStatusMappingsForUpStatuses(List<String> lifecycleStatusMappingsForUpStatuses) {
            if (lifecycleStatusMappingsForUpStatuses == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "lifecycleStatusMappingsForUpStatuses");
            }
            this.lifecycleStatusMappingsForUpStatuses = lifecycleStatusMappingsForUpStatuses;
            return this;
        }
        public Builder lifecycleStatusMappingsForUpStatuses(String... lifecycleStatusMappingsForUpStatuses) {
            return lifecycleStatusMappingsForUpStatuses(List.of(lifecycleStatusMappingsForUpStatuses));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder resourceNameFilter(String resourceNameFilter) {
            if (resourceNameFilter == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceNameFilter");
            }
            this.resourceNameFilter = resourceNameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder resourceNameMapping(String resourceNameMapping) {
            if (resourceNameMapping == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceNameMapping");
            }
            this.resourceNameMapping = resourceNameMapping;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeFilter(String resourceTypeFilter) {
            if (resourceTypeFilter == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceTypeFilter");
            }
            this.resourceTypeFilter = resourceTypeFilter;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTypeMapping(String resourceTypeMapping) {
            if (resourceTypeMapping == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceTypeMapping");
            }
            this.resourceTypeMapping = resourceTypeMapping;
            return this;
        }
        @CustomType.Setter
        public Builder serviceBaseUrl(String serviceBaseUrl) {
            if (serviceBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "serviceBaseUrl");
            }
            this.serviceBaseUrl = serviceBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder shouldUseMetricsFlowForStatus(Boolean shouldUseMetricsFlowForStatus) {
            if (shouldUseMetricsFlowForStatus == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "shouldUseMetricsFlowForStatus");
            }
            this.shouldUseMetricsFlowForStatus = shouldUseMetricsFlowForStatus;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "type");
            }
            this.type = type;
            return this;
        }
        public GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail build() {
            final var _resultValue = new GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail();
            _resultValue.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            _resultValue.availabilityProxyMetrics = availabilityProxyMetrics;
            _resultValue.consolePathPrefix = consolePathPrefix;
            _resultValue.externalIdMapping = externalIdMapping;
            _resultValue.lifecycleStatusMappingsForUpStatuses = lifecycleStatusMappingsForUpStatuses;
            _resultValue.namespace = namespace;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.resourceNameFilter = resourceNameFilter;
            _resultValue.resourceNameMapping = resourceNameMapping;
            _resultValue.resourceTypeFilter = resourceTypeFilter;
            _resultValue.resourceTypeMapping = resourceTypeMapping;
            _resultValue.serviceBaseUrl = serviceBaseUrl;
            _resultValue.shouldUseMetricsFlowForStatus = shouldUseMetricsFlowForStatus;
            _resultValue.source = source;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
