// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail {
    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    private Integer availabilityProxyMetricCollectionInterval;
    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    private List<String> availabilityProxyMetrics;
    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    private String namespace;
    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    private String resourceGroup;
    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    private String source;
    /**
     * @return Task type.
     * 
     */
    private String type;

    private GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail() {}
    /**
     * @return Metrics collection interval in seconds used when calculating the availability of the  resource based on metrics specified using the property &#39;availabilityProxyMetrics&#39;.
     * 
     */
    public Integer availabilityProxyMetricCollectionInterval() {
        return this.availabilityProxyMetricCollectionInterval;
    }
    /**
     * @return List of metrics to be used to calculate the availability of the resource. Resource is considered to be up if at least one of the specified metrics is available for  the resource during the specified interval using the property  &#39;availabilityProxyMetricCollectionIntervalInSeconds&#39;. If no metrics are specified, availability will not be calculated for the resource.
     * 
     */
    public List<String> availabilityProxyMetrics() {
        return this.availabilityProxyMetrics;
    }
    /**
     * @return Name space to be used for Oracle Cloud Infrastructure Native service resources discovery.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The resource group to use while fetching metrics from telemetry. If not specified, resource group will be skipped in the list metrics request.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return Source from where the metrics pushed to telemetry. Possible values:
     * * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from Oracle Cloud Infrastructure Native Services.
     * * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Task type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer availabilityProxyMetricCollectionInterval;
        private List<String> availabilityProxyMetrics;
        private String namespace;
        private String resourceGroup;
        private String source;
        private String type;
        public Builder() {}
        public Builder(GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityProxyMetricCollectionInterval = defaults.availabilityProxyMetricCollectionInterval;
    	      this.availabilityProxyMetrics = defaults.availabilityProxyMetrics;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityProxyMetricCollectionInterval(Integer availabilityProxyMetricCollectionInterval) {
            if (availabilityProxyMetricCollectionInterval == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "availabilityProxyMetricCollectionInterval");
            }
            this.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityProxyMetrics(List<String> availabilityProxyMetrics) {
            if (availabilityProxyMetrics == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "availabilityProxyMetrics");
            }
            this.availabilityProxyMetrics = availabilityProxyMetrics;
            return this;
        }
        public Builder availabilityProxyMetrics(String... availabilityProxyMetrics) {
            return availabilityProxyMetrics(List.of(availabilityProxyMetrics));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail", "type");
            }
            this.type = type;
            return this;
        }
        public GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail build() {
            final var _resultValue = new GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail();
            _resultValue.availabilityProxyMetricCollectionInterval = availabilityProxyMetricCollectionInterval;
            _resultValue.availabilityProxyMetrics = availabilityProxyMetrics;
            _resultValue.namespace = namespace;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.source = source;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
