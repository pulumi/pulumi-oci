// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypeHandlerConfigHandlerProperty;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypeHandlerConfigMetricMapping;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypeHandlerConfigMetricNameConfig;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceTypeHandlerConfig {
    /**
     * @return Resource name generation overriding configurations for collectd resource types.
     * 
     */
    private List<GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs;
    /**
     * @return List of collector/plugin names.
     * 
     */
    private List<String> collectorTypes;
    /**
     * @return List of handler configuration properties
     * 
     */
    private List<GetMonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties;
    /**
     * @return List of AgentExtensionHandlerMetricMappingDetails.
     * 
     */
    private List<GetMonitoredResourceTypeHandlerConfigMetricMapping> metricMappings;
    /**
     * @return Metric name generation overriding configurations.
     * 
     */
    private List<GetMonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs;
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    private Integer metricUploadIntervalInSeconds;
    /**
     * @return Resource name generation overriding configurations for telegraf resource types.
     * 
     */
    private List<GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs;
    /**
     * @return Resource group string; if not specified, the resource group string will be generated by the handler.
     * 
     */
    private String telemetryResourceGroup;

    private GetMonitoredResourceTypeHandlerConfig() {}
    /**
     * @return Resource name generation overriding configurations for collectd resource types.
     * 
     */
    public List<GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs() {
        return this.collectdResourceNameConfigs;
    }
    /**
     * @return List of collector/plugin names.
     * 
     */
    public List<String> collectorTypes() {
        return this.collectorTypes;
    }
    /**
     * @return List of handler configuration properties
     * 
     */
    public List<GetMonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties() {
        return this.handlerProperties;
    }
    /**
     * @return List of AgentExtensionHandlerMetricMappingDetails.
     * 
     */
    public List<GetMonitoredResourceTypeHandlerConfigMetricMapping> metricMappings() {
        return this.metricMappings;
    }
    /**
     * @return Metric name generation overriding configurations.
     * 
     */
    public List<GetMonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs() {
        return this.metricNameConfigs;
    }
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    public Integer metricUploadIntervalInSeconds() {
        return this.metricUploadIntervalInSeconds;
    }
    /**
     * @return Resource name generation overriding configurations for telegraf resource types.
     * 
     */
    public List<GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs() {
        return this.telegrafResourceNameConfigs;
    }
    /**
     * @return Resource group string; if not specified, the resource group string will be generated by the handler.
     * 
     */
    public String telemetryResourceGroup() {
        return this.telemetryResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceTypeHandlerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs;
        private List<String> collectorTypes;
        private List<GetMonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties;
        private List<GetMonitoredResourceTypeHandlerConfigMetricMapping> metricMappings;
        private List<GetMonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs;
        private Integer metricUploadIntervalInSeconds;
        private List<GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs;
        private String telemetryResourceGroup;
        public Builder() {}
        public Builder(GetMonitoredResourceTypeHandlerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectdResourceNameConfigs = defaults.collectdResourceNameConfigs;
    	      this.collectorTypes = defaults.collectorTypes;
    	      this.handlerProperties = defaults.handlerProperties;
    	      this.metricMappings = defaults.metricMappings;
    	      this.metricNameConfigs = defaults.metricNameConfigs;
    	      this.metricUploadIntervalInSeconds = defaults.metricUploadIntervalInSeconds;
    	      this.telegrafResourceNameConfigs = defaults.telegrafResourceNameConfigs;
    	      this.telemetryResourceGroup = defaults.telemetryResourceGroup;
        }

        @CustomType.Setter
        public Builder collectdResourceNameConfigs(List<GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs) {
            if (collectdResourceNameConfigs == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "collectdResourceNameConfigs");
            }
            this.collectdResourceNameConfigs = collectdResourceNameConfigs;
            return this;
        }
        public Builder collectdResourceNameConfigs(GetMonitoredResourceTypeHandlerConfigCollectdResourceNameConfig... collectdResourceNameConfigs) {
            return collectdResourceNameConfigs(List.of(collectdResourceNameConfigs));
        }
        @CustomType.Setter
        public Builder collectorTypes(List<String> collectorTypes) {
            if (collectorTypes == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "collectorTypes");
            }
            this.collectorTypes = collectorTypes;
            return this;
        }
        public Builder collectorTypes(String... collectorTypes) {
            return collectorTypes(List.of(collectorTypes));
        }
        @CustomType.Setter
        public Builder handlerProperties(List<GetMonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties) {
            if (handlerProperties == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "handlerProperties");
            }
            this.handlerProperties = handlerProperties;
            return this;
        }
        public Builder handlerProperties(GetMonitoredResourceTypeHandlerConfigHandlerProperty... handlerProperties) {
            return handlerProperties(List.of(handlerProperties));
        }
        @CustomType.Setter
        public Builder metricMappings(List<GetMonitoredResourceTypeHandlerConfigMetricMapping> metricMappings) {
            if (metricMappings == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "metricMappings");
            }
            this.metricMappings = metricMappings;
            return this;
        }
        public Builder metricMappings(GetMonitoredResourceTypeHandlerConfigMetricMapping... metricMappings) {
            return metricMappings(List.of(metricMappings));
        }
        @CustomType.Setter
        public Builder metricNameConfigs(List<GetMonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs) {
            if (metricNameConfigs == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "metricNameConfigs");
            }
            this.metricNameConfigs = metricNameConfigs;
            return this;
        }
        public Builder metricNameConfigs(GetMonitoredResourceTypeHandlerConfigMetricNameConfig... metricNameConfigs) {
            return metricNameConfigs(List.of(metricNameConfigs));
        }
        @CustomType.Setter
        public Builder metricUploadIntervalInSeconds(Integer metricUploadIntervalInSeconds) {
            if (metricUploadIntervalInSeconds == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "metricUploadIntervalInSeconds");
            }
            this.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder telegrafResourceNameConfigs(List<GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs) {
            if (telegrafResourceNameConfigs == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "telegrafResourceNameConfigs");
            }
            this.telegrafResourceNameConfigs = telegrafResourceNameConfigs;
            return this;
        }
        public Builder telegrafResourceNameConfigs(GetMonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig... telegrafResourceNameConfigs) {
            return telegrafResourceNameConfigs(List.of(telegrafResourceNameConfigs));
        }
        @CustomType.Setter
        public Builder telemetryResourceGroup(String telemetryResourceGroup) {
            if (telemetryResourceGroup == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfig", "telemetryResourceGroup");
            }
            this.telemetryResourceGroup = telemetryResourceGroup;
            return this;
        }
        public GetMonitoredResourceTypeHandlerConfig build() {
            final var _resultValue = new GetMonitoredResourceTypeHandlerConfig();
            _resultValue.collectdResourceNameConfigs = collectdResourceNameConfigs;
            _resultValue.collectorTypes = collectorTypes;
            _resultValue.handlerProperties = handlerProperties;
            _resultValue.metricMappings = metricMappings;
            _resultValue.metricNameConfigs = metricNameConfigs;
            _resultValue.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            _resultValue.telegrafResourceNameConfigs = telegrafResourceNameConfigs;
            _resultValue.telemetryResourceGroup = telemetryResourceGroup;
            return _resultValue;
        }
    }
}
