// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceTypeHandlerConfigMetricMapping {
    /**
     * @return Metric name as defined by the collector.
     * 
     */
    private String collectorMetricName;
    /**
     * @return Is ignoring this metric.
     * 
     */
    private Boolean isSkipUpload;
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    private Integer metricUploadIntervalInSeconds;
    /**
     * @return Metric name to be upload to telemetry.
     * 
     */
    private String telemetryMetricName;

    private GetMonitoredResourceTypeHandlerConfigMetricMapping() {}
    /**
     * @return Metric name as defined by the collector.
     * 
     */
    public String collectorMetricName() {
        return this.collectorMetricName;
    }
    /**
     * @return Is ignoring this metric.
     * 
     */
    public Boolean isSkipUpload() {
        return this.isSkipUpload;
    }
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    public Integer metricUploadIntervalInSeconds() {
        return this.metricUploadIntervalInSeconds;
    }
    /**
     * @return Metric name to be upload to telemetry.
     * 
     */
    public String telemetryMetricName() {
        return this.telemetryMetricName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceTypeHandlerConfigMetricMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collectorMetricName;
        private Boolean isSkipUpload;
        private Integer metricUploadIntervalInSeconds;
        private String telemetryMetricName;
        public Builder() {}
        public Builder(GetMonitoredResourceTypeHandlerConfigMetricMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectorMetricName = defaults.collectorMetricName;
    	      this.isSkipUpload = defaults.isSkipUpload;
    	      this.metricUploadIntervalInSeconds = defaults.metricUploadIntervalInSeconds;
    	      this.telemetryMetricName = defaults.telemetryMetricName;
        }

        @CustomType.Setter
        public Builder collectorMetricName(String collectorMetricName) {
            if (collectorMetricName == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfigMetricMapping", "collectorMetricName");
            }
            this.collectorMetricName = collectorMetricName;
            return this;
        }
        @CustomType.Setter
        public Builder isSkipUpload(Boolean isSkipUpload) {
            if (isSkipUpload == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfigMetricMapping", "isSkipUpload");
            }
            this.isSkipUpload = isSkipUpload;
            return this;
        }
        @CustomType.Setter
        public Builder metricUploadIntervalInSeconds(Integer metricUploadIntervalInSeconds) {
            if (metricUploadIntervalInSeconds == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfigMetricMapping", "metricUploadIntervalInSeconds");
            }
            this.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder telemetryMetricName(String telemetryMetricName) {
            if (telemetryMetricName == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypeHandlerConfigMetricMapping", "telemetryMetricName");
            }
            this.telemetryMetricName = telemetryMetricName;
            return this;
        }
        public GetMonitoredResourceTypeHandlerConfigMetricMapping build() {
            final var _resultValue = new GetMonitoredResourceTypeHandlerConfigMetricMapping();
            _resultValue.collectorMetricName = collectorMetricName;
            _resultValue.isSkipUpload = isSkipUpload;
            _resultValue.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            _resultValue.telemetryMetricName = telemetryMetricName;
            return _resultValue;
        }
    }
}
