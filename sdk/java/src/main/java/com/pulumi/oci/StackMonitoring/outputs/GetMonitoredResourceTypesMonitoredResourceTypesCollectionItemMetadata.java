// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata {
    /**
     * @return List of properties needed by the agent for monitoring the resource.  Valid only if resource type is Oracle Cloud Infrastructure management agent based. When specified,  these properties are passed to the management agent during resource create or update.
     * 
     */
    private List<String> agentProperties;
    /**
     * @return ResourceType metadata format to be used. Currently supports only one format. Possible values - SYSTEM_FORMAT.
     * * SYSTEM_FORMAT - The resource type metadata is defined in machine friendly format.
     * 
     */
    private String format;
    /**
     * @return List of required properties for resource type.
     * 
     */
    private List<String> requiredProperties;
    /**
     * @return List of property sets used to uniquely identify the resources.  This check is made during create or update of stack monitoring resource.  The resource has to pass unique check for each set in the list.  For example, database can have user, password and SID as one unique set.  Another unique set would be user, password and service name.
     * 
     */
    private List<GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet> uniquePropertySets;
    /**
     * @return List of valid properties for resource type while creating the monitored resource.  If resources of this type specifies any other properties during create operation,  the operation will fail.
     * 
     */
    private List<String> validPropertiesForCreates;
    /**
     * @return List of valid properties for resource type while updating the monitored resource.  If resources of this type specifies any other properties during update operation,  the operation will fail.
     * 
     */
    private List<String> validPropertiesForUpdates;
    /**
     * @return List of valid values for the properties. This is useful when resource type wants to restrict only certain values for some properties. For instance for &#39;osType&#39; property,  supported values can be restricted to be either Linux or Windows. Example: `{&#34;osType&#34;: &#34;Linux,Windows,Solaris&#34;, &#34;osVersion&#34;: &#34;v6.0,v7.0&#34;}`
     * 
     */
    private Map<String,String> validPropertyValues;
    /**
     * @return List of valid sub-resource types for a composite resource type. The sub-resource types will be obtained from the valid association pairs corresponding to the composite resource types. It will be empty for non composite resource types
     * 
     */
    private List<String> validSubResourceTypes;

    private GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata() {}
    /**
     * @return List of properties needed by the agent for monitoring the resource.  Valid only if resource type is Oracle Cloud Infrastructure management agent based. When specified,  these properties are passed to the management agent during resource create or update.
     * 
     */
    public List<String> agentProperties() {
        return this.agentProperties;
    }
    /**
     * @return ResourceType metadata format to be used. Currently supports only one format. Possible values - SYSTEM_FORMAT.
     * * SYSTEM_FORMAT - The resource type metadata is defined in machine friendly format.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return List of required properties for resource type.
     * 
     */
    public List<String> requiredProperties() {
        return this.requiredProperties;
    }
    /**
     * @return List of property sets used to uniquely identify the resources.  This check is made during create or update of stack monitoring resource.  The resource has to pass unique check for each set in the list.  For example, database can have user, password and SID as one unique set.  Another unique set would be user, password and service name.
     * 
     */
    public List<GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet> uniquePropertySets() {
        return this.uniquePropertySets;
    }
    /**
     * @return List of valid properties for resource type while creating the monitored resource.  If resources of this type specifies any other properties during create operation,  the operation will fail.
     * 
     */
    public List<String> validPropertiesForCreates() {
        return this.validPropertiesForCreates;
    }
    /**
     * @return List of valid properties for resource type while updating the monitored resource.  If resources of this type specifies any other properties during update operation,  the operation will fail.
     * 
     */
    public List<String> validPropertiesForUpdates() {
        return this.validPropertiesForUpdates;
    }
    /**
     * @return List of valid values for the properties. This is useful when resource type wants to restrict only certain values for some properties. For instance for &#39;osType&#39; property,  supported values can be restricted to be either Linux or Windows. Example: `{&#34;osType&#34;: &#34;Linux,Windows,Solaris&#34;, &#34;osVersion&#34;: &#34;v6.0,v7.0&#34;}`
     * 
     */
    public Map<String,String> validPropertyValues() {
        return this.validPropertyValues;
    }
    /**
     * @return List of valid sub-resource types for a composite resource type. The sub-resource types will be obtained from the valid association pairs corresponding to the composite resource types. It will be empty for non composite resource types
     * 
     */
    public List<String> validSubResourceTypes() {
        return this.validSubResourceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> agentProperties;
        private String format;
        private List<String> requiredProperties;
        private List<GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet> uniquePropertySets;
        private List<String> validPropertiesForCreates;
        private List<String> validPropertiesForUpdates;
        private Map<String,String> validPropertyValues;
        private List<String> validSubResourceTypes;
        public Builder() {}
        public Builder(GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentProperties = defaults.agentProperties;
    	      this.format = defaults.format;
    	      this.requiredProperties = defaults.requiredProperties;
    	      this.uniquePropertySets = defaults.uniquePropertySets;
    	      this.validPropertiesForCreates = defaults.validPropertiesForCreates;
    	      this.validPropertiesForUpdates = defaults.validPropertiesForUpdates;
    	      this.validPropertyValues = defaults.validPropertyValues;
    	      this.validSubResourceTypes = defaults.validSubResourceTypes;
        }

        @CustomType.Setter
        public Builder agentProperties(List<String> agentProperties) {
            if (agentProperties == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "agentProperties");
            }
            this.agentProperties = agentProperties;
            return this;
        }
        public Builder agentProperties(String... agentProperties) {
            return agentProperties(List.of(agentProperties));
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder requiredProperties(List<String> requiredProperties) {
            if (requiredProperties == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "requiredProperties");
            }
            this.requiredProperties = requiredProperties;
            return this;
        }
        public Builder requiredProperties(String... requiredProperties) {
            return requiredProperties(List.of(requiredProperties));
        }
        @CustomType.Setter
        public Builder uniquePropertySets(List<GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet> uniquePropertySets) {
            if (uniquePropertySets == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "uniquePropertySets");
            }
            this.uniquePropertySets = uniquePropertySets;
            return this;
        }
        public Builder uniquePropertySets(GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet... uniquePropertySets) {
            return uniquePropertySets(List.of(uniquePropertySets));
        }
        @CustomType.Setter
        public Builder validPropertiesForCreates(List<String> validPropertiesForCreates) {
            if (validPropertiesForCreates == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "validPropertiesForCreates");
            }
            this.validPropertiesForCreates = validPropertiesForCreates;
            return this;
        }
        public Builder validPropertiesForCreates(String... validPropertiesForCreates) {
            return validPropertiesForCreates(List.of(validPropertiesForCreates));
        }
        @CustomType.Setter
        public Builder validPropertiesForUpdates(List<String> validPropertiesForUpdates) {
            if (validPropertiesForUpdates == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "validPropertiesForUpdates");
            }
            this.validPropertiesForUpdates = validPropertiesForUpdates;
            return this;
        }
        public Builder validPropertiesForUpdates(String... validPropertiesForUpdates) {
            return validPropertiesForUpdates(List.of(validPropertiesForUpdates));
        }
        @CustomType.Setter
        public Builder validPropertyValues(Map<String,String> validPropertyValues) {
            if (validPropertyValues == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "validPropertyValues");
            }
            this.validPropertyValues = validPropertyValues;
            return this;
        }
        @CustomType.Setter
        public Builder validSubResourceTypes(List<String> validSubResourceTypes) {
            if (validSubResourceTypes == null) {
              throw new MissingRequiredPropertyException("GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata", "validSubResourceTypes");
            }
            this.validSubResourceTypes = validSubResourceTypes;
            return this;
        }
        public Builder validSubResourceTypes(String... validSubResourceTypes) {
            return validSubResourceTypes(List.of(validSubResourceTypes));
        }
        public GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata build() {
            final var _resultValue = new GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata();
            _resultValue.agentProperties = agentProperties;
            _resultValue.format = format;
            _resultValue.requiredProperties = requiredProperties;
            _resultValue.uniquePropertySets = uniquePropertySets;
            _resultValue.validPropertiesForCreates = validPropertiesForCreates;
            _resultValue.validPropertiesForUpdates = validPropertiesForUpdates;
            _resultValue.validPropertyValues = validPropertyValues;
            _resultValue.validSubResourceTypes = validSubResourceTypes;
            return _resultValue;
        }
    }
}
