// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.StackMonitoring.outputs.GetMonitoringTemplatesMonitoringTemplateCollectionItemMember;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMonitoringTemplatesMonitoringTemplateCollectionItem {
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly description for the monitoring template. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return A list of destinations for alarm notifications. Each destination is represented by the OCID of a related resource.
     * 
     */
    private List<String> destinations;
    /**
     * @return A filter to return monitoring template based on name.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the resourceInstance/resourceType/resourceGroup
     * 
     */
    private String id;
    /**
     * @return Whether the alarm is enabled or disabled. Default value is enabled.
     * 
     */
    private Boolean isAlarmsEnabled;
    /**
     * @return Whether the alarm notification is enabled or disabled, it will be Enabled by default.
     * 
     */
    private Boolean isSplitNotificationEnabled;
    /**
     * @return List of members of this monitoring template.
     * 
     */
    private List<GetMonitoringTemplatesMonitoringTemplateCollectionItemMember> members;
    /**
     * @return The format to use for alarm notifications.
     * 
     */
    private String messageFormat;
    /**
     * @return The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, PT4H indicates four hours. Minimum- PT1M. Maximum - P30D.
     * 
     */
    private String repeatNotificationDuration;
    /**
     * @return A filter to return monitoring template based on Lifecycle State
     * 
     */
    private String state;
    /**
     * @return A filter to return monitoring template based on input status
     * 
     */
    private String status;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String tenantId;
    /**
     * @return The date and time the monitoringTemplate was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the monitoringTemplate was last updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;
    /**
     * @return Total Alarm Conditions
     * 
     */
    private Double totalAlarmConditions;
    /**
     * @return Total Applied Alarm Conditions
     * 
     */
    private Double totalAppliedAlarmConditions;

    private GetMonitoringTemplatesMonitoringTemplateCollectionItem() {}
    /**
     * @return The ID of the compartment in which data is listed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly description for the monitoring template. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A list of destinations for alarm notifications. Each destination is represented by the OCID of a related resource.
     * 
     */
    public List<String> destinations() {
        return this.destinations;
    }
    /**
     * @return A filter to return monitoring template based on name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the resourceInstance/resourceType/resourceGroup
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the alarm is enabled or disabled. Default value is enabled.
     * 
     */
    public Boolean isAlarmsEnabled() {
        return this.isAlarmsEnabled;
    }
    /**
     * @return Whether the alarm notification is enabled or disabled, it will be Enabled by default.
     * 
     */
    public Boolean isSplitNotificationEnabled() {
        return this.isSplitNotificationEnabled;
    }
    /**
     * @return List of members of this monitoring template.
     * 
     */
    public List<GetMonitoringTemplatesMonitoringTemplateCollectionItemMember> members() {
        return this.members;
    }
    /**
     * @return The format to use for alarm notifications.
     * 
     */
    public String messageFormat() {
        return this.messageFormat;
    }
    /**
     * @return The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, PT4H indicates four hours. Minimum- PT1M. Maximum - P30D.
     * 
     */
    public String repeatNotificationDuration() {
        return this.repeatNotificationDuration;
    }
    /**
     * @return A filter to return monitoring template based on Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A filter to return monitoring template based on input status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The date and time the monitoringTemplate was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the monitoringTemplate was last updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Total Alarm Conditions
     * 
     */
    public Double totalAlarmConditions() {
        return this.totalAlarmConditions;
    }
    /**
     * @return Total Applied Alarm Conditions
     * 
     */
    public Double totalAppliedAlarmConditions() {
        return this.totalAppliedAlarmConditions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitoringTemplatesMonitoringTemplateCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private List<String> destinations;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isAlarmsEnabled;
        private Boolean isSplitNotificationEnabled;
        private List<GetMonitoringTemplatesMonitoringTemplateCollectionItemMember> members;
        private String messageFormat;
        private String repeatNotificationDuration;
        private String state;
        private String status;
        private Map<String,String> systemTags;
        private String tenantId;
        private String timeCreated;
        private String timeUpdated;
        private Double totalAlarmConditions;
        private Double totalAppliedAlarmConditions;
        public Builder() {}
        public Builder(GetMonitoringTemplatesMonitoringTemplateCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.destinations = defaults.destinations;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAlarmsEnabled = defaults.isAlarmsEnabled;
    	      this.isSplitNotificationEnabled = defaults.isSplitNotificationEnabled;
    	      this.members = defaults.members;
    	      this.messageFormat = defaults.messageFormat;
    	      this.repeatNotificationDuration = defaults.repeatNotificationDuration;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.systemTags = defaults.systemTags;
    	      this.tenantId = defaults.tenantId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.totalAlarmConditions = defaults.totalAlarmConditions;
    	      this.totalAppliedAlarmConditions = defaults.totalAppliedAlarmConditions;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<String> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAlarmsEnabled(Boolean isAlarmsEnabled) {
            if (isAlarmsEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "isAlarmsEnabled");
            }
            this.isAlarmsEnabled = isAlarmsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSplitNotificationEnabled(Boolean isSplitNotificationEnabled) {
            if (isSplitNotificationEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "isSplitNotificationEnabled");
            }
            this.isSplitNotificationEnabled = isSplitNotificationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<GetMonitoringTemplatesMonitoringTemplateCollectionItemMember> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(GetMonitoringTemplatesMonitoringTemplateCollectionItemMember... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder messageFormat(String messageFormat) {
            if (messageFormat == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "messageFormat");
            }
            this.messageFormat = messageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder repeatNotificationDuration(String repeatNotificationDuration) {
            if (repeatNotificationDuration == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "repeatNotificationDuration");
            }
            this.repeatNotificationDuration = repeatNotificationDuration;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder totalAlarmConditions(Double totalAlarmConditions) {
            if (totalAlarmConditions == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "totalAlarmConditions");
            }
            this.totalAlarmConditions = totalAlarmConditions;
            return this;
        }
        @CustomType.Setter
        public Builder totalAppliedAlarmConditions(Double totalAppliedAlarmConditions) {
            if (totalAppliedAlarmConditions == null) {
              throw new MissingRequiredPropertyException("GetMonitoringTemplatesMonitoringTemplateCollectionItem", "totalAppliedAlarmConditions");
            }
            this.totalAppliedAlarmConditions = totalAppliedAlarmConditions;
            return this;
        }
        public GetMonitoringTemplatesMonitoringTemplateCollectionItem build() {
            final var _resultValue = new GetMonitoringTemplatesMonitoringTemplateCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.destinations = destinations;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isAlarmsEnabled = isAlarmsEnabled;
            _resultValue.isSplitNotificationEnabled = isSplitNotificationEnabled;
            _resultValue.members = members;
            _resultValue.messageFormat = messageFormat;
            _resultValue.repeatNotificationDuration = repeatNotificationDuration;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.systemTags = systemTags;
            _resultValue.tenantId = tenantId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.totalAlarmConditions = totalAlarmConditions;
            _resultValue.totalAppliedAlarmConditions = totalAppliedAlarmConditions;
            return _resultValue;
        }
    }
}
