// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceTypeHandlerConfigHandlerProperty;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceTypeHandlerConfigMetricMapping;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceTypeHandlerConfigMetricNameConfig;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitoredResourceTypeHandlerConfig {
    /**
     * @return Resource name generation overriding configurations for collectd resource types.
     * 
     */
    private @Nullable List<MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs;
    /**
     * @return List of collector/plugin names.
     * 
     */
    private @Nullable List<String> collectorTypes;
    /**
     * @return List of handler configuration properties
     * 
     */
    private @Nullable List<MonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties;
    /**
     * @return List of AgentExtensionHandlerMetricMappingDetails.
     * 
     */
    private @Nullable List<MonitoredResourceTypeHandlerConfigMetricMapping> metricMappings;
    /**
     * @return Metric name generation overriding configurations.
     * 
     */
    private @Nullable List<MonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs;
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    private @Nullable Integer metricUploadIntervalInSeconds;
    /**
     * @return Resource name generation overriding configurations for telegraf resource types.
     * 
     */
    private @Nullable List<MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs;
    /**
     * @return Resource group string; if not specified, the resource group string will be generated by the handler.
     * 
     */
    private @Nullable String telemetryResourceGroup;

    private MonitoredResourceTypeHandlerConfig() {}
    /**
     * @return Resource name generation overriding configurations for collectd resource types.
     * 
     */
    public List<MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs() {
        return this.collectdResourceNameConfigs == null ? List.of() : this.collectdResourceNameConfigs;
    }
    /**
     * @return List of collector/plugin names.
     * 
     */
    public List<String> collectorTypes() {
        return this.collectorTypes == null ? List.of() : this.collectorTypes;
    }
    /**
     * @return List of handler configuration properties
     * 
     */
    public List<MonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties() {
        return this.handlerProperties == null ? List.of() : this.handlerProperties;
    }
    /**
     * @return List of AgentExtensionHandlerMetricMappingDetails.
     * 
     */
    public List<MonitoredResourceTypeHandlerConfigMetricMapping> metricMappings() {
        return this.metricMappings == null ? List.of() : this.metricMappings;
    }
    /**
     * @return Metric name generation overriding configurations.
     * 
     */
    public List<MonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs() {
        return this.metricNameConfigs == null ? List.of() : this.metricNameConfigs;
    }
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    public Optional<Integer> metricUploadIntervalInSeconds() {
        return Optional.ofNullable(this.metricUploadIntervalInSeconds);
    }
    /**
     * @return Resource name generation overriding configurations for telegraf resource types.
     * 
     */
    public List<MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs() {
        return this.telegrafResourceNameConfigs == null ? List.of() : this.telegrafResourceNameConfigs;
    }
    /**
     * @return Resource group string; if not specified, the resource group string will be generated by the handler.
     * 
     */
    public Optional<String> telemetryResourceGroup() {
        return Optional.ofNullable(this.telemetryResourceGroup);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitoredResourceTypeHandlerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs;
        private @Nullable List<String> collectorTypes;
        private @Nullable List<MonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties;
        private @Nullable List<MonitoredResourceTypeHandlerConfigMetricMapping> metricMappings;
        private @Nullable List<MonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs;
        private @Nullable Integer metricUploadIntervalInSeconds;
        private @Nullable List<MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs;
        private @Nullable String telemetryResourceGroup;
        public Builder() {}
        public Builder(MonitoredResourceTypeHandlerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectdResourceNameConfigs = defaults.collectdResourceNameConfigs;
    	      this.collectorTypes = defaults.collectorTypes;
    	      this.handlerProperties = defaults.handlerProperties;
    	      this.metricMappings = defaults.metricMappings;
    	      this.metricNameConfigs = defaults.metricNameConfigs;
    	      this.metricUploadIntervalInSeconds = defaults.metricUploadIntervalInSeconds;
    	      this.telegrafResourceNameConfigs = defaults.telegrafResourceNameConfigs;
    	      this.telemetryResourceGroup = defaults.telemetryResourceGroup;
        }

        @CustomType.Setter
        public Builder collectdResourceNameConfigs(@Nullable List<MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig> collectdResourceNameConfigs) {

            this.collectdResourceNameConfigs = collectdResourceNameConfigs;
            return this;
        }
        public Builder collectdResourceNameConfigs(MonitoredResourceTypeHandlerConfigCollectdResourceNameConfig... collectdResourceNameConfigs) {
            return collectdResourceNameConfigs(List.of(collectdResourceNameConfigs));
        }
        @CustomType.Setter
        public Builder collectorTypes(@Nullable List<String> collectorTypes) {

            this.collectorTypes = collectorTypes;
            return this;
        }
        public Builder collectorTypes(String... collectorTypes) {
            return collectorTypes(List.of(collectorTypes));
        }
        @CustomType.Setter
        public Builder handlerProperties(@Nullable List<MonitoredResourceTypeHandlerConfigHandlerProperty> handlerProperties) {

            this.handlerProperties = handlerProperties;
            return this;
        }
        public Builder handlerProperties(MonitoredResourceTypeHandlerConfigHandlerProperty... handlerProperties) {
            return handlerProperties(List.of(handlerProperties));
        }
        @CustomType.Setter
        public Builder metricMappings(@Nullable List<MonitoredResourceTypeHandlerConfigMetricMapping> metricMappings) {

            this.metricMappings = metricMappings;
            return this;
        }
        public Builder metricMappings(MonitoredResourceTypeHandlerConfigMetricMapping... metricMappings) {
            return metricMappings(List.of(metricMappings));
        }
        @CustomType.Setter
        public Builder metricNameConfigs(@Nullable List<MonitoredResourceTypeHandlerConfigMetricNameConfig> metricNameConfigs) {

            this.metricNameConfigs = metricNameConfigs;
            return this;
        }
        public Builder metricNameConfigs(MonitoredResourceTypeHandlerConfigMetricNameConfig... metricNameConfigs) {
            return metricNameConfigs(List.of(metricNameConfigs));
        }
        @CustomType.Setter
        public Builder metricUploadIntervalInSeconds(@Nullable Integer metricUploadIntervalInSeconds) {

            this.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder telegrafResourceNameConfigs(@Nullable List<MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig> telegrafResourceNameConfigs) {

            this.telegrafResourceNameConfigs = telegrafResourceNameConfigs;
            return this;
        }
        public Builder telegrafResourceNameConfigs(MonitoredResourceTypeHandlerConfigTelegrafResourceNameConfig... telegrafResourceNameConfigs) {
            return telegrafResourceNameConfigs(List.of(telegrafResourceNameConfigs));
        }
        @CustomType.Setter
        public Builder telemetryResourceGroup(@Nullable String telemetryResourceGroup) {

            this.telemetryResourceGroup = telemetryResourceGroup;
            return this;
        }
        public MonitoredResourceTypeHandlerConfig build() {
            final var _resultValue = new MonitoredResourceTypeHandlerConfig();
            _resultValue.collectdResourceNameConfigs = collectdResourceNameConfigs;
            _resultValue.collectorTypes = collectorTypes;
            _resultValue.handlerProperties = handlerProperties;
            _resultValue.metricMappings = metricMappings;
            _resultValue.metricNameConfigs = metricNameConfigs;
            _resultValue.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            _resultValue.telegrafResourceNameConfigs = telegrafResourceNameConfigs;
            _resultValue.telemetryResourceGroup = telemetryResourceGroup;
            return _resultValue;
        }
    }
}
