// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitoredResourceTypeHandlerConfigMetricMapping {
    /**
     * @return Metric name as defined by the collector.
     * 
     */
    private @Nullable String collectorMetricName;
    /**
     * @return Is ignoring this metric.
     * 
     */
    private @Nullable Boolean isSkipUpload;
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    private @Nullable Integer metricUploadIntervalInSeconds;
    /**
     * @return Metric name to be upload to telemetry.
     * 
     */
    private @Nullable String telemetryMetricName;

    private MonitoredResourceTypeHandlerConfigMetricMapping() {}
    /**
     * @return Metric name as defined by the collector.
     * 
     */
    public Optional<String> collectorMetricName() {
        return Optional.ofNullable(this.collectorMetricName);
    }
    /**
     * @return Is ignoring this metric.
     * 
     */
    public Optional<Boolean> isSkipUpload() {
        return Optional.ofNullable(this.isSkipUpload);
    }
    /**
     * @return Metric upload interval in seconds. Any metric sent by telegraf/collectd before the  configured interval expires will be dropped.
     * 
     */
    public Optional<Integer> metricUploadIntervalInSeconds() {
        return Optional.ofNullable(this.metricUploadIntervalInSeconds);
    }
    /**
     * @return Metric name to be upload to telemetry.
     * 
     */
    public Optional<String> telemetryMetricName() {
        return Optional.ofNullable(this.telemetryMetricName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitoredResourceTypeHandlerConfigMetricMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String collectorMetricName;
        private @Nullable Boolean isSkipUpload;
        private @Nullable Integer metricUploadIntervalInSeconds;
        private @Nullable String telemetryMetricName;
        public Builder() {}
        public Builder(MonitoredResourceTypeHandlerConfigMetricMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectorMetricName = defaults.collectorMetricName;
    	      this.isSkipUpload = defaults.isSkipUpload;
    	      this.metricUploadIntervalInSeconds = defaults.metricUploadIntervalInSeconds;
    	      this.telemetryMetricName = defaults.telemetryMetricName;
        }

        @CustomType.Setter
        public Builder collectorMetricName(@Nullable String collectorMetricName) {

            this.collectorMetricName = collectorMetricName;
            return this;
        }
        @CustomType.Setter
        public Builder isSkipUpload(@Nullable Boolean isSkipUpload) {

            this.isSkipUpload = isSkipUpload;
            return this;
        }
        @CustomType.Setter
        public Builder metricUploadIntervalInSeconds(@Nullable Integer metricUploadIntervalInSeconds) {

            this.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder telemetryMetricName(@Nullable String telemetryMetricName) {

            this.telemetryMetricName = telemetryMetricName;
            return this;
        }
        public MonitoredResourceTypeHandlerConfigMetricMapping build() {
            final var _resultValue = new MonitoredResourceTypeHandlerConfigMetricMapping();
            _resultValue.collectorMetricName = collectorMetricName;
            _resultValue.isSkipUpload = isSkipUpload;
            _resultValue.metricUploadIntervalInSeconds = metricUploadIntervalInSeconds;
            _resultValue.telemetryMetricName = telemetryMetricName;
            return _resultValue;
        }
    }
}
