// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamResult {
    /**
     * @return The OCID of the compartment that contains the stream.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}&#39;
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the stream.
     * 
     */
    private String id;
    /**
     * @return Any additional details about the current state of the stream.
     * 
     */
    private String lifecycleStateDetails;
    /**
     * @return The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool&#39;s associated subnet.
     * 
     */
    private String messagesEndpoint;
    /**
     * @return The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
     * 
     */
    private String name;
    /**
     * @return The number of partitions in the stream.
     * 
     */
    private Integer partitions;
    /**
     * @return The retention period of the stream, in hours. This property is read-only.
     * 
     */
    private Integer retentionInHours;
    /**
     * @return The current state of the stream.
     * 
     */
    private String state;
    private String streamId;
    /**
     * @return The OCID of the stream pool that contains the stream.
     * 
     */
    private String streamPoolId;
    /**
     * @return The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    private String timeCreated;

    private GetStreamResult() {}
    /**
     * @return The OCID of the compartment that contains the stream.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}&#39;
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the stream.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Any additional details about the current state of the stream.
     * 
     */
    public String lifecycleStateDetails() {
        return this.lifecycleStateDetails;
    }
    /**
     * @return The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool&#39;s associated subnet.
     * 
     */
    public String messagesEndpoint() {
        return this.messagesEndpoint;
    }
    /**
     * @return The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of partitions in the stream.
     * 
     */
    public Integer partitions() {
        return this.partitions;
    }
    /**
     * @return The retention period of the stream, in hours. This property is read-only.
     * 
     */
    public Integer retentionInHours() {
        return this.retentionInHours;
    }
    /**
     * @return The current state of the stream.
     * 
     */
    public String state() {
        return this.state;
    }
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return The OCID of the stream pool that contains the stream.
     * 
     */
    public String streamPoolId() {
        return this.streamPoolId;
    }
    /**
     * @return The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleStateDetails;
        private String messagesEndpoint;
        private String name;
        private Integer partitions;
        private Integer retentionInHours;
        private String state;
        private String streamId;
        private String streamPoolId;
        private String timeCreated;
        public Builder() {}
        public Builder(GetStreamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleStateDetails = defaults.lifecycleStateDetails;
    	      this.messagesEndpoint = defaults.messagesEndpoint;
    	      this.name = defaults.name;
    	      this.partitions = defaults.partitions;
    	      this.retentionInHours = defaults.retentionInHours;
    	      this.state = defaults.state;
    	      this.streamId = defaults.streamId;
    	      this.streamPoolId = defaults.streamPoolId;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStateDetails(String lifecycleStateDetails) {
            this.lifecycleStateDetails = Objects.requireNonNull(lifecycleStateDetails);
            return this;
        }
        @CustomType.Setter
        public Builder messagesEndpoint(String messagesEndpoint) {
            this.messagesEndpoint = Objects.requireNonNull(messagesEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder partitions(Integer partitions) {
            this.partitions = Objects.requireNonNull(partitions);
            return this;
        }
        @CustomType.Setter
        public Builder retentionInHours(Integer retentionInHours) {
            this.retentionInHours = Objects.requireNonNull(retentionInHours);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            this.streamId = Objects.requireNonNull(streamId);
            return this;
        }
        @CustomType.Setter
        public Builder streamPoolId(String streamPoolId) {
            this.streamPoolId = Objects.requireNonNull(streamPoolId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public GetStreamResult build() {
            final var _resultValue = new GetStreamResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleStateDetails = lifecycleStateDetails;
            _resultValue.messagesEndpoint = messagesEndpoint;
            _resultValue.name = name;
            _resultValue.partitions = partitions;
            _resultValue.retentionInHours = retentionInHours;
            _resultValue.state = state;
            _resultValue.streamId = streamId;
            _resultValue.streamPoolId = streamPoolId;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
