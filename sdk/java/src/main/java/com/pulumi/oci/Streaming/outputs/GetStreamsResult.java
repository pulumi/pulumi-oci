// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Streaming.outputs.GetStreamsFilter;
import com.pulumi.oci.Streaming.outputs.GetStreamsStream;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStreamsResult {
    /**
     * @return The OCID of the compartment that contains the stream.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable List<GetStreamsFilter> filters;
    /**
     * @return The OCID of the stream.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
     * 
     */
    private @Nullable String name;
    /**
     * @return The current state of the stream.
     * 
     */
    private @Nullable String state;
    /**
     * @return The OCID of the stream pool that contains the stream.
     * 
     */
    private @Nullable String streamPoolId;
    /**
     * @return The list of streams.
     * 
     */
    private @Nullable List<GetStreamsStream> streams;

    private GetStreamsResult() {}
    /**
     * @return The OCID of the compartment that contains the stream.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetStreamsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The OCID of the stream.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The current state of the stream.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the stream pool that contains the stream.
     * 
     */
    public Optional<String> streamPoolId() {
        return Optional.ofNullable(this.streamPoolId);
    }
    /**
     * @return The list of streams.
     * 
     */
    public List<GetStreamsStream> streams() {
        return this.streams == null ? List.of() : this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetStreamsFilter> filters;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable String streamPoolId;
        private @Nullable List<GetStreamsStream> streams;
        public Builder() {}
        public Builder(GetStreamsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.streamPoolId = defaults.streamPoolId;
    	      this.streams = defaults.streams;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetStreamsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetStreamsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamPoolId(@Nullable String streamPoolId) {
            this.streamPoolId = streamPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder streams(@Nullable List<GetStreamsStream> streams) {
            this.streams = streams;
            return this;
        }
        public Builder streams(GetStreamsStream... streams) {
            return streams(List.of(streams));
        }
        public GetStreamsResult build() {
            final var o = new GetStreamsResult();
            o.compartmentId = compartmentId;
            o.filters = filters;
            o.id = id;
            o.name = name;
            o.state = state;
            o.streamPoolId = streamPoolId;
            o.streams = streams;
            return o;
        }
    }
}
