// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamsStream {
    /**
     * @return The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}&#39;
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return A filter to return only resources that match the given ID exactly.
     * 
     */
    private String id;
    /**
     * @return Any additional details about the current state of the stream.
     * 
     */
    private String lifecycleStateDetails;
    /**
     * @return The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool&#39;s associated subnet.
     * 
     */
    private String messagesEndpoint;
    /**
     * @return A filter to return only resources that match the given name exactly.
     * 
     */
    private String name;
    /**
     * @return The number of partitions in the stream.
     * 
     */
    private Integer partitions;
    /**
     * @return The retention period of the stream, in hours. This property is read-only.
     * 
     */
    private Integer retentionInHours;
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    private String state;
    /**
     * @return The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
     * 
     */
    private String streamPoolId;
    /**
     * @return The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    private String timeCreated;

    private GetStreamsStream() {}
    /**
     * @return The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations&#34;: {&#34;CostCenter&#34;: &#34;42&#34;}}&#39;
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A filter to return only resources that match the given ID exactly.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Any additional details about the current state of the stream.
     * 
     */
    public String lifecycleStateDetails() {
        return this.lifecycleStateDetails;
    }
    /**
     * @return The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool&#39;s associated subnet.
     * 
     */
    public String messagesEndpoint() {
        return this.messagesEndpoint;
    }
    /**
     * @return A filter to return only resources that match the given name exactly.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of partitions in the stream.
     * 
     */
    public Integer partitions() {
        return this.partitions;
    }
    /**
     * @return The retention period of the stream, in hours. This property is read-only.
     * 
     */
    public Integer retentionInHours() {
        return this.retentionInHours;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
     * 
     */
    public String streamPoolId() {
        return this.streamPoolId;
    }
    /**
     * @return The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamsStream defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleStateDetails;
        private String messagesEndpoint;
        private String name;
        private Integer partitions;
        private Integer retentionInHours;
        private String state;
        private String streamPoolId;
        private String timeCreated;
        public Builder() {}
        public Builder(GetStreamsStream defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleStateDetails = defaults.lifecycleStateDetails;
    	      this.messagesEndpoint = defaults.messagesEndpoint;
    	      this.name = defaults.name;
    	      this.partitions = defaults.partitions;
    	      this.retentionInHours = defaults.retentionInHours;
    	      this.state = defaults.state;
    	      this.streamPoolId = defaults.streamPoolId;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleStateDetails(String lifecycleStateDetails) {
            if (lifecycleStateDetails == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "lifecycleStateDetails");
            }
            this.lifecycleStateDetails = lifecycleStateDetails;
            return this;
        }
        @CustomType.Setter
        public Builder messagesEndpoint(String messagesEndpoint) {
            if (messagesEndpoint == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "messagesEndpoint");
            }
            this.messagesEndpoint = messagesEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partitions(Integer partitions) {
            if (partitions == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "partitions");
            }
            this.partitions = partitions;
            return this;
        }
        @CustomType.Setter
        public Builder retentionInHours(Integer retentionInHours) {
            if (retentionInHours == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "retentionInHours");
            }
            this.retentionInHours = retentionInHours;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamPoolId(String streamPoolId) {
            if (streamPoolId == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "streamPoolId");
            }
            this.streamPoolId = streamPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetStreamsStream", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetStreamsStream build() {
            final var _resultValue = new GetStreamsStream();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleStateDetails = lifecycleStateDetails;
            _resultValue.messagesEndpoint = messagesEndpoint;
            _resultValue.name = name;
            _resultValue.partitions = partitions;
            _resultValue.retentionInHours = retentionInHours;
            _resultValue.state = state;
            _resultValue.streamPoolId = streamPoolId;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
