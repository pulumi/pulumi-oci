// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamPoolKafkaSettings {
    /**
     * @return (Updatable) Enable auto creation of topic on the server.
     * 
     */
    private @Nullable Boolean autoCreateTopicsEnable;
    /**
     * @return (Updatable) Bootstrap servers.
     * 
     */
    private @Nullable String bootstrapServers;
    /**
     * @return (Updatable) The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    private @Nullable Integer logRetentionHours;
    /**
     * @return (Updatable) The default number of log partitions per topic.
     * 
     */
    private @Nullable Integer numPartitions;

    private StreamPoolKafkaSettings() {}
    /**
     * @return (Updatable) Enable auto creation of topic on the server.
     * 
     */
    public Optional<Boolean> autoCreateTopicsEnable() {
        return Optional.ofNullable(this.autoCreateTopicsEnable);
    }
    /**
     * @return (Updatable) Bootstrap servers.
     * 
     */
    public Optional<String> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }
    /**
     * @return (Updatable) The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    public Optional<Integer> logRetentionHours() {
        return Optional.ofNullable(this.logRetentionHours);
    }
    /**
     * @return (Updatable) The default number of log partitions per topic.
     * 
     */
    public Optional<Integer> numPartitions() {
        return Optional.ofNullable(this.numPartitions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamPoolKafkaSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoCreateTopicsEnable;
        private @Nullable String bootstrapServers;
        private @Nullable Integer logRetentionHours;
        private @Nullable Integer numPartitions;
        public Builder() {}
        public Builder(StreamPoolKafkaSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCreateTopicsEnable = defaults.autoCreateTopicsEnable;
    	      this.bootstrapServers = defaults.bootstrapServers;
    	      this.logRetentionHours = defaults.logRetentionHours;
    	      this.numPartitions = defaults.numPartitions;
        }

        @CustomType.Setter
        public Builder autoCreateTopicsEnable(@Nullable Boolean autoCreateTopicsEnable) {

            this.autoCreateTopicsEnable = autoCreateTopicsEnable;
            return this;
        }
        @CustomType.Setter
        public Builder bootstrapServers(@Nullable String bootstrapServers) {

            this.bootstrapServers = bootstrapServers;
            return this;
        }
        @CustomType.Setter
        public Builder logRetentionHours(@Nullable Integer logRetentionHours) {

            this.logRetentionHours = logRetentionHours;
            return this;
        }
        @CustomType.Setter
        public Builder numPartitions(@Nullable Integer numPartitions) {

            this.numPartitions = numPartitions;
            return this;
        }
        public StreamPoolKafkaSettings build() {
            final var _resultValue = new StreamPoolKafkaSettings();
            _resultValue.autoCreateTopicsEnable = autoCreateTopicsEnable;
            _resultValue.bootstrapServers = bootstrapServers;
            _resultValue.logRetentionHours = logRetentionHours;
            _resultValue.numPartitions = numPartitions;
            return _resultValue;
        }
    }
}
