// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Tenantmanagercontrolplane.inputs.GetRecipientInvitationsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecipientInvitationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRecipientInvitationsArgs Empty = new GetRecipientInvitationsArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetRecipientInvitationsFilterArgs>> filters;

    public Optional<Output<List<GetRecipientInvitationsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The tenancy that sent the invitation.
     * 
     */
    @Import(name="senderTenancyId")
    private @Nullable Output<String> senderTenancyId;

    /**
     * @return The tenancy that sent the invitation.
     * 
     */
    public Optional<Output<String>> senderTenancyId() {
        return Optional.ofNullable(this.senderTenancyId);
    }

    /**
     * The lifecycle state of the resource.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The lifecycle state of the resource.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The status of the recipient invitation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the recipient invitation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetRecipientInvitationsArgs() {}

    private GetRecipientInvitationsArgs(GetRecipientInvitationsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.senderTenancyId = $.senderTenancyId;
        this.state = $.state;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecipientInvitationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecipientInvitationsArgs $;

        public Builder() {
            $ = new GetRecipientInvitationsArgs();
        }

        public Builder(GetRecipientInvitationsArgs defaults) {
            $ = new GetRecipientInvitationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetRecipientInvitationsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetRecipientInvitationsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRecipientInvitationsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param senderTenancyId The tenancy that sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder senderTenancyId(@Nullable Output<String> senderTenancyId) {
            $.senderTenancyId = senderTenancyId;
            return this;
        }

        /**
         * @param senderTenancyId The tenancy that sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder senderTenancyId(String senderTenancyId) {
            return senderTenancyId(Output.of(senderTenancyId));
        }

        /**
         * @param state The lifecycle state of the resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The lifecycle state of the resource.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status The status of the recipient invitation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the recipient invitation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetRecipientInvitationsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetRecipientInvitationsArgs", "compartmentId");
            }
            return $;
        }
    }

}
