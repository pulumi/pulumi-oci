// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Tenantmanagercontrolplane.inputs.GetSubscriptionsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubscriptionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubscriptionsArgs Empty = new GetSubscriptionsArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The version of the subscription entity.
     * 
     */
    @Import(name="entityVersion")
    private @Nullable Output<String> entityVersion;

    /**
     * @return The version of the subscription entity.
     * 
     */
    public Optional<Output<String>> entityVersion() {
        return Optional.ofNullable(this.entityVersion);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSubscriptionsFilterArgs>> filters;

    public Optional<Output<List<GetSubscriptionsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of the subscription to which the tenancy is associated.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The ID of the subscription to which the tenancy is associated.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private GetSubscriptionsArgs() {}

    private GetSubscriptionsArgs(GetSubscriptionsArgs $) {
        this.compartmentId = $.compartmentId;
        this.entityVersion = $.entityVersion;
        this.filters = $.filters;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubscriptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubscriptionsArgs $;

        public Builder() {
            $ = new GetSubscriptionsArgs();
        }

        public Builder(GetSubscriptionsArgs defaults) {
            $ = new GetSubscriptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param entityVersion The version of the subscription entity.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(@Nullable Output<String> entityVersion) {
            $.entityVersion = entityVersion;
            return this;
        }

        /**
         * @param entityVersion The version of the subscription entity.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(String entityVersion) {
            return entityVersion(Output.of(entityVersion));
        }

        public Builder filters(@Nullable Output<List<GetSubscriptionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSubscriptionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSubscriptionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param subscriptionId The ID of the subscription to which the tenancy is associated.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The ID of the subscription to which the tenancy is associated.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public GetSubscriptionsArgs build() {
            return $;
        }
    }

}
