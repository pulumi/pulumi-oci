// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionMappingState extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionMappingState Empty = new SubscriptionMappingState();

    /**
     * OCID of the compartment. Always a tenancy OCID.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return OCID of the compartment. Always a tenancy OCID.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Denotes if the subscription is explicity assigned to the root compartment or tenancy.
     * 
     */
    @Import(name="isExplicitlyAssigned")
    private @Nullable Output<Boolean> isExplicitlyAssigned;

    /**
     * @return Denotes if the subscription is explicity assigned to the root compartment or tenancy.
     * 
     */
    public Optional<Output<Boolean>> isExplicitlyAssigned() {
        return Optional.ofNullable(this.isExplicitlyAssigned);
    }

    /**
     * Lifecycle state of the subscriptionMapping.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Lifecycle state of the subscriptionMapping.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * OCID of Subscription.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return OCID of Subscription.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * Date-time when subscription mapping was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Date-time when subscription mapping was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Date-time when subscription mapping was terminated.
     * 
     */
    @Import(name="timeTerminated")
    private @Nullable Output<String> timeTerminated;

    /**
     * @return Date-time when subscription mapping was terminated.
     * 
     */
    public Optional<Output<String>> timeTerminated() {
        return Optional.ofNullable(this.timeTerminated);
    }

    /**
     * Date-time when subscription mapping was updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return Date-time when subscription mapping was updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private SubscriptionMappingState() {}

    private SubscriptionMappingState(SubscriptionMappingState $) {
        this.compartmentId = $.compartmentId;
        this.isExplicitlyAssigned = $.isExplicitlyAssigned;
        this.state = $.state;
        this.subscriptionId = $.subscriptionId;
        this.timeCreated = $.timeCreated;
        this.timeTerminated = $.timeTerminated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionMappingState $;

        public Builder() {
            $ = new SubscriptionMappingState();
        }

        public Builder(SubscriptionMappingState defaults) {
            $ = new SubscriptionMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId OCID of the compartment. Always a tenancy OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId OCID of the compartment. Always a tenancy OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param isExplicitlyAssigned Denotes if the subscription is explicity assigned to the root compartment or tenancy.
         * 
         * @return builder
         * 
         */
        public Builder isExplicitlyAssigned(@Nullable Output<Boolean> isExplicitlyAssigned) {
            $.isExplicitlyAssigned = isExplicitlyAssigned;
            return this;
        }

        /**
         * @param isExplicitlyAssigned Denotes if the subscription is explicity assigned to the root compartment or tenancy.
         * 
         * @return builder
         * 
         */
        public Builder isExplicitlyAssigned(Boolean isExplicitlyAssigned) {
            return isExplicitlyAssigned(Output.of(isExplicitlyAssigned));
        }

        /**
         * @param state Lifecycle state of the subscriptionMapping.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Lifecycle state of the subscriptionMapping.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subscriptionId OCID of Subscription.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId OCID of Subscription.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param timeCreated Date-time when subscription mapping was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Date-time when subscription mapping was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeTerminated Date-time when subscription mapping was terminated.
         * 
         * @return builder
         * 
         */
        public Builder timeTerminated(@Nullable Output<String> timeTerminated) {
            $.timeTerminated = timeTerminated;
            return this;
        }

        /**
         * @param timeTerminated Date-time when subscription mapping was terminated.
         * 
         * @return builder
         * 
         */
        public Builder timeTerminated(String timeTerminated) {
            return timeTerminated(Output.of(timeTerminated));
        }

        /**
         * @param timeUpdated Date-time when subscription mapping was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated Date-time when subscription mapping was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public SubscriptionMappingState build() {
            return $;
        }
    }

}
