// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDomainGovernancesDomainGovernanceCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The domain OCID.
     * 
     */
    private String domainId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the domain governance entity.
     * 
     */
    private String id;
    /**
     * @return Indicates whether governance is enabled for this domain.
     * 
     */
    private Boolean isGovernanceEnabled;
    /**
     * @return The ONS subscription associated with this domain governance entity.
     * 
     */
    private String onsSubscriptionId;
    /**
     * @return The ONS topic associated with this domain governance entity.
     * 
     */
    private String onsTopicId;
    /**
     * @return The OCID of the tenancy that owns this domain governance entity.
     * 
     */
    private String ownerId;
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    private String state;
    /**
     * @return Email address to be used to notify the user, and that the ONS subscription will be created with.
     * 
     */
    private String subscriptionEmail;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return Date-time when this domain governance was created. An RFC 3339-formatted date and time string.
     * 
     */
    private String timeCreated;
    /**
     * @return Date-time when this domain governance was last updated. An RFC 3339-formatted date and time string.
     * 
     */
    private String timeUpdated;

    private GetDomainGovernancesDomainGovernanceCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The domain OCID.
     * 
     */
    public String domainId() {
        return this.domainId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the domain governance entity.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether governance is enabled for this domain.
     * 
     */
    public Boolean isGovernanceEnabled() {
        return this.isGovernanceEnabled;
    }
    /**
     * @return The ONS subscription associated with this domain governance entity.
     * 
     */
    public String onsSubscriptionId() {
        return this.onsSubscriptionId;
    }
    /**
     * @return The ONS topic associated with this domain governance entity.
     * 
     */
    public String onsTopicId() {
        return this.onsTopicId;
    }
    /**
     * @return The OCID of the tenancy that owns this domain governance entity.
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Email address to be used to notify the user, and that the ONS subscription will be created with.
     * 
     */
    public String subscriptionEmail() {
        return this.subscriptionEmail;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Date-time when this domain governance was created. An RFC 3339-formatted date and time string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date-time when this domain governance was last updated. An RFC 3339-formatted date and time string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainGovernancesDomainGovernanceCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String domainId;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isGovernanceEnabled;
        private String onsSubscriptionId;
        private String onsTopicId;
        private String ownerId;
        private String state;
        private String subscriptionEmail;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDomainGovernancesDomainGovernanceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.domainId = defaults.domainId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isGovernanceEnabled = defaults.isGovernanceEnabled;
    	      this.onsSubscriptionId = defaults.onsSubscriptionId;
    	      this.onsTopicId = defaults.onsTopicId;
    	      this.ownerId = defaults.ownerId;
    	      this.state = defaults.state;
    	      this.subscriptionEmail = defaults.subscriptionEmail;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isGovernanceEnabled(Boolean isGovernanceEnabled) {
            if (isGovernanceEnabled == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "isGovernanceEnabled");
            }
            this.isGovernanceEnabled = isGovernanceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder onsSubscriptionId(String onsSubscriptionId) {
            if (onsSubscriptionId == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "onsSubscriptionId");
            }
            this.onsSubscriptionId = onsSubscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder onsTopicId(String onsTopicId) {
            if (onsTopicId == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "onsTopicId");
            }
            this.onsTopicId = onsTopicId;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionEmail(String subscriptionEmail) {
            if (subscriptionEmail == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "subscriptionEmail");
            }
            this.subscriptionEmail = subscriptionEmail;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDomainGovernancesDomainGovernanceCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDomainGovernancesDomainGovernanceCollectionItem build() {
            final var _resultValue = new GetDomainGovernancesDomainGovernanceCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.domainId = domainId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isGovernanceEnabled = isGovernanceEnabled;
            _resultValue.onsSubscriptionId = onsSubscriptionId;
            _resultValue.onsTopicId = onsTopicId;
            _resultValue.ownerId = ownerId;
            _resultValue.state = state;
            _resultValue.subscriptionEmail = subscriptionEmail;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
