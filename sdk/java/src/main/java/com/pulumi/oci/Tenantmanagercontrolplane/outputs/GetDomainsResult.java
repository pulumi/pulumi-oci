// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetDomainsDomainCollection;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetDomainsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainsResult {
    private String compartmentId;
    /**
     * @return The list of domain_collection.
     * 
     */
    private List<GetDomainsDomainCollection> domainCollections;
    private @Nullable String domainId;
    private @Nullable List<GetDomainsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String name;
    /**
     * @return Lifecycle state of the domain.
     * 
     */
    private @Nullable String state;
    /**
     * @return Status of the domain.
     * 
     */
    private @Nullable String status;

    private GetDomainsResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of domain_collection.
     * 
     */
    public List<GetDomainsDomainCollection> domainCollections() {
        return this.domainCollections;
    }
    public Optional<String> domainId() {
        return Optional.ofNullable(this.domainId);
    }
    public List<GetDomainsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Lifecycle state of the domain.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Status of the domain.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetDomainsDomainCollection> domainCollections;
        private @Nullable String domainId;
        private @Nullable List<GetDomainsFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable String state;
        private @Nullable String status;
        public Builder() {}
        public Builder(GetDomainsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.domainCollections = defaults.domainCollections;
    	      this.domainId = defaults.domainId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDomainsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder domainCollections(List<GetDomainsDomainCollection> domainCollections) {
            if (domainCollections == null) {
              throw new MissingRequiredPropertyException("GetDomainsResult", "domainCollections");
            }
            this.domainCollections = domainCollections;
            return this;
        }
        public Builder domainCollections(GetDomainsDomainCollection... domainCollections) {
            return domainCollections(List.of(domainCollections));
        }
        @CustomType.Setter
        public Builder domainId(@Nullable String domainId) {

            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDomainsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDomainsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public GetDomainsResult build() {
            final var _resultValue = new GetDomainsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.domainCollections = domainCollections;
            _resultValue.domainId = domainId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
