// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetOrganizationResult {
    /**
     * @return OCID of the compartment containing the organization. Always a tenancy OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return OCID of the default Universal Credits Model subscription. Any tenancy joining the organization will automatically get assigned this subscription, if a subscription is not explictly assigned.
     * 
     */
    private String defaultUcmSubscriptionId;
    /**
     * @return A display name for the organization. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String organizationId;
    /**
     * @return The name of the tenancy that is the organization parent.
     * 
     */
    private String parentName;
    /**
     * @return Lifecycle state of the organization.
     * 
     */
    private String state;
    /**
     * @return Date and time when the organization was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Date and time when the organization was last updated.
     * 
     */
    private String timeUpdated;

    private GetOrganizationResult() {}
    /**
     * @return OCID of the compartment containing the organization. Always a tenancy OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return OCID of the default Universal Credits Model subscription. Any tenancy joining the organization will automatically get assigned this subscription, if a subscription is not explictly assigned.
     * 
     */
    public String defaultUcmSubscriptionId() {
        return this.defaultUcmSubscriptionId;
    }
    /**
     * @return A display name for the organization. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return The name of the tenancy that is the organization parent.
     * 
     */
    public String parentName() {
        return this.parentName;
    }
    /**
     * @return Lifecycle state of the organization.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time when the organization was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time when the organization was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String defaultUcmSubscriptionId;
        private String displayName;
        private String id;
        private String organizationId;
        private String parentName;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetOrganizationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.defaultUcmSubscriptionId = defaults.defaultUcmSubscriptionId;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.organizationId = defaults.organizationId;
    	      this.parentName = defaults.parentName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultUcmSubscriptionId(String defaultUcmSubscriptionId) {
            if (defaultUcmSubscriptionId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "defaultUcmSubscriptionId");
            }
            this.defaultUcmSubscriptionId = defaultUcmSubscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder parentName(String parentName) {
            if (parentName == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "parentName");
            }
            this.parentName = parentName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetOrganizationResult build() {
            final var _resultValue = new GetOrganizationResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.defaultUcmSubscriptionId = defaultUcmSubscriptionId;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.organizationId = organizationId;
            _resultValue.parentName = parentName;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
