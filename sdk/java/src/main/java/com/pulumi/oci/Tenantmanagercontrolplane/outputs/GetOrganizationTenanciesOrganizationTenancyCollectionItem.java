// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetOrganizationTenanciesOrganizationTenancyCollectionItem {
    /**
     * @return The governance status of the tenancy.
     * 
     */
    private String governanceStatus;
    /**
     * @return Parameter to indicate the tenancy is approved for transfer to another organization.
     * 
     */
    private Boolean isApprovedForTransfer;
    /**
     * @return Name of the tenancy.
     * 
     */
    private String name;
    /**
     * @return Role of the organization tenancy.
     * 
     */
    private String role;
    /**
     * @return Lifecycle state of the organization tenancy.
     * 
     */
    private String state;
    /**
     * @return OCID of the tenancy.
     * 
     */
    private String tenancyId;
    /**
     * @return Date and time when the tenancy joined the organization.
     * 
     */
    private String timeJoined;
    /**
     * @return Date and time when the tenancy left the organization.
     * 
     */
    private String timeLeft;

    private GetOrganizationTenanciesOrganizationTenancyCollectionItem() {}
    /**
     * @return The governance status of the tenancy.
     * 
     */
    public String governanceStatus() {
        return this.governanceStatus;
    }
    /**
     * @return Parameter to indicate the tenancy is approved for transfer to another organization.
     * 
     */
    public Boolean isApprovedForTransfer() {
        return this.isApprovedForTransfer;
    }
    /**
     * @return Name of the tenancy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Role of the organization tenancy.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return Lifecycle state of the organization tenancy.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return OCID of the tenancy.
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return Date and time when the tenancy joined the organization.
     * 
     */
    public String timeJoined() {
        return this.timeJoined;
    }
    /**
     * @return Date and time when the tenancy left the organization.
     * 
     */
    public String timeLeft() {
        return this.timeLeft;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationTenanciesOrganizationTenancyCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String governanceStatus;
        private Boolean isApprovedForTransfer;
        private String name;
        private String role;
        private String state;
        private String tenancyId;
        private String timeJoined;
        private String timeLeft;
        public Builder() {}
        public Builder(GetOrganizationTenanciesOrganizationTenancyCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.governanceStatus = defaults.governanceStatus;
    	      this.isApprovedForTransfer = defaults.isApprovedForTransfer;
    	      this.name = defaults.name;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeJoined = defaults.timeJoined;
    	      this.timeLeft = defaults.timeLeft;
        }

        @CustomType.Setter
        public Builder governanceStatus(String governanceStatus) {
            if (governanceStatus == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "governanceStatus");
            }
            this.governanceStatus = governanceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder isApprovedForTransfer(Boolean isApprovedForTransfer) {
            if (isApprovedForTransfer == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "isApprovedForTransfer");
            }
            this.isApprovedForTransfer = isApprovedForTransfer;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            if (tenancyId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "tenancyId");
            }
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeJoined(String timeJoined) {
            if (timeJoined == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "timeJoined");
            }
            this.timeJoined = timeJoined;
            return this;
        }
        @CustomType.Setter
        public Builder timeLeft(String timeLeft) {
            if (timeLeft == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTenanciesOrganizationTenancyCollectionItem", "timeLeft");
            }
            this.timeLeft = timeLeft;
            return this;
        }
        public GetOrganizationTenanciesOrganizationTenancyCollectionItem build() {
            final var _resultValue = new GetOrganizationTenanciesOrganizationTenancyCollectionItem();
            _resultValue.governanceStatus = governanceStatus;
            _resultValue.isApprovedForTransfer = isApprovedForTransfer;
            _resultValue.name = name;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.tenancyId = tenancyId;
            _resultValue.timeJoined = timeJoined;
            _resultValue.timeLeft = timeLeft;
            return _resultValue;
        }
    }
}
