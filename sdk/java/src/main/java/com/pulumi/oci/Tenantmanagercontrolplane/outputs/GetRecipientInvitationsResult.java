// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetRecipientInvitationsFilter;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetRecipientInvitationsRecipientInvitationCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRecipientInvitationsResult {
    /**
     * @return OCID of the recipient tenancy.
     * 
     */
    private String compartmentId;
    private @Nullable List<GetRecipientInvitationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of recipient_invitation_collection.
     * 
     */
    private List<GetRecipientInvitationsRecipientInvitationCollection> recipientInvitationCollections;
    /**
     * @return OCID of the sender tenancy.
     * 
     */
    private @Nullable String senderTenancyId;
    /**
     * @return Lifecycle state of the recipient invitation.
     * 
     */
    private @Nullable String state;
    /**
     * @return Status of the recipient invitation.
     * 
     */
    private @Nullable String status;

    private GetRecipientInvitationsResult() {}
    /**
     * @return OCID of the recipient tenancy.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetRecipientInvitationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of recipient_invitation_collection.
     * 
     */
    public List<GetRecipientInvitationsRecipientInvitationCollection> recipientInvitationCollections() {
        return this.recipientInvitationCollections;
    }
    /**
     * @return OCID of the sender tenancy.
     * 
     */
    public Optional<String> senderTenancyId() {
        return Optional.ofNullable(this.senderTenancyId);
    }
    /**
     * @return Lifecycle state of the recipient invitation.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Status of the recipient invitation.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecipientInvitationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetRecipientInvitationsFilter> filters;
        private String id;
        private List<GetRecipientInvitationsRecipientInvitationCollection> recipientInvitationCollections;
        private @Nullable String senderTenancyId;
        private @Nullable String state;
        private @Nullable String status;
        public Builder() {}
        public Builder(GetRecipientInvitationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.recipientInvitationCollections = defaults.recipientInvitationCollections;
    	      this.senderTenancyId = defaults.senderTenancyId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetRecipientInvitationsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRecipientInvitationsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetRecipientInvitationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecipientInvitationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder recipientInvitationCollections(List<GetRecipientInvitationsRecipientInvitationCollection> recipientInvitationCollections) {
            if (recipientInvitationCollections == null) {
              throw new MissingRequiredPropertyException("GetRecipientInvitationsResult", "recipientInvitationCollections");
            }
            this.recipientInvitationCollections = recipientInvitationCollections;
            return this;
        }
        public Builder recipientInvitationCollections(GetRecipientInvitationsRecipientInvitationCollection... recipientInvitationCollections) {
            return recipientInvitationCollections(List.of(recipientInvitationCollections));
        }
        @CustomType.Setter
        public Builder senderTenancyId(@Nullable String senderTenancyId) {

            this.senderTenancyId = senderTenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public GetRecipientInvitationsResult build() {
            final var _resultValue = new GetRecipientInvitationsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.recipientInvitationCollections = recipientInvitationCollections;
            _resultValue.senderTenancyId = senderTenancyId;
            _resultValue.state = state;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
