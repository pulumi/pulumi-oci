// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetSubscriptionAvailableRegionsAvailableRegionCollection;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetSubscriptionAvailableRegionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionAvailableRegionsResult {
    /**
     * @return The list of available_region_collection.
     * 
     */
    private List<GetSubscriptionAvailableRegionsAvailableRegionCollection> availableRegionCollections;
    private @Nullable List<GetSubscriptionAvailableRegionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String subscriptionId;

    private GetSubscriptionAvailableRegionsResult() {}
    /**
     * @return The list of available_region_collection.
     * 
     */
    public List<GetSubscriptionAvailableRegionsAvailableRegionCollection> availableRegionCollections() {
        return this.availableRegionCollections;
    }
    public List<GetSubscriptionAvailableRegionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionAvailableRegionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSubscriptionAvailableRegionsAvailableRegionCollection> availableRegionCollections;
        private @Nullable List<GetSubscriptionAvailableRegionsFilter> filters;
        private String id;
        private String subscriptionId;
        public Builder() {}
        public Builder(GetSubscriptionAvailableRegionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableRegionCollections = defaults.availableRegionCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        @CustomType.Setter
        public Builder availableRegionCollections(List<GetSubscriptionAvailableRegionsAvailableRegionCollection> availableRegionCollections) {
            if (availableRegionCollections == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionAvailableRegionsResult", "availableRegionCollections");
            }
            this.availableRegionCollections = availableRegionCollections;
            return this;
        }
        public Builder availableRegionCollections(GetSubscriptionAvailableRegionsAvailableRegionCollection... availableRegionCollections) {
            return availableRegionCollections(List.of(availableRegionCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSubscriptionAvailableRegionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubscriptionAvailableRegionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionAvailableRegionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionAvailableRegionsResult", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        public GetSubscriptionAvailableRegionsResult build() {
            final var _resultValue = new GetSubscriptionAvailableRegionsResult();
            _resultValue.availableRegionCollections = availableRegionCollections;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.subscriptionId = subscriptionId;
            return _resultValue;
        }
    }
}
