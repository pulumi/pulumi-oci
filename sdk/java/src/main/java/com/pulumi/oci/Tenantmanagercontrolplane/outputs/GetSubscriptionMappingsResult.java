// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetSubscriptionMappingsFilter;
import com.pulumi.oci.Tenantmanagercontrolplane.outputs.GetSubscriptionMappingsSubscriptionMappingCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionMappingsResult {
    /**
     * @return OCID of the compartment. Always a tenancy OCID.
     * 
     */
    private @Nullable String compartmentId;
    private @Nullable List<GetSubscriptionMappingsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Lifecycle state of the subscriptionMapping.
     * 
     */
    private @Nullable String state;
    /**
     * @return OCID of the subscription.
     * 
     */
    private String subscriptionId;
    /**
     * @return The list of subscription_mapping_collection.
     * 
     */
    private List<GetSubscriptionMappingsSubscriptionMappingCollection> subscriptionMappingCollections;
    private @Nullable String subscriptionMappingId;

    private GetSubscriptionMappingsResult() {}
    /**
     * @return OCID of the compartment. Always a tenancy OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public List<GetSubscriptionMappingsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Lifecycle state of the subscriptionMapping.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return OCID of the subscription.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return The list of subscription_mapping_collection.
     * 
     */
    public List<GetSubscriptionMappingsSubscriptionMappingCollection> subscriptionMappingCollections() {
        return this.subscriptionMappingCollections;
    }
    public Optional<String> subscriptionMappingId() {
        return Optional.ofNullable(this.subscriptionMappingId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionMappingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetSubscriptionMappingsFilter> filters;
        private String id;
        private @Nullable String state;
        private String subscriptionId;
        private List<GetSubscriptionMappingsSubscriptionMappingCollection> subscriptionMappingCollections;
        private @Nullable String subscriptionMappingId;
        public Builder() {}
        public Builder(GetSubscriptionMappingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.subscriptionMappingCollections = defaults.subscriptionMappingCollections;
    	      this.subscriptionMappingId = defaults.subscriptionMappingId;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSubscriptionMappingsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubscriptionMappingsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsResult", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionMappingCollections(List<GetSubscriptionMappingsSubscriptionMappingCollection> subscriptionMappingCollections) {
            if (subscriptionMappingCollections == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsResult", "subscriptionMappingCollections");
            }
            this.subscriptionMappingCollections = subscriptionMappingCollections;
            return this;
        }
        public Builder subscriptionMappingCollections(GetSubscriptionMappingsSubscriptionMappingCollection... subscriptionMappingCollections) {
            return subscriptionMappingCollections(List.of(subscriptionMappingCollections));
        }
        @CustomType.Setter
        public Builder subscriptionMappingId(@Nullable String subscriptionMappingId) {

            this.subscriptionMappingId = subscriptionMappingId;
            return this;
        }
        public GetSubscriptionMappingsResult build() {
            final var _resultValue = new GetSubscriptionMappingsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.subscriptionMappingCollections = subscriptionMappingCollections;
            _resultValue.subscriptionMappingId = subscriptionMappingId;
            return _resultValue;
        }
    }
}
