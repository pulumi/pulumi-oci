// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubscriptionMappingsSubscriptionMappingCollectionItem {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return OCID of the mapping between subscription and compartment identified by the tenancy.
     * 
     */
    private String id;
    /**
     * @return Denotes if the subscription is explicity assigned to the root compartment or tenancy.
     * 
     */
    private Boolean isExplicitlyAssigned;
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    private String state;
    /**
     * @return OCID of the subscription.
     * 
     */
    private String subscriptionId;
    /**
     * @return Date-time when subscription mapping was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Date-time when subscription mapping was terminated.
     * 
     */
    private String timeTerminated;
    /**
     * @return Date-time when subscription mapping was updated.
     * 
     */
    private String timeUpdated;

    private GetSubscriptionMappingsSubscriptionMappingCollectionItem() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return OCID of the mapping between subscription and compartment identified by the tenancy.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Denotes if the subscription is explicity assigned to the root compartment or tenancy.
     * 
     */
    public Boolean isExplicitlyAssigned() {
        return this.isExplicitlyAssigned;
    }
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return OCID of the subscription.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Date-time when subscription mapping was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date-time when subscription mapping was terminated.
     * 
     */
    public String timeTerminated() {
        return this.timeTerminated;
    }
    /**
     * @return Date-time when subscription mapping was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionMappingsSubscriptionMappingCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String id;
        private Boolean isExplicitlyAssigned;
        private String state;
        private String subscriptionId;
        private String timeCreated;
        private String timeTerminated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSubscriptionMappingsSubscriptionMappingCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isExplicitlyAssigned = defaults.isExplicitlyAssigned;
    	      this.state = defaults.state;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTerminated = defaults.timeTerminated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isExplicitlyAssigned(Boolean isExplicitlyAssigned) {
            if (isExplicitlyAssigned == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "isExplicitlyAssigned");
            }
            this.isExplicitlyAssigned = isExplicitlyAssigned;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTerminated(String timeTerminated) {
            if (timeTerminated == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "timeTerminated");
            }
            this.timeTerminated = timeTerminated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionMappingsSubscriptionMappingCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSubscriptionMappingsSubscriptionMappingCollectionItem build() {
            final var _resultValue = new GetSubscriptionMappingsSubscriptionMappingCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.id = id;
            _resultValue.isExplicitlyAssigned = isExplicitlyAssigned;
            _resultValue.state = state;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeTerminated = timeTerminated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
