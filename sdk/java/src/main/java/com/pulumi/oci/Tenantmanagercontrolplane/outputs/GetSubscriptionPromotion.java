// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Tenantmanagercontrolplane.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubscriptionPromotion {
    /**
     * @return If a subscription is present, indicates the total amount of promotional subscription credits.
     * 
     */
    private Double amount;
    /**
     * @return Currency unit associated with the promotion.
     * 
     */
    private String currencyUnit;
    /**
     * @return Specifies how long the promotion related to the subscription, if any, is valid in duration units.
     * 
     */
    private Integer duration;
    /**
     * @return Unit for the duration.
     * 
     */
    private String durationUnit;
    /**
     * @return Speficies whether or not the customer intends to pay after the promotion has expired.
     * 
     */
    private Boolean isIntentToPay;
    /**
     * @return If a subscription is present, indicates the current status of the subscription promotion.
     * 
     */
    private String status;
    /**
     * @return Date and time when the promotion ends.
     * 
     */
    private String timeExpired;
    /**
     * @return Date and time when the promotion starts.
     * 
     */
    private String timeStarted;

    private GetSubscriptionPromotion() {}
    /**
     * @return If a subscription is present, indicates the total amount of promotional subscription credits.
     * 
     */
    public Double amount() {
        return this.amount;
    }
    /**
     * @return Currency unit associated with the promotion.
     * 
     */
    public String currencyUnit() {
        return this.currencyUnit;
    }
    /**
     * @return Specifies how long the promotion related to the subscription, if any, is valid in duration units.
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return Unit for the duration.
     * 
     */
    public String durationUnit() {
        return this.durationUnit;
    }
    /**
     * @return Speficies whether or not the customer intends to pay after the promotion has expired.
     * 
     */
    public Boolean isIntentToPay() {
        return this.isIntentToPay;
    }
    /**
     * @return If a subscription is present, indicates the current status of the subscription promotion.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Date and time when the promotion ends.
     * 
     */
    public String timeExpired() {
        return this.timeExpired;
    }
    /**
     * @return Date and time when the promotion starts.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionPromotion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double amount;
        private String currencyUnit;
        private Integer duration;
        private String durationUnit;
        private Boolean isIntentToPay;
        private String status;
        private String timeExpired;
        private String timeStarted;
        public Builder() {}
        public Builder(GetSubscriptionPromotion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.currencyUnit = defaults.currencyUnit;
    	      this.duration = defaults.duration;
    	      this.durationUnit = defaults.durationUnit;
    	      this.isIntentToPay = defaults.isIntentToPay;
    	      this.status = defaults.status;
    	      this.timeExpired = defaults.timeExpired;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder amount(Double amount) {
            if (amount == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "amount");
            }
            this.amount = amount;
            return this;
        }
        @CustomType.Setter
        public Builder currencyUnit(String currencyUnit) {
            if (currencyUnit == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "currencyUnit");
            }
            this.currencyUnit = currencyUnit;
            return this;
        }
        @CustomType.Setter
        public Builder duration(Integer duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder durationUnit(String durationUnit) {
            if (durationUnit == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "durationUnit");
            }
            this.durationUnit = durationUnit;
            return this;
        }
        @CustomType.Setter
        public Builder isIntentToPay(Boolean isIntentToPay) {
            if (isIntentToPay == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "isIntentToPay");
            }
            this.isIntentToPay = isIntentToPay;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpired(String timeExpired) {
            if (timeExpired == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "timeExpired");
            }
            this.timeExpired = timeExpired;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPromotion", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        public GetSubscriptionPromotion build() {
            final var _resultValue = new GetSubscriptionPromotion();
            _resultValue.amount = amount;
            _resultValue.currencyUnit = currencyUnit;
            _resultValue.duration = duration;
            _resultValue.durationUnit = durationUnit;
            _resultValue.isIntentToPay = isIntentToPay;
            _resultValue.status = status;
            _resultValue.timeExpired = timeExpired;
            _resultValue.timeStarted = timeStarted;
            return _resultValue;
        }
    }
}
