// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.UsageProxy.outputs.GetResourcesResourcesCollectionItemSkus;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetResourcesResourcesCollectionItem {
    /**
     * @return The details of any child resources.
     * 
     */
    private List<String> childResources;
    /**
     * @return Units to be used for daily aggregated data.
     * 
     */
    private String dailyUnitDisplayName;
    /**
     * @return Description of the resource.
     * 
     */
    private String description;
    /**
     * @return Units to be used for hourly aggregated data.
     * 
     */
    private String hourlyUnitDisplayName;
    /**
     * @return Instance type for the resource.
     * 
     */
    private String instanceType;
    /**
     * @return Indicates if the SKU was purchased
     * 
     */
    private Boolean isPurchased;
    /**
     * @return Name of the resource.
     * 
     */
    private String name;
    /**
     * @return Default units to use when unspecified.
     * 
     */
    private String rawUnitDisplayName;
    /**
     * @return Name of the service.
     * 
     */
    private String servicename;
    /**
     * @return The details of resource Skus.
     * 
     */
    private List<GetResourcesResourcesCollectionItemSkus> skuses;
    /**
     * @return Usage data type of the resource.
     * 
     */
    private String usageDataType;

    private GetResourcesResourcesCollectionItem() {}
    /**
     * @return The details of any child resources.
     * 
     */
    public List<String> childResources() {
        return this.childResources;
    }
    /**
     * @return Units to be used for daily aggregated data.
     * 
     */
    public String dailyUnitDisplayName() {
        return this.dailyUnitDisplayName;
    }
    /**
     * @return Description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Units to be used for hourly aggregated data.
     * 
     */
    public String hourlyUnitDisplayName() {
        return this.hourlyUnitDisplayName;
    }
    /**
     * @return Instance type for the resource.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return Indicates if the SKU was purchased
     * 
     */
    public Boolean isPurchased() {
        return this.isPurchased;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Default units to use when unspecified.
     * 
     */
    public String rawUnitDisplayName() {
        return this.rawUnitDisplayName;
    }
    /**
     * @return Name of the service.
     * 
     */
    public String servicename() {
        return this.servicename;
    }
    /**
     * @return The details of resource Skus.
     * 
     */
    public List<GetResourcesResourcesCollectionItemSkus> skuses() {
        return this.skuses;
    }
    /**
     * @return Usage data type of the resource.
     * 
     */
    public String usageDataType() {
        return this.usageDataType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResourcesResourcesCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> childResources;
        private String dailyUnitDisplayName;
        private String description;
        private String hourlyUnitDisplayName;
        private String instanceType;
        private Boolean isPurchased;
        private String name;
        private String rawUnitDisplayName;
        private String servicename;
        private List<GetResourcesResourcesCollectionItemSkus> skuses;
        private String usageDataType;
        public Builder() {}
        public Builder(GetResourcesResourcesCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childResources = defaults.childResources;
    	      this.dailyUnitDisplayName = defaults.dailyUnitDisplayName;
    	      this.description = defaults.description;
    	      this.hourlyUnitDisplayName = defaults.hourlyUnitDisplayName;
    	      this.instanceType = defaults.instanceType;
    	      this.isPurchased = defaults.isPurchased;
    	      this.name = defaults.name;
    	      this.rawUnitDisplayName = defaults.rawUnitDisplayName;
    	      this.servicename = defaults.servicename;
    	      this.skuses = defaults.skuses;
    	      this.usageDataType = defaults.usageDataType;
        }

        @CustomType.Setter
        public Builder childResources(List<String> childResources) {
            this.childResources = Objects.requireNonNull(childResources);
            return this;
        }
        public Builder childResources(String... childResources) {
            return childResources(List.of(childResources));
        }
        @CustomType.Setter
        public Builder dailyUnitDisplayName(String dailyUnitDisplayName) {
            this.dailyUnitDisplayName = Objects.requireNonNull(dailyUnitDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder hourlyUnitDisplayName(String hourlyUnitDisplayName) {
            this.hourlyUnitDisplayName = Objects.requireNonNull(hourlyUnitDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder isPurchased(Boolean isPurchased) {
            this.isPurchased = Objects.requireNonNull(isPurchased);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder rawUnitDisplayName(String rawUnitDisplayName) {
            this.rawUnitDisplayName = Objects.requireNonNull(rawUnitDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder servicename(String servicename) {
            this.servicename = Objects.requireNonNull(servicename);
            return this;
        }
        @CustomType.Setter
        public Builder skuses(List<GetResourcesResourcesCollectionItemSkus> skuses) {
            this.skuses = Objects.requireNonNull(skuses);
            return this;
        }
        public Builder skuses(GetResourcesResourcesCollectionItemSkus... skuses) {
            return skuses(List.of(skuses));
        }
        @CustomType.Setter
        public Builder usageDataType(String usageDataType) {
            this.usageDataType = Objects.requireNonNull(usageDataType);
            return this;
        }
        public GetResourcesResourcesCollectionItem build() {
            final var o = new GetResourcesResourcesCollectionItem();
            o.childResources = childResources;
            o.dailyUnitDisplayName = dailyUnitDisplayName;
            o.description = description;
            o.hourlyUnitDisplayName = hourlyUnitDisplayName;
            o.instanceType = instanceType;
            o.isPurchased = isPurchased;
            o.name = name;
            o.rawUnitDisplayName = rawUnitDisplayName;
            o.servicename = servicename;
            o.skuses = skuses;
            o.usageDataType = usageDataType;
            return o;
        }
    }
}
