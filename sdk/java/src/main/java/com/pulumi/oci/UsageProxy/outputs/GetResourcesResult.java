// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.UsageProxy.outputs.GetResourcesFilter;
import com.pulumi.oci.UsageProxy.outputs.GetResourcesResourcesCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetResourcesResult {
    private String compartmentId;
    private @Nullable String entitlementId;
    private @Nullable List<GetResourcesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of resources_collection.
     * 
     */
    private List<GetResourcesResourcesCollection> resourcesCollections;
    private String serviceName;

    private GetResourcesResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> entitlementId() {
        return Optional.ofNullable(this.entitlementId);
    }
    public List<GetResourcesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of resources_collection.
     * 
     */
    public List<GetResourcesResourcesCollection> resourcesCollections() {
        return this.resourcesCollections;
    }
    public String serviceName() {
        return this.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResourcesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String entitlementId;
        private @Nullable List<GetResourcesFilter> filters;
        private String id;
        private List<GetResourcesResourcesCollection> resourcesCollections;
        private String serviceName;
        public Builder() {}
        public Builder(GetResourcesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.entitlementId = defaults.entitlementId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.resourcesCollections = defaults.resourcesCollections;
    	      this.serviceName = defaults.serviceName;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetResourcesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder entitlementId(@Nullable String entitlementId) {

            this.entitlementId = entitlementId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetResourcesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetResourcesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResourcesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder resourcesCollections(List<GetResourcesResourcesCollection> resourcesCollections) {
            if (resourcesCollections == null) {
              throw new MissingRequiredPropertyException("GetResourcesResult", "resourcesCollections");
            }
            this.resourcesCollections = resourcesCollections;
            return this;
        }
        public Builder resourcesCollections(GetResourcesResourcesCollection... resourcesCollections) {
            return resourcesCollections(List.of(resourcesCollections));
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetResourcesResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        public GetResourcesResult build() {
            final var _resultValue = new GetResourcesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.entitlementId = entitlementId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.resourcesCollections = resourcesCollections;
            _resultValue.serviceName = serviceName;
            return _resultValue;
        }
    }
}
